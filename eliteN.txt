# file opened: eliteNext.asm
   1  0000                  DEVICE ZXSPECTRUMNEXT
   2  0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
   3  0000                  DEFINE  DOUBLEBUFFER 1
   4  0000                  DEFINE  LATECLIPPING 1
   5  0000                  DEFINE  SIMPLEWARP   1
   6  0000                  ;DEFINE DEBUGCIRCLE1 1
   7  0000                  ;DEFINE DEBUGCIRCLE2 1
   8  0000                  ;DEFINE DEBUGCIRCLE3 1
   9  0000                  ;DEFINE DEBUGCIRCLE4 1
  10  0000                  ;DEFINE DEBUGCIRCLE5 1
  11  0000                  ;DEFINE DEBUGCIRCLE6 1
  12  0000                  ;DEFINE  DEBUGPLANET 1
  13  0000                  ;DEFINE  DEBUGPLANETCIRCLE 1
  14  0000                  ;DEFINE  MERIDANLINEDEBUG 1
  15  0000                  DEFINE  PLANETSARESOLID 1
  16  0000                  ;DEFINE DEBUG_LL122_DIRECT 1 ; PASS
  17  0000                  ;DEFINE DEBUG_LL121_DIRECT 1 ; PASS
  18  0000                  ;DEFINE DEBUG_LL129_DIRECT 1 ; PASS
  19  0000                  ;DEFINE DEBUG_LL120_DIRECT 1 ; PASS
  20  0000                  ;DEFINE DEBUG_LL123_DIRECT 1 ; PASS
  21  0000                  ;DEFINE DEBUG_LL118_DIRECT 1
  22  0000                  ;DEFINE DEBUG_LL128_DIRECT
  23  0000              ;                  DEFINE DEBUG_LL123_DIRECT 1
  24  0000              ;                  DEFINE DEBUG_LL118_DIRECT 1
  25  0000              ;                  DEFINE DEBUG_LL28_6502
  26  0000                                ;DEFINE DEBUG_LL145_6502 1
  27  0000              ;                DEFINE DEBUG_LL129
  28  0000               ;               DEFINE DEBUG_LL120 1
  29  0000                         ; DEFINE DEBUGCLIP 1
  30  0000                  ;DEFINE SKIPATTRACTMUSIC 1
  31  0000                  ;DEFINE SKIPATTRACTGRAPHICS 1
  32  0000                  ;DEFINE  SKIPATTRACT 1
  33  0000                  ;DEFINE  LOGDIVIDEDEBUG 1
  34  0000                  ; DEFINE  BLINEDEBUG 1
  35  0000                  ;DEFINE  TESTMERIDIAN 1
  36  0000                  ;DEFINE  CLIPVersion3 1
  37  0000                  ;DEFINE  LOGMATHS     1
  38  0000                  ;DEFINE  DIAGSPRITES 1
  39  0000              ;    DEFINE   SKIPATTRACT
  40  0000                  ; DEFINE DEBUGMISSILETEST 1
  41  0000                  ; DEFINE DEBUGLINEDRAW 1
  42  0000                   DEFINE  LASER_V2    1
  43  0000               CSPECTMAP eliteN.map
  44  0000               OPT --zxnext=cspect --syntax=a --reversepop
  45  0000                              DEFINE  SOUNDPACE 3
  46  0000              ;                DEFINE  ENABLE_SOUND 1
  47  0000                             DEFINE     MAIN_INTERRUPTENABLE 1
  48  0000              ;               DEFINE INTERRUPT_BLOCKER 1
  49  0000              DEBUGSEGSIZE   equ 1
  50  0000              DEBUGLOGSUMMARY equ 1
  51  0000              ;DEBUGLOGDETAIL equ 1
  52  0000
  53  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  54  0000              ; Game Defines
  55  0000              ScreenLocal      EQU 0
  56  0000              ScreenGalactic   EQU ScreenLocal + 1
  57  0000              ScreenMarket     EQU ScreenGalactic + 1
  58  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  59  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  60  0000              ScreenInvent     EQU ScreenStatus + 1
  61  0000              ScreenPlanet     EQU ScreenInvent + 1
  62  0000              ScreenEquip      EQU ScreenPlanet + 1
  63  0000              ScreenLaunch     EQU ScreenEquip + 1
  64  0000              ScreenFront      EQU ScreenLaunch + 1
  65  0000              ScreenAft        EQU ScreenFront+1
  66  0000              ScreenLeft       EQU ScreenAft+1
  67  0000              ScreenRight      EQU ScreenLeft+1
  68  0000              ScreenDocking    EQU ScreenRight+1
  69  0000              ScreenHyperspace EQU ScreenDocking+1
  70  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  71  0000              ; Colour Defines
  72  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  73  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  74  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  75  0000              ; Total screen list
  76  0000              ; Local Chart
  77  0000              ; Galactic Chart
  78  0000              ; Market Prices
  79  0000              ; Inventory
  80  0000              ; Comander status
  81  0000              ; System Data
  82  0000              ; Mission Briefing
  83  0000              ; missio completion
  84  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  85  0000              ; Pause Menu (only place you can load from )
  86  0000              ; byint and selling equipment
  87  0000              ; bying and selling stock
  88  0000
  89  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU 0
 120+ 0000              VERSION_REGISTER						EQU 1
 121+ 0000              RESET_REGISTER		    				EQU 2
 122+ 0000              MACHINE_TYPE_REGISTER					EQU 3
 123+ 0000              PAGE_RAM_REGISTER						EQU 4
 124+ 0000              PERIPHERAL_1_REGISTER					EQU 5   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU 6   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU 7
 127+ 0000              PERIPHERAL_3_REGISTER					EQU 8   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU 9   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU 10  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU 14
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 16
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU 17
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU 27
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU 38
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU 39
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
 170+ 0000              PALETTE_INDEX_REGISTER					EQU 64
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU 69
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU 70
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU 71
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU 80
 180+ 0000              MMU_SLOT_1_REGISTER						EQU 81
 181+ 0000              MMU_SLOT_2_REGISTER						EQU 82
 182+ 0000              MMU_SLOT_3_REGISTER						EQU 83
 183+ 0000              MMU_SLOT_4_REGISTER						EQU 84
 184+ 0000              MMU_SLOT_5_REGISTER						EQU 85
 185+ 0000              MMU_SLOT_6_REGISTER						EQU 86
 186+ 0000              MMU_SLOT_7_REGISTER						EQU 87
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU 96
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU 99
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU 100
 193+ 0000              ULA_CONTROL_REGISTER                    EQU 104
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
 195+ 0000              LORES_CONTROL_REGISTER                  EQU 106
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU 107
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU 108
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU 110
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU 111
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1          EQU 114
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2          EQU 115
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3          EQU 116
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4          EQU 117
 207+ 0000              USER_STORAGE_0_REGISTER                 EQU 118 ; general purpose variable, e.g. for copper
 208+ 0000              EXPANSION_BUS_ENABLE_REGISTER           EQU 128
 209+ 0000              EXTENDED_KEYS_0_REGISTER                EQU 176
 210+ 0000              EXTENDED_KEYS_1_REGISTER                EQU 177
 211+ 0000
 212+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 213+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 214+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 215+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 216+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 217+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 218+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 219+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 220+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 221+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 222+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 223+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 224+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 225+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 226+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 227+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 228+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 229+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 230+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 231+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 232+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 233+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 234+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 235+ 0000
 236+ 0000
 237+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 238+ 0000
 239+ 0000
 240+ 0000              GetNextRegSaveBC:	MACRO register
 241+ 0000 ~                                push bc
 242+ 0000 ~                                ld bc,$243B
 243+ 0000 ~                                ld a,register
 244+ 0000 ~                                out (c),a
 245+ 0000 ~                                inc b
 246+ 0000 ~                                in a,(c)
 247+ 0000 ~                                pop bc
 248+ 0000                                  ENDM
 249+ 0000
 250+ 0000              GetNextReg:	MACRO register
 251+ 0000 ~                        ld bc,$243B
 252+ 0000 ~                        ld a,register
 253+ 0000 ~                        out (c),a
 254+ 0000 ~                        inc b
 255+ 0000 ~                        in a,(c)
 256+ 0000                          ENDM
 257+ 0000
# file closed: ./Hardware/register_defines.asm
  90  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  34+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SHADOW_BANK1          equ 13
  36+ 0000              LAYER2_SHADOW_BANK2          equ 14
  37+ 0000              LAYER2_SHADOW_BANK3          equ 15
  38+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  39+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  40+ 0000
  41+ 0000              SCREEN_HEIGHT 				 equ 192
  42+ 0000              SCREEN_RAM_BASE				 equ $0000
  43+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  44+ 0000
  45+ 0000              SPRITES_VISIBLE_MASK         equ $01
  46+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  47+ 0000              LAYER_PRIORITIES_MASK        equ $07
  48+ 0000              LORES_MODE_MASK              equ $80
  49+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  50+ 0000
  51+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  52+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  53+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  54+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  55+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  56+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  57+ 0000
  58+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  59+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  60+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  61+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  62+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  63+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  64+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  65+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  66+ 0000              DMA_WR4_CONT_MODE            equ $AD
  67+ 0000              DMA_WR4_BURST_MODE           equ $CD
  68+ 0000              DMA_RESET                    equ $c3
  69+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  70+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  71+ 0000              DMA_LOAD                     equ $cf
  72+ 0000              DMA_CONTINUE                 equ $d3
  73+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  74+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  75+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  76+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  77+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  78+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  79+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  80+ 0000              DMA_FORCE_READY              equ $b3
  81+ 0000              DMA_STOP_AT_END			     equ $82
  82+ 0000              DMA_DISABLE                  equ $83
  83+ 0000              DMA_ENABLE                   equ $87
  84+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  85+ 0000              DMA_BURST                    equ $cd
  86+ 0000              DMA_CONTINUOUS               equ $ad
  87+ 0000              ZXN_DMA_PORT                 equ $6b
  88+ 0000
  89+ 0000
  90+ 0000              COLOUR_TRANSPARENT			 equ $E3
  91+ 0000
  92+ 0000
  93+ 0000
  94+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  91  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              SpaceStationBankAddr    equ $c000
  28+ 0000              UniverseBankAddr	    equ $c000
  29+ 0000              LaunchShipAddr          equ $c000
  30+ 0000              membank7 			    equ $e000
  31+ 0000              L1membankAddr   	    equ $e000
  32+ 0000              L2membankAddr   	    equ $e000
  33+ 0000              ShipModelsAddr	        equ $e000
  34+ 0000              SpritemembankAddr       equ $e000
  35+ 0000              ResetUniverseAddr       equ $e000
  36+ 0000              StockTableAddr	        equ $e000
  37+ 0000              CommanderAddr           equ $e000
  38+ 0000              LAYER2Addr              equ $e000
  39+ 0000              LAYER1Addr              equ $e000
  40+ 0000              SPRITEAddr              equ $e000
  41+ 0000              ConsoleImageAddr        equ $e000
  42+ 0000              GalaxyDataAddr          equ $e000
  43+ 0000              SoundAddr               equ $e000
  44+ 0000              KeyboardAddr            equ $e000
  45+ 0000
  46+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  47+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  48+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  49+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  50+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  51+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  52+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  53+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  54+ 0000              SpaceStationMMU         equ MMU_SLOT_6_REGISTER
  55+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  63+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  64+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  65+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  66+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  67+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  68+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  69+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  70+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  71+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  72+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  73+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  74+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  75+ 0000              KeyboardMMU             equ MMU_SLOT_7_REGISTER
  76+ 0000
  77+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  78+ 0000              BankResetUniv           equ 49
  79+ 0000              BankMenuShrCht          equ 50
  80+ 0000              BankMenuGalCht          equ 51
  81+ 0000              BankMenuInvent          equ 52
  82+ 0000              BankMenuSystem          equ 53
  83+ 0000              BankMenuMarket          equ 54
  84+ 0000              BankStockTable          equ 55
  85+ 0000              BankCommander           equ 56
  86+ 0000              BankLAYER2              equ 57
  87+ 0000              BankLAYER1              equ 58
  88+ 0000              BankShipModels1         equ 59
  89+ 0000              BankSPRITE              equ 60
  90+ 0000              BankConsole             equ 61
  91+ 0000              BankFrontView           equ 62
  92+ 0000              BankMenuStatus          equ 63
  93+ 0000              BankMenuEquipS          equ 64
  94+ 0000              BankLaunchShip          equ 65
  95+ 0000              BankDispMarket          equ 66
  96+ 0000              BankShipModels2         equ 67
  97+ 0000              BankShipModels3         equ 68
  98+ 0000              BankShipModels4         equ 69
  99+ 0000
 100+ 0000              BankUNIVDATA0           equ 70
 101+ 0000              BankUNIVDATA1           equ 71
 102+ 0000              BankUNIVDATA2           equ 72
 103+ 0000              BankUNIVDATA3           equ 73
 104+ 0000              BankUNIVDATA4           equ 74
 105+ 0000              BankUNIVDATA5           equ 75
 106+ 0000              BankUNIVDATA6           equ 76
 107+ 0000              BankUNIVDATA7           equ 77
 108+ 0000              BankUNIVDATA8           equ 78
 109+ 0000              BankUNIVDATA9           equ 79
 110+ 0000              BankUNIVDATA10          equ 80
 111+ 0000              BankUNIVDATA11          equ 81
 112+ 0000              BankUNIVDATA12          equ 82
 113+ 0000              BankSunData             equ 83
 114+ 0000              BankPlanetData          equ 84
 115+ 0000              BankSpaceStationData    equ 85
 116+ 0000
 117+ 0000              BankGalaxyData0         equ 91
 118+ 0000              BankGalaxyData1         equ 92
 119+ 0000              BankGalaxyData2         equ 93
 120+ 0000              BankGalaxyData3         equ 94
 121+ 0000              BankGalaxyData4         equ 95
 122+ 0000              BankGalaxyData5         equ 96
 123+ 0000              BankGalaxyData6         equ 97
 124+ 0000              BankGalaxyData7         equ 98
 125+ 0000
 126+ 0000              BankMathsTables         equ 99
 127+ 0000              BankSound               equ 100
 128+ 0000              BankKeyboard            equ 101
 129+ 0000
 130+ 0000              BankROM                 equ 255
 131+ 0000
 132+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  92  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		    equ 192
   2+ 0000              ScreenLastRow           equ ScreenHeight -1
   3+ 0000              ScreenWidth  		    equ 256
   4+ 0000              ScreenLastCol           equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	    equ 96
   6+ 0000              ScreenWidthHalf  	    equ 128
   7+ 0000              ScreenCenterY		    equ 96
   8+ 0000              ScreenCenterX           equ 128
   9+ 0000              ViewHeight              equ 128
  10+ 0000              ViewHeightPlus1         equ 128+1
  11+ 0000              ViewLastRow       	    equ ViewHeight -1
  12+ 0000              ViewWidth  			    equ 256
  13+ 0000              ViewLastCol             equ ViewWidth -1
  14+ 0000              ViewHeightHalf          equ 63
  15+ 0000              ViewWidthHalf           equ 127
  16+ 0000              ViewCenterY             equ 192/2
  17+ 0000              ViewCenterX             equ 128
  18+ 0000                                      DISPLAY "TODO: place odler for debugging"
  19+ 0000              ShipColour			    equ $FF		; place holder for debugging TODO
  20+ 0000              ScreenL1Bottom          equ $5000
  21+ 0000              ScreenL1BottomLen       equ 32 * 8 * 8
  22+ 0000              ScreenL1AttrBtm         equ $5A00
  23+ 0000              ScreenL1AttrBtmLen      equ 32 * 8
  24+ 0000
# file closed: ./Hardware/screen_equates.asm
  93  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipSolidFlagOffset         equ 27 ; Intially for non cargo these will be garbage
  26+ 0000              ShipSolidFillOffset         equ 28
  27+ 0000              ShipSolidLenOffset          equ 29
  28+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  29+ 0000
  30+ 0000              CobraTablePointer           equ 43
  31+ 0000              ;29 faulty
  32+ 0000              BankThreshold               equ 16
  33+ 0000
  34+ 0000              ShipTableALast              equ 23
  35+ 0000              ShipTableBLast              equ 39
  36+ 0000              ShipTableCLast              equ 55
  37+ 0000
# file closed: ./Data/ShipModelEquates.asm
  94  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  95  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              DoubleBuffer640IfPossible: MACRO
  19+ 0000 ~                                    IFDEF DOUBLEBUFFER
  20+ 0000 ~                                        MMUSelectLayer2
  21+ 0000 ~                                        call  l2_640_cls
  22+ 0000 ~                                        call  l2_flip_buffers
  23+ 0000 ~                                    ENDIF
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000
  28+ 0000              ErrorEquStepMinusDelta: MACRO   delta_step, delta_value
  29+ 0000 ~                                    ld      hl,(delta_step)
  30+ 0000 ~                                    ld      de,(delta_value)
  31+ 0000 ~                                    ClearCarryFlag
  32+ 0000 ~                                    sbc     hl,de
  33+ 0000 ~                                    ld      (error),hl
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ; we could hold steps and deltas in alternate registers later
  37+ 0000              ErrorPlusStep:          MACRO   delta_step
  38+ 0000 ~                                    ld      hl,(error)
  39+ 0000 ~                                    ld      de,(delta_step)
  40+ 0000 ~                                    add     hl,de
  41+ 0000 ~                                    ld      (error),hl
  42+ 0000                                      ENDM
  43+ 0000
  44+ 0000              ErrorMinusStep:         MACRO   delta_step
  45+ 0000 ~                                    ld      hl,(error)
  46+ 0000 ~                                    ld      de,(delta_step)
  47+ 0000 ~                                    ClearCarryFlag
  48+ 0000 ~                                    sbc     hl,de
  49+ 0000 ~                                    ld      (error),hl
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              SetExitFalse:           MACRO
  53+ 0000 ~                                    xor     a
  54+ 0000 ~                                    ld      (set_exit),a
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ; pulls axis high byte to a, returns nz if negative, z if positive
  58+ 0000              IsAxisLT0:              MACRO   axis
  59+ 0000 ~                                    ld      a,(axis+1)
  60+ 0000 ~                                    and     $80
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              ; modifies HL, loaded with register, returns z if >=0, nz if negative
  64+ 0000              IsMemld16GTE0           MACRO   mem
  65+ 0000 ~                                    ld      hl, (mem)
  66+ 0000 ~                                    bit     7,h
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsMemNegative8JumpFalse:MACRO   mem, target
  70+ 0000 ~                                    ld      a,(mem)
  71+ 0000 ~                                    and     $80
  72+ 0000 ~                                    jp      z, target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              IsMem16GT0JumpFalse:    MACRO   mem, target
  76+ 0000 ~                                    ld      hl, (mem)
  77+ 0000 ~                                    bit     7,h
  78+ 0000 ~                                    jp      nz, target
  79+ 0000 ~                                    ld      a,h
  80+ 0000 ~                                    or      l
  81+ 0000 ~                                    jp      z,  target
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              FloorHLdivDETarget:     MACRO   target
  85+ 0000 ~                                    call    l_div                   ;       .  (so we swap and call l_div) HL = DE / HL, DE = DE % HL
  86+ 0000 ~                                    ld      a,d                     ;       .  get bit 7 into carry (set if negative)
  87+ 0000 ~                                    sla     a                       ;
  88+ 0000 ~                                    jr      nc,.FloorIsOK           ;
  89+ 0000 ~            .FloorAdjust:           dec     hl                      ;       .  if remainder >= adjust by 1 for negative
  90+ 0000 ~            .FloorIsOK:             ld      (target),hl             ;       .  now save the msd value
  91+ 0000                                      ENDM
  92+ 0000
# file closed: ./Macros/graphicsMacros.asm
  96  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  97  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  98  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  99  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemZero:             MACRO   mem
  24+ 0000 ~                                    xor     a
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              SetMemToN:              MACRO   mem,value
  29+ 0000 ~                                    ld      a,value
  30+ 0000 ~                                    ld      (mem),a
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  34+ 0000 ~                                    ld      hl,source
  35+ 0000 ~                                    ld      de, target
  36+ 0000 ~                                    ld      bc, strlen
  37+ 0000 ~                                    ldir
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ldCopyTextAtHLtoDE:     MACRO
  41+ 0000 ~            .CopyLoop:              ld      a,(hl)
  42+ 0000 ~                                    ld      (de),a
  43+ 0000 ~                                    cp      0
  44+ 0000 ~                                    jp      z,.DoneCopy
  45+ 0000 ~                                    inc     hl
  46+ 0000 ~                                    inc     de
  47+ 0000 ~                                    jr      .CopyLoop
  48+ 0000 ~            .DoneCopy:
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldClearTextLoop:        MACRO   TextSize
  52+ 0000 ~                                    ld      b,a
  53+ 0000 ~                                    ld      a,TextSize
  54+ 0000 ~            .ClearLoop:             ld      (hl),a
  55+ 0000 ~                                    inc     hl
  56+ 0000 ~                                    djnz    .ClearLoop
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopyByte:             MACRO memfrom, memto
  60+ 0000 ~                                    ld       a,(memfrom)
  61+ 0000 ~                                    ld       (memto),a
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  66+ 0000 ~                                    ld       a,(memfrom)
  67+ 0000 ~                                    and		$7F
  68+ 0000 ~                                    ld       (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldAtHLtoMem:            MACRO   memto
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    ld      (memto),a
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldCopyWord:             MACRO memfrom, memto
  77+ 0000 ~                                    ldCopy2Byte memfrom, memto
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ldCopy2Byte:            MACRO  memfrom, memto
  81+ 0000 ~                                    ld       hl,(memfrom)
  82+ 0000 ~                                    ld       (memto),hl
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ldWriteConst            MACRO  memfrom, memto
  86+ 0000 ~                                    ld       a,memfrom
  87+ 0000 ~                                    ld       (memto),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ldWriteZero             MACRO  memto
  91+ 0000 ~                                    xor      a
  92+ 0000 ~                                    ld       (memto),a
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ldIXLaFromN:	        MACRO memfrom
  96+ 0000 ~                                    ld		a,(memfrom)
  97+ 0000 ~                                    ld		ixl,a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              ldIXHaFromN:	        MACRO memfrom
 101+ 0000 ~                                    ld		a,(memfrom)
 102+ 0000 ~                                    ld		ixh,a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ldIYLaFromN:	        MACRO memfrom
 106+ 0000 ~                                    ld		a,(memfrom)
 107+ 0000 ~                                    ld		iyl,a
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ldIYHaFromN:	        MACRO memfrom
 111+ 0000 ~                                    ld		a,(memfrom)
 112+ 0000 ~                                    ld		iyh,a
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Read a 32 bit value from address HL into BCDE
 116+ 0000              ldBCDEatHL:             MACRO
 117+ 0000 ~                                    ld      e,(hl)
 118+ 0000 ~                                    inc     hl
 119+ 0000 ~                                    ld      d,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      c,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000 ~                                    ld      b,(hl)
 124+ 0000 ~                                    inc     hl
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              ldBCatHL:               MACRO
 128+ 0000 ~                                    ld      c,(hl)
 129+ 0000 ~                                    inc     hl
 130+ 0000 ~                                    ld      b,(hl)
 131+ 0000 ~                                    inc     hl
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ldhlde:			        MACRO
 135+ 0000 ~                                    ld		h,d
 136+ 0000 ~                                    ld		l,e
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ldhlbc:			        MACRO
 140+ 0000 ~                                    ld		h,b
 141+ 0000 ~                                    ld		l,c
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              ldbcde:			        MACRO
 145+ 0000 ~                                    ld		b,d
 146+ 0000 ~                                    ld		c,e
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              lddebc:			        MACRO
 150+ 0000 ~                                    ld		d,b
 151+ 0000 ~                                    ld		e,c
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ldbchl:			        MACRO
 155+ 0000 ~                                    ld		b,h
 156+ 0000 ~                                    ld		c,l
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              lddeiy:			        MACRO
 160+ 0000 ~                                    ld		d,iyh
 161+ 0000 ~                                    ld		e,iyl
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              ldiyde:			        MACRO
 165+ 0000 ~                                    ld		iyh,d
 166+ 0000 ~                                    ld		iyl,e
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000
 170+ 0000              FourLDIInstrunctions:   MACRO
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000 ~                                    ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              FiveLDIInstrunctions:   MACRO
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              SixLDIInstrunctions:    MACRO
 186+ 0000 ~                                    ldi
 187+ 0000 ~                                    ldi
 188+ 0000 ~                                    ldi
 189+ 0000 ~                                    ldi
 190+ 0000 ~                                    ldi
 191+ 0000 ~                                    ldi
 192+ 0000                                      ENDM
 193+ 0000
 194+ 0000              EightLDIInstrunctions:  MACRO
 195+ 0000 ~            		                ldi
 196+ 0000 ~            		                ldi
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              NineLDIInstrunctions:  MACRO
 206+ 0000 ~            		                ldi
 207+ 0000 ~            		                ldi
 208+ 0000 ~            		                ldi
 209+ 0000 ~            		                ldi
 210+ 0000 ~            		                ldi
 211+ 0000 ~            		                ldi
 212+ 0000 ~            		                ldi
 213+ 0000 ~            		                ldi
 214+ 0000 ~            		                ldi
 215+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
 100  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
  67+ 0000
  68+ 0000              ;-- Performs HL = |HL| - 1
  69+ 0000              DecHLABS:           MACRO
  70+ 0000 ~                                bit         7,h
  71+ 0000 ~                                jp          nz,.NegativeDec
  72+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  73+ 0000 ~                                or          l
  74+ 0000 ~                                jp          z,.HLZero
  75+ 0000 ~            .PositiveDec:       dec         hl
  76+ 0000 ~                                jp          .Done
  77+ 0000 ~            .NegativeDec:       ld          a,h
  78+ 0000 ~                                and         $7F
  79+ 0000 ~                                ld          h,a
  80+ 0000 ~                                dec         hl
  81+ 0000 ~                                set         7,h
  82+ 0000 ~                                jp          .Done
  83+ 0000 ~            .HLZero:            ld          hl,$8001
  84+ 0000 ~            .Done:
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000              ;-- Performs HL = HL - 1
  88+ 0000              DecHLSigned:        MACRO
  89+ 0000 ~                                bit         7,h
  90+ 0000 ~                                jp          nz,.NegativeDec
  91+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  92+ 0000 ~                                or          l
  93+ 0000 ~                                jp          z,.HLZero
  94+ 0000 ~            .PositiveDec:       dec         hl
  95+ 0000 ~                                jp          .Done
  96+ 0000 ~            .NegativeDec:       ld          a,h
  97+ 0000 ~                                and         $7F
  98+ 0000 ~                                ld          h,a
  99+ 0000 ~                                inc         hl                  ; if its already negative then add 1 to make it further
 100+ 0000 ~                                set         7,h
 101+ 0000 ~                                jp          .Done
 102+ 0000 ~            .HLZero:            ld          hl,$8001
 103+ 0000 ~            .Done:
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
 101  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfHLNegative:       MACRO target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    jp      nz,target
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              JumpIfPositive:	        MACRO target
   7+ 0000 ~                                    jp		p, target
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              JumpIfNegative:	        MACRO target
  11+ 0000 ~                                    jp		m, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000
  15+ 0000              JumpIfUnderflow:	    MACRO target
  16+ 0000 ~                                    jp		po, target
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              JumpIfOverflow:	        MACRO target
  20+ 0000 ~                                    jp		po, target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000
  24+ 0000              JumpIfNotZero:	        MACRO target
  25+ 0000 ~                                    jp	nz,target
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              JumpIfZero:	            MACRO target
  29+ 0000 ~                                    jp	z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ;.. Bit routines
  33+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  34+ 0000 ~                                    ld      a,reg
  35+ 0000 ~                                    and     SignOnly8Bit
  36+ 0000 ~                                    jp      nz,target
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  40+ 0000 ~                                    ld      a,reg
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      z,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignSetA:     MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      nz,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnLeadSignClearA:   MACRO   target
  51+ 0000 ~                                    and     SignOnly8Bit
  52+ 0000 ~                                    jp      z,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    bit 	bitnbr,a
  58+ 0000 ~                                    jp      nz,target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    bit 	bitnbr,a
  64+ 0000 ~                                    jp      z,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000
  68+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      nz,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  74+ 0000 ~                                    bit 	bitnbr, a
  75+ 0000 ~                                    jp      z,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Set:         MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      nz,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnABit5Clear:       MACRO   target
  84+ 0000 ~                                    and     Bit5Only
  85+ 0000 ~                                    jp      z,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      nz,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  94+ 0000 ~                                    and     bitmask
  95+ 0000 ~                                    jp      z,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  99+ 0000 ~                                    ld      a,(mem)
 100+ 0000 ~                                    and     bitmask
 101+ 0000 ~                                    jp      nz,target
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 105+ 0000 ~                                    ld      a,(mem)
 106+ 0000 ~                                    and     bitmask
 107+ 0000 ~                                    jp      z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      nz,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 116+ 0000 ~                                    bit 	bitnbr,reg
 117+ 0000 ~                                    jp      z,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ; Comparison Routines
 121+ 0000              JumpIfAGTEusng:         MACRO
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTENusng:        MACRO reg,target
 126+ 0000 ~                                    cp     reg
 127+ 0000 ~                                    jp		nc,target
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 131+ 0000 ~                                    ld      hl,mem
 132+ 0000 ~                                    cp      (hl)
 133+ 0000 ~                                    jp		nc,target
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              JumpIfALTMemusng:       MACRO mem,target
 137+ 0000 ~                                    ld      hl,mem
 138+ 0000 ~                                    cp      (hl)
 139+ 0000 ~                                    jp		c,target
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 143+ 0000 ~                                    ld     a,(mem)
 144+ 0000 ~                                    cp     value
 145+ 0000 ~                                    jp	  nc,target
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 149+ 0000 ~                                    ld   a,(mem)
 150+ 0000 ~                                    ld   hl,address
 151+ 0000 ~                                    cp   (hl)
 152+ 0000 ~                                    jp	  nc,target
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 156+ 0000 ~                                    ld   a,(mem)
 157+ 0000 ~                                    ld   hl,address
 158+ 0000 ~                                    cp   (hl)
 159+ 0000 ~                                    jp	  z,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 163+ 0000 ~                                    ld   a,(mem)
 164+ 0000 ~                                    ld   hl,address
 165+ 0000 ~                                    cp   (hl)
 166+ 0000 ~                                    jp	  nz,target
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000              JumpIfMemTrue:          MACRO mem, target
 170+ 0000 ~                                    ld      a,(mem)
 171+ 0000 ~                                    and     a
 172+ 0000 ~                                    jp      z, target
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              JumpIfMemFalse:         MACRO mem, target
 176+ 0000 ~                                    ld      a,(mem)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      nz, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfATrue:            MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      z, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfAFalse:           MACRO target
 187+ 0000 ~                                    and     a
 188+ 0000 ~                                    jp      nz, target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfANotFalse:        MACRO target
 192+ 0000 ~                                    cp      $FF
 193+ 0000 ~                                    jp      nz, target
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              JumpIfALTusng:          MACRO target
 197+ 0000 ~                                    jp		c,target
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              JumpIfALTNusng:         MACRO value, target
 201+ 0000 ~                                    cp      value
 202+ 0000 ~                                    jp		c, target
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 206+ 0000 ~                                    ld      a,(mem)
 207+ 0000 ~                                    cp      value
 208+ 0000 ~                                    jp	  c,target
 209+ 0000                                      ENDM
 210+ 0000
 211+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 212+ 0000 ~                                    ld    a,(mem)
 213+ 0000 ~                                    ld    hl,value
 214+ 0000 ~                                    cp    (hl)
 215+ 0000 ~                                    jp	  c,target
 216+ 0000                                      ENDM
 217+ 0000
 218+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 219+ 0000 ~                                    ld  a,(mem)
 220+ 0000 ~                                    cp  value
 221+ 0000 ~                                    jp  z,target
 222+ 0000                                      ENDM
 223+ 0000
 224+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 225+ 0000 ~                                    ld  a,(mem)
 226+ 0000 ~                                    cp  value
 227+ 0000 ~                                    jp  nz,target
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              JumpIfMemZero:          MACRO mem,target
 231+ 0000 ~                                    ld  a,(mem)
 232+ 0000 ~                                    and a
 233+ 0000 ~                                    jp  z,target
 234+ 0000                                      ENDM
 235+ 0000
 236+ 0000              JumpIfMemNotZero:       MACRO mem,target
 237+ 0000 ~                                    ld  a,(mem)
 238+ 0000 ~                                    and a
 239+ 0000 ~                                    jp  nz,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfALTMemHLusng:     MACRO target
 243+ 0000 ~                                    cp    (hl)
 244+ 0000 ~                                    jp	  c,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANENusng:         MACRO value, target
 248+ 0000 ~                                    cp     value
 249+ 0000 ~                                    jp      nz,target
 250+ 0000                                      ENDM
 251+ 0000
 252+ 0000              JumpIfANEquNusng:       MACRO value, target
 253+ 0000 ~                                    cp     value
 254+ 0000 ~                                    jp     z,target
 255+ 0000                                      ENDM
 256+ 0000
 257+ 0000              JumpIfANEMemusng:       MACRO  value, target
 258+ 0000 ~                                    ld    hl,value
 259+ 0000 ~                                    cp    (hl)
 260+ 0000 ~                                    jp      nz,target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfAEqNusng:         MACRO value, target
 264+ 0000 ~                                    cp     value
 265+ 0000 ~                                    jp      z,target
 266+ 0000                                      ENDM
 267+ 0000
 268+ 0000              JumpIfAIsZero:	        MACRO target
 269+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 270+ 0000 ~                                    jp	    z, target
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 274+ 0000 ~                                    ld      a,reg
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jp	    nz,target
 277+ 0000                                      ENDM
 278+ 0000
 279+ 0000              JumpIfRegLTE:           MACRO   reg, value, target
 280+ 0000 ~                                    ld      a,reg
 281+ 0000 ~                                    cp      value
 282+ 0000 ~                                    jp	    z,target
 283+ 0000 ~                                    jp		c, target
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000              JumpIfAIsNotZero:       MACRO target
 287+ 0000 ~                                    and     a
 288+ 0000 ~                                    jp	    nz,target
 289+ 0000                                      ENDM
 290+ 0000
 291+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 292+ 0000 ~                                    ld      a,(value)
 293+ 0000 ~                                    and     a
 294+ 0000 ~                                    jp	    nz,target
 295+ 0000                                      ENDM
 296+ 0000              IfResultZeroGoto:	    MACRO target
 297+ 0000 ~                                    jp	z,target
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              IfResultNotZeroGoto:    MACRO target
 301+ 0000 ~                                    jp	nz,target
 302+ 0000                                      ENDM
 303+ 0000
# file closed: ./Macros/jumpMacros.asm
 102  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
   2+ 0000              IsHLGT255:              MACRO
   3+ 0000 ~                                    bit     7,h
   4+ 0000 ~                                    ret     z
   5+ 0000 ~                                    ld      a,h
   6+ 0000 ~                                    and     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              ; Sets z flat if HL = 255 else sets it to nz
  10+ 0000              IsHLEqu255:             MACRO
  11+ 0000 ~                                    ld      a,h
  12+ 0000 ~                                    and     a               ; if its non zero then it can't be 255
  13+ 0000 ~                                    ret     nz
  14+ 0000 ~                                    ld      a,l
  15+ 0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              ; Sets Z flag if GT 127 else nz
  19+ 0000              IsHLGT127:              MACRO
  20+ 0000 ~                                    bit     7,h             ; -ve?
  21+ 0000 ~                                    jr      nz,.DoneCheck
  22+ 0000 ~                                    ld      a,h             ; +ve > 256?
  23+ 0000 ~                                    and     a
  24+ 0000 ~                                    jr      nz,.DoneCheck
  25+ 0000 ~                                    ld      a,l
  26+ 0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
  27+ 0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
  28+ 0000 ~            .DoneCheck:
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              ReturnIfHLGT127:        MACRO
  32+ 0000 ~                                    bit     7,h             ; -ve?
  33+ 0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
  34+ 0000 ~                                    ld      a,h             ; +ve > 256?
  35+ 0000 ~                                    and     a               ;
  36+ 0000 ~                                    ret     nz              ; forces a return
  37+ 0000 ~                                    bit     7,l             ; bit 7 of lower set?
  38+ 0000 ~                                    ret     nz              ; forces a return
  39+ 0000 ~            .DoneCheck:
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              IsDEGT127:              MACRO
  43+ 0000 ~                                    bit     7,d
  44+ 0000 ~                                    jr      nz,.DoneCheck
  45+ 0000 ~                                    ld      a,d
  46+ 0000 ~                                    jr      nz,.DoneCheck
  47+ 0000 ~                                    ld      a,e
  48+ 0000 ~                                    and     $80
  49+ 0000 ~            .DoneCheck:
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ABSa2c:                 MACRO
  53+ 0000 ~                                    bit     7,a
  54+ 0000 ~                                    jp      z,.DoneABSa
  55+ 0000 ~                                    neg
  56+ 0000 ~            .DoneABSa:
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              DEEquSquareA:           MACRO
  60+ 0000 ~                                    ld  d,a
  61+ 0000 ~                                    ld  e,a
  62+ 0000 ~                                    mul de
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  66+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  67+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  68+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  69+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  70+ 0000 ~                                    xor $80                             ;
  71+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  72+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  73+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  74+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  75+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  76+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              SignedHLTo2C:           MACRO
  80+ 0000 ~                                    bit     7,h
  81+ 0000 ~                                    jr      z,.Done2c
  82+ 0000 ~                                    ld      a,h
  83+ 0000 ~                                    and     SignMask8Bit
  84+ 0000 ~                                    ld      h,a
  85+ 0000 ~                                    NegHL
  86+ 0000 ~            .Done2c:
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              MemSignedTo2C:          MACRO   memfrom
  90+ 0000 ~                                    ld      hl,(memfrom)
  91+ 0000 ~                                    bit     7,h
  92+ 0000 ~                                    jr      z,.Done2c
  93+ 0000 ~                                    ld      a,h
  94+ 0000 ~                                    and     SignMask8Bit
  95+ 0000 ~                                    ld      h,a
  96+ 0000 ~            .Done2c:                ld      (memfrom),hl
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000
 100+ 0000                  ;returns result in H
 101+ 0000              EDiv10Inline:           MACRO
 102+ 0000 ~                                    ld      d,0
 103+ 0000 ~                                    ld      hl,de
 104+ 0000 ~                                    add     hl,hl
 105+ 0000 ~                                    add     hl,de
 106+ 0000 ~                                    add     hl,hl
 107+ 0000 ~                                    add     hl,hl
 108+ 0000 ~                                    add     hl,de
 109+ 0000 ~                                    add     hl,hl
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              cpHLDE:                 MACRO
 113+ 0000 ~                                    push    hl
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    sbc     hl,de
 116+ 0000 ~                                    pop     hl
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              cpABSDEHL:              MACRO
 120+ 0000 ~                                    push     hl,,de
 121+ 0000 ~                                    ld      a,h
 122+ 0000 ~                                    and     $7F
 123+ 0000 ~                                    ld      h,a
 124+ 0000 ~                                    ld      a,d
 125+ 0000 ~                                    and     $7F
 126+ 0000 ~                                    ld      d,a
 127+ 0000 ~                                    ex      de,hl
 128+ 0000 ~                                    sbc     hl,de
 129+ 0000 ~                                    pop     hl,,de
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              ; Simple are they both the same setting z if they are
 133+ 0000              ; tehcicall this works but it measn the final ret z is alwys done
 134+ 0000              ; so jp needs to be to a target
 135+ 0000              cpHLEquDE:              MACRO   passedCheck
 136+ 0000 ~                                    ld      a,h
 137+ 0000 ~                                    cp      d
 138+ 0000 ~                                    jp      nz, passedCheck
 139+ 0000 ~                                    ld      a,l
 140+ 0000 ~                                    cp      e
 141+ 0000 ~            .NoTheSame:
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              cpHLEquBC:              MACRO   passedCheck
 145+ 0000 ~                                    ld      a,h
 146+ 0000 ~                                    cp      b
 147+ 0000 ~                                    jp      nz, passedCheck
 148+ 0000 ~                                    ld      a,l
 149+ 0000 ~                                    cp      c
 150+ 0000 ~            .NoTheSame:
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              cpDEEquBC:              MACRO   passedCheck
 154+ 0000 ~                                    ld      a,d
 155+ 0000 ~                                    cp      b
 156+ 0000 ~                                    jp      nz, passedCheck
 157+ 0000 ~                                    ld      a,e
 158+ 0000 ~                                    cp      c
 159+ 0000 ~            .NoTheSame:
 160+ 0000                                      ENDM
 161+ 0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
 162+ 0000              cpHLDELeadSign:         MACRO
 163+ 0000 ~                                    ld      a,h
 164+ 0000 ~                                    cp      d
 165+ 0000 ~                                    jr      nz,.FullCompare
 166+ 0000 ~                                    ld      a,l
 167+ 0000 ~                                    cp      e
 168+ 0000 ~                                    ret     z
 169+ 0000 ~            .FullCompare:           ld      a,h
 170+ 0000 ~                                    xor     d
 171+ 0000 ~                                    and     $80
 172+ 0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
 173+ 0000 ~                                    ld      a,h                 ; same signs so a little simpler
 174+ 0000 ~                                    and     $80
 175+ 0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
 176+ 0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
 177+ 0000 ~            .OppositeSigns:         ld      a,h
 178+ 0000 ~                                    and     $80
 179+ 0000 ~                                    and     $80
 180+ 0000 ~                                    jp      z,.HLGTDE
 181+ 0000 ~            .HLLTDE:                SetCarryFlag
 182+ 0000 ~                                    ret
 183+ 0000 ~            .HLGTDE:                ClearCarryFlag
 184+ 0000 ~                                    ret
 185+ 0000                                      ENDM
 186+ 0000
 187+ 0000              ;Unsigned
 188+ 0000              ;If HL == DE, then Z flag is set.
 189+ 0000              ;If HL != DE, then Z flag is reset.
 190+ 0000              ;If HL <  DE, then C flag is set.
 191+ 0000              ;If HL >= DE, then C flag is reset.
 192+ 0000              ;
 193+ 0000              ;Signed
 194+ 0000              ;If HL == DE, then Z flag is set.
 195+ 0000              ;If HL != DE, then Z flag is reset.
 196+ 0000              ;If HL <  DE, then S and P/V are different.
 197+ 0000              ;If HL >= DE, then S and P/V are the same.
 198+ 0000
 199+ 0000
 200+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
 201+ 0000 ~                                    ld      a,param3                        ;
 202+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 203+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
 204+ 0000 ~                                    ld      d,a
 205+ 0000 ~                                    mul
 206+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 207+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              AequN1xorN2:            MACRO  param1,param2
 211+ 0000 ~                                    ld      a,(param1)
 212+ 0000 ~                                    xor     param2
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
 216+ 0000 ~                                    ld      e,speedreg
 217+ 0000 ~                                    ld      hl,(axis)
 218+ 0000 ~                                    ld      a,h
 219+ 0000 ~                                    ClearSignBitA
 220+ 0000 ~                                    ld      d,a
 221+ 0000 ~                                    mul     de
 222+ 0000 ~                                    ld      a,h
 223+ 0000 ~                                    SignBitOnlyA
 224+ 0000 ~                                    ld      b,a;ld      c,a
 225+ 0000 ~                                    ld      h,d;ld      e,d
 226+ 0000 ~                                    ld      c,0;ld      d,0
 227+ 0000                                      ENDM
 228+ 0000
 229+ 0000
 230+ 0000              AddSpeedToVert:         MACRO   vertex
 231+ 0000 ~                                    ld      de,(vertex+1)
 232+ 0000 ~                                    ld      a,(vertex)
 233+ 0000 ~                                    ld      l,a
 234+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 235+ 0000 ~                                    ld      a,l
 236+ 0000 ~                                    ld      (vertex),a
 237+ 0000 ~                                    ld      (vertex+1),de
 238+ 0000                                      ENDM
# file closed: ./Macros/MathsMacros.asm
 103  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectKeyboard:   MACRO
  15+ 0000 ~                                 nextreg KeyboardMMU,       BankKeyboard
  16+ 0000                                   ENDM
  17+ 0000
  18+ 0000              MMUSelectSpriteBank: MACRO
  19+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectConsoleBank: MACRO
  23+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer1: 	 MACRO
  27+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectLayer2: 	 MACRO
  31+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectResetUniv:  MACRO
  35+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  36+ 0000                                   ENDM
  37+ 0000
  38+ 0000              MMUSelectShipARead:  MACRO
  39+ 0000 ~                                 add    a,BankUNIVDATA0
  40+ 0000 ~                                 nextreg ShipReadMMU,       a
  41+ 0000                                   ENDM
  42+ 0000
  43+ 0000              MMUSelectShipBank1:  MACRO
  44+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  45+ 0000              					 ENDM
  46+ 0000              MMUSelectShipBank2:  MACRO
  47+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  48+ 0000              					 ENDM
  49+ 0000              MMUSelectShipBank3:  MACRO
  50+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  51+ 0000              					 ENDM
  52+ 0000              MMUSelectShipBank4:  MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankA   MACRO
  57+ 0000 ~            					 nextreg ShipModelMMU,	    a
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectShipBankN:  MACRO value
  61+ 0000 ~            					 nextreg ShipModelMMU,	    value
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectCommander:	 MACRO
  65+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectStockTable: MACRO
  69+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcA:    MACRO
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectCpySrcN:    MACRO value
  77+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  78+ 0000              					 ENDM
  79+ 0000
  80+ 0000              MMUSelectSun:        MACRO
  81+ 0000 ~                                 nextreg SunMMU,            BankSunData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectPlanet:     MACRO
  85+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  86+ 0000                                   ENDM
  87+ 0000
  88+ 0000              MMUSelectUniverseA:  MACRO
  89+ 0000 ~                                 add    a,BankUNIVDATA0
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  93+ 0000              MMUSelectUnivBankA:  MACRO
  94+ 0000 ~                                 nextreg UniverseMMU,       a
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectUniverseN:  MACRO value
  98+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectGalaxyA:    MACRO
 102+ 0000 ~                                 nextreg GalaxyDataMMU,     a
 103+ 0000                                   ENDM
 104+ 0000
 105+ 0000              MMUSelectGalaxyN:    MACRO value
 106+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 107+ 0000                                   ENDM
 108+ 0000              MMUSelectGalaxyACopy:MACRO
 109+ 0000 ~                                 nextreg UniverseMMU,       a
 110+ 0000                                   ENDM
 111+ 0000
 112+ 0000              MMUSelectUniverseAbs:MACRO value
 113+ 0000 ~                                 nextreg UniverseMMU,       value
 114+ 0000                                   ENDM
 115+ 0000
 116+ 0000              MMUSelectMenuGalCht: MACRO
 117+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 118+ 0000              					 ENDM
 119+ 0000
 120+ 0000              MMUSelectMenuShrCht: MACRO
 121+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 122+ 0000              					 ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuInvent: MACRO
 125+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuSystem: MACRO
 129+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuMarket: MACRO
 133+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectMenuStatus: MACRO
 137+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectViewFront:  MACRO
 141+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectScreenA:    MACRO
 145+ 0000 ~                                 nextreg ScreenBankMMU,		a
 146+ 0000              					 ENDM
 147+ 0000
 148+ 0000              MMUSelectSound:      MACRO
 149+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 150+ 0000              					 ENDM
# file closed: ./Macros/MMUMacros.asm
 104  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              macronegate16hl:	MACRO
   3+ 0000 ~            					xor 	a
   4+ 0000 ~            					sub 	l
   5+ 0000 ~            					ld 		l,a
   6+ 0000 ~            					sbc 	a,a
   7+ 0000 ~            					sub 	h
   8+ 0000 ~            					ld 		h,a
   9+ 0000              					ENDM
  10+ 0000
  11+ 0000
  12+ 0000              macroAbsHL:         MACRO
  13+ 0000 ~                                bit     7,h
  14+ 0000 ~                                jp      z,.alreadyABS
  15+ 0000 ~            					xor 	a
  16+ 0000 ~            					sub 	l
  17+ 0000 ~            					ld 		l,a
  18+ 0000 ~            					sbc 	a,a
  19+ 0000 ~            					sub 	h
  20+ 0000 ~            					ld 		h,a
  21+ 0000 ~            .alreadyABS:
  22+ 0000                                  ENDM
  23+ 0000
  24+ 0000              macronegate16de:	MACRO
  25+ 0000 ~            					xor 	a
  26+ 0000 ~                                sub 	e
  27+ 0000 ~                                ld 		e,a
  28+ 0000 ~                                sbc 	a,a
  29+ 0000 ~                                sub 	d
  30+ 0000 ~                                ld 		d,a
  31+ 0000              					ENDM
  32+ 0000
  33+ 0000              macronegate16bc:	MACRO
  34+ 0000 ~            					xor 	a
  35+ 0000 ~                                sub 	c
  36+ 0000 ~                                ld 		c,a
  37+ 0000 ~                                sbc 	a,a
  38+ 0000 ~                                sub 	b
  39+ 0000 ~                                ld 		b,a
  40+ 0000              					ENDM
  41+ 0000
  42+ 0000              macronegate16ix:	MACRO
  43+ 0000 ~            					xor 	a
  44+ 0000 ~                                sub 	ixl
  45+ 0000 ~                                ld 		ixl,a
  46+ 0000 ~                                sbc 	a,a
  47+ 0000 ~                                sub 	ixh
  48+ 0000 ~                                ld 		ixh,a
  49+ 0000              					ENDM
  50+ 0000
  51+ 0000
  52+ 0000              NegIY:			    MACRO
  53+ 0000 ~                                xor a
  54+ 0000 ~                                sub iyl
  55+ 0000 ~                                ld iyl,a
  56+ 0000 ~                                sbc a,a
  57+ 0000 ~                                sub iyh
  58+ 0000 ~                                ld iyh,a
  59+ 0000                                  ENDM
  60+ 0000
  61+ 0000              NegHL:			    MACRO
  62+ 0000 ~                                xor a
  63+ 0000 ~                                sub l
  64+ 0000 ~                                ld l,a
  65+ 0000 ~                                sbc a,a
  66+ 0000 ~                                sub h
  67+ 0000 ~                                ld h,a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000              NegDE:			    MACRO
  71+ 0000 ~                                xor a
  72+ 0000 ~                                sub e
  73+ 0000 ~                                ld e,a
  74+ 0000 ~                                sbc a,a
  75+ 0000 ~                                sub d
  76+ 0000 ~                                ld d,a
  77+ 0000                                  ENDM
  78+ 0000
  79+ 0000              NegBC:			    MACRO
  80+ 0000 ~                                xor a
  81+ 0000 ~                                sub c
  82+ 0000 ~                                ld c,a
  83+ 0000 ~                                sbc a,a
  84+ 0000 ~                                sub  b
  85+ 0000 ~                                ld b,a
  86+ 0000                                  ENDM
  87+ 0000
  88+ 0000              NegH                MACRO
  89+ 0000 ~                                ld      a,h
  90+ 0000 ~                                neg
  91+ 0000 ~                                ld      h,a
  92+ 0000                                  ENDM
  93+ 0000
  94+ 0000              NegD                MACRO
  95+ 0000 ~                                ld      a,d
  96+ 0000 ~                                neg
  97+ 0000 ~                                ld      d,a
  98+ 0000                                  ENDM
  99+ 0000
 100+ 0000              NegB                MACRO
 101+ 0000 ~                                ld      a,b
 102+ 0000 ~                                neg
 103+ 0000 ~                                ld      b,a
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/NegateMacros.asm
 105  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnIfHLNegative:     MACRO   target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnIfDENegative:     MACRO   target
   7+ 0000 ~                                    bit     7,d
   8+ 0000 ~                                    ret     nz
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
  12+ 0000 ~                                    bit 	bitnbr,reg
  13+ 0000 ~                                    ret     nz
  14+ 0000                                      ENDM
  15+ 0000
  16+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  17+ 0000 ~                                    ld   a,(mem)
  18+ 0000 ~                                    bit 	bitnbr,a
  19+ 0000 ~                                    ret     nz
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    ret		z
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  28+ 0000 ~                                    ld     a,(mem)
  29+ 0000 ~                                    bit 	bitnbr,a
  30+ 0000 ~                                    ret		z
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ReturnIfMemFalse:       MACRO   mem
  34+ 0000 ~                                    ld      a,(mem)
  35+ 0000 ~                                    and     a
  36+ 0000 ~                                    ret     nz
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              ReturnIfMemTrue:        MACRO   mem
  40+ 0000 ~                                    ld      a,(mem)
  41+ 0000 ~                                    and     a
  42+ 0000 ~                                    ret     z
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ReturnIfAIsZero:        MACRO
  46+ 0000 ~                                    and     a
  47+ 0000 ~                                    ret     z
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              ReturnIfMemisZero:      MACRO mem
  51+ 0000 ~                                    ld   a,(mem)
  52+ 0000 ~                                    and a
  53+ 0000 ~                                    ret    z
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemIsNegative:  MACRO mem
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    and     $80
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  63+ 0000 ~                                    and     bitmask
  64+ 0000 ~                                    ret     z
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  68+ 0000 ~                                    and     bitmask
  69+ 0000 ~                                    ret     nz
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              ReturnIfMemEquN:        MACRO mem, value
  73+ 0000 ~                                    ld     a,(mem)
  74+ 0000 ~                                    cp     value
  75+ 0000 ~                                    ret    nz
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  79+ 0000 ~                                    ld   a,(mem)
  80+ 0000 ~                                    cp     value
  81+ 0000 ~                                    ret    z
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              ReturnIfRegNotZero:     MACRO reg
  85+ 0000 ~                                    ld      a, reg
  86+ 0000 ~                                    and     a
  87+ 0000 ~                                    ret     nz
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ReturnIfANotZero:       MACRO
  91+ 0000 ~                                    and     a
  92+ 0000 ~                                    ret     nz
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ReturnIfNotZero:        MACRO
  96+ 0000 ~                                    ret     nz
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfZero:           MACRO
 100+ 0000 ~                                    ret     z
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              ReturnIfNegative:       MACRO
 104+ 0000 ~                                    ret     m
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000
 108+ 0000              ReturnIfMemNotZero:     MACRO mem
 109+ 0000 ~                                    ld     a,(mem)
 110+ 0000 ~                                    and     a
 111+ 0000 ~                                    ret    nz
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              ReturnIfAGTEusng:       MACRO value
 115+ 0000 ~                                    cp    value
 116+ 0000 ~                                    ret	 nc
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 120+ 0000 ~                                    ld      a,reg
 121+ 0000 ~                                    cp      value
 122+ 0000 ~                                    ret	    c
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfALTNusng:       MACRO value
 126+ 0000 ~                                    cp    value
 127+ 0000 ~                                    ret	 c
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ReturnIfAGTENusng:      MACRO value
 131+ 0000 ~                                    cp    value
 132+ 0000 ~                                    ret	 nc
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ReturnIfAGTEMemusng:    MACRO value
 136+ 0000 ~                                    ld      hl,value
 137+ 0000 ~                                    cp      (hl)
 138+ 0000 ~                                    ret	    nc
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              ReturnIfANENusng:       MACRO value
 142+ 0000 ~                                    cp      value
 143+ 0000 ~                                    ret     nz
 144+ 0000                                      ENDM
 145+ 0000
 146+ 0000              ReturnIfAEqNusng:       MACRO value
 147+ 0000 ~                                    cp      value
 148+ 0000 ~                                    ret     z
 149+ 0000                                      ENDM
 150+ 0000
# file closed: ./Macros/returnMacros.asm
 106  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftIXRight1: MACRO
  11+ 0000 ~            			   ld 	a,ixh
  12+ 0000 ~            			   srl 	a
  13+ 0000 ~            			   ld	ixh,a
  14+ 0000 ~            			   ld 	a,ixl
  15+ 0000 ~            			   rra
  16+ 0000 ~            			   ld	ixl,a
  17+ 0000              			   ENDM
  18+ 0000
  19+ 0000              ShiftHLRight1: MACRO
  20+ 0000 ~            			   srl h
  21+ 0000 ~            			   rr  l
  22+ 0000              			   ENDM
  23+ 0000
  24+ 0000              ShiftDERight1: MACRO
  25+ 0000 ~            			   srl d
  26+ 0000 ~            			   rr  e
  27+ 0000              			   ENDM
  28+ 0000
  29+ 0000              ShiftBCRight1: MACRO
  30+ 0000 ~            			   srl b
  31+ 0000 ~            			   rr  c
  32+ 0000              			   ENDM
  33+ 0000
  34+ 0000
  35+ 0000
  36+ 0000              ShiftHLDiv8:   MACRO
  37+ 0000 ~            			   srl h
  38+ 0000 ~            			   rr  l
  39+ 0000 ~            			   srl h
  40+ 0000 ~            			   rr  l
  41+ 0000 ~            			   srl h
  42+ 0000 ~            			   rr  l
  43+ 0000              			   ENDM
  44+ 0000
  45+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  46+ 0000 ~            			   sla l
  47+ 0000 ~            			   rl  h
  48+ 0000              			   ENDM
  49+ 0000
  50+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  51+ 0000 ~            			   sla e
  52+ 0000 ~            			   rl  d
  53+ 0000              			   ENDM
  54+ 0000
  55+ 0000              BarrelHLLeft3: MACRO
  56+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  57+ 0000 ~                           push     bc      ; 10
  58+ 0000 ~                           ld       b,3     ; 7
  59+ 0000 ~                           bsrl     de,b    ; 8
  60+ 0000 ~                           pop      bc      ; 10
  61+ 0000 ~                           ex       de,hl   ; 4
  62+ 0000                             ENDM
  63+ 0000
  64+ 0000              BarrelHLRight3: MACRO
  65+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  66+ 0000 ~                           push     bc      ; 10
  67+ 0000 ~                           ld       b,3     ; 7
  68+ 0000 ~                           bsrl     de,b    ; 8
  69+ 0000 ~                           pop      bc      ; 10
  70+ 0000 ~                           ex       de,hl   ; 4
  71+ 0000                             ENDM
  72+ 0000
  73+ 0000              RollBCLeft1:   MACRO	; 16 T states
  74+ 0000 ~                           rl  c
  75+ 0000 ~                           rl  b
  76+ 0000                             ENDM
  77+ 0000
  78+ 0000              RollDELeft1:   MACRO	; 16 T states
  79+ 0000 ~                           rl  e
  80+ 0000 ~                           rl  d
  81+ 0000                             ENDM
  82+ 0000
  83+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
  84+ 0000 ~            			   sla c
  85+ 0000 ~            			   rl  b
  86+ 0000              			   ENDM
  87+ 0000
  88+ 0000              ShiftLeftMem:       MACRO   reg
  89+ 0000 ~                                ld      hl,reg
  90+ 0000 ~                                sla     (hl)
  91+ 0000                                  ENDM
  92+ 0000
  93+ 0000
  94+ 0000
  95+ 0000              ShiftMem16Right1:   MACRO memaddr
  96+ 0000 ~                                ld    hl,(memaddr)
  97+ 0000 ~                                srl   h
  98+ 0000 ~                                rr    l
  99+ 0000 ~                                ld    (memaddr),hl
 100+ 0000                                  ENDM
 101+ 0000
 102+ 0000              ShiftMem8Right1:    MACRO memaddr
 103+ 0000 ~                                ld      a,(memaddr)
 104+ 0000 ~                                srl     a
 105+ 0000 ~                                ld      (memaddr),a
 106+ 0000                                  ENDM
 107+ 0000
 108+ 0000
 109+ 0000              ShiftMem8Left1A:    MACRO memaddr
 110+ 0000 ~                                ld      a,(memaddr)
 111+ 0000 ~                                sla     a
 112+ 0000 ~                                ld      (memaddr),a
 113+ 0000                                  ENDM
 114+ 0000
# file closed: ./Macros/ShiftMacros.asm
 107  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
 108  0000                                      INCLUDE "./Macros/KeyboardMacros.asm"
# file opened: ./Macros/KeyboardMacros.asm
   1+ 0000              MacroIsKeyPressed:      MACRO C_Pressed_keycode
   2+ 0000 ~                                    ld      a,C_Pressed_keycode
   3+ 0000 ~                                    MMUSelectKeyboard
   4+ 0000 ~                                    call    is_key_pressed
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              MacroInitkeyboard:      MACRO
   8+ 0000 ~                                    MMUSelectKeyboard
   9+ 0000 ~                                    call    init_keyboard
  10+ 0000                                      ENDM
  11+ 0000
# file closed: ./Macros/KeyboardMacros.asm
 109  0000                                      INCLUDE "./Universe/UniverseMacros/asm_linedraw.asm"
# file opened: ./Universe/UniverseMacros/asm_linedraw.asm
   1+ 0000              ClippingVarsMacro:   MACRO   prefix1?
   2+ 0000 ~            ;-- Clipping code for universe objects -------------------------------------------
   3+ 0000 ~            prefix1?_XX13        DB 0
   4+ 0000 ~
   5+ 0000 ~
   6+ 0000 ~            prefix1?_varK3		 DS	4				; D2
   7+ 0000 ~            prefix1?_centreX     equ prefix1?_varK3
   8+ 0000 ~            prefix1?_varK3p2	 DB	0				; 42
   9+ 0000 ~            prefix1?_varK3p3	 DB	0				; 43
  10+ 0000 ~            prefix1?_varK3p1	 equ prefix1?_varK3+1			; D3
  11+ 0000 ~            prefix1?_varK4		 DS	4				; E0
  12+ 0000 ~            prefix1?_centreY     equ prefix1?_varK4
  13+ 0000 ~            prefix1?_varK4p1	 equ prefix1?_varK4+1			; D3
  14+ 0000 ~            prefix1?_varK5       DS  6
  15+ 0000 ~            prefix1?_varK5p2     equ prefix1?_varK5+2
  16+ 0000 ~            prefix1?_varK6       DS  6
  17+ 0000 ~            prefix1?_varK6p2     equ prefix1?_varK6+2
  18+ 0000 ~
  19+ 0000 ~            prefix1?_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  20+ 0000 ~            prefix1?_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  21+ 0000 ~            prefix1?_XX12p4      DB 0
  22+ 0000 ~            prefix1?_XX12p5      DB 0
  23+ 0000 ~            prefix1?_Delta_x     EQU prefix1?_XX12p2
  24+ 0000 ~            prefix1?_Delta_y     EQU prefix1?_XX12p4
  25+ 0000 ~            prefix1?_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  26+ 0000 ~            prefix1?_Qvar        DB 0
  27+ 0000 ~            prefix1?_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  28+ 0000 ~            prefix1?_Svar        DB 0    ; sign variable
  29+ 0000 ~            prefix1?_SRvarPair   EQU prefix1?_Rvar
  30+ 0000 ~            prefix1?_Xreg        DB 0
  31+ 0000 ~            prefix1?_Yreg        DB 0
  32+ 0000 ~            prefix1?_YXregPair   EQU prefix1?_Xreg
  33+ 0000                                   ENDM
  34+ 0000
  35+ 0000              ;-- Name: LL28 Calculate R = 256 * A / Q
  36+ 0000              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  37+ 0000              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  38+ 0000              ;   Reg mapping 6502  Z80
  39+ 0000              ;               a     a
  40+ 0000              ;               b     x
  41+ 0000              ;               c     q
  42+ 0000              ;               d     r
  43+ 0000              ;
  44+ 0000              ClippingCodeLL28Macro:      MACRO   prefix1?
  45+ 0000 ~            prefix1?_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  46+ 0000 ~                                        ld      c,(hl)                  ; using c as Q var
  47+ 0000 ~                                        cp      c
  48+ 0000 ~                                        FlipCarryFlag
  49+ 0000 ~                                        jp      c, prefix1?_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
  50+ 0000 ~                                        ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  51+ 0000 ~            prefix1?_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
  52+ 0000 ~                                        jp      c, prefix1?_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  53+ 0000 ~                                        FlipCarryFlag                   ;                          If A < N, then C flag is set.
  54+ 0000 ~                                        JumpIfALTNusng c, prefix1?_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  55+ 0000 ~                                                                            ; BCC P%+4
  56+ 0000 ~                                        sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  57+ 0000 ~                                        ClearCarryFlag
  58+ 0000 ~            prefix1?_LL31_SKIPSUB_6502:  FlipCarryFlag
  59+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  60+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  61+ 0000 ~                                        ld      a,b
  62+ 0000 ~                                        ld      (Rvar),a
  63+ 0000 ~                                        ret                             ; RTS                    \ R left with remainder of division
  64+ 0000 ~            prefix1?_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  65+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  66+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  67+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  68+ 0000 ~                                        ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  69+ 0000 ~                                        ld      (Rvar),a                ; .
  70+ 0000 ~                                        ret                             ; .                      \ remainder of the division
  71+ 0000 ~            prefix1?_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  72+ 0000 ~                                        ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  73+ 0000 ~                                        SetCarryFlag                    ; we failed so need carry flag set
  74+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
  75+ 0000 ~
  76+ 0000 ~            prefix1?_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
  77+ 0000 ~                                        ld      c,a
  78+ 0000 ~                                        ld      b,0
  79+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  80+ 0000 ~                                        ClearCarryFlag
  81+ 0000 ~                                        adc     hl,bc
  82+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  83+ 0000 ~                                        ret
  84+ 0000 ~
  85+ 0000 ~            prefix1?_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
  86+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  87+ 0000 ~                                        ClearCarryFlag
  88+ 0000 ~                                        adc     hl,bc
  89+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  90+ 0000 ~                                        ret
  91+ 0000 ~
  92+ 0000 ~            prefix1?_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
  93+ 0000 ~                                        ld      hl,(prefix1?_XX1510)
  94+ 0000 ~                                        ClearCarryFlag
  95+ 0000 ~                                        adc     hl,bc
  96+ 0000 ~                                        ld      (prefix1?_XX1510),hl
  97+ 0000 ~                                        ret
  98+ 0000 ~
  99+ 0000 ~            prefix1?_SUBBCFromY1:       ld      hl,(prefix1?_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 100+ 0000 ~                                        ClearCarryFlag
 101+ 0000 ~                                        sbc     hl,bc
 102+ 0000 ~                                        ld      (SRvarPair),hl
 103+ 0000 ~                                        ret
 104+ 0000 ~
 105+ 0000 ~            prefix1?_AddSRToYX:         ld      hl,(YXregPair)
 106+ 0000 ~                                        ld      de,(SRvarPair)
 107+ 0000 ~                                        ClearCarryFlag
 108+ 0000 ~                                        adc     hl,de
 109+ 0000 ~                                        ld      (YXregPair),hl
 110+ 0000 ~                                        ret
 111+ 0000 ~
 112+ 0000 ~            prefix1?_ClampX:            ld      a,h
 113+ 0000 ~                                        and     a
 114+ 0000 ~                                        ld      a,l
 115+ 0000 ~                                        ret     z
 116+ 0000 ~                                        jp      p,.Max255
 117+ 0000 ~            .ClampXMin0:                ZeroA
 118+ 0000 ~                                        ret
 119+ 0000 ~            .Max255:                    ld      a,$FF
 120+ 0000 ~                                        ret
 121+ 0000 ~
 122+ 0000 ~            prefix1?_ClampY:            ld      a,h
 123+ 0000 ~                                        and     a
 124+ 0000 ~                                        jp      z,.ClampYlo
 125+ 0000 ~                                        jp      p,.Max127
 126+ 0000 ~            .ClampYMin0:                ZeroA
 127+ 0000 ~                                        ret
 128+ 0000 ~            .Max127:                    ld      a,127
 129+ 0000 ~                                        ret
 130+ 0000 ~            .ClampYlo:                  ld      a,l
 131+ 0000 ~                                        and     a
 132+ 0000 ~                                        ret     p
 133+ 0000 ~                                        ld      a,127
 134+ 0000 ~                                        ret
 135+ 0000                                          ENDM
 136+ 0000              ;-- Rountes to code:
 137+ 0000              ;-- LL118
 138+ 0000              ;-- LL120   Done
 139+ 0000              ;-- LL129   Done
 140+ 0000              ;-- LL123   Done
 141+ 0000                             ; NOTE DOES ABS ONLY
 142+ 0000
 143+ 0000
 144+ 0000                              ;--- LL118 Move along a point until on screen
 145+ 0000              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 146+ 0000              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 147+ 0000              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 148+ 0000              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 149+ 0000              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 150+ 0000              ;  Out  XX150               x1 as an 8-bit coordinate
 151+ 0000              ;       XX152               y1 as an 8-bit coordinate
 152+ 0000              ;----------------------------------------------------------------------------------------------------------------
 153+ 0000
 154+ 0000
 155+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 156+ 0000              ;--  Calculate the following:
 157+ 0000              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 158+ 0000              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 159+ 0000              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 160+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 161+ 0000              ClippingCodeLL120Macro:     MACRO   prefix1?
 162+ 0000 ~            prefix1?_LL120_6502:        ld      a,(prefix1?_XX1510)              ;LDA XX15               \ Set R = x1_lo
 163+ 0000 ~                                        ld      (Rvar),a                ;STA R
 164+ 0000 ~                                        call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 165+ 0000 ~                                        push    af                      ;PHA                    \ Store A on the stack so we can use it later
 166+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 167+ 0000 ~                                        ld      a,(Tvar)                ; .
 168+ 0000 ~                                        ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 169+ 0000 ~                                        and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 170+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 171+ 0000 ~                                        jr      nz,prefix1?_LL121_6502           ;.
 172+ 0000 ~            ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 173+ 0000 ~            prefix1?_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 174+ 0000 ~
 175+ 0000 ~                                        IFDEF DEBUG_LL122_DIRECT"
 176+ 0000 ~                                              DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 177+ 0000 ~                                              push    af
 178+ 0000 ~                                        ENDIF
 179+ 0000 ~                                        ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 180+ 0000 ~                                        ld      (Yreg),a                ;TAY
 181+ 0000 ~                                        ld      hl,Svar
 182+ 0000 ~                                        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 183+ 0000 ~                                        ShiftBCRight1                   ;ROR R                  \ into the C flag
 184+ 0000 ~                                        ld      (SRvarPair),bc
 185+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 186+ 0000 ~                                        sla     (hl)                    ;.
 187+ 0000 ~                                        jr      nc, prefix1?_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 188+ 0000 ~            ; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 189+ 0000 ~            prefix1?_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 190+ 0000 ~            prefix1?_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 191+ 0000 ~                                        ShiftBCRight1                   ;ROR R
 192+ 0000 ~                                        ld      (SRvarPair),bc          ;.
 193+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 194+ 0000 ~                                        sla     (hl)                    ;.
 195+ 0000 ~                                        jr      c,prefix1?_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 196+ 0000 ~                                        jr      nz,prefix1?_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 197+ 0000 ~                                        pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 198+ 0000 ~                                        and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 199+ 0000 ~                                        jp      p,prefix1?_LL133_6502            ;.
 200+ 0000 ~                                        ;.. return from the subroutine using a tail call
 201+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 202+ 0000                                  ENDM
 203+ 0000              ;----------------------------------------------------------------------------------------------------------------------------
 204+ 0000              ;-- Calculate the following:
 205+ 0000              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 206+ 0000              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 207+ 0000              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 208+ 0000              ClippingCodeLL122Macro:      MACRO   prefix1?
 209+ 0000 ~            prefix1?_LL123_6502:         call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 210+ 0000 ~                                         push    af                      ;PHA                    \ Store A on the stack so we can use it later
 211+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 212+ 0000 ~                                         ld      a,(Tvar)                ; .
 213+ 0000 ~                                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 214+ 0000 ~                                         and     a                       ;.
 215+ 0000 ~            ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 216+ 0000 ~                                         jr      nz,prefix1?_LL122_6502           ;.
 217+ 0000 ~            ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 218+ 0000 ~            prefix1?_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 219+ 0000 ~                                         ld      (Yreg),a                ;TAY
 220+ 0000 ~                                         sla     a                       ;ASL A                  \ Set X = %11111110
 221+ 0000 ~                                         ld      (Xreg),a                ;TAX
 222+ 0000 ~            ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 223+ 0000 ~            prefix1?_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 224+ 0000 ~                                        ShiftBCLeft1                    ;.
 225+ 0000 ~                                        ld      (SRvarPair),bc          ;ROL S
 226+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Set A = S
 227+ 0000 ~                                        jr      c, prefix1?_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 228+ 0000 ~                                        ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 229+ 0000 ~                                        cp      (hl)
 230+ 0000 ~                                        FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 231+ 0000 ~                                        jr      nc,prefix1?_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 232+ 0000 ~            prefix1?_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 233+ 0000 ~                                        sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 234+ 0000 ~                                        ld      (Svar),a                ;STA S
 235+ 0000 ~                                        ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 236+ 0000 ~                                        ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 237+ 0000 ~                                        sbc     0                       ;SBC #0
 238+ 0000 ~                                        ld      (Rvar),a                ;STA R
 239+ 0000 ~                                        SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 240+ 0000 ~                                        jp      prefix1?_LL132_6502              ;added so that we can do a 6502 style carry above
 241+ 0000 ~            prefix1?_LL132A_6502:        nop; FlipCarryFlag
 242+ 0000 ~            prefix1?_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 243+ 0000 ~                                        RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 244+ 0000 ~                                        ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 245+ 0000 ~                                        jr      c, prefix1?_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 246+ 0000 ~                    IFDEF DEBUG_LL121_DIRECT
 247+ 0000 ~                          DISPLAY "DIRECT CALL TO LL121 so dummy push"
 248+ 0000 ~                                        push    af
 249+ 0000 ~                    ENDIF
 250+ 0000 ~                                        pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 251+ 0000 ~                                        and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 252+ 0000 ~                                        jp      m, prefix1?_LL128_6502           ; .                      \ subroutine with (Y X) as is
 253+ 0000 ~            prefix1?_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 254+ 0000 ~                                        macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 255+ 0000 ~                                        ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 256+ 0000 ~            prefix1?_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 257+ 0000 ~            ;-------------------------------------------------------------------------------------------------------
 258+ 0000 ~            ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 259+ 0000 ~            ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 260+ 0000 ~            prefix1?_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 261+ 0000 ~                                        ld      a,(prefix1?_XX12p2)              ;.
 262+ 0000 ~                                        ld      (Xreg),a                ;.
 263+ 0000 ~                                        ld      (Qvar),a                ;STX Q
 264+ 0000 ~                                        pop     af                      ;.
 265+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 266+ 0000 ~                                        and     a                       ;BPL LL127
 267+ 0000 ~                                        jp      p,prefix1?_LL127_6502            ;.
 268+ 0000 ~                                        ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 269+ 0000 ~                                        ClearCarryFlag                  ;SEC
 270+ 0000 ~                                        ld      hl, Rvar                ;SBC R
 271+ 0000 ~                                        sbc     (hl)                    ;.
 272+ 0000 ~                                        ld      (Rvar),a                ;STA R
 273+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 274+ 0000 ~                                        push    af                      ;PHA
 275+ 0000 ~                                        xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 276+ 0000 ~                                        adc     0                       ;ADC #0
 277+ 0000 ~                                        ld      (Svar),a                ;STA S
 278+ 0000 ~                                        pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 279+ 0000 ~            prefix1?_LL127_6502:        ld      hl,prefix1?_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 280+ 0000 ~                                        xor     (hl)                    ;.
 281+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 282+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 283+ 0000 ~            ;--- LL118 Move along a point until on screen
 284+ 0000 ~            ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 285+ 0000 ~            ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 286+ 0000 ~            ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 287+ 0000 ~            ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 288+ 0000 ~            ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 289+ 0000 ~            ;  Out  XX150               x1 as an 8-bit coordinate
 290+ 0000 ~            ;       XX152               y1 as an 8-bit coordinate
 291+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 292+ 0000 ~
 293+ 0000 ~            prefix1?_LL118_6502:         ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 294+ 0000 ~                                        and     a                       ; BPL LL119              \ .
 295+ 0000 ~                                        jp      p, prefix1?_LL119_6502           ;                        \ following
 296+ 0000 ~            .X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 297+ 0000 ~                                        call    prefix1?_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 298+ 0000 ~                                                                ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 299+ 0000 ~                                                                ; with the sign of (Y X) set to the opposite of the line's direction of slope
 300+ 0000 ~                                        call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 301+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; .
 302+ 0000 ~                                        ld      hl,0                    ; Set x1 = 0
 303+ 0000 ~                                        ld      (prefix1?_XX1510),hl             ; .
 304+ 0000 ~                                        ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 305+ 0000 ~                                        ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 306+ 0000 ~                                        jp      prefix1?_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 307+ 0000 ~            ;-- Entering LL119 a will always be the value of X1 Hi byte
 308+ 0000 ~            prefix1?_LL119_6502:         jp      z,prefix1?_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 309+ 0000 ~                                                                        ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 310+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 311+ 0000 ~                                        dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 312+ 0000 ~                                        ld      (Svar),a                ;
 313+ 0000 ~                                        call    prefix1?_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 314+ 0000 ~                                                                        ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 315+ 0000 ~                                                                        ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 316+ 0000 ~                                        call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 317+ 0000 ~                                        ld      hl,255                  ; LDX #255               \ Set x1 = 255
 318+ 0000 ~                                        ld      ( prefix1?_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 319+ 0000 ~            ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 320+ 0000 ~            prefix1?_LL134_6502:        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 321+ 0000 ~                                        and     a                       ; BPL LL135              \ the following
 322+ 0000 ~                                        jp      p, prefix1?_LL135_6502           ; .
 323+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 324+ 0000 ~                                        ld      a, ( prefix1?_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 325+ 0000 ~                                        ld      (Rvar),a                ; STA R
 326+ 0000 ~                                        call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 327+ 0000 ~                                                                        ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 328+ 0000 ~                                                                        ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 329+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 330+ 0000 ~                                        ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 331+ 0000 ~                                        ld      ( prefix1?_XX1532),hl             ; STA XX15+2, XX15+3
 332+ 0000 ~            prefix1?_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 333+ 0000 ~                                        call    SUBBCFromY1             ; .                      \ .
 334+ 0000 ~                                        jr      c, prefix1?_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 335+ 0000 ~                                                                ;                        \ to return from the subroutine, as we are done
 336+ 0000 ~            ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 337+ 0000 ~            prefix1?_LL139_6502:         call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 338+ 0000 ~            ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 339+ 0000 ~            ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 340+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 341+ 0000 ~                                        ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 342+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 343+ 0000 ~            prefix1?_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 344+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 345+ 0000 ~            ;-- LL145 LINE CLIP
 346+ 0000 ~            ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 347+ 0000 ~            ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 348+ 0000 ~            ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 349+ 0000 ~            ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 350+ 0000 ~            ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 351+ 0000 ~            ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 352+ 0000 ~            ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 353+ 0000 ~            ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 354+ 0000 ~            ; TODO treat horizonal/vert and single pixel as special cases
 355+ 0000                                  ENDM
 356+ 0000
 357+ 0000              ClippingCodeLL145Macro:     MACRO   prefix1?
 358+ 0000 ~            prefix1?_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 359+ 0000 ~                                        ld      (SWAP),a                ; STA SWAP
 360+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 361+ 0000 ~                                        ld      b,a                     ; .
 362+ 0000 ~            ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 363+ 0000 ~            ; for the screen coord we will use 127 though, we use c as a temporay X register
 364+ 0000 ~            prefix1?_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 365+ 0000 ~                                        ld      (Xreg),a                ; .
 366+ 0000 ~            ;                    ld      a,127
 367+ 0000 ~            ;                    ld      c,a
 368+ 0000 ~            .CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 369+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi    ; .
 370+ 0000 ~                                        or      (hl)                    ; .
 371+ 0000 ~                                        jp      nz,prefix1?_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 372+ 0000 ~            .CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 373+ 0000 ~                                        ld      hl,prefix1?_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 374+ 0000 ~                                        cp      (hl)                    ; .
 375+ 0000 ~                                        jp      c,prefix1?_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 376+ 0000 ~                                        ZeroA                           ; LDX #0                 \ Set X = 0
 377+ 0000 ~                                        ld      (Xreg),a
 378+ 0000 ~            prefix1?_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 379+ 0000 ~                                        ld      ( prefix1?_XX13),a      ; now c is released as a temporary x reg
 380+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 381+ 0000 ~                                        ld      hl,prefix1?_XX15Y1hi    ; ORA XX15+3             \ to LL83
 382+ 0000 ~                                        or      (hl)                    ; .
 383+ 0000 ~                                        jp      nz,prefix1?_LL83_6502            ; BNE LL83
 384+ 0000 ~            ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 385+ 0000 ~                                        ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 386+ 0000 ~                                        ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 387+ 0000 ~                                        cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 388+ 0000 ~                                        jp      nc, prefix1?_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 389+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 390+ 0000 ~                                        and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 391+ 0000 ~                                        jp      nz,prefix1?_LL108_6502
 392+ 0000 ~            ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 393+ 0000 ~            ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 394+ 0000 ~            ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 395+ 0000 ~            prefix1?_LL146_6502:        ld      hl,(prefix1?_XX15X1lo)           ;  Save X1 to XX1510
 396+ 0000 ~                                        call    prefix1?_ClampX
 397+ 0000 ~                                        ld      (prefix1?_XX15X1lo),a
 398+ 0000 ~                                        ld      hl,(prefix1?_XX15Y1lo)           ;  hl = y1
 399+ 0000 ~                                        call    prefix1?_ClampY
 400+ 0000 ~                                        ld      (prefix1?_XX1510+1),a            ;  XX1510... = [X1][Y1]
 401+ 0000 ~
 402+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)           ;  de = x2
 403+ 0000 ~                                        call    prefix1?_ClampX
 404+ 0000 ~                                        ld      (prefix1?_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 405+ 0000 ~
 406+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)           ;  bc = y2
 407+ 0000 ~                                        call    prefix1?_ClampY
 408+ 0000 ~                                        ld      (prefix1?_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 409+ 0000 ~                                        ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 410+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 411+ 0000 ~            prefix1?_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 412+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 413+ 0000 ~            prefix1?_LL108_6502:        ld      hl, prefix1?_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 414+ 0000 ~                                        srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 415+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 416+ 0000 ~            ;-- LL145 (Part 2 of 4)
 417+ 0000 ~            prefix1?_LL83_6502:         ld      a,( prefix1?_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 418+ 0000 ~                                        and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 419+ 0000 ~                                        jp      p,prefix1?_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 420+ 0000 ~            ;-- If we get here, both points are off-screen
 421+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 422+ 0000 ~                                        ld      hl,prefix1?_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 423+ 0000 ~                                        and     (hl)
 424+ 0000 ~                                        jp      m, prefix1?_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 425+ 0000 ~                                        ld      a,(prefix1?_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 426+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 427+ 0000 ~                                        and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 428+ 0000 ~                                        jp      m,prefix1?_LL109_6502            ; .
 429+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 430+ 0000 ~                                        dec     a                                ; DEX
 431+ 0000 ~                                        ld      (Xreg),a                         ; TXA
 432+ 0000 ~                                        push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 433+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; .
 434+ 0000 ~                                        dec     a                                ; DEX
 435+ 0000 ~                                        ld      (Xreg),a                         ; STX XX12+2
 436+ 0000 ~                                        pop     af                               ; .              SP+0    restore a register
 437+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 438+ 0000 ~                                        or      (hl)                             ; .
 439+ 0000 ~                                        jp      p, prefix1?_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 440+ 0000 ~            ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 441+ 0000 ~            ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 442+ 0000 ~            prefix1?_LL83_DEBUG:          ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 443+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 444+ 0000 ~                                        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 445+ 0000 ~                                        sbc     0                       ; SBC #0                 \ .
 446+ 0000 ~                                        ld      (prefix1?_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 447+ 0000 ~                                        ld      a,(prefix1?_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 448+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 449+ 0000 ~                                        ld      a,(prefix1?_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 450+ 0000 ~                                        sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 451+ 0000 ~                                        ld      hl,prefix1?_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 452+ 0000 ~                                        or      (hl)                    ; .
 453+ 0000 ~                                        jp      p,prefix1?_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 454+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 0000 ~            ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 456+ 0000 ~            prefix1?_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 457+ 0000 ~                                        push    af                      ; PHA            SP+1    \ call to this subroutine
 458+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 459+ 0000 ~                                        ld      de,(prefix1?_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 460+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+1
 461+ 0000 ~                                        sbc     hl,de                   ; .
 462+ 0000 ~                                        ld      (delta_x),hl            ; .
 463+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 464+ 0000 ~                                        ld      de,(prefix1?_XX15Y1lo)             ;
 465+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+2
 466+ 0000 ~                                        sbc     hl,de                   ; .
 467+ 0000 ~                                        ld      (delta_y),hl            ; .
 468+ 0000 ~            ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 469+ 0000 ~                                        ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 470+ 0000 ~                                        ld      hl,delta_x+1
 471+ 0000 ~                                        xor     (hl)
 472+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 473+ 0000 ~                                        ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 474+ 0000 ~                                        ld      a,h
 475+ 0000 ~                                        and     a
 476+ 0000 ~                                        jp      p, prefix1?_LL110_6502  ; BPL LL110              \ the following
 477+ 0000 ~                                        NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 478+ 0000 ~                                        ld      (delta_y),hl            ; positive, starting with the low bytes
 479+ 0000 ~            prefix1?_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 480+ 0000 ~                                        ld      a,h                     ; BPL LL111              \ the following
 481+ 0000 ~                                        and     a                       ; .
 482+ 0000 ~                                        jp      p,prefix1?_LL111_6502            ; .
 483+ 0000 ~                                        NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 484+ 0000 ~                                        ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 485+ 0000 ~            ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 486+ 0000 ~            prefix1?_LL111_6502:        ld      hl,(delta_x)
 487+ 0000 ~                                        ld      de,(delta_y)
 488+ 0000 ~                                        ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 489+ 0000 ~                                        or      d                       ; BNE LL112
 490+ 0000 ~                                        jp      z,prefix1?_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 491+ 0000 ~            prefix1?_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 492+ 0000 ~                                        ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 493+ 0000 ~                                        ld      (delta_x),hl
 494+ 0000 ~                                        ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 495+ 0000 ~                                        jp       prefix1?_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 496+ 0000 ~            ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 497+ 0000 ~            prefix1?_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 498+ 0000 ~                                        ld      (Tvar),a
 499+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 500+ 0000 ~                                        ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 501+ 0000 ~                                        cp      (hl)
 502+ 0000 ~                                        jp      c, prefix1?_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 503+ 0000 ~            ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 504+ 0000 ~                                        ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 505+ 0000 ~                                        ld      (Qvar),a                ; .
 506+ 0000 ~                                        ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 507+ 0000 ~                                        call    prefix1?_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 508+ 0000 ~                                        jp      prefix1?_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 509+ 0000 ~            ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 510+ 0000 ~            prefix1?_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 511+ 0000 ~                                        ld      (Qvar),a                ; STA Q
 512+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 513+ 0000 ~                                        call    prefix1?_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 514+ 0000 ~                                        ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 515+ 0000 ~                                        ld      (Tvar),a                ;                        \ line is steep
 516+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 517+ 0000 ~            ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 518+ 0000 ~            ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 519+ 0000 ~            ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 520+ 0000 ~            ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 521+ 0000 ~            prefix1?_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 522+ 0000 ~                                        ld      (prefix1?_XX12p2),a     ; STA XX12+2
 523+ 0000 ~                                        ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 524+ 0000 ~                                        ld      (prefix1?_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 525+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 526+ 0000 ~                                        cp      0                       ; BEQ LL138
 527+ 0000 ~                                        jp      z,prefix1?_LL138_6502            ; .
 528+ 0000 ~                                        jp      p, prefix1?_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 529+ 0000 ~            ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 530+ 0000 ~            prefix1?_LL138_6502:          call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 531+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 532+ 0000 ~                                        and     a
 533+ 0000 ~                                        jp      p,prefix1?_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 534+ 0000 ~            ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 535+ 0000 ~            prefix1?_LL117_6502:          ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 536+ 0000 ~                                        ld      hl,prefix1?_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 537+ 0000 ~                                        or      (hl)
 538+ 0000 ~                                        jp      nz, prefix1?_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 539+ 0000 ~                                        ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 540+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 541+ 0000 ~                                        jp      nc, prefix1?_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 542+ 0000 ~            ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 543+ 0000 ~            prefix1?_LLX117_6502:         ld      hl,( prefix1?_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 544+ 0000 ~                                        ld      de,( prefix1?_XX1554)
 545+ 0000 ~                                        ld      ( prefix1?_XX1510),de
 546+ 0000 ~                                        ld      ( prefix1?_XX1554),hl
 547+ 0000 ~                                        ld      hl,( prefix1?_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 548+ 0000 ~                                        ld      de,( prefix1?_XX1576)
 549+ 0000 ~                                        ld      ( prefix1?_XX1532),de
 550+ 0000 ~                                        ld      ( prefix1?_XX1576),hl
 551+ 0000 ~                                        call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 552+ 0000 ~                                        ld      hl,SWAP
 553+ 0000 ~                                        dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 554+ 0000 ~            prefix1?_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 555+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 556+ 0000 ~                                        call    prefix1?_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 557+ 0000 ~                                        ret                             ; then exit so we don't pop it twice
 558+ 0000 ~            prefix1?_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 559+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 560+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 561+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 562+ 0000 ~
 563+ 0000 ~
 564+ 0000 ~            prefix1?_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 565+ 0000 ~                                        ld      de, prefix1?_XX1510
 566+ 0000 ~                                        ld      bc,4*2
 567+ 0000 ~                                        ldir
 568+ 0000 ~                                        call    prefix1?_LL145_6502                      ; perform 6502 version
 569+ 0000 ~                                        ret     c                               ; returns if carry is set as its a no draw
 570+ 0000 ~            .CopyBackResults:           ld      hl,0
 571+ 0000 ~                                        ld      (x1),hl
 572+ 0000 ~                                        ld      (y1),hl
 573+ 0000 ~                                        ld      (x2),hl
 574+ 0000 ~                                        ld      (y2),hl
 575+ 0000 ~                                        ld      a,( prefix1?_XX1510)
 576+ 0000 ~                                        ld      (x1),a
 577+ 0000 ~                                        ld      c,a
 578+ 0000 ~                                        ld      a,( prefix1?_XX1510+1)
 579+ 0000 ~                                        ld      (y1),a
 580+ 0000 ~                                        ld      b,a
 581+ 0000 ~                                        ld      a,( prefix1?_XX1510+2)
 582+ 0000 ~                                        ld      (x2),a
 583+ 0000 ~                                        ld      e,a
 584+ 0000 ~                                        ld      a,( prefix1?_XX1510+3)
 585+ 0000 ~                                        ld      (y2),a
 586+ 0000 ~                                        ld      d,a
 587+ 0000 ~                                        ld      a,$FF
 588+ 0000 ~                                        ClearCarryFlag
 589+ 0000 ~                                        ret
 590+ 0000                      ENDM
# file closed: ./Universe/UniverseMacros/asm_linedraw.asm
 110  0000                                      INCLUDE "./Universe/UniverseMacros/UniverseVarsDefineMacro.asm"
# file opened: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
   1+ 0000              ; -- AI Core data
   2+ 0000              UnivCoreAIVarsMacro:        MACRO  prefix1?
   3+ 0000 ~            prefix1?_BnKRotXCounter             DB  0                       ; INWK +29
   4+ 0000 ~            prefix1?_BnKRotZCounter             DB  0                       ; INWK +30
   5+ 0000 ~            prefix1?_BnkCam0yLo                 DB  0                       ; INWK +33 ????
   6+ 0000 ~            prefix1?_BnkCam0yHi                 DB  0                       ; INWK +34?????
   7+ 0000 ~            prefix1?_BnKShipType                DB  0
   8+ 0000 ~
   9+ 0000 ~            ; Used to make 16 bit reads a little cleaner in source code
  10+ 0000 ~            prefix1?_BnKzPoint                  DS  3
  11+ 0000 ~            prefix1?_BnKzPointLo                equ prefix1?_BnKzPoint
  12+ 0000 ~            prefix1?_BnKzPointHi                equ prefix1?_BnKzPoint+1
  13+ 0000 ~            prefix1?_BnKzPointSign              equ prefix1?_BnKzPoint+2
  14+ 0000 ~
  15+ 0000 ~            ; Used for medridan drawing routines
  16+ 0000 ~            prefix1?_BnKCx                      DW  0
  17+ 0000 ~            prefix1?_BnKCxSign                  EQU prefix1?_BnKCx+1
  18+ 0000 ~            prefix1?_BnKCy                      DW  0
  19+ 0000 ~            prefix1?_BnKCySign                  EQU prefix1?_BnKCy+1
  20+ 0000 ~            prefix1?_BnKUx                      DW  0
  21+ 0000 ~            prefix1?_BnKUxSign                  EQU prefix1?_BnKUx+1
  22+ 0000 ~            prefix1?_BnKUy                      DW  0
  23+ 0000 ~            prefix1?_BnKUySign                  EQU prefix1?_BnKUy+1
  24+ 0000 ~            prefix1?_BnKVx                      DW  0
  25+ 0000 ~            prefix1?_BnKVxSign                  EQU prefix1?_BnKVx+1
  26+ 0000 ~            prefix1?_BnKVy                      DW  0
  27+ 0000 ~            prefix1?_BnKVySign                  EQU prefix1?_BnKVy+1
  28+ 0000 ~            prefix1?_BnKSinCNT2                 DB  0
  29+ 0000 ~            prefix1?_BnKSinCNT2Sign             DB  0
  30+ 0000 ~            prefix1?_BnKCosCNT2                 DB  0
  31+ 0000 ~            prefix1?_BnKCosCNT2Sign             DB  0
  32+ 0000 ~            prefix1?_BnKUxCos                   DB  0
  33+ 0000 ~            prefix1?_BnKUxCosSign               DB  0
  34+ 0000 ~            prefix1?_BnKUyCos                   DB  0
  35+ 0000 ~            prefix1?_BnKUyCosSign               DB  0
  36+ 0000 ~            prefix1?_BnKVxSin                   DB  0
  37+ 0000 ~            prefix1?_BnKVxSinSign               DB  0
  38+ 0000 ~            prefix1?_BnKVySin                   DB  0
  39+ 0000 ~            prefix1?_BnKVySinSign               DB  0
  40+ 0000 ~            prefix1?_BnKVxVySinSign             DB  0
  41+ 0000 ~            prefix1?_BnKUxUyCosSign             DB  0
  42+ 0000 ~            prefix1?_BnKUxCosAddVxSin           DW  0
  43+ 0000 ~            prefix1?_BnKUyCosSubVySin           DW  0
  44+ 0000 ~            prefix1?_BnKAngle                   DB  0
  45+ 0000 ~            s
  46+ 0000 ~
  47+ 0000 ~            ; General local variables used in universe object
  48+ 0000 ~            prefix1?_BnKTGT                     DB  0
  49+ 0000 ~            prefix1?_BnKSTP                     DB  0
  50+ 0000 ~            prefix1?_BnKLSP                     DS  50              ; move to planet or L2 code ?
  51+ 0000 ~            prefix1?_BnKCNT                     DB  0               ; 93
  52+ 0000 ~            prefix1?_BnKCNT2                    DB  0               ; 93
  53+ 0000 ~            ; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  54+ 0000 ~                IFDEF MERIDANLINEDEBUG
  55+ 0000 ~            prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  56+ 0000 ~            prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  57+ 0000 ~                ENDIF
  58+ 0000 ~            prefix1?_BnKPlotIndex               DB  0
  59+ 0000 ~                DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  60+ 0000 ~            prefix1?_BnKFlag					DB  0
  61+ 0000 ~
  62+ 0000 ~            ; Post clipping the results are now 8 bit
  63+ 0000 ~            prefix1?_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  64+ 0000 ~            prefix1?_BnKProjectedY              DB  0
  65+ 0000 ~            prefix1?_BnKProjectedX              DB  0
  66+ 0000 ~            prefix1?_BnKProjected               equ prefix1?_BnKProjectedY  ; resultant projected position
  67+ 0000 ~            prefix1?_XX15Save                   DS  8
  68+ 0000 ~            prefix1?_XX15Save2                  DS  8
  69+ 0000 ~            prefix1?_Radius                     DB  0
  70+ 0000 ~            ; Used when drawing curves for the end value from previous calls to BLINE
  71+ 0000 ~            ; held as 16 bit values pre clipping
  72+ 0000 ~            prefix1?_PrevXPos                   DW 0
  73+ 0000 ~            prefix1?_PrevYPos                   DW 0
  74+ 0000 ~            prefix1?_NewXPos                    DW 0
  75+ 0000 ~            prefix1?_NewYPos                    DW 0
  76+ 0000 ~
  77+ 0000 ~            ; Colouration
  78+ 0000 ~            ; For planets, Colour 1 is main colour, Colour 2 is outer rim
  79+ 0000 ~            ; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  80+ 0000 ~            prefix1?_Colour1                    DB 0
  81+ 0000 ~            prefix1?_Colour2                    DB 0
  82+ 0000 ~            prefix1?_Colour2Thickness           DB 0
  83+ 0000 ~
  84+ 0000 ~            ;        -- _pl(prf .. "Radius                     DW  0
  85+ 0000 ~            ;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  86+ 0000                                           ENDM
  87+ 0000
  88+ 0000              UnivPosVarsMacro:            MACRO  prefix1?
  89+ 0000 ~            prefix1?_BnKxlo                     DB  0                       ; INWK+0
  90+ 0000 ~            prefix1?_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  91+ 0000 ~            prefix1?_BnKxsgn                    DB  0                       ; INWK+2
  92+ 0000 ~            prefix1?_BnKylo                     DB  0                       ; INWK+3 \ ylo
  93+ 0000 ~            prefix1?_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  94+ 0000 ~            prefix1?_BnKysgn                    DB  0                       ; INWK +5
  95+ 0000 ~            prefix1?_BnKzlo                     DB  0                       ; INWK +6
  96+ 0000 ~            prefix1?_BnKzhi                     DB  0                       ; INWK +7
  97+ 0000 ~            prefix1?_BnKzsgn                    DB  0                       ; INWK +8
  98+ 0000 ~            prefix1?_CompassX                   DW  0
  99+ 0000 ~            prefix1?_CompassY                   DW  0
 100+ 0000 ~            prefix1?_BnKElipseCenterX           DW  0
 101+ 0000 ~            prefix1?_BnKElipseCenterY           DW  0
 102+ 0000 ~            prefix1?_BnKElipseRadiusU           DW  0
 103+ 0000 ~            prefix1?_BnKElipseRadiusV           DW  0
 104+ 0000                                          ENDM
 105+ 0000
 106+ 0000              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
 107+ 0000              ;-Rotation Matrix of Universe Object-----------------------------------------------------------------------------------------------
 108+ 0000              UnivRotationVarsMacro:      MACRO prefix1?
 109+ 0000 ~            prefix1?_BnKrotmatSidevX            DW  0                       ; INWK +21
 110+ 0000 ~            prefix1?_BnKrotmatSidev             equ prefix1?_BnKrotmatSidevX
 111+ 0000 ~            prefix1?_BnKrotmatSidevY            DW  0                       ; INWK +23
 112+ 0000 ~            prefix1?_BnKrotmatSidevZ            DW  0                       ; INWK +25
 113+ 0000 ~            prefix1?_BnKrotmatRoofvX            DW  0                       ; INWK +15
 114+ 0000 ~            prefix1?_BnKrotmatRoofv             equ prefix1?_BnKrotmatRoofvX
 115+ 0000 ~            prefix1?_BnKrotmatRoofvY            DW  0                       ; INWK +17
 116+ 0000 ~            prefix1?_BnKrotmatRoofvZ            DW  0                       ; INWK +19
 117+ 0000 ~            prefix1?_BnKrotmatNosevX            DW  0                       ; INWK +9
 118+ 0000 ~            prefix1?_BnKrotmatNosev             EQU prefix1?_BnKrotmatNosevX
 119+ 0000 ~            prefix1?_BnKrotmatNosevY            DW  0                       ; INWK +11
 120+ 0000 ~            prefix1?_BnKrotmatNosevZ            DW  0                       ; INWK +13
 121+ 0000                                          ENDM
 122+ 0000
 123+ 0000
 124+ 0000              XX15DefineMacro: MACRO   prefix1?
 125+ 0000 ~
 126+ 0000 ~            prefix1?_BnKXScaled                  DB  0               ; XX15+0Xscaled
 127+ 0000 ~            prefix1?_BnKXScaledSign              DB  0               ; XX15+1xsign
 128+ 0000 ~            prefix1?_BnKYScaled                  DB  0               ; XX15+2yscaled
 129+ 0000 ~            prefix1?_BnKYScaledSign              DB  0               ; XX15+3ysign
 130+ 0000 ~            prefix1?_BnKZScaled                  DB  0               ; XX15+4zscaled
 131+ 0000 ~            prefix1?_BnKZScaledSign              DB  0               ; XX15+5zsign
 132+ 0000 ~            prefix1?_XX1576                      DW  0    ; y2
 133+ 0000 ~
 134+ 0000 ~            prefix1?_XX15:                       equ prefix1?_BnKXScaled
 135+ 0000 ~            prefix1?_XX15VecX:                   equ prefix1?_XX15
 136+ 0000 ~            prefix1?_XX15VecY:                   equ prefix1?_XX15+1
 137+ 0000 ~            prefix1?_XX15VecZ:                   equ prefix1?_XX15+2
 138+ 0000 ~            prefix1?_BnKXPoint:                  equ prefix1?_XX15
 139+ 0000 ~            prefix1?_BnKXPointLo:                equ prefix1?_XX15+0
 140+ 0000 ~            prefix1?_BnKXPointHi:                equ prefix1?_XX15+1
 141+ 0000 ~            prefix1?_BnKXPointSign:              equ prefix1?_XX15+2
 142+ 0000 ~            prefix1?_BnKYPoint:                  equ prefix1?_XX15+3
 143+ 0000 ~            prefix1?_BnKYPointLo:                equ prefix1?_XX15+3
 144+ 0000 ~            prefix1?_BnKYPointHi:                equ prefix1?_XX15+4
 145+ 0000 ~            prefix1?_BnKYPointSign:              equ prefix1?_XX15+5
 146+ 0000 ~
 147+ 0000 ~            prefix1?_XX1510                      EQU prefix1?_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 148+ 0000 ~            prefix1?_XX1532                      EQU prefix1?_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 149+ 0000 ~            prefix1?_XX1554                      EQU prefix1?_BnKZScaled   ; x2
 150+ 0000 ~            prefix1?_XX1554p1                    EQU prefix1?_XX1554+1
 151+ 0000 ~            prefix1?_XX15X1lo                    EQU prefix1?_XX1510
 152+ 0000 ~            prefix1?_XX15X1hi                    EQU prefix1?_XX1510+1
 153+ 0000 ~            prefix1?_XX15Y1lo                    EQU prefix1?_XX1532
 154+ 0000 ~            prefix1?_XX15Y1hi                    EQU prefix1?_XX1532+1
 155+ 0000 ~            prefix1?_XX15X2lo                    EQU prefix1?_XX1554
 156+ 0000 ~            prefix1?_XX15X2hi                    EQU prefix1?_XX1554+1
 157+ 0000 ~            prefix1?_XX15Y2lo                    EQU prefix1?_XX1210
 158+ 0000 ~            prefix1?_XX15Y2hi                    EQU prefix1?_XX1210+1
 159+ 0000 ~            prefix1?_XX15PlotX1                  EQU prefix1?_XX15
 160+ 0000 ~            prefix1?_XX15PlotY1                  EQU prefix1?_XX15+1
 161+ 0000 ~            prefix1?_XX15PlotX2                  EQU prefix1?_XX15+2
 162+ 0000 ~            prefix1?_XX15PlotY2                  EQU prefix1?_XX15+3
 163+ 0000                          ENDM
 164+ 0000
 165+ 0000              XX12DefineMacro: MACRO   prefix1?
 166+ 0000 ~            ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
 167+ 0000 ~            ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
 168+ 0000 ~
 169+ 0000 ~            prefix1?_XX1210                     EQU prefix1?_XX1576
 170+ 0000 ~            prefix1?_XX12p1                     EQU prefix1?_XX1210+1
 171+ 0000 ~            prefix1?_XX12                       EQU prefix1?_XX1210
 172+ 0000 ~
 173+ 0000 ~
 174+ 0000 ~            prefix1?_BnKXX12xLo                 EQU prefix1?_XX12               ; XX12+0
 175+ 0000 ~            prefix1?_BnKXX12xSign               EQU prefix1?_XX12+1   ; XX12+1
 176+ 0000 ~            prefix1?_BnKXX12yLo                 EQU prefix1?_XX12+2   ; XX12+2
 177+ 0000 ~            prefix1?_BnKXX12ySign               EQU prefix1?_XX12+3   ; XX12+3
 178+ 0000 ~            prefix1?_BnKXX12zLo                 EQU prefix1?_XX12+4   ; XX12+4
 179+ 0000 ~            prefix1?_BnKXX12zSign               EQU prefix1?_XX12+5   ; XX12+5
 180+ 0000 ~            prefix1?_XX12Save                   DS  6
 181+ 0000 ~            prefix1?_XX12Save2                  DS  6
 182+ 0000 ~
 183+ 0000 ~            prefix1?_varXX12                    EQU prefix1?_XX12
 184+ 0000 ~            ; Repurposed XX12 when plotting lines
 185+ 0000 ~            prefix1?_BnkY2                      equ prefix1?_XX12+0
 186+ 0000 ~            prefix1?_BnKy2Lo                    equ prefix1?_XX12+0
 187+ 0000 ~            prefix1?_BnkY2Hi                    equ prefix1?_XX12+1
 188+ 0000 ~            prefix1?_BnkDeltaXLo                equ prefix1?_XX12+2
 189+ 0000 ~            prefix1?_BnkDeltaXHi                equ prefix1?_XX12+3
 190+ 0000 ~            prefix1?_BnkDeltaYLo                equ prefix1?_XX12+4
 191+ 0000 ~            prefix1?_BnkDeltaYHi                equ prefix1?_XX12+5
 192+ 0000 ~            prefix1?_BnkGradient                equ prefix1?_XX12+2
 193+ 0000 ~            prefix1?_BnkTemp1                   equ prefix1?_XX12+2
 194+ 0000 ~            prefix1?_BnkTemp1Lo                 equ prefix1?_XX12+2
 195+ 0000 ~            prefix1?_BnkTemp1Hi                 equ prefix1?_XX12+3
 196+ 0000 ~            prefix1?_BnkTemp2                   equ prefix1?_XX12+3
 197+ 0000 ~            prefix1?_BnkTemp2Lo                 equ prefix1?_XX12+3
 198+ 0000 ~            prefix1?_BnkTemp2Hi                 equ prefix1?_XX12+4
 199+ 0000                                          ENDM
 200+ 0000
 201+ 0000              XX16DefineMacro: MACRO   prefix1?
 202+ 0000 ~            ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
 203+ 0000 ~            prefix1?_BnkTransmatSidevX          DW  0               ; XX16+0
 204+ 0000 ~            prefix1?_BnkTransmatSidev           EQU prefix1?_BnkTransmatSidevX
 205+ 0000 ~            prefix1?_BnkTransmatSidevY          DW 0                ; XX16+2
 206+ 0000 ~            prefix1?_BnkTransmatSidevZ          DW 0                ; XX16+2
 207+ 0000 ~            prefix1?_BnkTransmatRoofvX          DW 0
 208+ 0000 ~            prefix1?_BnkTransmatRoofv           EQU prefix1?_BnkTransmatRoofvX
 209+ 0000 ~            prefix1?_BnkTransmatRoofvY          DW 0                ; XX16+2
 210+ 0000 ~            prefix1?_BnkTransmatRoofvZ          DW 0                ; XX16+2
 211+ 0000 ~            prefix1?_BnkTransmatNosevX          DW 0
 212+ 0000 ~            prefix1?_BnkTransmatNosev           EQU prefix1?_BnkTransmatNosevX
 213+ 0000 ~            prefix1?_BnkTransmatNosevY          DW 0                ; XX16+2
 214+ 0000 ~            prefix1?_BnkTransmatNosevZ          DW 0                ; XX16+2
 215+ 0000 ~            prefix1?_BnkTransmatTransX          DW 0
 216+ 0000 ~            prefix1?_BnkTransmatTransY          DW 0
 217+ 0000 ~            prefix1?_BnkTransmatTransZ          DW 0
 218+ 0000 ~            prefix1?_XX16                       equ prefix1?_BnkTransmatSidev
 219+ 0000 ~            ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
 220+ 0000 ~            prefix1?_BnkTransInvRow0x0          DW 0
 221+ 0000 ~            prefix1?_BnkTransInvRow0x1          DW 0
 222+ 0000 ~            prefix1?_BnkTransInvRow0x2          DW 0
 223+ 0000 ~            prefix1?_BnkTransInvRow0x3          DW 0
 224+ 0000 ~            prefix1?_BnkTransInvRow1y0          DW 0
 225+ 0000 ~            prefix1?_BnkTransInvRow1y1          DW 0
 226+ 0000 ~            prefix1?_BnkTransInvRow1y2          DW 0
 227+ 0000 ~            prefix1?_BnkTransInvRow1y3          DW 0
 228+ 0000 ~            prefix1?_BnkTransInvRow2z0          DW 0
 229+ 0000 ~            prefix1?_BnkTransInvRow2z1          DW 0
 230+ 0000 ~            prefix1?_BnkTransInvRow2z2          DW 0
 231+ 0000 ~            prefix1?_BnkTransInvRow2z3          DW 0
 232+ 0000 ~
 233+ 0000 ~            prefix1?_XX16Inv                    equ prefix1?_BnkTransInvRow0x0
 234+ 0000                                          ENDM
 235+ 0000
 236+ 0000              XX18DefineMacro: MACRO   prefix1?
 237+ 0000 ~            ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
 238+ 0000 ~            prefix1?_BnkDrawCam0xLo             DB  0               ; XX18+0
 239+ 0000 ~            prefix1?_BnkDrawCam0xHi             DB  0               ; XX18+1
 240+ 0000 ~            prefix1?_BnkDrawCam0xSgn            DB  0               ; XX18+2
 241+ 0000 ~            prefix1?_BnkDrawCam0x               equ prefix1?_BnkDrawCam0xLo
 242+ 0000 ~            prefix1?_BnkDrawCam0yLo             DB  0               ; XX18+3
 243+ 0000 ~            prefix1?_BnkDrawCam0yHi             DB  0               ; XX18+4
 244+ 0000 ~            prefix1?_BnkDrawCam0ySgn            DB  0               ; XX18+5
 245+ 0000 ~            prefix1?_BnkDrawCam0y               equ prefix1?_BnkDrawCam0yLo
 246+ 0000 ~            prefix1?_BnkDrawCam0zLo             DB  0               ; XX18+6
 247+ 0000 ~            prefix1?_BnkDrawCam0zHi             DB  0               ; XX18+7
 248+ 0000 ~            prefix1?_BnkDrawCam0zSgn            DB  0               ; XX18+8
 249+ 0000 ~            prefix1?_BnkDrawCam0z               equ prefix1?_BnkDrawCam0zLo
 250+ 0000 ~            prefix1?_XX18                       equ prefix1?_BnkDrawCam0xLo
 251+ 0000                                          ENDM
 252+ 0000
 253+ 0000              XX25DefineMacro: MACRO   prefix1?
 254+ 0000 ~            ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
 255+ 0000 ~            prefix1?_BnKProjxLo                 DB  0
 256+ 0000 ~            prefix1?_BnKProjxHi                 DB  0
 257+ 0000 ~            prefix1?_BnKProjxSgn                DB  0
 258+ 0000 ~            prefix1?_BnKProjx                   EQU prefix1?_BnKProjxLo
 259+ 0000 ~            prefix1?_BnKProjyLo                 DB  0
 260+ 0000 ~            prefix1?_BnKProjyHi                 DB  0
 261+ 0000 ~            prefix1?_BnKProjySgn                DB  0
 262+ 0000 ~            prefix1?_BnKProjy                   EQU prefix1?_BnKProjyLo
 263+ 0000 ~            prefix1?_BnKProjzLo                 DB  0
 264+ 0000 ~            prefix1?_BnKProjzHi                 DB  0
 265+ 0000 ~            prefix1?_BnKProjzSgn                DB  0
 266+ 0000 ~            prefix1?_BnKProjz                   EQU prefix1?_BnKProjzLo
 267+ 0000 ~            prefix1?_XX25                       EQU prefix1?_BnKProjxLo
 268+ 0000                                          ENDM
 269+ 0000
 270+ 0000              CopyPosToXX15Macro: MACRO   prefix1?
 271+ 0000 ~
 272+ 0000 ~            prefix1?_CopyPosToXX15:    ld hl,prefix1?_Bnkxhi
 273+ 0000 ~                                       ld de,prefix1?_BnkXScaled
 274+ 0000 ~                                       ldi
 275+ 0000 ~                                       ldi
 276+ 0000 ~                                       inc hl ; skip to y high
 277+ 0000 ~                                       ldi
 278+ 0000 ~                                       ldi
 279+ 0000 ~                                       inc hl ; skip to z hig
 280+ 0000 ~                                       ldi
 281+ 0000 ~                                       ldi
 282+ 0000 ~                                       ret
 283+ 0000                                  ENDM
 284+ 0000
 285+ 0000              CopyXX12ScaledToXX18Macro:  MACRO    prefix1?
 286+ 0000 ~            prefix1?_CopyXX12ScaledToXX18:
 287+ 0000 ~            prefix1?_CopyResultToDrawCam:    ld      hl, prefix1?_XX12
 288+ 0000 ~                                             ld      de, prefix1?_XX18
 289+ 0000 ~                                             ldi    ; X12+0 => XX18+0  Set XX18(2 0) = dot_sidev
 290+ 0000 ~                                             inc de ; skip to XX18+2 as it will be on XX18+1
 291+ 0000 ~                                             ldi    ; XX12+1 => XX18+2
 292+ 0000 ~                                             ldi    ; XX12+2 => XX18+3 Set XX12+1 => XX18+2
 293+ 0000 ~                                             inc de ; skip to XX18+5 as it will be on XX18+4
 294+ 0000 ~                                             ldi    ; XX12+3 => XX18+5
 295+ 0000 ~                                             ldi    ; XX12+4 => XX18+6 Set XX18(8 6) = dot_nosev
 296+ 0000 ~                                             inc de ; skip to XX18+8 as it will be on XX18+7
 297+ 0000 ~                                             ldi    ; XX12+5 => XX18+8
 298+ 0000 ~                                             ret
 299+ 0000                                          ENDM
 300+ 0000
 301+ 0000              CopyXX12toXX15Macro:        MACRO    prefix1?
 302+ 0000 ~            prefix1?_CopyXX12toXX15:         ld      hl, prefix1?_BnkXX12xLo
 303+ 0000 ~                                             ld      de, prefix1?_XX18
 304+ 0000 ~                                             ldi      ; xlo
 305+ 0000 ~                                             ldi      ; xsg
 306+ 0000 ~                                             ldi      ; xlo
 307+ 0000 ~                                             ldi      ; xsg
 308+ 0000 ~                                             ldi      ; xlo
 309+ 0000 ~                                             ldi      ; xsg
 310+ 0000 ~                                             ret
 311+ 0000                                          ENDM
 312+ 0000
 313+ 0000              InitialiseUniverseObjMacro: MACRO   prefix1?
 314+ 0000 ~            prefix1?_InitRotMat:    ld      hl, 0
 315+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevY),hl       ; set the zeroes
 316+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevZ),hl       ; set the zeroes
 317+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvX),hl       ; set the zeroes
 318+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvZ),hl       ; set the zeroes
 319+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevX),hl       ; set the zeroes
 320+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevY),hl       ; set the zeroes
 321+ 0000 ~            ; Optimised as already have 0 in l
 322+ 0000 ~                                    ld      h, $60	             				; 96 in hi byte
 323+ 0000 ~                                    ;ld      hl,1
 324+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevX),hl
 325+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvY),hl
 326+ 0000 ~            ; Optimised as already have 0 in l
 327+ 0000 ~                                    ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 328+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevZ),hl
 329+ 0000 ~                                    ret
 330+ 0000                                          ENDM
 331+ 0000
 332+ 0000              ZeroPitchAndRollMacro:  MACRO   prefix1?
 333+ 0000 ~            prefix1?_ZeroPitchAndRoll:
 334+ 0000 ~                                    xor     a
 335+ 0000 ~                                    ld      (prefix1?_BnKRotXCounter),a
 336+ 0000 ~                                    ld      (prefix1?_BnKRotZCounter),a
 337+ 0000                                      ENDM
 338+ 0000
 339+ 0000              MaxPitchAndRollMacro:   MACRO   prefix1?
 340+ 0000 ~            prefix1?_MaxPitchAndRoll:
 341+ 0000 ~                                    ld      a,127
 342+ 0000 ~                                    ld      (prefix1?_BnKRotXCounter),a
 343+ 0000 ~                                    ld      (prefix1?_BnKRotZCounter),a
 344+ 0000                                      ENDM
 345+ 0000
 346+ 0000              RandomPitchAndRollMacro: MACRO  prefix1?
 347+ 0000 ~            prefix1?_RandomPitchAndRoll:
 348+ 0000 ~                                    call    doRandom
 349+ 0000 ~                                    or      %01101111
 350+ 0000 ~                                    ld      (prefix1?_BnKRotXCounter),a
 351+ 0000 ~                                    call    doRandom
 352+ 0000 ~                                    or      %01101111
 353+ 0000 ~                                    ld      (prefix1?_BnKRotZCounter),a
 354+ 0000                                      ENDM
 355+ 0000
 356+ 0000              RandomSpeedMacro:       MACRO   prefix1?
 357+ 0000 ~            prefix1?_RandomSpeed:
 358+ 0000 ~                                    call    doRandom
 359+ 0000 ~                                    and     31
 360+ 0000 ~                                    ld      (prefix1?_BnKSpeed),a
 361+ 0000                                      ENDM
 362+ 0000
 363+ 0000              MaxSpeedMacro:          MACRO   prefix1?
 364+ 0000 ~            prefix1?_MaxSpeed:      ld      a,31
 365+ 0000 ~                                    ld      (prefix1?_BnKSpeed),a
 366+ 0000                                      ENDM
 367+ 0000
 368+ 0000              ZeroAccellerationMacro: MACRO   predix1?
 369+ 0000 ~            prefix1?_ZeroAccelleration:
 370+ 0000 ~                                    xor     a
 371+ 0000 ~                                    ld      (prefix1?_BnKAccel),a
 372+ 0000                                      ENDM
 373+ 0000
 374+ 0000
 375+ 0000              SetShipHostileMacro:    MACRO   prefix1?
 376+ 0000 ~            prefix1?_SetShipHostile ld      a,(prefix1?_ShipNewBitsAddr)
 377+ 0000 ~                                    or      ShipIsHostile
 378+ 0000 ~                                    ld      (prefix1?_ShipNewBitsAddr),a
 379+ 0000 ~                                    ret
 380+ 0000                                      ENDM
 381+ 0000
 382+ 0000              ClearShipHostileMacro:  MACRO    prefix1?
 383+ 0000 ~            prefix1?_ClearShipHostile: ld      a,(prefix1?_ShipNewBitsAddr)
 384+ 0000 ~                                    and     ShipNotHostile
 385+ 0000 ~                                    ld      (prefix1?_ShipNewBitsAddr),a
 386+ 0000 ~                                    ret
 387+ 0000                                      ENDM
 388+ 0000
 389+ 0000              ResetBankDataMacro:     MACRO   prefix1?
 390+ 0000 ~            prefix1?_ResetBnKData:  ld      hl,prefix1?_StartOfUniv
 391+ 0000 ~                                    ld      de,prefix?_BnK_Data_len
 392+ 0000 ~                                    xor     a
 393+ 0000 ~                                    call    memfill_dma
 394+ 0000 ~                                    ret
 395+ 0000                                      ENDM
 396+ 0000
 397+ 0000              ResetBnKPositionMacro:  MACRO   prefix1?
 398+ 0000 ~            prefix1?_ResetBnkPosition:
 399+ 0000 ~                                    ld      hl,prefix1?_BnKxlo
 400+ 0000 ~                                    ld      b, 3*3
 401+ 0000 ~                                    xor     a
 402+ 0000 ~            .zeroLoop:              ld      (hl),a
 403+ 0000 ~                                    inc     hl
 404+ 0000 ~                                    djnz    .zeroLoop
 405+ 0000 ~                                    ret
 406+ 0000                                      ENDM
 407+ 0000
 408+ 0000              FireEMCMacro:           MACRO   prefix1?
 409+ 0000 ~            prefix1?_FireECM:       ld      a,ECMCounterMax                 ; set ECM time
 410+ 0000 ~                                    ld      (prefix1?_BnKECMCountDown),a            ;
 411+ 0000 ~                                    ld      a,(ECMCountDown)
 412+ 0000 ~                                    ReturnIfALTNusng ECMCounterMax
 413+ 0000 ~                                    ld      a,ECMCounterMax
 414+ 0000 ~                                    ld      (ECMCountDown),a
 415+ 0000 ~                                    ret
 416+ 0000                                      ENDM
 417+ 0000
 418+ 0000
 419+ 0000              RechargeEnergyMacro:    MACRO   prefix1?
 420+ 0000 ~            prefix1?_RechargeEnergy:ld      a,(prefix1?_BnKEnergy)
 421+ 0000 ~                                    ReturnIfAGTEMemusng EnergyAddr
 422+ 0000 ~                                    inc     a
 423+ 0000 ~                                    ld      (prefix1?_BnKEnergy),a
 424+ 0000 ~                                    ret
 425+ 0000                                      ENDM
 426+ 0000
 427+ 0000
 428+ 0000              UpdateECMMacro:         MACRO   prefix1?
 429+ 0000 ~            prefix1?_UpdateECM:     ld      a,(prefix1?_BnKECMCountDown)
 430+ 0000 ~                                    ReturnIfAIsZero
 431+ 0000 ~                                    dec     a
 432+ 0000 ~                                    ld      (prefix1?_BnKECMCountDown),a
 433+ 0000 ~                                    ld      hl,prefix1?_BnKEnergy
 434+ 0000 ~                                    dec     (hl)
 435+ 0000 ~                                    ret     p
 436+ 0000 ~            .ExhaustedEnergy:       call    prefix1?_UnivExplodeShip      ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 437+ 0000 ~                                    ret
 438+ 0000                                      ENDM
 439+ 0000
 440+ 0000               ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 441+ 0000              JumpOffSetMacro:        MACRO   prefix1?, Axis
 442+ 0000 ~            prefix1?_JumpOffSet:    ld      hl,(Axis)
 443+ 0000 ~                                    ld      a,h
 444+ 0000 ~                                    and     SignOnly8Bit
 445+ 0000 ~                                    jr      nz,.NegativeAxis
 446+ 0000 ~            .PositiveAxis:          dec     l
 447+ 0000 ~                                    jp      m,.MovingNegative
 448+ 0000 ~                                    jp      .Done
 449+ 0000 ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 450+ 0000 ~                                    jp      .Done
 451+ 0000 ~            .MovingNegative:        ld      hl,$8001                        ; -1
 452+ 0000 ~            .Done                   ld      (Axis),hl
 453+ 0000                                      ENDM
 454+ 0000
 455+ 0000
 456+ 0000              WarpOffSetMacro:        MACRO   prefix1?
 457+ 0000 ~            prefix1?_WarpOffset:    prefix1?_JumpOffSet  prefix1?_BnKzhi                     ; we will simplify on just moving Z
 458+ 0000 ~                                    ret
 459+ 0000                                      ENDM
 460+ 0000
 461+ 0000
 462+ 0000              ; --------------------------------------------------------------
 463+ 0000              ; This sets the ship as a shower of explosiondwd
 464+ 0000              ExplodeShipMacro:       MACRO   prefix1?
 465+ 0000 ~            prefix1?_ExplodeShip:   ld      a,(prefix1?_BnKaiatkecm)
 466+ 0000 ~                                    or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 467+ 0000 ~                                    and     Bit7Clear                       ; Remove AI
 468+ 0000 ~                                    ld      (prefix1?_BnKaiatkecm),a
 469+ 0000 ~                                    xor     a
 470+ 0000 ~                                    ld      (prefix1?_BnKEnergy),a
 471+ 0000 ~                                    ;TODO
 472+ 0000 ~                                    ret
 473+ 0000                                      ENDM
# file closed: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
 111  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
 112  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if hit is set then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 151+ 0000              ;                                    if hit is set then hostile hence z is not set
 152+ 0000              IsShipFriendly:         MACRO
 153+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 154+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 158+ 0000              ;                                    if set    then exploding     z set
 159+ 0000              IsShipExploding:        MACRO
 160+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 161+ 0000 ~                                    and     ShipExploding
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              UpdateLaserOnCounter:   MACRO
 165+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jr      z,.LaserOnIsDone
 168+ 0000 ~                                    dec     a
 169+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 170+ 0000 ~                                    jr      z,.LaserOnIsDone
 171+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 172+ 0000 ~            .LaserOnIsDone:
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              UpdateLaserOffCounter:  MACRO
 176+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jr      z,.LaserOffIsDone
 179+ 0000 ~                                    dec     a
 180+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 181+ 0000 ~                                    jr      z,.LaserOffIsDone
 182+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 183+ 0000 ~            .LaserOffIsDone:
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              UpdateLaserRestCounter: MACRO
 187+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 188+ 0000 ~                                    and     a
 189+ 0000 ~                                    jr      z,.LaserRestIsDone
 190+ 0000 ~                                    dec     a
 191+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 192+ 0000 ~                                    jr      z,.LaserRestIsDone
 193+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 194+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 195+ 0000 ~            .LaserRestIsDone
 196+ 0000                                      ENDM
 197+ 0000
 198+ 0000              ChargeEnergyAndShields: MACRO
 199+ 0000 ~                                    ld      a,$FF
 200+ 0000 ~                                    ld      (PlayerEnergy),a
 201+ 0000 ~                                    ld      (ForeShield),a
 202+ 0000 ~                                    ld      (AftShield),a
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              CopyPresentSystemToTarget: MACRO
 206+ 0000 ~                                    ld      hl,(PresentSystemX)
 207+ 0000 ~                                    ld      (TargetSystemX),hl
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              CopyTargetSystemToPresent: MACRO
 211+ 0000 ~                                    ld      hl,(TargetSystemX)
 212+ 0000 ~                                    ld      (PresentSystemX),hl
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              HalveFugitiveStatus:    MACRO
 216+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 217+ 0000 ~                                    srl     (hl)
 218+ 0000                                      ENDM
 219+ 0000
 220+ 0000              ClearForceTransition    MACRO
 221+ 0000 ~                                    ld      a,$FF
 222+ 0000 ~                                    ld      (ScreenTransitionForced),a
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              ForceTransition:        MACRO newScreen
 226+ 0000 ~                                    ld      a,newScreen
 227+ 0000 ~                                    ld      (ScreenTransitionForced), a
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              IsSpaceStationPresent:  MACRO
 231+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 232+ 0000 ~                                    and     a
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              SetSafeZone:            MACRO
 236+ 0000 ~                                    xor     a
 237+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              ClearSafeZone:          MACRO
 241+ 0000 ~                                    ld      a,$FF
 242+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000              ClearTemperatures:      MACRO
 246+ 0000 ~                                    xor     a
 247+ 0000 ~                                    ld      (CabinTemperature),a
 248+ 0000 ~                                    ld      (GunTemperature),a
 249+ 0000                                      ENDM
 250+ 0000
 251+ 0000              ClearWarpPressed:       MACRO
 252+ 0000 ~                                    SetMemFalse WarpPressed
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              CoolCabin:              MACRO
 256+ 0000 ~                                    ld      a,(CabinTemperature)
 257+ 0000 ~                                    and     a
 258+ 0000 ~                                    jr      z,.AlreadyCool
 259+ 0000 ~                                    dec     a
 260+ 0000 ~                                    ld      (CabinTemperature),a
 261+ 0000 ~            .AlreadyCool:
 262+ 0000                                      ENDM
 263+ 0000
 264+ 0000              CoolLasers:             MACRO
 265+ 0000 ~                                    ld      a,(GunTemperature)
 266+ 0000 ~                                    and     a
 267+ 0000 ~                                    jr      z,.AlreadyCool
 268+ 0000 ~                                    dec     a
 269+ 0000 ~                                    ld      (GunTemperature),a
 270+ 0000 ~            .AlreadyCool:
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              ; type 255 is "not fitted"
 274+ 0000
 275+ 0000
 276+ 0000              InitEventCounter:       MACRO
 277+ 0000 ~                                    xor     a
 278+ 0000 ~                                    ld      (EventCounter),a
 279+ 0000                                      ENDM
 280+ 0000
 281+ 0000              ClearMissJump:          MACRO
 282+ 0000 ~                                    ld      a,$FF
 283+ 0000 ~                                    ld      (MissJumpFlag),a
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000
 287+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 288+ 0000 ~                                    ld      a,(DrainMem)
 289+ 0000 ~                                    ld      b,a
 290+ 0000 ~                                    ld      a,(SystemMem)
 291+ 0000 ~                                    sub     a,b
 292+ 0000 ~                                    ld      (SystemMem),a
 293+ 0000 ~                                    jr      c,.ZeroSystem
 294+ 0000 ~                                    jp      .ExitPoint
 295+ 0000 ~            .ZeroSystem:            ZeroA
 296+ 0000 ~                                    ld      (SystemMem),a
 297+ 0000 ~            .ExitPoint
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 301+ 0000 ~                                    ld      a,(BoostMem)
 302+ 0000 ~                                    ld      b,a
 303+ 0000 ~                                    ld      a,(SystemMem)
 304+ 0000 ~                                    add     b
 305+ 0000 ~                                    ld      (SystemMem),a
 306+ 0000 ~                                    jr      c, .MaxSystem
 307+ 0000 ~                                    jp      .ExitPoint
 308+ 0000 ~            .MaxSystem:             ld      a,255
 309+ 0000 ~                                    ld      (SystemMem),a
 310+ 0000 ~            .ExitPoint
 311+ 0000                                      ENDM
 312+ 0000
 313+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 314+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 315+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 316+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 317+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 318+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 319+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 320+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 321+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 322+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 323+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 324+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 325+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 326+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 327+ 0000
# file closed: ./Variables/general_variables_macros.asm
 113  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
 114  0000
 115  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ./Data/ShipIdEquates.asm
 116  0000
 117  0000
 118  0000                  IFNDEF  LASER_V2
 119  0000 ~            UpdateLaserCountersold: MACRO
 120  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
 121  0000 ~                                    dec     a                                               ; .
 122  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
 123  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
 124  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
 125  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
 126  0000 ~                                    dec     a                                               ;       .
 127  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
 128  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
 129  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
 130  0000 ~                                    dec     a
 131  0000 ~                                    ld      (CurrLaserPulseRestCount),a
 132  0000 ~                                    jr      nz,.SkipRestCounter
 133  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
 134  0000 ~            .SkipRestCounter:
 135  0000 ~                                    ENDM
 136  0000                  ENDIF
 137  0000              MessageAt:              MACRO   x,y,message
 138  0000 ~                                    MMUSelectLayer1
 139  0000 ~                                    ld      d,y
 140  0000 ~                                    ld      e,x
 141  0000 ~                                    ld      hl,message
 142  0000 ~                                    call    l1_print_at_wrap
 143  0000                                      ENDM
 144  0000
 145  0000              SetBorder:              MACRO   value
 146  0000 ~                                    MMUSelectLayer1
 147  0000 ~                                    ld          a,value
 148  0000 ~                                    call        l1_set_border
 149  0000                                      ENDM
 150  0000
 151  0000              charactersetaddr		equ 15360
 152  0000              STEPDEBUG               equ 1
 153  0000
 154  0000              TopOfStack              equ $5CCB ;$6100
 155  0000
 156  0000                                      ORG $5DCB;      $6200
 157  5DCB F3           EliteNextStartup:       di
 158  5DCC CD C1 AB     .InitiliseFileIO:       call        GetDefaultDrive
 159  5DCF ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
 160  5DD3              .InitialiseLayerOrder:
 161  5DD3                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 162  5DD3                                      ; "STARTUP"
 163  5DD3                                      ; Make sure  rom is in page 0 during load
 164  5DD3                                      MMUSelectSpriteBank
 164  5DD3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 165  5DD7 CD 94 E5                             call		init_sprites
 166  5DDA                                      MMUSelectLayer2
 166  5DDA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 167  5DDE CD 0F E0                             call        asm_disable_l2_readwrite
 168  5DE1                                      MMUSelectROMS
 168  5DE1 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 168  5DE5 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 169  5DE9 ED 91 06 01  .InitialisePeripherals: nextreg     PERIPHERAL_2_REGISTER, AUDIO_CHIPMODE_AY ; Enable Turbo Sound
 170  5DED ED 91 08 52                          nextreg     PERIPHERAL_3_REGISTER, DISABLE_RAM_IO_CONTENTION | ENABLE_TURBO_SOUND | INTERNAL_SPEAKER_ENABLE
 171  5DF1 ED 91 09 00                          nextreg     PERIPHERAL_4_REGISTER, %00000000
 172  5DF5 ED 91 68 10                          nextreg     ULA_CONTROL_REGISTER,  %00010000                ; set up ULA CONRTROL may need to change bit 0 at least, but bit 4 is separate extended keys from main matrix
 173  5DF9                                      MMUSelectSound
 173  5DF9 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 174  5DFD CD 4B E0                             call        InitAudio
 175  5E00 3E B0        .InitialiseInterrupts:  ld	        a,VectorTable>>8
 176  5E02 ED 47                                ld	        i,a						                        ; im2 table will be at address 0xa000
 177  5E04 ED 91 22 06                          nextreg     LINE_INTERRUPT_CONTROL_REGISTER,%00000110       ; Video interrup on
 178  5E08 ED 91 23 00                          nextreg     LINE_INTERRUPT_VALUE_LSB_REGISTER,0   ; lasta line..
 179  5E0C ED 5E                                im	2
 180  5E0E              .GenerateDefaultCmdr:   MMUSelectCommander
 180  5E0E ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 181  5E12 CD 52 E2                             call		defaultCommander
 182  5E15 CD 18 E2                             call        saveCommander
 183  5E18                                      MMUSelectLayer1
 183  5E18 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 184  5E1C CD 8F E0                             call		l1_cls
 185  5E1F 3E 07                                ld			a,7
 186  5E21 CD AA E0                             call		l1_attr_cls_to_a
 187  5E24                                      SetBorder   $FF
 187  5E24             >                        MMUSelectLayer1
 187  5E24 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 187  5E28 3E FF       >                        ld          a,$FF
 187  5E2A CD B4 E0    >                        call        l1_set_border
 188  5E2D              .InitialiseL2:          MMUSelectLayer2
 188  5E2D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 189  5E31 CD 45 E2                             call 		l2_initialise
 190  5E34              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 190  5E34             >                        MMUSelectLayer1
 190  5E34 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 190  5E38 16 00       >                        ld      d,0
 190  5E3A 1E 00       >                        ld      e,0
 190  5E3C 21 87 66    >                        ld      hl,InitialiseMessage
 190  5E3F CD 24 E1    >                        call    l1_print_at_wrap
 191  5E42                                      SetBorder   $01
 191  5E42             >                        MMUSelectLayer1
 191  5E42 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 191  5E46 3E 01       >                        ld          a,$01
 191  5E48 CD B4 E0    >                        call        l1_set_border
 192  5E4B                                      MessageAt   0,8,LoadingSpritesMessage
 192  5E4B             >                        MMUSelectLayer1
 192  5E4B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 192  5E4F 16 08       >                        ld      d,8
 192  5E51 1E 00       >                        ld      e,0
 192  5E53 21 93 66    >                        ld      hl,LoadingSpritesMessage
 192  5E56 CD 24 E1    >                        call    l1_print_at_wrap
 193  5E59                                      ZeroA
 193  5E59 AF          >                        xor a
 194  5E5A 32 B7 66                             ld          (LoadCounter),a
 195  5E5D              .StreamSpriteData:      MMUSelectSpriteBank
 195  5E5D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 196  5E61 CD 20 E6                             call        load_pattern_files
 197  5E64                                      MMUSelectKeyboard
 197  5E64 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 198  5E68 CD F7 E0                             call        init_keyboard
 199  5E6B              .PostDiag:              ClearForceTransition
 199  5E6B 3E FF       >                        ld      a,$FF
 199  5E6D 32 99 69    >                        ld      (ScreenTransitionForced),a
 200  5E70                                      SetBorder   $04
 200  5E70             >                        MMUSelectLayer1
 200  5E70 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 200  5E74 3E 04       >                        ld          a,$04
 200  5E76 CD B4 E0    >                        call        l1_set_border
 201  5E79                                      MMUSelectSpriteBank
 201  5E79 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 202  5E7D CD AF E5                             call        sprite_diagnostic
 203  5E80                                      SetBorder   $05
 203  5E80             >                        MMUSelectLayer1
 203  5E80 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203  5E84 3E 05       >                        ld          a,$05
 203  5E86 CD B4 E0    >                        call        l1_set_border
 204  5E89              .PostDiag2:             MMUSelectKeyboard
 204  5E89 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 205  5E8D CD F7 E1                             call        WaitForAnyKey
 206  5E90                                      MMUSelectSpriteBank
 206  5E90 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 207  5E94 CD 9F E5                             call        sprite_diagnostic_clear
 208  5E97 3E 10        TidyDEBUG:              ld          a,16
 209  5E99 32 37 68                             ld          (TidyCounter),a
 210  5E9C AF           TestText:               xor			a
 211  5E9D 32 A1 7D                             ld      (JSTX),a
 212  5EA0              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 212  5EA0 3E FF       >                        ld      a,$FF
 212  5EA2 32 32 7F    >                        ld      (SpaceStationSafeZone),a
 213  5EA5                                      SetBorder   $06
 213  5EA5             >                        MMUSelectLayer1
 213  5EA5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213  5EA9 3E 06       >                        ld          a,$06
 213  5EAB CD B4 E0    >                        call        l1_set_border
 214  5EAE              TRIANGLEDIAGNOSTICS:   ;break
 215  5EAE                                     ;ld          c,10
 216  5EAE                                     ;ld          e,20
 217  5EAE                                     ;ld          l,120
 218  5EAE                                     ;MMUSelectLayer2
 219  5EAE                                     ;call        l2_draw_horz_saved
 220  5EAE                                     ;break
 221  5EAE                                     ;ld          c,20
 222  5EAE                                     ;ld          e,120
 223  5EAE                                     ;ld          l,20
 224  5EAE                                     ;call        l2_draw_horz_saved
 225  5EAE                                     ;break
 226  5EAE                                     ;ld          hl,120
 227  5EAE                                     ;call        l2_drawHorzClipY
 228  5EAE                                     ;break
 229  5EAE                                     ;ld          hl,30
 230  5EAE                                     ;ld          de,50
 231  5EAE                                     ;exx
 232  5EAE                                     ;ld          hl,40
 233  5EAE                                     ;ld          de,60
 234  5EAE                                     ;ld          ix,SaveArrayS2
 235  5EAE                                     ;ld          a,$FF
 236  5EAE                                     ;call        Layer2_Save_ClipY_Line ; Why was is very slow?
 237  5EAE              ;                        break
 238  5EAE              ;                        ld          hl,100; x1 64 hl'
 239  5EAE              ;                        ld          de,150; x2 96 de'
 240  5EAE              ;                        ld          bc,120; x3 78 bc'
 241  5EAE              ;                        exx
 242  5EAE              ;                        ld          hl,50  ;y1 32 hl
 243  5EAE              ;                        ld          de,75  ;y2 4B de
 244  5EAE              ;                        ld          bc,90  ;y3 5A bc
 245  5EAE              ;                        MMUSelectLayer2
 246  5EAE              ;                        call        l2_draw_fillclip_tri
 247  5EAE              ;TRIANGLEDIAGDONE:       break          0136 0153 FF81 FF98  310, 339  = -127, -104 dx 437, 443  (218 221)  91,117
 248  5EAE                                       ;break
 249  5EAE                                       MMUSelectUniverseN  0
 249  5EAE ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 250  5EB2                                       MMUSelectLayer2
 250  5EB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 251  5EB6
 252  5EB6                                IFDEF DEBUG_LL122_DIRECT
 253  5EB6 ~                                    call    Debug_LL122_6502
 254  5EB6                                ENDIF
 255  5EB6
 256  5EB6                                IFDEF DEBUG_LL121_DIRECT
 257  5EB6 ~                                    call Debug_LL121_6502
 258  5EB6                                ENDIF
 259  5EB6
 260  5EB6
 261  5EB6                                IFDEF DEBUG_LL129_DIRECT
 262  5EB6 ~                                    call Debug_LL129_6502
 263  5EB6                                ENDIF
 264  5EB6
 265  5EB6                                IFDEF DEBUG_LL120_DIRECT
 266  5EB6 ~                                    call Debug_LL120_6502
 267  5EB6                                ENDIF
 268  5EB6
 269  5EB6                                IFDEF DEBUG_LL123_DIRECT
 270  5EB6 ~                                    call Debug_LL123_6502
 271  5EB6                                ENDIF
 272  5EB6
 273  5EB6                                IFDEF DEBUG_LL118_DIRECT
 274  5EB6 ~                                    call Debug_LL118_6502
 275  5EB6                                ENDIF
 276  5EB6
 277  5EB6                                IFDEF DEBUG_LL28_6502
 278  5EB6 ~                                    call Debug_LL28_6502
 279  5EB6                                ENDIF
 280  5EB6
 281  5EB6                                IFDEF DEBUG_LL145_6502
 282  5EB6 ~                                    ;break
 283  5EB6 ~                                    call Debug_LL145_6502
 284  5EB6                                ENDIF
 285  5EB6
 286  5EB6
 287  5EB6                              IFDEF DEBUG_LL129
 288  5EB6 ~                                    ld      a,240
 288  5EB6 ~             ld      (XX12p2),a ; Gradient
 289  5EB6 ~                                    ld      a,$FF
 289  5EB6 ~             ld      (XX12p3),a ; Slope
 290  5EB6 ~                                    ld      hl,-50
 290  5EB6 ~             ld      (SRvarPair),hl
 291  5EB6 ~                                    call    LL129_6502  ; Should be Q = 240, A = +ve SR = 50 >> PASS
 292  5EB6 ~                                    ;break
 293  5EB6 ~                                    ld      a,240
 293  5EB6 ~             ld      (XX12p2),a ; Gradient
 294  5EB6 ~                                    ld      a,0
 294  5EB6 ~             ld      (XX12p3),a ; Slope
 295  5EB6 ~                                    ld      hl,-50
 295  5EB6 ~             ld      (SRvarPair),hl
 296  5EB6 ~                                    call    LL129_6502  ; Should be Q = 240, A = -ve SR = 50 >> PASS
 297  5EB6 ~                                    ;break
 298  5EB6 ~                                    ld      a,240
 298  5EB6 ~             ld      (XX12p2),a ; Gradient
 299  5EB6 ~                                    ld      a,$FF
 299  5EB6 ~             ld      (XX12p3),a ; Slope
 300  5EB6 ~                                    ld      hl, 150
 300  5EB6 ~             ld      (SRvarPair),hl
 301  5EB6 ~                                    call    LL129_6502  ; Should be Q = 240, A = -ve SR = 150 >> PASS
 302  5EB6 ~                                    ld      a,140
 302  5EB6 ~             ld      (XX12p2),a ; Gradient
 303  5EB6 ~                                    ld      a,$0
 303  5EB6 ~             ld      (XX12p3),a ; Slope
 304  5EB6 ~                                    ld      hl,50
 304  5EB6 ~             ld      (SRvarPair),hl
 305  5EB6 ~                                    call    LL129_6502  ; Should be Q = 140, A = +ve SR = 50 >> PASS
 306  5EB6                              ENDIF
 307  5EB6                              IFDEF DEBUG_LL120
 308  5EB6 ~                                    ;break
 309  5EB6 ~                                    ld      a,0
 309  5EB6 ~             ld      (Tvar),a   ; slope +ve so multiply
 310  5EB6 ~                                    ld      a,$FF
 310  5EB6 ~             ld      (Svar),a   ; S var -ve
 311  5EB6 ~                                    ld      hl,-10
 311  5EB6 ~             ld      (XX1510),hl; x1_lo -ve
 312  5EB6 ~                                    ld      a,168
 312  5EB6 ~             ld      (XX12p2),a ; Gradient
 313  5EB6 ~                                    ld      a,$FF
 313  5EB6 ~             ld      (XX12p3),a ; slope direction
 314  5EB6 ~                                    ; LL129 shoud be q = 168, a +ve SR 10 >> PASS
 315  5EB6 ~                                    call    LL120_6502  ; Should be -ve 10 * 168  so xy -15   >> FAIL
 316  5EB6 ~                                    ;break
 317  5EB6 ~                                    ld      a,$FF
 317  5EB6 ~             ld      (Tvar),a   ; slope -ve so divide
 318  5EB6 ~                                    ld      a,$FF
 318  5EB6 ~             ld      (Svar),a   ; S var -ve
 319  5EB6 ~                                    ld      hl,-10
 319  5EB6 ~             ld      (XX1510),hl; x1_lo -ve
 320  5EB6 ~                                    ld      a,168
 320  5EB6 ~             ld      (XX12p2),a ; Gradient
 321  5EB6 ~                                    ld      a,$FF
 321  5EB6 ~             ld      (XX12p3),a ; slope direction
 322  5EB6 ~                                    ; LL129 shoud be q = 168, a +ve SR 10 >> PASS
 323  5EB6 ~                                    call    LL120_6502  ; Should be -ve 10 / 168  so xy -6 >> PASS
 324  5EB6                              ENDIF
 325  5EB6                          IFDEF  DEBUGCLIP
 326  5EB6 ~                                    ;break
 327  5EB6 ~                                    MMUSelectUniverseN 0
 328  5EB6 ~                                    MMUSelectLayer2
 329  5EB6 ~                                    call   l2_cls_upper_two_thirds
 330  5EB6 ~                                    ld      hl,PlotTestData
 331  5EB6 ~                                    ld      b,32
 332  5EB6 ~            .testLoop:              push    bc
 333  5EB6 ~                                    push    hl
 334  5EB6 ~                                    ld      de,x1
 335  5EB6 ~                                    ld      bc, 8
 336  5EB6 ~                                    pop     hl
 337  5EB6 ~                                    ldir
 338  5EB6 ~                                    ;break
 339  5EB6 ~                                    push    hl
 340  5EB6 ~                                    call    l2_draw_6502_line;l2_draw_elite_line
 341  5EB6 ~                                    ;break
 342  5EB6 ~                                    ;MMUSelectKeyboard
 343  5EB6 ~                                    ;call    WaitForAnyKey
 344  5EB6 ~                                    pop     hl
 345  5EB6 ~                                    pop     bc
 346  5EB6 ~                                    djnz    .testLoop
 347  5EB6 ~                                    ;break
 348  5EB6 ~                                    jp      InitialiseGalaxies
 349  5EB6 ~                                  ;  ld      hl,$FFF7 : ld (x1),hl : ld hl,$0009 : ld (y1),hl : ld hl,$000F : ld (x2),hl : ld hl,$FFEF : ld (y2),hl : call l2_draw_elite_line
 350  5EB6 ~                                  ;  ld      hl,259   : ld (x1),hl : ld hl,35    : ld (y1),hl : ld hl,250   : ld (x2),hl : ld hl,-12   : ld (y2),hl : call l2_draw_elite_line
 351  5EB6 ~                                     ld      hl,237
 351  5EB6 ~              ld (x1),hl
 351  5EB6 ~              ld hl,258
 351  5EB6 ~              ld (y1),hl
 351  5EB6 ~              ld hl,353
 351  5EB6 ~              ld (x2),hl
 351  5EB6 ~              ld hl,237
 351  5EB6 ~              ld (y2),hl
 351  5EB6 ~              call l2_draw_elite_line
 352  5EB6 ~                                  ;  ld      hl,6     : ld (x1),hl : ld hl,-65   : ld (y1),hl : ld hl,-15   : ld (x2),hl : ld hl,7     : ld (y2),hl : call l2_draw_elite_line
 353  5EB6 ~
 354  5EB6 ~            PlotTestData:  ; dw  281 ,   60, 252 ,   90  ; pass
 355  5EB6 ~                           ; dw   -9 ,    9,  16 ,  -17  ; pass
 356  5EB6 ~                            dw -10  ,  -10,  50 ,   50 ;0:0:50:50   pass
 357  5EB6 ~                            dw -10  ,    0,  50 ,   50 ;0:8:50:50   fail load x1 y1 as 0,0
 358  5EB6 ~                            dw -20  ,    0,  50 ,   50 ;0:14:50:50  fail load x1 y1 as 0,0
 359  5EB6 ~                            dw  -5  ,  -10,  50 ,   50 ;4.5:0:50:50 fail load x1 y1 as 0,0
 360  5EB6 ~
 361  5EB6 ~                            dw -10  ,  -10,  50 ,   50
 362  5EB6 ~                            dw  10  ,    0,  50 ,   50
 363  5EB6 ~                            dw   0  ,    0,  50 ,   50
 364  5EB6 ~                            dw   0  ,   -5,  50 ,   50
 365  5EB6 ~
 366  5EB6 ~                            dw  259 ,   35, 250 ,  -12
 367  5EB6 ~                            dw  237 ,  258, 353 ,  237
 368  5EB6 ~                            dw    6 ,  -65, -15 ,    7
 369  5EB6 ~                            dw  280 ,   90, 300 ,   70
 370  5EB6 ~                            dw  -80 ,   90, -20 ,   70
 371  5EB6 ~                            dw  -10 ,  120,  10 ,  145
 372  5EB6 ~                            dw  120 ,  -10,  45 ,   10
 373  5EB6 ~                            dw  220 , -100,   5 ,   80
 374  5EB6 ~                            dw  220 ,  120,  35 ,  190
 375  5EB6 ~                            dw  235 ,  120,  20 ,  190
 376  5EB6 ~                            dw  -50 ,   60, 145 ,   70
 377  5EB6 ~                            dw  150 ,   60, 345 ,   70
 378  5EB6 ~                            dw  140 ,   90, 240 ,   70
 379  5EB6 ~                            dw  163 ,  256, 116 ,  173
 380  5EB6 ~                            dw   83 ,  184,  55 ,  192
 381  5EB6 ~                            dw   68 ,  192,  54 ,  103
 382  5EB6 ~                            dw  125 , 3937, 127 ,   41
 383  5EB6 ~                            dw  125 , 3937,  81 ,  111
 384  5EB6 ~                            dw  310 ,  339,  81 , 3992
 385  5EB6 ~                            dw  -37 , 4096,  38 ,  560
 386  5EB6 ~                            dw  283 , 101 ,  65 ,  163
 387  5EB6 ~                            dw  283 , 101 , 146 ,   78
 388  5EB6 ~                            dw  146 , 78  ,   3 ,   93
 389  5EB6 ~                            dw  3   , 93  ,  65 ,  163
 390  5EB6 ~                            dw  -127, 346 ,   3 ,   93
 391  5EB6 ~                            dw  44	, 351 , -43 ,  126
 392  5EB6 ~                            dw  92	, 54  , 144 ,  -14
 393  5EB6 ~                            dw  144	, -14 , 164 ,    4
 394  5EB6 ~                            dw  95	, 40  , 159 ,   31
 395  5EB6 ~                            dw  159	, 31  , 161 ,   51
 396  5EB6 ~
 397  5EB6 ~
 398  5EB6 ~
 399  5EB6 ~            /*007D FF61 FF81 006F
 400  5EB6 ~            007D FF61 017F 0029
 401  5EB6 ~            0096 FF61 FF81 004D
 402  5EB6 ~            0096 FF61 017F 004D
 403  5EB6 ~            017F 004F 0072 015F
 404  5EB6 ~            0072 015F FF81 004D
 405  5EB6 ~            0019 002B 00F6 002B
 406  5EB6 ~            00F6 002B 00F6 006F
 407  5EB6 ~            00F6 006F 0019 006F
 408  5EB6 ~            0019 006F 0019 002B
 409  5EB6 ~            005A 0079 0095 0027
 410  5EB6 ~            0096 0027 00AC 0028
 411  5EB6 ~            0051 005D 00A2 0040
 412  5EB6 ~            00A2 0040 00AA 0058
 413  5EB6 ~            005F 0056 00A3 004A
 414  5EB6 ~            00A3 004A 00A6 005F
 415  5EB6 ~            0073 0070 007D 0072
 416  5EB6 ~            007D 0072 007D 0075
 417  5EB6 ~            006C 0083 0076 0088
 418  5EB6 ~            0076 0072 007D 0074
 419  5EB6 ~            006C 0083 0076 0088
 420  5EB6 ~            0076 0088 0074 008B*/
 421  5EB6 ~
 422  5EB6 ~
 423  5EB6 ~            /*;;
 424  5EB6 ~            28 01 79 00 5a 01 8f 00 28 01 79 00 2f 01 3a 00
 425  5EB6 ~            2f 01 3a 00 5f 01 53 00 5f 01 53 00 5a 01 8f 00
 426  5EB6 ~            5a 01 8f 00 14 01 a1 00 28 01 79 00 14 01 a1 00
 427  5EB6 ~            28 01 79 00 ed 00 53 00 ed 00 53 00 2F 01 3a 00
 428  5EB6 ~            14 01 a1 00 e3 00 78 00 ed 00 53 00 e3 00 78 00
 429  5EB6 ~            47 01 6d 00 40 01 5f 00 40 01 5f 00 44 01 5d 00
 430  5EB6 ~            44 01 5d 00 4b 01 6a 00 4b 01 6a 00 47 01 6d 00
 431  5EB6 ~            42 01 5d 00 47 01 5d 00 47 01 5d 00 48 01 6d 00
 432  5EB6 ~            48 01 6d 00 43 01 6d 00 47 01 6d 00 43 01 6c 00
 433  5EB6 ~            47 01 6d 00 42 01 6c 00 14 00 dc ff 12 00 e1 ff*/
 434  5EB6 ~
 435  5EB6 ~                                     MMUSelectKeyboard
 436  5EB6 ~                                     call        WaitForAnyKey
 437  5EB6                          ELSE
 438  5EB6                                       DISPLAY "Not debugging clip code"
 439  5EB6                          ENDIF
 440  5EB6                          IFDEF LOGDIVIDEDEBUG
 441  5EB6 ~                                    break
 442  5EB6 ~                                    MMUSelectMathsTables
 443  5EB6 ~                                    ld      a,4
 444  5EB6 ~                                    ld      (varQTEST),a
 445  5EB6 ~                                    ld      a,1
 446  5EB6 ~                                    ld      (varATEST),a
 447  5EB6 ~                                    ld      b,250
 448  5EB6 ~                                    ld      hl, outputbuffer
 449  5EB6 ~            .LoopTest:              push    bc,,hl
 450  5EB6 ~                                    ld      a,(varQTEST)
 451  5EB6 ~                                    ld      (varQ),a
 452  5EB6 ~                                    ld      a,(varATEST)
 453  5EB6 ~                                    call    Requ256mulAdivQ_Log
 454  5EB6 ~                                    pop     bc,,hl
 455  5EB6 ~                                    ld      (hl),a
 456  5EB6 ~                                    inc     hl
 457  5EB6 ~                                    ld      a,(varATEST)
 458  5EB6 ~                                    inc     a
 459  5EB6 ~                                    ld      (varATEST),a
 460  5EB6 ~                                    ld      a,(varQTEST)
 461  5EB6 ~                                    ld      (varQTEST),a
 462  5EB6 ~                                    djnz    .LoopTest
 463  5EB6 ~                                    break
 464  5EB6 ~
 465  5EB6 ~            varATEST    DB  0
 466  5EB6 ~            varQTEST    DB  0
 467  5EB6 ~
 468  5EB6 ~
 469  5EB6 ~
 470  5EB6 ~            outputbuffer DS 256
 471  5EB6                          ENDIF
 472  5EB6                          IFDEF DEBUGCIRCLE1
 473  5EB6 ~                                    break
 474  5EB6 ~                                    ld      hl,128
 475  5EB6 ~                                    ld      de, 64
 476  5EB6 ~                                    ld      c,20
 477  5EB6 ~                                    ld      b,$59
 478  5EB6 ~                                    MMUSelectLayer2
 479  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 480  5EB6                          ENDIF
 481  5EB6                          IFDEF DEBUGCIRCLE2
 482  5EB6 ~                                    break
 483  5EB6 ~                                    ld      hl,128
 484  5EB6 ~                                    ld      de, 64
 485  5EB6 ~                                    ld      c,200
 486  5EB6 ~                                    ld      b,$49
 487  5EB6 ~                                    MMUSelectLayer2
 488  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 489  5EB6 ~                                    break
 490  5EB6                          ENDIF
 491  5EB6
 492  5EB6                          IFDEF DEBUGCIRCLE3
 493  5EB6 ~                                    break
 494  5EB6 ~                                    ld      hl,128
 495  5EB6 ~                                    ld      de, 64
 496  5EB6 ~                                    ld      c,130
 497  5EB6 ~                                    ld      b,$49
 498  5EB6 ~                                    MMUSelectLayer2
 499  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 500  5EB6 ~                                    break
 501  5EB6                          ENDIF
 502  5EB6
 503  5EB6                          IFDEF DEBUGCIRCLE4
 504  5EB6 ~                                    break
 505  5EB6 ~                                    ld      hl,320
 506  5EB6 ~                                    ld      de, 128
 507  5EB6 ~                                    ld      c,10
 508  5EB6 ~                                    ld      b,$49
 509  5EB6 ~                                    MMUSelectLayer2
 510  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 511  5EB6 ~                                    break
 512  5EB6                          ENDIF
 513  5EB6
 514  5EB6                          IFDEF DEBUGPLANET
 515  5EB6 ~            DebugPlanetCode:        MMUSelectPlanet
 516  5EB6 ~                                    call    CreatePlanet
 517  5EB6 ~                                    ld      a,0
 518  5EB6 ~                                    ld      (P_BnKzsgn),a
 519  5EB6 ~                                    ld      (P_BnKxsgn),a
 520  5EB6 ~                                    ld      (P_BnKysgn),a
 521  5EB6 ~                                    ld      hl,$0200
 522  5EB6 ~                                    ld      (P_BnKzlo),hl
 523  5EB6 ~                                    ld      hl,$00000
 524  5EB6 ~                                    ld      (P_BnKxlo),hl
 525  5EB6 ~                                    ld      (P_BnKylo),hl
 526  5EB6 ~                                    ld      a,127
 527  5EB6 ~                                    ld      (UBnKRotXCounter),a
 528  5EB6 ~                                    ld      (UBnKRotZCounter),a
 529  5EB6 ~                                    break
 530  5EB6 ~            .PlanetDebugLoop:       MMUSelectPlanet
 531  5EB6 ~                                    call    PlanetDraw
 532  5EB6 ~                                    call    ApplyPlanetRollAndPitch
 533  5EB6 ~                                    call    P_NormaliseRotMat
 534  5EB6 ~                                    ;call    ApplyPlanetPitch
 535  5EB6 ~
 536  5EB6 ~                                    ;MMUSelectKeyboard
 537  5EB6 ~                                    ;call        WaitForAnyKey
 538  5EB6 ~                                    break
 539  5EB6 ~                                    MMUSelectLayer2
 540  5EB6 ~                                    call		l2_cls
 541  5EB6 ~                                    jp          .PlanetDebugLoop
 542  5EB6                          ENDIF
 543  5EB6
 544  5EB6                          IFDEF DEBUGPLANETCIRCLE
 545  5EB6 ~            DebugPlanetCode:        MMUSelectPlanet
 546  5EB6 ~                                    call    CreatePlanet
 547  5EB6 ~                                    ld      a,0
 548  5EB6 ~                                    ld      (P_BnKzsgn),a
 549  5EB6 ~                                    ld      (P_BnKxsgn),a
 550  5EB6 ~                                    ld      (P_BnKysgn),a
 551  5EB6 ~                                    ld      hl,$0200
 552  5EB6 ~                                    ld      (P_BnKzlo),hl
 553  5EB6 ~                                    ld      hl,$00000
 554  5EB6 ~                                    ld      (P_BnKxlo),hl
 555  5EB6 ~                                    ld      (P_BnKylo),hl
 556  5EB6 ~                                    ld      a,127
 557  5EB6 ~                                    ld      (UBnKRotXCounter),a
 558  5EB6 ~                                    ld      (UBnKRotZCounter),a
 559  5EB6 ~                                    break
 560  5EB6 ~            .PlanetDebugLoop:       MMUSelectPlanet
 561  5EB6 ~                                    call    PlanetDraw
 562  5EB6 ~                                    call    ApplyPlanetRollAndPitch
 563  5EB6 ~                                    call    P_NormaliseRotMat
 564  5EB6 ~                                    ;call    ApplyPlanetPitch
 565  5EB6 ~
 566  5EB6 ~                                    ;MMUSelectKeyboard
 567  5EB6 ~                                    ;call        WaitForAnyKey
 568  5EB6 ~                                    break
 569  5EB6 ~                                    MMUSelectLayer2
 570  5EB6 ~                                    call		l2_cls
 571  5EB6 ~                                    jp          .PlanetDebugLoop
 572  5EB6                          ENDIF
 573  5EB6
 574  5EB6                          IFDEF DEBUGLINEDRAW
 575  5EB6 ~            RenderDiagnostics:      MMUSelectLayer2
 576  5EB6 ~                                    ld      h, 0
 577  5EB6 ~                                    ld      l, 0
 578  5EB6 ~                                    ld      d,0
 579  5EB6 ~                                    ld      e,255
 580  5EB6 ~                                    ld      ixl,16
 581  5EB6 ~                                    ld      a,$C5
 582  5EB6 ~                                    ld      (line_gfx_colour),a
 583  5EB6 ~                                    ; draw a grid
 584  5EB6 ~            .horizontalLoop:        push    hl,,de,,ix
 585  5EB6 ~                                    call    LineHLtoDE
 586  5EB6 ~                                    pop     hl,,de,,ix
 587  5EB6 ~                                    ld      a,h
 588  5EB6 ~                                    add     8
 589  5EB6 ~                                    ld      h,a
 590  5EB6 ~                                    ld      d,a
 591  5EB6 ~                                    dec     ixl
 592  5EB6 ~                                    jr      nz,.horizontalLoop
 593  5EB6 ~            .verticalGrid:          ld      h, 0
 594  5EB6 ~                                    ld      l, 0
 595  5EB6 ~                                    ld      d, 127
 596  5EB6 ~                                    ld      e,0
 597  5EB6 ~                                    ld  ixl,32
 598  5EB6 ~                                    ld      a,$C6
 599  5EB6 ~                                    ld      (line_gfx_colour),a
 600  5EB6 ~            .verticalLoop:          push    hl,,de,,ix
 601  5EB6 ~                                    call    LineHLtoDE
 602  5EB6 ~                                    pop     hl,,de,,ix
 603  5EB6 ~                                    ld      a,l
 604  5EB6 ~                                    add     8
 605  5EB6 ~                                    ld      l,a
 606  5EB6 ~                                    ld      e,a
 607  5EB6 ~                                    dec     ixl
 608  5EB6 ~                                    jr      nz,.verticalLoop
 609  5EB6 ~                                    ld      a,$A6
 610  5EB6 ~                                    ld      (line_gfx_colour),a
 611  5EB6 ~                                    ld      hl,0
 612  5EB6 ~                                    ld      de,$7FFF
 613  5EB6 ~                                    call    LineHLtoDE
 614  5EB6 ~                                    ld      hl,$00FF
 615  5EB6 ~                                    ld      de,$7F00
 616  5EB6 ~                                    call    LineHLtoDE
 617  5EB6 ~                                    ld      a,0
 618  5EB6 ~                                    MMUSelectUniverseA
 619  5EB6 ~                                    ; CLip -10,-10 to 20,30
 620  5EB6 ~                                    ld      a,$56
 621  5EB6 ~                                    ld      (line_gfx_colour),a
 622  5EB6 ~                                    ;break
 623  5EB6 ~            .LineTest1:             ld      hl, DrawTestDataLine1
 624  5EB6 ~                                    call    DrawClippedLineDebug
 625  5EB6 ~            .LineTest2:             ld      hl, DrawTestDataLine2
 626  5EB6 ~                                    call    DrawClippedLineDebug
 627  5EB6 ~            .LineTest3:             ld      hl, DrawTestDataLine3
 628  5EB6 ~                                    call    DrawClippedLineDebug
 629  5EB6 ~            .LineTest4:             ld      hl, DrawTestDataLine4
 630  5EB6 ~                                    call    DrawClippedLineDebug
 631  5EB6 ~                                    ld      hl, DrawTestDataLine5
 632  5EB6 ~                                    call    DrawClippedLineDebug
 633  5EB6 ~                                    ld      hl, DrawTestDataLine6
 634  5EB6 ~                                    call    DrawClippedLineDebug
 635  5EB6 ~                                    ld      hl, DrawTestDataLine7
 636  5EB6 ~                                    call    DrawClippedLineDebug
 637  5EB6 ~                                    ld      hl, DrawTestDataLine8
 638  5EB6 ~                                    call    DrawClippedLineDebug
 639  5EB6 ~                                    ld      hl, DrawTestDataLine9
 640  5EB6 ~                                    call    DrawClippedLineDebug
 641  5EB6 ~                                    ld      hl, DrawTestDataLine10
 642  5EB6 ~                                    call    DrawClippedLineDebug
 643  5EB6 ~                                    ld      hl, DrawTestDataLine11
 644  5EB6 ~                                    call    DrawClippedLineDebug
 645  5EB6 ~                                    ld      hl, DrawTestDataLine12
 646  5EB6 ~                                    call    DrawClippedLineDebug
 647  5EB6 ~                                    ld      a,$A8
 648  5EB6 ~                                    ld      (line_gfx_colour),a
 649  5EB6 ~                                    ld      hl, DrawTestDataLine13
 650  5EB6 ~                                    call    DrawClippedLineDebug
 651  5EB6 ~                                    ld      hl, DrawTestDataLine14
 652  5EB6 ~                                    call    DrawClippedLineDebug
 653  5EB6 ~                                    ld      hl, DrawTestDataLine15
 654  5EB6 ~                                    call    DrawClippedLineDebug
 655  5EB6 ~                                    ld      hl, DrawTestDataLine16
 656  5EB6 ~                                    call    DrawClippedLineDebug
 657  5EB6 ~                                    ;break
 658  5EB6 ~                                    ; draw diagonals on screen tL br, tr bl
 659  5EB6 ~                                    ; draw diagonals on screen bl tr, br tl
 660  5EB6 ~                                    ; draw clipped horzontals left clip from -1000 -10 to 50
 661  5EB6 ~                                    ; draw clipped horzontals right clip from 200 to 260 to +1000
 662  5EB6 ~                                    ; draw clipped horzontals both clip from -1000 -10 to 260 to 1000
 663  5EB6 ~                                    ; draw clipped horzontals top clip from -1000 -10 to 50
 664  5EB6 ~                                    ; draw clipped horzontals bottom clip from 200 to 260 to +1000
 665  5EB6 ~                                    ; draw clipped horzontals both clip from -1000 -10 to 260 to 1000
 666  5EB6 ~                                    ; draw diagonal left clip
 667  5EB6 ~                                    ; draw diagonal right clip
 668  5EB6 ~                                    ; draw diagonal top clip
 669  5EB6 ~                                    ; draw diagonal bottom clip
 670  5EB6 ~                                    ; draw diagonal left top clip
 671  5EB6 ~                                    ; draw diagonal right top clip
 672  5EB6 ~                                    ; draw diagonal left bottom clip
 673  5EB6 ~                                    ; draw diagonal left bottom clip
 674  5EB6 ~                                    ; draw diagnoal left clip to right clip
 675  5EB6 ~                                    ; draw diagnoal top clip to bottom clip
 676  5EB6 ~                                    ; draw diagnoal left top clip to right clip
 677  5EB6 ~                                    ; flip right to left
 678  5EB6 ~                                    ; flip bottom to top
 679  5EB6 ~            .DebugPause:           ; jp      .DebugPause
 680  5EB6 ~                                    jp      InitialiseGalaxies
 681  5EB6 ~
 682  5EB6 ~            DrawTestDataLine1:      DW      -10,   -10,   20,   30
 683  5EB6 ~            DrawTestDataLine2:      DW      265,   -10,  235,   30
 684  5EB6 ~            DrawTestDataLine3:      DW      -10,   -10,   30,   20
 685  5EB6 ~            DrawTestDataLine4:      DW      265,   -10,  225,   20
 686  5EB6 ~            DrawTestDataLine5:      DW    -1000,   -10,  127,   60
 687  5EB6 ~            DrawTestDataLine6:      DW     1000,   -10,  128,   60
 688  5EB6 ~            DrawTestDataLine7:      DW    -1000,   138,  127,   60
 689  5EB6 ~            DrawTestDataLine8:      DW     1000,   138,  128,   60
 690  5EB6 ~            DrawTestDataLine9:      DW      -10, -1000,  127,   60
 691  5EB6 ~            DrawTestDataLine10:     DW      265, -1000,  128,   60
 692  5EB6 ~            DrawTestDataLine11:     DW      -10,  1138,  127,   60
 693  5EB6 ~            DrawTestDataLine12:     DW      265,  1138,  128,   60
 694  5EB6 ~            DrawTestDataLine13:     DW      -10, -1000,  127,  360
 695  5EB6 ~            DrawTestDataLine14:     DW      265, -1000,  128,  360
 696  5EB6 ~            DrawTestDataLine15:     DW      -10,  1138,  127, -360
 697  5EB6 ~            DrawTestDataLine16:     DW      265,  1138,  128, -360
 698  5EB6 ~
 699  5EB6 ~
 700  5EB6 ~            DrawClippedLineDebug:   ld      bc,8
 701  5EB6 ~                                    ld      de,UbnkPreClipX1
 702  5EB6 ~                                    ldir
 703  5EB6 ~                                    call    ClipLine
 704  5EB6 ~                                    ld      a,(UBnkNewY1)
 705  5EB6 ~                                    ld      h,a
 706  5EB6 ~                                    ld      a,(UBnkNewX1)
 707  5EB6 ~                                    ld      l,a
 708  5EB6 ~                                    ld      a,(UBnkNewY2)
 709  5EB6 ~                                    ld      d,a
 710  5EB6 ~                                    ld      a,(UBnkNewX2)
 711  5EB6 ~                                    ld      e,a
 712  5EB6 ~                                    call    LineHLtoDE
 713  5EB6 ~                                    ret
 714  5EB6 ~
 715  5EB6                              ENDIF
 716  5EB6              ;.ClearLayer2Buffers:    DoubleBufferIfPossible
 717  5EB6              ;                        DoubleBufferIfPossible
 718  5EB6              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 719  5EB6                              IFDEF LOGDIVIDEDEBUG
 720  5EB6 ~                               DISPLAY "DEBUG: SKIPPING INIT TO SAVE MEMORY FOR LOG DIVIDE DEBUG TEST"
 721  5EB6                              ELSE
 722  5EB6                                      SetBorder   $07
 722  5EB6             >                        MMUSelectLayer1
 722  5EB6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 722  5EBA 3E 07       >                        ld          a,$07
 722  5EBC CD B4 E0    >                        call        l1_set_border
 723  5EBF              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 723  5EBF             >                        MMUSelectLayer1
 723  5EBF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 723  5EC3 16 18       >                        ld      d,24
 723  5EC5 1E 00       >                        ld      e,0
 723  5EC7 21 A2 66    >                        ld      hl,InitialisingGalaxies
 723  5ECA CD 24 E1    >                        call    l1_print_at_wrap
 724  5ECD                                      ;break
 725  5ECD CD 9A 69                             call		ResetUniv                       ; Reset ship data
 726  5ED0 CD C2 69                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 727  5ED3 CD EB 69                             call        SeedAllGalaxies
 728  5ED6                                      MMUSelectSpriteBank
 728  5ED6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 729  5EDA CD 8A E5                             call        sprite_cls_all
 730  5EDD                                      MMUSelectLayer1
 730  5EDD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 731  5EE1 CD 8F E0                             call		l1_cls
 732  5EE4                                      SetBorder   $00
 732  5EE4             >                        MMUSelectLayer1
 732  5EE4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 732  5EE8 3E 00       >                        ld          a,$00
 732  5EEA CD B4 E0    >                        call        l1_set_border
 733  5EED                              ENDIF
 734  5EED                              IFDEF SKIPATTRACT
 735  5EED ~                                    DISPLAY "INITGALAXIES SKIP ATTRACT"
 736  5EED ~                                    jp DefaultCommander
 737  5EED                              ELSE
 738  5EED                                      DISPLAY "INITGALAXIES ATTRACT ENABLED"
 739  5EED F3           StartAttractMode:       di                                          ; we are changing interrupts
 740  5EEE                                      MMUSelectSound
 740  5EEE ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 741  5EF2 CD B7 E0                             call        InitAudioMusic
 742  5EF5 21 0D B2                             ld          hl,AttractInterrrupt
 743  5EF8 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 744  5EFB CD 86 77                             call        AttractModeInit
 745  5EFE FB                                   ei
 746  5EFF                                      ;break
 747  5EFF CD DB 77                             call        AttractModeMain                 ; now drive attact mode keyboard scan
 748  5F02 F3                                   di                                          ; set up for main
 749  5F03 21 D7 B1                             ld          hl,SoundInterrupt               ; sound handler
 750  5F06 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 751  5F09                                      MMUSelectSound
 751  5F09 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 752  5F0D CD 4B E0                             call        InitAudio                       ; jsut re-init all audio for now rather than sound off
 753  5F10                                      IFDEF MAIN_INTERRUPTENABLE
 754  5F10                                          DISPLAY "Main Interrupt Enabled"
 755  5F10 FB                                       ei
 756  5F11                                      ELSE
 757  5F11 ~                                        DISPLAY "Main Interrupt Disabled"
 758  5F11                                      ENDIF
 759  5F11                                      JumpIfAIsZero  SkipDefaultCommander
 759  5F11 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 759  5F12 CA 1F 5F    >                        jp	    z, SkipDefaultCommander
 760  5F15                              ENDIF
 761  5F15              DefaultCommander:       MMUSelectCommander
 761  5F15 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 762  5F19 CD 52 E2                             call		defaultCommander
 763  5F1C C3 1F 5F                             jp          InitialiseMainLoop
 763  5F1F
 764  5F1F              SkipDefaultCommander:
 765  5F1F              ;                        call    FindNextFreeSlotInA
 766  5F1F              ;                        ld      b,a
 767  5F1F              ;                        ld      a,13 ;Coriolis station
 768  5F1F              ;                        call    InitialiseShipAUnivB
 769  5F1F              ;                        xor     a
 770  5F1F CD 4C 82     InitialiseMainLoop:     call    InitMainLoop
 771  5F22              ;..MAIN GAME LOOP..................................................................................................................
 772  5F22              ; MACRO BLOCKS.....................................................................................................................
 773  5F22              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 774  5F22
 775  5F22
 776  5F22
 777  5F22              ; if beam on count > 0
 778  5F22              ;    then beam on count --
 779  5F22              ;         if beam on count = 0
 780  5F22              ;            then beam off count = beam off
 781  5F22              ; if beam off > 0
 782  5F22              ;    then beam off --
 783  5F22              ;         if beam off = 0 and pulse rate count = max count
 784  5F22              ;            then pulse rest count = pulse rest
 785  5F22              ; if pulse rest > 0 then pulse rest --
 786  5F22              ;    if pulse rest = 0
 787  5F22              ;       then pulse rate count = 0
 788  5F22
 789  5F22
 790  5F22              ; counter logic
 791  5F22              ;    if beam on count > 0 then beam on count --
 792  5F22              ;    if beam on = 0 then
 793  5F22              ;       if beam off count >0 then beam off count --
 794  5F22              ;       if beam off count = 0 them
 795  5F22              ;          if pulse rest count > 0 then pulse rest count --
 796  5F22              ;             if reset count = 0 then pulse rate count = 0
 797  5F22              ; shoting logic
 798  5F22              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 799  5F22              ;       then  if fire pressed is OK
 800  5F22              ;                if not beam type
 801  5F22              ;                   then pulse rate count ++
 802  5F22              ;                        if pulse rate count < pulse max count
 803  5F22              ;                           then pulse on count = pulse on time
 804  5F22              ;                                pulse off count = pulse off time
 805  5F22              ;                                pulse rest count = pulse rest time
 806  5F22              ;                           else pulse rest count = pulse rest time
 807  5F22              ;                                pulse rate count, pulse on count, pulse off count = 0
 808  5F22              ;                   else pulse on count = $FF
 809  5F22              ;                        pulse off time , rest time = 0
 810  5F22
 811  5F22              ;..................................................................................................................................
 812  5F22                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 5F22
   2+ 5F22                  DEFINE  MAINLOOP_COOL_LASERS
   3+ 5F22                  DEFINE  MAINLOOP_ECM
   4+ 5F22                  DEFINE  MAINLOOP_KEYBOARDSCAN
   5+ 5F22              ;    DEFINE  MAINLOOP_DEMOSHIPS
   6+ 5F22              ;   DEFINE  MAINLOOP_DEBUGMISSILE 1
   7+ 5F22                  DEFINE  MAINLOOP_INPUTHANDLER
   8+ 5F22                 ; DEFINE  MAINLOOP_EVENTHANDLER 1
   9+ 5F22                  DEFINE  MAINLOOP_RECHARGE 1
  10+ 5F22               ;   DEFINE  MAINLOOP_LAUNCHMISSILE
  11+ 5F22                  DEFINE  MAINLOOP_UPDATEUNIVERSE 1
  12+ 5F22                  DEFINE  MAINLOOP_DUST_RENDER 1
  13+ 5F22                  DEFINE  MAINLOOP_SUN_RENDER 1
  14+ 5F22                  DEFINE  MAINLOOP_PLANET_RENDER 1
  15+ 5F22                  DEFINE  MAINLOOP_MODEL_RENDER    1
  16+ 5F22                  DEFINE  MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE 1
  17+ 5F22                  DEFINE  MAINLOOP_WARP_ENABLED 1
  18+ 5F22
  19+ 5F22              ;.................................................................................................................................
  20+ 5F22 CD 1C 84     MainLoop:	            call    doRandom                                                ; redo the seeds every frame
  21+ 5F25                              IFDEF LASER_V2
  22+ 5F25 CD 0C 61                             call    LaserBeamV2
  23+ 5F28                              ELSE
  24+ 5F28 ~                                    UpdateLaserOnCounter
  25+ 5F28 ~                                    UpdateLaserOffCounter
  26+ 5F28 ~                                    UpdateLaserRestCounter
  27+ 5F28 ~                                    CoolLasers
  28+ 5F28                              ENDIF
  29+ 5F28                              IFDEF MAINLOOP_ECM
  30+ 5F28                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++5F28 3A 3A 7F     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++5F2B A7                                   and     a
   3++5F2C CA 3E 5F                             jp      z, .DonePlayerECM
   4++5F2F 3D                                   dec     a
   5++5F30 32 3A 7F                             ld      (PlayerECMActiveCount),a
   6++5F33 3A 04 81                             ld      a,(PlayerEnergy)
   7++5F36 A7                                   and     a
   8++5F37 CA 3E 5F                             jp      z, .DonePlayerECM
   9++5F3A 3D                                   dec     a
  10++5F3B 32 04 81                             ld      (PlayerEnergy),a
  11++5F3E              .DonePlayerECM:
  12++5F3E 3A 9F 7D     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++5F41 A7                                   and     a
  14++5F42 CA 49 5F                             jp      z, .DoneCommonECM
  15++5F45 3D                                   dec     a
  16++5F46 32 9F 7D                             ld      (ECMCountDown),a
  17++5F49              .DoneCommonECM:
  18++5F49
# file closed: ././GameEngine/MainLoop_ECM.asm
  31+ 5F49                              ENDIF
  32+ 5F49                              IFDEF MAINLOOP_WARP_ENABLED
  33+ 5F49 3A 4B 80                             ld      a,(WarpCooldown)
  34+ 5F4C A7                                   and     a
  35+ 5F4D CA 54 5F                             jp      z,.AlreadyCool
  36+ 5F50 3D                                   dec     a
  37+ 5F51 32 4B 80                             ld      (WarpCooldown),a
  38+ 5F54              .AlreadyCool
  39+ 5F54                              ENDIF
  40+ 5F54                              IFDEF MAINLOOP_KEYBOARDSCAN
  41+ 5F54                                      MMUSelectKeyboard
  41+ 5F54 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  42+ 5F58 CD 03 E1                             call    scan_keyboard                                           ; perform the physical input scan
  43+ 5F5B                              ENDIF
  44+ 5F5B              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
  45+ 5F5B                              IFDEF MAINLOOP_DEMOSHIPS
  46+ 5F5B ~            DemoOfShipsDEBUG:       call    TestForNextShip
  47+ 5F5B                              ENDIF
  48+ 5F5B              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  49+ 5F5B 3E 00        InputBlockerCheck:      ld      a,$0
  50+ 5F5D                              IFDEF MAINLOOP_INPUTHANDLER
  51+ 5F5D                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
  51+ 5F5D FE 01       >                        cp     $01
  51+ 5F5F CA 8D 5F    >                        jp      z,SkipInputHandlers
  52+ 5F62                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  52+ 5F62 3A 6F 80    >                        ld      a,(TextInputMode)
  52+ 5F65 A7          >                        and     a
  52+ 5F66 CA 8D 5F    >                        jp      z, SkipInputHandlers
  53+ 5F69 CD C3 6A                             call    ViewKeyTest
  54+ 5F6C CD 9A 67                             call    TestPauseMode
  55+ 5F6F 3A 44 80                             ld      a,(GamePaused)
  56+ 5F72 FE 00                                cp      0
  57+ 5F74 C2 22 5F                             jp      nz,MainLoop
  58+ 5F77                                      MMUSelectKeyboard
  58+ 5F77 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  59+ 5F7B CD 53 E3                             call    MovementKeyTest
  60+ 5F7E              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  61+ 5F7E                              ENDIF
  62+ 5F7E 3A 8C 5F     HandleMovement:         ld      a,(CallCursorRoutine+2)
  63+ 5F81                                      JumpIfAIsZero     TestAreWeDocked
  63+ 5F81 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  63+ 5F82 CA 8D 5F    >                        jp	    z, TestAreWeDocked
  64+ 5F85              ;.. Handle displaying correct screen ..............................................................................................
  65+ 5F85 3E 00        HandleBankSelect:       ld      a,$00
  66+ 5F87                                      MMUSelectScreenA
  66+ 5F87 ED 92 56    >                     nextreg ScreenBankMMU,		a
  67+ 5F8A CD 00 00     CallCursorRoutine:      call    $0000
  68+ 5F8D              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  69+ 5F8D              ;.. Also end up here if we have the screen input blocker set
  70+ 5F8D              ;DEFUNCT?EngineSounds:       ;HasEngineSoundChanged
  71+ 5F8D              ;DEFUNCT?                    ;call    nz,UpdateEngineSound
  72+ 5F8D              SkipInputHandlers:
  73+ 5F8D              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  74+ 5F8D              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  74+ 5F8D 3A 43 80    >                        ld  a,(DockedFlag)
  74+ 5F90 FE 00       >                        cp  StateNormal
  74+ 5F92 C2 C2 60    >                        jp  nz,UpdateLoop
  75+ 5F95                              IFDEF MAINLOOP_EVENTHANDLER
  76+ 5F95 ~            .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  77+ 5F95 ~                                    dec     (hl)
  78+ 5F95 ~            .ProcessEvent:          call    z,LoopEventTriggered
  79+ 5F95                              ENDIF
  80+ 5F95                              IFDEF MAINLOOP_RECHARGE
  81+ 5F95 3A 4C 80     .ProcessRecharge:       ld      a,(EventCounter)
  82+ 5F98 E6 07                                and     7
  83+ 5F9A CC BC 82                             call    z, RechargeShip
  84+ 5F9D                              ENDIF
  85+ 5F9D                              IFDEF MAINLOOP_LAUNCHMISSILE
  86+ 5F9D ~            .PlayerMissileLaunch:   AnyMissilesLeft
  87+ 5F9D ~                                    jr      z,.NoMissiles                                           ; just in case last one gets destroyed
  88+ 5F9D ~                                    IsMissileLaunchFlagged
  89+ 5F9D ~                                    call    z,  LaunchPlayerMissile
  90+ 5F9D ~            .NoMissiles
  91+ 5F9D                              ENDIF
  92+ 5F9D              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  93+ 5F9D              ;.. we do one universe slot each loop update ......................................................................................
  94+ 5F9D              ;.. First update Sun...............................................................................................................
  95+ 5F9D                          INCLUDE "./GameEngine/ShipWarp.asm"
# file opened: ././GameEngine/ShipWarp.asm
   1++5F9D                              IFDEF MAINLOOP_WARP_ENABLED
   2++5F9D              ;... Warp or in system jump thsi moves everything by 1 on the high (sign) byte away or towards ship based on their z axis only
   3++5F9D              ;... its not a true move in the right direction, more a z axis warp
   4++5F9D              ProcessWarp:            JumpIfMemFalse  WarpPressed, .NoWarp
   4++5F9D 3A 72 80    >                        ld      a,(WarpPressed)
   4++5FA0 A7          >                        and     a
   4++5FA1 C2 30 60    >                        jp      nz, .NoWarp
   5++5FA4              .WarpIsPressed:         SetMemFalse     WarpPressed                               ; clear and acknowlege
   5++5FA4 3E FF       >                        ld      a,$FF
   5++5FA6 32 72 80    >                        ld      (WarpPressed),a
   6++5FA9                                      JumpIfMemZero   WarpCooldown, .WarpDriveCool
   6++5FA9 3A 4B 80    >                        ld  a,(WarpCooldown)
   6++5FAC A7          >                        and a
   6++5FAD CA B3 5F    >                        jp  z,.WarpDriveCool
   7++5FB0                                      DISPLAY "TODO Need logic for in system jump drive malfunction"
   8++5FB0              .JumpDriveHot:          DISPLAY "TODO call bong jump drive hot"
   9++5FB0                                      DISPLAY "TODO flash jump drive status icon"
  10++5FB0 C3 30 60                             jp      .NoWarp
  11++5FB3              .WarpDriveCool:         JumpIfMemFalse    SpaceStationSafeZone, .NotInSpaceStationRange
  11++5FB3 3A 32 7F    >                        ld      a,(SpaceStationSafeZone)
  11++5FB6 A7          >                        and     a
  11++5FB7 C2 BD 5F    >                        jp      nz, .NotInSpaceStationRange
  12++5FBA              .MassLocked:            DISPLAY "TODO Mass locked by object call bong"
  13++5FBA                                      DISPLAY "TODO message mass locked"
  14++5FBA                                      DISPLAY "TODO make space station a body just like planet and sun"
  15++5FBA C3 30 60                             jp      .NoWarp
  16++5FBD CD 9E 83     .NotInSpaceStationRange:call    AreShipsPresent
  17++5FC0 30 F8                                jr      nc,     .MassLocked
  18++5FC2              .IsPlanetMassLocking:   MMUSelectPlanet                 ; is planet within 256 then mass locked
  18++5FC2 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
  19++5FC6 2A 17 C0                             ld      hl,(P_BnKzhi)
  20++5FC9 7C                                   ld      a,h                     ; if z sign is <> 0 then mass locked
  21++5FCA 44 4D                                ld      bc,hl                   ; save planet z hi and sign
  22++5FCC E6 7F                                and     $7F                     ; h = abs zsign
  23++5FCE B5                                   or      l                       ; to get to here a must be zero to or with l will give a quick result
  24++5FCF CA BA 5F                             jp      z,     .MassLocked
  25++5FD2              .IsSunMassLocking:      MMUSelectSun
  25++5FD2 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
  26++5FD6 2A 17 C0                             ld      hl,(SBnKzhi)
  27++5FD9 7C                                   ld      a,h                     ; if z sign is <> 0 then mass locked
  28++5FDA E6 7F                                and     $7F                     ; h = abs zsign
  29++5FDC B5                                   or      l                       ; to get to here a must be zero to or with l will give a quick result
  30++5FDD CA BA 5F                             jp      z,     .MassLocked
  31++5FE0                          IFDEF SIMPLEWARP
  32++5FE0              ;-- when we get here bc = [planet sign, high] hl = [sun sign, high]
  33++5FE0 78           .MassiveJumpCheck:      ld      a,b                     ; if range is 7000 to 1000 do a $1000 jump
  34++5FE1 B4                                   or      h
  35++5FE2 E6 70                                and     $70
  36++5FE4 11 00 90                             ld      de,$9000
  37++5FE7 C2 01 60                             jp      nz,.PerformJumpPlanet
  38++5FEA 78           .LargeJumpCheck:        ld      a,b                     ; now if sign byte has a value then we do
  39++5FEB B4                                   or      h                       ; a jump of $0100
  40++5FEC E6 7F                                and     $7F
  41++5FEE 11 00 81                             ld      de,$8100
  42++5FF1 C2 01 60                             jp      nz,.PerformJumpPlanet
  43++5FF4              ;-- now see if we are doing a $0010 jump
  44++5FF4 79           .MediumJumpCheck:       ld      a,c                     ; if the distance is in the range
  45++5FF5 B5                                   or      l                       ; 00F0 to 0010 then its a $0010 jump
  46++5FF6 E6 F0                                and     $F0
  47++5FF8 11 10 80                             ld      de,$8010
  48++5FFB C2 01 60                             jp      nz,.PerformJumpPlanet
  49++5FFE 11 01 00     .SmallJump:             ld      de,$0001
  50++6001              .PerformJumpPlanet:     MMUSelectPlanet
  50++6001 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
  51++6005 2A 17 C0                             ld      hl,(P_BnKzhi)
  52++6008 CD D0 8E                             call    AddDEtoHLSigned
  53++600B 22 17 C0                             ld      (P_BnKzhi),hl
  54++600E              .PerformJumpSun:        MMUSelectSun
  54++600E ED 91 56 53 >                     nextreg SunMMU,            BankSunData
  55++6012 22 17 C0                             ld      (SBnKzhi),hl
  56++6015 CD D0 8E                             call    AddDEtoHLSigned
  57++6018 22 17 C0                             ld      (SBnKzhi),hl
  58++601B C3 1E 60                             jp      .MoveJunk
  59++601E                          ELSE
  60++601E ~            .NotCorrectFacing:      ;       call bong, align with body
  61++601E ~                                    jp      .NoWarp
  62++601E ~            .JumpToPlanetCheck:     ld      a,(P_BnKzhi)
  63++601E ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
  64++601E ~                                    ld      a,(P_BnKyhi)
  65++601E ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
  66++601E ~                                    ld      a,(P_BnKxhi)
  67++601E ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
  68++601E ~                                    jp      .MassLocked
  69++601E ~            .PlanetRangeOK:         call    WarpPlanetCloser
  70++601E ~                                    MMUSelectSun
  71++601E ~                                    call    WarpSunFurther
  72++601E ~                                    jp      .MoveJunk
  73++601E ~            .JumpToSunCheck:        ld      a,(SBnKzsgn)
  74++601E ~                                    ld      hl,SBnKxsgn
  75++601E ~                                    or      (hl)
  76++601E ~                                    ld      hl,SBnKysgn
  77++601E ~                                    or      (hl)
  78++601E ~                                    and     SignMask8Bit
  79++601E ~                                    JumpIfAGTENusng  2, .SunRangeOK
  80++601E ~                                    jp      .MassLocked
  81++601E ~            .SunRangeOK:            call    WarpSunCloser
  82++601E ~                                    MMUSelectPlanet
  83++601E ~                                    call    WarpPlanetFurther
  84++601E                          ENDIF
  85++601E CD 59 83     .MoveJunk:              call    ClearJunk;  call    WarpJunk - as it will move sign bit hi then all junk will be lost
  86++6021 3E 5A                                ld      a,WarpCoolDownPeriod
  87++6023 32 4B 80                             ld      (WarpCooldown),a
  88++6026              .WarpSFX:               MMUSelectLayer1
  88++6026 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  89++602A                                      DISPLAY "TODO: Add Warp Sound"
  90++602A CD C8 61                             call    WarpSFX             ; Do the visual SFX based on facing
  91++602D C3 34 60                             jp      .DoneWarp
  92++6030              .NoWarp:                MMUSelectLayer1
  92++6030 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  93++6034              .DoneWarp:
  94++6034                              ENDIF
# file closed: ././GameEngine/ShipWarp.asm
  96+ 6034
  97+ 6034 3E 00        UpdateShipsControl:     ld      a,0
  98+ 6036 A7                                   and     a
  99+ 6037                                      IFDEF MAINLOOP_UPDATEUNIVERSE
 100+ 6037 CC 0D 64     .UpdateShips:               call    z, UpdateUniverseObjects
 101+ 603A                                      ENDIF
 102+ 603A                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
 102+ 603A 3A 99 69    >                        ld  a,(ScreenTransitionForced)
 102+ 603D FE FF       >                        cp  $FF
 102+ 603F C2 CD 62    >                        jp  nz,BruteForceChange
 103+ 6042 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
 104+ 6044                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
 104+ 6044 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 104+ 6045 CA C2 60    >                        jp	    z, UpdateLoop
 105+ 6048              ;..Processing a view...............................................................................................................
 106+ 6048              ;..Display any message ............................................................................................................
 107+ 6048              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 107+ 6048 2A 49 80    >                        ld      hl,(InnerHyperCount)
 107+ 604B 7C          >                        ld      a,h
 107+ 604C B5          >                        or      l
 107+ 604D 28 03       >                        jr      z, .HandleMessages
 108+ 604F CD 4A 75                             call    HyperSpaceMessage
 109+ 6052              .HandleMessages:        AnyMessagesMacro  .NoMessages
 109+ 6052 3A A9 7D    >                        ld      a, (MessageCount)
 109+ 6055 A7          >                        and     a
 109+ 6056 28 06       >                        jr      z, .NoMessages
 110+ 6058 CD 2C 75                             call    DisplayCurrentMessage
 111+ 605B CD 0B 75                             call    UpdateMessageTimer
 112+ 605E
 113+ 605E              .NoMessages:            MMUSelectLayer2
 113+ 605E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ 6062 21 6D 80     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
 115+ 6065 35                                   dec     (hl)
 116+ 6066 CA 76 60                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
 117+ 6069 FA 74 60                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
 118+ 606C              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 118+ 606C 3E FF       >                        ld      a,$FF
 118+ 606E 32 6E 80    >                        ld      (ConsoleRedrawFlag),a
 119+ 6071 C3 80 60                             jp      .JustViewPortCLS
 120+ 6074 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
 121+ 6076              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
 121+ 6076 AF          >                        xor     a
 121+ 6077 32 6E 80    >                        ld      (ConsoleRedrawFlag),a
 122+ 607A CD 0E E2                             call    l2_cls                                                  ; Clear layer 2 for graphics
 123+ 607D C3 83 60                             jp      .ViewPortCLSDone
 124+ 6080 CD 8E E1     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 125+ 6083              .ViewPortCLSDone:
 126+ 6083                                      MMUSelectLayer1
 126+ 6083 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 127+ 6087              .UpdateSun:
 128+ 6087                                      IFDEF   MAINLOOP_SUN_RENDER
 129+ 6087                                          MMUSelectSun
 129+ 6087 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 130+ 608B              ;.DEBUGFORCE:
 131+ 608B                                     ;ld          hl,$0081
 132+ 608B                                     ;ld          (SBnKxlo),hl
 133+ 608B                                     ;ld          hl,$0001
 134+ 608B                                     ;ld          (SBnKylo),hl
 135+ 608B                                     ; ld          hl,$0160
 136+ 608B                                     ; ld          (SBnKzlo),hl
 137+ 608B                                      ;ld          a,$80
 138+ 608B                                      ;ld          (SBnKxsgn),a
 139+ 608B                                      ;ld          (SBnKysgn),a
 140+ 608B                                     ; ZeroA
 141+ 608B                                    ;  ld          (SBnKzsgn),a
 142+ 608B CD 45 C7                                 call    SunUpdateAndRender
 143+ 608E                                      ENDIF
 144+ 608E              .UpdatePlanet:          IFDEF   MAINLOOP_PLANET_RENDER
 145+ 608E                                          ;break
 146+ 608E                                          MMUSelectPlanet
 146+ 608E ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 147+ 6092 CD 80 CA                                 call    PlanetUpdateAndRender
 148+ 6095                                      ENDIF
 149+ 6095              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 150+ 6095 3E DF        DrawDustForwards:       ld     a,$DF
 151+ 6097 32 B5 E2                             ld     (line_gfx_colour),a
 152+ 609A              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 152+ 609A ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 153+ 609E                                      IFDEF   MAINLOOP_DUST_RENDER
 154+ 609E CD 31 7B     DustUpdateRoutine:          call   DustForward                                              ; This needs to be self modifying
 155+ 60A1                                      ENDIF
 156+ 60A1              ;ProcessSun:             call    DrawForwardSun
 157+ 60A1                                      IFDEF   LASER_V2
 158+ 60A1              ProcessLaser:               MMUSelectSpriteBank
 158+ 60A1 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 159+ 60A5                                          JumpIfMemFalse LaserBeamOn, .NoLaser
 159+ 60A5 3A 1F 81    >                        ld      a,(LaserBeamOn)
 159+ 60A8 A7          >                        and     a
 159+ 60A9 C2 B5 60    >                        jp      nz, .NoLaser
 160+ 60AC CD 3E E3     .FireLaser:                 call    sprite_laser_show
 161+ 60AF CD 80 81                                 call    LaserDrainSystems
 162+ 60B2 C3 B8 60                                 jp      ProcessPlanet
 163+ 60B5 CD DC E4     .NoLaser:                   call    sprite_laser_hide
 164+ 60B8                                      ELSE
 165+ 60B8 ~            ProcessLaser:               ld      a,(CurrLaserPulseRate)
 166+ 60B8 ~                                        JumpIfAIsNotZero .CheckForPulse
 167+ 60B8 ~                                        JumpIfMemFalse FireLaserPressed, .NoLaser
 168+ 60B8 ~                                        jp      .FireLaser
 169+ 60B8 ~            .CheckForPulse:             JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 170+ 60B8 ~            .FireLaser:                 MMUSelectSpriteBank
 171+ 60B8 ~                                        call    sprite_laser_show
 172+ 60B8 ~                                        call    LaserDrainSystems
 173+ 60B8 ~                                        jp      ProcessPlanet
 174+ 60B8 ~            .NoLaser:                   MMUSelectSpriteBank
 175+ 60B8 ~                                        call    sprite_laser_hide
 176+ 60B8                                      ENDIF
 177+ 60B8              ProcessPlanet:
 178+ 60B8                                      IFDEF   MAINLOOP_MODEL_RENDER
 179+ 60B8 CD 05 66     ProcessShipModels:          call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
 180+ 60BB                                      ENDIF
 181+ 60BB                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 182+ 60BB                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 183+ 60BB                                      ; now will CLS bottom thrid
 184+ 60BB                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 184+ 60BB 3A 6E 80    >                        ld      a,(ConsoleRedrawFlag)
 184+ 60BE A7          >                        and     a
 184+ 60BF CC 25 6D    >                        call    z, UpdateConsole
 185+ 60C2              ;..If we were not in views then we were in display screens/menus...................................................................
 186+ 60C2              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 186+ 60C2 3A CF 60    >                        ld  a,(ScreenLoopJP+1)
 186+ 60C5 A7          >                        and a
 186+ 60C6 CA D1 60    >                        jp  z,LoopRepeatPoint
 187+ 60C9              ;..This is the screen update routine for menus.....................................................................................
 188+ 60C9              ;.. Also used by transition routines
 189+ 60C9 3E 00        ScreenLoopBank:         ld      a,$0
 190+ 60CB                                      MMUSelectScreenA
 190+ 60CB ED 92 56    >                     nextreg ScreenBankMMU,		a
 191+ 60CE CD 00 00     ScreenLoopJP:           call    $0000
 192+ 60D1 3A 43 80     LoopRepeatPoint:        ld      a,(DockedFlag)
 193+ 60D4              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 193+ 60D4 FE FD       >                        cp     StateCompletedLaunch
 193+ 60D6 CA F0 60    >                        jp      z,WeHaveCompletedLaunch
 194+ 60D9                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 194+ 60D9 FE FE       >                        cp     StateInTransition
 194+ 60DB CA B2 62    >                        jp      z,WeAreInTransition
 195+ 60DE                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 195+ 60DE FE FC       >                        cp     StateHJumping
 195+ 60E0 CA F6 60    >                        jp      z,WeAreHJumping
 196+ 60E3                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 196+ 60E3 FE FB       >                        cp     StateHEntering
 196+ 60E5 CA 04 61    >                        jp      z,WeAreHEntering
 197+ 60E8                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 197+ 60E8 FE FA       >                        cp     StateCompletedHJump
 197+ 60EA CA 98 61    >                        jp      z,WeHaveCompletedHJump
 198+ 60ED
 199+ 60ED C3 B2 62                             jp      DoubleBufferCheck
 200+ 60F0 CD FC 69     WeHaveCompletedLaunch:  call    LaunchedFromStation
 201+ 60F3 C3 B2 62                             jp      DoubleBufferCheck
 202+ 60F6 CD 4D C2     WeAreHJumping:          call    hyperspace_Lightning
 203+ 60F9 DA B2 62                             jp      c,DoubleBufferCheck
 204+ 60FC 3E FB                                ld      a,StateHEntering
 205+ 60FE 32 43 80                             ld      (DockedFlag),a
 206+ 6101 C3 B2 62                             jp      DoubleBufferCheck
 207+ 6104 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 208+ 6106 32 43 80                             ld      (DockedFlag),a
 209+ 6109 C3 B2 62                             jp      DoubleBufferCheck
 210+ 610C
 211+ 610C              ; laser duration goign below 0 for some reason
 212+ 610C              ; if laser is on
 213+ 610C              ;    if laser duration = master duration - do sfx
 214+ 610C              ;    laser duration ---
 215+ 610C              ;    if laser duration = 0
 216+ 610C              ;          **should set beam off***
 217+ 610C              ;       curr burst count --
 218+ 610C              ;       if busrt count = 0
 219+ 610C              ;          set cooldown to post pulserests
 220+ 610C              ;       else
 221+ 610C              ;          set cooldown to 0
 222+ 610C              ;          pause = pulse off time
 223+ 610C              ;    else
 224+ 610C              ;       return
 225+ 610C              ;  else
 226+ 610C              ;     if burst count <> 0
 227+ 610C              ;        current burst pause --
 228+ 610C              ;        return if not zero
 229+ 610C              ;        set laser beam on
 230+ 610C              ;        return
 231+ 610C              ;      else
 232+ 610C              ;         cooldown-- if not zero
 233+ 610C
 234+ 610C              LaserBeamV2:            JumpIfMemFalse LaserBeamOn, .LaserIsOff                          ; If laser is not on then skip
 234+ 610C 3A 1F 81    >                        ld      a,(LaserBeamOn)
 234+ 610F A7          >                        and     a
 234+ 6110 C2 42 61    >                        jp      nz, .LaserIsOff
 235+ 6113 21 1C 81     .LaserIsOn:             ld          hl,CurrLaserPulseOnTime
 236+ 6116 3A 20 81                             ld          a,(CurrLaserDuration)
 237+ 6119 BE                                   cp          (hl)                                                ; if duration just started
 238+ 611A                                      ;call        z, SoundLaserFiring                                ; queue sound
 239+ 611A 3D                                   dec         a
 240+ 611B 32 20 81                             ld          (CurrLaserDuration),a                               ; if duration is 0
 241+ 611E                                      ;break
 242+ 611E                                      ReturnIfANotZero                                                ; the do the end of pulse
 242+ 611E A7          >                        and     a
 242+ 611F C0          >                        ret     nz
 243+ 6120              .EndOfPulse:            SetMemFalse LaserBeamOn
 243+ 6120 3E FF       >                        ld      a,$FF
 243+ 6122 32 1F 81    >                        ld      (LaserBeamOn),a
 244+ 6125 3A 24 81                             ld          a,(CurrLaserBurstCount)
 245+ 6128 3D                                   dec         a
 246+ 6129 32 24 81                             ld          (CurrLaserBurstCount),a                             ; if we have run out of
 247+ 612C                                      JumpIfAIsNotZero    .SkipBurstEnd                               ; pulses then
 247+ 612C A7          >                        and     a
 247+ 612D C2 37 61    >                        jp	    nz,.SkipBurstEnd
 248+ 6130              .EndOfBurst:            ldCopyByte  CurrLaserPulseRest,  CurrentCooldown                ; main cool down
 248+ 6130 3A 1E 81    >                        ld       a,(CurrLaserPulseRest)
 248+ 6133 32 22 81    >                        ld       (CurrentCooldown),a
 249+ 6136 C9                                   ret
 250+ 6137              .SkipBurstEnd:          SetMemZero  CurrentCooldown                                     ; else its just pulse
 250+ 6137 AF          >                        xor     a
 250+ 6138 32 22 81    >                        ld      (CurrentCooldown),a
 251+ 613B                                      ldCopyByte  CurrLaserPulseOffTime,  CurrentBurstPause           ; cooldown
 251+ 613B 3A 1D 81    >                        ld       a,(CurrLaserPulseOffTime)
 251+ 613E 32 21 81    >                        ld       (CurrentBurstPause),a
 252+ 6141 C9           .SkipPulseEnd:          ret
 253+ 6142 3A 24 81     .LaserIsOff:            ld          a,(CurrLaserBurstCount)
 254+ 6145                                      JumpIfAIsZero .FullCool
 254+ 6145 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 254+ 6146 CA 5C 61    >                        jp	    z, .FullCool
 255+ 6149 3A 21 81     .BurstCool:             ld          a,(CurrentBurstPause)
 256+ 614C 3D                                   dec         a
 257+ 614D 32 21 81                             ld          (CurrentBurstPause),a
 258+ 6150 C0                                   ret         nz
 259+ 6151                                      SetMemTrue  LaserBeamOn
 259+ 6151 AF          >                        xor     a
 259+ 6152 32 1F 81    >                        ld      (LaserBeamOn),a
 260+ 6155                                      ldCopyByte  CurrLaserPulseOnTime, CurrLaserDuration
 260+ 6155 3A 1C 81    >                        ld       a,(CurrLaserPulseOnTime)
 260+ 6158 32 20 81    >                        ld       (CurrLaserDuration),a
 261+ 615B C9                                   ret
 262+ 615C 3A 22 81     .FullCool:              ld          a,(CurrentCooldown)
 263+ 615F                                      ReturnIfAIsZero
 263+ 615F A7          >                        and     a
 263+ 6160 C8          >                        ret     z
 264+ 6161 3D                                   dec         a
 265+ 6162 32 22 81                             ld          (CurrentCooldown),a
 266+ 6165 C9                                   ret
 267+ 6166
 268+ 6166              ;;called from LaunchedFromStation  & WeHaveCompletedHJump to re-seed the system
 269+ 6166
 270+ 6166 3A 19 7F     InitialiseLocalUniverse:ld      a,(Galaxy)                      ; DEBUG as galaxy n is not working
 271+ 6169                                      MMUSelectGalaxyA
 271+ 6169 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 272+ 616C 2A 2E 7F                             ld      hl,(TargetSystemX)
 273+ 616F 22 2C 7F                             ld      (PresentSystemX),hl
 274+ 6172 44                                   ld      b,h
 275+ 6173 4D                                   ld      c,l
 276+ 6174                                      CorrectPostJumpFuel
 276+ 6174 3A E5 83    >                        ld      a,(Fuel)
 276+ 6177 21 4E 7F    >                        ld      hl,Distance
 276+ 617A 96          >                        sub     a,(hl)
 276+ 617B 32 E5 83    >                        ld      (Fuel),a
 277+ 617E                                      ForceTransition ScreenFront            ; This will also trigger stars
 277+ 617E 3E 09       >                        ld      a,ScreenFront
 277+ 6180 32 99 69    >                        ld      (ScreenTransitionForced), a
 278+ 6183 3E 00                                ld      a,$00
 279+ 6185 32 33 7F                             ld      (ExtraVesselsCounter),a
 280+ 6188 32 43 80                             ld      (DockedFlag),a
 281+ 618B CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 282+ 618E CD 9A 84                             call    copy_working_to_system         ; and propogate copies of seeds
 283+ 6191 CD 92 84                             call    copy_working_to_galaxy         ; .
 284+ 6194 CD 80 85                             call    get_planet_data_working_seed   ; sort out system data
 285+ 6197 C9                                   ret
 286+ 6198
 287+ 6198
 288+ 6198              ; to create planet position
 289+ 6198              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 290+ 6198              ;       take result and divide by 2 then store in x and y sign
 291+ 6198              ;
 292+ 6198              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 293+ 6198              ;       take seed 6 AND %00000011 and store in x sign and y sign
 294+ 6198              ;       set pitch and roll to 0
 295+ 6198              ;
 296+ 6198              ;
 297+ 6198              ;
 298+ 6198              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 299+ 6198 CD 66 61     WeHaveCompletedHJump:   call    InitialiseLocalUniverse
 300+ 619B                                      ;call    GetDigramGalaxySeed           ; .
 301+ 619B                                      MMUSelectStockTable                    ; .
 301+ 619B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 302+ 619F CD AA E0                             call    generate_stock_market          ; generate new prices
 303+ 61A2 CD 12 83                             call    ClearUnivSlotList              ; clear out any ships
 304+ 61A5 CD AA 81                             call    ResetPlayerShip
 305+ 61A8                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 305+ 61A8 21 3B 7F    >                        ld      hl,FugitiveInnocentStatus
 305+ 61AB CB 3E       >                        srl     (hl)
 306+ 61AD                                      MMUSelectSun
 306+ 61AD ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 307+ 61B1 CD 73 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 308+ 61B4                                      MMUSelectPlanet
 308+ 61B4 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 309+ 61B8 CD 8C C5                             call    CreatePlanet
 310+ 61BB                          DISPLAY "TODO:  GENEATE SUB AND PLANET POS"
 311+ 61BB              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 312+ 61BB              ;TODO.CreateSun:             call    SetSunSlot
 313+ 61BB              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 314+ 61BB              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 315+ 61BB              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 316+ 61BB              ;;TODO                        call    CopyBodyToUniverse
 317+ 61BB              ;;TODO                        call    CreateSun
 318+ 61BB              ;;TODOCreatePlanet:          call    SetPlanetSlot
 319+ 61BB              ;;TODO                       MMUSelectShipBank1
 320+ 61BB              ;;TODO                    eliteb       call    GetShipBankId
 321+ 61BB              ;;TODO                       MMUSelectUniverseBankN 1
 322+ 61BB              ;;TODO                       call    CopyBodyToUniverse
 323+ 61BB                                      SetMemFalse DockedFlag
 323+ 61BB 3E FF       >                        ld      a,$FF
 323+ 61BD 32 43 80    >                        ld      (DockedFlag),a
 324+ 61C0 3E FF        .TriggerEngineSound:    ld      a,$FF
 325+ 61C2 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 326+ 61C5 C3 B2 62                             jp  DoubleBufferCheck
 327+ 61C8
 328+ 61C8
 329+ 61C8 3A D3 61     WarpSFX:                ld      a,(WarpRoutineAddr+1)
 330+ 61CB A7                                   and     a
 331+ 61CC C8                                   ret     z
 332+ 61CD 3E 00        WarpMMUBank:            ld      a,$00
 333+ 61CF                                      MMUSelectScreenA
 333+ 61CF ED 92 56    >                     nextreg ScreenBankMMU,		a
 334+ 61D2 CD 00 00     WarpRoutineAddr:        call    0000
 335+ 61D5 C9                                   ret
 336+ 61D6
 337+ 61D6              ;--- From here is the new simplified logic. This uses the current spawn table
 338+ 61D6              ;--- Events such as jumping to a system, ending up in which space,
 339+ 61D6              ;--- special mission events
 340+ 61D6              ;--- We will need actually two tables, 1 for in station range 1 for not else flipping tables on the Z boundary
 341+ 61D6              ;--- Would be difficult
 342+ 61D6              ;--- load the table to work from. This then leaves all teh logic configurable
 343+ 61D6              LoopEventTriggered:     ; for now just do spawn
 344+ 61D6 C3 D9 61                             jp      SpawnEvent
 345+ 61D9                                      ; implicit ret from jp
 346+ 61D9
 347+ 61D9                  DEFINE  SPAWN_TABLE_SELECT   1
 348+ 61D9                  DEFINE  SPAWN_GENERATE_COUNT 1
 349+ 61D9                  DEFINE  SPAWN_LOOP           1
 350+ 61D9              ;    DEFINE  SPAWN_IGNORE         1
 351+ 61D9
 352+ 61D9
 353+ 61D9              SpawnEvent:             IFDEF   SPAWN_IGNORE
 354+ 61D9 ~                                        ret
 355+ 61D9                                      ENDIF
 356+ 61D9 CD C3 83                             call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 357+ 61DC D8                                   ret     c                                   ; then may as well just skip routine
 358+ 61DD                                      IFDEF   MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE
 359+ 61DD                                          SetMemFalse SpaceStationSafeZone
 359+ 61DD 3E FF       >                        ld      a,$FF
 359+ 61DF 32 32 7F    >                        ld      (SpaceStationSafeZone),a
 360+ 61E2                                      ENDIF
 361+ 61E2 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 362+ 61E4 CD 4A 63                             call    SelectSpawnTable                    ; ix = correct row in spawn table
 363+ 61E7 CD 32 63     .GetSpawnDetails:       call    SelectSpawnTableData                ; get table data,
 364+ 61EA 78           .CheckIfInvalid:        ld      a,b                                 ; if b was 0
 365+ 61EB B7                                   or      a                                   ; then its an invalid
 366+ 61EC C8                                   ret     z                                   ; ship or just not to spawn
 367+ 61ED E5 C5        .SetNbrToSpawn:         push    hl,,bc                              ; b will be set to the
 368+ 61EF CD 1C 84                             call    doRandom                            ; actual number to spawn
 369+ 61F2 C1                                   pop     bc                                  ; a is not really needed now as de and hl hold
 370+ 61F3 A0                                   and     b                                   ; addresses for table and handler code
 371+ 61F4 F6 01                                or      1                                   ; at least 1
 372+ 61F6 47                                   ld      b,a                                 ; so b = the number to spawn
 373+ 61F7 E1                                   pop     hl                                  ; get back address of spawn handler
 374+ 61F8              ; b = nbr to spawn, hl = handler for spawn, de = lookup table of ship type to spawn
 375+ 61F8 C5 D5 E5     .SpawnLoop:             push    bc,,de,,hl                          ; save loop counter lookup table and handler
 376+ 61FB EB                                   ex      de,hl                               ; hl = lookup spawn type table, de = handler for spawn
 377+ 61FC CD 69 63                             call    SelectSpawnType                     ; a = shipId to Spawn
 378+ 61FF CD 08 62                             call    .SpawnAShipTypeA                    ; if we get a carry then stop spawning
 379+ 6202 E1 D1 C1                             pop     bc,,de,,hl                          ; get back values
 380+ 6205 10 F1                                djnz    .SpawnLoop                          ; repeat until B = 0
 381+ 6207 C9                                   ret                                         ; we are done
 382+ 6208 EB           .SpawnAShipTypeA        ex      de,hl                               ; hl= handler to spawn, a = ship to spawn
 383+ 6209 E9                                   jp      hl                                  ; we call this so we can do a dynamic jp
 384+ 620A                                      ; implicit ret from jp                      ; SpawnShipTypeA handles free slot tests etc
 385+ 620A
 386+ 620A
 387+ 620A
 388+ 620A 00           EnemyShipBank:          DS 1
 389+ 620B 00 00 00...  EnemyMissileLaunchPos:  DS 3 * 3
 390+ 6214 00 00 00...  EnemyMissileLaunchMat:  DS 2 * 3
 391+ 621A
 392+ 621A
 393+ 621A              LaunchEnemyMissile:     ; break
 394+ 621A 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)             ; save current bank number
 395+ 621D 32 0A 62                             ld      (EnemyShipBank),a                   ;
 396+ 6220 3E 05                                ld      a,5
 397+ 6222 CD CC A6                             call    CalcLaunchOffset
 398+ 6225 3E 00                                ld      a,0                                 ; TODO For now only 1 missile type
 399+ 6227                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 399+ 6227 21 17 77    >                    ld          hl,ShipMissileTable
 399+ 622A ED 31       >                    add         hl,a
 399+ 622C 7E          >                    ld          a,(hl)
 400+ 622D CD 70 62                             call    SpawnShipTypeA                      ; spawn the ship
 401+ 6230 D8                                   ret     c                                   ; return if failed
 402+ 6231 CD AF C6                             call    UnivSetEnemyMissile                 ; as per player but sets as angry
 403+ 6234 3E FF                                ld      a,$FF
 404+ 6236 32 45 C0                             ld      (UBnKMissileTarget),a               ; set as definte player as target
 405+ 6239 3A 0A 62                             ld      a,(EnemyShipBank)                   ; Direct restore current bank
 406+ 623C                                      MMUSelectUnivBankA                          ;
 406+ 623C ED 92 56    >                     nextreg UniverseMMU,       a
 407+ 623F 21 5C C0                             ld      hl, UBnKMissilesLeft                ; reduce enemy missile count
 408+ 6242 35                                   dec     (hl)
 409+ 6243 C9                                   ret
 410+ 6244
 411+ 6244 3E 0A        LaunchEnemyFighter:     ld      a,10
 412+ 6246                                      ;break;call    CopyUBnKtoLaunchParameters
 413+ 6246                                      ;copymatrix,rot and speed
 414+ 6246 C9                                   ret
 415+ 6247
 416+ 6247              LaunchPlayerMissile:   ; break
 417+ 6247 CD C3 83                             call    FindNextFreeSlotInC                 ; Check if we have a slot free
 418+ 624A 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 419+ 624C                          DISPLAY "TODO: FOR NOW ONLY 1 MISSILE TYPE"
 420+ 624C 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 421+ 624E                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 421+ 624E 21 17 77    >                    ld          hl,ShipMissileTable
 421+ 6251 ED 31       >                    add         hl,a
 421+ 6253 7E          >                    ld          a,(hl)
 422+ 6254 CD 70 62                             call    SpawnShipTypeA                      ; spawn the ship
 423+ 6257 3A 07 81                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 424+ 625A 32 45 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 425+ 625D CD F7 C6                             call    UnivSetPlayerMissile                ; .
 426+ 6260                                      ClearMissileTargetting                      ; reset targetting
 426+ 6260 3E FF       >                        ld      a,StageMissileNotTargeting
 426+ 6262 32 07 81    >                        ld      (MissileTargettingFlag),a
 427+ 6265 21 39 7F                             ld      hl, NbrMissiles
 428+ 6268 35                                   dec     (hl)
 429+ 6269                          DISPLAY "TODO: handle removal of missile from inventory and console"
 430+ 6269 C9                                   ret
 431+ 626A              .MissileMissFire:       ClearMissileTargetting
 431+ 626A 3E FF       >                        ld      a,StageMissileNotTargeting
 431+ 626C 32 07 81    >                        ld      (MissileTargettingFlag),a
 432+ 626F C9                                   ret ; TODO bing bong noise misfire message
 433+ 6270
 434+ 6270                                      include "./SpawnShipTypeA.asm"
# file opened: ./GameEngine/./SpawnShipTypeA.asm
   1++6270              ;.. SpawnShipTypeA
   2++6270              ; IN
   3++6270              ;  a = ship type to create (equates to the ship model)
   4++6270              ; OUT
   5++6270              ;  b = ship class
   6++6270              ;  a = iyh = slot number
   7++6270              SpawnShipTypeA:         ;break
   8++6270 FD 6F                                ld      iyl,a                               ; save ship type in iyh
   9++6272 CD C3 83                             call    FindNextFreeSlotInC                 ; c = slot number to use
  10++6275 D8                                   ret     c                                   ; if carry flag was set then no spare slots
  11++6276 FD 61                                ld      iyh,c                               ; preserve slot number for now
  12++6278                                      MMUSelectShipBank1                          ; select bank 1
  12++6278 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  13++627C FD 7C                                ld      a,iyh                               ; A = slot number
  14++627E FD 45                                ld      b,iyl                               ; b = ship type
  15++6280 CD 29 83                             call    SetSlotAToTypeB                     ; Allocate slot as used
  16++6283                                      MMUSelectUniverseA                          ; .
  16++6283 C6 46       >                     add    a,BankUNIVDATA0
  16++6285 ED 92 56    >                     nextreg UniverseMMU,       a
  17++6288 FD 7C        .MarkUnivDiags:         ld      a,iyh                               ; mark diagnostics for bank number in memory
  18++628A C6 41                                add     "A"                                 ; so fix Universe PB<x> to correct letter
  19++628C 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
  20++628F FD 7D                                ld      a,iyl                               ; get ship model type
  21++6291 32 0E C0                             ld      (StartOfUnivM),a                    ; set debugging for model
  22++6294 CD 0F E0     .CopyOverShipData:      call    GetShipBankId                       ; find actual memory location of ship model data
  23++6297                                      MMUSelectShipBankA                          ; by paging in bank a then looking up computed bank for model a
  23++6297 ED 92 57    >					 nextreg ShipModelMMU,	    a
  24++629A 78                                   ld      a,b                                 ; b = computed ship id for bank
  25++629B CD 6A E0                             call    CopyShipToUniverse                  ; copy all the ship data in to the paged in bank
  26++629E CD 8F C7                             call    UnivSetSpawnPosition                ; set initial spawn position
  27++62A1 CD 48 C8                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
  28++62A4 3A 0D C4                             ld      a,(ShipTypeAddr)                    ; get ship type
  29++62A7 32 0F C0                             ld      (StartOfUnivT),a                    ; to help debugging we store type too
  30++62AA 47                                   ld      b,a                                 ; and set the type into slot table
  31++62AB FD 7C                                ld      a,iyh                               ;
  32++62AD CD 30 83                             call    SetSlotAToClassB                    ;
  33++62B0                                      ClearCarryFlag                              ; no carry on success
  33++62B0 B7          >                        or a
  34++62B1 C9                                   ret
  35++62B2
# file closed: ./GameEngine/./SpawnShipTypeA.asm
 435+ 62B2
 436+ 62B2                                      ; reset main loop counters
 437+ 62B2                                      ; from BBC TT18 jump code
 438+ 62B2                                      ; need to set system corrodinates, flush out univere ships etc
 439+ 62B2                                      ; set up new star system and landing location in system
 440+ 62B2                                      ; reset ship speed etc (RES2)
 441+ 62B2                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 442+ 62B2                                      ;   put planet into data blokc 1 of FRIN
 443+ 62B2                                      ;   put sun inot data block (NWWSHIP)
 444+ 62B2                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 445+ 62B2
 446+ 62B2              WeAreInTransition:
 447+ 62B2 3E 00        DoubleBufferCheck:      ld      a,00
 448+ 62B4                                      IFDEF DOUBLEBUFFER
 449+ 62B4 FE 00                                    cp      0
 450+ 62B6 CA C5 62                                 jp      z,TestTransition
 451+ 62B9                                          MMUSelectLayer2
 451+ 62B9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 452+ 62BD 3A 02 E0                                 ld     a,(varL2_BUFFER_MODE)
 453+ 62C0 FE 00                                    cp     0
 454+ 62C2 C4 97 E2                                 call   nz,l2_flip_buffers
 455+ 62C5                                      ENDIF
 456+ 62C5 3A 99 69     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 457+ 62C8 FE FF                                cp      $FF
 458+ 62CA CA 22 5F                             jp      z,MainLoop
 459+ 62CD CD 3A 6A     BruteForceChange:       call    SetScreenA
 460+ 62D0 C3 22 5F                             jp MainLoop
 461+ 62D3
 462+ 62D3
 463+ 62D3              ;......................................................................
 464+ 62D3              ; Sound Code
 465+ 62D3
 466+ 62D3
 467+ 62D3
 468+ 62D3              ;As speed goes up so does pitch
 469+ 62D3
# file closed: ./GameEngine/MainLoop.asm
 813  62D3                                      INCLUDE "./GameEngine/SpawnObject.asm"
# file opened: ./GameEngine/SpawnObject.asm
   1+ 62D3
   2+ 62D3 CD 70 62     SpawnStationHandler:            call    SpawnShipTypeA
   3+ 62D6 D8                                           ret     c                                   ; abort if failed
   4+ 62D7 C9                                           ret
   5+ 62D8
   6+ 62D8
   7+ 62D8 CD 70 62     SpawnHermitHandler:             call    SpawnShipTypeA
   8+ 62DB D8                                           ret     c                                   ; abort if failed
   9+ 62DC C9                                           ret
  10+ 62DD
  11+ 62DD CD 70 62     SpawnAsteroidHandler:           call    SpawnShipTypeA
  12+ 62E0 D8                                           ret     c                                   ; abort if failed
  13+ 62E1                                              ;Set random position and vector
  14+ 62E1                                              ; if its a hermit jump to that to so special
  15+ 62E1
  16+ 62E1 C9                                           ret
  17+ 62E2
  18+ 62E2 F5           SpawnTypeJunkHandler:           push    af
  19+ 62E3                                              TestRoomForJunk .CanAddJunk
  19+ 62E3 3E 03       >                        ld      a,3
  19+ 62E5             >                        JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  19+ 62E5 3A 32 7F    >                        ld      a,(SpaceStationSafeZone)
  19+ 62E8 A7          >                        and     a
  19+ 62E9 CA EE 62    >                        jp      z, .DoTest
  19+ 62EC C6 02       >                        add     a,2
  19+ 62EE             >.DoTest                 JumpIfALTMemusng    JunkCount, .CanAddJunk
  19+ 62EE 21 34 7F    >                        ld      hl,JunkCount
  19+ 62F1 BE          >                        cp      (hl)
  19+ 62F2 DA F6 62    >                        jp		c,.CanAddJunk
  20+ 62F5 C9                                           ret
  21+ 62F6 F1           .CanAddJunk:                    pop     af
  22+ 62F7 CD 70 62                                     call    SpawnShipTypeA
  23+ 62FA                                              AddJunkCount
  23+ 62FA 21 34 7F    >                        ld      hl,JunkCount
  23+ 62FD 34          >                        inc     (hl)
  24+ 62FE D8                                           ret     c                                   ; abort if failed
  25+ 62FF C9                                           ret
  26+ 6300
  27+ 6300 CD 70 62     SpawnTypeCopHandler:            call    SpawnShipTypeA
  28+ 6303 D8                                           ret     c                                   ; abort if failed
  29+ 6304                                              ; Cops will be non hostile if there are no other ones in area
  30+ 6304                                              ; if there are, then check out cargo and fist to evalutate
  31+ 6304                                              ; if not hostile and in space station area, then patrol orbiting station
  32+ 6304                                              ; if not in space station area even split on orbiting a random point in space at distance random
  33+ 6304                                              ;                                            travelling to station
  34+ 6304                                              ;                                            travelling to sun
  35+ 6304 C9                                           ret
  36+ 6305 CD 70 62     SpawnTypeTraderHandler:         call    SpawnShipTypeA
  37+ 6308 D8                                           ret     c                                   ; abort if failed
  38+ 6309                                              ; 50/50 goign to planet or sun
  39+ 6309                                              ;                main loop AI determines if our FIST status will force a jump
  40+ 6309 C9                                           ret
  41+ 630A CD 70 62     SpawnTypeNonTraderHandler:      call    SpawnShipTypeA
  42+ 630D D8                                           ret     c                                   ; abort if failed
  43+ 630E                                              ; 50/50 goign to planet or sun
  44+ 630E                                              ; if FIST is high then 10% chance will auto go hostile
  45+ 630E C9                                           ret
  46+ 630F CD 70 62     SpawnTypePirateHandler:         call    SpawnShipTypeA
  47+ 6312 D8                                           ret     c                                   ; abort if failed
  48+ 6313                                              ; set random position
  49+ 6313                                              ; 50/50 going to station or sun
  50+ 6313                                              ; if in safe zone, then not hostile
  51+ 6313                                              ; work out value of our cargo then go auto hostile (e.g. gems/gold, special carry nuke mission has cargo so valueable it auto sets hostile)
  52+ 6313                                              AddPirateCount                              ; another pirate has been spawned
  52+ 6313 21 38 7F    >                        ld      hl,PirateCount
  52+ 6316 34          >                        inc     (hl)
  53+ 6317 C9                                           ret
  54+ 6318 CD 70 62     SpawnTypeHunterHandler:         call    SpawnShipTypeA
  55+ 631B D8                                           ret     c                                   ; abort if failed
  56+ 631C                                              ; initially hunters will be non hostile and by default going to station
  57+ 631C                                              ; set random position
  58+ 631C                                              ; 50/50 going to station or sun
  59+ 631C                                              ; Check out FIST status, if very high auto hostile
  60+ 631C                                              ; else its checked on ship event loop
  61+ 631C C9                                           ret
  62+ 631D CD 70 62     SpawnTypeThargoidHandler:       call    SpawnShipTypeA
  63+ 6320 D8                                           ret     c                                   ; abort if failed
  64+ 6321                                              ; initially non hostile, main AI does logic (ie.. they will go hostile always after a random time or if shot at)
  65+ 6321                                              ; start in random position
  66+ 6321 C9                                           ret
  67+ 6322 C9           SpawnTypeMissionHandler:        ret
  68+ 6323
  69+ 6323 CD 70 62     SpawnTypeStationDebrisHandler: call    SpawnShipTypeA
  70+ 6326 D8                                           ret     c                                   ; abort if failed
  71+ 6327                                              ;Set random position and vector
  72+ 6327 C9                                           ret
  73+ 6328              SpawnTypeMissionEventHandler:
  74+ 6328 C9           SpawnTypeDoNotSpawnHandler:    ret
  75+ 6329
  76+ 6329
  77+ 6329
  78+ 6329 3E 29        SpawnHostileCop:        ld      a,ShipID_Viper
  79+ 632B CD 70 62                             call    SpawnShipTypeA                      ; call rather than jump
  80+ 632E CD 1A C6                             call    SetShipHostile                      ; as we have correct universe banked in now
  81+ 6331 C9                                   ret
  82+ 6332                          DISPLAY "TODO: SPAWN TRADER"
  83+ 6332              SpawnTrader:       ; TODO
  84+ 6332
  85+ 6332              ; DEFUNCT?SpawnAHostileHunter:    ld      hl, ExtraVesselsCounter             ; prevent the next spawning
  86+ 6332              ; DEFUNCT?                        inc     (hl)                                ;
  87+ 6332              ; DEFUNCT?                        and     3                                   ; a = random 0..3
  88+ 6332              ; DEFUNCT?                        MMUSelectShipBank1
  89+ 6332              ; DEFUNCT?                        GetByteAInTable ShipHunterTable             ; get hunter ship type
  90+ 6332              ; DEFUNCT?                        call    SpawnShipTypeA
  91+ 6332              ; DEFUNCT?                        call    SetShipHostile
  92+ 6332              ; DEFUNCT?                        ret
  93+ 6332
  94+ 6332
  95+ 6332
  96+ 6332              ; input IX = table for spawn data
  97+ 6332              ; output A  = table type
  98+ 6332              ;        b = maximum to spawn
  99+ 6332              ;        de = spawn table address
 100+ 6332              ;        hl = spawn handler address
 101+ 6332 DD 7E 08     SelectSpawnTableData:   ld      a,(ix+1*SpawnTableSize)             ; Table Type
 102+ 6335 21 DE 63                             ld      hl,SpawnTypeHandlers                ; hl = the location in spawn table for the call address for setting up a spawn
 103+ 6338 ED 31                                add     hl,a                                ; of type A
 104+ 633A ED 31                                add     hl,a                                ;
 105+ 633C 7E                                   ld      a,(hl)
 106+ 633D 23                                   inc     hl
 107+ 633E 66                                   ld      h,(hl)
 108+ 633F 6F                                   ld      l,a                                 ; hl now is proper address
 109+ 6340 DD 46 10                             ld      b,(ix+2*SpawnTableSize)             ; Nbr to Spawn
 110+ 6343 DD 5E 18                             ld      e,(ix+3*SpawnTableSize)             ; Spawn Table Addr Low
 111+ 6346 DD 56 20                             ld      d,(ix+4*SpawnTableSize)             ; Spawn Table Addr Hi
 112+ 6349 C9                                   ret
 113+ 634A
 114+ 634A              ; Output IX = pointer to correct row in table
 115+ 634A              ; its up to the caller if DE is right table and it it needs to load into
 116+ 634A              ; it is up to the main loop code to maintain SpaceStationSafeZone
 117+ 634A              SelectSpawnTable:
 118+ 634A              .SelectCorrectTable:    JumpIfMemTrue SpaceStationSafeZone, .SelectSpaceStationTable
 118+ 634A 3A 32 7F    >                        ld      a,(SpaceStationSafeZone)
 118+ 634D A7          >                        and     a
 118+ 634E CA 58 63    >                        jp      z, .SelectSpaceStationTable
 119+ 6351 DD 21 8E 63                          ld      ix,FreeSpaceSpawnTableLow
 120+ 6355 C3 5C 63                             jp      .RandomShip
 121+ 6358 DD 21 B6 63  .SelectSpaceStationTable:ld      ix,StationSpawnTableLow
 122+ 635C CD 1C 84     .RandomShip:            call    doRandom
 123+ 635F DD BE 00     .SelectLoop:            cp      (ix+0)                              ; Compare high value
 124+ 6362 D8                                   ret     c                                   ; if random <= high threshold jump to match, we cant just do jr c as 255 would never compare
 125+ 6363 C8                                   ret     z                                   ; if random <= high threshold jump to match, result is, last values must be 255
 126+ 6364 DD 23                                inc     ix                                  ; move to next row
 127+ 6366 C3 5F 63                             jp      .SelectLoop                         ; we have a 255 marker to stop infinite loop
 128+ 6369
 129+ 6369              ; Returns with carry set if no ship to spawn
 130+ 6369              ; In = hl = address of first byte of table
 131+ 6369 06 03        SelectSpawnType:        ld      b,3                                 ; maxium of 3 goes
 132+ 636B E5 FD E1                             ld      iy,hl                               ; save hl as we may need it if the spawn is too high rank
 133+ 636E CD 1C 84     .SelectSpawnType:       call    doRandom
 134+ 6371 E6 0F                                and     %00001111                           ; random 1 to 15
 135+ 6373 CB 27                                sla     a                                   ; * 2 as its 2 bytes per row
 136+ 6375 ED 31                                add     hl,a
 137+ 6377 7E                                   ld      a,(hl)
 138+ 6378 47                                   ld      b,a
 139+ 6379 3A 3E 7F                             ld      a,(CurrentRank)                     ; are we experienced enough to face this ship
 140+ 637C                                      JumpIfAGTENusng b, .GoodToSpawn             ; if current rank >= table rank, we are good
 140+ 637C B8          >                        cp     b
 140+ 637D D2 87 63    >                        jp		nc,.GoodToSpawn
 141+ 6380 FD E5 E1     .TooLowRank:            ld      hl,iy
 142+ 6383 10 E9                                djnz    .SelectSpawnType                    ; 3 goes then fail out
 143+ 6385              .NoSpawn:               SetCarryFlag
 143+ 6385 37          >                        scf
 144+ 6386 C9                                   ret
 145+ 6387 3E 08        .GoodToSpawn:           ld      a,8                                 ; so we shift by 8
 146+ 6389 ED 31                                add     hl,a                                ; to get to the ship id
 147+ 638B 7E                                   ld      a,(hl)                              ; and fetch it in a
 148+ 638C                                      ClearCarryFlag
 148+ 638C B7          >                        or a
 149+ 638D C9                                   ret
 150+ 638E
 151+ 638E              ; Spawn table is in two halves. if we are within range X of space station we use the second table
 152+ 638E              ; thsi means we coudl in theory drag a hunter / pirate or thargoid say into a space station zone
 153+ 638E              ; Probability high
 154+ 638E              ; Class of table,       0=Station,
 155+ 638E              ; Table to pick from (this is then based on ranking )
 156+ 638E
 157+ 638E              ; Its prefilled to 8 options in the table to allocate space. though the table can only accomodate 8. ther eis a 9th as a marker, value of table = 0 means no spawn
 158+ 638E 54 9F FA FF  FreeSpaceSpawnTableLow:    DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 158+ 6392 FF FF FF FF
 159+ 6396 03 04 05 06  FreeSpaceSpawnTableType:   DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 159+ 639A 0C 0C 0C 0C
 160+ 639E 01 01 01 02  FreeSpaceSpawnTableCount:  DB 1,                        1,                              1,                              2,                          0,                   0,                   0,                   0
 160+ 63A2 00 00 00 00
 161+ 63A6 C5 B5 B5 85  FreeSpaceSpawnTableAddrLo: DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 161+ 63AA 00 00 00 00
 162+ 63AE 76 76 76 76  FreeSpaceSpawnTableAddrHi: DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 162+ 63B2 00 00 00 00
 163+ 63B6
 164+ 63B6 54 9F FA FF  StationSpawnTableLow:      DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 164+ 63BA FF FF FF FF
 165+ 63BE 03 04 05 06  StationSpawnTableType:     DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 165+ 63C2 0C 0C 0C 0C
 166+ 63C6 01 01 01 03  StationSpawnTableCount:    DB 1,                        1,                              1,                              3,                          0,                   0,                   0,                   0
 166+ 63CA 00 00 00 00
 167+ 63CE C5 B5 B5 85  StationSpawnTableAddrLo:   DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 167+ 63D2 00 00 00 00
 168+ 63D6 76 76 76 76  StationSpawnTableAddrHi:   DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 168+ 63DA 00 00 00 00
 169+ 63DE
 170+ 63DE              SpawnTableSize             EQU  FreeSpaceSpawnTableType - FreeSpaceSpawnTableLow
 171+ 63DE
 172+ 63DE              ; Looko in constant equates, Spawntype equates for the values for this jump table
 173+ 63DE              ; note at minium it must itmust point to SpawnTypeDoNotSpawnHandlers which just does a ret
 174+ 63DE D3 62 DD 62  SpawnTypeHandlers:         DW SpawnStationHandler,       SpawnAsteroidHandler,      SpawnTypeJunkHandler,          SpawnTypeCopHandler
 174+ 63E2 E2 62 00 63
 175+ 63E6 05 63 0A 63                             DW SpawnTypeTraderHandler,    SpawnTypeNonTraderHandler, SpawnTypePirateHandler,        SpawnTypeHunterHandler
 175+ 63EA 0F 63 18 63
 176+ 63EE 1D 63 22 63                             DW SpawnTypeThargoidHandler,  SpawnTypeMissionHandler,   SpawnTypeStationDebrisHandler, SpawnTypeMissionEventHandler
 176+ 63F2 23 63 28 63
 177+ 63F6 28 63                                   DW SpawnTypeDoNotSpawnHandler
# file closed: ./GameEngine/SpawnObject.asm
 814  63F8              ;..................................................................................................................................
 815  63F8              ;..Process A ship..................................................................................................................
 816  63F8              ; Apply Damage b to ship based on shield value of a
 817  63F8              ; returns a with new shield value
 818  63F8                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 63F8              ;..Process A ship..................................................................................................................
   2+ 63F8              ; Apply Damage b to ship based on shield value of a
   3+ 63F8              ; returns a with new shield value
   4+ 63F8              ApplyDamage:            ClearCarryFlag
   4+ 63F8 B7          >                        or a
   5+ 63F9 98                                   sbc     b
   6+ 63FA D0                                   ret     nc                  ; no carry so was not negative
   7+ 63FB ED 44        .KilledShield:          neg                         ; over hit shield
   8+ 63FD 4F                                   ld      c,a                 ; save overhit in c
   9+ 63FE 3A 04 81                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  10+ 6401                                      ClearCarryFlag
  10+ 6401 B7          >                        or a
  11+ 6402 99                                   sbc     c
  12+ 6403 F2 07 64                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  13+ 6406 AF           .KilledPlayer:          xor     a
  14+ 6407 32 04 81     .DoneDamage:            ld      (PlayerEnergy),a
  15+ 640A AF                                   xor     a                   ; shield is gone
  16+ 640B C9                                   ret
  17+ 640C
# file closed: ./GameEngine/DamagePlayer.asm
 819  640C              ;..Update Universe Objects.........................................................................................................
 820  640C                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 640C              ;..................................................................................................................................
   2+ 640C              ;                           DEFINE ROTATIONDEBUG 1
   3+ 640C              ;                           DEFINE CLIPDEBUG 1
   4+ 640C 00           CurrentShipUniv:        DB      0
   5+ 640D              ;..................................................................................................................................
   6+ 640D              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
   7+ 640D              IsShipDestroyedOrExploding: MACRO
   8+ 640D ~                                        ld      a,(UBnKexplDsp)                                 ; is it destroyed
   9+ 640D ~                                        and     %10100000                                       ; or exploding
  10+ 640D                                          ENDM
  11+ 640D
  12+ 640D              JumpIfShipNotClose:         MACRO   NotCloseTarget
  13+ 640D ~            .CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  14+ 640D ~                                        ld      de,(UBnKylo)                                    ; .
  15+ 640D ~                                        ld      bc,(UBnKzlo)                                    ; .
  16+ 640D ~                                        or      h                                               ; .
  17+ 640D ~                                        or      d                                               ; .
  18+ 640D ~                                        or      b                                               ; .
  19+ 640D ~                                        jp      nz,NotCloseTarget                               ; .
  20+ 640D ~            .CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  21+ 640D ~                                        or      e                                               ; .
  22+ 640D ~                                        or      c                                               ; .
  23+ 640D ~                                        ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  24+ 640D ~                                        and     $80                                             ; .
  25+ 640D ~                                        jp      nz,NotCloseTarget                              ; .
  26+ 640D                                          ENDM
  27+ 640D
  28+ 640D              VeryCloseCheck:             MACRO
  29+ 640D ~                                        ld      a,iyh                                           ; bit 6 is still too far
  30+ 640D ~                                        and     %11000000
  31+ 640D                                          ENDM
  32+ 640D
  33+ 640D              JumpIfNotDockingCheck:      MACRO   NotDocking
  34+ 640D ~            .CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  35+ 640D ~                                        JumpIfANENusng  ShipTypeStation, NotDocking             ; if its not a station so we don't test docking
  36+ 640D ~            .IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, NotDocking ; if it is angry then we dont test docking
  37+ 640D ~            .CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, NotDocking  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  38+ 640D ~            .GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  39+ 640D ~                                        JumpIfALTNusng  89, NotDocking                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  40+ 640D ~            .CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  41+ 640D ~                                        and     SignMask8Bit                                    ; .
  42+ 640D ~                                        JumpIfALTNusng 80, NotDocking                           ; note 80 decimal for 36.6 degrees horizontal
  43+ 640D                                          ENDM
  44+ 640D
  45+ 640D              ;..................................................................................................................................
  46+ 640D AF           UpdateUniverseObjects:  xor     a
  47+ 640E 32 46 80                             ld      (SelectedUniverseSlot),a
  48+ 6411 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
  49+ 6412              ;.. If the slot is empty (FF) then skip this slot..................................................................................
  50+ 6412 CD B7 83                             call    GetTypeAtSlotA
  51+ 6415 FE FF                                cp      $FF                                             ; we don't process empty slots
  52+ 6417 CA 67 65                             jp      z,.UniverseSlotIsEmpty                          ; .
  53+ 641A FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  54+ 641C 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  55+ 641D                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  55+ 641D C6 46       >                     add    a,BankUNIVDATA0
  55+ 641F ED 92 56    >                     nextreg UniverseMMU,       a
  56+ 6422                      IFDEF   CLIPDEBUG
  57+ 6422 ~            .DEBUG:                     ld      a,(SelectedUniverseSlot)
  58+ 6422 ~                                        cp      0
  59+ 6422 ~                                        jr      nz,.ProperUpdate
  60+ 6422                      ENDIF
  61+ 6422                      IFDEF   DEBUG_SHIP_MOVEMENT
  62+ 6422 ~            .DebugUpdate:               call    FixStationPos
  63+ 6422                      ENDIF
  64+ 6422                      IFDEF   CLIPDEBUG
  65+ 6422 ~                                        jp      .CheckExploding
  66+ 6422                      ENDIF
  67+ 6422                                          DISPLAY "TODO: Make all 4 of these 1 call"
  68+ 6422 CD 7B D5     .ProperUpdate:          call    ApplyMyRollAndPitch                             ; todo , make all 4 of these 1 call
  69+ 6425 3A 49 C0                             ld      a,(UBnKRotZCounter)
  70+ 6428 FE 00                                cp      0
  71+ 642A CD 57 D7                             call    ApplyShipRollAndPitch
  72+ 642D CD 9D D8                             call    ApplyShipSpeed
  73+ 6430 CD 8C C6                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
  74+ 6433              ;.. apply ships movement
  75+ 6433              ;.. If its a space station then see if we are ready to dock........................................................................
  76+ 6433              .CheckExploding:        IsShipDestroyedOrExploding                              ; fi its destroyed or exploding z flag will be clear
  76+ 6433 3A 51 C0    >                            ld      a,(UBnKexplDsp)                                 ; is it destroyed
  76+ 6436 E6 A0       >                            and     %10100000                                       ; or exploding
  77+ 6438 C2 4F 65                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  78+ 643B              ;.. we can't collide with missiles, they collide with us as part of tactics
  79+ 643B              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  79+ 643B 3A 0D C4    >                        ld  a,(ShipTypeAddr)
  79+ 643E FE 01       >                        cp  ShipTypeMissile
  79+ 6440 CA 14 65    >                        jp  z,.CollisionDone
  80+ 6443 CD 60 C6     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  81+ 6446              .CheckIfClose:          JumpIfShipNotClose .PostCollisionTest
  81+ 6446 2A 20 C0    >.CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  81+ 6449 ED 5B 23 C0 >                            ld      de,(UBnKylo)                                    ; .
  81+ 644D ED 4B 26 C0 >                            ld      bc,(UBnKzlo)                                    ; .
  81+ 6451 B4          >                            or      h                                               ; .
  81+ 6452 B2          >                            or      d                                               ; .
  81+ 6453 B0          >                            or      b                                               ; .
  81+ 6454 C2 14 65    >                            jp      nz,.PostCollisionTest                               ; .
  81+ 6457 B5          >.CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  81+ 6458 B3          >                            or      e                                               ; .
  81+ 6459 B1          >                            or      c                                               ; .
  81+ 645A FD 67       >                            ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  81+ 645C E6 80       >                            and     $80                                             ; .
  81+ 645E C2 14 65    >                            jp      nz,.PostCollisionTest                              ; .
  82+ 6461              .CheckIfDockable:       JumpIfNotDockingCheck .CollisionCheck                   ; check if we are docking or colliding
  82+ 6461 3A 0D C4    >.CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  82+ 6464             >                            JumpIfANENusng  ShipTypeStation, .CollisionCheck             ; if its not a station so we don't test docking
  82+ 6464 FE 02       >                        cp     ShipTypeStation
  82+ 6466 C2 9A 64    >                        jp      nz,.CollisionCheck
  82+ 6469             >.IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, .CollisionCheck ; if it is angry then we dont test docking
  82+ 6469 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
  82+ 646C CB 57       >                        bit 	ShipHostileNewBitNbr,a
  82+ 646E C2 9A 64    >                        jp      nz,.CollisionCheck
  82+ 6471             >.CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  82+ 6471 3A 3A C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  82+ 6474 FE D6       >                        cp      214
  82+ 6476 DA 9A 64    >                        jp	  c,.CollisionCheck
  82+ 6479 CD D1 67    >.GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  82+ 647C             >                            JumpIfALTNusng  89, .CollisionCheck                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  82+ 647C FE 59       >                        cp      89
  82+ 647E DA 9A 64    >                        jp		c, .CollisionCheck
  82+ 6481 3A 30 C0    >.CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  82+ 6484 E6 7F       >                            and     SignMask8Bit                                    ; .
  82+ 6486             >                            JumpIfALTNusng 80, .CollisionCheck                           ; note 80 decimal for 36.6 degrees horizontal
  82+ 6486 FE 50       >                        cp      80
  82+ 6488 DA 9A 64    >                        jp		c, .CollisionCheck
  83+ 648B              ;.. Its passed all validation and we are docking...................................................................................
  84+ 648B              .WeAreDocking:          MMUSelectLayer1
  84+ 648B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  85+ 648F 3E 06                                ld        a,$6
  86+ 6491 CD B4 E0                             call      l1_set_border
  87+ 6494              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  87+ 6494 3E 0D       >                        ld      a,ScreenDocking
  87+ 6496 32 99 69    >                        ld      (ScreenTransitionForced), a
  88+ 6499 C9                                   ret                                                     ;  don't bother with other objects
  89+ 649A                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  90+ 649A              ;.. else we are just colliding and have to handle that
  91+ 649A FD 7D        .CollisionCheck:        ld      a,iyl
  92+ 649C                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  92+ 649C FE 02       >                        cp     ShipTypeStation
  92+ 649E CA D7 64    >                        jp      z,.HaveCollided
  93+ 64A1                                      JumpIfAEqNusng ShipTypeMissile, .PostCollisionTest      ; Missile collisions are done in the tactics code
  93+ 64A1 FE 01       >                        cp     ShipTypeMissile
  93+ 64A3 CA 14 65    >                        jp      z,.PostCollisionTest
  94+ 64A6              .VeryCloseCheck:        VeryCloseCheck                                          ; bit 6 is still too far
  94+ 64A6 FD 7C       >                            ld      a,iyh                                           ; bit 6 is still too far
  94+ 64A8 E6 C0       >                            and     %11000000
  95+ 64AA 20 68                                jr      nz,.PostCollisionTest                            ; .
  96+ 64AC FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  97+ 64AE                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  97+ 64AE FE 04       >                        cp     ShipTypeScoopable
  97+ 64B0 C2 D7 64    >                        jp      nz,.HaveCollided
  98+ 64B3 3A 04 84     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
  99+ 64B6                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
  99+ 64B6 FE FF       >                        cp     EquipmentItemFitted
  99+ 64B8 C2 D7 64    >                        jp      nz,.HaveCollided
 100+ 64BB 3A 25 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
 101+ 64BE                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
 101+ 64BE A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 101+ 64BF CA D7 64    >                        jp	    z, .HaveCollided
 102+ 64C2 CD E3 C7     .CollectedCargo:        call    ShipCargoType
 103+ 64C5 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
 104+ 64C6 CD 07 82                             call    CanWeScoopCargoD
 105+ 64C9 38 03                                jr      c, .NoRoom
 106+ 64CB CD FF 81     .CanScoop:              call    AddCargoTypeD
 107+ 64CE              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
 107+ 64CE 3A 46 80    >                        ld      a,(SelectedUniverseSlot)
 107+ 64D1 CD 4B 83    >                        call    ClearSlotA
 108+ 64D4 C3 14 65                             jp      .PostCollisionTest
 109+ 64D7              ; ... Generic collision
 110+ 64D7              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
 110+ 64D7 3A 84 7E    >                        ld      a,(DELTA)
 110+ 64DA FE 05       >                        cp      5
 110+ 64DC DA EB 64    >                        jp	  c,.SmallBump
 111+ 64DF 3A 58 C0     .BigBump:               ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
 112+ 64E2                                      SetCarryFlag
 112+ 64E2 37          >                        scf
 113+ 64E3 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
 114+ 64E4 47                                   ld      b,a
 115+ 64E5 CD B3 DB                             call    KillShip                                        ; mark ship as dead (if possible)
 116+ 64E8 C3 F5 64                             jp      .ApplyDamage
 117+ 64EB 3A 84 7E     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
 118+ 64EE 47                                   ld      b,a
 119+ 64EF                                                  DISPLAY "TODO: det target too"
 120+ 64EF CD D5 DB                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
 121+ 64F2 C3 F5 64                             jp      .ApplyDamage
 122+ 64F5 CD B1 82     .ApplyDamage:           call    SetSpeedZero
 123+ 64F8 3A 28 C0                             ld      a,(UBnKzsgn)                                    ; front or back
 124+ 64FB E6 80                                and     $80
 125+ 64FD 20 0C                                jr      nz,.HitRear
 126+ 64FF 3A 02 81                             ld      a,(ForeShield)
 127+ 6502 CD F8 63                             call    ApplyDamage
 128+ 6505 32 02 81                             ld      (ForeShield),a
 129+ 6508 C3 14 65                             jp      .CollisionDone
 130+ 650B 3A 03 81     .HitRear:               ld      a,(AftShield)
 131+ 650E CD F8 63                             call    ApplyDamage
 132+ 6511 32 03 81                             ld      (AftShield),a
 133+ 6514              .CollisionDone:
 134+ 6514              ;.. Now check laser to see if the ship is being shot in sights
 135+ 6514 CD 5A 6B     .PostCollisionTest:     call    ShipInSights
 136+ 6517 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 137+ 6519 3A 1B 81                             ld      a,(CurrLaserPulseRate)
 138+ 651C                                      JumpIfAIsNotZero .CheckForPulse
 138+ 651C A7          >                        and     a
 138+ 651D C2 2A 65    >                        jp	    nz,.CheckForPulse
 139+ 6520                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 139+ 6520 3A 71 80    >                        ld      a,(FireLaserPressed)
 139+ 6523 A7          >                        and     a
 139+ 6524 C2 3F 65    >                        jp      nz, .NoLaser
 140+ 6527 C3 31 65                             jp      .LaserDamage
 141+ 652A              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 141+ 652A 3A 2A 81    >                        ld  a,(CurrLaserPulseOnCount)
 141+ 652D A7          >                        and a
 141+ 652E CA 3F 65    >                        jp  z,.NoLaser
 142+ 6531 3A 25 81     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 143+ 6534 CD D5 DB                             call    DamageShip
 144+ 6537 3A 51 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 145+ 653A E6 A0                                and     %10100000
 146+ 653C C2 4F 65                             jp      nz,.ProcessedUniverseSlot                       ; can't lock on debris
 147+ 653F              .NoLaser:
 148+ 653F              ; Now check missile lock
 149+ 653F              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 149+ 653F 3A 07 81    >                        ld  a,(MissileTargettingFlag)
 149+ 6542 FE FE       >                        cp  StageMissileTargeting
 149+ 6544 C2 4F 65    >                        jp  nz,.ProcessedUniverseSlot
 150+ 6547 3A 46 80     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 151+ 654A                                      LockMissileToA                                          ; .
 151+ 654A F6 80       >                        or      $80
 151+ 654C 32 07 81    >                        ld      (MissileTargettingFlag),a
 152+ 654F              .ProcessedUniverseSlot:
 153+ 654F              ;...Tactics Section................................................................................................................
 154+ 654F 3A 46 80     .AreWeReadyForAI:       ld      a,(SelectedUniverseSlot)                        ; get back current slot number
 155+ 6552                                      IsSlotMissile                                           ; Missiles update every iteration
 155+ 6552 21 61 80    >                        ld      hl,UniverseSlotType
 155+ 6555 ED 31       >                        add     hl,a
 155+ 6557 7E          >                        ld      a,(hl)
 155+ 6558 FE 01       >                        cp      ShipTypeMissile
 156+ 655A CA 9A 65                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 157+ 655D              .CheckIfSlotAITurn:     CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 157+ 655D 3A 46 80    >                        ld      a,(SelectedUniverseSlot)
 157+ 6560 21 45 80    >                        ld      hl,CurrentUniverseAI
 157+ 6563 BE          >                        cp      (hl)
 157+ 6564 CC BF A1    >                        call    z,UpdateShip
 158+ 6567              .UniverseSlotIsEmpty:
 159+ 6567 3A 46 80     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship in loop
 160+ 656A 3C                                   inc     a                                               ; .
 161+ 656B                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; if we are beyond the loop then update the mast AI counter and we are done
 161+ 656B FE 0C       >                        cp     UniverseSlotListSize
 161+ 656D D2 76 65    >                        jp		nc,.UpdateAICounter
 162+ 6570 32 46 80                             ld      (SelectedUniverseSlot),a                        ; else update loop pointer
 163+ 6573 C3 11 64                             jp      .UpdateUniverseLoop                             ; if there are more to go we continue
 164+ 6576              .UpdateAICounter:       IncMemMaxNCycle CurrentUniverseAI , UniverseSlotListSize
 164+ 6576 3A 45 80    >                        ld      a,(CurrentUniverseAI)
 164+ 6579 3C          >                        inc     a
 164+ 657A FE 0C       >                        cp      UniverseSlotListSize
 164+ 657C 38 01       >                        jr      c,.IncMaxed
 164+ 657E AF          >                        xor     a
 164+ 657F 32 45 80    >.IncMaxed:              ld      (CurrentUniverseAI),a
 165+ 6582              .CheckIfStationHostile: ReturnIfMemFalse  SetStationHostileFlag                ; we coudl move this to pre loop so its only done once
 165+ 6582 3A 47 80    >                        ld      a,(SetStationHostileFlag)
 165+ 6585 A7          >                        and     a
 165+ 6586 C0          >                        ret     nz
 166+ 6587              .CheckSetStationHostile:ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 166+ 6587 3A 55 80    >                        ld   a,(UniverseSlotList)
 166+ 658A FE 02       >                        cp     ShipTypeStation
 166+ 658C C8          >                        ret    z
 167+ 658D                                      MMUSelectUniverseN 0
 167+ 658D ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 168+ 6591 CD 1A C6                             call    SetShipHostile
 169+ 6594                                      SetMemFalse    SetStationHostileFlag
 169+ 6594 3E FF       >                        ld      a,$FF
 169+ 6596 32 47 80    >                        ld      (SetStationHostileFlag),a
 170+ 6599 C9                                   ret
 171+ 659A              .UpdateMissile:         ;break
 172+ 659A CD BF A1                             call    UpdateShip                                      ; we do it this way top avoid double calling
 173+ 659D C3 67 65                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 174+ 65A0              ;..................................................................................................................................
 175+ 65A0
 176+ 65A0 00 00 00...  SaveUBNK:               DS 3*3
 177+ 65A9
 178+ 65A9 E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 179+ 65AD 3A 0C 64                             ld      a,(CurrentShipUniv)
 180+ 65B0 FE 02                                cp      2
 181+ 65B2 20 31                                jr      nz,.DoneSave
 182+ 65B4                                      ;break
 183+ 65B4 21 20 C0                             ld      hl, UBnKxlo
 184+ 65B7 11 A0 65                             ld      de, SaveUBNK
 185+ 65BA 01 09 00                             ld      bc, 3*3
 186+ 65BD ED B0                                ldir
 187+ 65BF 3E 00                                ld      a,0
 188+ 65C1 32 24 C0                             ld      (UBnKyhi)  ,a
 189+ 65C4 32 21 C0                             ld      (UBnKxhi)  ,a
 190+ 65C7 32 27 C0                             ld      (UBnKzhi)  ,a
 191+ 65CA 32 22 C0                             ld      (UBnKxsgn) ,a
 192+ 65CD 32 25 C0                             ld      (UBnKysgn) ,a
 193+ 65D0 32 27 C0                             ld      (UBnKzhi)  ,a
 194+ 65D3 32 28 C0                             ld      (UBnKzsgn) ,a
 195+ 65D6 3E 05                                ld      a, $5
 196+ 65D8 32 23 C0                             ld      (UBnKylo)  ,a
 197+ 65DB 3E 05                                ld      a, $5
 198+ 65DD 32 20 C0                             ld      (UBnKxlo)  ,a
 199+ 65E0 3E 6E                                ld      a, $6E
 200+ 65E2 32 26 C0                             ld      (UBnKzlo)  ,a
 201+ 65E5 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 202+ 65E9 C9                                   ret
 203+ 65EA
 204+ 65EA E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 205+ 65EE 3A 0C 64                             ld      a,(CurrentShipUniv)
 206+ 65F1 FE 02                                cp      2
 207+ 65F3 20 0B                                jr      nz,.DoneSave
 208+ 65F5                                      ;break
 209+ 65F5 21 A0 65                             ld      hl, SaveUBNK
 210+ 65F8 11 20 C0                             ld      de, UBnKxlo
 211+ 65FB 01 09 00                             ld      bc, 3*3
 212+ 65FE ED B0                                ldir
 213+ 6600 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 214+ 6604 C9                                   ret
 215+ 6605
 216+ 6605
 217+ 6605 AF           DrawForwardShips:       xor     a
 218+ 6606 32 0C 64     .DrawShipLoop:          ld      (CurrentShipUniv),a
 219+ 6609 CD B7 83                             call    GetTypeAtSlotA
 220+ 660C FE FF                                cp      $FF
 221+ 660E 28 12                                jr      z,.ProcessedDrawShip
 222+ 6610                                      ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 223+ 6610 3A 0C 64     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 224+ 6613                                      MMUSelectUniverseA
 224+ 6613 C6 46       >                     add    a,BankUNIVDATA0
 224+ 6615 ED 92 56    >                     nextreg UniverseMMU,       a
 225+ 6618                                      IFDEF ROTATIONDEBUG
 226+ 6618 ~                                        call    SavePosition
 227+ 6618                                      ENDIF
 228+ 6618              ;Debug set position
 229+ 6618                            ;         ld      hl,$0000
 230+ 6618                            ;         ld      a,$00
 231+ 6618                            ;         ld      (UBnKxlo),hl
 232+ 6618                            ;         ld      (UBnKxsgn),a
 233+ 6618                            ;         ld      hl,$0148
 234+ 6618                            ;         ld      a,$00
 235+ 6618                            ;         ld      (UBnKylo),hl
 236+ 6618                            ;         ld      (UBnKysgn),a
 237+ 6618                            ;         ld      hl,$0149
 238+ 6618                            ;         ld      a,$00
 239+ 6618                            ;         ld      (UBnKzlo),hl
 240+ 6618                            ;         ld      (UBnKzsgn),a
 241+ 6618                            ;         ld      hl,$A558
 242+ 6618                            ;         ld      (UBnkrotmatSidevX),hl
 243+ 6618                            ;         ld      hl,$D8CE
 244+ 6618                            ;         ld      (UBnkrotmatSidevY),hl
 245+ 6618                            ;         ld      hl,$0000
 246+ 6618                            ;         ld      (UBnkrotmatSidevZ),hl
 247+ 6618                            ;         ld      hl,$58CE
 248+ 6618                            ;         ld      (UBnkrotmatRoofvX),hl
 249+ 6618                            ;         ld      hl,$A558
 250+ 6618                            ;         ld      (UBnkrotmatRoofvY),hl
 251+ 6618                            ;         ld      hl,$0000
 252+ 6618                            ;         ld      (UBnkrotmatRoofvZ),hl
 253+ 6618                            ;         ld      hl,$8000
 254+ 6618                            ;         ld      (UBnkrotmatNosevX),hl
 255+ 6618                            ;         ld      hl,$8000
 256+ 6618                            ;         ld      (UBnkrotmatNosevY),hl
 257+ 6618                            ;         ld      hl,$6000
 258+ 6618                            ;         ld      (UBnkrotmatNosevZ),hl
 259+ 6618
 260+ 6618
 261+ 6618                                                  DISPLAY "TODO: Tune this"
 262+ 6618 CD 67 DA     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 263+ 661B              ; Debris still appears on radar
 264+ 661B                                      IFDEF ROTATIONDEBUG
 265+ 661B ~                                        call    RestorePosition
 266+ 661B                                      ENDIF
 267+ 661B              .UpdateRadar:
 268+ 661B              ;;;Does nothing                       ld      a,BankFrontView
 269+ 661B              ;;;Does nothing                       MMUSelectScreenA
 270+ 661B              ;;;Does nothing         ld      a,(CurrentShipUniv)
 271+ 661B              ;;;Does nothing         MMUSelectUniverseA
 272+ 661B
 273+ 661B                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 273+ 661B 3A 6E 80    >                        ld      a,(ConsoleRedrawFlag)
 273+ 661E A7          >                        and     a
 273+ 661F CC E4 73    >                        call    z, UpdateScannerShip
 274+ 6622 3A 0C 64     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 275+ 6625 3C                                   inc     a
 276+ 6626                                      ;   DEBUGGING SHIPS RENDERING
 277+ 6626                                      ;   JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 278+ 6626              .DrawSunCompass:        MMUSelectSun
 278+ 6626 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 279+ 662A CD FD 6F                             call    UpdateCompassSun                ; Always update the sun position
 280+ 662D CD 62 72                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 281+ 6630              .CheckPlanetCompass:    ;JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 282+ 6630              .DrawPlanetCompass:     MMUSelectPlanet
 282+ 6630 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 283+ 6634 CD 7E 70                             call    UpdateCompassPlanet
 284+ 6637 CD 23 73                             call    UpdateScannerPlanet
 285+ 663A C9                                   ret
 286+ 663B              .DrawStationCompass:
 287+ 663B
 288+ 663B C9                                   ret
 289+ 663C
 290+ 663C
 291+ 663C              ;..................................................................................................................................
 292+ 663C
 293+ 663C              TestForNextShip:        MacroIsKeyPressed c_Pressed_Quit
 293+ 663C 3E 46       >                        ld      a,c_Pressed_Quit
 293+ 663E             >                        MMUSelectKeyboard
 293+ 663E ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 293+ 6642 CD A2 E1    >                        call    is_key_pressed
 294+ 6645 C0                                   ret     nz
 295+ 6646 3A D0 67                             ld      a,(currentDemoShip)
 296+ 6649 3C                                   inc     a
 297+ 664A FE 2C                                cp      44
 298+ 664C 20 01                                jr      nz,.TestOK
 299+ 664E AF                                   xor     a
 300+ 664F 32 D0 67     .TestOK:                ld      (currentDemoShip),a
 301+ 6652 CD 12 83                             call    ClearUnivSlotList
 302+ 6655 3A D0 67                             ld      a,(currentDemoShip)
 303+ 6658 47                                   ld      b,a
 304+ 6659 AF                                   xor     a
 305+ 665A CD 29 83                             call    SetSlotAToTypeB
 306+ 665D F5                                   push    af
 307+ 665E                                      MMUSelectUniverseN 2
 307+ 665E ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 308+ 6662                                      SetSlotAToUnivClass
 308+ 6662 08          >                        ex      af,af'
 308+ 6663 3A 0D C4    >                        ld      a,(ShipTypeAddr)
 308+ 6666 47          >                        ld      b,a
 308+ 6667 08          >                        ex      af,af'
 308+ 6668 CD 30 83    >                        call    SetSlotAToClassB
 309+ 666B F1                                   pop     af
 310+ 666C CD 2C C6                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 311+ 666F 3A D0 67                             ld      a,(currentDemoShip)
 312+ 6672                                      MMUSelectShipBank1
 312+ 6672 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 313+ 6676 CD 0F E0                             call    GetShipBankId
 314+ 6679                                      MMUSelectShipBankA
 314+ 6679 ED 92 57    >					 nextreg ShipModelMMU,	    a
 315+ 667C 78                                   ld      a,b
 316+ 667D CD 6A E0                             call    CopyShipToUniverse
 317+ 6680 CD 2F 6B                             call    SetInitialShipPosition
 318+ 6683 CD 38 68                             call    DEBUGSETNODES
 319+ 6686 C9                                   ret
 320+ 6687
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 821  6687              ;..................................................................................................................................
 822  6687              ;; TODODrawForwardSun:         MMUSelectSun
 823  6687              ;; TODO                        ld      a,(SunKShipType)
 824  6687              ;; TODO.ProcessBody:           cp      129
 825  6687              ;; TODO                        jr      nz,.ProcessPlanet
 826  6687              ;; TODO.ProcessSun:            call    ProcessSun
 827  6687              ;; TODO
 828  6687              ;; TODOProcessSun:             call    CheckSunDistance
 829  6687              ;; TODO
 830  6687              ;; TODO                        ret
 831  6687              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 832  6687              ;; TODO                        ret
 833  6687              ;..................................................................................................................................
 834  6687
 835  6687
 836  6687              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 837  6687              ;;;                        ret     c
 838  6687              ;;;                        ld      a,(UbnkDrawAsDot)
 839  6687              ;;;                        and     a
 840  6687              ;;;                        jr      z,.CarryOnWithDraw
 841  6687              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 842  6687              ;;;                        ld      a,$FF                       ; just draw a pixel
 843  6687              ;;;                        MMUSelectLayer2                     ; then go to update radar
 844  6687              ;;;                        call    l2_plot_pixel               ;
 845  6687              ;;;                        ClearCarryFlag
 846  6687              ;;;                        ret
 847  6687              ;;;.ProcessShipNodes:      call    ProcessShip
 848  6687              ;;;
 849  6687              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 850  6687              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 851  6687              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 852  6687              ;;;                        ld      a,(CurrentShipUniv)
 853  6687              ;;;                        MMUSelectUniverseA
 854  6687              ;;;                        call   DrawLines
 855  6687              ;;;                        ClearCarryFlag
 856  6687              ;;;                        ret
 857  6687
 858  6687              ;----------------------------------------------------------------------------------------------------------------------------------
 859  6687 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 859  668B 61 6C 69 73
 859  668F 69 6E 67 00
 860  6693 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 860  6697 69 6E 67 53
 860  669B 70 72 69 74
 860  669F 65 73 00
 861  66A2 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 861  66A6 61 69 6C 69
 861  66AA 73 69 6E 67
 861  66AE 47 61 6C 61
 861  66B2 78 69 65 73
 861  66B6 00
 862  66B7 00           LoadCounter             DB 0
 863  66B8 2A 00        SpriteProgress          DB "*",0
 864  66BA              ;----------------------------------------------------------------------------------------------------------------------------------
 865  66BA
 866  66BA              NeedAMessageQueue:
 867  66BA
 868  66BA              ;..................................................................................................................................
 869  66BA                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 66BA              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 66BA 3A 4A 80     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 66BD 11 14 67                             ld		de,Hyp_counter
   4+ 66C0 0E 9C                                ld	c, -100
   5+ 66C2 CD CC 66                             call	.Num1
   6+ 66C5 0E F6                                ld	c,-10
   7+ 66C7 CD CC 66                             call	.Num1
   8+ 66CA 0E FF                                ld	c,-1
   9+ 66CC 06 2F        .Num1:	                ld	b,'0'-1
  10+ 66CE 04           .Num2:	                inc		b
  11+ 66CF 81                                   add		a,c
  12+ 66D0 38 FC                                jr		c,.Num2
  13+ 66D2 91                                   sub 	c
  14+ 66D3 C5                                   push	bc
  15+ 66D4 F5                                   push	af
  16+ 66D5 79                                   ld		a,c
  17+ 66D6 FE FF                                cp		-1
  18+ 66D8 78                                   ld		a,b
  19+ 66D9 12                                   ld		(de),a
  20+ 66DA 13                                   inc		de
  21+ 66DB F1                                   pop		af
  22+ 66DC C1                                   pop		bc
  23+ 66DD C9                                   ret
  24+ 66DE
  25+ 66DE              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 66DE 54 6F 3A     Hyp_message             DB "To:"
  27+ 66E1 00 00 00...  Hyp_to                  DS 32
  28+ 6701 20           Hyp_space1              DB " "
  29+ 6702 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 6705 2E           Hyp_decimal             DB "."
  31+ 6706 30           Hyp_fraction            DB "0"
  32+ 6707 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 670B 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 670F 67 69 6E 67
  33+ 6713 3A
  34+ 6714 30 30 30 00  Hyp_counter             DB "000",0
  35+ 6718 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 6738 00           Hyp_centeredEol         DB 0
  37+ 6739 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 6759 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 6779 00           Hyp_centeredEol2        DB 0
  40+ 677A 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 679A
  42+ 679A
# file closed: ./GameEngine/HyperSpaceTimers.asm
 870  679A
 871  679A
 872  679A
 873  679A              ;DisplayTargetAndRange
 874  679A              ;DisplayCountDownNumber
 875  679A              ;----------------------------------------------------------------------------------------------------------------------------------
 876  679A 3A 44 80     TestPauseMode:          ld      a,(GamePaused)
 877  679D                              IFDEF LOGDIVIDEDEBUG
 878  679D ~                                    DISPLAY "DEBUG: SKIPPING PAUSE MODE TO SAVE MEMORY FOR LOG DIVIDE DEBUG TEST"
 879  679D ~                                    ret
 880  679D                              ELSE
 881  679D
 882  679D FE 00                                cp      0
 883  679F 20 16                                jr      nz,.TestForResume
 884  67A1 3A 93 7E     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 885  67A4                                      ReturnIfAGTENusng       ScreenFront
 885  67A4 FE 09       >                        cp    ScreenFront
 885  67A6 D0          >                        ret	 nc
 886  67A7              .CheckPauseKey:         MacroIsKeyPressed c_Pressed_Freeze
 886  67A7 3E 40       >                        ld      a,c_Pressed_Freeze
 886  67A9             >                        MMUSelectKeyboard
 886  67A9 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 886  67AD CD A2 E1    >                        call    is_key_pressed
 887  67B0 C0                                   ret     nz
 888  67B1              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 888  67B1 3E FF       >                        ld      a,$FF
 889  67B3 32 44 80                             ld      (GamePaused),a
 890  67B6 C9                                   ret
 891  67B7              .TestForResume:         MacroIsKeyPressed c_Pressed_Resume                  ; In pause loop so we can check for resume key
 891  67B7 3E 42       >                        ld      a,c_Pressed_Resume
 891  67B9             >                        MMUSelectKeyboard
 891  67B9 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 891  67BD CD A2 E1    >                        call    is_key_pressed
 892  67C0 C0                                   ret     nz
 893  67C1 AF           .ResumePressed:         xor     a
 894  67C2 32 44 80                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 895  67C5 C9                                   ret
 896  67C6                              ENDIF
 897  67C6              TestQuit:               MacroIsKeyPressed c_Pressed_Quit
 897  67C6 3E 46       >                        ld      a,c_Pressed_Quit
 897  67C8             >                        MMUSelectKeyboard
 897  67C8 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 897  67CC CD A2 E1    >                        call    is_key_pressed
 898  67CF C9                                   ret
 899  67D0 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 900  67D1
 901  67D1
 902  67D1 21 20 C0     GetStationVectorToWork: ld      hl,UBnKxlo
 903  67D4 11 A8 7E                             ld      de,varVector9ByteWork
 904  67D7                              IFDEF LOGDIVIDEDEBUG
 905  67D7 ~                                    DISPLAY "DEBUG: SKIPPING GetStationVectorToWork TO SAVE MEMORY FOR LOG DIVIDE DEBUG TEST"
 906  67D7 ~                                    ret
 907  67D7                              ELSE
 908  67D7 ED A0                                ldi
 909  67D9 ED A0                                ldi
 910  67DB ED A0                                ldi
 911  67DD ED A0                                ldi
 912  67DF ED A0                                ldi
 913  67E1 ED A0                                ldi
 914  67E3 ED A0                                ldi
 915  67E5 ED A0                                ldi
 916  67E7 ED A0                                ldi
 917  67E9 2A A8 7E     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 918  67EC ED 5B AB 7E                          ld      de, (varVector9ByteWork+3); Y
 919  67F0 ED 4B AE 7E                          ld      bc, (varVector9ByteWork+6); Z
 920  67F4 7D                                   ld      a,l
 921  67F5 B3                                   or      e
 922  67F6 B1                                   or      c
 923  67F7 F6 01                                or      1
 924  67F9 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 925  67FB 7C                                   ld      a,h
 926  67FC B2                                   or      d
 927  67FD B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 928  67FE C5           .MulBy2Loop:            push    bc
 929  67FF DD 45                                ld      b,ixl
 930  6801 CB 20                                sla     b                       ; Shift ixl left
 931  6803 DD 68                                ld      ixl,b
 932  6805 C1                                   pop     bc
 933  6806 CB 17                                rl      a                       ; roll into a
 934  6808 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 935  680A                                      ShiftHLLeft1                    ; Shift Left X
 935  680A CB 25       >			   sla l
 935  680C CB 14       >			   rl  h
 936  680E                                      ShiftDELeft1                    ; Shift Left Y
 936  680E CB 23       >			   sla e
 936  6810 CB 12       >			   rl  d
 937  6812                                      ShiftBCLeft1                    ; Shift Left Z
 937  6812 CB 21       >			   sla c
 937  6814 CB 10       >			   rl  b
 938  6816 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 939  6818 3A AA 7E     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 940  681B CB 3C                                srl     h
 941  681D B4                                   or      h
 942  681E 32 A6 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 943  6821 3A AD 7E                             ld      a,(varVector9ByteWork+5); y sign
 944  6824 CB 3A                                srl     d
 945  6826 B2                                   or      d
 946  6827 32 A7 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 947  682A 3A B0 7E                             ld      a,(varVector9ByteWork+8); y sign
 948  682D CB 38                                srl     b
 949  682F B0                                   or      b
 950  6830 32 A8 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 951  6833 CD CB 99                             call    normaliseXX1596S7
 952  6836 C9                                   ret                          ; will return with a holding Vector Z
 953  6837                              ENDIF
 954  6837
 955  6837 00           TidyCounter             DB  0
 956  6838
 957  6838                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 6838
   2+ 6838
   3+ 6838 21 5B 68     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 683B 11 20 C0                             ld      de,UBnKxlo
   5+ 683E 01 09 00                             ld      bc,9
   6+ 6841 ED B0                                ldir
   7+ 6843 21 64 68                             ld      hl,DEBUGROTMATDATA
   8+ 6846 11 29 C0                             ld      de,UBnkrotmatSidevX
   9+ 6849 01 12 00                             ld      bc,6*3
  10+ 684C ED B0                                ldir
  11+ 684E C9                                   ret
  12+ 684F
  13+ 684F 21 5B 68     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 6852 11 20 C0                             ld      de,UBnKxlo
  15+ 6855 01 06 00                             ld      bc,9 - 3
  16+ 6858 ED B0                                ldir
  17+ 685A C9                                   ret
  18+ 685B
  19+ 685B              ; culltest
  20+ 685B              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 685B 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 685F 00 00 5C 07
  21+ 6863 00
  22+ 6864 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 6868 00 00
  23+ 686A 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 686E 00 00
  24+ 6870 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 6874 00 E0
  25+ 6876
  26+ 6876              ; FAILS due to sharp angle, OK now
  27+ 6876              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 6876              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 6876              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 6876              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 6876              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 6876              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 6876              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 6876              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 6876              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 6876              ; Looks OK
  37+ 6876              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 6876              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 6876              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 6876              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 6876              ;
  42+ 6876              ; Massive horizontal line
  43+ 6876              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 6876              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 6876              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 6876              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 6876              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 6876              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 6876              ; Line lost in clipping
  50+ 6876              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 6876              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 6876              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 6876              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 6876              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 6876              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 6876              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 6876              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 6876              ;
  59+ 6876              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 6876              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 6876              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 6876              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 6876              ; top left off right issue
  64+ 6876              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 6876              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 6876              ; test middle of screen
  69+ 6876              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 6876              ;
  71+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 6876              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 6876              ; test middle of screen futher away
  75+ 6876              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 6876              ;
  77+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 6876              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 6876
  81+ 6876              ; Test left center clip still warping
  82+ 6876              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 6876              ;
  84+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 6876              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 6876              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 6876              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 6876              ;
  90+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 6876              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 6876              ; Test top center clip test 1 - good test many ships fail
  94+ 6876              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 6876              ;
  96+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 6876              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 6876              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 6876              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 6876              ;
 102+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 6876              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 6876              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 6876              ; looks better now may have some clipping issues maybe ship data
 107+ 6876              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 6876              ;
 109+ 6876              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 6876              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 6876 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 687A B0 55
 112+ 687C              ; Test left top center clip
 113+ 687C
 114+ 687C              ; Test right top center clip
 115+ 687C              ; Test left bottom center clip
 116+ 687C              ; Test right bottom center clip
 117+ 687C
 118+ 687C              ; Tests with no clip
 119+ 687C              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 687C              ;
 121+ 687C              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 687C              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 687C              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 687C              ;
 125+ 687C              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 687C              ;
 127+ 687C              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 687C              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 687C
# file closed: ./debugMatrices.asm
 958  687C
 959  687C
 960  687C                          DISPLAY "TODO: Optimisation"
 961  687C              ; Need this table to handle differnet events
 962  687C              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 963  687C              ; cursor key, joystick press
 964  687C              ; cursor key, joystick press
 965  687C              ; non cursor keys presses
 966  687C              ;
 967  687C                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 687C              ; First byte is now docked flag
   2+ 687C              ;
   3+ 687C              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 687C              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 687C              ; Byte 1   - Screen Id
   6+ 687C              ; Byte 2,3 - address of keypress table
   7+ 687C              ; Byte 4   - Bank with Display code
   8+ 687C              ; Byte 5,6 - Function for display
   9+ 687C              ; Byte 7,8 - Main loop update routine
  10+ 687C              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 687C              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 687C              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 687C              ; byte 12,13  - cursor key input routine
  14+ 687C              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 687C              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 687C              ; byte 16  - block update ship
  17+ 687C              ; byte 17,18 Function for drawing system Jump (or 0)
  18+ 687C              ; later will add a routine for drawing
  19+ 687C              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16   17               18
  20+ 687C 00 00 7D E0  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00, $00,             $00
  20+ 6880 32 FC C3 00
  20+ 6884 00 00 00 00
  20+ 6888 5A C4 01 00
  20+ 688C 00 00 00
  21+ 688F 00 01 7B E0  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00, $00,             $00
  21+ 6893 33 48 C1 7C
  21+ 6897 C2 00 00 00
  21+ 689B 10 C3 01 00
  21+ 689F 00 00 00
  22+ 68A2 01 02 7F E0                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  22+ 68A6 36 43 C3 FA
  22+ 68AA C3 00 00 00
  22+ 68AE 00 00 01 00
  22+ 68B2 00 00 00
  23+ 68B5 02 03 7F E0                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  23+ 68B9 36 43 C3 00
  23+ 68BD 00 00 00 00
  23+ 68C1 00 00 01 00
  23+ 68C5 00 00 00
  24+ 68C8 00 04 81 E0  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  24+ 68CC 3F 02 D0 4B
  24+ 68D0 D0 00 00 00
  24+ 68D4 00 00 01 00
  24+ 68D8 00 00 00
  25+ 68DB 00 05 83 E0                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  25+ 68DF 34 F5 C1 00
  25+ 68E3 00 00 00 00
  25+ 68E7 00 00 01 00
  25+ 68EB 00 00 00
  26+ 68EE 00 06 91 E0                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  26+ 68F2 35 F0 C2 00
  26+ 68F6 00 00 00 00
  26+ 68FA 00 00 01 00
  26+ 68FE 00 00 00
  27+ 6901 01 07 79 E0                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  27+ 6905 40 EA D3 86
  27+ 6909 D4 00 00 00
  27+ 690D 00 00 01 00
  27+ 6911 00 00 00
  28+ 6914 01 08 73 E0                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  28+ 6918 41 79 C1 65
  28+ 691C C2 00 01 01
  28+ 6920 00 00 01 00
  28+ 6924 FF 00 00
  29+ 6927 02 09 49 E0  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  29+ 692B 3E 6A C0 D2
  29+ 692F C0 01 00 01
  29+ 6933 F6 C2 00 00
  29+ 6937 00 E2 C2
  30+ 693A 02 0A 49 E0                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  30+ 693E 3E 6A C0 00
  30+ 6942 00 01 00 01
  30+ 6946 F6 C2 00 00
  30+ 694A 00 E2 C2
  31+ 694D 02 0B 49 E0                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  31+ 6951 3E 6A C0 00
  31+ 6955 00 01 00 01
  31+ 6959 F6 C2 00 00
  31+ 695D 00 E2 C2
  32+ 6960 02 0C 49 E0                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  32+ 6964 3E 6A C0 00
  32+ 6968 00 01 00 01
  32+ 696C F6 C2 00 00
  32+ 6970 00 E2 C2
  33+ 6973 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  33+ 6977 41 F5 C1 9A
  33+ 697B C2 00 01 01
  33+ 697F 00 00 01 00
  33+ 6983 FF 00 00
  34+ 6986 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  34+ 698A 3E 9C C2 F3
  34+ 698E C2 00 01 01
  34+ 6992 00 00 01 00
  34+ 6996 FF 00 00
  35+ 6999
  36+ 6999              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 6999              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  38+ 6999              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  39+ 6999              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  40+ 6999              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  41+ 6999              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  42+ 6999              ScreenCount         EQU 15
  43+ 6999
# file closed: ./Tables/ScreenControlTable.asm
 968  6999
 969  6999 FF           ScreenTransitionForced  DB $FF
 970  699A                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 699A              ; Use bank 0 as source and bank 7 as write target
   2+ 699A              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 699A ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 699E 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 69A0 06 0C                                ld		b,12
   5+ 69A2 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 69A4                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 69A4 C6 46       >                     add    a,BankUNIVDATA0
   6+ 69A6 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 69A9 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 69AC 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 69AF 01 1C 1D                             ld		bc,UnivBankSize
  10+ 69B2 CD 4C 7D                             call	memcopy_dma
  11+ 69B5 F1 C1                                pop		bc,,af
  12+ 69B7 57                                   ld      d,a
  13+ 69B8 C6 41                                add     "A"
  14+ 69BA 32 0B C0                             ld      (StartOfUnivN),a
  15+ 69BD 7A                                   ld      a,d
  16+ 69BE 3C                                   inc		a
  17+ 69BF 10 E1                                djnz	.ResetCopyLoop
  18+ 69C1 C9                                   ret
  19+ 69C2
  20+ 69C2              ; Use bank 0 as source and bank 7 as write target
  21+ 69C2              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 69C2 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 69C6 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 69C8 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 69CA 0E 01                                ld      c,1                              ;
  25+ 69CC F5           .ResetCopyLoop:         push	af                               ;
  26+ 69CD C5                                   push	bc                               ;
  27+ 69CE                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 69CE ED 92 57    >                     nextreg GalaxyDataMMU,     a
  28+ 69D1 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 69D4 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 69D7 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 69DA CD 4C 7D                             call	memcopy_dma                      ; .
  32+ 69DD C1                                   pop		bc                               ; .
  33+ 69DE 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 69E1 79                                   ld      a,c                              ;
  35+ 69E2 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 69E4 77                                   ld      (hl),a                           ; .
  37+ 69E5 0C                                   inc     c                                ; Do next bank
  38+ 69E6 F1                                   pop     af                               ; .
  39+ 69E7 3C                                   inc		a                                ; .
  40+ 69E8 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 69EA C9                                   ret
  42+ 69EB
  43+ 69EB 06 08        SeedAllGalaxies:        ld          b,8
  44+ 69ED 0E 5B                                ld          c,BankGalaxyData0
  45+ 69EF C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 69F0 79                                   ld          a,c
  47+ 69F1                                      MMUSelectGalaxyA
  47+ 69F1 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  48+ 69F4 CD 9F FC                             call        SeedGalaxy
  49+ 69F7 C1                                   pop         bc
  50+ 69F8 0C                                   inc         c
  51+ 69F9 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 69FB C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 971  69FC
 972  69FC
 973  69FC              ;----------------------------------------------------------------------------------------------------------------------------------
 974  69FC              LaunchedFromStation:
 975  69FC                              IFDEF DEBUGPLANET
 976  69FC ~                                    DISPLAY "In planet debug, removing Launched From Station to save memory"
 977  69FC                              ELSE
 978  69FC CD 66 61                             call    InitialiseLocalUniverse
 979  69FF                                      MMUSelectSun
 979  69FF ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 980  6A03 CD 97 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 981  6A06                                      MMUSelectPlanet
 981  6A06 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 982  6A0A CD DC C5                             call    CreatePlanetLaunched
 983  6A0D CD 12 83                             call    ClearUnivSlotList                   ; slot list is clear to 0 is gauranteed next slot
 984  6A10 3E 0D                                ld      a,CoriloisStation
 985  6A12 CD 70 62                             call    SpawnShipTypeA
 986  6A15                              ENDIF
 987  6A15              ;;.SpawnSpaceStation:     call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 988  6A15              ;;                        MMUSelectUniverseN 0                        ; Prep Target universe
 989  6A15              ;;                        MMUSelectShipBank1                          ; Bank in the ship model code
 990  6A15              ;;                        ld      iyh,0                               ; Zero ship runtime data
 991  6A15              ;;                        ld      iyl,ShipTypeStation                 ; and mark as spece station
 992  6A15              ;;                        call    UnivInitRuntime                     ; its always slot 0
 993  6A15              ;;                        ld      a,CoriloisStation
 994  6A15              ;;                        call    GetShipBankId
 995  6A15              ;;                        MMUSelectShipBankA                          ; Select the correct bank found
 996  6A15              ;;                        ld      a,b                                 ; Select the correct ship
 997  6A15              ;;                        call    CopyShipToUniverse
 998  6A15 CD 11 C8     .BuiltStation:          call    ResetStationLaunch
 999  6A18                                      IFDEF DEBUGMISSILETEST
1000  6A18 ~            ;                            ld      a,0
1001  6A18 ~            ;                            ld      (UBnKRotXCounter),a             ; kill station roll
1002  6A18 ~
1003  6A18 ~            .TestMissileTarget:         ld      a,ShipID_Viper
1004  6A18 ~                                        call    SpawnShipTypeA                      ; call rather than jump, returns with a = slot number
1005  6A18 ~                                        ZeroA
1006  6A18 ~                                        ld      (UBnKSpeed),a
1007  6A18 ~                                        ld      a,$80
1008  6A18 ~                                        ld      (UBnKxsgn),a
1009  6A18 ~                                        ;ld      a,$80
1010  6A18 ~                                        ZeroA
1011  6A18 ~                                        ld      (UBnKysgn),a
1012  6A18 ~                                        ld      a,$80
1013  6A18 ~                                       ZeroA
1014  6A18 ~                                        ld      (UBnKzsgn),a
1015  6A18 ~                                        ld      a,$60
1016  6A18 ~                                        ZeroA
1017  6A18 ~                                        ld      (UBnKxlo),a
1018  6A18 ~                                        ld      a,$10
1019  6A18 ~                                        ;ZeroA
1020  6A18 ~                                        ld      (UBnKxhi),a
1021  6A18 ~                                        ld      a,$60
1022  6A18 ~                                        ;ZeroA
1023  6A18 ~                                        ld      (UBnKylo),a
1024  6A18 ~                                        ld      a,$1B
1025  6A18 ~                                        ;ZeroA
1026  6A18 ~                                        ld      (UBnKyhi),a
1027  6A18 ~                                        ZeroA
1028  6A18 ~                                        ld      (UBnKzlo),a
1029  6A18 ~                                        ld      a,$2B
1030  6A18 ~                                        ld      (UBnKzhi),a
1031  6A18                                      ENDIF
1032  6A18 3E 00        .NowInFlight:           ld      a,StateNormal
1033  6A1A 32 43 80                             ld      (DockedFlag),a
1034  6A1D                                      ForceTransition ScreenFront
1034  6A1D 3E 09       >                        ld      a,ScreenFront
1034  6A1F 32 99 69    >                        ld      (ScreenTransitionForced), a
1035  6A22 3E FF                                ld      a,$FF
1036  6A24 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
1037  6A27 CD AA 81                             call    ResetPlayerShip
1038  6A2A                                      IFDEF DEBUGMISSILETEST
1039  6A2A ~                                        ld  a,1
1040  6A2A ~                                        LockMissileToA
1041  6A2A                                      ENDIF
1042  6A2A C9                                   ret
1043  6A2B
1044  6A2B 3A C9 68     InitialiseCommander:    ld      a,(ScreenCmdr+1)
1045  6A2E C3 3A 6A                             jp      SetScreenA
1046  6A31
1047  6A31 3A 28 69     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
1048  6A34 C3 3A 6A                             jp      SetScreenA
1049  6A37              ; false ret here as we get it free from jp
1050  6A37              ;----------------------------------------------------------------------------------------------------------------------------------
1051  6A37                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6A37              ; SetScreenA.asm
   2+ 6A37              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6A37 C3 37 6A     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6A3A              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6A3A FE 0F       >                        cp     ScreenCount
   4+ 6A3C D2 37 6A    >                        jp		nc,InvalidScreenBlock
   5+ 6A3F 32 93 7E     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6A42 57           .SetUpIX:               ld      d,a
   7+ 6A43 1E 13                                ld      e,ScreenMapRow
   8+ 6A45 ED 30                                mul
   9+ 6A47 DD 21 7C 68                          ld      ix,ScreenKeyMap
  10+ 6A4B DD 19                                add     ix,de
  11+ 6A4D DD 22 94 7E                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6A51                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6A51 3E FF       >                        ld      a,$FF
  12+ 6A53 32 99 69    >                        ld      (ScreenTransitionForced),a
  13+ 6A56 32 92 7E                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6A59 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6A5C 32 43 60                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6A5F                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6A5F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6A60 CA 6F 6A    >                        jp	    z, .NotViewPort
  17+ 6A63 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6A66 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6A68                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6A68 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6A6C CD 0E E3                             call    LoadLaserToCurrent              ;
  21+ 6A6F DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6A72 32 CA 60                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6A75 32 86 5F                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6A78 32 CE 61                             ld      (WarpMMUBank+1),a               ; WarpSFXHandler
  25+ 6A7B                                      MMUSelectScreenA
  25+ 6A7B ED 92 56    >                     nextreg ScreenBankMMU,		a
  26+ 6A7E DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  27+ 6A81 32 C1 6A                             ld      (ScreenUpdateAddr+1),a          ; .
  28+ 6A84 DD 7E 06                             ld      a,(ix+6)                        ; .
  29+ 6A87 32 C2 6A                             ld      (ScreenUpdateAddr+2),a          ; .
  30+ 6A8A DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  31+ 6A8D 32 CF 60                             ld      (ScreenLoopJP+1),a              ; .
  32+ 6A90 DD 7E 08                             ld      a,(ix+8)                        ; .
  33+ 6A93 32 D0 60                             ld      (ScreenLoopJP+2),a              ; .
  34+ 6A96 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  35+ 6A99 32 5C 5F                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  36+ 6A9C DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  37+ 6A9F 32 B3 62                             ld      (DoubleBufferCheck+1),a
  38+ 6AA2 DD 7E 0C                             ld      a,(ix+12)
  39+ 6AA5 32 8B 5F                             ld      (CallCursorRoutine+1),a
  40+ 6AA8 DD 7E 0D                             ld      a,(ix+13)
  41+ 6AAB 32 8C 5F                             ld      (CallCursorRoutine+2),a
  42+ 6AAE DD 7E 10                             ld      a,(ix+16)
  43+ 6AB1 32 35 60                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  44+ 6AB4 DD 7E 11                             ld      a,(ix+17)
  45+ 6AB7 32 D3 61                             ld      (WarpRoutineAddr+1),a
  46+ 6ABA DD 7E 12                             ld      a,(ix+18)
  47+ 6ABD 32 D4 61                             ld      (WarpRoutineAddr+2),a
  48+ 6AC0 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  49+ 6AC3
# file closed: ./GameEngine/SetScreenA.asm
1052  6AC3                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6AC3 3A 93 7E     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6AC6 4F                                   ld      c,a
   3+ 6AC7 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6AC9 DD 21 7C 68                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6ACD 2A 49 80                             ld      hl,(InnerHyperCount)
   6+ 6AD0 7C                                   ld      a,h
   7+ 6AD1 B5                                   or      l
   8+ 6AD2 FD 67                                ld      iyh,a
   9+ 6AD4 FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6AD6 A7           .HyperspaceCountdown:   and     a
  11+ 6AD7 28 08                                jr      z,.CheckDockedFlag
  12+ 6AD9 DD 7E 0E                             ld      a,(ix+14)
  13+ 6ADC FE 01                                cp      1
  14+ 6ADE CA 27 6B                             jp      z,NotReadNextKey
  15+ 6AE1 DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6AE4              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6AE4                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6AE4 FE 03       >                        cp     3
  17+ 6AE6 CA 27 6B    >                        jp      z,NotReadNextKey
  18+ 6AE9                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6AE9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6AEA CA 04 6B    >                        jp	    z, .CanReadKey
  19+ 6AED 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6AEE                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6AEE 3A 43 80    >                        ld  a,(DockedFlag)
  20+ 6AF1 FE 00       >                        cp  StateNormal
  20+ 6AF3 CA FE 6A    >                        jp  z,.NotDockedCheck
  21+ 6AF6 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6AF7                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6AF7 FE 01       >                        cp     1
  22+ 6AF9 C2 27 6B    >                        jp      nz,NotReadNextKey
  23+ 6AFC 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6AFE 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6AFF                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6AFF FE 02       >                        cp     2
  25+ 6B01 C2 27 6B    >                        jp      nz,NotReadNextKey
  26+ 6B04 DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6B07 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6B08 5F                                   ld      e,a
  29+ 6B09 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6B0B DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6B0E FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6B10 28 15                                jr      z,NotReadNextKey
  33+ 6B12 32 1D 6B                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6B15 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6B18 32 1C 6B                             ld      (ReadKeyAddr+1),a
  36+ 6B1B 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6B1E 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6B1F                                      JumpIfAIsZero NotReadNextKey
  38+ 6B1F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6B20 CA 27 6B    >                        jp	    z, NotReadNextKey
  39+ 6B23 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6B24 C3 3A 6A                             jp      SetScreenA
  41+ 6B27              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6B27 11 13 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6B2A DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6B2C 10 A6                                djnz    ViewScanLoop
  45+ 6B2E C9                                   ret
  46+ 6B2F
# file closed: ./GameEngine/ViewKeyTest.asm
1053  6B2F              ;----------------------------------------------------------------------------------------------------------------------------------
1054  6B2F 21 00 00     SetInitialShipPosition: ld      hl,$0000
1055  6B32 22 20 C0                             ld      (UBnKxlo),hl
1056  6B35 21 00 00                             ld      hl,$0000
1057  6B38 22 23 C0                             ld      (UBnKylo),hl
1058  6B3B 21 B4 03                             ld      hl,$03B4
1059  6B3E 22 26 C0                             ld      (UBnKzlo),hl
1060  6B41 AF                                   xor     a
1061  6B42 32 22 C0                             ld      (UBnKxsgn),a
1062  6B45 32 25 C0                             ld      (UBnKysgn),a
1063  6B48 32 28 C0                             ld      (UBnKzsgn),a
1064  6B4B                          DISPLAY "TODO:  call    Reset TODO"
1065  6B4B CD C6 C8                             call	InitialiseOrientation            ;#00;
1066  6B4E 3E 01                                ld      a,1
1067  6B50 32 84 7E                             ld      (DELTA),a
1068  6B53 21 04 00                             ld      hl,4
1069  6B56 22 85 7E                             ld      (DELTA4),hl
1070  6B59 C9                                   ret
1071  6B5A
1072  6B5A              ; Checks to see if current ship swapped in is in our sights
1073  6B5A              ; we don;t need to deal with planets or sun as they have their own memory bank
1074  6B5A              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
1074  6B5A B7          >                        or a
1075  6B5B                                      ReturnIfMemIsNegative UBnKzsgn
1075  6B5B 3A 28 C0    >                        ld      a,(UBnKzsgn)
1075  6B5E E6 80       >                        and     $80
1075  6B60 C0          >                        ret     nz
1076  6B61 3A 51 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
1077  6B64 2A 20 C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
1078  6B67 ED 4B 23 C0                          ld      bc,(UBnKylo)                    ; .
1079  6B6B B4                                   or      h
1080  6B6C B0                                   or      b
1081  6B6D C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
1082  6B6E 7D                                   ld      a,l                             ; hl =xlo ^ 2
1083  6B6F                                      DEEquSquareA                            ; .
1083  6B6F 57          >                        ld  d,a
1083  6B70 5F          >                        ld  e,a
1083  6B71 ED 30       >                        mul de
1084  6B73 62 6B                                ld      hl,de                           ; .
1085  6B75 79                                   ld      a,c                             ; de = de = ylo ^ 2
1086  6B76                                      DEEquSquareA                            ; .
1086  6B76 57          >                        ld  d,a
1086  6B77 5F          >                        ld  e,a
1086  6B78 ED 30       >                        mul de
1087  6B7A 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
1088  6B7B D8                                   ret     c                               ; if there was a carry then out of line of sight
1089  6B7C ED 5B F7 C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
1090  6B80                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
1090  6B80 E5          >                        push    hl
1090  6B81 A7          >                        and     a
1090  6B82 ED 52       >                        sbc     hl,de
1090  6B84 E1          >                        pop     hl
1091  6B85 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
1092  6B87 C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
1093  6B88              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
1093  6B88 37          >                        scf
1094  6B89 C9                                   ret
1095  6B8A
1096  6B8A
1097  6B8A                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6B8A              ; bc = start position, d = length, e = colour
   2+ 6B8A              ;                        DEFINE MISSILEDIAGNOSTICS 1
   3+ 6B8A 1E 10        Draw3LineBar:           ld      e,16
   4+ 6B8C C5 D5                                push    bc,,de
   5+ 6B8E                                      MMUSelectLayer2
   5+ 6B8E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   6+ 6B92 CD 84 E4                             call    l2_draw_horz_line
   7+ 6B95 D1 C1                                pop     bc,,de
   8+ 6B97 05                                   dec     b
   9+ 6B98 C5 D5                                push    bc,,de
  10+ 6B9A 1E 14                                ld      e,20
  11+ 6B9C                                      MMUSelectLayer2
  11+ 6B9C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  12+ 6BA0 CD 84 E4                             call    l2_draw_horz_line
  13+ 6BA3 D1 C1                                pop     bc,,de
  14+ 6BA5 05                                   dec     b
  15+ 6BA6                                      MMUSelectLayer2
  15+ 6BA6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ 6BAA CD 84 E4                             call    l2_draw_horz_line
  17+ 6BAD C9                                   ret
  18+ 6BAE
  19+ 6BAE 1E 7C        DrawColourCodedBar:     ld      e,124
  20+ 6BB0 FE 28                                cp      40
  21+ 6BB2 30 18                                jr      nc,DrawColourEBar
  22+ 6BB4 1E 54                                ld      e,84
  23+ 6BB6 FE 1E                                cp      30
  24+ 6BB8 30 12                                jr      nc,DrawColourEBar
  25+ 6BBA 1E D8                                ld      e,216
  26+ 6BBC FE 14                                cp      20
  27+ 6BBE 1E EC                                ld      e,236
  28+ 6BC0 FE 0A                                cp      10
  29+ 6BC2 30 08                                jr      nc,DrawColourEBar
  30+ 6BC4 1E E1                                ld      e,225
  31+ 6BC6 FE 05                                cp      5
  32+ 6BC8 30 02                                jr      nc,DrawColourEBar
  33+ 6BCA 1E E0                                ld      e,224
  34+ 6BCC C5 D5        DrawColourEBar:         push    bc,,de
  35+ 6BCE                                      MMUSelectLayer2
  35+ 6BCE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 6BD2 CD 84 E4                             call    l2_draw_horz_line
  37+ 6BD5 D1 C1                                pop     bc,,de
  38+ 6BD7 05                                   dec     b
  39+ 6BD8 C5 D5                                push    bc,,de
  40+ 6BDA                                      MMUSelectLayer2
  40+ 6BDA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  41+ 6BDE CD 84 E4                             call    l2_draw_horz_line
  42+ 6BE1 D1 C1                                pop     bc,,de
  43+ 6BE3 05                                   dec     b
  44+ 6BE4                                      MMUSelectLayer2
  44+ 6BE4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  45+ 6BE8 CD 84 E4                             call    l2_draw_horz_line
  46+ 6BEB C9                                   ret
  47+ 6BEC
  48+ 6BEC                                      ; no ret needed as jp handles it
  49+ 6BEC
  50+ 6BEC 16 50        MissileDiagPositive:    ld      d,"P"
  51+ 6BEE CD 13 E3                             call    l2_print_chr_at
  52+ 6BF1 C9                                   ret
  53+ 6BF2
  54+ 6BF2 16 4E        MissileDiagNegative:    ld      d,"N"
  55+ 6BF4 CD 13 E3                             call    l2_print_chr_at
  56+ 6BF7 C9                                   ret
  57+ 6BF8
  58+ 6BF8 16 5A        MissileDiagZero:        ld      d,"Z"
  59+ 6BFA CD 13 E3                             call    l2_print_chr_at
  60+ 6BFD C9                                   ret
  61+ 6BFE
  62+ 6BFE 1E FF        MissileValue:           ld      e,$FF
  63+ 6C00 FE 00                                cp      0
  64+ 6C02 F5                                   push    af
  65+ 6C03 CC F8 6B                             call    z,MissileDiagZero
  66+ 6C06 F1                                   pop     af
  67+ 6C07 C8                                   ret     z
  68+ 6C08 CB 7F                                bit     7,a
  69+ 6C0A F5                                   push    af
  70+ 6C0B CC F2 6B                             call    z,MissileDiagNegative
  71+ 6C0E F1                                   pop     af
  72+ 6C0F C8                                   ret     z
  73+ 6C10 C4 EC 6B                             call    nz,MissileDiagPositive
  74+ 6C13 C9                                   ret
  75+ 6C14
  76+ 6C14 30 31 32 33  Hex2Char:       DB "0123456789ABCDEF"
  76+ 6C18 34 35 36 37
  76+ 6C1C 38 39 41 42
  76+ 6C20 43 44 45 46
  77+ 6C24
  78+ 6C24 F5 E5 C5 D5  MissileHexDigit:        push    af,,hl,,bc,,de
  79+ 6C28 E6 0F                                and     $0F
  80+ 6C2A 21 14 6C                             ld      hl, Hex2Char
  81+ 6C2D ED 31                                add     hl,a
  82+ 6C2F 56                                   ld      d,(hl)
  83+ 6C30 CD 13 E3                             call    l2_print_chr_at
  84+ 6C33 D1 C1 E1 F1                          pop     af,,hl,,bc,,de
  85+ 6C37 C9                                   ret
  86+ 6C38
  87+ 6C38 ED 23        MissileHexToChar:       swapnib
  88+ 6C3A E6 0F                                and     $0F
  89+ 6C3C 1E FF                                ld      e,$FF
  90+ 6C3E                                      JumpIfALTNusng 8,.SkipNeg
  90+ 6C3E FE 08       >                        cp      8
  90+ 6C40 DA 47 6C    >                        jp		c, .SkipNeg
  91+ 6C43 1E 68                                ld      e,$68
  92+ 6C45 D6 08                                sub     8
  93+ 6C47 CD 24 6C     .SkipNeg:               call    MissileHexDigit
  94+ 6C4A ED 23                                swapnib
  95+ 6C4C F5                                   push    af
  96+ 6C4D 79                                   ld      a,c
  97+ 6C4E C6 08                                add     8
  98+ 6C50 4F                                   ld      c,a
  99+ 6C51 F1                                   pop     af
 100+ 6C52 E6 0F                                and     $0F
 101+ 6C54 CD 24 6C                             call    MissileHexDigit
 102+ 6C57 C9                                   ret
 103+ 6C58
 104+ 6C58 1E FF        MissileValue2Byte:      ld      e,$FF
 105+ 6C5A 7E                                   ld      a,(hl)
 106+ 6C5B 23                                   inc     hl
 107+ 6C5C B6                                   or      (hl)
 108+ 6C5D FE 00                                cp      0
 109+ 6C5F F5                                   push    af
 110+ 6C60 CC F8 6B                             call    z,MissileDiagZero
 111+ 6C63 F1                                   pop     af
 112+ 6C64 C8                                   ret     z
 113+ 6C65 7E                                   ld      a,(hl)
 114+ 6C66 CB 7F                                bit     7,a
 115+ 6C68 F5                                   push    af
 116+ 6C69 CC F2 6B                             call    z,MissileDiagNegative
 117+ 6C6C F1                                   pop     af
 118+ 6C6D C8                                   ret     z
 119+ 6C6E C4 EC 6B                             call    nz,MissileDiagPositive
 120+ 6C71 C9                                   ret
 121+ 6C72
 122+ 6C72 16 78        MissileDiagPrintBoiler: ld      d,"x"
 123+ 6C74 1E 30                                ld      e, $30
 124+ 6C76 01 88 80                             ld      bc,$8088
 125+ 6C79 CD 13 E3                             call    l2_print_chr_at
 126+ 6C7C 01 88 88                             ld      bc,$8888
 127+ 6C7F 16 7A                                ld      d,"z"
 128+ 6C81 1E 30                                ld      e, $30
 129+ 6C83 CD 13 E3                             call    l2_print_chr_at
 130+ 6C86 01 88 90                             ld      bc,$9088
 131+ 6C89 16 73                                ld      d,"s"
 132+ 6C8B 1E 30                                ld      e, $30
 133+ 6C8D CD 13 E3                             call    l2_print_chr_at
 134+ 6C90 01 48 90                             ld      bc,$9048
 135+ 6C93 16 6E                                ld      d,"n"
 136+ 6C95 1E 30                                ld      e, $30
 137+ 6C97 CD 13 E3                             call    l2_print_chr_at
 138+ 6C9A 01 48 80                             ld      bc,$8048
 139+ 6C9D 16 73                                ld      d,"s"
 140+ 6C9F 1E 30                                ld      e, $30
 141+ 6CA1 CD 13 E3                             call    l2_print_chr_at
 142+ 6CA4 01 48 88                             ld      bc,$8848
 143+ 6CA7 16 72                                ld      d,"r"
 144+ 6CA9 1E 30                                ld      e, $30
 145+ 6CAB CD 13 E3                             call    l2_print_chr_at
 146+ 6CAE C9                                   ret
 147+ 6CAF
 148+ 6CAF              MissileDiagnotics:      MMUSelectLayer2
 148+ 6CAF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 149+ 6CB3 CD 72 6C                             call    MissileDiagPrintBoiler
 150+ 6CB6 1E FF                                ld      e,$FF
 151+ 6CB8 01 90 80                             ld      bc,$8090
 152+ 6CBB 3A 2A A4                             ld      a,(TacticsRotX)
 153+ 6CBE CD 38 6C                             call    MissileHexToChar; MissileValue
 154+ 6CC1 01 90 88                             ld      bc,$8890
 155+ 6CC4 3A 2C A4                             ld      a,(TacticsRotZ)
 156+ 6CC7 CD 38 6C                             call    MissileHexToChar; MissileValue
 157+ 6CCA 01 90 90                             ld      bc,$9090
 158+ 6CCD 3A 2E A4                             ld      a,(TacticsSpeed)
 159+ 6CD0 CD 38 6C                             call    MissileHexToChar; MissileValue
 160+ 6CD3 01 50 80     .VectorSideX:           ld      bc,$8050
 161+ 6CD6 3A FA A3                             ld      a,(TacticsSideX+1)
 162+ 6CD9 CD 38 6C                             call    MissileHexToChar;issileValue2Byte
 163+ 6CDC 01 62 80                             ld      bc,$8062
 164+ 6CDF 3A FE A3                             ld      a,(TacticsSideY+1)
 165+ 6CE2 CD 38 6C                             call    MissileHexToChar
 166+ 6CE5 01 74 80                             ld      bc,$8074
 167+ 6CE8 3A 02 A4                             ld      a,(TacticsSideZ+1)
 168+ 6CEB CD 38 6C                             call    MissileHexToChar
 169+ 6CEE 01 50 88     .VectorRoofX:           ld      bc,$8850
 170+ 6CF1 3A 0A A4                             ld      a,(TacticsRoofX+1)
 171+ 6CF4 CD 38 6C                             call    MissileHexToChar
 172+ 6CF7 01 62 88                             ld      bc,$8862
 173+ 6CFA 3A 0E A4                             ld      a,(TacticsRoofY+1)
 174+ 6CFD CD 38 6C                             call    MissileHexToChar
 175+ 6D00 01 74 88                             ld      bc,$8874
 176+ 6D03 3A 12 A4                             ld      a,(TacticsRoofZ+1)
 177+ 6D06 CD 38 6C                             call    MissileHexToChar
 178+ 6D09 01 50 90     .VectorNoseX:           ld      bc,$9050
 179+ 6D0C 3A 1A A4                             ld      a,(TacticsNoseX+1)
 180+ 6D0F CD 38 6C                             call    MissileHexToChar
 181+ 6D12 01 62 90                             ld      bc,$9062
 182+ 6D15 3A 1E A4                             ld      a,(TacticsNoseY+1)
 183+ 6D18 CD 38 6C                             call    MissileHexToChar
 184+ 6D1B 01 74 90                             ld      bc,$9074
 185+ 6D1E 3A 12 A4                             ld      a,(TacticsRoofZ+1)
 186+ 6D21 CD 38 6C                             call    MissileHexToChar
 187+ 6D24 C9                                   ret
 188+ 6D25
 189+ 6D25              UpdateConsole:          IFDEF   MISSILEDIAGNOSTICS
 190+ 6D25 ~                                            call    MissileDiagnotics
 191+ 6D25                                      ENDIF
 192+ 6D25 3A 84 7E                             ld      a,(DELTA)
 193+ 6D28 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 194+ 6D2A 28 0C                                jr      z,.UpdateRoll
 195+ 6D2C 01 D1 84                             ld      bc,SpeedoStart
 196+ 6D2F 21 57 81                             ld      hl,SpeedoMapping
 197+ 6D32 ED 31                                add     hl,a
 198+ 6D34 56                                   ld      d,(hl)
 199+ 6D35 CD 8A 6B                             call    Draw3LineBar
 200+ 6D38 3A A4 7D     .UpdateRoll:            ld      a,(ALP1)
 201+ 6D3B FE 00                                cp      0
 202+ 6D3D CA 71 6D                             jp      z,.UpdatePitch
 203+ 6D40 21 E0 8C                             ld      hl,RollMiddle
 204+ 6D43 3A A5 7D                             ld      a,(ALP2)
 205+ 6D46 FE 00                                cp      0
 206+ 6D48 CA 63 6D                             jp     z,.PosRoll
 207+ 6D4B 16 00        .NegRoll:               ld      d,0
 208+ 6D4D 3A A4 7D                             ld      a,(ALP1)
 209+ 6D50 CB 27                                sla     a
 210+ 6D52 5F                                   ld      e,a
 211+ 6D53 B7                                   or      a
 212+ 6D54 ED 52                                sbc     hl,de
 213+ 6D56 44 4D                                ld      bc,hl
 214+ 6D58 3E E1                                ld      a,DialMiddleXPos
 215+ 6D5A 91                                   sub     c
 216+ 6D5B 57                                   ld      d,a
 217+ 6D5C 1E FF                                ld      e,$FF
 218+ 6D5E CD 8A 6B                             call    Draw3LineBar
 219+ 6D61 18 0E                                jr      .UpdatePitch
 220+ 6D63 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 221+ 6D66 3A A4 7D                             ld      a,(ALP1)
 222+ 6D69 CB 27                                sla     a
 223+ 6D6B 57                                   ld      d,a
 224+ 6D6C 1E FF                                ld      e,$FF
 225+ 6D6E CD 8A 6B                             call    Draw3LineBar
 226+ 6D71 3A 98 7D     .UpdatePitch:           ld      a,(BET1)
 227+ 6D74 FE 00                                cp      0
 228+ 6D76 CA AB 6D                             jp      z,.Fuel
 229+ 6D79 21 E0 94                             ld      hl,PitchMiddle
 230+ 6D7C 3A 99 7D                             ld      a,(BET2)
 231+ 6D7F FE 00                                cp      0
 232+ 6D81 CA 9D 6D                             jp      z,.PosPitch
 233+ 6D84 16 00        .NegPitch:              ld      d,0
 234+ 6D86 3A 98 7D                             ld      a,(BET1)
 235+ 6D89 CB 27                                sla     a
 236+ 6D8B 5F                                   ld      e,a
 237+ 6D8C B7                                   or      a
 238+ 6D8D ED 52                                sbc     hl,de
 239+ 6D8F 44 4D                                ld      bc,hl
 240+ 6D91 3E E1                                ld      a,DialMiddleXPos
 241+ 6D93 91                                   sub     c
 242+ 6D94 57                                   ld      d,a
 243+ 6D95 1E FF                                ld      e,$FF
 244+ 6D97 CD 8A 6B                             call    Draw3LineBar
 245+ 6D9A C3 AB 6D                             jp      .Fuel
 246+ 6D9D 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 247+ 6DA0 3A 98 7D                             ld      a,(BET1)
 248+ 6DA3 CB 27                                sla     a
 249+ 6DA5 57                                   ld      d,a
 250+ 6DA6 1E FF                                ld      e,$FF
 251+ 6DA8 CD 8A 6B                             call    Draw3LineBar
 252+ 6DAB 3A E5 83     .Fuel:                  ld      a,(Fuel)
 253+ 6DAE CB 3F                                srl     a               ; divide by 4 to get range on screen
 254+ 6DB0 21 32 81                             ld      hl,FuelMapping
 255+ 6DB3 ED 31                                add     hl,a
 256+ 6DB5 7E                                   ld      a,(hl)
 257+ 6DB6 01 10 94                             ld      bc,FuelStart
 258+ 6DB9 57                                   ld      d,a
 259+ 6DBA CD AE 6B                             call    DrawColourCodedBar
 260+ 6DBD 3A 02 81     .FrontShield:           ld      a,(ForeShield)
 261+ 6DC0 CB 3F                                srl     a
 262+ 6DC2 CB 3F                                srl     a
 263+ 6DC4 CB 3F                                srl     a
 264+ 6DC6 01 10 84                             ld      bc,FShieldStart
 265+ 6DC9 57                                   ld      d,a
 266+ 6DCA CD AE 6B                             call    DrawColourCodedBar
 267+ 6DCD 3A 03 81     .AftShield:             ld      a,(AftShield)
 268+ 6DD0 CB 3F                                srl     a
 269+ 6DD2 CB 3F                                srl     a
 270+ 6DD4 CB 3F                                srl     a
 271+ 6DD6 01 10 8D                             ld      bc,AShieldStart
 272+ 6DD9 57                                   ld      d,a
 273+ 6DDA CD AE 6B                             call    DrawColourCodedBar
 274+ 6DDD              .SpriteDraw:            MMUSelectSpriteBank
 274+ 6DDD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 275+ 6DE1 3A 9F 7D     .DrawECM:               ld      a,(ECMCountDown)
 276+ 6DE4                                      JumpIfAIsZero   .HideECM
 276+ 6DE4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 276+ 6DE5 CA EE 6D    >                        jp	    z, .HideECM
 277+ 6DE8 CD CF E1     .ShowECM:               call    show_ecm_sprite
 278+ 6DEB C3 F1 6D                             jp      .ProcessedECM
 279+ 6DEE CD 18 E4     .HideECM:               call    sprite_ecm_hide
 280+ 6DF1              .ProcessedECM:
 281+ 6DF1 3A 39 7F     .DrawMissiles:          ld      a,(NbrMissiles)
 282+ 6DF4 FD 6F                                ld      iyl,a
 283+ 6DF6                                      JumpIfAIsZero   .HideAllMissiles                    ; First off do we have any missiles
 283+ 6DF6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 283+ 6DF7 CA 35 6E    >                        jp	    z, .HideAllMissiles
 284+ 6DFA 3A 07 81     .DrawMissile_1:         ld      a,(MissileTargettingFlag)                   ; have we the targetting flag
 285+ 6DFD                                      JumpIfAEqNusng  StageMissileNotTargeting,.MissileReady
 285+ 6DFD FE FF       >                        cp     StageMissileNotTargeting
 285+ 6DFF CA 0D 6E    >                        jp      z,.MissileReady
 286+ 6E02                                      JumpIfAEqNusng  StageMissileTargeting,   .MissileArmed
 286+ 6E02 FE FE       >                        cp     StageMissileTargeting
 286+ 6E04 CA 13 6E    >                        jp      z,.MissileArmed
 287+ 6E07 CD 11 E2     .Missile1Locked:        call    show_missile_1_locked
 288+ 6E0A C3 16 6E                             jp      .DrawMissile_2
 289+ 6E0D CD DA E1     .MissileReady:          call    show_missile_1_ready
 290+ 6E10 C3 16 6E                             jp      .DrawMissile_2
 291+ 6E13 CD 06 E2     .MissileArmed:          call    show_missile_1_armed
 292+ 6E16 FD 7D        .DrawMissile_2:         ld      a,iyl
 293+ 6E18                                      JumpIfALTNusng 2, .Only1Missile
 293+ 6E18 FE 02       >                        cp      2
 293+ 6E1A DA 38 6E    >                        jp		c, .Only1Missile
 294+ 6E1D CD E5 E1                             call    show_missile_2_ready
 295+ 6E20 FD 7D        .DrawMissile_3:         ld      a,iyl
 296+ 6E22                                      JumpIfALTNusng 3, .Only2Missiles
 296+ 6E22 FE 03       >                        cp      3
 296+ 6E24 DA 3B 6E    >                        jp		c, .Only2Missiles
 297+ 6E27 CD F0 E1                             call    show_missile_3_ready
 298+ 6E2A FD 7D        .DrawMissile_4:         ld      a,iyl
 299+ 6E2C                                      JumpIfALTNusng 4, .Only2Missiles
 299+ 6E2C FE 04       >                        cp      4
 299+ 6E2E DA 3B 6E    >                        jp		c, .Only2Missiles
 300+ 6E31 CD FB E1                             call    show_missile_4_ready
 301+ 6E34 C9                                   ret
 302+ 6E35 CD 21 E4     .HideAllMissiles:       call    sprite_missile_1_hide
 303+ 6E38 CD 2A E4     .Only1Missile:          call    sprite_missile_2_hide
 304+ 6E3B CD 33 E4     .Only2Missiles:         call    sprite_missile_3_hide
 305+ 6E3E CD 3C E4     .Only3Missiles:         call    sprite_missile_4_hide
 306+ 6E41              ;PlayerEnergy
 307+ 6E41              ; BNEED LASER temp
 308+ 6E41              ; NEED CABIN TEMP
 309+ 6E41              ;NEED ALTITUDE
 310+ 6E41              ; Draw compas - if in range draw station, else do planet
 311+ 6E41 3A 04 81     .EnergyBars:            ld      a,(PlayerEnergy)
 312+ 6E44 CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 313+ 6E46                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 313+ 6E46 FE 20       >                        cp      31 + 1
 313+ 6E48 DA 58 6E    >                        jp		c, Draw1EnergyBar
 314+ 6E4B                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 314+ 6E4B FE 3F       >                        cp      (31*2) + 1
 314+ 6E4D DA 62 6E    >                        jp		c, Draw2EnergyBars
 315+ 6E50                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 315+ 6E50 FE 5E       >                        cp      (31*3) + 1
 315+ 6E52 DA 78 6E    >                        jp		c, Draw3EnergyBars
 316+ 6E55 C3 9A 6E                             jp      Draw4EnergyBars
 317+ 6E58
 318+ 6E58 1E E0        Draw1EnergyBar:         ld      e,224
 319+ 6E5A 57                                   ld      d,a
 320+ 6E5B 01 D5 BD                             ld      bc,EnergyBar1Start
 321+ 6E5E CD CC 6B                             call    DrawColourEBar
 322+ 6E61 C9                                   ret
 323+ 6E62 1E D8        Draw2EnergyBars:        ld      e,216
 324+ 6E64 D6 1F                                sub     31
 325+ 6E66 57                                   ld      d,a
 326+ 6E67 01 D5 B5                             ld      bc,EnergyBar2Start
 327+ 6E6A CD CC 6B                             call    DrawColourEBar
 328+ 6E6D 16 1F                                ld      d,31
 329+ 6E6F 1E D8                                ld      e,216
 330+ 6E71 01 D5 BD                             ld      bc,EnergyBar1Start
 331+ 6E74 CD CC 6B                             call    DrawColourEBar
 332+ 6E77 C9                                   ret
 333+ 6E78 1E 14        Draw3EnergyBars:        ld      e,20
 334+ 6E7A D6 3E                                sub     31*2
 335+ 6E7C 57                                   ld      d,a
 336+ 6E7D 1E 14                                ld      e,20
 337+ 6E7F 01 D5 AD                             ld      bc,EnergyBar3Start
 338+ 6E82 CD CC 6B                             call    DrawColourEBar
 339+ 6E85 16 1F                                ld      d,31
 340+ 6E87 1E 14                                ld      e,20
 341+ 6E89 01 D5 B5                             ld      bc,EnergyBar2Start
 342+ 6E8C CD CC 6B                             call    DrawColourEBar
 343+ 6E8F 16 1F                                ld      d,31
 344+ 6E91 1E 14                                ld      e,20
 345+ 6E93 01 D5 BD                             ld      bc,EnergyBar1Start
 346+ 6E96 CD CC 6B                             call    DrawColourEBar
 347+ 6E99 C9                                   ret
 348+ 6E9A 1E 18        Draw4EnergyBars:        ld      e,24
 349+ 6E9C D6 5D                                sub     31*3
 350+ 6E9E                                      JumpIfALTNusng 31,.NoMax
 350+ 6E9E FE 1F       >                        cp      31
 350+ 6EA0 DA A5 6E    >                        jp		c, .NoMax
 351+ 6EA3 3E 1F        .Max                    ld      a,31
 352+ 6EA5 57           .NoMax:                 ld      d,a
 353+ 6EA6 01 D5 A5                             ld      bc,EnergyBar4Start
 354+ 6EA9 CD CC 6B                             call    DrawColourEBar
 355+ 6EAC 16 1F                                ld      d,31
 356+ 6EAE 1E 18                                ld      e,24
 357+ 6EB0 01 D5 AD                             ld      bc,EnergyBar3Start
 358+ 6EB3 CD CC 6B                             call    DrawColourEBar
 359+ 6EB6 16 1F                                ld      d,31
 360+ 6EB8 1E 18                                ld      e,24
 361+ 6EBA 01 D5 B5                             ld      bc,EnergyBar2Start
 362+ 6EBD CD CC 6B                             call    DrawColourEBar
 363+ 6EC0 16 1F                                ld      d,31
 364+ 6EC2 1E 18                                ld      e,24
 365+ 6EC4 01 D5 BD                             ld      bc,EnergyBar1Start
 366+ 6EC7 CD CC 6B                             call    DrawColourEBar
 367+ 6ECA C9                                   ret
 368+ 6ECB
 369+ 6ECB              ScannerBottom           equ 190
 370+ 6ECB              ScannerTypeMissle       equ 2
 371+ 6ECB              ScannerXRangeOffset     equ $35
 372+ 6ECB              ScannerCenter           equ 127
 373+ 6ECB
 374+ 6ECB              ScannerDefault          equ 0
 375+ 6ECB              ScannerMissile          equ 2
 376+ 6ECB              ScannerStation          equ 4
 377+ 6ECB              ScannerEnemy            equ 6
 378+ 6ECB
 379+ 6ECB
 380+ 6ECB 00           SunXScaled              DB  0
 381+ 6ECC 00           SunYScaled              DB  0
 382+ 6ECD 00           SunZScaled              DB  0
 383+ 6ECE
 384+ 6ECE                                      ;   ShipTypeNormal
 385+ 6ECE 18 1C 90 FC  ScannerColourTable:       DB  L2ColourGREEN_2,    L2ColourGREEN_1, L2ColourYELLOW_4,  L2ColourYELLOW_1,   L2ColourCYAN_2, L2ColourCYAN_1, L2ColourRED_4,  L2ColourPINK_4
 385+ 6ED2 12 1F 80 E0
 386+ 6ED6 C0 E0 C0 E0  ScannerColourTableHostile:DB  L2ColourRED_2,      L2ColourRED_1,   L2ColourRED_2,     L2ColourRED_1,      L2ColourRED_2,  L2ColourRED_1,  L2ColourRED_2,  L2ColourRED_1; just a place holder for now
 386+ 6EDA C0 E0 C0 E0
 387+ 6EDE
 388+ 6EDE              GetShipColor:           MACRO
 389+ 6EDE ~                                    ld      hl,ScannerColourTable
 390+ 6EDE ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 391+ 6EDE ~                                    cp      1                        ; for now to bypass hostile missile
 392+ 6EDE ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 393+ 6EDE ~                                    ld      a,(ShipNewBitsAddr)
 394+ 6EDE ~                                    and     ShipIsHostile
 395+ 6EDE ~                                    jr      z,.UsingColourTable
 396+ 6EDE ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 397+ 6EDE ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 398+ 6EDE ~                                    sla     a                            ; as its byte pairs * 2
 399+ 6EDE ~                                    add     hl,a
 400+ 6EDE ~                                    ld      a,(hl)
 401+ 6EDE                                      ENDM
 402+ 6EDE              GetShipColorBright:     MACRO
 403+ 6EDE ~                                    ld      hl,ScannerColourTable
 404+ 6EDE ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 405+ 6EDE ~                                    cp      1                        ; for now to bypass hostile missile
 406+ 6EDE ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 407+ 6EDE ~                                    ld      a,(ShipNewBitsAddr)
 408+ 6EDE ~                                    and     ShipIsHostile
 409+ 6EDE ~                                    jr      z,.UsingColourTable
 410+ 6EDE ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 411+ 6EDE ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 412+ 6EDE ~                                    sla     a                            ; as its byte pairs * 2
 413+ 6EDE ~                                    inc     a
 414+ 6EDE ~                                    add     hl,a
 415+ 6EDE ~                                    ld      a,(hl)
 416+ 6EDE                                      ENDM
 417+ 6EDE
 418+ 6EDE              Shift24BitScan:         MACRO   regHi, reglo
 419+ 6EDE ~                                    ld      hl,(regHi)
 420+ 6EDE ~                                    ld      b,h
 421+ 6EDE ~                                    ld      a,h
 422+ 6EDE ~                                    and     SignMask8Bit
 423+ 6EDE ~                                    ld      h,a
 424+ 6EDE ~                                    ld      a,(reglo)
 425+ 6EDE ~                                    sla     a
 426+ 6EDE ~                                    rl      l
 427+ 6EDE ~                                    rl      h
 428+ 6EDE ~                                    sla     a
 429+ 6EDE ~                                    rl      l
 430+ 6EDE ~                                    rl      h
 431+ 6EDE ~                                    sla     a
 432+ 6EDE ~                                    rl      l
 433+ 6EDE ~                                    rl      h
 434+ 6EDE ~                                    sla     a
 435+ 6EDE ~                                    rl      l
 436+ 6EDE ~                                    rl      h
 437+ 6EDE ~                                    sla     a
 438+ 6EDE ~                                    rl      l
 439+ 6EDE ~                                    rl      h
 440+ 6EDE ~                                    sla     a
 441+ 6EDE ~                                    rl      l
 442+ 6EDE ~                                    rl      h
 443+ 6EDE                                      ENDM
 444+ 6EDE
 445+ 6EDE              SunShiftRight           MACRO   reglo, reghi, regsgn
 446+ 6EDE ~                                    ld      a,regsgn
 447+ 6EDE ~                                    srl     a
 448+ 6EDE ~                                    rr      reghi
 449+ 6EDE ~                                    rr      reglo
 450+ 6EDE ~                                    ld      regsgn,a
 451+ 6EDE                                      ENDM
 452+ 6EDE
 453+ 6EDE              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 454+ 6EDE              ;                        ld      a,(SBnKzsgn)
 455+ 6EDE              ;                        push    af
 456+ 6EDE              ;                        and     SignMask8Bit
 457+ 6EDE              ;                        ld      iyl,a
 458+ 6EDE              ;                        ld      hl,(SBnKxlo)
 459+ 6EDE              ;                        ld      a,(SBnKxsgn)
 460+ 6EDE              ;                        push    af
 461+ 6EDE              ;                        and     SignMask8Bit
 462+ 6EDE              ;                        ld      ixl,a
 463+ 6EDE              ;                        ld      bc,(SBnKylo)
 464+ 6EDE              ;                        ld      a,(SBnKysgn)
 465+ 6EDE              ;                        and     SignMask8Bit
 466+ 6EDE              ;                        push    af
 467+ 6EDE              ;                        ld      iyh,a
 468+ 6EDE              ;.ShiftLoop:             ld      a,iyh
 469+ 6EDE              ;                        or      iyl
 470+ 6EDE              ;                        or      ixl
 471+ 6EDE              ;                        jr      z,.ShiftBit15
 472+ 6EDE              ;.ShiftZ:                SunShiftRight iyl, d, e
 473+ 6EDE              ;.ShiftX:                SunShiftRight ixl, h, l
 474+ 6EDE              ;.ShiftY:                SunShiftRight ixh, b, c
 475+ 6EDE              ;                        jr      .ShipLoop
 476+ 6EDE              ;.ShiftBit15:            ld      a,iyh
 477+ 6EDE              ;                        or      iyl
 478+ 6EDE              ;                        or      ixl
 479+ 6EDE              ;                        jr      z,.CompletedShift
 480+ 6EDE              ;.ShiftZ:                SunShiftRight iyl, d, e
 481+ 6EDE              ;.ShiftX:                SunShiftRight ixl, h, l
 482+ 6EDE              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 483+ 6EDE              ;.CompletedShift:        pop     af                          ; get ysgn
 484+ 6EDE              ;                        and     SignOnly8Bit
 485+ 6EDE              ;                        or      b
 486+ 6EDE              ;                        ld      b,a
 487+ 6EDE              ;                        pop     af                          ; get xsgn
 488+ 6EDE              ;                        and     SignOnly8Bit
 489+ 6EDE              ;                        or      h
 490+ 6EDE              ;                        ld      h,a
 491+ 6EDE              ;                        pop     af                          ; get zsgn
 492+ 6EDE              ;                        and     SignOnly8Bit
 493+ 6EDE              ;                        or      d
 494+ 6EDE              ;                        ld      d,a
 495+ 6EDE              ;                        ret
 496+ 6EDE              ;
 497+ 6EDE ED 5B 17 C0  ScalePlanetPos:         ld      de,(P_BnKzhi)               ; de = abs z & save sign on stack
 498+ 6EE2 7A                                   ld      a,d                         ; .
 499+ 6EE3 F5                                   push    af                          ; .
 500+ 6EE4 E6 7F                                and     SignMask8Bit                ; .
 501+ 6EE6 57                                   ld      d,a                         ; .
 502+ 6EE7 2A 11 C0                             ld      hl,(P_BnKxhi)               ; hl = abs x & save sign on stack
 503+ 6EEA 7C                                   ld      a,h                         ; .
 504+ 6EEB F5                                   push    af                          ; .
 505+ 6EEC E6 7F                                and     SignMask8Bit                ; .
 506+ 6EEE 67                                   ld      h,a                         ; .
 507+ 6EEF ED 4B 14 C0                          ld      bc,(P_BnKyhi)                ; bc = abs y & save sign on stack
 508+ 6EF3 78                                   ld      a,b                         ; .
 509+ 6EF4 F5                                   push    af                          ; .
 510+ 6EF5 E6 7F                                and     SignMask8Bit                ; .
 511+ 6EF7 47                                   ld      b,a                         ; .
 512+ 6EF8 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 513+ 6EF9 B2                                   or      d                           ; .
 514+ 6EFA B4                                   or      h                           ; .
 515+ 6EFB 28 0E                                jr      z,.Shifted                  ; .
 516+ 6EFD                                      ShiftBCRight1                       ; .
 516+ 6EFD CB 38       >			   srl b
 516+ 6EFF CB 19       >			   rr  c
 517+ 6F01                                      ShiftHLRight1                       ; .
 517+ 6F01 CB 3C       >			   srl h
 517+ 6F03 CB 1D       >			   rr  l
 518+ 6F05                                      ShiftDERight1                       ; .
 518+ 6F05 CB 3A       >			   srl d
 518+ 6F07 CB 1B       >			   rr  e
 519+ 6F09 18 ED                                jr      .ShiftLoop
 520+ 6F0B 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 521+ 6F0C B5                                   or      l                           ;
 522+ 6F0D B3                                   or      e                           ;
 523+ 6F0E E6 80                                and     $80                         ;
 524+ 6F10 28 0C                                jr      z,.NoAdditionalShift        ;
 525+ 6F12                                      ShiftBCRight1                       ; we want 7 bit
 525+ 6F12 CB 38       >			   srl b
 525+ 6F14 CB 19       >			   rr  c
 526+ 6F16                                      ShiftHLRight1                       ; to acommodate the sign
 526+ 6F16 CB 3C       >			   srl h
 526+ 6F18 CB 1D       >			   rr  l
 527+ 6F1A                                      ShiftDERight1                       ; .
 527+ 6F1A CB 3A       >			   srl d
 527+ 6F1C CB 1B       >			   rr  e
 528+ 6F1E F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 529+ 6F1F E6 80                                and     SignOnly8Bit                ;
 530+ 6F21 47                                   ld      b,a                         ; bc = shifted signed Y
 531+ 6F22 F1                                   pop     af                          ; get xsgn
 532+ 6F23 E6 80                                and     SignOnly8Bit                ;
 533+ 6F25 67                                   ld      h,a                         ; hl = shifted signed X
 534+ 6F26 F1                                   pop     af                          ; get zsgn
 535+ 6F27 E6 80                                and     SignOnly8Bit                ;
 536+ 6F29 57                                   ld      d,a                         ; de = shifted signed Z
 537+ 6F2A C9                                   ret
 538+ 6F2B
 539+ 6F2B ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 540+ 6F2F 7A                                   ld      a,d                         ; .
 541+ 6F30 F5                                   push    af                          ; .
 542+ 6F31 E6 7F                                and     SignMask8Bit                ; .
 543+ 6F33 57                                   ld      d,a                         ; .
 544+ 6F34 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 545+ 6F37 7C                                   ld      a,h                         ; .
 546+ 6F38 F5                                   push    af                          ; .
 547+ 6F39 E6 7F                                and     SignMask8Bit                ; .
 548+ 6F3B 67                                   ld      h,a                         ; .
 549+ 6F3C ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 550+ 6F40 78                                   ld      a,b                         ; .
 551+ 6F41 F5                                   push    af                          ; .
 552+ 6F42 E6 7F                                and     SignMask8Bit                ; .
 553+ 6F44 47                                   ld      b,a                         ; .
 554+ 6F45 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 555+ 6F46 B2                                   or      d                           ; .
 556+ 6F47 B4                                   or      h                           ; .
 557+ 6F48 28 0E                                jr      z,.Shifted                  ; .
 558+ 6F4A                                      ShiftBCRight1                       ; .
 558+ 6F4A CB 38       >			   srl b
 558+ 6F4C CB 19       >			   rr  c
 559+ 6F4E                                      ShiftHLRight1                       ; .
 559+ 6F4E CB 3C       >			   srl h
 559+ 6F50 CB 1D       >			   rr  l
 560+ 6F52                                      ShiftDERight1                       ; .
 560+ 6F52 CB 3A       >			   srl d
 560+ 6F54 CB 1B       >			   rr  e
 561+ 6F56 18 ED                                jr      .ShiftLoop
 562+ 6F58 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 563+ 6F59 B5                                   or      l                           ;
 564+ 6F5A B3                                   or      e                           ;
 565+ 6F5B E6 80                                and     $80                         ;
 566+ 6F5D 28 0C                                jr      z,.NoAdditionalShift        ;
 567+ 6F5F                                      ShiftBCRight1                       ; we want 7 bit
 567+ 6F5F CB 38       >			   srl b
 567+ 6F61 CB 19       >			   rr  c
 568+ 6F63                                      ShiftHLRight1                       ; to acommodate the sign
 568+ 6F63 CB 3C       >			   srl h
 568+ 6F65 CB 1D       >			   rr  l
 569+ 6F67                                      ShiftDERight1                       ; .
 569+ 6F67 CB 3A       >			   srl d
 569+ 6F69 CB 1B       >			   rr  e
 570+ 6F6B F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 571+ 6F6C E6 80                                and     SignOnly8Bit                ;
 572+ 6F6E 47                                   ld      b,a                         ; bc = shifted signed Y
 573+ 6F6F F1                                   pop     af                          ; get xsgn
 574+ 6F70 E6 80                                and     SignOnly8Bit                ;
 575+ 6F72 67                                   ld      h,a                         ; hl = shifted signed X
 576+ 6F73 F1                                   pop     af                          ; get zsgn
 577+ 6F74 E6 80                                and     SignOnly8Bit                ;
 578+ 6F76 57                                   ld      d,a                         ; de = shifted signed Z
 579+ 6F77 C9                                   ret
 580+ 6F78
 581+ 6F78              ;compass sun
 582+ 6F78              ;            if value is still 24 bit
 583+ 6F78              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 584+ 6F78              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 585+ 6F78              ;                tempk39 = OR 3 low bytes
 586+ 6F78              ;                tempkA = OR 3 high bytes
 587+ 6F78              ;                 TAL2:    repeat
 588+ 6F78              ;                             asl tempka tempk39
 589+ 6F78              ;                             exit if carry set
 590+ 6F78              ;                             x coord << 1
 591+ 6F78              ;                             y corrd << 1
 592+ 6F78              ;                             z coord << 1
 593+ 6F78              ;                          until carry clear
 594+ 6F78              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 595+ 6F78              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 596+ 6F78              ;                          RQ = AP = X ^ 2
 597+ 6F78              ;                          TP = AP = Y ^ 2
 598+ 6F78              ;                          RQ = RQ + TP
 599+ 6F78              ;                          TP = AP = Z ^ 2
 600+ 6F78              ;                          RQ = RQ + TP
 601+ 6F78              ;                          Q = SQRT (RQ)
 602+ 6F78              ;                          for each coord - A = A/Q * 3/ 8
 603+ 6F78              ;
 604+ 6F78              ;
 605+ 6F78
 606+ 6F78 ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 607+ 6F7C 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 608+ 6F7F ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 609+ 6F83 7A                                   ld      a,d
 610+ 6F84 E6 80                                and     SignOnly8Bit
 611+ 6F86 CB 3F                                srl     a
 612+ 6F88 FD 6F                                ld      iyl,a
 613+ 6F8A 7C                                   ld      a,h
 614+ 6F8B E6 80                                and     SignOnly8Bit
 615+ 6F8D FD B5                                or      iyl
 616+ 6F8F CB 3F                                srl     a
 617+ 6F91 78                                   ld      a,b
 618+ 6F92 E6 80                                and     SignOnly8Bit
 619+ 6F94 FD B5                                or      iyl
 620+ 6F96 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 621+ 6F98                                      ClearSignBit d
 621+ 6F98 7A          >                        ld      a,d
 621+ 6F99 E6 7F       >                        and     SignMask8Bit
 621+ 6F9B 57          >                        ld      d,a
 622+ 6F9C                                      ClearSignBit h
 622+ 6F9C 7C          >                        ld      a,h
 622+ 6F9D E6 7F       >                        and     SignMask8Bit
 622+ 6F9F 67          >                        ld      h,a
 623+ 6FA0                                      ClearSignBit b
 623+ 6FA0 78          >                        ld      a,b
 623+ 6FA1 E6 7F       >                        and     SignMask8Bit
 623+ 6FA3 47          >                        ld      b,a
 624+ 6FA4 78                                   ld      a,b
 625+ 6FA5 B3                                   or      e
 626+ 6FA6 B4                                   or      h
 627+ 6FA7 B5                                   or      l
 628+ 6FA8 B0                                   or      b
 629+ 6FA9 B1                                   or      c
 630+ 6FAA 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 631+ 6FAC 7A                                   ld      a,d
 632+ 6FAD B3                                   or      e
 633+ 6FAE B4                                   or      h
 634+ 6FAF CB 27                                sla     a
 635+ 6FB1 38 15                                jr      c,.DoneCalc
 636+ 6FB3 28 13                                jr      z,.DoneCalc
 637+ 6FB5              .UpscaleLoop:           ShiftDELeft1
 637+ 6FB5 CB 23       >			   sla e
 637+ 6FB7 CB 12       >			   rl  d
 638+ 6FB9                                      ShiftHLLeft1
 638+ 6FB9 CB 25       >			   sla l
 638+ 6FBB CB 14       >			   rl  h
 639+ 6FBD                                      ShiftBCLeft1
 639+ 6FBD CB 21       >			   sla c
 639+ 6FBF CB 10       >			   rl  b
 640+ 6FC1 CB 27                                sla     a
 641+ 6FC3 38 03                                jr      c,.DoneCalc
 642+ 6FC5 C3 B5 6F                             jp      .UpscaleLoop
 643+ 6FC8              .DoneCalc               ShiftDERight1
 643+ 6FC8 CB 3A       >			   srl d
 643+ 6FCA CB 1B       >			   rr  e
 644+ 6FCC                                      ShiftHLRight1
 644+ 6FCC CB 3C       >			   srl h
 644+ 6FCE CB 1D       >			   rr  l
 645+ 6FD0                                      ShiftBCRight1
 645+ 6FD0 CB 38       >			   srl b
 645+ 6FD2 CB 19       >			   rr  c
 646+ 6FD4 5A           .NowSetResultInLowByte: ld      e,d
 647+ 6FD5 6C                                   ld      l,h
 648+ 6FD6 48                                   ld      c,b
 649+ 6FD7 FD 7D                                ld      a,iyl
 650+ 6FD9 E6 80                                and     SignOnly8Bit
 651+ 6FDB 47                                   ld      b,a
 652+ 6FDC FD 7D                                ld      a,iyl
 653+ 6FDE CB 27                                sla     a
 654+ 6FE0 FD 6F                                ld      iyl,a
 655+ 6FE2 E6 80                                and     SignOnly8Bit
 656+ 6FE4 67                                   ld      h,a
 657+ 6FE5 FD 7D                                ld      a,iyl
 658+ 6FE7 CB 27                                sla     a
 659+ 6FE9 E6 80                                and     SignOnly8Bit
 660+ 6FEB 57                                   ld      d,a
 661+ 6FEC C9                                   ret
 662+ 6FED 3E 01        .Setto1:                ld      a,1
 663+ 6FEF 4F                                   ld      c,a
 664+ 6FF0 5F                                   ld      e,a
 665+ 6FF1 6F                                   ld      l,a
 666+ 6FF2 FD 7D                                ld      a,iyl
 667+ 6FF4 CB 27                                sla     a
 668+ 6FF6 CB 27                                sla     a
 669+ 6FF8 E6 80                                and     SignOnly8Bit
 670+ 6FFA B3                                   or      e
 671+ 6FFB 5F                                   ld      e,a
 672+ 6FFC C9                                   ret
 673+ 6FFD
 674+ 6FFD
 675+ 6FFD              UpdateCompassSun:       MMUSelectSun
 675+ 6FFD ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 676+ 7001 CD 2B 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 677+ 7004 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 678+ 7007 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 679+ 7008 59                                   ld      e,c                         ; .
 680+ 7009 ED 30                                mul                                 ; .
 681+ 700B 42 4B                                ld      bc,de                       ; .
 682+ 700D 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 683+ 700E 5D                                   ld      e,l                         ; .
 684+ 700F ED 30                                mul                                 ; .
 685+ 7011 EB                                   ex      de,hl                       ; .
 686+ 7012 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 687+ 7013 53                                   ld      d,e                         ; de = z ^
 688+ 7014 ED 30                                mul                                 ; .
 689+ 7016 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 690+ 7017 09                                   add     hl,bc                       ; .
 691+ 7018 EB                                   ex      de,hl                       ; .
 692+ 7019 CD 94 92                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 693+ 701C                                      ; if h <> 0 then more difficult
 694+ 701C 55                                   ld      d,l                         ; iyl = q
 695+ 701D FD 6A                                ld      iyl,d                       ; .
 696+ 701F E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 697+ 7020 7C                                   ld      a,h                         ; c = sign
 698+ 7021 E6 80                                and     SignOnly8Bit                ; .
 699+ 7023 4F                                   ld      c,a                         ; .
 700+ 7024 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 701+ 7025 7D                                   ld      a,l                         ; a = 8 bit abs z
 702+ 7026 CD 59 9B                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 703+ 7029 5F                                   ld      e,a                         ; .
 704+ 702A                                      EDiv10Inline                        ; a = e / 10
 704+ 702A 16 00       >                        ld      d,0
 704+ 702C 62 6B       >                        ld      hl,de
 704+ 702E 29          >                        add     hl,hl
 704+ 702F 19          >                        add     hl,de
 704+ 7030 29          >                        add     hl,hl
 704+ 7031 29          >                        add     hl,hl
 704+ 7032 19          >                        add     hl,de
 704+ 7033 29          >                        add     hl,hl
 705+ 7034 7C                                   ld      a,h                         ; .
 706+ 7035 C1                                   pop     bc                          ; +1 retrieve bc
 707+ 7036 FE 00                                cp      0                           ; if result in h was 0 then done
 708+ 7038 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 709+ 703A CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 710+ 703C 28 02                                jr      z,.DoneNormX
 711+ 703E ED 44                                neg
 712+ 7040 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 713+ 7042 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 714+ 7044 E1                                   pop     hl                          ; +0 hl y scaled
 715+ 7045 7C                                   ld      a,h                         ; c = sign
 716+ 7046 E6 80                                and     SignOnly8Bit                ; .
 717+ 7048 4F                                   ld      c,a                         ; .
 718+ 7049 C5                                   push    bc                          ; +1 save sign to stack
 719+ 704A 7D                                   ld      a,l                         ; a = 8 bit signed z
 720+ 704B CD 59 9B                             call    AequAdivQmul96ABS           ; .
 721+ 704E 5F                                   ld      e,a                         ; a = e / 10
 722+ 704F                                      EDiv10Inline                        ; .
 722+ 704F 16 00       >                        ld      d,0
 722+ 7051 62 6B       >                        ld      hl,de
 722+ 7053 29          >                        add     hl,hl
 722+ 7054 19          >                        add     hl,de
 722+ 7055 29          >                        add     hl,hl
 722+ 7056 29          >                        add     hl,hl
 722+ 7057 19          >                        add     hl,de
 722+ 7058 29          >                        add     hl,hl
 723+ 7059 7C                                   ld      a,h                         ; retrieve sign
 724+ 705A C1                                   pop     bc                          ; +1 retrieve sign
 725+ 705B FE 00                                cp      0
 726+ 705D 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 727+ 705F CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 728+ 7061 28 02                                jr      z,.DoneNormY
 729+ 7063 ED 44                                neg                                 ;
 730+ 7065 47           .DoneNormY:             ld      b,a                         ; result from Y
 731+ 7066 DD 4C                                ld      c,ixh                       ; x = saved X
 732+ 7068              .SetSprite:             MMUSelectSpriteBank
 732+ 7068 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 733+ 706C CD 05 E1                             call    compass_sun_move
 734+ 706F 3A 18 C0                             ld      a,(SBnKzsgn)
 735+ 7072 CB 7F                                bit     7,a
 736+ 7074 20 04                                jr      nz,.SunBehind
 737+ 7076 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 738+ 7079 C9                                   ret
 739+ 707A CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 740+ 707D C9                                   ret
 741+ 707E
 742+ 707E
 743+ 707E              UpdateCompassPlanet:    MMUSelectPlanet
 743+ 707E ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 744+ 7082 CD DE 6E                             call    ScalePlanetPos              ; get as 7 bit signed
 745+ 7085 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 746+ 7088 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 747+ 7089 59                                   ld      e,c                         ; .
 748+ 708A ED 30                                mul                                 ; .
 749+ 708C 42 4B                                ld      bc,de                       ; .
 750+ 708E 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 751+ 708F 5D                                   ld      e,l                         ; .
 752+ 7090 ED 30                                mul                                 ; .
 753+ 7092 EB                                   ex      de,hl                       ; .
 754+ 7093 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 755+ 7094 53                                   ld      d,e                         ; de = z ^
 756+ 7095 ED 30                                mul                                 ; .
 757+ 7097 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 758+ 7098 09                                   add     hl,bc
 759+ 7099 EB                                   ex      de,hl
 760+ 709A CD 94 92                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 761+ 709D                                      ; if h <> 0 then more difficult
 762+ 709D 55                                   ld      d,l                         ; iyl = q
 763+ 709E FD 6A                                ld      iyl,d                       ; .
 764+ 70A0 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 765+ 70A1 7C                                   ld      a,h                         ; c = sign
 766+ 70A2 E6 80                                and     SignOnly8Bit                ; .
 767+ 70A4 4F                                   ld      c,a                         ; .
 768+ 70A5 C5                                   push    bc                          ; save sign to stack
 769+ 70A6 7D                                   ld      a,l                         ; a = 8 bit abs z
 770+ 70A7 CD 59 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 771+ 70AA 5F                                   ld      e,a                         ; .
 772+ 70AB                                      EDiv10Inline                        ; a = e / 10
 772+ 70AB 16 00       >                        ld      d,0
 772+ 70AD 62 6B       >                        ld      hl,de
 772+ 70AF 29          >                        add     hl,hl
 772+ 70B0 19          >                        add     hl,de
 772+ 70B1 29          >                        add     hl,hl
 772+ 70B2 29          >                        add     hl,hl
 772+ 70B3 19          >                        add     hl,de
 772+ 70B4 29          >                        add     hl,hl
 773+ 70B5 7C                                   ld      a,h                         ; .
 774+ 70B6 C1                                   pop     bc                          ; retrieve sign
 775+ 70B7 FE 00                                cp      0
 776+ 70B9 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 777+ 70BB CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 778+ 70BD 28 02                                jr      z,.DoneNormX
 779+ 70BF ED 44                                neg
 780+ 70C1 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 781+ 70C3 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 782+ 70C5 E1                                   pop     hl                          ; hl y scaled
 783+ 70C6 7C                                   ld      a,h                         ; c = sign
 784+ 70C7 E6 80                                and     SignOnly8Bit                ; .
 785+ 70C9 4F                                   ld      c,a                         ; .
 786+ 70CA C5                                   push    bc                          ; save sign to stack
 787+ 70CB 7D                                   ld      a,l                         ; a = 8 bit signed z
 788+ 70CC CD 59 9B                             call    AequAdivQmul96ABS           ; .
 789+ 70CF 5F                                   ld      e,a                         ; a = e / 10
 790+ 70D0                                      EDiv10Inline                        ; .
 790+ 70D0 16 00       >                        ld      d,0
 790+ 70D2 62 6B       >                        ld      hl,de
 790+ 70D4 29          >                        add     hl,hl
 790+ 70D5 19          >                        add     hl,de
 790+ 70D6 29          >                        add     hl,hl
 790+ 70D7 29          >                        add     hl,hl
 790+ 70D8 19          >                        add     hl,de
 790+ 70D9 29          >                        add     hl,hl
 791+ 70DA 7C                                   ld      a,h                         ; retrieve sign
 792+ 70DB C1                                   pop     bc                          ; retrieve sign
 793+ 70DC FE 00                                cp      0
 794+ 70DE 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 795+ 70E0 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 796+ 70E2 28 02                                jr      z,.DoneNormY
 797+ 70E4 ED 44                                neg                                 ;
 798+ 70E6 47           .DoneNormY:             ld      b,a                         ; result from Y
 799+ 70E7 DD 4C                                ld      c,ixh                       ; x = saved X
 800+ 70E9              .SetSprite:             MMUSelectSpriteBank
 800+ 70E9 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 801+ 70ED CD 17 E1                             call    compass_station_move
 802+ 70F0 3A 18 C0                             ld      a,(P_BnKzsgn)
 803+ 70F3 CB 7F                                bit     7,a
 804+ 70F5 20 04                                jr      nz,.PlanetBehind
 805+ 70F7 CD 32 E2     .PlanetInfront:         call    show_compass_station_infront
 806+ 70FA C9                                   ret
 807+ 70FB CD 3D E2     .PlanetBehind:          call    show_compass_station_behind
 808+ 70FE C9                                   ret
 809+ 70FF
 810+ 70FF              UpdatePlanetSun:        MMUSelectPlanet
 810+ 70FF ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 811+ 7103                                      Shift24BitScan  P_BnKyhi, P_BnKylo
 811+ 7103 2A 14 C0    >                        ld      hl,(P_BnKyhi)
 811+ 7106 44          >                        ld      b,h
 811+ 7107 7C          >                        ld      a,h
 811+ 7108 E6 7F       >                        and     SignMask8Bit
 811+ 710A 67          >                        ld      h,a
 811+ 710B 3A 13 C0    >                        ld      a,(P_BnKylo)
 811+ 710E CB 27       >                        sla     a
 811+ 7110 CB 15       >                        rl      l
 811+ 7112 CB 14       >                        rl      h
 811+ 7114 CB 27       >                        sla     a
 811+ 7116 CB 15       >                        rl      l
 811+ 7118 CB 14       >                        rl      h
 811+ 711A CB 27       >                        sla     a
 811+ 711C CB 15       >                        rl      l
 811+ 711E CB 14       >                        rl      h
 811+ 7120 CB 27       >                        sla     a
 811+ 7122 CB 15       >                        rl      l
 811+ 7124 CB 14       >                        rl      h
 811+ 7126 CB 27       >                        sla     a
 811+ 7128 CB 15       >                        rl      l
 811+ 712A CB 14       >                        rl      h
 811+ 712C CB 27       >                        sla     a
 811+ 712E CB 15       >                        rl      l
 811+ 7130 CB 14       >                        rl      h
 812+ 7132 3A 12 C0     .IsItInRange:           ld      a,(P_BnKxsgn)                ; if the high byte is not
 813+ 7135 21 15 C0                             ld      hl,P_BnKysgn                 ; a sign only
 814+ 7138 B6                                   or      (hl)                        ; then its too far away
 815+ 7139 21 18 C0                             ld      hl,P_BnKzsgn                 ; for the scanner to draw
 816+ 713C B6                                   or      (hl)                        ; so rely on the compass
 817+ 713D E6 7F                                and     SignMask8Bit                ;
 818+ 713F C0                                   ret     nz                          ;
 819+ 7140 2A 16 C0     .ItsInRange:            ld      hl,(P_BnKzlo)                ; we will get unsigned values
 820+ 7143 ED 5B 10 C0                          ld      de,(P_BnKxlo)
 821+ 7147 ED 4B 13 C0                          ld      bc,(P_BnKylo)
 822+ 714B 7C                                   ld      a,h
 823+ 714C B2                                   or      d
 824+ 714D B0                                   or      b
 825+ 714E E6 C0                                and     %11000000
 826+ 7150 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 827+ 7151 3A 12 C0     .MakeX2Compliment:      ld      a,(P_BnKxsgn)
 828+ 7154 CB 7F                                bit     7,a
 829+ 7156 28 04                                jr      z,.absXHi
 830+ 7158                                      NegD
 830+ 7158 7A          >                    ld      a,d
 830+ 7159 ED 44       >                    neg
 830+ 715B 57          >                    ld      d,a
 831+ 715C 7A           .absXHi:                ld      a,d
 832+ 715D C6 80                                add     ScannerX
 833+ 715F DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 834+ 7161 CB 3C        .ProcessZCoord:         srl     h
 835+ 7163 CB 3C                                srl     h
 836+ 7165 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_BnKzsgn)
 837+ 7168 CB 7F                                bit     7,a
 838+ 716A 28 04                                jr      z,.absZHi
 839+ 716C                                      NegH
 839+ 716C 7C          >                    ld      a,h
 839+ 716D ED 44       >                    neg
 839+ 716F 67          >                    ld      h,a
 840+ 7170 3E AB        .absZHi:                ld      a,ScannerY
 841+ 7172 94                                   sub     h
 842+ 7173 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 843+ 7175 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 844+ 7177 20 0B                                jr      nz,.StickHasLength
 845+ 7179 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 846+ 717B FD 6F                                ld      iyl,a
 847+ 717D                                      MMUSelectLayer2
 847+ 717D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 848+ 7181 C3 AC 71                             jp      .NoStick
 849+ 7184 3A 15 C0     .StickHasLength:        ld      a,(P_BnKysgn)                ; if b  =  0 then no line
 850+ 7187 CB 7F                                bit     7,a
 851+ 7189 28 04                                jr      z,.absYHi
 852+ 718B                                      NegB
 852+ 718B 78          >                    ld      a,b
 852+ 718C ED 44       >                    neg
 852+ 718E 47          >                    ld      b,a
 853+ 718F FD 7C        .absYHi:                ld      a,iyh
 854+ 7191 90           .SetStickPos:           sub     b
 855+ 7192                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 855+ 7192 FE BE       >                        cp      ScannerBottom
 855+ 7194 DA 99 71    >                        jp		c, .StickOnScreen
 856+ 7197 3E BE                                ld      a,ScannerBottom
 857+ 7199 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 858+ 719B DD 6F                                ld      ixl,a
 859+ 719D FD 44                                ld      b,iyh                       ; from row
 860+ 719F DD 4C                                ld      c,ixh                       ; from col
 861+ 71A1 FD 55                                ld      d,iyl                       ; to row
 862+ 71A3 1E B4                                ld      e,L2SunScanner
 863+ 71A5                                      MMUSelectLayer2
 863+ 71A5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 864+ 71A9 CD 55 E5                             call    l2_draw_vert_line_to
 865+ 71AC FD 45        .NoStick:               ld      b,iyl                       ; row
 866+ 71AE DD 4C                                ld      c,ixh                       ; col
 867+ 71B0 3E FC                                ld      a,L2SunScannerBright
 868+ 71B2 CD B6 E2                             call    l2_plot_pixel
 869+ 71B5 FD 45                                ld      b,iyl
 870+ 71B7 DD 4C                                ld      c,ixh
 871+ 71B9 0C                                   inc     c
 872+ 71BA 3E FC                                ld      a,L2SunScannerBright
 873+ 71BC CD B6 E2                             call    l2_plot_pixel
 874+ 71BF C9                                   ret
 875+ 71C0
 876+ 71C0              UpdateCompassStation:   MMUSelectShipBankN 0
 876+ 71C0 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 877+ 71C4
 878+ 71C4 CD 2B 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 879+ 71C7 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 880+ 71CB 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 881+ 71CC 59                                   ld      e,c                         ; .
 882+ 71CD ED 30                                mul                                 ; .
 883+ 71CF 42 4B                                ld      bc,de                       ; .
 884+ 71D1 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 885+ 71D2 5D                                   ld      e,l                         ; .
 886+ 71D3 ED 30                                mul                                 ; .
 887+ 71D5 EB                                   ex      de,hl                       ; .
 888+ 71D6 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 889+ 71D7 53                                   ld      d,e                         ; de = z ^
 890+ 71D8 ED 30                                mul                                 ; .
 891+ 71DA 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 892+ 71DB 09                                   add     hl,bc
 893+ 71DC EB                                   ex      de,hl
 894+ 71DD CD 94 92                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 895+ 71E0                                      ; if h <> 0 then more difficult
 896+ 71E0 55                                   ld      d,l                         ; iyl = q
 897+ 71E1 FD 6A                                ld      iyl,d                       ; .
 898+ 71E3 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 899+ 71E4 7C                                   ld      a,h                         ; c = sign
 900+ 71E5 E6 80                                and     SignOnly8Bit                ; .
 901+ 71E7 4F                                   ld      c,a                         ; .
 902+ 71E8 C5                                   push    bc                          ; save sign to stack
 903+ 71E9 7D                                   ld      a,l                         ; a = 8 bit abs z
 904+ 71EA CD 59 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 905+ 71ED 5F                                   ld      e,a                         ; .
 906+ 71EE                                      EDiv10Inline                        ; a = e / 10
 906+ 71EE 16 00       >                        ld      d,0
 906+ 71F0 62 6B       >                        ld      hl,de
 906+ 71F2 29          >                        add     hl,hl
 906+ 71F3 19          >                        add     hl,de
 906+ 71F4 29          >                        add     hl,hl
 906+ 71F5 29          >                        add     hl,hl
 906+ 71F6 19          >                        add     hl,de
 906+ 71F7 29          >                        add     hl,hl
 907+ 71F8 7C                                   ld      a,h                         ; .
 908+ 71F9 C1                                   pop     bc                          ; retrieve sign
 909+ 71FA FE 00                                cp      0
 910+ 71FC 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 911+ 71FE CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 912+ 7200 28 02                                jr      z,.DoneNormX
 913+ 7202 ED 44                                neg
 914+ 7204 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 915+ 7206 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 916+ 7208 E1                                   pop     hl                          ; hl z scaled
 917+ 7209 7C                                   ld      a,h                         ; c = sign
 918+ 720A E6 80                                and     SignOnly8Bit                ; .
 919+ 720C 4F                                   ld      c,a                         ; .
 920+ 720D C5                                   push    bc                          ; save sign to stack
 921+ 720E 7D                                   ld      a,l                         ; e = a /q * 96
 922+ 720F CD 59 9B                             call    AequAdivQmul96ABS              ; .
 923+ 7212 5F                                   ld      e,a                         ; a = e / 10
 924+ 7213                                      EDiv10Inline                        ; .
 924+ 7213 16 00       >                        ld      d,0
 924+ 7215 62 6B       >                        ld      hl,de
 924+ 7217 29          >                        add     hl,hl
 924+ 7218 19          >                        add     hl,de
 924+ 7219 29          >                        add     hl,hl
 924+ 721A 29          >                        add     hl,hl
 924+ 721B 19          >                        add     hl,de
 924+ 721C 29          >                        add     hl,hl
 925+ 721D 7C                                   ld      a,h                         ; retrieve sign
 926+ 721E C1                                   pop     bc                          ; retrieve sign
 927+ 721F CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 928+ 7221 28 02                                jr      z,.DoneNormZ
 929+ 7223 ED 44                                neg
 930+ 7225 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 931+ 7227 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 932+ 7229 E1                                   pop     hl                          ; hl y scaled
 933+ 722A 7C                                   ld      a,h                         ; c = sign
 934+ 722B E6 80                                and     SignOnly8Bit                ; .
 935+ 722D 4F                                   ld      c,a                         ; .
 936+ 722E C5                                   push    bc                          ; save sign to stack
 937+ 722F 7D                                   ld      a,l                         ; a = 8 bit signed z
 938+ 7230 CD 59 9B                             call    AequAdivQmul96ABS              ; .
 939+ 7233 5F                                   ld      e,a                         ; a = e / 10
 940+ 7234                                      EDiv10Inline                        ; .
 940+ 7234 16 00       >                        ld      d,0
 940+ 7236 62 6B       >                        ld      hl,de
 940+ 7238 29          >                        add     hl,hl
 940+ 7239 19          >                        add     hl,de
 940+ 723A 29          >                        add     hl,hl
 940+ 723B 29          >                        add     hl,hl
 940+ 723C 19          >                        add     hl,de
 940+ 723D 29          >                        add     hl,hl
 941+ 723E 7C                                   ld      a,h                         ; retrieve sign
 942+ 723F C1                                   pop     bc                          ; retrieve sign
 943+ 7240 FE 00                                cp      0
 944+ 7242 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 945+ 7244 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 946+ 7246 28 02                                jr      z,.DoneNormY
 947+ 7248 ED 44                                neg
 948+ 724A 47           .DoneNormY:             ld      b,a                         ; .
 949+ 724B DD 4C                                ld      c,ixh
 950+ 724D              .SetSprite:             MMUSelectSpriteBank
 950+ 724D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 951+ 7251 CD 05 E1                             call    compass_sun_move
 952+ 7254 DD 7D                                ld      a,ixl
 953+ 7256 CB 7F                                bit     7,a
 954+ 7258 20 04                                jr      nz,.SunBehind
 955+ 725A CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 956+ 725D C9                                   ret
 957+ 725E CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 958+ 7261 C9                                   ret
 959+ 7262
 960+ 7262
 961+ 7262              UpdateScannerSun:       MMUSelectSun
 961+ 7262 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 962+ 7266                                      Shift24BitScan  SBnKyhi, SBnKylo
 962+ 7266 2A 14 C0    >                        ld      hl,(SBnKyhi)
 962+ 7269 44          >                        ld      b,h
 962+ 726A 7C          >                        ld      a,h
 962+ 726B E6 7F       >                        and     SignMask8Bit
 962+ 726D 67          >                        ld      h,a
 962+ 726E 3A 13 C0    >                        ld      a,(SBnKylo)
 962+ 7271 CB 27       >                        sla     a
 962+ 7273 CB 15       >                        rl      l
 962+ 7275 CB 14       >                        rl      h
 962+ 7277 CB 27       >                        sla     a
 962+ 7279 CB 15       >                        rl      l
 962+ 727B CB 14       >                        rl      h
 962+ 727D CB 27       >                        sla     a
 962+ 727F CB 15       >                        rl      l
 962+ 7281 CB 14       >                        rl      h
 962+ 7283 CB 27       >                        sla     a
 962+ 7285 CB 15       >                        rl      l
 962+ 7287 CB 14       >                        rl      h
 962+ 7289 CB 27       >                        sla     a
 962+ 728B CB 15       >                        rl      l
 962+ 728D CB 14       >                        rl      h
 962+ 728F CB 27       >                        sla     a
 962+ 7291 CB 15       >                        rl      l
 962+ 7293 CB 14       >                        rl      h
 963+ 7295 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 964+ 7298 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 965+ 729B B6                                   or      (hl)                        ; then its too far away
 966+ 729C 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 967+ 729F B6                                   or      (hl)                        ; so rely on the compass
 968+ 72A0 E6 7F                                and     SignMask8Bit                ;
 969+ 72A2 C0                                   ret     nz                          ;
 970+ 72A3 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 971+ 72A6 ED 5B 10 C0                          ld      de,(SBnKxlo)
 972+ 72AA ED 4B 13 C0                          ld      bc,(SBnKylo)
 973+ 72AE 7C                                   ld      a,h
 974+ 72AF B2                                   or      d
 975+ 72B0 B0                                   or      b
 976+ 72B1 E6 C0                                and     %11000000
 977+ 72B3 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 978+ 72B4 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 979+ 72B7 CB 7F                                bit     7,a
 980+ 72B9 28 04                                jr      z,.absXHi
 981+ 72BB                                      NegD
 981+ 72BB 7A          >                    ld      a,d
 981+ 72BC ED 44       >                    neg
 981+ 72BE 57          >                    ld      d,a
 982+ 72BF 7A           .absXHi:                ld      a,d
 983+ 72C0 C6 80                                add     ScannerX
 984+ 72C2 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 985+ 72C4 CB 3C        .ProcessZCoord:         srl     h
 986+ 72C6 CB 3C                                srl     h
 987+ 72C8 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 988+ 72CB CB 7F                                bit     7,a
 989+ 72CD 28 04                                jr      z,.absZHi
 990+ 72CF                                      NegH
 990+ 72CF 7C          >                    ld      a,h
 990+ 72D0 ED 44       >                    neg
 990+ 72D2 67          >                    ld      h,a
 991+ 72D3 3E AB        .absZHi:                ld      a,ScannerY
 992+ 72D5 94                                   sub     h
 993+ 72D6 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 994+ 72D8 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 995+ 72DA 20 0B                                jr      nz,.StickHasLength
 996+ 72DC FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 997+ 72DE FD 6F                                ld      iyl,a
 998+ 72E0                                      MMUSelectLayer2
 998+ 72E0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 999+ 72E4 C3 0F 73                             jp      .NoStick
1000+ 72E7 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
1001+ 72EA CB 7F                                bit     7,a
1002+ 72EC 28 04                                jr      z,.absYHi
1003+ 72EE                                      NegB
1003+ 72EE 78          >                    ld      a,b
1003+ 72EF ED 44       >                    neg
1003+ 72F1 47          >                    ld      b,a
1004+ 72F2 FD 7C        .absYHi:                ld      a,iyh
1005+ 72F4 90           .SetStickPos:           sub     b
1006+ 72F5                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1006+ 72F5 FE BE       >                        cp      ScannerBottom
1006+ 72F7 DA FC 72    >                        jp		c, .StickOnScreen
1007+ 72FA 3E BE                                ld      a,ScannerBottom
1008+ 72FC FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1009+ 72FE DD 6F                                ld      ixl,a
1010+ 7300 FD 44                                ld      b,iyh                       ; from row
1011+ 7302 DD 4C                                ld      c,ixh                       ; from col
1012+ 7304 FD 55                                ld      d,iyl                       ; to row
1013+ 7306 1E B4                                ld      e,L2SunScanner
1014+ 7308                                      MMUSelectLayer2
1014+ 7308 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1015+ 730C CD 55 E5                             call    l2_draw_vert_line_to
1016+ 730F FD 45        .NoStick:               ld      b,iyl                       ; row
1017+ 7311 DD 4C                                ld      c,ixh                       ; col
1018+ 7313 3E FC                                ld      a,L2SunScannerBright
1019+ 7315 CD B6 E2                             call    l2_plot_pixel
1020+ 7318 FD 45                                ld      b,iyl
1021+ 731A DD 4C                                ld      c,ixh
1022+ 731C 0C                                   inc     c
1023+ 731D 3E FC                                ld      a,L2SunScannerBright
1024+ 731F CD B6 E2                             call    l2_plot_pixel
1025+ 7322 C9                                   ret
1026+ 7323
1027+ 7323              ; This will do a planet update if we are not in space station range
1028+ 7323              UpdateScannerPlanet:    MMUSelectPlanet
1028+ 7323 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
1029+ 7327                                      Shift24BitScan  P_BnKyhi, P_BnKylo
1029+ 7327 2A 14 C0    >                        ld      hl,(P_BnKyhi)
1029+ 732A 44          >                        ld      b,h
1029+ 732B 7C          >                        ld      a,h
1029+ 732C E6 7F       >                        and     SignMask8Bit
1029+ 732E 67          >                        ld      h,a
1029+ 732F 3A 13 C0    >                        ld      a,(P_BnKylo)
1029+ 7332 CB 27       >                        sla     a
1029+ 7334 CB 15       >                        rl      l
1029+ 7336 CB 14       >                        rl      h
1029+ 7338 CB 27       >                        sla     a
1029+ 733A CB 15       >                        rl      l
1029+ 733C CB 14       >                        rl      h
1029+ 733E CB 27       >                        sla     a
1029+ 7340 CB 15       >                        rl      l
1029+ 7342 CB 14       >                        rl      h
1029+ 7344 CB 27       >                        sla     a
1029+ 7346 CB 15       >                        rl      l
1029+ 7348 CB 14       >                        rl      h
1029+ 734A CB 27       >                        sla     a
1029+ 734C CB 15       >                        rl      l
1029+ 734E CB 14       >                        rl      h
1029+ 7350 CB 27       >                        sla     a
1029+ 7352 CB 15       >                        rl      l
1029+ 7354 CB 14       >                        rl      h
1030+ 7356 3A 12 C0     .IsItInRange:           ld      a,(P_BnKxsgn)                ; if the high byte is not
1031+ 7359 21 15 C0                             ld      hl,P_BnKysgn                 ; a sign only
1032+ 735C B6                                   or      (hl)                        ; then its too far away
1033+ 735D 21 18 C0                             ld      hl,P_BnKzsgn                 ; for the scanner to draw
1034+ 7360 B6                                   or      (hl)                        ; so rely on the compass
1035+ 7361 E6 7F                                and     SignMask8Bit                ;
1036+ 7363 C0                                   ret     nz                          ;
1037+ 7364 2A 16 C0     .ItsInRange:            ld      hl,(P_BnKzlo)                ; we will get unsigned values
1038+ 7367 ED 5B 10 C0                          ld      de,(P_BnKxlo)
1039+ 736B ED 4B 13 C0                          ld      bc,(P_BnKylo)
1040+ 736F 7C                                   ld      a,h
1041+ 7370 B2                                   or      d
1042+ 7371 B0                                   or      b
1043+ 7372 E6 C0                                and     %11000000
1044+ 7374 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1045+ 7375 3A 12 C0     .MakeX2Compliment:      ld      a,(P_BnKxsgn)
1046+ 7378 CB 7F                                bit     7,a
1047+ 737A 28 04                                jr      z,.absXHi
1048+ 737C                                      NegD
1048+ 737C 7A          >                    ld      a,d
1048+ 737D ED 44       >                    neg
1048+ 737F 57          >                    ld      d,a
1049+ 7380 7A           .absXHi:                ld      a,d
1050+ 7381 C6 80                                add     ScannerX
1051+ 7383 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1052+ 7385 CB 3C        .ProcessZCoord:         srl     h
1053+ 7387 CB 3C                                srl     h
1054+ 7389 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_BnKzsgn)
1055+ 738C CB 7F                                bit     7,a
1056+ 738E 28 04                                jr      z,.absZHi
1057+ 7390                                      NegH
1057+ 7390 7C          >                    ld      a,h
1057+ 7391 ED 44       >                    neg
1057+ 7393 67          >                    ld      h,a
1058+ 7394 3E AB        .absZHi:                ld      a,ScannerY
1059+ 7396 94                                   sub     h
1060+ 7397 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1061+ 7399 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1062+ 739B 20 0B                                jr      nz,.StickHasLength
1063+ 739D FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1064+ 739F FD 6F                                ld      iyl,a
1065+ 73A1                                      MMUSelectLayer2
1065+ 73A1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1066+ 73A5 C3 D0 73                             jp      .NoStick
1067+ 73A8 3A 15 C0     .StickHasLength:        ld      a,(P_BnKysgn)                ; if b  =  0 then no line
1068+ 73AB CB 7F                                bit     7,a
1069+ 73AD 28 04                                jr      z,.absYHi
1070+ 73AF                                      NegB
1070+ 73AF 78          >                    ld      a,b
1070+ 73B0 ED 44       >                    neg
1070+ 73B2 47          >                    ld      b,a
1071+ 73B3 FD 7C        .absYHi:                ld      a,iyh
1072+ 73B5 90           .SetStickPos:           sub     b
1073+ 73B6                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1073+ 73B6 FE BE       >                        cp      ScannerBottom
1073+ 73B8 DA BD 73    >                        jp		c, .StickOnScreen
1074+ 73BB 3E BE                                ld      a,ScannerBottom
1075+ 73BD FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1076+ 73BF DD 6F                                ld      ixl,a
1077+ 73C1 FD 44                                ld      b,iyh                       ; from row
1078+ 73C3 DD 4C                                ld      c,ixh                       ; from col
1079+ 73C5 FD 55                                ld      d,iyl                       ; to row
1080+ 73C7 1E B4                                ld      e,L2SunScanner
1081+ 73C9                                      MMUSelectLayer2
1081+ 73C9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1082+ 73CD CD 55 E5                             call    l2_draw_vert_line_to
1083+ 73D0 FD 45        .NoStick:               ld      b,iyl                       ; row
1084+ 73D2 DD 4C                                ld      c,ixh                       ; col
1085+ 73D4 3E FC                                ld      a,L2SunScannerBright
1086+ 73D6 CD B6 E2                             call    l2_plot_pixel
1087+ 73D9 FD 45                                ld      b,iyl
1088+ 73DB DD 4C                                ld      c,ixh
1089+ 73DD 0C                                   inc     c
1090+ 73DE 3E FC                                ld      a,L2SunScannerBright
1091+ 73E0 CD B6 E2                             call    l2_plot_pixel
1092+ 73E3 C9                                   ret
1093+ 73E4
1094+ 73E4
1095+ 73E4              ; As the space station is always ship 0 then we can just use the scanner
1096+ 73E4
1097+ 73E4              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
1098+ 73E4 3A 51 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
1099+ 73E7 CB 67                                bit     4,a                         ; .
1100+ 73E9                                      ;DEBUG ret     z                           ; .
1101+ 73E9 3A 0D C4                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
1102+ 73EC CB 7F                                bit     7,a
1103+ 73EE C0                                   ret     nz
1104+ 73EF              ; DEBUG Add in station types later
1105+ 73EF 2A 26 C0     .NotMissile:            ld      hl,(UBnKzlo)
1106+ 73F2 ED 5B 20 C0                          ld      de,(UBnKxlo)
1107+ 73F6 ED 4B 23 C0                          ld      bc,(UBnKylo)
1108+ 73FA 7C                                   ld      a,h
1109+ 73FB B2                                   or      d
1110+ 73FC B0                                   or      b
1111+ 73FD E6 C0                                and     %11000000
1112+ 73FF C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1113+ 7400 3A 22 C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
1114+ 7403 CB 7F                                bit     7,a
1115+ 7405 28 04                                jr      z,.absXHi
1116+ 7407                                      NegD
1116+ 7407 7A          >                    ld      a,d
1116+ 7408 ED 44       >                    neg
1116+ 740A 57          >                    ld      d,a
1117+ 740B 7A           .absXHi:                ld      a,d
1118+ 740C C6 80                                add     ScannerX
1119+ 740E DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1120+ 7410 CB 3C        .ProcessZCoord:         srl     h
1121+ 7412 CB 3C                                srl     h
1122+ 7414 3A 28 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
1123+ 7417 CB 7F                                bit     7,a
1124+ 7419 28 04                                jr      z,.absZHi
1125+ 741B                                      NegH
1125+ 741B 7C          >                    ld      a,h
1125+ 741C ED 44       >                    neg
1125+ 741E 67          >                    ld      h,a
1126+ 741F 3E AB        .absZHi:                ld      a,ScannerY
1127+ 7421 94                                   sub     h
1128+ 7422 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1129+ 7424 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1130+ 7426 20 2A                                jr      nz,.StickHasLength
1131+ 7428 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1132+ 742A FD 6F                                ld      iyl,a
1133+ 742C DD 7D                                ld      a,ixl
1134+ 742E                                      GetShipColorBright
1134+ 742E 21 CE 6E    >                        ld      hl,ScannerColourTable
1134+ 7431 3A 0D C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1134+ 7434 FE 01       >                        cp      1                        ; for now to bypass hostile missile
1134+ 7436 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1134+ 7438 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
1134+ 743B E6 04       >                        and     ShipIsHostile
1134+ 743D 28 03       >                        jr      z,.UsingColourTable
1134+ 743F 21 D6 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1134+ 7442 3A 0D C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1134+ 7445 CB 27       >                        sla     a                            ; as its byte pairs * 2
1134+ 7447 3C          >                        inc     a
1134+ 7448 ED 31       >                        add     hl,a
1134+ 744A 7E          >                        ld      a,(hl)
1135+ 744B                                      MMUSelectLayer2
1135+ 744B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1136+ 744F C3 9A 74                             jp      .NoStick
1137+ 7452 3A 25 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
1138+ 7455 CB 7F                                bit     7,a
1139+ 7457 28 04                                jr      z,.absYHi
1140+ 7459                                      NegB
1140+ 7459 78          >                    ld      a,b
1140+ 745A ED 44       >                    neg
1140+ 745C 47          >                    ld      b,a
1141+ 745D FD 7C        .absYHi:                ld      a,iyh
1142+ 745F 90           .SetStickPos:           sub     b
1143+ 7460                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1143+ 7460 FE BE       >                        cp      ScannerBottom
1143+ 7462 DA 67 74    >                        jp		c, .StickOnScreen
1144+ 7465 3E BE                                ld      a,ScannerBottom
1145+ 7467 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1146+ 7469                                      GetShipColor
1146+ 7469 21 CE 6E    >                        ld      hl,ScannerColourTable
1146+ 746C 3A 0D C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1146+ 746F FE 01       >                        cp      1                        ; for now to bypass hostile missile
1146+ 7471 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1146+ 7473 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
1146+ 7476 E6 04       >                        and     ShipIsHostile
1146+ 7478 28 03       >                        jr      z,.UsingColourTable
1146+ 747A 21 D6 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1146+ 747D 3A 0D C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1146+ 7480 CB 27       >                        sla     a                            ; as its byte pairs * 2
1146+ 7482 ED 31       >                        add     hl,a
1146+ 7484 7E          >                        ld      a,(hl)
1147+ 7485 DD 6F                                ld      ixl,a
1148+ 7487 FD 44                                ld      b,iyh                       ; from row
1149+ 7489 DD 4C                                ld      c,ixh                       ; from col
1150+ 748B FD 55                                ld      d,iyl                       ; to row
1151+ 748D DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
1152+ 748F E5                                   push    hl
1153+ 7490                                      MMUSelectLayer2
1153+ 7490 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1154+ 7494 CD 55 E5                             call    l2_draw_vert_line_to
1155+ 7497 E1                                   pop     hl
1156+ 7498 23                                   inc     hl
1157+ 7499 7E                                   ld      a,(hl)
1158+ 749A FD 45        .NoStick:               ld      b,iyl                       ; row
1159+ 749C DD 4C                                ld      c,ixh                       ; col
1160+ 749E F5                                   push    af
1161+ 749F CD B6 E2                             call    l2_plot_pixel
1162+ 74A2 F1                                   pop     af
1163+ 74A3 FD 45                                ld      b,iyl
1164+ 74A5 DD 4C                                ld      c,ixh
1165+ 74A7 0C                                   inc     c
1166+ 74A8 CD B6 E2                             call    l2_plot_pixel
1167+ 74AB C9                                   ret
1168+ 74AC
1169+ 74AC
# file closed: ./Views/ConsoleDrawing.asm
1098  74AC                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 74AC
   2+ 74AC
   3+ 74AC              ResetMessageQueue:      ZeroA
   3+ 74AC AF          >                        xor a
   4+ 74AD 32 A9 7D                             ld      (MessageCount),a
   5+ 74B0 32 AA 7D                             ld      (MessageCurrent),a
   6+ 74B3 21 AD 7D                             ld      hl,MessageQueue
   7+ 74B6 11 AB 7D                             ld      de,MessageIndex
   8+ 74B9 06 05                                ld      b,5
   9+ 74BB 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 74BC 12                                   ld      (de),a                              ;
  11+ 74BD 13                                   inc     de                                  ;
  12+ 74BE 7C                                   ld      a,h                                 ;
  13+ 74BF 12                                   ld      (de),a                              ;
  14+ 74C0 13                                   inc     de                                  ;
  15+ 74C1 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 74C3 ED 31                                add     hl,a                                ;
  17+ 74C5 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 74C7 21 AD 7D     .ClearText:             ld      hl,MessageQueue
  19+ 74CA 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 74CD 3E 00                                ld      a,0
  21+ 74CF CD 26 7D                             call	memfill_dma
  22+ 74D2 C9                                   ret
  23+ 74D3
  24+ 74D3              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 74D3              ;                                       IYH = timer for message
  26+ 74D3 3A A9 7D     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 74D6                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 74D6 FE 05       >                        cp    MAXMESSAGES
  27+ 74D8 D0          >                        ret	 nc
  28+ 74D9 3C                                   inc     a
  29+ 74DA 32 A9 7D                             ld      (MessageCount),a                    ; get ready for next message
  30+ 74DD 4F           .AddMessage:            ld      c,a
  31+ 74DE 3A AA 7D                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 74E1 81                                   add     c                                   ;
  33+ 74E2                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 74E2 FE 05       >                        cp      MAXMESSAGES
  33+ 74E4 DA E9 74    >                        jp		c, .ReadyToAdd
  34+ 74E7 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 74E9 21 52 7E     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 74EC ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 74EE 4F                                   ld      c,a                                 ;
  38+ 74EF FD 7C                                ld      a,iyh                               ;
  39+ 74F1 77                                   ld      (hl),a                              ;
  40+ 74F2 79                                   ld      a,c                                 ; get back index
  41+ 74F3 21 AB 7D                             ld      hl,MessageIndex
  42+ 74F6                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 74F6 CB 27       >                    sla         a
  42+ 74F8 ED 31       >                    add         hl,a
  42+ 74FA 7E          >                    ld          a,(hl)
  42+ 74FB 23          >                    inc         hl
  42+ 74FC 66          >                    ld          h,(hl)
  42+ 74FD 6F          >                    ld          l,a
  43+ 74FE EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 74FF                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 74FF 7E          >.CopyLoop:              ld      a,(hl)
  44+ 7500 12          >                        ld      (de),a
  44+ 7501 FE 00       >                        cp      0
  44+ 7503 CA 0A 75    >                        jp      z,.DoneCopy
  44+ 7506 23          >                        inc     hl
  44+ 7507 13          >                        inc     de
  44+ 7508 18 F5       >                        jr      .CopyLoop
  44+ 750A             >.DoneCopy:
  45+ 750A C9                                   ret
  46+ 750B
  47+ 750B 3A AA 7D     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 750E 21 52 7E                             ld      hl,MessageTimeout
  49+ 7511 ED 31                                add     hl,a
  50+ 7513 7E                                   ld      a,(hl)
  51+ 7514 3D                                   dec     a
  52+ 7515 28 02                                jr      z,.UpdateQueue
  53+ 7517 77           .UpdateTimer            ld      (hl),a
  54+ 7518 C9                                   ret
  55+ 7519 77           .UpdateQueue:           ld      (hl),a
  56+ 751A 21 A9 7D                             ld      hl,MessageCount
  57+ 751D 35                                   dec     (hl)
  58+ 751E 3A AA 7D                             ld      a,(MessageCurrent)
  59+ 7521 23                                   inc     hl
  60+ 7522                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 7522 FE 05       >                        cp      MAXMESSAGES
  60+ 7524 DA 28 75    >                        jp		c, .ReadyToUpdate
  61+ 7527              .CircularQueue:         ZeroA
  61+ 7527 AF          >                        xor a
  62+ 7528 32 AA 7D     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 752B C9                                   ret
  64+ 752C
  65+ 752C 3A A9 7D     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 752F                                      ReturnIfAIsZero
  66+ 752F A7          >                        and     a
  66+ 7530 C8          >                        ret     z
  67+ 7531 3A AA 7D                             ld      a,(MessageCurrent)
  68+ 7534 21 AB 7D                             ld      hl,MessageIndex
  69+ 7537                                      HLEquAddrAtHLPlusA
  69+ 7537 CB 27       >                    sla         a
  69+ 7539 ED 31       >                    add         hl,a
  69+ 753B 7E          >                    ld          a,(hl)
  69+ 753C 23          >                    inc         hl
  69+ 753D 66          >                    ld          h,(hl)
  69+ 753E 6F          >                    ld          l,a
  70+ 753F                                      MMUSelectLayer1
  70+ 753F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 7543 11 01 00                             ld      de,MESSAGELINE
  72+ 7546 CD 24 E1                             call    l1_print_at_wrap
  73+ 7549 C9                                   ret
  74+ 754A
  75+ 754A              HyperSpaceMessage:      MMUSelectLayer1
  75+ 754A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 754E 11 E1 66     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 7551 21 8E 8E                             ld      hl,name_expanded
  78+ 7554                                      ldCopyTextAtHLtoDE
  78+ 7554 7E          >.CopyLoop:              ld      a,(hl)
  78+ 7555 12          >                        ld      (de),a
  78+ 7556 FE 00       >                        cp      0
  78+ 7558 CA 5F 75    >                        jp      z,.DoneCopy
  78+ 755B 23          >                        inc     hl
  78+ 755C 13          >                        inc     de
  78+ 755D 18 F5       >                        jr      .CopyLoop
  78+ 755F             >.DoneCopy:
  79+ 755F AF           .DoneName:              xor     a
  80+ 7560 12                                   ld      (de),a
  81+ 7561 32 FD 66                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 7564 21 DE 66     .CentreJustify:         ld      hl,Hyp_message
  83+ 7567                                      HalfLengthHL
  83+ 7567 06 00       >                        ld      b,0
  83+ 7569 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 756A FE 00       >                        cp      0
  83+ 756C 28 04       >                        jr      z,.DoneCount
  83+ 756E 04          >                        inc     b
  83+ 756F 23          >                        inc     hl
  83+ 7570 18 F7       >                        jr      .CountLenLoop
  83+ 7572 3E 20       >.DoneCount:             ld      a,32
  83+ 7574 90          >                        sub     b
  83+ 7575 CB 2F       >                        sra     a
  84+ 7577 21 18 67                             ld      hl,Hyp_centeredTarget
  85+ 757A                                      ldClearTextLoop 32
  85+ 757A 47          >                        ld      b,a
  85+ 757B 3E 20       >                        ld      a,32
  85+ 757D 77          >.ClearLoop:             ld      (hl),a
  85+ 757E 23          >                        inc     hl
  85+ 757F 10 FC       >                        djnz    .ClearLoop
  86+ 7581 EB                                   ex      de,hl
  87+ 7582 21 DE 66                             ld      hl,Hyp_message
  88+ 7585                                      ldCopyTextAtHLtoDE
  88+ 7585 7E          >.CopyLoop:              ld      a,(hl)
  88+ 7586 12          >                        ld      (de),a
  88+ 7587 FE 00       >                        cp      0
  88+ 7589 CA 90 75    >                        jp      z,.DoneCopy
  88+ 758C 23          >                        inc     hl
  88+ 758D 13          >                        inc     de
  88+ 758E 18 F5       >                        jr      .CopyLoop
  88+ 7590             >.DoneCopy:
  89+ 7590                                      ZeroA
  89+ 7590 AF          >                        xor a
  90+ 7591 32 38 67                             ld      (Hyp_centeredEol),a
  91+ 7594 21 14 67                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 7597 3E 20                                ld      a,32                     ; clear counter digits
  93+ 7599 77                                   ld      (hl),a                   ; clear counter digits
  94+ 759A 23                                   inc     hl                       ; clear counter digits
  95+ 759B 77                                   ld      (hl),a                   ; clear counter digits
  96+ 759C 23                                   inc     hl                       ; clear counter digits
  97+ 759D 77                                   ld      (hl),a                   ; clear counter digits
  98+ 759E CD BA 66                             call    UpdateCountdownNumber
  99+ 75A1 21 0B 67                             ld      hl,Hyp_charging
 100+ 75A4                                      HalfLengthHL
 100+ 75A4 06 00       >                        ld      b,0
 100+ 75A6 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 75A7 FE 00       >                        cp      0
 100+ 75A9 28 04       >                        jr      z,.DoneCount
 100+ 75AB 04          >                        inc     b
 100+ 75AC 23          >                        inc     hl
 100+ 75AD 18 F7       >                        jr      .CountLenLoop
 100+ 75AF 3E 20       >.DoneCount:             ld      a,32
 100+ 75B1 90          >                        sub     b
 100+ 75B2 CB 2F       >                        sra     a
 101+ 75B4 21 59 67                             ld      hl,Hyp_centeredCharging
 102+ 75B7                                      ldClearTextLoop 32
 102+ 75B7 47          >                        ld      b,a
 102+ 75B8 3E 20       >                        ld      a,32
 102+ 75BA 77          >.ClearLoop:             ld      (hl),a
 102+ 75BB 23          >                        inc     hl
 102+ 75BC 10 FC       >                        djnz    .ClearLoop
 103+ 75BE EB                                   ex      de,hl
 104+ 75BF 21 0B 67                             ld      hl,Hyp_charging
 105+ 75C2                                      ldCopyTextAtHLtoDE
 105+ 75C2 7E          >.CopyLoop:              ld      a,(hl)
 105+ 75C3 12          >                        ld      (de),a
 105+ 75C4 FE 00       >                        cp      0
 105+ 75C6 CA CD 75    >                        jp      z,.DoneCopy
 105+ 75C9 23          >                        inc     hl
 105+ 75CA 13          >                        inc     de
 105+ 75CB 18 F5       >                        jr      .CopyLoop
 105+ 75CD             >.DoneCopy:
 106+ 75CD AF                                   xor     a
 107+ 75CE 32 79 67                             ld      (Hyp_centeredEol2),a
 108+ 75D1 2A 49 80     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 75D4 2D                                   dec     l
 110+ 75D5 20 26                                jr      nz,.decHyperInnerOnly
 111+ 75D7 25                                   dec     h
 112+ 75D8 FA 01 76                             jp      m,.HyperCountDone
 113+ 75DB 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 75DD E5                                   push    hl
 115+ 75DE 16 0C                                ld      d,12
 116+ 75E0 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 75E2 CD 9A E0                             call    l1_attr_cls_2DlinesA
 118+ 75E5 16 60                                ld      d,12 * 8
 119+ 75E7 CD 83 E0                             call    l1_cls_2_lines_d
 120+ 75EA 11 00 60                             ld      de,$6000
 121+ 75ED 21 18 67                             ld      hl,Hyp_centeredTarget
 122+ 75F0 CD D7 E0                             call    l1_print_at
 123+ 75F3 11 00 68                             ld      de,$6800
 124+ 75F6 21 59 67                             ld      hl,Hyp_centeredCharging
 125+ 75F9 CD D7 E0                             call    l1_print_at
 126+ 75FC E1                                   pop     hl
 127+ 75FD 22 49 80     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 7600 C9                                   ret
 129+ 7601 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 7604 22 49 80                             ld      (InnerHyperCount),hl
 131+ 7607 16 0C                                ld      d,12
 132+ 7609 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 760B CD 9A E0                             call    l1_attr_cls_2DlinesA
 134+ 760E 16 60                                ld      d,12 * 8
 135+ 7610 CD 83 E0                             call    l1_cls_2_lines_d
 136+ 7613                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 7613 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 7615 32 99 69    >                        ld      (ScreenTransitionForced), a
 137+ 7618 C9                                   ret
 138+ 7619
# file closed: ./Tables/message_queue.asm
1099  7619                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 7619              ; LaserTypeTable
   2+ 7619              ; laser type = id of laser
   3+ 7619              ; laser pulse pause = time before next pulse
   4+ 7619              ; laser pulse duration = time laser is on per shot
   5+ 7619              ; laser damage output
   6+ 7619              ;
   7+ 7619              ; LaserType
   8+ 7619              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 7619              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 7619              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 7619              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 7619              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 7619              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 7619              ; LaserHeat                               ; amount of heat generated
  15+ 7619              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 7619              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 7619              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 7619              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 7619              ;
  20+ 7619              LaserStatsTableWidth    EQU 12
  21+ 7619              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 7619              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 7619 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 761D 40 03 10 02
  23+ 7621 20 10 00 00
  24+ 7625 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 7629 20 03 10 08
  24+ 762D 20 10 00 01
  25+ 7631 02 03 06 06                          DB $02, $03, $06, $06, $3A, $03, $05, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 7635 3A 03 05 02
  25+ 7639 20 10 00 02
  26+ 763D 03 01 05 05                          DB $03, $01, $05, $05, $01, $02, $04, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 7641 01 02 04 05
  26+ 7645 30 10 00 03
  27+ 7649 04 01 01 00                          DB $04, $01, $01, $00, $00, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 764D 00 03 03 10
  27+ 7651 20 10 00 04
  28+ 7655 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 7659 60 03 02 02
  28+ 765D 20 10 00 05
  29+ 7661 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 7665 06 05 05 05
  29+ 7669 10 10 00 08
  30+ 766D 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 7671 20 22 01 30
  30+ 7675 30 11 01 10
  31+ 7679 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 767D 80 70 02 03
  31+ 7681 60 11 01 10
  32+ 7685
  33+ 7685
  34+ 7685
  35+ 7685
  36+ 7685
  37+ 7685
  38+ 7685
# file closed: ./Tables/LaserStatsTable.asm
1100  7685                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 7685              ; Note when selecting its skewed by rank which ads a filter so bigger ships should be later in the table
   2+ 7685              ; More optimal will be to order all the ships and then have an entry point and length of tablea
   3+ 7685
   4+ 7685              ; Each ship type table is constructed as follows
   5+ 7685              ; Header - nbr of ships
   6+ 7685              ; table of min rank
   7+ 7685              ; table of ship ids
   8+ 7685              ; note unless "SelectSpawnType" is changed we can't put this in location $0000 as it doesn't check L in HL for speed (thsi could be done though)
   9+ 7685
  10+ 7685              ; we may nneed to rebuidl these tables for cp instruction so its max rank not min
  11+ 7685              ; Coding limit for simplicity, each table has 15 ships in it
  12+ 7685 00 00 01 01  ShipPirateTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQMostly,   RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQDeadly,    RankingEQDeadly
  12+ 7689 02 03 07 07
  13+ 768D 23 00 02 0B  ShipPirateTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Asp_Mk_2,   ShipID_Cobra_Mk_3_P, ShipID_Boulder,    ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  13+ 7691 05 07 1F 01
  14+ 7695
  15+ 7695 00 01 03 07  ShipPirateTableBRank:    DB RankingEQHarmless, RankingEQMostly,   RankingEQAverage,  RankingEQDeadly,     RankingEQDeadly,   RankingEQAbove,     RankingEQCompetent, RankingEQCompetent
  15+ 7699 07 04 05 05
  16+ 769D 08 2A 2B 1F  ShipPirateTableB:        DB ShipID_Chameleon,  ShipID_Worm,       ShipID_Rattler,    ShipID_Python_P,     ShipID_Anaconda,   ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  16+ 76A1 01 07 1F 01
  17+ 76A5
  18+ 76A5 00 00 00 00  ShipBodiesTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQHarmless,  RankingEQDangerous
  18+ 76A9 00 00 00 06
  19+ 76AD 06 06 06 06  ShipBodiesTableA:        DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,     ShipID_Asteroid,   ShipID_Asteroid,    ShipID_Asteroid,    ShipID_Rock_Hermit
  19+ 76B1 06 06 06 20
  20+ 76B5
  21+ 76B5 00 00 00 01  ShipNonTraderTableARank: DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQAverage,   RankingEQCompetent
  21+ 76B9 02 03 03 05
  22+ 76BD 00 23 00 18  ShipNonTraderTableA:     DB ShipID_Adder,      ShipID_Sidewinder, ShipID_Adder,      ShipID_Mamba,        ShipID_Krait,      ShipID_Gecko,       ShipID_Python,      ShipID_Anaconda
  22+ 76C1 16 13 1E 01
  23+ 76C5
  24+ 76C5 00 00 00 00  ShipCopTableARank:       DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQAverage,   RankingEQCompetent
  24+ 76C9 00 00 03 05
  25+ 76CD 29 29 29 29  ShipCopTableA:           DB ShipID_Viper,      ShipID_Viper,      ShipID_Viper,      ShipID_Viper,        ShipID_Viper,      ShipID_Viper,       ShipID_Python,      ShipID_Anaconda
  25+ 76D1 29 29 1E 01
  26+ 76D5
  27+ 76D5 00 01 02 03  ShipHunterTableRank:     DB RankingEQHarmless, RankingEQMostly,   RankingEQPoor,     RankingEQAverage,    RankingEQAbove,    RankingEQCompetent, RankingEQCompetent, RankingEQCompetent
  27+ 76D9 04 05 05 05
  28+ 76DD 23 00 03 1E  ShipHunterTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Boa,        ShipID_Python,       ShipID_Krait,      ShipID_Fer_De_Lance,ShipID_Mamba,       ShipID_Cougar
  28+ 76E1 16 12 18 0E
  29+ 76E5
  30+ 76E5 00 05 05 06  ShipHunterTableBRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQCompetent,RankingEQDangerous,  RankingEQDangerous,RankingEQDangerous, RankingEQDeadly,    RankingEQDeadly
  30+ 76E9 06 06 07 07
  31+ 76ED 23 00 15 1E  ShipHunterTableB:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Iguana,     ShipID_Python,       ShipID_Dragon,     ShipID_Gecko,       ShipID_Mamba,       ShipID_Anaconda
  31+ 76F1 10 13 18 01
  32+ 76F5
  33+ 76F5 00 05 06 06  ShipHunterTableCRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQDangerous,RankingEQDangerous,  RankingEQDeadly,   RankingEQElite,     RankingEQSkollob,   RankingEQNutter
  33+ 76F9 07 08 09 0A
  34+ 76FD 00 1A 1B 10  ShipHunterTableC:        DB ShipID_Adder,      ShipID_Monitor,    ShipID_Moray,      ShipID_Dragon,       ShipID_Gecko,      ShipID_Ghavial,     ShipID_Ophidian,    ShipID_Thargoid
  34+ 7701 13 14 1C 26
  35+ 7705
  36+ 7705 00 00 00 00  ShipJunkTableRankA:      DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQAverage,   RankingEQAbove,     RankingEQCompetent
  36+ 7709 00 03 04 05
  37+ 770D 06 06 06 1D  ShipJunkTableA:          DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Plate,        ShipID_CargoType5, ShipID_Splinter,    ShipID_Escape_Pod,  ShipID_Rock_Hermit
  37+ 7711 04 24 11 20
  38+ 7715
  39+ 7715              ShipSuperstructureTableA
  40+ 7715
  41+ 7715
  42+ 7715              ; This is determined by system algorithm so there is no rank factor
  43+ 7715 0D           MasterStations:         DB ShipID_Coriolis
  44+ 7716 0F                                   DB ShipID_Dodo
  45+ 7717
  46+ 7717 19           ShipMissileTable        DB  ShipID_Missile
  47+ 7718              ShipMissileTableSize    EQU $ - ShipMissileTable
  48+ 7718
  49+ 7718
  50+ 7718
  51+ 7718              ;; clean up below or delte
  52+ 7718              ;ShipPirateTable:
  53+ 7718              ;ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
  54+ 7718              ;ShipPackTableSize       EQU $ - ShipPackList
  55+ 7718              ;ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
  56+ 7718              ;ShipHunterTableSize     EQU $ - ShipHunterTable
  57+ 7718              ;
  58+ 7718              ;MasterShipTable:
  59+ 7718              ;MasterStations:         DB ShipID_Coriolis
  60+ 7718              ;                        DB ShipID_Dodo
  61+ 7718              ;
  62+ 7718              ;
  63+ 7718              ;
  64+ 7718              ;MasterJunk:             DB ShipID_Asteroid
  65+ 7718              ;                        DB ShipID_Plate
  66+ 7718              ;                        DB ShipID_CargoType5
  67+ 7718              ;                        DB ShipID_Splinter
  68+ 7718              ;                        DB ShipID_Escape_Pod
  69+ 7718              ;                        DB ShipID_Rock_Hermit
  70+ 7718              ;MasterSuperstructure:
  71+ 7718              ;MasterMissile:          DB ShipID_Missile
  72+ 7718
  73+ 7718
  74+ 7718
  75+ 7718
  76+ 7718
  77+ 7718 26           MasterThargoid:         DB ShipID_Thargoid
  78+ 7719 27                                   DB ShipID_Thargon
  79+ 771A
  80+ 771A 0C           MasterMission:          DB ShipID_Constrictor
  81+ 771B
  82+ 771B
  83+ 771B
  84+ 771B
  85+ 771B
  86+ 771B 17                                   DB ShipID_Logo
  87+ 771C 25                                   DB ShipID_TestVector
  88+ 771D
# file closed: ./Tables/ShipClassTable.asm
1101  771D
1102  771D AF           SeedGalaxy0:            xor     a
1103  771E                                      MMUSelectGalaxyA
1103  771E ED 92 57    >                     nextreg GalaxyDataMMU,     a
1104  7721 DD 21 16 E0                          ld      ix,galaxy_data
1105  7725 AF                                   xor		a
1106  7726 32 8F 7E                             ld		(XSAV),a
1107  7729 CD 6F 84                             call    copy_galaxy_to_system
1108  772C DD E5        SeedGalaxy0Loop:        push    ix
1109  772E D1                                   pop     de
1110  772F 21 02 7F                             ld      hl,SystemSeed
1111  7732 CD 75 84                             call    copy_seed
1112  7735 DD E5                                push    ix
1113  7737 E1                                   pop     hl
1114  7738 ED 34 08 00                          add     hl,8
1115  773C E5                                   push    hl
1116  773D DD E1                                pop     ix
1117  773F CD AA 84                             call    next_system_seed
1118  7742 3A 8F 7E                             ld		a,(XSAV)
1119  7745 3D                                   dec		a
1120  7746 FE 00                                cp		0
1121  7748 C8                                   ret		z
1122  7749 32 8F 7E                             ld		(XSAV),a
1123  774C 20 DE                                jr      nz,SeedGalaxy0Loop
1124  774E C9                                   ret
1125  774F
1126  774F
1127  774F
1128  774F
1129  774F                  ;include "./ModelRender/testdrawing.asm"
1130  774F                  IFDEF SKIPATTRACT
1131  774F ~                    DISPLAY "NOT LOADING ATTRACT MODE CODE"
1132  774F                  ELSE
1133  774F                      include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 774F              AttractDuration            EQU $00F0
   2+ 774F              AttractCounterStart        EQU $80
   3+ 774F F0 00        AttractTimer:              DW      AttractDuration
   4+ 7751 80           AttractCounter:            DB      AttractCounterStart
   5+ 7752
   6+ 7752 3D 08        Attract_boiler_text		DW $083D
   7+ 7754
   8+ 7754
   9+ 7754 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 7758 20 43 6F 6D
   9+ 775C 6D 61 6E 64
   9+ 7760 65 72 20 28
   9+ 7764 59 2F 4E 29
   9+ 7768 00
  10+ 7769
  11+ 7769 FF           LocalXCounter           DB $FF
  12+ 776A FF           LocalZCounter           DB $FF
  13+ 776B 00           LastInterrupt           DB 0
  14+ 776C
  15+ 776C CD 1C 84     RandomXCounter:         call    doRandom
  16+ 776F C0                                   ret     nz
  17+ 7770 3A 69 77                             ld      a,(LocalXCounter)
  18+ 7773 EE 80                                xor     $80
  19+ 7775 32 69 77                             ld      (LocalXCounter),a
  20+ 7778 C9                                   ret
  21+ 7779
  22+ 7779 CD 1C 84     RandomYCounter:         call    doRandom
  23+ 777C C0                                   ret     nz
  24+ 777D                                      ;ReturnIfALTNusng 254
  25+ 777D 3A 6A 77                             ld      a,(LocalZCounter)
  26+ 7780 EE 80                                xor     $80
  27+ 7782 32 6A 77                             ld      (LocalZCounter),a
  28+ 7785 C9                                   ret
  29+ 7786
  30+ 7786
  31+ 7786              AttractModeInit:        MMUSelectLayer1
  31+ 7786 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  32+ 778A CD 8F E0                             call	l1_cls
  33+ 778D 3E 07                                ld		a,7
  34+ 778F CD AA E0                             call	l1_attr_cls_to_a
  35+ 7792 1E FF                                ld      e,$FF
  36+ 7794 ED 5B 52 77                          ld      de,(Attract_boiler_text)
  37+ 7798 21 54 77                             ld      hl,ATTR_LoadCommander
  38+ 779B CD D7 E0                             call    l1_print_at
  39+ 779E                                      MMUSelectSpriteBank
  39+ 779E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  40+ 77A2 CD 6E E5                             call        sprite_cls_cursors
  41+ 77A5              .ClearLayer2:           MMUSelectLayer2
  41+ 77A5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  42+ 77A9 CD 04 E0                             call    asm_l2_double_buffer_on
  43+ 77AC CD 0E E2                             call    l2_cls
  44+ 77AF CD 97 E2                             call    l2_flip_buffers
  45+ 77B2 CD 0E E2                             call    l2_cls
  46+ 77B5                                      MMUSelectConsoleBank
  46+ 77B5 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  47+ 77B9 21 00 50     .LoadConsole:           ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  48+ 77BC 11 00 E0                             ld          de,ConsoleImageData
  49+ 77BF 01 00 08                             ld          bc, ScreenL1BottomLen
  50+ 77C2 CD 4C 7D                             call        memcopy_dma
  51+ 77C5 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  52+ 77C8 11 00 E8                             ld          de,ConsoleAttributes
  53+ 77CB 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  54+ 77CE CD 4C 7D                             call        memcopy_dma
  55+ 77D1 3A 88 7E                             ld          a,(InterruptCounter)
  56+ 77D4 32 6B 77                             ld          (LastInterrupt),a
  57+ 77D7 CD 8C 78                             call        SelectARandomShip
  58+ 77DA C9                                   ret
  59+ 77DB
  60+ 77DB
  61+ 77DB              ;.StartShip:             ld          a,(InterruptCounter)
  62+ 77DB              ;                        ld          hl,LastInterrupt
  63+ 77DB              ;                        cp          (hl)
  64+ 77DB              ;                        jp          z,.StartShip            ; we only refresh once per interupt
  65+ 77DB              ;                        ld          (hl),a
  66+ 77DB
  67+ 77DB              AttractModeMain:        MMUSelectKeyboard
  67+ 77DB ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  68+ 77DF CD 03 E1                             call    scan_keyboard
  69+ 77E2 3E 50                                ld      a,c_Pressed_Yes
  70+ 77E4                                      MMUSelectKeyboard
  70+ 77E4 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  71+ 77E8 CD 95 E1                             call    is_key_up_state
  72+ 77EB 20 0E                                jr      nz,.YPressed
  73+ 77ED 3E 52                                ld      a,c_Pressed_No
  74+ 77EF                                      MMUSelectKeyboard
  74+ 77EF ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  75+ 77F3 CD 95 E1                             call    is_key_up_state
  76+ 77F6 20 06                                jr      nz,.NPressed
  77+ 77F8 C3 DB 77                             jp      AttractModeMain
  78+ 77FB 3E 00        .YPressed:              ld      a,0
  79+ 77FD C9                                   ret
  80+ 77FE 3E FF        .NPressed:              ld      a,$FF
  81+ 7800 C9                                   ret
  82+ 7801
  83+ 7801              ; alternate interrupts, one clears back buffer, one processes ship, one draws ship
  84+ 7801 00           AttractStep             DB      0
  85+ 7802
  86+ 7802 2A 4F 77     AttractModeUpdate:      ld      hl,(AttractTimer)
  87+ 7805 2B                                   dec     hl
  88+ 7806 22 4F 77                             ld      (AttractTimer),hl
  89+ 7809 7C                                   ld      a,h
  90+ 780A B5                                   or      l
  91+ 780B C2 12 78                             jp      nz,.DrawShip
  92+ 780E CD 8C 78                             call    SelectARandomShip
  93+ 7811 C9                                   ret
  94+ 7812              .DrawShip:              ;BREAK
  95+ 7812 CD 1C 84     .RandomRotateShip:      call    doRandom
  96+ 7815                                      MMUSelectUniverseN  1
  96+ 7815 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  97+ 7819 3A 01 78                             ld      a,(AttractStep)
  98+ 781C A7                                   and     a       ; 0
  99+ 781D CA 27 78                             jp      z,.ApplyShipRollAndPitch
 100+ 7820 3D                                   dec     a       ; 1
 101+ 7821 CA 46 78                             jp      z,.ProcessNodes
 102+ 7824 C3 4F 78                             jp      .PrepLines ; 2
 103+ 7827
 104+ 7827 CD 57 D7     .ApplyShipRollAndPitch: call    ApplyShipRollAndPitch
 105+ 782A CD 6C 77                             call    RandomXCounter
 106+ 782D CD 79 77                             call    RandomYCounter
 107+ 7830 3A 69 77                             ld      a,(LocalXCounter)
 108+ 7833 32 48 C0                             ld      (UBnKRotXCounter),a
 109+ 7836 3A 6A 77                             ld      a,(LocalZCounter)
 110+ 7839 32 49 C0                             ld      (UBnKRotZCounter),a
 111+ 783C              .ClearScreen:           MMUSelectLayer2
 111+ 783C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ 7840 CD 8E E1                             call    l2_cls_upper_two_thirds
 113+ 7843 C3 7D 78                             jp      .DoneIM2
 114+ 7846 CD 18 DA     .ProcessNodes:          call    ProcessNodes
 115+ 7849 CD C2 D0     .CullV2:                call    CullV2
 116+ 784C C3 7D 78                             jp      .DoneIM2
 117+ 784F CD 5B DC     .PrepLines:             call    PrepLines
 118+ 7852                                      ;break
 119+ 7852                      IFDEF LATECLIPPING
 120+ 7852 CD 45 D9     .DrawLines:             call    DrawLinesLateClipping
 121+ 7855                                      ;break
 122+ 7855                      ELSE
 123+ 7855 ~            .DrawLines:             call    DrawLines
 124+ 7855                      ENDIF
 125+ 7855 01 01 01     .Drawbox:               ld		bc,$0101
 126+ 7858 11 FD 7F                             ld		de,$7FFD
 127+ 785B 3E C0                                ld		a,$C0
 128+ 785D                                      ;break
 129+ 785D                                      MMUSelectLayer2
 129+ 785D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 130+ 7861 CD F9 E3                             call	l2_draw_box
 131+ 7864 CD 97 E2     .DoubleBuffer:          call    l2_flip_buffers
 132+ 7867 3A 51 77     .UpdateZPosIfReady:     ld      a,(AttractCounter)
 133+ 786A                                      ;break
 134+ 786A A7                                   and     a
 135+ 786B CA 7D 78                             jp      z,.DoneIM2
 136+ 786E 3D                                   dec     a
 137+ 786F 32 51 77                             ld      (AttractCounter),a
 138+ 7872 2A 26 C0                             ld      hl, (UBnKzlo)
 139+ 7875 11 08 00     .UpdatePos:             ld      de, $0008
 140+ 7878 ED 52                                sbc     hl,de
 141+ 787A 22 26 C0                             ld      (UBnKzlo),hl
 142+ 787D 3A 01 78     .DoneIM2:               ld      a,(AttractStep)
 143+ 7880 3C                                   inc     a
 144+ 7881 FE 03                                cp      3
 145+ 7883 32 01 78                             ld      (AttractStep),a
 146+ 7886 C0                                   ret     nz
 147+ 7887                                      ZeroA
 147+ 7887 AF          >                        xor a
 148+ 7888 32 01 78                             ld      (AttractStep),a
 149+ 788B                                      ;break
 150+ 788B C9                                   ret
 151+ 788C
 152+ 788C
 153+ 788C
 154+ 788C 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
 155+ 788E                                      MMUSelectUniverseN  1
 155+ 788E ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 156+ 7892                                      MMUSelectShipBank1
 156+ 7892 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 157+ 7896 FD 26 01                             ld      iyh, 1
 158+ 7899 CD 1C 84     .SelectRandom:          call    doRandom
 159+ 789C                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
 159+ 789C FE 2C       >                        cp     ShipID_Rattler+1
 159+ 789E D2 99 78    >                        jp		nc,.SelectRandom
 160+ 78A1 FD 6F                                ld      iyl,a
 161+ 78A3 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 162+ 78A6                                      MMUSelectShipBankA
 162+ 78A6 ED 92 57    >					 nextreg ShipModelMMU,	    a
 163+ 78A9 78                                   ld      a,b
 164+ 78AA CD 6A E0                             call    CopyShipToUniverse
 165+ 78AD 3A 0D C4                             ld      a,(ShipTypeAddr)
 166+ 78B0 CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
 167+ 78B2 20 E5                                jr      nz,.SelectRandom
 168+ 78B4 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
 169+ 78B6 CD 48 C8                             call    UnivInitRuntime
 170+ 78B9 CD 56 C7                             call    UnivSetDemoPostion
 171+ 78BC 21 E0 01                             ld      hl,AttractDuration*2
 172+ 78BF 22 4F 77                             ld      (AttractTimer),hl
 173+ 78C2 3E 80                                ld      a, AttractCounterStart
 174+ 78C4 32 51 77                             ld      (AttractCounter),a
 175+ 78C7                                      ZeroA
 175+ 78C7 AF          >                        xor a
 176+ 78C8 32 01 78                             ld      (AttractStep),a
 177+ 78CB C9                                   ret
 178+ 78CC
 179+ 78CC
 180+ 78CC
# file closed: ./Menus/AttractMode.asm
1134  78CC                  ENDIF
1135  78CC
1136  78CC                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 78CC              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 78CC              ; so xx12 = XX15 * XX16 row
   3+ 78CC              XX12ProcessOneRow:
   4+ 78CC              XX12CalcXCell:
   5+ 78CC ED 4B A6 C0          ld		bc,(UBnkXScaled)
   6+ 78D0 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 78D1 23           		inc		hl
   8+ 78D2 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 78D3 7A           		ld		a,d
  10+ 78D4 A8                   xor     b
  11+ 78D5 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 78D7 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 78D9 78           		ld		a,b                                     ; now make bc abs bc
  14+ 78DA E6 7F        		and		SignMask8Bit
  15+ 78DC 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 78DD E5           		push	hl
  17+ 78DE 16 00                ld      d,0                                     ; d = value
  18+ 78E0 60           		ld		h,b
  19+ 78E1 69           		ld		l,c
  20+ 78E2 CD 97 91     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 78E5 22 67 7D     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 78E8 DD 7C        		ld		a,ixh
  23+ 78EA 32 6E 7D     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 78ED E1           		pop		hl
  25+ 78EE              XX12CalcYCell:
  26+ 78EE ED 4B A8 C0          ld		bc,(UBnkYScaled)
  27+ 78F2 23           		inc		hl
  28+ 78F3 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 78F4 23           		inc		hl
  30+ 78F5 56           		ld		d,(hl)
  31+ 78F6 7A           		ld		a,d
  32+ 78F7 A8                   xor     b
  33+ 78F8 E6 80        		and		SignOnly8Bit
  34+ 78FA DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 78FC 78           		ld		a,b                                     ; now make bc abs bc
  36+ 78FD E6 7F        		and		SignMask8Bit
  37+ 78FF 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 7900 E5           		push	hl
  39+ 7901 16 00                ld      d,0                                     ; d = value
  40+ 7903 60           		ld		h,b
  41+ 7904 69           		ld		l,c
  42+ 7905 CD 97 91     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 7908 22 69 7D     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 790B DD 7C        		ld		a,ixh
  45+ 790D 32 6D 7D     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 7910 E1           		pop		hl
  47+ 7911              XX12CalcZCell:
  48+ 7911 ED 4B AA C0          ld		bc,(UBnkZScaled)
  49+ 7915 23           		inc		hl
  50+ 7916 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 7917 23           		inc		hl
  52+ 7918 56           		ld		d,(hl)
  53+ 7919 7A           		ld		a,d
  54+ 791A A8                   xor     b
  55+ 791B E6 80        		and		SignOnly8Bit
  56+ 791D DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 791F 78           		ld		a,b                                     ; now make bc abs bc
  58+ 7920 E6 7F        		and		SignMask8Bit
  59+ 7922 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 7923 16 00                ld      d,0                                     ; d = value
  61+ 7925 60           		ld		h,b
  62+ 7926 69           		ld		l,c
  63+ 7927 CD 97 91     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 792A 22 6B 7D     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 792D DD 7C        		ld		a,ixh
  66+ 792F 32 6F 7D     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 7932              XX12CalcCellResult:
  68+ 7932 2A 67 7D     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 7935 ED 5B 69 7D  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 7939 ED 4B 6D 7D  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 793D              XX12MSBOnly:
  72+ 793D 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 793E 5A           		ld		e,d									    ; for both results
  74+ 793F AF           		xor		a									    ;
  75+ 7940 67           		ld		h,a									    ;
  76+ 7941 57           		ld		d,a									    ; so set high byte to 0
  77+ 7942 CD FF 8E     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 7945 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 7946 3A 6F 7D     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 7949 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 794A ED 5B 6B 7D  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 794E 5A           		ld		e,d                                     ; d = result /256
  83+ 794F 16 00        		ld		d,0									    ; and only us high byte
  84+ 7951 CD FF 8E     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 7954 C9           		ret											    ; hl = result, a = sign
  86+ 7955              								    ; hl = result, a = sign
  87+ 7955
  88+ 7955              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 7955              ;...X cell
  90+ 7955 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 7958 CD CC 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 795B 47           		ld		b,a                                 ; b = sign
  93+ 795C 7C           		ld		a,h                                 ; a = high byte
  94+ 795D B0           		or		b
  95+ 795E 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 7961 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 7962 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 7965              ;...Y cell
  99+ 7965 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 7968 CD CC 78             call    XX12ProcessOneRow
 101+ 796B 47           		ld		b,a
 102+ 796C 7C           		ld		a,h
 103+ 796D              ;		ld		a,l
 104+ 796D B0           		or		b
 105+ 796E 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 7971 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 7972 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 7975              ;...Z cell
 109+ 7975 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 7978 CD CC 78             call    XX12ProcessOneRow
 111+ 797B 47           		ld		b,a
 112+ 797C 7C                   ld		a,h
 113+ 797D              ;		ld		a,l
 114+ 797D B0           		or		b
 115+ 797E 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 7981 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 7982 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 7985 C9                   ret
 119+ 7986
 120+ 7986              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 7986              ;...X cell
 122+ 7986 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 7989 CD CC 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 798C 47           		ld		b,a                                 ; b = sign
 125+ 798D 7C           		ld		a,h                                 ; a = high byte
 126+ 798E B0           		or		b
 127+ 798F 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 7992 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 7993 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 7996              ;...Y cell
 131+ 7996 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 7999 CD CC 78             call    XX12ProcessOneRow
 133+ 799C 47           		ld		b,a
 134+ 799D 7C           		ld		a,h
 135+ 799E              ;		ld		a,l
 136+ 799E B0           		or		b
 137+ 799F 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 79A2 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 79A3 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 79A6              ;...Z cell
 141+ 79A6 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 79A9 CD CC 78             call    XX12ProcessOneRow
 143+ 79AC 47           		ld		b,a
 144+ 79AD 7C                   ld		a,h
 145+ 79AE              ;		ld		a,l
 146+ 79AE B0           		or		b
 147+ 79AF 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 79B2 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 79B3 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 79B6 C9                   ret
 151+ 79B7
 152+ 79B7              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 79B7              ;...X cell
 154+ 79B7 21 61 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 79BA CD CC 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 79BD 47           		ld		b,a                                 ; b = sign
 157+ 79BE 7C           		ld		a,h                                 ; a = high byte
 158+ 79BF B0           		or		b
 159+ 79C0 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 79C3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 79C4 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 79C7              ;...Y cell
 163+ 79C7 21 67 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 79CA CD CC 78             call    XX12ProcessOneRow
 165+ 79CD 47           		ld		b,a
 166+ 79CE 7C           		ld		a,h
 167+ 79CF              ;		ld		a,l
 168+ 79CF B0           		or		b
 169+ 79D0 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 79D3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 79D4 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 79D7              ;...Z cell
 173+ 79D7 21 6D C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 79DA CD CC 78             call    XX12ProcessOneRow
 175+ 79DD 47           		ld		b,a
 176+ 79DE 7C                   ld		a,h
 177+ 79DF              ;		ld		a,l
 178+ 79DF B0           		or		b
 179+ 79E0 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 79E3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 79E4 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 79E7 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
1137  79E8                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 79E8 21 AC C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 79EB 11 A6 C0                             ld      de,XX15
   3+ 79EE 01 06 00                             ld      bc,6
   4+ 79F1 ED B0                                ldir
   5+ 79F3 C9                                   ret
   6+ 79F4
   7+ 79F4 21 AC C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 79F7 11 B2 C0                             ld      de,XX12Save
   9+ 79FA 01 06 00                             ld      bc,6
  10+ 79FD ED B0                                ldir
  11+ 79FF C9                                   ret
  12+ 7A00
  13+ 7A00 21 B2 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 7A03 11 AC C0                             ld      de,XX12
  15+ 7A06 01 06 00                             ld      bc,6
  16+ 7A09 ED B0                                ldir
  17+ 7A0B C9                                   ret
  18+ 7A0C
  19+ 7A0C 21 AC C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 7A0F 11 B8 C0                             ld      de,XX12Save2
  21+ 7A12 01 06 00                             ld      bc,6
  22+ 7A15 ED B0                                ldir
  23+ 7A17 C9                                   ret
  24+ 7A18
  25+ 7A18 21 B8 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 7A1B 11 AC C0                             ld      de,XX12
  27+ 7A1E 01 06 00                             ld      bc,6
  28+ 7A21 ED B0                                ldir
  29+ 7A23 C9                                   ret
  30+ 7A24
# file closed: ./ModelRender/CopyXX12ToXX15.asm
1138  7A24                  ;;DEFUNCTinclude "./ModelRender/CopyXX15ToXX12.asm"
1139  7A24                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 7A24              ScaleXX16Matrix197:
   2+ 7A24                      IFDEF LOGMATHS
   3+ 7A24 ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 7A24 ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 7A24 ~                                    MMUSelectMathsTables
   6+ 7A24 ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 7A24 ~                                    inc		hl                  ;
   8+ 7A24 ~                                    ld		a,(hl)              ;
   9+ 7A24 ~                                    ld		d,a                 ;
  10+ 7A24 ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 7A24 ~                                    ld		ixl,a				; retain for sign bit
  12+ 7A24 ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 7A24 ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 7A24 ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 7A24 ~                                    push	hl                  ; save HL
  16+ 7A24 ~                                    call    AEquAmul256Div197Log;
  17+ 7A24 ~                                    pop		hl
  18+ 7A24 ~                                    dec     hl                  ; move back to low byte
  19+ 7A24 ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 7A24 ~                                    inc     hl                  ; move back to high byte
  21+ 7A24 ~                                    ld      a,ixl
  22+ 7A24 ~                                    ld      (hl),a              ; write back just sign bit
  23+ 7A24 ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 7A24 ~                                    inc     hl                  ; no to next vertex value
  25+ 7A24 ~                                    djnz	.ScaleXX16Loop
  26+ 7A24 ~                                    MMUSelectROM0
  27+ 7A24 ~                                    ret
  28+ 7A24                      ELSE
  29+ 7A24 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 7A26 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 7A28 21 61 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 7A2B 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 7A2C 5F                                   ld		e,a                 ;
  34+ 7A2D 23                                   inc		hl                  ;
  35+ 7A2E 7E                                   ld		a,(hl)              ;
  36+ 7A2F 57                                   ld		d,a                 ;
  37+ 7A30 E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 7A32 DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 7A34                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 7A34 CB 23       >			   sla e
  39+ 7A36 CB 12       >			   rl  d
  40+ 7A38 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7A39 C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7A3A E5                                   push	hl                  ; save HL
  43+ 7A3B CD DF 95                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7A3E E1                                   pop		hl
  45+ 7A3F 2B                                   dec     hl                  ; move back to low byte
  46+ 7A40 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7A41 23                                   inc     hl                  ; move back to high byte
  48+ 7A42                                  ;    ld      a,(hl)
  49+ 7A42                                  ;    and     $80
  50+ 7A42 DD 7D                                ld      a,ixl
  51+ 7A44 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7A45 C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7A46 23                                   inc     hl                  ; no to next vertex value
  54+ 7A47 10 E2                                djnz	.ScaleXX16Loop
  55+ 7A49 C9                                   ret
  56+ 7A4A                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
1140  7A4A
1141  7A4A                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7A4A              ;note: DIV16Amul256dCUNDOC as per
   2+ 7A4A              ;                                   BC = A0
   3+ 7A4A              ;                                   DE = 0C
   4+ 7A4A              ;                                   so BC = a * 256 / C
   5+ 7A4A
   6+ 7A4A              ; We can cheat here, Speed is always 0 or positive
   7+ 7A4A              ; z postion will always be positive if we can see it
   8+ 7A4A
   9+ 7A4A EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7A4B CD 1C 84                             call    doRND               ; a = random OR bit 5
  11+ 7A4E EB                                   ex      de,hl               ; .
  12+ 7A4F F6 08                                or      8                   ; .
  13+ 7A51 77                                   ld      (hl),a              ; save to x pos
  14+ 7A52 E6 7F                                and     $7F                 ; a = abs a
  15+ 7A54 23                                   inc     hl                  ;
  16+ 7A55 77                                   ld      (hl),a              ;
  17+ 7A56 EB                                   ex      de,hl               ; preserving hl
  18+ 7A57 CD 1C 84                             call    doRND               ; a = -ve (random / 2)
  19+ 7A5A EB                                   ex      de,hl               ; .
  20+ 7A5B 0F                                   rrca                        ; .
  21+ 7A5C E6 80                                and     $80                 ; .
  22+ 7A5E B6                                   or      (hl)                ; or with
  23+ 7A5F 77                                   ld      (hl),a
  24+ 7A60 23                                   inc     hl
  25+ 7A61 EB                                   ex      de,hl
  26+ 7A62 CD 1C 84                             call    doRND
  27+ 7A65 EB                                   ex      de,hl
  28+ 7A66 F6 04                                or      4
  29+ 7A68 77                                   ld      (hl),a
  30+ 7A69 23                                   inc     hl
  31+ 7A6A E6 7F                                and     $7F
  32+ 7A6C 77                                   ld      (hl),a
  33+ 7A6D EB                                   ex      de,hl
  34+ 7A6E CD 1C 84                             call    doRND
  35+ 7A71 EB                                   ex      de,hl
  36+ 7A72 0F                                   rrca
  37+ 7A73 E6 80                                and     $80
  38+ 7A75 B6                                   or      (hl)
  39+ 7A76 77                                   ld      (hl),a
  40+ 7A77 23                                   inc     hl
  41+ 7A78 EB                                   ex      de,hl
  42+ 7A79 CD 1C 84                             call    doRND
  43+ 7A7C EB                                   ex      de,hl
  44+ 7A7D F6 90                                or      144
  45+ 7A7F 77                                   ld      (hl),a
  46+ 7A80 23                                   inc     hl
  47+ 7A81 F6 70                                or      %01110000
  48+ 7A83 E6 7F                                and     $7f     ; bodge
  49+ 7A85 77                                   ld      (hl),a
  50+ 7A86 23                                   inc     hl
  51+ 7A87 C9                                   ret
  52+ 7A88
  53+ 7A88 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7A89 CD 1C 84                             call    doRND
  55+ 7A8C CB 27                                sla     a
  56+ 7A8E CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7A90 EB                                   ex      de,hl
  58+ 7A91 E6 F8                                and     %11111000
  59+ 7A93 77                                   ld      (hl),a
  60+ 7A94 E6 7F                                and     $7F
  61+ 7A96 23                                   inc     hl
  62+ 7A97 77                                   ld      (hl),a
  63+ 7A98 EB                                   ex      de,hl
  64+ 7A99 CD 1C 84                             call    doRND
  65+ 7A9C EB                                   ex      de,hl
  66+ 7A9D 0F                                   rrca
  67+ 7A9E E6 80                                and     $80
  68+ 7AA0 B6                                   or      (hl)
  69+ 7AA1 77                                   ld      (hl),a
  70+ 7AA2 23                                   inc     hl
  71+ 7AA3 EB                                   ex      de,hl
  72+ 7AA4 CD 1C 84                             call    doRND
  73+ 7AA7 CB 27                                sla     a
  74+ 7AA9 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7AAB EB                                   ex      de,hl
  76+ 7AAC E6 F8                                and     %11111000
  77+ 7AAE 77                                   ld      (hl),a
  78+ 7AAF 23                                   inc     hl
  79+ 7AB0 E6 7F                                and     $7F
  80+ 7AB2 77                                   ld      (hl),a
  81+ 7AB3 EB                                   ex      de,hl
  82+ 7AB4 CD 1C 84                             call    doRND
  83+ 7AB7 EB                                   ex      de,hl
  84+ 7AB8 0F                                   rrca
  85+ 7AB9 E6 80                                and     $80
  86+ 7ABB B6                                   or      (hl)
  87+ 7ABC 77                                   ld      (hl),a
  88+ 7ABD 23                                   inc     hl
  89+ 7ABE EB                                   ex      de,hl
  90+ 7ABF CD 1C 84                             call    doRND
  91+ 7AC2 EB                                   ex      de,hl
  92+ 7AC3 F6 5F                                or      95
  93+ 7AC5 77                                   ld      (hl),a
  94+ 7AC6 23                                   inc     hl
  95+ 7AC7 F6 70                                or      %01110000
  96+ 7AC9 E6 7F                                and     $7f     ; bodge
  97+ 7ACB 77                                   ld      (hl),a
  98+ 7ACC 23                                   inc     hl
  99+ 7ACD C9                                   ret
 100+ 7ACE
 101+ 7ACE              ;----------------------------------------------------------------------------------------------------------------------------------
 102+ 7ACE 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 103+ 7AD0 21 A7 7F                             ld      hl,varDust
 104+ 7AD3 CD 4A 7A     .InitStarsLoop:         call    InitStarAtHL
 105+ 7AD6 10 FB                                djnz    .InitStarsLoop
 106+ 7AD8 C9                                   ret
 107+ 7AD9              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ 7AD9 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 109+ 7ADB 21 A7 7F                             ld      hl,varDust
 110+ 7ADE CD 88 7A     .InitStarsLoop:         call    InitHyperStarAtHL
 111+ 7AE1 10 FB                                djnz    .InitStarsLoop
 112+ 7AE3 C9                                   ret
 113+ 7AE4              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ 7AE4 FD 21 A7 7F  SaveCurrentDust:        ld          iy,varDust
 115+ 7AE8 DD 21 91 7F                          ld          ix,varDustWarpRender
 116+ 7AEC 06 0B                                ld          b, MaxNumberOfStars
 117+ 7AEE FD 7E 01     .SaveLoop               ld          a,(iy+1)
 118+ 7AF1 6F                                   ld          l,a
 119+ 7AF2 E6 7F                                and         $7F
 120+ 7AF4                                      JumpOnBitSet l,7,.StarNegXPt
 120+ 7AF4 CB 7D       >                        bit 	7,l
 120+ 7AF6 C2 FF 7A    >                        jp      nz,.StarNegXPt
 121+ 7AF9 C6 80                                add         a,$80
 122+ 7AFB 5F                                   ld          e,a
 123+ 7AFC C3 04 7B                             jp          .StarDoneX
 124+ 7AFF 57           .StarNegXPt:            ld          d,a
 125+ 7B00 3E 80                                ld          a,$80
 126+ 7B02 92                                   sub         d
 127+ 7B03 5F                                   ld          e,a
 128+ 7B04 FD 7E 03     .StarDoneX:             ld          a,(iy+3)
 129+ 7B07 6F                                   ld          l,a
 130+ 7B08 E6 7F                                and         $7F
 131+ 7B0A                                      JumpOnBitSet l,7,.StarNegYPt
 131+ 7B0A CB 7D       >                        bit 	7,l
 131+ 7B0C C2 15 7B    >                        jp      nz,.StarNegYPt
 132+ 7B0F C6 60                                add         a,$60
 133+ 7B11 57                                   ld          d,a
 134+ 7B12 C3 1A 7B                             jp          .StarDoneY
 135+ 7B15 57           .StarNegYPt:            ld          d,a
 136+ 7B16 3E 60                                ld          a,$60
 137+ 7B18 92                                   sub         d
 138+ 7B19 57                                   ld          d,a
 139+ 7B1A DD 73 00     .StarDoneY:             ld          (ix+0),e
 140+ 7B1D DD 72 01                             ld          (ix+1),d
 141+ 7B20 DD 23                                inc         ix
 142+ 7B22 DD 23                                inc         ix
 143+ 7B24 FD E5 E1                             ld          hl,iy
 144+ 7B27 3E 06                                ld          a,6
 145+ 7B29 ED 31                                add         hl,a
 146+ 7B2B E5 FD E1                             ld          iy,hl
 147+ 7B2E 10 BE                                djnz        .SaveLoop
 148+ 7B30 C9                                   ret
 149+ 7B31
 150+ 7B31              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ 7B31 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 152+ 7B33 FD 21 A7 7F                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 153+ 7B37 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 154+ 7B38 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 155+ 7B3B 5F                                   ld      e,a                                 ; d = 0
 156+ 7B3C 16 00                                ld      d,0                                 ; de = zhi/256
 157+ 7B3E 3A 84 7E                             ld      a,(DELTA)                           ; a = speed
 158+ 7B41                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 158+ 7B41 A7          >                        and     a
 158+ 7B42 C2 46 7B    >                        jp	    nz,.NormalSpeed
 159+ 7B45 3C                                   inc     a                                   ; so it is at least some dust movement
 160+ 7B46 47           .NormalSpeed:           ld      b,a                                 ;
 161+ 7B47 0E 00                                ld      c,0                                 ; bc = delta * 256
 162+ 7B49 CD 6B 96                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 163+ 7B4C                                      ShiftHLRight1
 163+ 7B4C CB 3C       >			   srl h
 163+ 7B4E CB 1D       >			   rr  l
 164+ 7B50                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 164+ 7B50 CB 3C       >			   srl h
 164+ 7B52 CB 1D       >			   rr  l
 165+ 7B54 7D                                   ld      a,l                                 ;
 166+ 7B55 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 167+ 7B57 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 168+ 7B59 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 168+ 7B5D 66 05
 169+ 7B5F ED 5B 85 7E                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 170+ 7B63 CD BD 8F                             call    subHLDES15
 171+ 7B66                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 171+ 7B66 CB 7C       >                        bit 	7,h
 171+ 7B68 C2 BD 7C    >                        jp      nz,ResetStar
 172+ 7B6B FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 172+ 7B6F 74 05
 173+ 7B71 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 173+ 7B75 66 01
 174+ 7B77 7C                                   ld      a,h                                 ;
 175+ 7B78 E6 7F                                and     $7F                                 ;
 176+ 7B7A 57                                   ld      d,a                                 ; d = abs(x hi)
 177+ 7B7B DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 178+ 7B7D ED 30                                mul                                         ; de =  abs(x hi) * Q
 179+ 7B7F 7C                                   ld      a,h                                 ;
 180+ 7B80 E6 80                                and     $80                                 ;
 181+ 7B82 B2                                   or      d                                   ; set sign bit in d
 182+ 7B83 57                                   ld      d,a                                 ;
 183+ 7B84 CD 22 8F                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 184+ 7B87 7C                                   ld      a,h
 185+ 7B88 E6 7F                                and     $7F
 186+ 7B8A                                      JumpIfAGTENusng $70, ResetStar
 186+ 7B8A FE 70       >                        cp     $70
 186+ 7B8C D2 BD 7C    >                        jp		nc,ResetStar
 187+ 7B8F FD 75 00 FD                          ld      (iy+0),hl                           ;
 187+ 7B93 74 01
 188+ 7B95 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 188+ 7B99 66 03
 189+ 7B9B 7C                                   ld      a,h                                 ;
 190+ 7B9C E6 7F                                and     $7F                                 ;
 191+ 7B9E 57                                   ld      d,a                                 ; d = abs(y hi)
 192+ 7B9F DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 193+ 7BA1 ED 30                                mul                                         ; de =  abs(y hi) * Q
 194+ 7BA3 7C                                   ld      a,h                                 ;
 195+ 7BA4 E6 80                                and     $80                                 ;
 196+ 7BA6 B2                                   or      d                                   ; set sign bit in d
 197+ 7BA7 57                                   ld      d,a                                 ;
 198+ 7BA8 CD 22 8F                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 199+ 7BAB 7C                                   ld      a,h
 200+ 7BAC E6 7F                                and     $7F
 201+ 7BAE                                      JumpIfAGTENusng $60, ResetStar
 201+ 7BAE FE 60       >                        cp     $60
 201+ 7BB0 D2 BD 7C    >                        jp		nc,ResetStar
 202+ 7BB3 7C                                   ld      a,h
 203+ 7BB4 E6 80                                and     $80
 204+ 7BB6 20 06                                jr      nz,.NoSecondCheck
 205+ 7BB8 7C                                   ld      a,h
 206+ 7BB9                                      JumpIfAGTENusng $20, ResetStar
 206+ 7BB9 FE 20       >                        cp     $20
 206+ 7BBB D2 BD 7C    >                        jp		nc,ResetStar
 207+ 7BBE FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 207+ 7BC2 74 03
 208+ 7BC4              ; Now roll
 209+ 7BC4              ;  6. x = x - alpha * y / 256
 210+ 7BC4 3A A4 7D     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 211+ 7BC7 FE 00                                cp      0
 212+ 7BC9 28 4D                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 7BCB                                   ;   break
 214+ 7BCB 6F                                   ld      l,a                                 ; roll magnitude
 215+ 7BCC 3A A6 7D                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 216+ 7BCF E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 217+ 7BD1 67                                   ld      h,a                                 ; h = roll sign
 218+ 7BD2 E5                                   push    hl                                  ; save on the stack
 219+ 7BD3 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 7BD4 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 7BD5 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 7BD8 5F                                   ld      e,a                                 ; save signed byte
 223+ 7BD9 E6 80                                and     SignOnly8Bit                        ; a = sign only
 224+ 7BDB 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 7BDC 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 226+ 7BDD E6 7F                                and     SignMask8Bit
 227+ 7BDF 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 7BE0 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 7BE2 79                                   ld      a,c                                 ; get back sign from roll
 230+ 7BE3 A8                                   xor     b                                   ; handle muliple sign bits
 231+ 7BE4 B2                                   or      d
 232+ 7BE5 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 7BE6 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 7BEA 66 01
 234+ 7BEC CD BD 8F                             call    subHLDES15                       ; we are usign add, so may need to fip sign?
 235+ 7BEF FD 75 00 FD                          ld      (iy+0),hl
 235+ 7BF3 74 01
 236+ 7BF5              ;  5. y = y + alpha * x / 256
 237+ 7BF5              .YRoll:                 ;break
 238+ 7BF5 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 7BF6 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 240+ 7BF7 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 241+ 7BF8 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 242+ 7BFB 5F                                   ld      e,a
 243+ 7BFC E6 80                                and     SignOnly8Bit
 244+ 7BFE 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 245+ 7BFF 7B           .ryEEquABSignX:         ld      a,e
 246+ 7C00 E6 7F                                and     SignMask8Bit
 247+ 7C02 5F                                   ld      e,a                                 ; save abs x hi in e
 248+ 7C03 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 249+ 7C05 79                                   ld      a,c
 250+ 7C06 A8                                   xor     b                                   ; handle muliple sign bits
 251+ 7C07 B2                                   or      d
 252+ 7C08 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 253+ 7C09 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 253+ 7C0D 66 03
 254+ 7C0F CD 22 8F                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 255+ 7C12 FD 75 02 FD                          ld      (iy+2),hl
 255+ 7C16 74 03
 256+ 7C18 3A 98 7D     .NoRoll:                ld      a,(BET1)
 257+ 7C1B FE 00                                cp      0
 258+ 7C1D 28 22                                jr      z,.NoPitch
 259+ 7C1F              ;  8. y = y - beta * 256
 260+ 7C1F 57           .YPitch:                ld      d,a                                 ; d = BET1
 261+ 7C20 FD 7E 02                             ld      a,(iy+2)
 262+ 7C23 5F                                   ld      e,a                                 ; e = Y HI
 263+ 7C24 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 264+ 7C26 5F                                   ld      e,a
 265+ 7C27 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 266+ 7C29                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 266+ 7C29 CB 23       >			   sla e
 266+ 7C2B CB 12       >			   rl  d
 267+ 7C2D 3A 99 7D                             ld      a,(BET2)                            ; get inverted Sign
 268+ 7C30 B2                                   or      d
 269+ 7C31 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 270+ 7C32 FD 6E 02 FD                          ld      hl,(iy+2)
 270+ 7C36 66 03
 271+ 7C38 CD 22 8F                             call    ADDHLDESignedV4
 272+ 7C3B FD 75 02 FD                          ld      (iy+2),hl
 272+ 7C3F 74 03
 273+ 7C41              ; now work out screen pos
 274+ 7C41              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 275+ 7C41              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 276+ 7C41              ;        pop     de
 277+ 7C41               ;       call    ProjectStarXToScreen
 278+ 7C41                                      ;pop     de
 279+ 7C41              .NoPitch:
 280+ 7C41 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 281+ 7C44 6F                                   ld      l,a
 282+ 7C45 E6 7F                                and     $7F
 283+ 7C47                                      JumpOnBitSet l,7,StarNegXPt
 283+ 7C47 CB 7D       >                        bit 	7,l
 283+ 7C49 C2 52 7C    >                        jp      nz,StarNegXPt
 284+ 7C4C C6 80                                add     a,$80
 285+ 7C4E 4F                                   ld      c,a
 286+ 7C4F C3 57 7C                             jp      StarDoneX
 287+ 7C52 47           StarNegXPt:             ld      b,a
 288+ 7C53 3E 80                                ld      a,$80
 289+ 7C55 90                                   sub     b
 290+ 7C56 4F                                   ld      c,a
 291+ 7C57 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 292+ 7C5A 6F                                   ld      l,a
 293+ 7C5B E6 7F                                and     $7F
 294+ 7C5D                                      JumpOnBitSet l,7,StarNegYPt
 294+ 7C5D CB 7D       >                        bit 	7,l
 294+ 7C5F C2 68 7C    >                        jp      nz,StarNegYPt
 295+ 7C62 C6 60                                add     a,$60
 296+ 7C64 47                                   ld      b,a
 297+ 7C65 C3 6D 7C                             jp      StarDoneY
 298+ 7C68 47           StarNegYPt:             ld      b,a
 299+ 7C69 3E 60                                ld      a,$60
 300+ 7C6B 90                                   sub     b
 301+ 7C6C 47                                   ld      b,a
 302+ 7C6D 3E 92        StarDoneY:              ld      a,L2DustColour
 303+ 7C6F C5                                   push    bc
 304+ 7C70              .DrawStar:              MMUSelectLayer2
 304+ 7C70 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ 7C74 CD B6 E2                             call    l2_plot_pixel
 306+ 7C77 FD 7E 05                             ld      a,(iy+5)
 307+ 7C7A C1                                   pop    bc
 308+ 7C7B                                      JumpIfAGTENusng $60,EndofStarsLoop
 308+ 7C7B FE 60       >                        cp     $60
 308+ 7C7D D2 AD 7C    >                        jp		nc,EndofStarsLoop
 309+ 7C80 3E 92                                ld      a,L2DustColour
 310+ 7C82 0C                                   inc     c
 311+ 7C83 C5                                   push    bc
 312+ 7C84                                      MMUSelectLayer2
 312+ 7C84 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 313+ 7C88 CD B6 E2                             call    l2_plot_pixel
 314+ 7C8B FD 7E 05                             ld      a,(iy+5)
 315+ 7C8E C1                                   pop    bc
 316+ 7C8F                                      JumpIfAGTENusng $37,EndofStarsLoop
 316+ 7C8F FE 37       >                        cp     $37
 316+ 7C91 D2 AD 7C    >                        jp		nc,EndofStarsLoop
 317+ 7C94 3E 92                                ld      a,L2DustColour
 318+ 7C96 04                                   inc     b
 319+ 7C97 C5                                   push    bc
 320+ 7C98                                      MMUSelectLayer2
 320+ 7C98 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ 7C9C CD B6 E2                             call    l2_plot_pixel
 322+ 7C9F FD 7E 05                             ld      a,(iy+5)
 323+ 7CA2 C1                                   pop    bc
 324+ 7CA3 3E 92                                ld      a,L2DustColour
 325+ 7CA5 0D                                   dec     c
 326+ 7CA6                                      MMUSelectLayer2
 326+ 7CA6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 327+ 7CAA CD B6 E2                             call    l2_plot_pixel
 328+ 7CAD C1           EndofStarsLoop:         pop     bc                                      ;  0
 329+ 7CAE FD E5        NextStarLoop3:          push    iy                                      ; +1
 330+ 7CB0 E1                                   pop     hl                                      ;  0
 331+ 7CB1 ED 34 06 00                          add     hl,6
 332+ 7CB5 E5           NextStarLoop2:          push    hl                                      ; +1
 333+ 7CB6 FD E1                                pop     iy                                      ;  0
 334+ 7CB8 05                                   dec     b
 335+ 7CB9 C2 37 7B                             jp      nz,StarProcessLoop
 336+ 7CBC C9                                   ret
 337+ 7CBD C1           ResetStar:              pop     bc                                      ; 0
 338+ 7CBE FD E5                                push    iy                                      ; +1 (current star)
 339+ 7CC0 E1                                   pop     hl                                      ; 0
 340+ 7CC1 CD 4A 7A                             call    InitStarAtHL
 341+ 7CC4 C3 AE 7C                             jp      NextStarLoop3
 342+ 7CC7              ;----------------------------------------------------------------------------------------------------------------------------------
 343+ 7CC7 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 344+ 7CCA FD 7E 01                             ld      a,(iy+1)
 345+ 7CCD 6F                                   ld      l,a
 346+ 7CCE E6 7F                                and     $7F
 347+ 7CD0 47                                   ld      b,a
 348+ 7CD1 CD F6 95                             call    DIV16BCDivDEUNDOC
 349+ 7CD4 7D                                   ld      a,l
 350+ 7CD5                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 350+ 7CD5 CB 7F       >                        bit 	7,a
 350+ 7CD7 C2 E2 7C    >                        jp      nz,StarXNegativePoint
 351+ 7CDA              ;StarXPositivePoint:									; x was positive result
 352+ 7CDA 2E 80                                ld          l,ScreenCenterX						;
 353+ 7CDC 26 00                                ld          h,0
 354+ 7CDE 09                                   add         hl,bc								; hl = Screen Centre + X
 355+ 7CDF C3 E9 7C                             jp          StarStoreXPoint
 356+ 7CE2              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 357+ 7CE2 2E 80                                ld          l,ScreenCenterX
 358+ 7CE4 26 00                                ld          h,0
 359+ 7CE6                                      ClearCarryFlag
 359+ 7CE6 B7          >                        or a
 360+ 7CE7 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 361+ 7CE9              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 362+ 7CE9 7D                                   ld          a,l
 363+ 7CEA 32 FF 7F                             ld          (varStarX),a
 364+ 7CED C9                                   ret
 365+ 7CEE
 366+ 7CEE FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 367+ 7CF1 FD 7E 03                             ld          a,(iy+3)
 368+ 7CF4 6F                                   ld          l,a
 369+ 7CF5 E6 7F                                and         $7F
 370+ 7CF7 47                                   ld          b,a
 371+ 7CF8 CD F6 95                             call        DIV16BCDivDEUNDOC
 372+ 7CFB 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 373+ 7CFC                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 373+ 7CFC CB 7F       >                        bit 	7,a
 373+ 7CFE C2 09 7D    >                        jp      nz,StarNegativeYPoint
 374+ 7D01                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 375+ 7D01 2E 60                               ld          l,ScreenCenterY
 376+ 7D03                                      ClearCarryFlag
 376+ 7D03 B7          >                        or a
 377+ 7D04 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 378+ 7D06 C3 0E 7D                             jp          StarStoreYPoint
 379+ 7D09              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 380+ 7D09 2E 60                                ld          l,ScreenCenterY
 381+ 7D0B 26 00                                ld          h,0
 382+ 7D0D 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 383+ 7D0E              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 384+ 7D0E 7D                                   ld          a,l
 385+ 7D0F 32 00 80                             ld          (varStarY),a
 386+ 7D12 C9                                   ret
 387+ 7D13
 388+ 7D13
# file closed: ./Universe/StarDust/StarRoutines.asm
1142  7D13              ;    include "Universe/move_object-MVEIT.asm"
1143  7D13              ;    include "./ModelRender/draw_object.asm"
1144  7D13              ;    include "./ModelRender/draw_ship_point.asm"
1145  7D13              ;    include "./ModelRender/drawforwards-LL17.asm"
1146  7D13              ;    include "./ModelRender/drawforwards-LL17.asm"
1147  7D13
1148  7D13                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7D13
   2+ 7D13 00           memfillvalue		DB 0
   3+ 7D14 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7D18 7D
   4+ 7D19 13 7D        memfill_astrt  		DW memfillvalue
   5+ 7D1B 00 40        memfill_length 		DB $00,$40
   6+ 7D1D 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7D20 00 00        memfill_bstrt  		DB $00,$00
   8+ 7D22 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7D26              memfill_cmd_len	  	EQU $ - memfill
  10+ 7D26
  11+ 7D26              memfill_dma:
  12+ 7D26              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7D26              .set_fill_value:
  14+ 7D26 32 13 7D     	ld 		(memfillvalue),a
  15+ 7D29              .set_target:
  16+ 7D29 22 20 7D     	ld		(memfill_bstrt),hl
  17+ 7D2C              .set_length:
  18+ 7D2C ED 53 1B 7D  	ld		(memfill_length),de
  19+ 7D30              .write_dma:
  20+ 7D30 21 14 7D     	ld 		hl, memfill
  21+ 7D33 06 12        	ld 		b, memfill_cmd_len
  22+ 7D35 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7D37 ED B3        	otir
  24+ 7D39 C9           	ret
  25+ 7D3A
# file closed: ./Hardware/memfill_dma.asm
1149  7D3A                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7D3A
   2+ 7D3A 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7D3E 7D
   3+ 7D3F 00 00        memcopy_astrt  		DB $00,$00
   4+ 7D41 00 40        memcopy_length 		DB $00,$40
   5+ 7D43 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 7D46 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7D48 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7D4C              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7D4C
  10+ 7D4C              memcopy_dma:
  11+ 7D4C              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7D4C              .set_target:
  13+ 7D4C 22 46 7D     	ld		(memcopy_bstrt),hl
  14+ 7D4F              .set_source:
  15+ 7D4F ED 53 3F 7D  	ld		(memcopy_astrt),de
  16+ 7D53              .set_length:
  17+ 7D53 ED 43 41 7D  	ld		(memcopy_length),bc
  18+ 7D57              .write_dma:
  19+ 7D57 21 3A 7D     	ld 		hl, memcopy
  20+ 7D5A 06 12        	ld 		b, memcopy_cmd_len
  21+ 7D5C 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7D5E ED B3        	otir
  23+ 7D60 C9           	ret
  24+ 7D61
# file closed: ./Hardware/memcopy_dma.asm
1150  7D61 00 00        XX12PVarQ			DW 0
1151  7D63 00 00        XX12PVarR			DW 0
1152  7D65 00 00        XX12PVarS			DW 0
1153  7D67 00 00        XX12PVarResult1		DW 0
1154  7D69 00 00        XX12PVarResult2		DW 0
1155  7D6B 00 00        XX12PVarResult3		DW 0
1156  7D6D 00           XX12PVarSign2		DB 0
1157  7D6E 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1158  7D6F 00           XX12PVarSign3		DB 0
1159  7D70                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 7D70              ;Contants
   2+ 7D70
   3+ 7D70              SignMask8Bit		    equ %01111111
   4+ 7D70              SignMask16Bit		    equ %0111111111111111
   5+ 7D70              SignOnly8Bit		    equ $80
   6+ 7D70              SignOnly16Bit		    equ $8000
   7+ 7D70
   8+ 7D70              Bit7Only                equ %10000000
   9+ 7D70              Bit6Only                equ %01000000
  10+ 7D70              Bit5Only                equ %00100000
  11+ 7D70              Bit4Only                equ %00010000
  12+ 7D70              Bit3Only                equ %00001000
  13+ 7D70              Bit2Only                equ %00000100
  14+ 7D70              Bit1Only                equ %00000010
  15+ 7D70              Bit0Only                equ %00000001
  16+ 7D70              Bit7Clear               equ %01111111
  17+ 7D70              Bit6Clear               equ %10111111
  18+ 7D70              Bit5Clear               equ %11011111
  19+ 7D70              Bit4Clear               equ %11101111
  20+ 7D70              Bit3Clear               equ %11110111
  21+ 7D70              Bit2Clear               equ %11111011
  22+ 7D70              Bit1Clear               equ %11111101
  23+ 7D70              Bit0Clear               equ %11111110
  24+ 7D70              ConstPi				    equ $80
  25+ 7D70              ConstNorm               equ 197
  26+ 7D70              ;OpCodes
  27+ 7D70              OpCodeSCF               equ $37
  28+ 7D70              OpCodeCCF               equ $3F
  29+ 7D70              OpCodeAndA              equ $A7
  30+ 7D70              OpCodeClearCarryFlag    equ OpCodeAndA
  31+ 7D70
  32+ 7D70              ;Text Tokens
  33+ 7D70              EliteToken			    equ $1E			; Token ID for text messsage ---- E L I T E ----
  34+ 7D70              BrabenBellToken 	    equ $0D
  35+ 7D70              AcorToken			    equ $0C
  36+ 7D70              ; Cursor Bits
  37+ 7D70              CursorClimb             equ %10000000
  38+ 7D70              CursorDive              equ %01000000
  39+ 7D70              CursorLeft              equ %00100000
  40+ 7D70              CursorRight             equ %00010000
  41+ 7D70              CursorHome              equ %00001000
  42+ 7D70              CursorRecenter          equ %00000100
  43+ 7D70
  44+ 7D70              ; Intro Screen
  45+ 7D70              TitleShip			    equ	$8C
  46+ 7D70              RotationUnity		    equ $60
  47+ 7D70              DBCheckCode			    equ $DB
  48+ 7D70              MaxVisibility		    equ $1F
  49+ 7D70              FarInFront			    equ $C0
  50+ 7D70              ; Equipment Flags
  51+ 7D70              EquipmentItemFitted     equ $FF
  52+ 7D70              EquipmentItemNotFitted  equ 0
  53+ 7D70              ; Universe Managment
  54+ 7D70              PlanetTypeMeridian      equ 128
  55+ 7D70              PlanetMinRadius         equ 6
  56+ 7D70
  57+ 7D70              ShipTotalModelCount     equ 44
  58+ 7D70              ShipTypeScoopable       equ 4         ; a sub set of junk
  59+ 7D70              ShipTypeJunk            equ 3
  60+ 7D70              ShipTypeStation         equ 2
  61+ 7D70              ShipTypeMissile         equ 1
  62+ 7D70              ShipTypeNormal          equ 0
  63+ 7D70              ShipTypeText            equ 253
  64+ 7D70              ShipTypeDebug           equ 254
  65+ 7D70              ShipTypeEmpty           equ 255
  66+ 7D70
  67+ 7D70              SpawnTypeStation        EQU 0
  68+ 7D70              SpawnTypeAsteroid       EQU SpawnTypeStation        + 1
  69+ 7D70              SpawnTypeJunk           EQU SpawnTypeAsteroid       + 1
  70+ 7D70              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  71+ 7D70              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  72+ 7D70              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  73+ 7D70              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  74+ 7D70              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  75+ 7D70              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  76+ 7D70              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  77+ 7D70              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  78+ 7D70              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  79+ 7D70              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  80+ 7D70
  81+ 7D70
  82+ 7D70              ; Laser and Missile Settings
  83+ 7D70              ; Laser and Missile
  84+ 7D70              ShipLaserPower          equ %11110000
  85+ 7D70              ShipMissileCount        equ %00001111
  86+ 7D70              ShipMissiles1           equ %00000001
  87+ 7D70              ShipMissiles2           equ %00000010
  88+ 7D70              ShipMissiles3           equ %00000011
  89+ 7D70              ShipMissiles4           equ %00000100
  90+ 7D70              ShipMissiles5           equ %00000101
  91+ 7D70              ShipMissiles6           equ %00000110
  92+ 7D70              ShipMissiles7           equ %00000111
  93+ 7D70              ShipMissiles8           equ %00001000
  94+ 7D70              ShipMissiles9           equ %00001001
  95+ 7D70              ShipMissiles10          equ %00001010
  96+ 7D70              ShipMissiles11          equ %00001011
  97+ 7D70              ShipMissiles12          equ %00001100
  98+ 7D70              ShipMissiles13          equ %00001101
  99+ 7D70              ShipMissiles14          equ %00001110
 100+ 7D70              ShipMissiles15          equ %00001111
 101+ 7D70              ; AI Flags  UniverseAIControl
 102+ 7D70              ShipCanAnger            equ %10000000   ; Yes or no
 103+ 7D70              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 104+ 7D70              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 105+ 7D70              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 106+ 7D70              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 107+ 7D70              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 108+ 7D70              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 109+ 7D70              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 110+ 7D70              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 111+ 7D70              ShipFighterWorm         equ %00000000
 112+ 7D70              ShipFighterSidewinder   equ %00000100
 113+ 7D70              ShipFighterViper        equ %00001000
 114+ 7D70              ShipFighterThargon      equ %00001100
 115+ 7D70              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 116+ 7D70              ShipFree                equ $00000011   ; Unused bits at present for later
 117+ 7D70              ; NewBTactics
 118+ 7D70              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 119+ 7D70              ShipIsBountyHunter      equ Bit1Only   ;
 120+ 7D70              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 121+ 7D70              ShipIsPirate            equ Bit3Only   ;
 122+ 7D70              ShipIsDocking           equ Bit4Only   ;
 123+ 7D70              ShipIsBystander         equ Bit5Only   ;
 124+ 7D70              ShipIsCop               equ Bit6Only   ;
 125+ 7D70              ShipHasEscapePod        equ Bit7Only   ;
 126+ 7D70              ShipHostileNewBitNbr    equ 2
 127+ 7D70
 128+ 7D70              ; UBnkaiatkecm
 129+ 7D70              ;Unused                 equ Bit0Only
 130+ 7D70              ;Unused                 equ Bit1Only
 131+ 7D70              ;Unused                 equ Bit2Only
 132+ 7D70              ShipIsDot               equ Bit3Only
 133+ 7D70              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 134+ 7D70              ShipExploding           equ Bit5Only
 135+ 7D70              ShipIsVisible           equ Bit6Only
 136+ 7D70              ShipAIEnabled           equ Bit7Only   ;
 137+ 7D70
 138+ 7D70
 139+ 7D70              ; UBnkaiakecm 2
 140+ 7D70              ;ShipAngryNewBitNbr      equ 4
 141+ 7D70              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 142+ 7D70              ShipNotHostile          equ Bit2Clear   ;
 143+ 7D70              ShipIsNotDot            equ Bit3Clear
 144+ 7D70              ShipIsDotBitNbr         equ 3
 145+ 7D70              ShipKilledBitNbr        equ 4
 146+ 7D70              ShipIsVisibleBitNbr     equ 6
 147+ 7D70              ShipIsScoopDockEsc      equ Bit7Only   ;
 148+ 7D70              ShipAIDisabled          equ Bit7Clear
 149+ 7D70              ShipAIEnabledBitNbr     equ 7
 150+ 7D70              ShipExplodingBitNbr     equ 5
 151+ 7D70              ; Equipment Defaults
 152+ 7D70              ECMCounterMax           equ $80
 153+ 7D70              ; Main Loop State
 154+ 7D70              StatePlayerDocked       equ $FF
 155+ 7D70              StateCompletedLaunch    equ $FD
 156+ 7D70              StateInTransition       equ $FE
 157+ 7D70              StateHJumping           equ $FC
 158+ 7D70              StateHEntering          equ $FB
 159+ 7D70              StateCompletedHJump     equ $FA
 160+ 7D70              StateNormal             equ 0
 161+ 7D70              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 162+ 7D70              StageMissileNotTargeting equ $FF
 163+ 7D70              StageMissileTargeting   equ $FE
 164+ 7D70
 165+ 7D70
 166+ 7D70              ShipMaxDistance         equ 192
 167+ 7D70              HyperSpaceTimers        equ $0B0B
 168+ 7D70
 169+ 7D70              ; -- game limts
 170+ 7D70              MaxNumberOfStars	    equ 11
 171+ 7D70              ConsoleRefreshInterval  equ 5
 172+ 7D70              MaxJunkStation          equ 3
 173+ 7D70              MaxJunkFreeSpace        equ 5
 174+ 7D70              WarpCoolDownPeriod      equ 90
 175+ 7D70
 176+ 7D70              ShipTypeSize		    equ	32 			;??????? just a guess for now
 177+ 7D70              ShipSST				    equ 4			; its a space station
 178+ 7D70              UniverseBasePage 	    equ 70			; Base memory bank for universe Item #0
 179+ 7D70              ShipDataBasePage	    equ	90			; Needs 2mb upgrade but what the heck
 180+ 7D70              ShipCountMax		    equ	2			; For now just 2 ships to debug
 181+ 7D70              LineLimitPerShip	    equ 70			; Max lines per ship
 182+ 7D70              FaceLimitPerShip	    equ	70			; Same as line limit to simplify some logic
 183+ 7D70              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 184+ 7D70
 185+ 7D70              ; Memory page managment	(Refers to a memory slot as a place to access data)
 186+ 7D70              ShipDataSlot		    equ	6			; this may move into rom swap out space later
 187+ 7D70              UniverseObjectSlot	    equ	7
 188+ 7D70
 189+ 7D70              KeyForwardsView		    equ	$20
 190+ 7D70              ; Game specific equates
 191+ 7D70              MissileDropHeight       equ 5           ; how far the missile is ejected on launch in y axis
 192+ 7D70              WarpSequenceCount       equ 50
 193+ 7D70
 194+ 7D70              ;...Game Colour Mapping
 195+ 7D70              L2DustColour            equ L2ColourGREY_1
 196+ 7D70              L2SunScannerBright      equ 252
 197+ 7D70              L2SunScanner            equ 180
 198+ 7D70              L2DebrisColour          equ L2ColourYELLOW_1
 199+ 7D70              L2PlanetScannerBright   equ 20
 200+ 7D70              L2PlanetScanner         equ 16
 201+ 7D70
 202+ 7D70
 203+ 7D70              ; Ship Data
 204+ 7D70              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 205+ 7D70              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 206+ 7D70              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 207+ 7D70              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 208+ 7D70              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 209+ 7D70              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 210+ 7D70              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 211+ 7D70              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 212+ 7D70              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 213+ 7D70              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 214+ 7D70              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 215+ 7D70              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 216+ 7D70              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 217+ 7D70              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 218+ 7D70              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 219+ 7D70              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 220+ 7D70              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 221+ 7D70              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 222+ 7D70              ;;;;00 00			 EQUW 0     \ type 18 is
 223+ 7D70              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 224+ 7D70              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 225+ 7D70              ;;;;00 00			 EQUW 0     \ type 21 is
 226+ 7D70              ;;;;00 00			 EQUW 0     \ type 22 is
 227+ 7D70              ;;;;00 00			 EQUW 0     \ type 23 is
 228+ 7D70              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 229+ 7D70              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 230+ 7D70              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 231+ 7D70              ;;;;00 00			 EQUW 0     \ type 27 is
 232+ 7D70              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 233+ 7D70              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 234+ 7D70              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 235+ 7D70              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 236+ 7D70              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 237+ 7D70              ;;;;			\ NEWB examples
 238+ 7D70              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 239+ 7D70              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 240+ 7D70              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 241+ 7D70              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 242+ 7D70              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 243+ 7D70
# file closed: ./Variables/constant_equates.asm
1160  7D70                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 7D70                  IFNDEF LASER_V2
   2+ 7D70 ~                DEFINE  LASER_V2    1
   3+ 7D70                  ENDIF
   4+ 7D70
   5+ 7D70 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   6+ 7D72 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   7+ 7D74              ; Variables to simulate 6502 registers until code fixed
   8+ 7D74              ; These must be here in this order as reading Y and X can then be a 16 bit read
   9+ 7D74 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  10+ 7D75 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  11+ 7D76 00           regA		DB	0
  12+ 7D77
  13+ 7D77
  14+ 7D77 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  15+ 7D78 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  16+ 7D7A 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  17+ 7D7C
  18+ 7D7C
  19+ 7D7C
  20+ 7D7C              ;XX16		DS	16				; 16 byte Matrix
  21+ 7D7C
  22+ 7D7C              P0INWK							; page 0 & 46
  23+ 7D7C              p0INWK31						; page 0 & 65
  24+ 7D7C              P0INWK36						; PAGE 0 &6A
  25+ 7D7C
  26+ 7D7C 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  27+ 7D7D              LastNormalVisible	equ	XX4
  28+ 7D7D              varXX4              equ XX4
  29+ 7D7D
  30+ 7D7D
  31+ 7D7D
  32+ 7D7D 00           PATG		DB	0				; 6502 &03C9
  33+ 7D7E 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  34+ 7D80
  35+ 7D80
  36+ 7D80              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  37+ 7D80              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &F XX21-1,Y
  38+ 7D80
  39+ 7D80              ; Present System Variables
  40+ 7D80
  41+ 7D80 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  42+ 7D81 20           RandomSeed1				DB	32	            ; 01
  43+ 7D82 0C           RandomSeed2				DB	12			    ; 02
  44+ 7D83 42           RandomSeed3				DB	66			    ; 03
  45+ 7D84 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  46+ 7D88 00           varT1					DB	0				; 06
  47+ 7D89 00           SClo					DB 0				; 07
  48+ 7D8A 00           SChi					DB 0				; 08
  49+ 7D8B 00           varP					DB 0 				; 10	XX16+7
  50+ 7D8C 00           varPhi					DB 0 				; 11	XX16+8
  51+ 7D8D 00           varPhi2					DB 0 				; 12	XX16+9
  52+ 7D8E              varPp1                  equ varPhi
  53+ 7D8E              varPp2                  equ varPhi2
  54+ 7D8E 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  55+ 7D8F 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  56+ 7D90              UnivPointer				equ	UnivPointerLo
  57+ 7D90 00           varV					DB 0				; 22                          XX0+4
  58+ 7D91 00           varVHi					DB 0				; 23                          XX0+5
  59+ 7D92 00           varXXlo                 DB 0                ; 24
  60+ 7D93 00           varXXHi                 DB 0                ; 25
  61+ 7D94              varXX					equ	varXXlo
  62+ 7D94 00           YYlo                    DB 0                ; 26
  63+ 7D95 00           YYHi                    DB 0                ; 27
  64+ 7D96              varYY					equ	YYlo
  65+ 7D96              											;	28
  66+ 7D96              											;	29
  67+ 7D96              ;PlayerShipPositionData - Must be contiguous for setup
  68+ 7D96 00           BETA 					DB	0               ; 2A        (pitch done)
  69+ 7D97 00           JSTY                    DB  0               ; Joystick analog
  70+ 7D98 00           BET1 					DB	0               ; 2B        lower7 magnitude
  71+ 7D99 00           BET2                    DB  0               ;            climb sign
  72+ 7D9A 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  73+ 7D9B 1F           BET1MAXC                DB  31              ; max climb
  74+ 7D9C E1           BET1MAXD                DB  -31             ; max dive
  75+ 7D9D 00           XC						DB	0               ; 2C
  76+ 7D9E 00           YC						DB 	0               ; 2D
  77+ 7D9F              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  78+ 7D9F 00           ECMCountDown            DB  0
  79+ 7DA0 00           ECMLoopB                DB  0
  80+ 7DA1 00 00        JSTX                    DW  0               ;           Joystick analog value
  81+ 7DA3 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  82+ 7DA4 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  83+ 7DA5 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  84+ 7DA6 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  85+ 7DA7 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  86+ 7DA8 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  87+ 7DA9
  88+ 7DA9
  89+ 7DA9              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
  90+ 7DA9              MAXMESSAGES             EQU 5
  91+ 7DA9              MESSAGETIMELIMIT        EQU 20
  92+ 7DA9              MESSAGESIZE             EQU 33
  93+ 7DA9              MESSAGELINE             EQU $0001
  94+ 7DA9
  95+ 7DA9 00           MessageCount            DB  0                ; used for enquing messages later
  96+ 7DAA 00           MessageCurrent          DB  0
  97+ 7DAB 05 00        MessageIndex            DW  MAXMESSAGES
  98+ 7DAD 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  99+ 7E52 05           MessageTimeout          DB  MAXMESSAGES
 100+ 7E53 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 101+ 7E78
 102+ 7E78              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 103+ 7E78              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 104+ 7E78              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 105+ 7E78 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 106+ 7E79              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 107+ 7E79
 108+ 7E79
 109+ 7E79 00           QQ17					DB	0				;   72
 110+ 7E7A 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 111+ 7E7B 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 112+ 7E7C 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 113+ 7E7D 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 114+ 7E7E 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 115+ 7E7F 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 116+ 7E80 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 117+ 7E81 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 118+ 7E82 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 119+ 7E83
 120+ 7E83 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 121+ 7E84 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 122+ 7E85 00           DELT4Lo					DB 	0				; 7E
 123+ 7E86 00           DELT4Hi					DB 	0				; 7F
 124+ 7E87              DELTA4                  equ                 DELT4Lo
 125+ 7E87
 126+ 7E87              ; SoundFX Variables -------------------------------------------------------------------------------------------
 127+ 7E87              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 128+ 7E87 FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 129+ 7E88 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 130+ 7E89
 131+ 7E89
 132+ 7E89              ; Not thise must be in this order else 16 bit fetches will fail
 133+ 7E89 00           varU                    DB  0               ;   80
 134+ 7E8A 00           varQ					DB  0 				;	81
 135+ 7E8B 00           varR					DB  0 				;	82
 136+ 7E8C 00           varS					DB  0 				;	83
 137+ 7E8D              varRS                   equ varR
 138+ 7E8D
 139+ 7E8D 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 140+ 7E8F
 141+ 7E8F 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 142+ 7E90 00           YSAV                    DB  0               ; 85
 143+ 7E91 00           XX17					DB	0				; 86
 144+ 7E92              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 145+ 7E92              varXX17                 equ  XX17
 146+ 7E92 00           ScreenChanged           DB  0
 147+ 7E93 00           ScreenIndex             DB  0
 148+ 7E94 00 00        ScreenIndexTablePointer DW  0
 149+ 7E96 00           InvertedYAxis           DB  0
 150+ 7E97 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 151+ 7E98              											; Bit 7 Set  ShortRangeChart    $80
 152+ 7E98              											; Bit 6 Set  Galactic Chart     $40
 153+ 7E98              											; Bit 5 Set  Market Place       $20
 154+ 7E98              											; Bit 4 Set  Status Screen      $10
 155+ 7E98              											; Bit 3 Set  Display Inventory  $08
 156+ 7E98                                                          ; Bit 2 Set  Planet Data        $04
 157+ 7E98                                                          ; View bit combinations if the ones above not matched
 158+ 7E98                                                          ; bits 1 0
 159+ 7E98                                                          ;      1 1  Front view , i.e. $03
 160+ 7E98                                                          ;      1 0  Aft View          $02
 161+ 7E98                                                          ;      0 1  Left View         $01
 162+ 7E98                                                          ;      0 0  Right view        $00
 163+ 7E98              											; Bit 0 Set  Data On System
 164+ 7E98              											; 0  Space View (Not a menu)
 165+ 7E98 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 166+ 7E99 00           XX13                    DB  0               ;   89
 167+ 7E9A 00           TYPE					DB	0				; 8C used for ship type in drawing
 168+ 7E9B              ;Docked flag = 00 = in free space
 169+ 7E9B              ;              FF = Docked
 170+ 7E9B              ;              FE = transition
 171+ 7E9B              ;              FD = Setup open space and transition to not docked
 172+ 7E9B              ;              FC = Hyperspace manimation
 173+ 7E9B              ;              FB = Hyperspace complete
 174+ 7E9B 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 175+ 7E9C 00           varCNT                  DB  0               ; 93
 176+ 7E9D
 177+ 7E9D 00           varK					DB	0				; 40
 178+ 7E9E 00           varKp1					DB	0				; 41
 179+ 7E9F 00           varKp2					DB	0				; 42
 180+ 7EA0 00           varKp3					DB	0				; 43
 181+ 7EA1
 182+ 7EA1 00           varK2                   DB  0               ; 9B
 183+ 7EA2 00           varK2p1                 DB  0               ; 9C K2 plus 1
 184+ 7EA3 00           varK2p2                 DB  0               ; 9D K2 plus 2
 185+ 7EA4 00           varK2p3                 DB  0               ; 9E K2 plus 3
 186+ 7EA5
 187+ 7EA5 00           Point                   DB  0               ; 9F      POINT
 188+ 7EA6
 189+ 7EA6 00           varT					DB	0				; D1
 190+ 7EA7 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 191+ 7EA8
 192+ 7EA8 00 00 00...  varVector9ByteWork      DS  9
 193+ 7EB1
 194+ 7EB1 00 00 00 00  varK3					DS	4				; D2
 195+ 7EB5 00           varK3p2					DB	0				; 42
 196+ 7EB6 00           varK3p3					DB	0				; 43
 197+ 7EB7              varK3p1					equ varK3+1			; D3
 198+ 7EB7 00 00 00 00  varK4					DS	4				; E0
 199+ 7EBB              varK4p1					equ varK4+1			; D3
 200+ 7EBB 00 00 00...  varK5                   DS  6
 201+ 7EC1              varK5p2                 equ varK5+2
 202+ 7EC1 00 00 00...  varK6                   DS  6
 203+ 7EC7              varK6p2                 equ varK6+2
 204+ 7EC7              ;Heap
 205+ 7EC7
 206+ 7EC7 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 207+ 7EC9 00 00 00...  HeapData				DS	50
 208+ 7EFB              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 209+ 7EFB              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 210+ 7EFB              ; i.e. a list of programmed missiles in universe slot list code
 211+ 7EFB 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 212+ 7F02              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 213+ 7F02              ;  #&5 Does J reverse both joystick channels
 214+ 7F02              ;  #&4 Does Y reverse joystick Y channel			03CB
 215+ 7F02              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 216+ 7F02              ;  #&3 Does F toggle flashing information			03CA
 217+ 7F02              ;  #&1 Does A toggle keyboard auto-recentering ?
 218+ 7F02              ;  #&0 Caps-lock toggles keyboard flight damping
 219+ 7F02
 220+ 7F02              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 221+ 7F02 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 222+ 7F07 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 223+ 7F17 00           AlienItemsAvaliability  DB	0				; 039D
 224+ 7F18 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 225+ 7F19 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 226+ 7F1A 00 00 00...  WorkingSeeds			DS	6
 227+ 7F20 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 228+ 7F26 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 229+ 7F2C 00           PresentSystemX			DB	0				; System we are currently in
 230+ 7F2D 00           PresentSystemY			DB  0				; System we are currently in
 231+ 7F2E 00           TargetSystemX			DB	0				; System we are targeting for jump
 232+ 7F2F 00           TargetSystemY			DB	0				; System we are targeting for jump
 233+ 7F30              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 234+ 7F30 00           GovPresentSystem		DB	0				; 03AE Govenment
 235+ 7F31 00           TekPresentSystem		DB	0				; 03AF Technology
 236+ 7F32 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 237+ 7F33 00           ExtraVesselsCounter     DB  0
 238+ 7F34 00           JunkCount				DB  0				; $033E
 239+ 7F35 00           AsteroidCount           DB  0               ; Not used as yet
 240+ 7F36 00           TransporterCount        DB  0
 241+ 7F37 00           CopCount                DB  0
 242+ 7F38 00           PirateCount             DB  0
 243+ 7F39              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 244+ 7F39 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 245+ 7F3A 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 246+ 7F3B 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 247+ 7F3C 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 248+ 7F3E 00           CurrentRank             DB  0   			;
 249+ 7F3F 00           MarketPrice				DB	0				; 03AA QQ24
 250+ 7F40 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 251+ 7F41 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 252+ 7F42 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 253+ 7F43 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 254+ 7F45              											; this is ship lines stack pointer so may be redundant with paging
 255+ 7F45              											; LS = line stack so we will have one for now to remove later
 256+ 7F45              ; - no longer used, holding here intil its safe to delte
 257+ 7F45 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 258+ 7F46 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 259+ 7F47              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 260+ 7F47              ; - no longer used, holding here intil its safe to delte
 261+ 7F47
 262+ 7F47 00           DisplayEcononmy			DB	0				; 03B8
 263+ 7F48 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 264+ 7F49 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 265+ 7F4A 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 266+ 7F4C 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 267+ 7F4E 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 268+ 7F50 00 00        DisplayRadius			DW	0
 269+ 7F52              ; --- Used in creation of sun and planet ------------------------------------------------------------------------------------------------
 270+ 7F52 00           PlanetXPos              DS  1
 271+ 7F53 00           PlanetYPos              DS  1
 272+ 7F54 00           PlanetZPos              DS  1
 273+ 7F55 00           PlanetType              DS  1
 274+ 7F56 00           SunXPos                 DS  1
 275+ 7F57 00           SunYPos                 DS  1
 276+ 7F58 00           SunZPos                 DS  1
 277+ 7F59              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 278+ 7F59 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 279+ 7F5A 00 00        MissileXPos             DW      0
 280+ 7F5C 00           MissileXSgn             DB      0
 281+ 7F5D 00 00        MissileYPos             DW      0
 282+ 7F5F 00           MissileYSgn             DB      0
 283+ 7F60 00 00        MissileZPos             DW      0
 284+ 7F62 00           MissileZSgn             DB      0
 285+ 7F63 00 00        CurrentTargetXpos       DS      2
 286+ 7F65 00 00        CurrentTargetXsgn       DS      2
 287+ 7F67 00 00        CurrentTargetYpos       DS      2
 288+ 7F69 00 00        CurrentTargetYsgn       DS      2
 289+ 7F6B 00 00        CurrentTargetZpos       DS      2
 290+ 7F6D 00 00        CurrentTargetZsgn       DS      2
 291+ 7F6F 00 00        TargetVectorXpos        DS      2
 292+ 7F71 00 00        TargetVectorXsgn        DS      2
 293+ 7F73 00 00        TargetVectorYpos        DS      2
 294+ 7F75 00 00        TargetVectorYsgn        DS      2
 295+ 7F77 00 00        TargetVectorZpos        DS      2
 296+ 7F79 00 00        TargetVectorZsgn        DS      2
 297+ 7F7B 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 298+ 7F7C 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 299+ 7F7D 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 300+ 7F7E 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 301+ 7F7F              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 302+ 7F7F 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 303+ 7F85 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 304+ 7F8B 00 00 00...  ShipClassId             DS 6
 305+ 7F91              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 306+ 7F91 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 307+ 7FA7 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 308+ 7FE9 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 309+ 7FFF 00           varStarX                DB 0
 310+ 8000 00           varStarY                DB 0
 311+ 8001 00 00 00...  varDustX                DS MaxNumberOfStars *2
 312+ 8017 00 00 00...  varDustY                DS MaxNumberOfStars *2
 313+ 802D 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 314+ 8043              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 315+ 8043 00           DockedFlag				DB	0				; 8E -
 316+ 8044 00           GamePaused              DB  0
 317+ 8045 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 318+ 8046 00           SelectedUniverseSlot    DB  0
 319+ 8047 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 320+ 8048 00           ShipBlastCheckCounter   DB  0
 321+ 8049 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 322+ 804A 00           OuterHyperCount			DB 	0				; 2E QQ22
 323+ 804B 00           WarpCooldown            DB  0
 324+ 804C 00           EventCounter            DB  0
 325+ 804D 00           HyperCircle             DB  0
 326+ 804E 00           MissJumpFlag            DB  0
 327+ 804F 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 328+ 8050 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 329+ 8051 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 330+ 8052 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 331+ 8053 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 332+ 8054 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 333+ 8055              UniverseSlotListSize    equ	12
 334+ 8055 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 335+ 8061 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 336+ 806D              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 337+ 806D 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 338+ 806E 00           ConsoleRedrawFlag       DB  0
 339+ 806F 00           TextInputMode           DB  0
 340+ 8070 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 341+ 8071                                                          ; 7    6    5    4     3    2        1    0
 342+ 8071                                                          ; Up   Down Left Right Home Recentre
 343+ 8071 00           FireLaserPressed        DB  0
 344+ 8072 00           WarpPressed             DB  0
 345+ 8073 00           CompassColor			DB	0				; 03C5
 346+ 8074 00           SoundToggle				DB	0				; 03C6
 347+ 8075 00           KeyboardRecenterToggle	DB	0				; 03C8
 348+ 8076 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 349+ 8077 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 350+ 8078 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 351+ 8079 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 352+ 807A 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 353+ 807B 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 354+ 807C
 355+ 807C              ; Working Data
 356+ 807C
 357+ 807C              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 358+ 807C              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 359+ 807C              ; $0925 =	EQUW page9+37* 1
 360+ 807C              ; $094A =	EQUW page9+37* 2
 361+ 807C              ; $096F =	EQUW page9+37* 3
 362+ 807C              ; $0994 =	EQUW page9+37* 4
 363+ 807C              ; $09B9 =	EQUW page9+37* 5
 364+ 807C              ; $09DE =	EQUW page9+37* 6
 365+ 807C              ; $0A03 =	EQUW page9+37* 7
 366+ 807C              ; $0A28 =	EQUW page9+37* 8
 367+ 807C              ; $0A4D =	EQUW page9+37* 9
 368+ 807C              ; $0A72 =	EQUW page9+37*10
 369+ 807C              ; $0A97 =	EQUW page9+37*11
 370+ 807C              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 371+ 807C
 372+ 807C
 373+ 807C
 374+ 807C              ; 0b00 is start address of data to save
 375+ 807C              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 376+ 807C              											; Bit mask XXXX10XX - Thargoid plan mission
 377+ 807C
 378+ 807C 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 379+ 807D
 380+ 807D 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 381+ 807F 00 00        CommanderLoadAddress	DW	0				;0C03
 382+ 8081 00 00        LengthOfFile			DW	0				;0C0B
 383+ 8083 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 384+ 8085
 385+ 8085 00 00 00...  EdgesBuffer				DS 50
 386+ 80B7              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 387+ 80B7              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 388+ 80B7
 389+ 80B7 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 390+ 80FD              ShipLineStackTop		equ $ - ShipLineStack
 391+ 80FD
 392+ 80FD              ; No longer needed
 393+ 80FD              ;LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 394+ 80FD              ; LSX vector overlaps with LSO
 395+ 80FD              ;LSX2					DS	$C0				; &0EC0	    \ LSX2 bline buffer size?
 396+ 80FD              ;LSY2					DS  $C)	           	; &0F0E	    \ LSY2
 397+ 80FD
 398+ 80FD              ; -- Player Runtime Data
 399+ 80FD 00           GunTemperature          DB  0
 400+ 80FE 00           CabinTemperature        DB  0
 401+ 80FF 00           PlayerForwardSheild0	DB	0 ; ?????
 402+ 8100 00           PlayerForwardSheild1    DB	0
 403+ 8101 00           PlayerForwardSheild2    DB	0
 404+ 8102 00           ForeShield				DB	0				; These three must be contiguous
 405+ 8103 00           AftShield				DB	0				; .
 406+ 8104 00           PlayerEnergy			DB	0				; and in this order
 407+ 8105 00           CompassX				DB	0				; 03A8
 408+ 8106 00           CompassY				DB	0				; 03A9
 409+ 8107              ; Simplification of missile targetting
 410+ 8107              ; $FF no missile targettting enabled
 411+ 8107              ; $FE missile targetting, no target selected
 412+ 8107              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 413+ 8107              ; bit 7 clear launch at selected target in lower nibble
 414+ 8107 00           MissileTargettingFlag   DB  0
 415+ 8108              ;;MissileTarget			DB  0				; 45
 416+ 8108              ;;MissileLaunchFlag       DB  0
 417+ 8108 00 00 00...  CommanderName           DS  15
 418+ 8117 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 419+ 8118 00           BadnessStatus           DB  0
 420+ 8119              ;note rapidly changing views could reset these so need to consider it in an array
 421+ 8119              ; LaserType
 422+ 8119              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 423+ 8119              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 424+ 8119              ; LaserPulseRest                          ; time before pulse count resets to 0
 425+ 8119              ; LaserDamageOutput                       ; amount of damage for a laser hit
 426+ 8119              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 427+ 8119              ; LaserHeat                               ; amount of heat generated
 428+ 8119              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 429+ 8119              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 430+ 8119              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 431+ 8119              ; LaserTechLevel                          ; minimum tech level system to buy from
 432+ 8119              ; need to add copy table routines
 433+ 8119 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 434+ 811A 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 435+ 811B 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 436+ 811C 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 437+ 811D 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 438+ 811E 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 439+ 811F
 440+ 811F                  IFDEF LASER_V2
 441+ 811F 00           LaserBeamOn             DB  0
 442+ 8120 00           CurrLaserDuration       DB  0   ; == CurrLaserPulseOnTime
 443+ 8121 00           CurrentBurstPause       DB  0   ; == CurrLaserPulseOffTime
 444+ 8122 00           CurrentCooldown         DB  0   ; == CurrLaserPulseRest
 445+ 8123                  ENDIF
 446+ 8123 00           CurrLaserBurstRate      DB  0
 447+ 8124 00           CurrLaserBurstCount     DB  0   ; == LaserPulseRate
 448+ 8125 00           CurrLaserDamageOutput   DB  0
 449+ 8126 00           CurrLaserEnergyDrain    DB  0
 450+ 8127 00           CurrLaserHeat           DB  0
 451+ 8128 00           CurrLaserDurability     DB  0
 452+ 8129 00           CurrLaserDurabilityAmount DB  0
 453+ 812A
 454+ 812A              ; Count down timers must be aligned like this to work
 455+ 812A 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 456+ 812B 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 457+ 812C 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 458+ 812D 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 459+ 812E
 460+ 812E              ; -- Input variables
 461+ 812E 00           JoystickX				DB	0				; 034C JSTX
 462+ 812F 00           JoystickY				DB	0				; 034D JSTY
 463+ 8130 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 464+ 8131 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 465+ 8132
 466+ 8132              ; -- Console drawing data
 467+ 8132              FShieldStart            equ $8410
 468+ 8132              AShieldStart            equ $8D10
 469+ 8132              FuelStart               equ $9410
 470+ 8132
 471+ 8132              EnergyBar4Start         equ $A5D5
 472+ 8132              EnergyBar3Start         equ $ADD5
 473+ 8132              EnergyBar2Start         equ $B5D5
 474+ 8132              EnergyBar1Start         equ $BDD5
 475+ 8132              ; 70 /2 = 35 values
 476+ 8132              ;                            0                             1                             2                             3
 477+ 8132              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 478+ 8132 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 478+ 8136 04 04 05 06
 478+ 813A 06 07 08 09
 478+ 813E 0A 0A 0B 0C
 478+ 8142 0D 0E 0E 0F
 478+ 8146 10 10 11 13
 478+ 814A 14 15 15 16
 478+ 814E 17 18 19 1A
 478+ 8152 1B 1C 1E 1F
 478+ 8156 1F
 479+ 8157              SpeedoStart             equ $84D1
 480+ 8157              ;                            0                             1                             2                             3                             4
 481+ 8157              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 482+ 8157 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 482+ 815B 04 04 05 06
 482+ 815F 06 07 08 09
 482+ 8163 0A 0A 0B 0C
 482+ 8167 0D 0E 0E 0F
 482+ 816B 10 10 11 12
 482+ 816F 13 14 14 15
 482+ 8173 16 17 18 18
 482+ 8177 19 1A 1A 1B
 482+ 817B 1C 1C 1D 1E
 482+ 817F 1F
 483+ 8180
 484+ 8180              DialMiddleXPos          equ $E1
 485+ 8180              RollMiddle              equ $8CE0
 486+ 8180              PitchMiddle             equ $94E0
 487+ 8180
 488+ 8180
 489+ 8180
 490+ 8180
 491+ 8180
# file closed: ./Variables/general_variables.asm
1161  8180                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 8180              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 8180 3A 26 81    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 8183 47          >                        ld      b,a
   1+ 8184 3A 04 81    >                        ld      a,(PlayerEnergy)
   1+ 8187 90          >                        sub     a,b
   1+ 8188 32 04 81    >                        ld      (PlayerEnergy),a
   1+ 818B 38 03       >                        jr      c,.ZeroSystem
   1+ 818D C3 94 81    >                        jp      .ExitPoint
   1+ 8190             >.ZeroSystem:            ZeroA
   1+ 8190 AF          >                        xor a
   1+ 8191 32 04 81    >                        ld      (PlayerEnergy),a
   1+ 8194             >.ExitPoint
   2+ 8194                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 8194 3A 27 81    >                        ld      a,(CurrLaserHeat)
   2+ 8197 47          >                        ld      b,a
   2+ 8198 3A FD 80    >                        ld      a,(GunTemperature)
   2+ 819B 80          >                        add     b
   2+ 819C 32 FD 80    >                        ld      (GunTemperature),a
   2+ 819F 38 03       >                        jr      c, .MaxSystem
   2+ 81A1 C3 A9 81    >                        jp      .ExitPoint
   2+ 81A4 3E FF       >.MaxSystem:             ld      a,255
   2+ 81A6 32 FD 80    >                        ld      (GunTemperature),a
   2+ 81A9             >.ExitPoint
   3+ 81A9 C9                                   ret
   4+ 81AA
   5+ 81AA
   6+ 81AA              ResetPlayerShip:        ZeroThrottle
   6+ 81AA AF          >                        xor     a
   6+ 81AB 32 84 7E    >                        ld      (DELTA),a
   6+ 81AE 32 85 7E    >                        ld      (DELT4Lo),a
   6+ 81B1 32 86 7E    >                        ld      (DELT4Lo+1),a
   7+ 81B4                                      ZeroPitch
   7+ 81B4 AF          >                        xor     a
   7+ 81B5 32 99 7D    >                        ld      (BET2),a
   7+ 81B8 32 9A 7D    >                        ld      (BET2FLIP),a
   7+ 81BB 32 97 7D    >                        ld      (JSTY),a
   7+ 81BE 32 96 7D    >                        ld      (BETA),a
   8+ 81C1                                      ZeroRoll
   8+ 81C1 AF          >                        xor     a                              ; zero roll and climb
   8+ 81C2 32 A5 7D    >                        ld      (ALP2),a
   8+ 81C5 32 A6 7D    >                        ld      (ALP2FLIP),a
   8+ 81C8 32 A1 7D    >                        ld      (JSTX),a
   8+ 81CB 32 A3 7D    >                        ld      (ALPHA),a
   9+ 81CE                                      ClearMissileTargetting
   9+ 81CE 3E FF       >                        ld      a,StageMissileNotTargeting
   9+ 81D0 32 07 81    >                        ld      (MissileTargettingFlag),a
  10+ 81D3                                      ClearECM
  10+ 81D3 AF          >                        xor     a
  10+ 81D4 32 9F 7D    >                        ld      (ECMCountDown),a
  11+ 81D7                                      ChargeEnergyAndShields
  11+ 81D7 3E FF       >                        ld      a,$FF
  11+ 81D9 32 04 81    >                        ld      (PlayerEnergy),a
  11+ 81DC 32 02 81    >                        ld      (ForeShield),a
  11+ 81DF 32 03 81    >                        ld      (AftShield),a
  12+ 81E2                                      ClearTemperatures
  12+ 81E2 AF          >                        xor     a
  12+ 81E3 32 FE 80    >                        ld      (CabinTemperature),a
  12+ 81E6 32 FD 80    >                        ld      (GunTemperature),a
  13+ 81E9                                      ClearWarpPressed
  13+ 81E9             >                        SetMemFalse WarpPressed
  13+ 81E9 3E FF       >                        ld      a,$FF
  13+ 81EB 32 72 80    >                        ld      (WarpPressed),a
  14+ 81EE CD 40 82                             call    IsLaserUseable
  15+ 81F1                                      SetMemFalse LaserBeamOn
  15+ 81F1 3E FF       >                        ld      a,$FF
  15+ 81F3 32 1F 81    >                        ld      (LaserBeamOn),a
  16+ 81F6                                      MMUSelectCommander
  16+ 81F6 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  17+ 81FA CD 0E E3                             call    LoadLaserToCurrent
  18+ 81FD C8                                   ret     z
  19+ 81FE
  20+ 81FE C9                                   ret
  21+ 81FF
  22+ 81FF 21 E8 83     AddCargoTypeD:          ld      hl,CargoTonnes
  23+ 8202 57                                   ld      d,a
  24+ 8203 ED 31                                add     hl,a
  25+ 8205 34                                   inc     (hl)
  26+ 8206 C9                                   ret
  27+ 8207
  28+ 8207 7A           CanWeScoopCargoD:       ld      a,d
  29+ 8208                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  29+ 8208 FE 0E       >                        cp     GoldIndex
  29+ 820A D2 2C 82    >                        jp		nc,.ItMayNotBeTonnes
  30+ 820D 21 E8 83     .ItsTonnes:             ld      hl,CargoTonnes
  31+ 8210 0E 00                                ld      c,0
  32+ 8212 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  33+ 8214 7E           .AddLoop:               ld      a,(hl)
  34+ 8215 81                                   add     c
  35+ 8216 4F                                   ld      c,a                     ; add to counter
  36+ 8217 05                                   dec     b
  37+ 8218 23                                   inc     hl
  38+ 8219 10 F9                                djnz    .AddLoop
  39+ 821B 21 F9 83                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  40+ 821E 7E                                   ld      a,(hl)
  41+ 821F 81                                   add     c
  42+ 8220 4F                                   ld      c,a
  43+ 8221 3A E6 83                             ld      a,(CargoBaySize)        ; Get Bay Size
  44+ 8224                                      JumpIfAEqNusng c, .CargoFull
  44+ 8224 B9          >                        cp     c
  44+ 8225 CA 2A 82    >                        jp      z,.CargoFull
  45+ 8228              .StillRoom:             ClearCarryFlag
  45+ 8228 B7          >                        or a
  46+ 8229 C9                                   ret
  47+ 822A              .CargoFull:             SetCarryFlag
  47+ 822A 37          >                        scf
  48+ 822B C9                                   ret
  49+ 822C              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  49+ 822C FE 11       >                        cp     AlienItemsIndex
  49+ 822E CA 0D 82    >                        jp      z,.ItsTonnes
  50+ 8231 21 E8 83                             ld      hl,CargoTonnes
  51+ 8234 7A                                   ld      a,d
  52+ 8235 ED 31                                add     hl,a
  53+ 8237 7E                                   ld      a,(hl)
  54+ 8238                                      JumpIfAEqNusng  200, .StillRoom
  54+ 8238 FE C8       >                        cp     200
  54+ 823A CA 28 82    >                        jp      z,.StillRoom
  55+ 823D C3 2A 82                             jp      .CargoFull
  56+ 8240              ; END of rountine
  57+ 8240
  58+ 8240 3A 19 81     IsLaserUseable:         ld      a,(CurrLaserType)
  59+ 8243 FE FF                                cp      255
  60+ 8245 C8                                   ret     z
  61+ 8246 3A 1A 81                             ld      a,(CurrLaserDamage)
  62+ 8249 FE FF                                cp      255
  63+ 824B C9                                   ret
  64+ 824C
  65+ 824C CD 12 83     InitMainLoop:           call    ClearUnivSlotList
  66+ 824F AF                                   xor     a
  67+ 8250 32 45 80                             ld      (CurrentUniverseAI),a
  68+ 8253 3E 03                                ld      a,3
  69+ 8255 32 97 7E                             ld      (MenuIdMax),a
  70+ 8258                                      SetMemFalse SetStationHostileFlag
  70+ 8258 3E FF       >                        ld      a,$FF
  70+ 825A 32 47 80    >                        ld      (SetStationHostileFlag),a
  71+ 825D                                      SetMemFalse DockedFlag
  71+ 825D 3E FF       >                        ld      a,$FF
  71+ 825F 32 43 80    >                        ld      (DockedFlag),a
  72+ 8262              ;                        call    InitialiseFrontView
  73+ 8262 CD 2B 6A                             call    InitialiseCommander
  74+ 8265                                      MMUSelectUniverseN 2
  74+ 8265 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  75+ 8269 CD 2F 6B                             call    SetInitialShipPosition
  76+ 826C              ; Initialist screen refresh
  77+ 826C 3E 05                                ld      a, ConsoleRefreshInterval
  78+ 826E 32 6D 80                             ld      (ConsoleRefreshCounter),a
  79+ 8271                                      SetMemFalse    ConsoleRedrawFlag
  79+ 8271 3E FF       >                        ld      a,$FF
  79+ 8273 32 6E 80    >                        ld      (ConsoleRedrawFlag),a
  80+ 8276                                      MMUSelectStockTable
  80+ 8276 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  81+ 827A CD AA E0                             call    generate_stock_market
  82+ 827D CD AC 74                             call    ResetMessageQueue
  83+ 8280                                      InitEventCounter
  83+ 8280 AF          >                        xor     a
  83+ 8281 32 4C 80    >                        ld      (EventCounter),a
  84+ 8284                                      ClearMissJump
  84+ 8284 3E FF       >                        ld      a,$FF
  84+ 8286 32 4E 80    >                        ld      (MissJumpFlag),a
  85+ 8289                                      SetMemFalse TextInputMode
  85+ 8289 3E FF       >                        ld      a,$FF
  85+ 828B 32 6F 80    >                        ld      (TextInputMode),a
  86+ 828E C9                                   ret
  87+ 828F
  88+ 828F              ; needs to be called after a kill too
  89+ 828F 2A 3C 7F     SetPlayerRank:          ld      hl,(KillTally)
  90+ 8292 DD 21 B2 86                          ld      ix,RankingTableLow
  91+ 8296 06 00                                ld      b,0
  92+ 8298 DD 56 01     .CompareLoop:           ld      d,(ix+1)
  93+ 829B DD 5E 00                             ld      e,(ix+0)
  94+ 829E A7                                   and     a             ; compare HL to DE
  95+ 829F ED 52                                sbc     hl,de         ; we can throw away HL now
  96+ 82A1 28 09                                jr      z,.FoundRank
  97+ 82A3 38 07                                jr      c,.FoundRank
  98+ 82A5 DD 23                                inc     ix
  99+ 82A7 DD 23                                inc     ix
 100+ 82A9 04                                   inc     b
 101+ 82AA 18 EC                                jr      .CompareLoop
 102+ 82AC 78           .FoundRank:             ld      a,b
 103+ 82AD 32 3E 7F                             ld      (CurrentRank),a
 104+ 82B0 C9                                   ret
 105+ 82B1
 106+ 82B1 3E 00        SetSpeedZero:           ld      a,0
 107+ 82B3 32 84 7E                             ld      (DELTA),a                                       ;
 108+ 82B6 67                                   ld      h,a                                             ;
 109+ 82B7 6F                                   ld      l,a                                             ;
 110+ 82B8 22 85 7E                             ld      (DELT4Lo),hl                                    ;
 111+ 82BB C9                                   ret
 112+ 82BC
 113+ 82BC 21 04 81     RechargeShip:           ld      hl,PlayerEnergy                                 ; if enery >= 128
 114+ 82BF 7E                                   ld      a,(hl)
 115+ 82C0 CB 7F                                bit     7,a                                             ; then we can recharge shields
 116+ 82C2 28 0D                                jr      z,.UpdatePlayerEnergy
 117+ 82C4 21 02 81     .ShieldCharge:          ld      hl,ForeShield                                   ; charge front shield
 118+ 82C7 34                                   inc     (hl)
 119+ 82C8 20 01                                jr      nz,.DoneForeShield
 120+ 82CA 35           .ForeOverCharge:        dec     (hl)
 121+ 82CB 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 122+ 82CC 34                                   inc     (hl)
 123+ 82CD 20 01                                jr      nz,.DoneAftShield
 124+ 82CF 35                                   dec     (hl)                                            ; back to 255
 125+ 82D0 23           .DoneAftShield:         inc     hl                                              ; point to energy
 126+ 82D1 34           .UpdatePlayerEnergy:    inc     (hl)
 127+ 82D2 28 0A                                jr      z,.OverflowedEnergy
 128+ 82D4 3A 07 84                             ld      a,(ExtraEnergyUnit)
 129+ 82D7                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 129+ 82D7 FE FF       >                        cp      EquipmentItemFitted
 129+ 82D9 C0          >                        ret     nz
 130+ 82DA 34           .EnergyUnitFitted:      inc     (hl)
 131+ 82DB 28 01                                jr      z,.OverflowedEnergy
 132+ 82DD C9                                   ret
 133+ 82DE 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 134+ 82DF C9                                   ret
 135+ 82E0 21 04 81     .SkipShieldCharge:      ld      hl,PlayerEnergy
 136+ 82E3 18 EC                                jr      .UpdatePlayerEnergy
 137+ 82E5
 138+ 82E5              ; sets carry to true if target
 139+ 82E5 3A 07 81     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 140+ 82E8 CB 7F                                bit     7,a
 141+ 82EA 28 07                                jr      z, .TargetSelected
 142+ 82EC E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 143+ 82EE CA F3 82                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 144+ 82F1                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 144+ 82F1 B7          >                        or a
 145+ 82F2 C9                                   ret
 146+ 82F3              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 146+ 82F3 21 55 80    >                        ld      hl,UniverseSlotList
 146+ 82F6 ED 31       >                        add     hl,a
 146+ 82F8 7E          >                        ld      a,(hl)
 146+ 82F9 3C          >                        inc     a
 146+ 82FA CA 00 83    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 146+ 82FD 3D          >                        dec     a           ; get original value back for later
 147+ 82FE                                      SetCarryFlag
 147+ 82FE 37          >                        scf
 148+ 82FF C9                                   ret
 149+ 8300 3E FF        .TargetInvalid:         ld      a, StageMissileNotTargeting     ; housekeep missile status if target gone
 150+ 8302 32 07 81                             ld      (MissileTargettingFlag),a
 151+ 8305 C9                                   ret
 152+ 8306
# file closed: ./Variables/general_variablesRoutines.asm
1162  8306                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 8306              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 8306 AF           ClearSlotCount:         xor     a
   3+ 8307 21 55 80                             ld      hl,UniverseSlotList
   4+ 830A 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 830C 77           .fillLoop:              ld      (hl),a
   6+ 830D 23                                   inc     hl
   7+ 830E 10 FC                                djnz    .fillLoop
   8+ 8310 C9                                   ret
   9+ 8311
  10+ 8311              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 8311              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 8311              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 8311              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 8311              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 8311              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 8311              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 8311              ; DOE NOT WORK                         cp      $FF
  18+ 8311              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 8311              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 8311              ; DOE NOT WORK                         inc     hl
  21+ 8311              ; DOE NOT WORK                         ld      (hl),1
  22+ 8311              ; DOE NOT WORK                         inc     hl
  23+ 8311              ; DOE NOT WORK                         inc     hl
  24+ 8311              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 8311              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 8311 C9                                   ret
  27+ 8312              ; Wipe all items
  28+ 8312 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 8314 21 55 80                             ld      hl,UniverseSlotList
  30+ 8317 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 8319 77           .fillLoop:              ld      (hl),a
  32+ 831A 23                                   inc     hl
  33+ 831B 10 FC                                djnz    .fillLoop
  34+ 831D C9                                   ret
  35+ 831E
  36+ 831E 21 55 80     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 8321 36 02                                ld      (hl),ShipTypeStation
  38+ 8323 21 61 80                             ld      hl,UniverseSlotType
  39+ 8326 36 02                                ld      (hl),ShipTypeStation
  40+ 8328 C9                                   ret
  41+ 8329
  42+ 8329 21 55 80     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 832C ED 31                                add     hl,a
  44+ 832E 70                                   ld      (hl),b
  45+ 832F C9                                   ret
  46+ 8330
  47+ 8330 21 61 80     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 8333 ED 31                                add     hl,a
  49+ 8335 70                                   ld      (hl),b
  50+ 8336 C9                                   ret
  51+ 8337
  52+ 8337              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 8337 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 8338 0E 00                                ld      c,0
  55+ 833A 21 55 80                             ld      hl,UniverseSlotList
  56+ 833D 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 833F 79           .fillLoop:              ld      a,c
  58+ 8340 BA                                   cp      d
  59+ 8341 28 03                                jr      z,.SkipSlot
  60+ 8343 3E FF                                ld      a,$FF
  61+ 8345 77                                   ld      (hl),a
  62+ 8346 23           .SkipSlot:              inc     hl
  63+ 8347 23                                   inc     hl
  64+ 8348 10 F5                                djnz    .fillLoop
  65+ 834A C9                                   ret
  66+ 834B
  67+ 834B 21 55 80     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 834E ED 31                                add     hl,a
  69+ 8350 36 FF                                ld      (hl),$FF
  70+ 8352 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 8354 ED 31                                add     hl,a
  72+ 8356 36 FF                                ld      (hl),$FF
  73+ 8358 C9                                   ret
  74+ 8359
  75+ 8359              ; Space Station will always be slot 0
  76+ 8359 21 62 80     ClearJunk:              ld      hl,UniverseSlotType+1
  77+ 835C 0E 01                                ld      c,1
  78+ 835E 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 8360 7E           .NextShip:              ld      a,(hl)
  80+ 8361 FE 03                                cp      ShipTypeJunk
  81+ 8363 CA 74 83                             jp      z,.ProcessJunk
  82+ 8366 FE 04                                cp      ShipTypeScoopable
  83+ 8368 CA 74 83                             jp      z,.ProcessJunk
  84+ 836B 23           .DoneIteration:         inc     hl
  85+ 836C 0C                                   inc     c
  86+ 836D 10 F1                                djnz    .NextShip
  87+ 836F                                      ClearJunkCount
  87+ 836F             >                        ZeroA
  87+ 836F AF          >                        xor a
  87+ 8370 32 34 7F    >                        ld      (JunkCount),a
  88+ 8373 C9                                   ret
  89+ 8374 79           .ProcessJunk:           ld      a,c
  90+ 8375 CD 4B 83                             call    ClearSlotA
  91+ 8378 C3 6B 83                             jp      .DoneIteration
  92+ 837B
  93+ 837B
  94+ 837B 21 62 80     WarpJunk:               ld      hl,UniverseSlotType+1
  95+ 837E 0E 01                                ld      c,1
  96+ 8380 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  97+ 8382 7E           .NextShip:              ld      a,(hl)
  98+ 8383 FE 03                                cp      ShipTypeJunk
  99+ 8385 CA 92 83                             jp      z,.ProcessJunk
 100+ 8388 FE 04                                cp      ShipTypeScoopable
 101+ 838A CA 92 83                             jp      z,.ProcessJunk
 102+ 838D 23           .DoneIteration:         inc     hl
 103+ 838E 0C                                   inc     c
 104+ 838F 10 F1                                djnz    .NextShip
 105+ 8391 C9                                   ret
 106+ 8392 79           .ProcessJunk:           ld      a,c
 107+ 8393                                      MMUSelectUniverseA
 107+ 8393 C6 46       >                     add    a,BankUNIVDATA0
 107+ 8395 ED 92 56    >                     nextreg UniverseMMU,       a
 108+ 8398 CD 72 C6                             call    WarpOffset
 109+ 839B C3 8D 83                             jp      .DoneIteration
 110+ 839E
 111+ 839E
 112+ 839E 21 62 80     AreShipsPresent:        ld      hl,UniverseSlotType+1
 113+ 83A1 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 114+ 83A3 7E           .NextShip:              ld      a,(hl)
 115+ 83A4 FE 00                                cp      ShipTypeNormal
 116+ 83A6                                      ClearCarryFlag
 116+ 83A6 B7          >                        or a
 117+ 83A7 C8                                   ret     z
 118+ 83A8 23                                   inc     hl
 119+ 83A9 10 F8                                djnz    .NextShip
 120+ 83AB                                      SetCarryFlag
 120+ 83AB 37          >                        scf
 121+ 83AC C9                                   ret
 122+ 83AD
 123+ 83AD 21 55 80     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 124+ 83B0                                      ClearCarryFlag
 124+ 83B0 B7          >                        or a
 125+ 83B1 7E           .SearchLoop:            ld      a,(hl)
 126+ 83B2                                      ReturnIfAEqNusng ShipTypeStation
 126+ 83B2 FE 02       >                        cp      ShipTypeStation
 126+ 83B4 C8          >                        ret     z
 127+ 83B5                                      SetCarryFlag
 127+ 83B5 37          >                        scf
 128+ 83B6 C9                                   ret
 129+ 83B7
 130+ 83B7 21 55 80     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 131+ 83BA ED 31                                add     hl,a
 132+ 83BC 7E                                   ld      a,(hl)
 133+ 83BD C9                                   ret
 134+ 83BE
 135+ 83BE 21 56 80     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 136+ 83C1 7E                                   ld      a,(hl)
 137+ 83C2 C9                                   ret
 138+ 83C3
 139+ 83C3 21 55 80     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 140+ 83C6 06 0C                                ld      b, UniverseSlotListSize
 141+ 83C8 0E 00                                ld      c, 0
 142+ 83CA 7E           .SearchLoop:            ld      a,(hl)
 143+ 83CB                                      JumpIfAEqNusng $FF, .FoundSlot
 143+ 83CB FE FF       >                        cp     $FF
 143+ 83CD CA D6 83    >                        jp      z,.FoundSlot
 144+ 83D0 0C                                   inc     c
 145+ 83D1 23                                   inc     hl
 146+ 83D2 10 F6                                djnz    .SearchLoop
 147+ 83D4                                      SetCarryFlag
 147+ 83D4 37          >                        scf
 148+ 83D5 C9                                   ret
 149+ 83D6              .FoundSlot:             ClearCarryFlag
 149+ 83D6 B7          >                        or a
 150+ 83D7 C9                                   ret
 151+ 83D8
 152+ 83D8
 153+ 83D8 CD C3 83     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 154+ 83DB 79                                   ld      a,c
 155+ 83DC C9                                   ret
 156+ 83DD
# file closed: ./Variables/UniverseSlotRoutines.asm
1163  83DD                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 83DD 00           AutoDocking				DB	0				; $033F
   2+ 83DE 00           PlayerECM				DB	0				; $0340
   3+ 83DF 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 83E0 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 83E1 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 83E5 19           Fuel					DB	25				; 0365  QQ14
   7+ 83E6 46           CargoBaySize			DB	70				; 036E
   8+ 83E7 00           CargoRunningLoad        DB  0
   9+ 83E8 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 83EC 00 00 00 00
   9+ 83F0 00 00 00 00
   9+ 83F4 00 00 00 00
  10+ 83F8              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 83F8              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 83F8              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 83F8              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 83F8              GoldCargoKGs:           equ CargoTonnes+15
  15+ 83F8              AlienItemsTonnes        equ CargoTonnes+17
  16+ 83F8              ; For each view laser a localised copy of the stats
  17+ 83F8              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 83F8 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 83FC 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 8400              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 8400              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 8400              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 8400              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 8400              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 8400              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 8400              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 8400              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 8400
  29+ 8400
  30+ 8400              QQ20                    equ CargoTonnes
  31+ 8400 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ 841A              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ 841A              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ 841A              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ 841A              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ 841A              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ 841A              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ 841A              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ 841A 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ 841B
# file closed: ./Variables/EquipmentVariables.asm
1164  841B                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 841B              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 841B              doRND2:
   3+ 841B A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 841C              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 841C              ; "doRandom, Random Seed update, new value in A & C)"
   6+ 841C              ; uses a c h l registers
   7+ 841C              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ 841C 3A 80 7D                             ld		a,(RandomSeed)					; Get Seed 0
   9+ 841F CB 17                                rl		a								; Rotate L including carry
  10+ 8421 4F                                   ld		c,a								; c =  double lo
  11+ 8422 21 82 7D     .AddSeed2:              ld		hl,RandomSeed2
  12+ 8425 8E                                   adc		a,(hl)							; RAND+2
  13+ 8426 32 80 7D     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ 8429 08           .SaveBtoSeed2:          ex		af,af'
  15+ 842A 79                                   ld		a,c
  16+ 842B 32 82 7D                             ld		(RandomSeed2),a
  17+ 842E 08                                   ex		af,af'
  18+ 842F 3A 81 7D                             ld		a,(RandomSeed1)
  19+ 8432 4F                                   ld		c,a								; C = Seed1
  20+ 8433 21 83 7D     .AddSeed3:              ld		hl,RandomSeed3
  21+ 8436 8E                                   adc		a,(hl)
  22+ 8437 32 81 7D                             ld		(RandomSeed1),a
  23+ 843A 08                                   ex		af,af'
  24+ 843B 79                                   ld		a,c
  25+ 843C 32 83 7D                             ld		(RandomSeed3),a
  26+ 843F 08                                   ex		af,af'
  27+ 8440                                      ;exx                                     ; get bc,de,hl back
  28+ 8440 C9                                   ret
  29+ 8441
  30+ 8441 21 80 7D     saveRandomSeeds:        ld      hl,RandomSeed
  31+ 8444 11 84 7D                             ld      de,RandomSeedSave
  32+ 8447 01 04 00                             ld      bc,4
  33+ 844A ED A0                                ldi
  34+ 844C ED A0                                ldi
  35+ 844E ED A0                                ldi
  36+ 8450 ED A0                                ldi
  37+ 8452 C9                                   ret
  38+ 8453
  39+ 8453 21 84 7D     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ 8456 11 80 7D                             ld      de,RandomSeed
  41+ 8459 01 04 00                             ld      bc,4
  42+ 845C ED A0                                ldi
  43+ 845E ED A0                                ldi
  44+ 8460 ED A0                                ldi
  45+ 8462 ED A0                                ldi
  46+ 8464 C9                                   ret
# file closed: ./Variables/random_number.asm
1165  8465                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 8465 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 8469 58 59 53 45
   1+ 846D 45 44
   2+ 846F 21 26 7F     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 8472 11 02 7F                             ld		de,SystemSeed
   4+ 8475 ED A0        copy_seed:		        ldi
   5+ 8477 ED A0                                ldi
   6+ 8479 ED A0                                ldi
   7+ 847B ED A0                                ldi
   8+ 847D ED A0                                ldi
   9+ 847F ED A0                                ldi
  10+ 8481 C9                                   ret
  11+ 8482
  12+ 8482 21 02 7F     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 8485 11 26 7F                             ld		de,GalaxySeeds
  14+ 8488 18 EB                                jr		copy_seed
  15+ 848A
  16+ 848A 21 26 7F     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 848D 11 1A 7F                             ld		de,WorkingSeeds
  18+ 8490 18 E3                                jr		copy_seed
  19+ 8492
  20+ 8492 21 1A 7F     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 8495 11 26 7F                             ld		de,GalaxySeeds
  22+ 8498 18 DB                                jr		copy_seed
  23+ 849A
  24+ 849A 21 1A 7F     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 849D 11 02 7F                             ld		de,SystemSeed
  26+ 84A0 18 D3                                jr		copy_seed
  27+ 84A2
  28+ 84A2 21 02 7F     copy_system_to_working: ld		hl,SystemSeed
  29+ 84A5 11 1A 7F                             ld		de,WorkingSeeds
  30+ 84A8 18 CB                                jr		copy_seed
  31+ 84AA
  32+ 84AA              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 84AA CD AD 84     		call	.NextStep					; This logic means we hard code x4
  34+ 84AD              .NextStep:
  35+ 84AD CD B0 84     		call	process_seed				; This logic means we hard code x2
  36+ 84B0              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 84B0 3A 02 7F     		ld		a,(SystemSeed)				; QQ15
  38+ 84B3 B7           		or		a							; clear carry flag
  39+ 84B4 21 04 7F     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 84B7 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 84B8 47           		ld		b,a							; partial sum lo
  42+ 84B9 3A 03 7F     		ld		a,(SystemSeed+1)
  43+ 84BC 21 05 7F     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 84BF 8E           		adc		a,(hl)						; note add with carry
  45+ 84C0 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 84C1 3A 04 7F     		ld		a,(SystemSeed+2)
  47+ 84C4 32 02 7F     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 84C7 3A 05 7F     		ld		a,(SystemSeed+3)
  49+ 84CA 32 03 7F     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 84CD 3A 07 7F     		ld		a,(SystemSeed+5)
  51+ 84D0 32 05 7F     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 84D3 3A 06 7F     		ld		a,(SystemSeed+4)
  53+ 84D6 32 04 7F     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 84D9 B7           		or		a
  55+ 84DA 78           		ld		a,b
  56+ 84DB 21 04 7F     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 84DE 86           		add	    a,(hl)
  58+ 84DF 32 06 7F     		ld		(SystemSeed+4),a
  59+ 84E2 79           		ld		a,c
  60+ 84E3 21 05 7F     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 84E6 8E           		adc		a,(hl)
  62+ 84E7 32 07 7F     		ld		(SystemSeed+5),a
  63+ 84EA C9           		ret
  64+ 84EB
  65+ 84EB              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 84EB CD EE 84     		call	.NextStep					; This logic means we hard code x4
  67+ 84EE              .NextStep:
  68+ 84EE CD F1 84     		call	working_seed				; This logic means we hard code x2
  69+ 84F1              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 84F1              ; x = a + c
  71+ 84F1 3A 1A 7F     		ld		a,(WorkingSeeds)			; QQ15
  72+ 84F4 B7           		or		a							; clear carry flag
  73+ 84F5 21 1C 7F     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 84F8 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 84F9 47           		ld		b,a							; partial sum lo [x]
  76+ 84FA              ; y = b + d	+ carry
  77+ 84FA 3A 1B 7F     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 84FD 21 1D 7F     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 8500 8E           		adc		a,(hl)						; note add with carry
  80+ 8501 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 8502 3A 1C 7F     		ld		a,(WorkingSeeds+2)
  82+ 8505 32 1A 7F     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 8508 3A 1D 7F     		ld		a,(WorkingSeeds+3)
  84+ 850B 32 1B 7F     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 850E 3A 1F 7F     		ld		a,(WorkingSeeds+5)
  86+ 8511 32 1D 7F     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 8514 3A 1E 7F     		ld		a,(WorkingSeeds+4)
  88+ 8517 32 1C 7F     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 851A B7           		or		a
  90+ 851B 78           		ld		a,b
  91+ 851C 21 1C 7F     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 851F 86           		add	    a,(hl)
  93+ 8520 32 1E 7F     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 8523 79           		ld		a,c
  95+ 8524 21 1D 7F     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 8527 8E           		adc		a,(hl)
  97+ 8528 32 1F 7F     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 852B C9           		ret
  99+ 852C
 100+ 852C 32           working_distX	DB 50
 101+ 852D 32           working_distY	DB 50
 102+ 852E 00           current_distY	DB 0
 103+ 852F
 104+ 852F AF           find_present_system:    xor		a
 105+ 8530 32 8F 7E                             ld		(XSAV),a
 106+ 8533 3A 03 7F     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 8536 4F                                   ld		c,a
 108+ 8537 3A 2D 7F     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 853A 47                                   ld		b,a								; so b holds Y ccord
 110+ 853B 79                                   ld		a,c
 111+ 853C 90                                   sub		b
 112+ 853D CB 7F                                bit		7,a
 113+ 853F 28 02                                jr		z,.positivedy
 114+ 8541 ED 44        .negativedy:            neg
 115+ 8543 32 2E 85     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 8546 ED 5B 2C 85                          ld		de,(working_distX)
 117+ 854A BA                                   cp		d
 118+ 854B 30 24                                jr		nc,.toofar
 119+ 854D 3A 05 7F     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 8550 4F                                   ld		c,a
 121+ 8551 3A 2C 7F                             ld		a,(PresentSystemX)
 122+ 8554 47                                   ld		b,a								; so b holds Y ccord
 123+ 8555 79                                   ld		a,c
 124+ 8556 90                                   sub		b
 125+ 8557 CB 7F                                bit		7,a
 126+ 8559 28 02                                jr		z,.positivedx
 127+ 855B ED 44        .negativedx:            neg
 128+ 855D 4F           .positivedx:            ld		c,a
 129+ 855E BB                                   cp		e
 130+ 855F 30 10                                jr		nc,.toofar
 131+ 8561 3A 2E 85     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 8564 47                                   ld		b,a								; we have c to recall Y into b
 133+ 8565 ED 43 2C 85                          ld		(working_distX),bc
 134+ 8569 C5                                   push	bc
 135+ 856A CD A2 84                             call 	copy_system_to_working
 136+ 856D C1                                   pop		bc
 137+ 856E 78                                   ld		a,b								;
 138+ 856F B1                                   or		c								;
 139+ 8570 C8                                   ret		z								; if we have distance 0 then bang on
 140+ 8571 CD AA 84     .toofar:                call	next_system_seed
 141+ 8574 3A 8F 7E                             ld		a,(XSAV)
 142+ 8577 3D                                   dec		a
 143+ 8578 FE 00                                cp		0
 144+ 857A C8                                   ret		z
 145+ 857B 32 8F 7E                             ld		(XSAV),a
 146+ 857E 18 B3                                jr		.CounterLoop
 147+ 8580
 148+ 8580              get_planet_data_working_seed:
 149+ 8580 3A 1B 7F     		ld		a, (WorkingSeeds+1)
 150+ 8583 E6 07        		and		7
 151+ 8585 32 47 7F     		ld		(DisplayEcononmy),a
 152+ 8588 3A 1C 7F     		ld		a, (WorkingSeeds+2)
 153+ 858B CB 3F        		srl	a
 154+ 858D CB 3F        		srl	a
 155+ 858F CB 3F        		srl	a
 156+ 8591 CB 3F        		srl	a								; c/8
 157+ 8593 E6 07        		and		7
 158+ 8595 32 48 7F     		ld		(DisplayGovernment),a
 159+ 8598 CB 3F        		srl	a
 160+ 859A FE 00        		cp		0
 161+ 859C 20 08        		jr		nz,.CanBeRich
 162+ 859E              .Fedual:
 163+ 859E 3A 47 7F     		ld		a,(DisplayEcononmy)
 164+ 85A1 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 85A3 32 47 7F     		ld		(DisplayEcononmy),a
 166+ 85A6              .CanBeRich:
 167+ 85A6 3A 47 7F     		ld		a,(DisplayEcononmy)
 168+ 85A9 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 85AB 32 49 7F     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 85AE 47           		ld		b,a
 171+ 85AF 3A 1D 7F     		ld		a,(WorkingSeeds+3)
 172+ 85B2 E6 03        		and		3
 173+ 85B4 80           		add		a,b
 174+ 85B5 32 49 7F     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 85B8 3A 48 7F     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 85BB CB 3F        		srl		a 							; gov/2
 177+ 85BD 47           		ld		b,a
 178+ 85BE 3A 49 7F     		ld		a,(DisplayTekLevel)
 179+ 85C1 80           		add		a,b
 180+ 85C2 32 49 7F     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 85C5 CB 27        		sla		a
 182+ 85C7 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 85C9 47           		ld		b,a
 184+ 85CA 3A 47 7F     		ld		a,(DisplayEcononmy)
 185+ 85CD 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 85CE 47           		ld		b,a
 187+ 85CF 3A 48 7F     		ld		a,(DisplayGovernment)
 188+ 85D2 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 85D3 32 4A 7F     		ld		(DisplayPopulation),a
 190+ 85D6 3A 47 7F     		ld		a,(DisplayEcononmy)
 191+ 85D9 EE 07        		xor		7							; Onto productivity
 192+ 85DB C6 03        		add		3							;  (Flipped eco +3)
 193+ 85DD 57           		ld		d,a
 194+ 85DE 3A 48 7F     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 85E1 C6 04        		add		4
 196+ 85E3 5F           		ld		e,a
 197+ 85E4 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 85E6 3A 4A 7F     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 85E9 57           		ld		d,a
 200+ 85EA ED 30        		mul
 201+ 85EC CB 23        		sla		e
 202+ 85EE CB 1A        		rr		d
 203+ 85F0 CB 23        		sla		e
 204+ 85F2 CB 1A        		rr		d
 205+ 85F4 CB 23        		sla		e
 206+ 85F6 CB 1A        		rr		d							; de * 8
 207+ 85F8 ED 53 4C 7F  		ld		(DisplayProductivity),de
 208+ 85FC              .DoRadius:
 209+ 85FC 3A 1D 7F     		ld		a,(WorkingSeeds+3)
 210+ 85FF 4F           		ld		c,a
 211+ 8600 3A 1F 7F     		ld		a,(WorkingSeeds+5)
 212+ 8603 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 8605 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 8607 47           		ld		b,a							;
 215+ 8608 ED 43 50 7F  		ld		(DisplayRadius),bc
 216+ 860C C9           		ret
 217+ 860D
# file closed: ./Variables/galaxy_seed.asm
1166  860D                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 860D 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 8611 65 00
   2+ 8613 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 8617 00
   3+ 8618 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 861C 74 61 72 79
   3+ 8620 00
   4+ 8621 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 8625 6E 67 00
   5+ 8628 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 862C 6F 6D 00
   6+ 862F
   7+ 862F 0D 86 13 86  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 8633 18 86 21 86
   7+ 8637 28 86
   8+ 8639              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 8639
  10+ 8639 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 863D 65 64 00
  11+ 8640 47 72 65 65  ConditionName2		DB "Green",0
  11+ 8644 6E 00
  12+ 8646 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 864A 6F 77 00
  13+ 864D 52 65 64 00  ConditionName4		DB "Red",0
  14+ 8651
  15+ 8651 39 86 40 86  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 8655 46 86 4D 86
  16+ 8659              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 8659
  18+ 8659 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 865D 53 45 49 54
  18+ 8661 49 4C 45 54
  18+ 8665 53 54 4F 4E
  18+ 8669 4C 4F 4E 55
  18+ 866D 54 48 4E 4F
  18+ 8671 41 4C 4C 45
  18+ 8675 58 45 47 45
  18+ 8679 5A 41 43 45
  18+ 867D 42 49 53 4F
  18+ 8681 55 53 45 53
  18+ 8685 41 52 4D 41
  18+ 8689 49 4E 44 49
  18+ 868D 52 45 41 3F
  18+ 8691 45 52 41 54
  18+ 8695 45 4E 42 45
  18+ 8699 52 41 4C 41
  18+ 869D 56 45 54 49
  18+ 86A1 45 44 4F 52
  18+ 86A5 51 55 41 4E
  18+ 86A9 54 45 49 53
  18+ 86AD 52 49 4F 4E
  18+ 86B1 00
  19+ 86B2
  20+ 86B2 00 00 04 00  RankingTableLow		DW	$0000,$0004,$0008,$0010,$0020,$0100,$0200,$0A00,$1900,$C1FF,$FFFF
  20+ 86B6 08 00 10 00
  20+ 86BA 20 00 00 01
  20+ 86BE 00 02 00 0A
  20+ 86C2 00 19 FF C1
  20+ 86C6 FF FF
  21+ 86C8 03 00 07 00  RankingTableHigh	DW	$0003,$0007,$000F,$001F,$00FF,$01FF,$09FF,$18FF,$C0FF,$FEFF,$FFFF
  21+ 86CC 0F 00 1F 00
  21+ 86D0 FF 00 FF 01
  21+ 86D4 FF 09 FF 18
  21+ 86D8 FF C0 FF FE
  21+ 86DC FF FF
  22+ 86DE
  23+ 86DE 48 61 72 6D  RankingName1		DB 	"Harmless",0
  23+ 86E2 6C 65 73 73
  23+ 86E6 00
  24+ 86E7 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  24+ 86EB 6C 79 20 48
  24+ 86EF 61 72 6D 6C
  24+ 86F3 65 73 73 00
  25+ 86F7 50 6F 6F 72  RankingName3		DB 	"Poor",0
  25+ 86FB 00
  26+ 86FC 41 76 65 72  RankingName4		DB 	"Average",0
  26+ 8700 61 67 65 00
  27+ 8704 41 62 6F 76  RankingName5		DB 	"Above Average",0
  27+ 8708 65 20 41 76
  27+ 870C 65 72 61 67
  27+ 8710 65 00
  28+ 8712 43 6F 6D 70  RankingName6		DB 	"Competent",0
  28+ 8716 65 74 65 6E
  28+ 871A 74 00
  29+ 871C 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  29+ 8720 65 72 6F 75
  29+ 8724 73 00
  30+ 8726 44 65 61 64  RankingName8		DB 	"Deadly",0
  30+ 872A 6C 79 00
  31+ 872D 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  31+ 8731 20 45 20 4C
  31+ 8735 20 49 20 54
  31+ 8739 20 45 20 2D
  31+ 873D 2D 2D 00
  32+ 8740 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  32+ 8744 6C 6F 62 73
  32+ 8748 67 6F 64 00
  33+ 874C 4E 75 74 74  RankingName11		DB 	"Nutter",0
  33+ 8750 65 72 00
  34+ 8753
  35+ 8753              RankingEQHarmless	EQU 0
  36+ 8753              RankingEQMostly		EQU 1
  37+ 8753              RankingEQPoor		EQU 2
  38+ 8753              RankingEQAverage	EQU 3
  39+ 8753              RankingEQAbove		EQU 4
  40+ 8753              RankingEQCompetent  EQU 5
  41+ 8753              RankingEQDangerous	EQU 6
  42+ 8753              RankingEQDeadly		EQU 7
  43+ 8753              RankingEQElite		EQU 8
  44+ 8753              RankingEQSkollob	EQU 9
  45+ 8753              RankingEQNutter		EQU 10
  46+ 8753
  47+ 8753
  48+ 8753
  49+ 8753 DE 86 E7 86  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  49+ 8757 F7 86 FC 86
  49+ 875B 04 87 12 87
  49+ 875F 1C 87 26 87
  49+ 8763 2D 87 40 87
  49+ 8767 4C 87
  50+ 8769              RankingNameIdxLen EQU $ - RankingNameIdx
  51+ 8769
  52+ 8769
  53+ 8769              getTableText:
  54+ 8769              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  55+ 8769              ; ">Note for ranking first 2 bytes are target rank"
  56+ 8769 D5           	push	de								; save DE as we will likley need it in caller
  57+ 876A ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  58+ 876C ED 31        	add		hl,a
  59+ 876E 5E           	ld		e,(hl)
  60+ 876F 23           	inc		hl
  61+ 8770 56           	ld		d,(hl)							; de = indexed address
  62+ 8771 EB           	ex		de,hl							; flip it to hl
  63+ 8772 D1           	pop		de								; retrieve de
  64+ 8773 C9           	ret										; return with hl as start entry
  65+ 8774
  66+ 8774
  67+ 8774              ;               CF      ZF      Result
  68+ 8774              ;               -----------------------------------
  69+ 8774              ;               0       0       HL > DE
  70+ 8774              ;               0       1       HL == DE
  71+ 8774              ;               1       0       HL < DE
  72+ 8774              ;               1       1       Impossible
  73+ 8774              getRankIndex:
  74+ 8774              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  75+ 8774              ; ">Note for ranking first 2 bytes are target rank"
  76+ 8774 7A           	ld		a,d
  77+ 8775 B3           	or		e
  78+ 8776 FE 00        	cp		0
  79+ 8778 C8           	ret		z								; quicks skip for 0 kills
  80+ 8779 AF           	xor 	a
  81+ 877A 21 B2 86     	ld		hl,RankingTableLow
  82+ 877D              .testLoop:
  83+ 877D 4E           	ld		c,(hl)
  84+ 877E 23           	inc		hl
  85+ 877F 46           	ld		b,(hl)							; bc = ranking
  86+ 8780 E5           	push	hl
  87+ 8781 60           	ld		h,b
  88+ 8782 69           	ld		l,c
  89+ 8783 CD 55 99     	call	compare16HLDE
  90+ 8786 38 06        	jr		c,.HLLTDE
  91+ 8788              .HLGTEDE									; Found the correct rank
  92+ 8788 E1           	pop		hl
  93+ 8789 23           	inc		hl								; move to next value
  94+ 878A 23           	inc		hl
  95+ 878B 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  96+ 878C 18 EF        	jr		.testLoop
  97+ 878E              .HLLTDE:									; HL < Kills so found correct rank
  98+ 878E E1           	pop		hl
  99+ 878F C9           	ret
 100+ 8790
# file closed: ./Tables/text_tables.asm
1167  8790                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 8790              ; Could move this into rom area for access as it will be read only
   2+ 8790 58 00        WordDummy					DB  "X",0
   3+ 8792 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   3+ 8796 74 00
   4+ 8798 52 69 67 68  WordRight					DB	"Right",0              ;2
   4+ 879C 74 00
   5+ 879E 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   5+ 87A2 00
   6+ 87A3 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   6+ 87A7 00
   7+ 87A8 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   7+ 87AC 65 00
   8+ 87AE 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   8+ 87B2 70 65 00
   9+ 87B5 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
  10+ 87B9 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
  10+ 87BD 6F 00
  11+ 87BF 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  12+ 87C3 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  12+ 87C7 00
  13+ 87C8 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  13+ 87CC 70 73 00
  14+ 87CF 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  14+ 87D3 4D 2E 00
  15+ 87D6 53 79 73 74  WordSystem          		DB  "System",0             ;13
  15+ 87DA 65 6D 00
  16+ 87DD 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  16+ 87E1 67 79 00
  17+ 87E4 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  17+ 87E8 00
  18+ 87E9 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  18+ 87ED 72 00
  19+ 87EF 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  19+ 87F3 65 00
  20+ 87F5 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  20+ 87F9 00
  21+ 87FA 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  21+ 87FE 61 72 79 00
  22+ 8802 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  22+ 8806 6E 67 00
  23+ 8809 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  23+ 880D 6F 6D 00
  24+ 8810 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  24+ 8814 00
  25+ 8815 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  25+ 8819 6C 64 00
  26+ 881C 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  26+ 8820 69 6E 67 00
  27+ 8824 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  27+ 8828 75 74 65 72
  27+ 882C 73 00
  28+ 882E 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  28+ 8832 72 73 70 61
  28+ 8836 63 65 00
  29+ 8839 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  29+ 883D 63 74 69 63
  29+ 8841 00
  30+ 8842 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  30+ 8846 61 00
  31+ 8848 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  31+ 884C 6E 00
  32+ 884E 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  32+ 8852 6E 64 65 72
  32+ 8856 00
  33+ 8857 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  33+ 885B 74 69 76 65
  33+ 885F 00
  34+ 8860 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  34+ 8864 00
  35+ 8865 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  35+ 8869 69 6C 65 73
  35+ 886D 00
  36+ 886E 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  36+ 8872 6F 61 63 74
  36+ 8876 69 76 65 73
  36+ 887A 00
  37+ 887B 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  37+ 887F 65 73 00
  38+ 8882 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  38+ 8886 6F 72 2F 57
  38+ 888A 69 6E 65 73
  38+ 888E 00
  39+ 888F 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  39+ 8893 72 69 65 73
  39+ 8897 00
  40+ 8898 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  40+ 889C 6F 74 69 63
  40+ 88A0 73 00
  41+ 88A2 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  41+ 88A6 69 6E 65 72
  41+ 88AA 79 00
  42+ 88AC 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  42+ 88B0 79 73 00
  43+ 88B3 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  43+ 88B7 61 72 6D 73
  43+ 88BB 00
  44+ 88BC 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  44+ 88C0 00
  45+ 88C1 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  45+ 88C5 72 61 6C 73
  45+ 88C9 00
  46+ 88CA 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  46+ 88CE 00
  47+ 88CF 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  47+ 88D3 69 6E 75 6D
  47+ 88D7 00
  48+ 88D8 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  48+ 88DC 53 74 6F 6E
  48+ 88E0 65 73 00
  49+ 88E3 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  49+ 88E7 6E 20 49 74
  49+ 88EB 65 6D 73 00
  50+ 88EF 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  50+ 88F3 65 73 00
  51+ 88F6 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  51+ 88FA 67 72 61 6D
  51+ 88FE 73 00
  52+ 8900 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  52+ 8904 73 00
  53+ 8906 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  53+ 890A 74 00
  54+ 890C 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  54+ 8910 65 00
  55+ 8912 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  55+ 8916 74 00
  56+ 8918 44 61 74 61  WordData					DB	"Data",0			   ;54
  56+ 891C 00
  57+ 891D 4F 6E 00     WordOn						DB  "On",0                 ;55
  58+ 8920 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  58+ 8924 61 6E 63 65
  58+ 8928 00
  59+ 8929 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  59+ 892D 6F 6D 79 00
  60+ 8931 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  60+ 8935 72 6E 6D 65
  60+ 8939 6E 74 00
  61+ 893C 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  61+ 8940 4C 65 76 65
  61+ 8944 6C 00
  62+ 8946 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  62+ 894A 6C 61 74 69
  62+ 894E 6F 6E 00
  63+ 8951 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  63+ 8955 69 6F 6E 00
  64+ 8959 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  64+ 895D 69 6F 6E 00
  65+ 8961 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  65+ 8965 73 00
  66+ 8967 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  66+ 896B 75 63 74 69
  66+ 896F 76 69 74 79
  66+ 8973 00
  67+ 8974 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  67+ 8978 61 67 65 00
  68+ 897C 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  68+ 8980 75 73 00
  69+ 8983 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  70+ 8986 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  70+ 898A 00
  71+ 898B 52 69 63 68  WordRich					DB  "Rich",0               ;69
  71+ 898F 00
  72+ 8990 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  73+ 8994 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  73+ 8998 6C 79 00
  74+ 899B 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  74+ 899F 00
  75+ 89A0 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  75+ 89A4 73 74 72 69
  75+ 89A8 61 6C 00
  76+ 89AB 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  76+ 89AF 63 75 6C 74
  76+ 89B3 75 72 61 6C
  76+ 89B7 00
  77+ 89B8 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  77+ 89BC 63 68 79 00
  78+ 89C0 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  78+ 89C4 61 6C 00
  79+ 89C7 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  79+ 89CB 69 2D 47 6F
  79+ 89CF 76 65 72 6E
  79+ 89D3 6D 65 6E 74
  79+ 89D7 00
  80+ 89D8 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  80+ 89DC 61 74 6F 72
  80+ 89E0 73 68 69 70
  80+ 89E4 00
  81+ 89E5 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  81+ 89E9 75 6E 69 73
  81+ 89ED 74 00
  82+ 89EF 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  82+ 89F3 65 64 65 72
  82+ 89F7 61 63 79 00
  83+ 89FB 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  83+ 89FF 63 72 61 63
  83+ 8A03 79 00
  84+ 8A05 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  84+ 8A09 6F 72 61 74
  84+ 8A0D 65 20 53 74
  84+ 8A11 61 74 65 00
  85+ 8A15 53 74 61 74  WordState 					DB  "State",0              ;83
  85+ 8A19 65 00
  86+ 8A1B 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  86+ 8A1F 74 00
  87+ 8A21 59 65 61 72  WordYears 					DB  "Years",0              ;85
  87+ 8A25 73 00
  88+ 8A27 30 00        Word0						DB  "0",0				   ;86
  89+ 8A29 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  89+ 8A2D 65 74 00
  90+ 8A30 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  90+ 8A34 65 73 00
  91+ 8A37 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  91+ 8A3B 75 63 74 00
  92+ 8A3F 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  93+ 8A43 50 72 69 63  WordPrice					DB  "Price",0              ;91
  93+ 8A47 65 00
  94+ 8A49 46 6F 72 00  WordFor                     DB  "For",0                ;92
  95+ 8A4D 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  95+ 8A51 00
  96+ 8A52 74 00        Wordt						DB  "t",0                  ;94
  97+ 8A54 6B 67 00     Wordkg						DB  "kg",0                 ;95
  98+ 8A57 67 00        Wordg						DB  "g",0                  ;96
  99+ 8A59 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  99+ 8A5D 69 74 69 74
  99+ 8A61 79 00
 100+ 8A63 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 101+ 8A67 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 101+ 8A6B 6B 00
 102+ 8A6D 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 102+ 8A71 70 00
 103+ 8A73 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 103+ 8A77 00
 104+ 8A78              ;WordMissile                 DB  "Missile",0            ;102
 105+ 8A78 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 105+ 8A7C 72 64 72 69
 105+ 8A80 76 65 00
 106+ 8A83 4D 69 6C 69  WordMilitary                DB  "Military",0
 106+ 8A87 74 61 72 79
 106+ 8A8B 00
 107+ 8A8C 41 64 64 65  WordAdder                   DB  "Adder",0
 107+ 8A90 72 00
 108+ 8A92 41 6E 61 63  WordAnaconda                DB  "Anaconda",0
 108+ 8A96 6F 6E 64 61
 108+ 8A9A 00
 109+ 8A9B 41 73 70 5F  WordAsp_Mk_2                DB  "Asp_Mk_2",0
 109+ 8A9F 4D 6B 5F 32
 109+ 8AA3 00
 110+ 8AA4 42 6F 61 00  WordBoa                     DB  "Boa",0
 111+ 8AA8 43 61 72 67  WordCargoType5              DB  "CargoType5",0
 111+ 8AAC 6F 54 79 70
 111+ 8AB0 65 35 00
 112+ 8AB3 42 6F 75 6C  WordBoulder                 DB  "Boulder",0
 112+ 8AB7 64 65 72 00
 113+ 8ABB 41 73 74 65  WordAsteroid                DB  "Asteroid",0
 113+ 8ABF 72 6F 69 64
 113+ 8AC3 00
 114+ 8AC4 42 75 73 68  WordBushmaster              DB  "Bushmaster",0
 114+ 8AC8 6D 61 73 74
 114+ 8ACC 65 72 00
 115+ 8ACF 43 68 61 6D  WordChameleon               DB  "Chameleon",0
 115+ 8AD3 65 6C 65 6F
 115+ 8AD7 6E 00
 116+ 8AD9 43 6F 62 72  WordCobraMk3                DB  "CobraMk3",0
 116+ 8ADD 61 4D 6B 33
 116+ 8AE1 00
 117+ 8AE2 43 6F 62 72  WordCobra_Mk_1              DB  "Cobra_Mk_1",0
 117+ 8AE6 61 5F 4D 6B
 117+ 8AEA 5F 31 00
 118+ 8AED 43 6F 62 72  WordCobra_Mk_3_P            DB  "Cobra_Mk_3_P",0
 118+ 8AF1 61 5F 4D 6B
 118+ 8AF5 5F 33 5F 50
 118+ 8AF9 00
 119+ 8AFA 43 6F 6E 73  WordConstrictor             DB  "Constrictor",0
 119+ 8AFE 74 72 69 63
 119+ 8B02 74 6F 72 00
 120+ 8B06 43 6F 72 69  WordCoriolis                DB  "Coriolis",0
 120+ 8B0A 6F 6C 69 73
 120+ 8B0E 00
 121+ 8B0F 43 6F 75 67  WordCougar                  DB  "Cougar",0
 121+ 8B13 61 72 00
 122+ 8B16 44 6F 64 6F  WordDodo                    DB  "Dodo",0
 122+ 8B1A 00
 123+ 8B1B 44 72 61 67  WordDragon                  DB  "Dragon",0
 123+ 8B1F 6F 6E 00
 124+ 8B22 45 73 63 61  WordEscape_Pod              DB  "Escape_Pod",0
 124+ 8B26 70 65 5F 50
 124+ 8B2A 6F 64 00
 125+ 8B2D 46 65 72 5F  WordFer_De_Lance            DB  "Fer_De_Lance",0
 125+ 8B31 44 65 5F 4C
 125+ 8B35 61 6E 63 65
 125+ 8B39 00
 126+ 8B3A 47 65 63 6B  WordGecko                   DB  "Gecko",0
 126+ 8B3E 6F 00
 127+ 8B40 47 68 61 76  WordGhavial                 DB  "Ghavial",0
 127+ 8B44 69 61 6C 00
 128+ 8B48 49 67 75 61  WordIguana                  DB  "Iguana",0
 128+ 8B4C 6E 61 00
 129+ 8B4F 4B 72 61 69  WordKrait                   DB  "Krait",0
 129+ 8B53 74 00
 130+ 8B55 4C 6F 67 6F  WordLogo                    DB  "Logo",0
 130+ 8B59 00
 131+ 8B5A 4D 61 6D 62  WordMamba                   DB  "Mamba",0
 131+ 8B5E 61 00
 132+ 8B60 4D 69 73 73  WordMissile                 DB  "Missile",0
 132+ 8B64 69 6C 65 00
 133+ 8B68 4D 6F 6E 69  WordMonitor                 DB  "Monitor",0
 133+ 8B6C 74 6F 72 00
 134+ 8B70 4D 6F 72 61  WordMoray                   DB  "Moray",0
 134+ 8B74 79 00
 135+ 8B76 4F 70 68 69  WordOphidian                DB  "Ophidian",0
 135+ 8B7A 64 69 61 6E
 135+ 8B7E 00
 136+ 8B7F 50 6C 61 74  WordPlate                   DB  "Plate",0
 136+ 8B83 65 00
 137+ 8B85 50 79 74 68  WordPython                  DB  "Python",0
 137+ 8B89 6F 6E 00
 138+ 8B8C 50 79 74 68  WordPython_P                DB  "Python_P",0
 138+ 8B90 6F 6E 5F 50
 138+ 8B94 00
 139+ 8B95 52 6F 63 6B  WordRock_Hermit             DB  "Rock_Hermit",0
 139+ 8B99 5F 48 65 72
 139+ 8B9D 6D 69 74 00
 140+ 8BA1 53 68 75 74  WordShuttleType9            DB  "ShuttleType9",0
 140+ 8BA5 74 6C 65 54
 140+ 8BA9 79 70 65 39
 140+ 8BAD 00
 141+ 8BAE 53 68 75 74  WordShuttle_Mk_2            DB  "Shuttle_Mk_2",0
 141+ 8BB2 74 6C 65 5F
 141+ 8BB6 4D 6B 5F 32
 141+ 8BBA 00
 142+ 8BBB 53 69 64 65  WordSidewinder              DB  "Sidewinder",0
 142+ 8BBF 77 69 6E 64
 142+ 8BC3 65 72 00
 143+ 8BC6 53 70 6C 69  WordSplinter                DB  "Splinter",0
 143+ 8BCA 6E 74 65 72
 143+ 8BCE 00
 144+ 8BCF 54 65 73 74  WordTestVector              DB  "TestVector",0
 144+ 8BD3 56 65 63 74
 144+ 8BD7 6F 72 00
 145+ 8BDA 54 68 61 72  WordThargoid                DB  "Thargoid",0
 145+ 8BDE 67 6F 69 64
 145+ 8BE2 00
 146+ 8BE3 54 68 61 72  WordThargon                 DB  "Thargon",0
 146+ 8BE7 67 6F 6E 00
 147+ 8BEB 54 72 61 6E  WordTransportType10         DB  "TransportType10",0
 147+ 8BEF 73 70 6F 72
 147+ 8BF3 74 54 79 70
 147+ 8BF7 65 31 30 00
 148+ 8BFB 56 69 70 65  WordViper                   DB  "Viper",0
 148+ 8BFF 72 00
 149+ 8C01 57 6F 72 6D  WordWorm                    DB  "Worm",0
 149+ 8C05 00
 150+ 8C06 52 61 74 74  WordRattler                 DB  "Rattler",0
 150+ 8C0A 6C 65 72 00
 151+ 8C0E
 152+ 8C0E 90 87 92 87  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 152+ 8C12 98 87 9E 87
 153+ 8C16 A3 87 A8 87  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 153+ 8C1A AE 87 B5 87
 154+ 8C1E B9 87 BF 87  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 154+ 8C22 C3 87 C8 87
 155+ 8C26 CF 87 D6 87  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 155+ 8C2A DD 87 E4 87
 156+ 8C2E E9 87 EF 87  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 156+ 8C32 F5 87 FA 87
 157+ 8C36 02 88 09 88  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 157+ 8C3A 10 88 15 88
 158+ 8C3E 1C 88 24 88  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 158+ 8C42 2E 88 39 88
 159+ 8C46 42 88 48 88  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 159+ 8C4A 4E 88 57 88
 160+ 8C4E 60 88 65 88  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 160+ 8C52 6E 88 7B 88
 161+ 8C56 82 88 8F 88  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 161+ 8C5A 98 88 A2 88
 162+ 8C5E AC 88 B3 88  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 162+ 8C62 BC 88 C1 88
 163+ 8C66 CA 88 CF 88  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 163+ 8C6A D8 88 E3 88
 164+ 8C6E EF 88 F6 88  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 164+ 8C72 00 89 06 89
 165+ 8C76 0C 89 12 89  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 165+ 8C7A 18 89 1D 89
 166+ 8C7E 20 89 29 89  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 166+ 8C82 31 89 3C 89
 167+ 8C86 46 89 51 89  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 167+ 8C8A 59 89 61 89
 168+ 8C8E 67 89 74 89  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 168+ 8C92 7C 89 83 89
 169+ 8C96 86 89        					DW  WordMCR																	;68
 170+ 8C98 8B 89 90 89  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 170+ 8C9C 94 89 9B 89
 171+ 8CA0 A0 89 AB 89                      DW  WordIndustrial,     WordAgricultural									;73
 172+ 8CA4 B8 89 C0 89  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 172+ 8CA8 C7 89 D8 89
 173+ 8CAC E5 89 EF 89                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 173+ 8CB0 FB 89 05 8A
 174+ 8CB4 15 8A 1B 8A  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 174+ 8CB8 21 8A 27 8A
 175+ 8CBC 29 8A 30 8A  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 175+ 8CC0 37 8A 3F 8A
 176+ 8CC4 43 8A 49 8A                      DW  WordPrice,          WordFor,          WordSale                          ;91
 176+ 8CC8 4D 8A
 177+ 8CCA 52 8A 54 8A  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 177+ 8CCE 57 8A
 178+ 8CD0 59 8A 63 8A  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 178+ 8CD4 67 8A 6D 8A
 179+ 8CD8 73 8A 60 8B                      DW  WordShip,           WordMissile       ; 101
 180+ 8CDC 8C 8A 92 8A  WordIdxShipNames:   DW  WordAdder,          WordAnaconda,     WordAsp_Mk_2,        WordBoa
 180+ 8CE0 9B 8A A4 8A
 181+ 8CE4 A8 8A B3 8A                      DW  WordCargoType5,     WordBoulder,      WordAsteroid,        WordBushmaster
 181+ 8CE8 BB 8A C4 8A
 182+ 8CEC CF 8A D9 8A                      DW  WordChameleon,      WordCobraMk3,     WordCobra_Mk_1,      WordCobra_Mk_3_P
 182+ 8CF0 E2 8A ED 8A
 183+ 8CF4 FA 8A 06 8B                      DW  WordConstrictor,    WordCoriolis,     WordCougar,          WordDodo
 183+ 8CF8 0F 8B 16 8B
 184+ 8CFC 1B 8B 22 8B                      DW  WordDragon,         WordEscape_Pod,   WordFer_De_Lance,    WordGecko
 184+ 8D00 2D 8B 3A 8B
 185+ 8D04 40 8B 48 8B                      DW  WordGhavial,        WordIguana,       WordKrait,           WordLogo
 185+ 8D08 4F 8B 55 8B
 186+ 8D0C 5A 8B 60 8B                      DW  WordMamba,          WordMissile,      WordMonitor,         WordMoray
 186+ 8D10 68 8B 70 8B
 187+ 8D14 76 8B 7F 8B                      DW  WordOphidian,       WordPlate,        WordPython,          WordPython_P
 187+ 8D18 85 8B 8C 8B
 188+ 8D1C 95 8B A1 8B                      DW  WordRock_Hermit,    WordShuttleType9, WordShuttle_Mk_2,    WordSidewinder
 188+ 8D20 AE 8B BB 8B
 189+ 8D24 C6 8B CF 8B                      DW  WordSplinter,       WordTestVector,   WordThargoid,        WordThargon
 189+ 8D28 DA 8B E3 8B
 190+ 8D2C EB 8B FB 8B                      DW  WordTransportType10,WordViper,        WordWorm,            WordRattler
 190+ 8D30 01 8C 06 8C
 191+ 8D34              ; Phrases
 192+ 8D34 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 193+ 8D38 06 07 00     TextEscapePod				DB	6,7,0            ;1
 194+ 8D3B 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 195+ 8D3E 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 196+ 8D41 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 197+ 8D44 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 198+ 8D47 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 199+ 8D4A 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 200+ 8D4D 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 201+ 8D51 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 202+ 8D55 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 203+ 8D59 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 204+ 8D5D 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 205+ 8D61 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 206+ 8D64 36 37 00     TextDataOn					DB	54,55,0          ;14
 207+ 8D67 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 208+ 8D6A 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 209+ 8D6D 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 210+ 8D70 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 211+ 8D73 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 212+ 8D76 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 213+ 8D79 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 214+ 8D7C 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 215+ 8D7F 54 55 00     TextLightYears				DB  84,85,0			 ;23
 216+ 8D82 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 217+ 8D86 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 218+ 8D89 64 65        TextEquipShip               DB  100,101          ;26
 219+ 8D8B
 220+ 8D8B 00           TextDummy					DB  0
 221+ 8D8C
 222+ 8D8C 34 8D 38 8D  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 222+ 8D90 3B 8D
 223+ 8D92 3E 8D 41 8D  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 223+ 8D96 44 8D
 224+ 8D98 47 8D 4A 8D  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 225+ 8D9C 4D 8D 51 8D  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 225+ 8DA0 55 8D 59 8D
 226+ 8DA4 5D 8D 61 8D  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 226+ 8DA8 64 8D
 227+ 8DAA 67 8D 6A 8D  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 227+ 8DAE 70 8D 6D 8D
 227+ 8DB2 79 8D 73 8D
 227+ 8DB6 76 8D 7C 8D
 228+ 8DBA 7F 8D        					DW  TextLightYears		                                            ; 21 23
 229+ 8DBC 82 8D 86 8D  					DW  Text0LightYears, TextMarketPrices
 230+ 8DC0 8B 8D        					DW  TextDummy;  25
 231+ 8DC2 00 00 00...  TextBuffer			DS	33
 232+ 8DE3
 233+ 8DE3              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 234+ 8DE3              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 235+ 8DE3
 236+ 8DE3              CapitaliseString:
 237+ 8DE3              ; ">CapitaliseString hl = address"
 238+ 8DE3              .CapLoop:
 239+ 8DE3 23           	inc		hl
 240+ 8DE4 7E           	ld		a,(hl)
 241+ 8DE5 FE 00        	cp		0
 242+ 8DE7 C8           	ret		z
 243+ 8DE8 FE 5B        	cp		'Z'+1
 244+ 8DEA 30 F7        	jr		nc,.CapLoop
 245+ 8DEC FE 41        	cp		'A'
 246+ 8DEE 38 F3        	jr		c,.CapLoop
 247+ 8DF0              .LowerCase:
 248+ 8DF0 C6 20        	add		a,'a'-'A'
 249+ 8DF2 77           	ld		(hl),a
 250+ 8DF3 18 EE        	jr		.CapLoop
 251+ 8DF5
 252+ 8DF5 21 DC 8C     ShipIndexToAddress      ld      hl,WordIdxShipNames
 253+ 8DF8 C3 FE 8D                             jp      WordLookup
 254+ 8DFB
 255+ 8DFB 21 0E 8C     WordIndexToAddress:     ld		hl,WordIdx
 256+ 8DFE ED 31        WordLookup:             add		hl,a
 257+ 8E00 ED 31                                add		hl,a
 258+ 8E02 D5                                   push	de
 259+ 8E03 5E                                   ld		e,(hl)
 260+ 8E04 23                                   inc		hl
 261+ 8E05 56                                   ld		d,(hl)
 262+ 8E06 EB                                   ex		de,hl
 263+ 8E07 D1                                   pop		de
 264+ 8E08 C9                                   ret
 265+ 8E09
 266+ 8E09
 267+ 8E09              expandTokenToString:
 268+ 8E09              ; ">expandTokenToString a = texttoken"
 269+ 8E09 21 8C 8D     	ld		hl,TextTokens
 270+ 8E0C CD 69 87     	call	getTableText
 271+ 8E0F 11 C2 8D     	ld		de,TextBuffer
 272+ 8E12              .ReadLoop:
 273+ 8E12 7E           	ld		a,(hl)
 274+ 8E13 FE 00        	cp		0
 275+ 8E15 28 1B        	jr		z,.ReadDone
 276+ 8E17 E5           	push	hl
 277+ 8E18 D5           	push	de
 278+ 8E19 21 0E 8C     	ld		hl,WordIdx
 279+ 8E1C CD 69 87     	call	getTableText
 280+ 8E1F D1           	pop		de
 281+ 8E20              .WordExpandLoop:
 282+ 8E20 7E           	ld		a,(hl)
 283+ 8E21 FE 00        	cp		0
 284+ 8E23 28 05        	jr		z,.AddSpace
 285+ 8E25              ;.GetChar:
 286+ 8E25 12           	ld		(de),a
 287+ 8E26 13           	inc		de
 288+ 8E27 23           	inc		hl
 289+ 8E28 18 F6        	jr		.WordExpandLoop
 290+ 8E2A              .AddSpace:
 291+ 8E2A 3E 20        	ld		a,' '
 292+ 8E2C 12           	ld		(de),a
 293+ 8E2D 13           	inc		de
 294+ 8E2E E1           	pop		hl
 295+ 8E2F 23           	inc		hl
 296+ 8E30 18 E0        	jr		.ReadLoop
 297+ 8E32              .ReadDone:
 298+ 8E32 1B           	dec		de
 299+ 8E33 AF           	xor		a
 300+ 8E34 12           	ld		(de),a
 301+ 8E35 C9           	ret
 302+ 8E36
# file closed: ./Tables/dictionary.asm
1168  8E36                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 8E36 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 8E3A 53 45 49 54
   1+ 8E3E 49 4C 45 54
   1+ 8E42 53 54 4F 4E
   1+ 8E46 4C 4F 4E 55
   1+ 8E4A 54 48 4E 4F
   2+ 8E4E 41 4C 4C     name_digrams2   DB "ALL"
   3+ 8E51 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 8E55 45 5A 41 43
   3+ 8E59 45 42 49 53
   3+ 8E5D 4F 55 53 45
   3+ 8E61 53 41 52 4D
   3+ 8E65 41 49 4E 44
   3+ 8E69 49 52 45 41
   4+ 8E6D 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 8E71 54 45 4E 42
   4+ 8E75 45 52 41 4C
   4+ 8E79 41 56 45 54
   4+ 8E7D 49 45 44 4F
   4+ 8E81 52 51 55 41
   4+ 8E85 4E 54 45 49
   4+ 8E89 53 52 49 4F
   4+ 8E8D 4E
   5+ 8E8E
   6+ 8E8E              ; TODO Moveinto galaxy data module
   7+ 8E8E 00 00 00...  name_expanded	DS 32
   8+ 8EAE 00           				DB 0
   9+ 8EAF
  10+ 8EAF
  11+ 8EAF
  12+ 8EAF              NamingLoop:
  13+ 8EAF 3A 1F 7F     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 8EB2 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 8EB4 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 8EB6 28 12        	jr		z,.SkipPhrase
  17+ 8EB8 C6 0C        	add		a,12
  18+ 8EBA CB 27        	sla		a					; phrase = (a+12)*2
  19+ 8EBC 21 36 8E     	ld		hl,name_digrams
  20+ 8EBF ED 31        	add		hl,a
  21+ 8EC1 ED A0        	ldi
  22+ 8EC3 7E           	ld		a,(hl)
  23+ 8EC4 FE 3F        	cp		'?'
  24+ 8EC6 28 02        	jr		z,.SkipPhrase
  25+ 8EC8              .AddExtra:
  26+ 8EC8 ED A0        	ldi
  27+ 8ECA              .SkipPhrase:
  28+ 8ECA D5           	push	de
  29+ 8ECB CD F1 84     	call	working_seed
  30+ 8ECE D1           	pop		de
  31+ 8ECF C9           	ret
  32+ 8ED0
  33+ 8ED0              ;GetDigramGalaxySeed:
  34+ 8ED0              ;	call	copy_galaxy_to_working
  35+ 8ED0              ;	jr		GetDigramWorkingSeed
  36+ 8ED0              ;GetDigramSystemSeed:
  37+ 8ED0              ;	call	copy_system_to_working
  38+ 8ED0              ;GetDigramWorkingSeed:
  39+ 8ED0              ;; ">GetDigram a = digram seed"
  40+ 8ED0              ;	ld		de,name_expanded
  41+ 8ED0              ;	ld		b,3
  42+ 8ED0              ;	ld		a,(WorkingSeeds)
  43+ 8ED0              ;	and		$40
  44+ 8ED0              ;	jr		z,.SmallSizeName
  45+ 8ED0              ;.LargeSizeName:
  46+ 8ED0              ;	call	NamingLoop
  47+ 8ED0              ;.SmallSizeName:
  48+ 8ED0              ;	call	NamingLoop
  49+ 8ED0              ;	call	NamingLoop
  50+ 8ED0              ;	call	NamingLoop
  51+ 8ED0              ;.DoneName:
  52+ 8ED0              ;	ex		de,hl
  53+ 8ED0              ;	ld		(hl),0
  54+ 8ED0              ;	ex		de,hl
  55+ 8ED0              ;	ret
  56+ 8ED0
  57+ 8ED0
  58+ 8ED0
  59+ 8ED0              ;GetDigramWorkingSeed:
  60+ 8ED0              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 8ED0              ;	ld		b,5					; working seed
  62+ 8ED0              ;	ld		de,name_expanded
  63+ 8ED0              ;.ExpansionLoop:
  64+ 8ED0              ;	push	bc
  65+ 8ED0              ;	ld		hl,WorkingSeeds
  66+ 8ED0              ;	ld		a,b
  67+ 8ED0              ;	add		hl,a
  68+ 8ED0              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 8ED0              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 8ED0              ;	cp		0					; 0 = skip 2 chars
  71+ 8ED0              ;	jr		z,.SkipPhrase
  72+ 8ED0              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 8ED0              ;	call	TT27
  74+ 8ED0              ;.SkipPhrase:
  75+ 8ED0              ;	push	de
  76+ 8ED0              ;	call	next_working_seed
  77+ 8ED0              ;	pop		de
  78+ 8ED0              ;	pop		bc
  79+ 8ED0              ;	djnz	GetDigramWorkingSeed
  80+ 8ED0              ;.DoneName:
  81+ 8ED0              ;	ex		de,hl
  82+ 8ED0              ;	ld		(hl),0
  83+ 8ED0              ;	ex		de,hl
  84+ 8ED0              ;	ret
  85+ 8ED0              ;
  86+ 8ED0              ;ExpandToken:
  87+ 8ED0              ;	DE = target
  88+ 8ED0              ;	a = token
  89+ 8ED0              ;
  90+ 8ED0              ;PlanetDigram:
  91+ 8ED0              ;	cp		&A0							; >- 160
  92+ 8ED0              ;	jr		c,MorePage4
  93+ 8ED0              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 8ED0              ;	asl		2							; Multiply by 2
  95+ 8ED0              ;	ld		hl, name_digrams2
  96+ 8ED0              ;	add		hl,a
  97+ 8ED0              ;	ld		a,(hl)
  98+ 8ED0              ;	call	ProcessTextToken
  99+ 8ED0              ;	inc		hl
 100+ 8ED0              ;	ld		a,(hl)
 101+ 8ED0              ;	cp		'?'
 102+ 8ED0              ;	ret		z
 103+ 8ED0              ;	call	ProcessTextToken
 104+ 8ED0              ;	ret
 105+ 8ED0              ;MorePage4:
 106+ 8ED0              ;	sub		$A0
 107+ 8ED0              ;ExtraTokenCheck:
 108+ 8ED0              ;	push	de							; save target address
 109+ 8ED0              ;	push	bc
 110+ 8ED0              ;	ld		b,a
 111+ 8ED0              ;	ld		hl,varV
 112+ 8ED0              ;	ld		(VarV),0400
 113+ 8ED0              ;	ld		(varV),a
 114+ 8ED0              ;	ld
 115+ 8ED0              ;
 116+ 8ED0              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 8ED0              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 8ED0              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 8ED0              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 8ED0              ;0A                      ASL A		      \ *= 2
 121+ 8ED0              ;A8                      TAY 		      \ digram index = 0to62
 122+ 8ED0              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 8ED0              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 8ED0              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 8ED0              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 8ED0              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 8ED0              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 8ED0              ;
 129+ 8ED0              ;	.TT47	\ more page4, subtract #160
 130+ 8ED0              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 8ED0              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 8ED0              ;AA                      TAX 		\ copy of word index
 133+ 8ED0              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 8ED0              ;85 22                   STA &22		\ V
 135+ 8ED0              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 8ED0              ;85 23                   STA &23		\ V+1
 137+ 8ED0              ;A0 00                   LDY #0
 138+ 8ED0              ;8A                      TXA 		\ token = word index
 139+ 8ED0              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 8ED0              ;	.TT51	\ counters Y letter, X token
 141+ 8ED0              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 8ED0              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 8ED0              ;C8                      INY 		\ letter count
 144+ 8ED0              ;D0 F9                   BNE TT51	\ loop Y
 145+ 8ED0              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 8ED0              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 8ED0              ;	.TT49	\ word ended
 148+ 8ED0              ;C8                      INY
 149+ 8ED0              ;D0 02                   BNE TT59    	\ next word
 150+ 8ED0              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 8ED0              ;	.TT59	\ next word
 152+ 8ED0              ;CA                      DEX 		\ token count
 153+ 8ED0              ;D0 ED                   BNE TT51	\ loop X token
 154+ 8ED0              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 8ED0              ;98                      TYA
 156+ 8ED0              ;48                      PHA 		\ store Yindex
 157+ 8ED0              ;A5 23                   LDA &23		\ V+1
 158+ 8ED0              ;48                      PHA 		\ correct pointer hi
 159+ 8ED0              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 8ED0              ;49 23                   EOR #&23	\ decode '#'
 161+ 8ED0              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 8ED0              ;68                      PLA 		\ restore this depth's Vhi
 163+ 8ED0              ;85 23                   STA &23		\ V+1
 164+ 8ED0              ;68                      PLA
 165+ 8ED0              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 8ED0              ;C8                      INY 		\ next letter
 167+ 8ED0              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 8ED0              ;E6 23                   INC &23		\ V+1
 169+ 8ED0              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 8ED0              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 8ED0              ;	.TT48 	\ rts
 172+ 8ED0              ;60                      RTS 		\ end of flight token printing TT27
 173+ 8ED0              ;
 174+ 8ED0              ;
 175+ 8ED0              ;
 176+ 8ED0              ;
 177+ 8ED0              ;
 178+ 8ED0              ;
 179+ 8ED0              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 8ED0              ;;AA                      TAX		\ copy token to count down
 181+ 8ED0              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 8ED0              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 8ED0              ;CA                      DEX
 184+ 8ED0              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 8ED0              ;CA                      DEX
 186+ 8ED0              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 8ED0              ;CA                      DEX
 188+ 8ED0              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 8ED0              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 8ED0              ;CA                      DEX
 191+ 8ED0              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 8ED0              ;CA                      DEX
 193+ 8ED0              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 8ED0              ;CA                      DEX
 195+ 8ED0              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 8ED0              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 8ED0              ;85 72                   STA &72	 	\ QQ17
 198+ 8ED0              ;60                      RTS
 199+ 8ED0              ;CA                      DEX 		\ skip Acc ==7
 200+ 8ED0              ;CA                      DEX
 201+ 8ED0              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 8ED0              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 8ED0              ;60                      RTS
 204+ 8ED0              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 8ED0              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 8ED0              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 8ED0              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 8ED0              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 8ED0              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 8ED0              ;C9 20                   CMP #32		\ < 32 ?
 211+ 8ED0              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 8ED0              ;		\ Token  < 14 or > 31
 213+ 8ED0              ;A6 72                   LDX &72	 	\ QQ17
 214+ 8ED0              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 8ED0              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 8ED0              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 8ED0              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 8ED0              ;	.TT42	\ Uppercase to lowercase
 219+ 8ED0              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 8ED0              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 8ED0              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 8ED0              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 8ED0              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 8ED0              ;	.TT44	\ print character as is with TT26
 225+ 8ED0              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 8ED0              ;
 227+ 8ED0              ;	.TT41	\ QQ17 bit7 set
 228+ 8ED0              ;24 72                   BIT &72		\ QQ17
 229+ 8ED0              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 8ED0              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 8ED0              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 8ED0              ;48                      PHA 		\ else store token Acc
 233+ 8ED0              ;8A                      TXA 		\ QQ17 copy
 234+ 8ED0              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 8ED0              ;85 72                   STA &72	 	\ QQ17
 236+ 8ED0              ;68                      PLA 		\ restore token
 237+ 8ED0              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 8ED0              ;
 239+ 8ED0              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 8ED0              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 8ED0              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 8ED0              ;
 243+ 8ED0              ;	.crlf	\ Acc == 9,  colon on right
 244+ 8ED0              ;A9 15                   LDA #21		\ on right
 245+ 8ED0              ;85 2C                   STA &2C		\ XC
 246+ 8ED0              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 8ED0              ;
 248+ 8ED0              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 8ED0              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 8ED0              ;F0 63                   BEQ TT48	\ rts
 251+ 8ED0              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 8ED0              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 8ED0              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 8ED0              ;48                      PHA 		\ push token
 255+ 8ED0              ;8A                      TXA 		\ QQ17 copy
 256+ 8ED0              ;29 BF                   AND #&BF	\ clear bit6
 257+ 8ED0              ;85 72                   STA &72	 	\ QQ17
 258+ 8ED0              ;68                      PLA 		\ pull token
 259+ 8ED0              ;	.TT74	\ TT26, print character.
 260+ 8ED0              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 8ED0              ;
 262+ 8ED0              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 8ED0              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 8ED0              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 8ED0              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 8ED0              ;0A                      ASL A		      \ *= 2
 267+ 8ED0              ;A8                      TAY 		      \ digram index = 0to62
 268+ 8ED0              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 8ED0              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 8ED0              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 8ED0              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 8ED0              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 8ED0              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 8ED0              ;
 275+ 8ED0              ;	.TT47	\ more page4, subtract #160
 276+ 8ED0              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 8ED0              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 8ED0              ;AA                      TAX 		\ copy of word index
 279+ 8ED0              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 8ED0              ;85 22                   STA &22		\ V
 281+ 8ED0              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 8ED0              ;85 23                   STA &23		\ V+1
 283+ 8ED0              ;A0 00                   LDY #0
 284+ 8ED0              ;8A                      TXA 		\ token = word index
 285+ 8ED0              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 8ED0              ;	.TT51	\ counters Y letter, X token
 287+ 8ED0              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 8ED0              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 8ED0              ;C8                      INY 		\ letter count
 290+ 8ED0              ;D0 F9                   BNE TT51	\ loop Y
 291+ 8ED0              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 8ED0              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 8ED0              ;	.TT49	\ word ended
 294+ 8ED0              ;C8                      INY
 295+ 8ED0              ;D0 02                   BNE TT59    	\ next word
 296+ 8ED0              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 8ED0              ;	.TT59	\ next word
 298+ 8ED0              ;CA                      DEX 		\ token count
 299+ 8ED0              ;D0 ED                   BNE TT51	\ loop X token
 300+ 8ED0              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 8ED0              ;98                      TYA
 302+ 8ED0              ;48                      PHA 		\ store Yindex
 303+ 8ED0              ;A5 23                   LDA &23		\ V+1
 304+ 8ED0              ;48                      PHA 		\ correct pointer hi
 305+ 8ED0              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 8ED0              ;49 23                   EOR #&23	\ decode '#'
 307+ 8ED0              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 8ED0              ;68                      PLA 		\ restore this depth's Vhi
 309+ 8ED0              ;85 23                   STA &23		\ V+1
 310+ 8ED0              ;68                      PLA
 311+ 8ED0              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 8ED0              ;C8                      INY 		\ next letter
 313+ 8ED0              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 8ED0              ;E6 23                   INC &23		\ V+1
 315+ 8ED0              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 8ED0              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 8ED0              ;	.TT48 	\ rts
 318+ 8ED0              ;60                      RTS 		\ end of flight token printing TT27
 319+ 8ED0              ;
 320+ 8ED0              ;
 321+ 8ED0              ;
# file closed: ./Tables/name_digrams.asm
1169  8ED0              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1170  8ED0              ; Include all maths libraries to test assembly
1171  8ED0                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ 8ED0              ;; calcs BHB + CDE where B and C are signs and may be 24 bit
   2+ 8ED0              ;; result HL with A as sign
   3+ 8ED0              ;; special handling if result is zero forcign sign bit to be zero
   4+ 8ED0
   5+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLSAHLEquBHLaddCDE:        ld      a,b
   6+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        xor     c
   7+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        and     SignOnly8Bit
   8+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative   .OppositeSigns
   9+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.SameSigns:             ld      ixh,b                      ; ixh = b
  10+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit b                     ; b = ABS b
  11+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        add     hl,de                      ; hl = hl + de
  12+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = b + c + carry
  13+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        adc     c                          ;
  14+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ;
  15+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ;
  16+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ;
  17+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ;
  18+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ;
  19+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeSigns:         ld      ixh,b                      ; save signed into ixh and ixl
  20+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      ixl,c                      ; .
  21+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit c                     ; c = ABS C
  22+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = abs b
  23+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBitA                      ; .
  24+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     c                          ; a = a - c
  25+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .OppositeCDEgtBHL  ; if c is positive
  26+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        push    hl
  27+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     hl,de                      ; then subtract de from hl
  28+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .HLDEWasNegative   ; if sub was positive
  29+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        pop     de                         ; at this stage the stack is just junk
  30+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ; then copy results to AHL
  31+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ; by just handling sign
  32+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ; .
  33+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ; .
  34+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ; .
  35+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeCDEgtBHL:      ex      de,hl                      ; save hl
  36+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      c,ixh                      ; swap signs over
  37+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,ixl                      ;
  38+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeSigns             ; and do calc again
  39+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.HLDEWasNegative:       pop     hl                         ; get back hl swap values and try again
  40+ 8ED0              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeCDEgtBHL
  41+ 8ED0              ; example
  42+ 8ED0              ; bhl - 00 00 06 CDE - 80 00 0B so equates to 000006 + (-00000B) or -000005 or 800005
  43+ 8ED0
  44+ 8ED0              ; Adds DE to HL, in form S15 result will also be S15 rather than 2's C
  45+ 8ED0 7C           AddDEtoHLSigned:        ld      a,h                         ; extract h sign to b
  46+ 8ED1 E6 80                                and     $80                         ; hl = abs (hl)
  47+ 8ED3 47                                   ld      b,a
  48+ 8ED4 7C                                   ld      a,h
  49+ 8ED5 E6 7F                                and     $7F
  50+ 8ED7 67                                   ld      h,a
  51+ 8ED8 7A                                   ld      a,d                         ; extract d sign to c
  52+ 8ED9 E6 80                                and     $80                         ; de = abs (de)
  53+ 8EDB 4F                                   ld      c,a
  54+ 8EDC 7A                                   ld      a,d
  55+ 8EDD E6 7F                                and     $7F
  56+ 8EDF 57                                   ld      d,a
  57+ 8EE0 78                                   ld      a,b
  58+ 8EE1 A9                                   xor     c
  59+ 8EE2 C2 EA 8E                             jp      nz,.OppositeSigns
  60+ 8EE5 19           .SameSigns              add     hl,de                       ; same signs so just add
  61+ 8EE6 78                                   ld      a,b                         ; and bring in the sign from b
  62+ 8EE7 B4                                   or      h                           ; note this has to be 15 bit result
  63+ 8EE8 67                                   ld      h,a                         ; but we can assume that
  64+ 8EE9 C9                                   ret
  65+ 8EEA              .OppositeSigns:         ClearCarryFlag
  65+ 8EEA B7          >                        or a
  66+ 8EEB ED 52                                sbc     hl,de
  67+ 8EED 38 04                                jr      c,.OppsiteSignInvert
  68+ 8EEF 78           .OppositeSignNoInvert:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  69+ 8EF0 B4                                   or      h
  70+ 8EF1 67                                   ld      h,a                         ; set the previou sign value
  71+ 8EF2 C9                                   ret
  72+ 8EF3              .OppsiteSignInvert:     NegHL                              ; we need to flip the sign and 2'c the Hl result
  72+ 8EF3 AF          >                    xor a
  72+ 8EF4 95          >                    sub l
  72+ 8EF5 6F          >                    ld l,a
  72+ 8EF6 9F          >                    sbc a,a
  72+ 8EF7 94          >                    sub h
  72+ 8EF8 67          >                    ld h,a
  73+ 8EF9 78                                   ld      a,b
  74+ 8EFA EE 80                                xor     SignOnly8Bit               ; flip sign bit
  75+ 8EFC B4                                   or      h
  76+ 8EFD 67                                   ld      h,a                         ; recover sign
  77+ 8EFE C9                                   ret
  78+ 8EFF
  79+ 8EFF 78           ADDHLDESignBC:          ld      a,b
  80+ 8F00 E6 80                                and     SignOnly8Bit
  81+ 8F02 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  82+ 8F03                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  82+ 8F03 FA 11 8F    >                        jp		m, ADDHLDEsBCOppSGN
  83+ 8F06 78           ADDHLDEsBCSameSigns:    ld      a,b
  84+ 8F07 B1                                   or      c
  85+ 8F08                                      JumpIfNegative ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  85+ 8F08 FA 0D 8F    >                        jp		m, ADDHLDEsBCSameNeg
  86+ 8F0B 19                                   add     hl,de                       ; both positive so a will already be zero
  87+ 8F0C C9                                   ret
  88+ 8F0D 19           ADDHLDEsBCSameNeg:      add     hl,de
  89+ 8F0E 78                                   ld      a,b
  90+ 8F0F                                                          DISPLAY "TODO: don't bother with overflow for now"
  91+ 8F0F B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  92+ 8F10 C9                                   ret
  93+ 8F11              ADDHLDEsBCOppSGN:       ClearCarryFlag
  93+ 8F11 B7          >                        or a
  94+ 8F12 ED 52                                sbc     hl,de
  95+ 8F14 38 02                                jr      c,ADDHLDEsBCOppInvert
  96+ 8F16 78           ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  97+ 8F17 C9                                   ret
  98+ 8F18              ADDHLDEsBCOppInvert:    NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  98+ 8F18 AF          >                    xor a
  98+ 8F19 95          >                    sub l
  98+ 8F1A 6F          >                    ld l,a
  98+ 8F1B 9F          >                    sbc a,a
  98+ 8F1C 94          >                    sub h
  98+ 8F1D 67          >                    ld h,a
  99+ 8F1E 78                                   ld      a,b
 100+ 8F1F EE 80                                xor     SignOnly8Bit                ; flip sign bit
 101+ 8F21 C9                                   ret
 102+ 8F22
 103+ 8F22 7C           ADDHLDESignedV4:        ld      a,h
 104+ 8F23 E6 80                                and     SignOnly8Bit
 105+ 8F25 47                                   ld      b,a                         ;save sign bit in b
 106+ 8F26 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 107+ 8F27                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
 107+ 8F27 FA 3F 8F    >                        jp		m, .ADDHLDEOppSGN
 108+ 8F2A 78           .ADDHLDESameSigns:      ld      a,b
 109+ 8F2B B2                                   or      d
 110+ 8F2C                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
 110+ 8F2C FA 31 8F    >                        jp		m, .ADDHLDESameNeg
 111+ 8F2F 19                                   add     hl,de
 112+ 8F30 C9                                   ret
 113+ 8F31 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 114+ 8F32 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 115+ 8F34 67                                   ld      h,a
 116+ 8F35 7A                                   ld      a,d
 117+ 8F36 E6 7F                                and     SignMask8Bit
 118+ 8F38 57                                   ld      d,a
 119+ 8F39 19                                   add     hl,de
 120+ 8F3A 3E 80                                ld      a,SignOnly8Bit
 121+ 8F3C                                                      DISPLAY "TODO:  dont bother with overflow for now"
 122+ 8F3C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 123+ 8F3D 67                                   ld      h,a
 124+ 8F3E C9                                   ret
 125+ 8F3F 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 126+ 8F40 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 127+ 8F42 67                                   ld      h,a
 128+ 8F43 7A                                   ld      a,d
 129+ 8F44 E6 7F                                and     SignMask8Bit
 130+ 8F46 57                                   ld      d,a
 131+ 8F47                                      ClearCarryFlag
 131+ 8F47 B7          >                        or a
 132+ 8F48 ED 52                                sbc     hl,de
 133+ 8F4A 38 04                                jr      c,.ADDHLDEOppInvert
 134+ 8F4C 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 135+ 8F4D B4                                   or      h
 136+ 8F4E 67                                   ld      h,a                         ; set the previou sign value
 137+ 8F4F C9                                   ret
 138+ 8F50              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 138+ 8F50 AF          >                    xor a
 138+ 8F51 95          >                    sub l
 138+ 8F52 6F          >                    ld l,a
 138+ 8F53 9F          >                    sbc a,a
 138+ 8F54 94          >                    sub h
 138+ 8F55 67          >                    ld h,a
 139+ 8F56 78                                   ld      a,b
 140+ 8F57 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 141+ 8F59 B4                                   or      h
 142+ 8F5A 67                                   ld      h,a                         ; recover sign
 143+ 8F5B C9                                   ret
 144+ 8F5C
 145+ 8F5C              ;;;NOT USED addhldesigned:          bit     7,h
 146+ 8F5C              ;;;NOT USED                         jr      nz,.noneghl
 147+ 8F5C              ;;;NOT USED                         call    negate16hl
 148+ 8F5C              ;;;NOT USED .noneghl:               bit     7,d
 149+ 8F5C              ;;;NOT USED                         jr      nz,.nonegde
 150+ 8F5C              ;;;NOT USED                         call    negate16de
 151+ 8F5C              ;;;NOT USED .nonegde:               add     hl,de                       ; do 2'd c add
 152+ 8F5C              ;;;NOT USED                         xor     a                           ; assume positive
 153+ 8F5C              ;;;NOT USED                         bit     7,h
 154+ 8F5C              ;;;NOT USED                         ret     z                           ; if not set then can exit early
 155+ 8F5C              ;;;NOT USED                         call    negate16hl
 156+ 8F5C              ;;;NOT USED                         ld      a,$FF
 157+ 8F5C              ;;;NOT USED                         ret
 158+ 8F5C
 159+ 8F5C
 160+ 8F5C              ;; NOT USED MAY WORK ? ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
 161+ 8F5C              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 162+ 8F5C              ;; NOT USED MAY WORK ? HL2cEquHLSgnPlusAusgn:  ld      d,0
 163+ 8F5C              ;; NOT USED MAY WORK ?                         ld      e,a                         ; set up DE = A
 164+ 8F5C              ;; NOT USED MAY WORK ?                         ld      a,h
 165+ 8F5C              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 166+ 8F5C              ;; NOT USED MAY WORK ?                         jr      z,.HLPositive               ; if HL is negative then do HL - A
 167+ 8F5C              ;; NOT USED MAY WORK ? .HLNegative:            ld      h,a                         ; hl = ABS (HL)
 168+ 8F5C              ;; NOT USED MAY WORK ?                         NegHL                               ; hl = - hl
 169+ 8F5C              ;; NOT USED MAY WORK ? .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
 170+ 8F5C              ;; NOT USED MAY WORK ?                         adc     hl,de                       ; aftert his hl will be 2's c
 171+ 8F5C              ;; NOT USED MAY WORK ?                         ret
 172+ 8F5C              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 173+ 8F5C              ;; NOT USED MAY WORK ? HLEquHLSgnPlusAusgn:    ld      e,a
 174+ 8F5C              ;; NOT USED MAY WORK ?                         ld      a,h
 175+ 8F5C              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 176+ 8F5C              ;; NOT USED MAY WORK ?                         jr      nz,.HLNegative              ; if HL is negative then do HL - A
 177+ 8F5C              ;; NOT USED MAY WORK ? .HLPositive:            ld      a,e                         ; else its HL + A
 178+ 8F5C              ;; NOT USED MAY WORK ?                         add     hl,a
 179+ 8F5C              ;; NOT USED MAY WORK ?                         ret
 180+ 8F5C              ;; NOT USED MAY WORK ? .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
 181+ 8F5C              ;; NOT USED MAY WORK ?                         NegHL                               ; and convert to 2's C
 182+ 8F5C              ;; NOT USED MAY WORK ?                         ld      d,0
 183+ 8F5C              ;; NOT USED MAY WORK ?                         ClearCarryFlag
 184+ 8F5C              ;; NOT USED MAY WORK ?                         sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 185+ 8F5C              ;; NOT USED MAY WORK ?                         jp      m,.FlipResult               ; if it was negative then its really positive
 186+ 8F5C              ;; NOT USED MAY WORK ?                         SetSignBit      h
 187+ 8F5C              ;; NOT USED MAY WORK ?                         ret
 188+ 8F5C              ;; NOT USED MAY WORK ? .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 189+ 8F5C              ;; NOT USED MAY WORK ?                         ret
 190+ 8F5C
 191+ 8F5C
 192+ 8F5C              ; 06 06 2022 not used
 193+ 8F5C              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 194+ 8F5C                      DISPLAY "TODO: AddAusngToHLsng not used"
 195+ 8F5C              ;;;AddAusngToHLsng:        ld      d,a
 196+ 8F5C              ;;;                        ld      e,h
 197+ 8F5C              ;;;                        ld      a,h
 198+ 8F5C              ;;;                        and     SignMask8Bit
 199+ 8F5C              ;;;                        ld      h,a
 200+ 8F5C              ;;;                        ld      a,d
 201+ 8F5C              ;;;                        add     hl,a
 202+ 8F5C              ;;;                        ld      a,e
 203+ 8F5C              ;;;                        and     SignOnly8Bit
 204+ 8F5C              ;;;                        or      h
 205+ 8F5C              ;;;                        ret
 206+ 8F5C              ; 06 06 2022 not used
 207+ 8F5C              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 208+ 8F5C                      DISPLAY "TODO: HLEequAusngMinusHLsng not used"
 209+ 8F5C              ;;;HLEequAusngMinusHLsng:  ld      b,h
 210+ 8F5C              ;;;                        ld      c,a
 211+ 8F5C              ;;;                        ld      a,b
 212+ 8F5C              ;;;                        and     SignOnly8Bit
 213+ 8F5C              ;;;                        jr      nz,.DoAdd
 214+ 8F5C              ;;;.DoSubtract:            ex      de,hl               ; move hl into de
 215+ 8F5C              ;;;                        ld      h,0                 ; hl = a
 216+ 8F5C              ;;;                        ld      l,c
 217+ 8F5C              ;;;                        ClearCarryFlag
 218+ 8F5C              ;;;                        sbc     hl,de               ; hl = a - hl
 219+ 8F5C              ;;;                        ret
 220+ 8F5C              ;;;.DoAdd:                 ld      a,c
 221+ 8F5C              ;;;                        add hl,a
 222+ 8F5C              ;;;                        ret
 223+ 8F5C              ;tested mathstestsun2
 224+ 8F5C              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 225+ 8F5C 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 226+ 8F5D AA                                   xor     d                   ; .
 227+ 8F5E E6 80                                and     SignOnly8Bit        ; .
 228+ 8F60 20 19                                jr      nz,.SignDifferent   ; .
 229+ 8F62 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 230+ 8F63 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 231+ 8F65 FD 67                                ld      iyh,a               ;
 232+ 8F67 78                                   ld      a,b                 ; bch = abs bch
 233+ 8F68 E6 7F                                and     SignMask8Bit        ; .
 234+ 8F6A 47                                   ld      b,a                 ; .
 235+ 8F6B 7A                                   ld      a,d                 ; del = abs del
 236+ 8F6C E6 7F                                and     SignMask8Bit        ; .
 237+ 8F6E 57                                   ld      d,a                 ; .
 238+ 8F6F 7C                                   ld      a,h                 ; l = h + l
 239+ 8F70 85                                   add     l                   ; .
 240+ 8F71 6F                                   ld      l,a                 ; .
 241+ 8F72 79                                   ld      a,c                 ; e = e + c + carry
 242+ 8F73 8B                                   adc     e                   ; .
 243+ 8F74 5F                                   ld      e,a                 ; .
 244+ 8F75 78                                   ld      a,b                 ; d = b + d + carry (signed)
 245+ 8F76 8A                                   adc     d                   ;
 246+ 8F77 FD B4                                or      iyh                 ; d = or back in sign bit
 247+ 8F79 57                                   ld      d,a                 ;
 248+ 8F7A C9                                   ret                         ; done
 249+ 8F7B 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 250+ 8F7C FD 67                                ld      iyh,a               ; iyh = b sign
 251+ 8F7E E6 7F                                and     SignMask8Bit        ; .
 252+ 8F80 47                                   ld      b,a                 ; .
 253+ 8F81 7A                                   ld      a,d                 ; del = abs del
 254+ 8F82 FD 6F                                ld      iyl,a               ; iyl = d sign
 255+ 8F84 E6 7F                                and     SignMask8Bit        ; .
 256+ 8F86 57                                   ld      d,a                 ; .
 257+ 8F87 E5                                   push    hl                  ; save hl
 258+ 8F88 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 259+ 8F8A ED 52                                sbc     hl,de               ;
 260+ 8F8C E1                                   pop     hl                  ;
 261+ 8F8D 38 0E                                jr      c,.BCHltDEL
 262+ 8F8F 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 263+ 8F91 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 264+ 8F92                                      JumpIfALTNusng l,.BCHltDEL
 264+ 8F92 BD          >                        cp      l
 264+ 8F93 DA 9D 8F    >                        jp		c, .BCHltDEL
 265+ 8F96 20 15                                jr      nz,.DELltBCH
 266+ 8F98              ; The same so its just zero
 267+ 8F98 AF           .BCHeqDEL:              xor     a                  ; its just zero
 268+ 8F99 57                                   ld      d,a                ; .
 269+ 8F9A 5F                                   ld      e,a                ; .
 270+ 8F9B 6F                                   ld      l,a                ; .
 271+ 8F9C C9                                   ret                        ; .
 272+ 8F9D              ;BCH is less than DEL so its DEL - BCH the sort out sign
 273+ 8F9D 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 274+ 8F9E 94                                   sub     h                  ; .                              ;   01D70F DEL
 275+ 8F9F 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 276+ 8FA0 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 277+ 8FA1 99                                   sbc     c                  ; .                              ;
 278+ 8FA2 5F                                   ld      e,a                ; .                              ;
 279+ 8FA3 7A                                   ld      a,d                ; d = d - b - carry              ;
 280+ 8FA4 98                                   sbc     b                  ; .                              ;
 281+ 8FA5 57                                   ld      d,a                ; .                              ;
 282+ 8FA6 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 283+ 8FA8 E6 80                                and     SignOnly8Bit       ;
 284+ 8FAA B2                                   or      d                  ;
 285+ 8FAB 57                                   ld      d,a                ;
 286+ 8FAC C9                                   ret
 287+ 8FAD 7C           .DELltBCH:              ld      a,h                ; l = h - l
 288+ 8FAE 95                                   sub     l                  ;
 289+ 8FAF 6F                                   ld      l,a                ;
 290+ 8FB0 79                                   ld      a,c                ; e = c - e - carry
 291+ 8FB1 9B                                   sbc     e                  ;
 292+ 8FB2 5F                                   ld      e,a                ;
 293+ 8FB3 78                                   ld      a,b                ; d = b - d - carry
 294+ 8FB4 9A                                   sbc     d                  ;
 295+ 8FB5 57                                   ld      d,a                ;
 296+ 8FB6 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 297+ 8FB8 E6 80                                and     SignOnly8Bit       ;
 298+ 8FBA B2                                   or      d                  ;
 299+ 8FBB 57                                   ld      d,a                ;
 300+ 8FBC C9                                   ret
 301+ 8FBD
 302+ 8FBD              ; 06 06 2022 not used
 303+ 8FBD              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 304+ 8FBD                      DISPLAY "TODO: AddAHLtoDEsigned not used"
 305+ 8FBD              ;;;AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 306+ 8FBD              ;;;                        ld      c,d                     ; .
 307+ 8FBD              ;;;                        xor     c                       ; A = A xor C
 308+ 8FBD              ;;;                        res     7,d                     ; clear sign bit of D
 309+ 8FBD              ;;;                        jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 310+ 8FBD              ;;;                        add     hl,de                   ; HL = HL + DE
 311+ 8FBD              ;;;                        ret                             ; return
 312+ 8FBD              ;;;.OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 313+ 8FBD              ;;;                        ret     nc                      ; if no carry return
 314+ 8FBD              ;;;                        add     hl,de                   ; else HL = HL + DE
 315+ 8FBD              ;;;                        ex      de,hl                   ;      swap HL and DE
 316+ 8FBD              ;;;                        and     a                       ;      reset carry
 317+ 8FBD              ;;;                        sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 318+ 8FBD              ;;;                        ld      b,c                     ;      B = sign of C
 319+ 8FBD              ;;;                        ret                             ;      ret
 320+ 8FBD
 321+ 8FBD
 322+ 8FBD              ; 06 06 2022 not used
 323+ 8FBD              ; a = value to add
 324+ 8FBD              ; b = offset (equivalent to regX)
 325+ 8FBD              ; returns INWK [x] set to new value
 326+ 8FBD              ; NOT USED addINWKbasigned:
 327+ 8FBD              ; NOT USED 		ld 		hl,UBnKxlo                  ; hl = INWK 0
 328+ 8FBD              ; NOT USED 		ld      c,a                         ; preserve a
 329+ 8FBD              ; NOT USED 		ld		a,b
 330+ 8FBD              ; NOT USED 		add		hl,a                        ; hl = INWK[x]
 331+ 8FBD              ; NOT USED         ld      a,c                         ; get back a value
 332+ 8FBD              ; NOT USED         and     $80                         ; get sign bit from a
 333+ 8FBD              ; NOT USED         ld      b,a                         ; now b = sign bit of a
 334+ 8FBD              ; NOT USED         ld      a,c                         ; a = original value
 335+ 8FBD              ; NOT USED         and     SignMask8Bit                ; a = unsigned version of original value
 336+ 8FBD              ; 06 06 2022 not used
 337+ 8FBD              ; hl = unsigned version of INWK0[b]
 338+ 8FBD              ; a = value to add, also in c which will optimise later code
 339+ 8FBD              ; b = sign bit of a ( in old code was varT)
 340+ 8FBD              ; NOTUSEDaddhlcsigned:
 341+ 8FBD              ; NOTUSED        ld      e,(hl)                      ; de = INKK value
 342+ 8FBD              ; NOTUSED        inc     hl
 343+ 8FBD              ; NOTUSED        ld      d,(hl)
 344+ 8FBD              ; NOTUSED        inc     hl                          ; now pointing a sign
 345+ 8FBD              ; NOTUSED        ld      a,(hl)                      ; a = sign bit
 346+ 8FBD              ; NOTUSED        ex      de,hl                       ; hl = value now and de = pointer to sign
 347+ 8FBD              ; NOTUSED        xor     b                           ; a = resultant sign
 348+ 8FBD              ; NOTUSED        bit     7,a                         ; is it negative?
 349+ 8FBD              ; NOTUSED        jr      z,.postivecalc
 350+ 8FBD              ; NOTUSED.negativecalc:
 351+ 8FBD              ; NOTUSED        ld      a,h
 352+ 8FBD              ; NOTUSED        and     SignMask8Bit
 353+ 8FBD              ; NOTUSED        ld      h,a                         ; strip high bit
 354+ 8FBD              ; NOTUSED        ld      ixl,b                       ; save sign bit from b into d
 355+ 8FBD              ; NOTUSED        ld      b,0                         ; c = value to subtract so now bc = value to subtract
 356+ 8FBD              ; NOTUSED        sbc     hl,bc
 357+ 8FBD              ; NOTUSED        ld      b,ixl                       ; get sign back
 358+ 8FBD              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to sign
 359+ 8FBD              ; NOTUSED        ld      a,(hl)                      ;
 360+ 8FBD              ; NOTUSED        and     SignMask8Bit
 361+ 8FBD              ; NOTUSED        sbc     a,0                         ; subtract carry which could flip sign bit
 362+ 8FBD              ; NOTUSED        or      $80                         ; set bit 0
 363+ 8FBD              ; NOTUSED        xor     b                           ; flip bit on sign (var T)
 364+ 8FBD              ; NOTUSED        ld      (hl),a
 365+ 8FBD              ; NOTUSED        dec     hl
 366+ 8FBD              ; NOTUSED        ld      (hl),d
 367+ 8FBD              ; NOTUSED        dec     hl
 368+ 8FBD              ; NOTUSED        ld      (hl),e                      ; write out DE to INKW[x]0,1
 369+ 8FBD              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 370+ 8FBD              ; NOTUSED        ret     c                           ; if carry was set then we can exit now
 371+ 8FBD              ; NOTUSED.nocarry:
 372+ 8FBD              ; NOTUSED        NegHL                               ; get hl back to positive, a is still inkw+2
 373+ 8FBD              ; NOTUSED        or      b                           ; b is still varT
 374+ 8FBD              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 375+ 8FBD              ; NOTUSED        ld      (hl),e
 376+ 8FBD              ; NOTUSED        inc     hl
 377+ 8FBD              ; NOTUSED        ld      (hl),d
 378+ 8FBD              ; NOTUSED        inc     hl
 379+ 8FBD              ; NOTUSED        ld      (hl),a                      ; set sign bit in INKK[x]+2
 380+ 8FBD              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to sign
 381+ 8FBD              ; NOTUSED        ret
 382+ 8FBD              ; NOTUSED.postivecalc:
 383+ 8FBD              ; NOTUSED        ld      ixl,b
 384+ 8FBD              ; NOTUSED        ld      b,0
 385+ 8FBD              ; NOTUSED        add     hl,de
 386+ 8FBD              ; NOTUSED        ex      de,hl
 387+ 8FBD              ; NOTUSED        or      ixl                         ; we don;t need to recover b here
 388+ 8FBD              ; NOTUSED        ld      (hl),a                      ; push sign into INWK[x]
 389+ 8FBD              ; NOTUSED        dec     hl
 390+ 8FBD              ; NOTUSED        ld      (hl),d
 391+ 8FBD              ; NOTUSED        dec     hl
 392+ 8FBD              ; NOTUSED        ld      (hl),e
 393+ 8FBD              ; NOTUSED        ret
 394+ 8FBD
 395+ 8FBD              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 396+ 8FBD              ;MVT1
 397+ 8FBD              ;    S = bits 6 to 0 of A
 398+ 8FBD              ;    A = sign bit => T
 399+ 8FBD              ;    xor sign bit with ink[x] Sign
 400+ 8FBD              ;    if negative thn its not an add
 401+ 8FBD              ;
 402+ 8FBD              ;        and h, 7F
 403+ 8FBD              ;        b = 0
 404+ 8FBD              ;        c = varS
 405+ 8FBD              ;        subtract INW[X]hilo, bc
 406+ 8FBD              ;        retain carry
 407+ 8FBD              ;        get INKW[x]Sign
 408+ 8FBD              ;        and 7F
 409+ 8FBD              ;        subtract carry (so will go negtive if negative)
 410+ 8FBD              ;        xor bit 7 of h with T to flip bit
 411+ 8FBD              ;        write to INKW[x]Sign
 412+ 8FBD              ;
 413+ 8FBD              ;    else
 414+ 8FBD              ;MV10.
 415+ 8FBD              ;        add INWK[x]hi,lo, varS
 416+ 8FBD              ;        or      sign bit
 417+ 8FBD
 418+ 8FBD
# file closed: ./Maths/asm_add.asm
1172  8FBD                  INCLUDE "./Maths/asm_subtract.asm"
# file opened: ./Maths/asm_subtract.asm
   1+ 8FBD              ;...subtract routines
   2+ 8FBD              ; we could cheat, flip the sign of DE and just add but its not very optimised
   3+ 8FBD 7C           subHLDES15:             ld      a,h
   4+ 8FBE E6 80                                and     SignOnly8Bit
   5+ 8FC0 47                                   ld      b,a                         ;save sign bit in b
   6+ 8FC1 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
   7+ 8FC2                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
   7+ 8FC2 FA F0 8F    >                        jp		m, .SUBHLDEOppSGN
   8+ 8FC5 78           .SUBHLDESameSigns:      ld      a,b
   9+ 8FC6 B2                                   or      d
  10+ 8FC7                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  10+ 8FC7 FA D1 8F    >                        jp		m, .SUBHLDESameNeg
  11+ 8FCA                                      ClearCarryFlag
  11+ 8FCA B7          >                        or a
  12+ 8FCB ED 52                                sbc     hl,de
  13+ 8FCD                                      JumpIfNegative .SUBHLDESameOvrFlw
  13+ 8FCD FA E4 8F    >                        jp		m, .SUBHLDESameOvrFlw
  14+ 8FD0 C9                                   ret
  15+ 8FD1 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  16+ 8FD2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  17+ 8FD4 67                                   ld      h,a
  18+ 8FD5 7A                                   ld      a,d
  19+ 8FD6 E6 7F                                and     SignMask8Bit
  20+ 8FD8 57                                   ld      d,a
  21+ 8FD9                                      ClearCarryFlag
  21+ 8FD9 B7          >                        or a
  22+ 8FDA ED 52                                sbc     hl,de
  23+ 8FDC                                      JumpIfNegative .SUBHLDESameOvrFlw
  23+ 8FDC FA E4 8F    >                        jp		m, .SUBHLDESameOvrFlw
  24+ 8FDF                                                          DISPLAY "TODO:  don't bother with overflow for now"
  25+ 8FDF 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  26+ 8FE0 F6 80                                or      SignOnly8Bit
  27+ 8FE2 67                                   ld      h,a
  28+ 8FE3 C9                                   ret
  29+ 8FE4              .SUBHLDESameOvrFlw:     NegHL
  29+ 8FE4 AF          >                    xor a
  29+ 8FE5 95          >                    sub l
  29+ 8FE6 6F          >                    ld l,a
  29+ 8FE7 9F          >                    sbc a,a
  29+ 8FE8 94          >                    sub h
  29+ 8FE9 67          >                    ld h,a
  30+ 8FEA 78                                   ld      a,b
  31+ 8FEB EE 80                                xor     SignOnly8Bit                ; flip sign bit
  32+ 8FED B4                                   or      h
  33+ 8FEE 67                                   ld      h,a                         ; recover sign
  34+ 8FEF C9                                   ret
  35+ 8FF0 B7           .SUBHLDEOppSGN:         or      a
  36+ 8FF1 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  37+ 8FF2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  38+ 8FF4 67                                   ld      h,a
  39+ 8FF5 7A                                   ld      a,d
  40+ 8FF6 E6 7F                                and     SignMask8Bit
  41+ 8FF8 57                                   ld      d,a
  42+ 8FF9 19                                   add     hl,de
  43+ 8FFA 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  44+ 8FFB B4                                   or      h
  45+ 8FFC 67                                   ld      h,a                         ; set the previou sign value
  46+ 8FFD C9                                   ret
  47+ 8FFE
  48+ 8FFE
# file closed: ./Maths/asm_subtract.asm
1173  8FFE                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ 8FFE              ; Note its big endian
   2+ 8FFE 2A E1 83     addDEtoCash:            ld      hl,(Cash)
   3+ 9001 19                                   add     hl,de
   4+ 9002 22 E1 83                             ld      (Cash),hl
   5+ 9005 11 00 00                             ld      de,0
   6+ 9008 2A E3 83                             ld      hl,(Cash+2)
   7+ 900B ED 5A                                adc     hl,de
   8+ 900D 22 E3 83                             ld      (Cash+2),hl
   9+ 9010 C9                                   ret
  10+ 9011
  11+ 9011 2A E1 83     subDEfromCash:          ld      hl,(Cash)
  12+ 9014 7C                                   ld      a,h
  13+ 9015 B5                                   or      l
  14+ 9016 2A E3 83                             ld      hl,(Cash+2)
  15+ 9019 B4                                   or      h
  16+ 901A B5                                   or      l
  17+ 901B C8                                   ret     z               ; No cash return
  18+ 901C B7                                   or      a
  19+ 901D 2A E1 83                             ld      hl,(Cash)
  20+ 9020 ED 52                                sbc     hl,de
  21+ 9022 22 E1 83                             ld      (Cash),hl
  22+ 9025 11 00 00                             ld      de,0
  23+ 9028 2A E3 83                             ld      hl,(Cash+2)
  24+ 902B ED 52                                sbc     hl,de
  25+ 902D 22 E3 83                             ld      (Cash+2),hl
  26+ 9030                                      JumpOnBitSet h,7,.ZeroCash
  26+ 9030 CB 7C       >                        bit 	7,h
  26+ 9032 C2 36 90    >                        jp      nz,.ZeroCash
  27+ 9035 C9                                   ret
  28+ 9036 21 00 00     .ZeroCash:              ld      hl,0
  29+ 9039 22 E1 83                             ld      (Cash),hl
  30+ 903C 22 E3 83                             ld      (Cash+2),hl
  31+ 903F C9                                   ret
  32+ 9040
# file closed: ./Maths/Utilities/AddDEToCash.asm
1174  9040                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 9040              ;INPUTS: ahl = dividend cde = divisor
   2+ 9040              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 9040 47           Div24by24:              ld b,a
   4+ 9041 E5                                   push hl
   5+ 9042 DD E1                                pop ix
   6+ 9044 2E 18                                ld l,24
   7+ 9046 E5                                   push hl
   8+ 9047 AF                                   xor a
   9+ 9048 67                                   ld h,a
  10+ 9049 6F                                   ld l,a
  11+ 904A DD 29        .Div24by24loop:         add ix,ix
  12+ 904C CB 10                                rl b
  13+ 904E ED 6A                                adc hl,hl
  14+ 9050 17                                   rla
  15+ 9051 B9                                   cp c
  16+ 9052 38 0C                                jr c,.Div24by24skip
  17+ 9054 20 05                                jr nz,.Div24by24setbit
  18+ 9056 ED 52                                sbc hl,de
  19+ 9058 19                                   add hl,de
  20+ 9059 38 05                                jr c,.Div24by24skip
  21+ 905B ED 52        .Div24by24setbit:       sbc hl,de
  22+ 905D 99                                   sbc a,c
  23+ 905E DD 23                                inc ix
  24+ 9060 E3           .Div24by24skip:         ex (sp),hl
  25+ 9061 2D                                   dec l
  26+ 9062 E3                                   ex (sp),hl
  27+ 9063 20 E5                                jr nz,.Div24by24loop
  28+ 9065 D1                                   pop de
  29+ 9066 48                                   ld c,b
  30+ 9067 DD E5                                push ix
  31+ 9069 D1                                   pop de
  32+ 906A C9                                   ret
  33+ 906B
  34+ 906B FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 906D E6 7F                                and     SignMask8Bit
  36+ 906F CD 40 90                             call    Div24by24
  37+ 9072 F5                                   push    af
  38+ 9073 FD 7C                                ld      a,iyh
  39+ 9075 E6 80                                and     SignOnly8Bit
  40+ 9077 B1                                   or      c
  41+ 9078 4F                                   ld      c,a
  42+ 9079 F1                                   pop     af
  43+ 907A C9                                   ret
  44+ 907B
  45+ 907B                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 907B FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 907D A9                                   xor     c               ; flip sign if negative
  48+ 907E E6 80                                and     SignOnly8Bit    ; .
  49+ 9080 FD 6F                                ld      iyl,a           ; .
  50+ 9082 79                                   ld      a,c             ; make both values ABS
  51+ 9083 E6 7F                                and     SignMask8Bit    ; .
  52+ 9085 4F                                   ld      c,a             ; .
  53+ 9086 FD 7C                                ld      a,iyh           ; .
  54+ 9088 E6 7F                                and     SignMask8Bit    ; .
  55+ 908A CD 40 90                             call    Div24by24       ; do abs divide
  56+ 908D FD B5                                or      iyl             ; bring in sign bit
  57+ 908F FD 67                                ld      iyh,a           ; save a
  58+ 9091 79                                   ld      a,c             ; sort sign for c
  59+ 9092 FD B5                                or      iyl             ;
  60+ 9094 4F                                   ld      c,a             ;
  61+ 9095 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 9097 C9                                   ret
  63+ 9098
  64+ 9098              ; --------------------------------------------------------------
  65+ 9098              ;divdide by 16 using undocumented instrunctions
  66+ 9098              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 9098              ;Output: BC = Quotient, HL = Remainder
  68+ 9098 47           PROJ256mulAdivQ:        ld      b,a
  69+ 9099 0E 00                                ld      c,0
  70+ 909B 16 00                                ld      d,0
  71+ 909D 3A 8A 7E                             ld      a,(varQ)
  72+ 90A0 5F                                   ld      e,a
  73+ 90A1 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 90A4 78                                   ld      a,b
  75+ 90A5 06 10                                ld      b,16
  76+ 90A7 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 90A9 17                                   rla             ; ...
  78+ 90AA ED 6A                                adc     hl,hl       ; ...
  79+ 90AC ED 52                                sbc     hl,de       ; ...
  80+ 90AE 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 90B0 19                                   add     hl,de       ; ...
  82+ 90B1 0D                                   dec     c       ; ...
  83+ 90B2 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 90B4 79                                   ld      a,c
  85+ 90B5 32 8B 7E                             ld      (varR),a
  86+ 90B8 C9                                   ret
  87+ 90B9
  88+ 90B9
  89+ 90B9
  90+ 90B9
# file closed: ./Maths/DIVD3B2.asm
1175  90B9                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 90B9              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 90B9 2A 8B 7E                             ld  hl,(varRS)
   3+ 90BC 3A 8A 7E                             ld  a,(varQ)
   4+ 90BF C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 90C1 11 00 00                             ld  de,0        ; de = XY
   6+ 90C4 47                                   ld  b,a         ; b = Q
   7+ 90C5                                      ShiftHLRight1
   7+ 90C5 CB 3C       >			   srl h
   7+ 90C7 CB 1D       >			   rr  l
   8+ 90C9 CB 20                                sla b
   9+ 90CB 30 03                                jr  nc,.LL126
  10+ 90CD EB           .LL125:                 ex de,hl
  11+ 90CE 19                                   add hl,de
  12+ 90CF EB                                   ex  de,hl       ; de = de + rs
  13+ 90D0              .LL126:                 ShiftHLRight1
  13+ 90D0 CB 3C       >			   srl h
  13+ 90D2 CB 1D       >			   rr  l
  14+ 90D4 CB 20                                sla b
  15+ 90D6 38 F5                                jr      c,.LL125
  16+ 90D8 20 F6                                jr      nz,.LL126
  17+ 90DA EB                                   ex      de,hl   ; hl = result
  18+ 90DB D1 C1                                pop     bc,,de
  19+ 90DD C9                                   ret
  20+ 90DE
  21+ 90DE              ; FMLTU - A = A * Q / 256
  22+ 90DE 57           AequAmulQdiv256usgn:    ld      d,a
  23+ 90DF 3A 8A 7E                             ld      a,(varQ)
  24+ 90E2 5F                                   ld      e,a
  25+ 90E3              asm_defmutl:
  26+ 90E3              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
  27+ 90E3 ED 30        AequDmulEdiv256usgn:    mul     de
  28+ 90E5 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  29+ 90E6 C9                                   ret
  30+ 90E7
  31+ 90E7
  32+ 90E7
  33+ 90E7
  34+ 90E7
  35+ 90E7              MacroDEEquQmulASigned:  MACRO
  36+ 90E7 ~                                    ld      d,a                         ; save a into d
  37+ 90E7 ~                                    ld      a,(varQ)
  38+ 90E7 ~                                    ld      e,a
  39+ 90E7 ~                                    xor     d                           ; a = a xor var Q
  40+ 90E7 ~                                    and     SignOnly8Bit
  41+ 90E7 ~                                    ld      b,a                         ; b = sign of a xor q
  42+ 90E7 ~                                    ld      a,d                         ; d = abs d (or a reg)
  43+ 90E7 ~                                    and     SignMask8Bit
  44+ 90E7 ~                                    ld      d,a
  45+ 90E7 ~                                    ld      a,e                         ; e = abs e (or varQ)
  46+ 90E7 ~                                    and     SignMask8Bit
  47+ 90E7 ~                                    ld      e,a
  48+ 90E7 ~                                    mul                                 ; de = a * Q
  49+ 90E7 ~                                    ld      a,d
  50+ 90E7 ~                                    or      b                           ; de = a * Q leading sign bit
  51+ 90E7 ~                                    ld      d,a
  52+ 90E7                                      ENDM
  53+ 90E7
  54+ 90E7
  55+ 90E7
  56+ 90E7                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  57+ 90E7              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  57+ 90E7 57          >                        ld      d,a                         ; save a into d
  57+ 90E8 3A 8A 7E    >                        ld      a,(varQ)
  57+ 90EB 5F          >                        ld      e,a
  57+ 90EC AA          >                        xor     d                           ; a = a xor var Q
  57+ 90ED E6 80       >                        and     SignOnly8Bit
  57+ 90EF 47          >                        ld      b,a                         ; b = sign of a xor q
  57+ 90F0 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  57+ 90F1 E6 7F       >                        and     SignMask8Bit
  57+ 90F3 57          >                        ld      d,a
  57+ 90F4 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  57+ 90F5 E6 7F       >                        and     SignMask8Bit
  57+ 90F7 5F          >                        ld      e,a
  57+ 90F8 ED 30       >                        mul                                 ; de = a * Q
  57+ 90FA 7A          >                        ld      a,d
  57+ 90FB B0          >                        or      b                           ; de = a * Q leading sign bit
  57+ 90FC 57          >                        ld      d,a
  58+ 90FD 2A 8B 7E                             ld		hl,(varR)
  59+ 9100 CD 28 91                             call	madXAAddHLDESigned
  60+ 9103 EB                                   ex      de,hl                       ; de = R.S + DE
  61+ 9104                                      ClearCarryFlag
  61+ 9104 B7          >                        or a
  62+ 9105 DD 6B                                ld      ixl,e
  63+ 9107 7A                                   ld      a,d
  64+ 9108 C9                                   ret
  65+ 9109
  66+ 9109              madDEequQmulAaddRS:     MacroDEEquQmulASigned
  66+ 9109 57          >                        ld      d,a                         ; save a into d
  66+ 910A 3A 8A 7E    >                        ld      a,(varQ)
  66+ 910D 5F          >                        ld      e,a
  66+ 910E AA          >                        xor     d                           ; a = a xor var Q
  66+ 910F E6 80       >                        and     SignOnly8Bit
  66+ 9111 47          >                        ld      b,a                         ; b = sign of a xor q
  66+ 9112 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  66+ 9113 E6 7F       >                        and     SignMask8Bit
  66+ 9115 57          >                        ld      d,a
  66+ 9116 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  66+ 9117 E6 7F       >                        and     SignMask8Bit
  66+ 9119 5F          >                        ld      e,a
  66+ 911A ED 30       >                        mul                                 ; de = a * Q
  66+ 911C 7A          >                        ld      a,d
  66+ 911D B0          >                        or      b                           ; de = a * Q leading sign bit
  66+ 911E 57          >                        ld      d,a
  67+ 911F 2A 8B 7E                             ld		hl,(varR)
  68+ 9122 CD 28 91                             call	madXAAddHLDESigned
  69+ 9125 EB                                   ex      de,hl                       ; de = R.S + DE
  70+ 9126                                      ClearCarryFlag
  70+ 9126 B7          >                        or a
  71+ 9127 C9                                   ret
  72+ 9128
  73+ 9128 7C           madXAAddHLDESigned:     ld      a,h
  74+ 9129 E6 80                                and     SignOnly8Bit
  75+ 912B 47                                   ld      b,a                         ;save sign bit in b
  76+ 912C AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  77+ 912D                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  77+ 912D FA 45 91    >                        jp		m, .ADDHLDEOppSGN
  78+ 9130 78           .ADDHLDESameSigns:       ld      a,b
  79+ 9131 B2                                   or      d
  80+ 9132                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  80+ 9132 FA 37 91    >                        jp		m, .ADDHLDESameNeg
  81+ 9135 19                                   add     hl,de
  82+ 9136 C9                                   ret
  83+ 9137 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  84+ 9138 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  85+ 913A 67                                   ld      h,a
  86+ 913B 7A                                   ld      a,d
  87+ 913C E6 7F                                and     SignMask8Bit
  88+ 913E 57                                   ld      d,a
  89+ 913F 19                                   add     hl,de
  90+ 9140 3E 80                                ld      a,SignOnly8Bit
  91+ 9142 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  92+ 9143 67                                   ld      h,a
  93+ 9144 C9                                   ret
  94+ 9145 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  95+ 9146 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  96+ 9148 67                                   ld      h,a
  97+ 9149 7A                                   ld      a,d
  98+ 914A E6 7F                                and     SignMask8Bit
  99+ 914C 57                                   ld      d,a
 100+ 914D B7                                   or      a
 101+ 914E ED 52                                sbc     hl,de
 102+ 9150 38 04                                jr      c,.ADDHLDEOppInvert
 103+ 9152 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 104+ 9153 B4                                   or      h
 105+ 9154 67                                   ld      h,a                         ; set the previou sign value
 106+ 9155 C9                                   ret
 107+ 9156              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 107+ 9156 AF          >                    xor a
 107+ 9157 95          >                    sub l
 107+ 9158 6F          >                    ld l,a
 107+ 9159 9F          >                    sbc a,a
 107+ 915A 94          >                    sub h
 107+ 915B 67          >                    ld h,a
 108+ 915C 78                                   ld      a,b
 109+ 915D EE 80                                xor     SignOnly8Bit                ; flip sign bit
 110+ 915F B4                                   or      h
 111+ 9160 67                                   ld      h,a                         ; recover sign
 112+ 9161 C9                                   ret
 113+ 9162
 114+ 9162
 115+ 9162                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 116+ 9162                  ;
 117+ 9162                  ; enter : hl = 16-bit multiplier   = x
 118+ 9162                  ;          e =  8-bit multiplicand = y
 119+ 9162                  ;
 120+ 9162                  ; exit  : ahl = 24-bit product
 121+ 9162                  ;         carry reset
 122+ 9162                  ;
 123+ 9162                  ; uses  : af, de, hl
 124+ 9162 54           AHLequHLmulE:           ld d,h                      ; xh
 125+ 9163 63                                   ld h,e                      ; yl
 126+ 9164 ED 30                                mul de                      ; xh*yl
 127+ 9166 EB                                   ex de,hl
 128+ 9167 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 129+ 9169
 130+ 9169 7A                                   ld  a,d                     ; sum products
 131+ 916A 85                                   add a,l
 132+ 916B 57                                   ld  d,a
 133+ 916C EB                                   ex de,hl
 134+ 916D
 135+ 916D 7A                                   ld  a,d
 136+ 916E CE 00                                adc a,0
 137+ 9170 C9                                   ret
 138+ 9171
 139+ 9171 54           HLE0quH0mulE:           ld      d,h                 ; .
 140+ 9172 63                                   ld      h,e                 ; .
 141+ 9173 ED 30                                mul     de                  ; de = xh * yl
 142+ 9175 EB                                   ex      de,hl
 143+ 9176 C9                                   ret
 144+ 9177
 145+ 9177                 ; multiplication of two 16-bit numbers into a 32-bit product
 146+ 9177                 ;
 147+ 9177                 ; enter : de = 16-bit multiplicand = y
 148+ 9177                 ;         hl = 16-bit multiplicand = x
 149+ 9177                 ;
 150+ 9177                 ; exit  : dehl = 32-bit product
 151+ 9177                 ;         carry reset
 152+ 9177                 ;
 153+ 9177                 ; uses  : af, bc, de, hl
 154+ 9177
 155+ 9177
 156+ 9177
 157+ 9177 45           DEHLequDEmulHL:         ld b,l                      ; x0
 158+ 9178 4B                                   ld c,e                      ; y0
 159+ 9179 5D                                   ld e,l                      ; x0
 160+ 917A 6A                                   ld l,d
 161+ 917B E5                                   push hl                     ; x1 y1
 162+ 917C 69                                   ld l,c                      ; y0
 163+ 917D              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 164+ 917D ED 30                                mul de                      ; y1*x0
 165+ 917F EB                                   ex de,hl
 166+ 9180 ED 30                                mul de                      ; x1*y0
 167+ 9182
 168+ 9182 AF                                   xor a                       ; zero A
 169+ 9183 19                                   add hl,de                   ; sum cross products p2 p1
 170+ 9184 8F                                   adc a,a                     ; capture carry p3
 171+ 9185
 172+ 9185 59                                   ld e,c                      ; x0
 173+ 9186 50                                   ld d,b                      ; y0
 174+ 9187 ED 30                                mul de                      ; y0*x0
 175+ 9189
 176+ 9189 47                                   ld b,a                      ; carry from cross products
 177+ 918A 4C                                   ld c,h                      ; LSB of MSW from cross products
 178+ 918B
 179+ 918B 7A                                   ld a,d
 180+ 918C 85                                   add a,l
 181+ 918D 67                                   ld h,a
 182+ 918E 6B                                   ld l,e                      ; LSW in HL p1 p0
 183+ 918F
 184+ 918F D1                                   pop de
 185+ 9190 ED 30                                mul de                      ; x1*y1
 186+ 9192
 187+ 9192 EB                                   ex de,hl
 188+ 9193 ED 4A                                adc hl,bc
 189+ 9195 EB                                   ex de,hl                    ; de = final MSW
 190+ 9196
 191+ 9196 C9                                   ret
 192+ 9197
 193+ 9197              ; multiplication of two 16-bit numbers into a 16-bit product
 194+ 9197              ; enter : de = 16-bit multiplicand
 195+ 9197              ;         hl = 16-bit multiplicand
 196+ 9197              ; exit  : hl = 16-bit product
 197+ 9197              ;         carry reset
 198+ 9197              ; maths is
 199+ 9197              ;        hl = y , de= x
 200+ 9197              ;        hl = xhi,ylo + (yhigh * xlow)
 201+ 9197              ;        hl = yhih & xlo + x
 202+ 9197              ;
 203+ 9197              ;
 204+ 9197              ; uses  : af, bc, de, hl
 205+ 9197 C5           mulDEbyHL:              push    bc
 206+ 9198 7A                                   ld a,d                      ; a = xh
 207+ 9199 54                                   ld d,h                      ; d = yh
 208+ 919A 67                                   ld h,a                      ; h = xh
 209+ 919B 4B                                   ld c,e                      ; c = xl
 210+ 919C 45                                   ld b,l                      ; b = yl
 211+ 919D ED 30                                mul                         ; yh * yl
 212+ 919F EB                                   ex de,hl
 213+ 91A0 ED 30                                mul                         ; xh * yl
 214+ 91A2 19                                   add hl,de                   ; add cross products
 215+ 91A3 59                                   ld e,c
 216+ 91A4 50                                   ld d,b
 217+ 91A5 ED 30                                mul                         ; yl * xl
 218+ 91A7 7D                                   ld a,l                      ; cross products lsb
 219+ 91A8 82                                   add a,d                     ; add to msb final
 220+ 91A9 67                                   ld h,a
 221+ 91AA 6B                                   ld l,e                      ; hl = final
 222+ 91AB                                      ; 83 cycles, 19 bytes
 223+ 91AB AF                                   xor a                       ; reset carry
 224+ 91AC C1                                   pop     bc
 225+ 91AD C9                                   ret
 226+ 91AE
 227+ 91AE
 228+ 91AE              ; CHL = multiplicand D = multiplier
 229+ 91AE              ; DCHL = CHL * D
 230+ 91AE 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 231+ 91AF AC                                   xor     h                   ; xor with h to get resultant sign
 232+ 91B0 E6 80                                and     SignOnly8Bit        ; .
 233+ 91B2 FD 67                                ld      iyh,a               ; iyh = copy of sign
 234+ 91B4 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 235+ 91B5 E6 7F                                and     SignMask8Bit        ; .
 236+ 91B7 4F                                   ld      c,a                 ; .
 237+ 91B8 7A                                   ld      a,d                 ; d = ABS D
 238+ 91B9 E6 7F                                and     SignMask8Bit        ; .
 239+ 91BB              ; At this point CHL = ABS (HLE), A = ABS(D)
 240+ 91BB 57           .mul1:                  ld      d,a                 ; first do D * L
 241+ 91BC 5D                                   ld      e,l                 ; .
 242+ 91BD ED 30                                mul     de                  ; DE = L * D
 243+ 91BF 08                                   ex      af,af'              ; save multiplier
 244+ 91C0 6B                                   ld      l,e                 ; L = p0
 245+ 91C1 7A                                   ld      a,d                 ; carry byte
 246+ 91C2 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 247+ 91C3 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 248+ 91C4 57                                   ld      d,a                 ; and multiplier
 249+ 91C5 ED 30                                mul     de                  ; now its D & L
 250+ 91C7 08                                   ex      af,af'              ; get back carry byte with flags
 251+ 91C8 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 252+ 91C9 67                                   ld      h,a                 ; h = P1
 253+ 91CA 7A                                   ld      a,d                 ; a = carry byte
 254+ 91CB 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 255+ 91CC 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 256+ 91CD 57                                   ld      d,a                 ;
 257+ 91CE ED 30                                mul     de                  ;
 258+ 91D0 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 259+ 91D1 8B                                   adc     a,e                 ;
 260+ 91D2 FD B4                                or      iyh                 ; recover saved resultant sign
 261+ 91D4 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 262+ 91D5 C9                                   ret
 263+ 91D6
 264+ 91D6              ;  CHL = 53456 D = 1E
 265+ 91D6              ;  56 * 1E = A14 L = 14 carry = 0A
 266+ 91D6              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 267+ 91D6              ;  5  * 1E = 096 C = 96 + 6 = 9C
 268+ 91D6              ;  CHL = 9C2214
 269+ 91D6              ;mult3
 270+ 91D6              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 271+ 91D6              ; HLE = multiplicand D = multiplier
 272+ 91D6              ; tested by mathstestsun.asm all passed
 273+ 91D6              ; Algorithm
 274+ 91D6              ; AC =  E * D   (save carry)         H    L    E
 275+ 91D6              ; DE =  L * D                                  D
 276+ 91D6              ;  L =  A + E + carry                         E*D (lo)
 277+ 91D6              ; DE =  H * D                             L*D+ ^ (hi)
 278+ 91D6              ;  E =  A + E + carry                H*D (lo) + carry
 279+ 91D6              ;
 280+ 91D6              ;
 281+ 91D6 7A           mulHLbyDE2sc:           ld      a,d
 282+ 91D7 AC                                   xor     h
 283+ 91D8 E6 80                                and     SignOnly8Bit
 284+ 91DA FD 67                                ld      iyh,a               ; save sign bit for result
 285+ 91DC 7C                                   ld      a,h
 286+ 91DD E6 80                                and     SignOnly8Bit
 287+ 91DF 28 06                                jr      z,.HLPositive
 288+ 91E1              .HLNegative:            NegHL
 288+ 91E1 AF          >                    xor a
 288+ 91E2 95          >                    sub l
 288+ 91E3 6F          >                    ld l,a
 288+ 91E4 9F          >                    sbc a,a
 288+ 91E5 94          >                    sub h
 288+ 91E6 67          >                    ld h,a
 289+ 91E7 7A           .HLPositive:            ld      a,d
 290+ 91E8 E6 80                                and     SignOnly8Bit
 291+ 91EA 28 06                                jr      z,.DEPositive
 292+ 91EC              .DENegative:            NegDE
 292+ 91EC AF          >                    xor a
 292+ 91ED 93          >                    sub e
 292+ 91EE 5F          >                    ld e,a
 292+ 91EF 9F          >                    sbc a,a
 292+ 91F0 92          >                    sub d
 292+ 91F1 57          >                    ld d,a
 293+ 91F2 CD 97 91     .DEPositive:            call    mulDEbyHL           ; now do calc
 294+ 91F5 FD 7C                                ld      a,iyh
 295+ 91F7 A7                                   and     a                   ; if its 0 then we are good
 296+ 91F8 C8                                   ret     z
 297+ 91F9
 298+ 91F9
 299+ 91F9
 300+ 91F9 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 301+ 91FA AC                                   xor     h                   ; xor with h to get resultant sign
 302+ 91FB E6 80                                and     SignOnly8Bit        ; .
 303+ 91FD FD 67                                ld      iyh,a               ; iyh = copy of sign
 304+ 91FF 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 305+ 9200 E6 7F                                and     SignMask8Bit        ; .
 306+ 9202 67                                   ld      h,a                 ; .
 307+ 9203 7A                                   ld      a,d                 ; d = ABS D
 308+ 9204 E6 7F                                and     SignMask8Bit        ; .
 309+ 9206 57                                   ld      d,a                 ; .
 310+ 9207 B7           .testEitherSideZero:    or      a
 311+ 9208 28 24                                jr      z,.ResultZero
 312+ 920A 7C                                   ld      a,h
 313+ 920B B5                                   or      l
 314+ 920C B3                                   or      e
 315+ 920D 28 1F                                jr      z,.ResultZero
 316+ 920F              ; At this point HLE = ABS (HLE), A = ABS(D)
 317+ 920F 42                                   ld      b,d                 ; save Quotient
 318+ 9210 ED 30        .mul1:                  mul     de                  ; C = E * D
 319+ 9212 4B                                   ld      c,e                 ; C = p0
 320+ 9213 FD 6A                                ld      iyl,d               ; save carry (p1)
 321+ 9215 5D           .mul2:                  ld      e,l                 ; L = L * D
 322+ 9216 50                                   ld      d,b                 ; .
 323+ 9217 ED 30                                mul     de                  ; .
 324+ 9219 FD 7D                                ld      a,iyl               ; get back p1
 325+ 921B 83           .carrybyte1:            add     a,e                 ; L = L + E
 326+ 921C 6F                                   ld      l,a                 ; .
 327+ 921D FD 6A                                ld      iyl,d               ; save new carry byte
 328+ 921F 5C           .mul3:                  ld      e,h                 ; E = H * D
 329+ 9220 50                                   ld      d,b                 ; .
 330+ 9221 ED 30                                mul     de                  ; .
 331+ 9223 FD 7D                                ld      a,iyl
 332+ 9225 8B                                   adc     a,e                 ; .
 333+ 9226 5F                                   ld      e,a                 ; .
 334+ 9227 7A           .ItsNotZero:            ld      a,d                 ;
 335+ 9228 CE 00                                adc     a,0                 ; final carry bit
 336+ 922A FD B4                                or      iyh                 ; bring back sign
 337+ 922C 57                                   ld      d,a                 ; s = sign
 338+ 922D C9                                   ret
 339+ 922E 11 00 00     .ResultZero:            ld      de,0
 340+ 9231                                      ZeroA
 340+ 9231 AF          >                        xor a
 341+ 9232 4F                                   ld      c,a
 342+ 9233 6F                                   ld      l,a
 343+ 9234 C9                                   ret
 344+ 9235
 345+ 9235              ;;;
 346+ 9235              ;;;
 347+ 9235              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 348+ 9235              ;;;                        xor     h                   ; xor with h to get resultant sign
 349+ 9235              ;;;                        and     SignOnly8Bit        ; .
 350+ 9235              ;;;                        ld      iyh,a               ; iyh = copy of sign
 351+ 9235              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 352+ 9235              ;;;                        and     SignMask8Bit        ; .
 353+ 9235              ;;;                        ld      h,a                 ; .
 354+ 9235              ;;;                        ld      a,d                 ; d = ABS D
 355+ 9235              ;;;                        and     SignMask8Bit        ; .
 356+ 9235              ;;;                        ld      d,a                 ; .
 357+ 9235              ;;;.testEitherSideZero:    or      a
 358+ 9235              ;;;                        jr      z,.ResultZero
 359+ 9235              ;;;                        ld      a,h
 360+ 9235              ;;;                        or      l
 361+ 9235              ;;;                        or      e
 362+ 9235              ;;;                        jr      z,.ResultZero
 363+ 9235              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 364+ 9235              ;;;.mul1:                  mul     de                  ; C = E * D
 365+ 9235              ;;;                        ex      af,af'              ; save mulitplier
 366+ 9235              ;;;                        ld      c,e                 ; C = p0
 367+ 9235              ;;;                        ld      a,d                 ; save carry (p1)
 368+ 9235              ;;;                        ex      af,af'              ; .
 369+ 9235              ;;;.mul2:                  ld      e,l                 ; L = L * D
 370+ 9235              ;;;                        ld      d,a                 ; .
 371+ 9235              ;;;                        mul     de                  ; .
 372+ 9235              ;;;                        ex      af,af'              ; .
 373+ 9235              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 374+ 9235              ;;;                        ld      l,a                 ; .
 375+ 9235              ;;;                        ld      a,d
 376+ 9235              ;;;                        ex      af,af'              ; save new carry byte
 377+ 9235              ;;;.mul3:                  ld      e,h                 ; E = H * D
 378+ 9235              ;;;                        ld      d,a                 ; .
 379+ 9235              ;;;                        mul     de                  ; .
 380+ 9235              ;;;                        ex      af,af'              ; .
 381+ 9235              ;;;                        adc     a,e                 ; .
 382+ 9235              ;;;                        ld      e,a                 ; .
 383+ 9235              ;;;.ItsNotZero:            ld      a,d                 ;
 384+ 9235              ;;;                        adc     a,0                 ; final carry bit
 385+ 9235              ;;;                        or      iyh                 ; bring back sign
 386+ 9235              ;;;                        ld      d,a                 ; s = sign
 387+ 9235              ;;;                        ret
 388+ 9235              ;;;.ResultZero:            ld      de,0
 389+ 9235              ;;;                        ZeroA
 390+ 9235              ;;;                        ld      c,a
 391+ 9235              ;;;                        ld      l,a
 392+ 9235              ;;;                        ret
 393+ 9235
 394+ 9235              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 395+ 9235              ; enter : de = 16-bit multiplicand
 396+ 9235              ;         hl = 16-bit multiplicand
 397+ 9235              ; exit  : hl = 16-bit product
 398+ 9235              ;         carry reset
 399+ 9235              ;
 400+ 9235              ; uses  : af, bc, de, hl
 401+ 9235 00           mulDEbyHLSignByte       DB      0
 402+ 9236 AF           mulDEbyHLSgnTo2c:       xor     a
 403+ 9237 32 35 92                             ld      (mulDEbyHLSignByte),a
 404+ 923A 7A           .SignDE:                ld      a,d
 405+ 923B ED 27 80                             test    $80
 406+ 923E 28 08                                jr      z,.SignHL
 407+ 9240 E6 7F        .NegativeDE:            and     $7F
 408+ 9242 57                                   ld      d,a
 409+ 9243 3E 80                                ld      a,$80
 410+ 9245 32 35 92                             ld      (mulDEbyHLSignByte),a
 411+ 9248 7C           .SignHL:                ld      a,h
 412+ 9249 ED 27 80                             test    $80
 413+ 924C 28 0B                                jr      z,.AbsoluteMultiply
 414+ 924E E6 7F        .NegativeHL:            and     $7F
 415+ 9250 67                                   ld      h,a
 416+ 9251 3A 35 92                             ld      a,(mulDEbyHLSignByte)
 417+ 9254 EE 80                                xor     $80
 418+ 9256 32 35 92                             ld      (mulDEbyHLSignByte),a
 419+ 9259 CD 97 91     .AbsoluteMultiply:      call    mulDEbyHL
 420+ 925C 3A 35 92     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 421+ 925F ED 27 80                             test    $80
 422+ 9262 C8                                   ret     z
 423+ 9263 AF           .Negateghl: 			xor 	a
 424+ 9264 95                                   sub 	l
 425+ 9265 6F                                   ld 		l,a
 426+ 9266 9F                                   sbc 	a,a
 427+ 9267 94                                   sub 	h
 428+ 9268 67                                   ld 		h,a
 429+ 9269 C9                                   ret
 430+ 926A
 431+ 926A AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 432+ 926B 32 35 92                             ld      (mulDEbyHLSignByte),a
 433+ 926E 7A           .SignDE:                ld      a,d
 434+ 926F ED 27 80                             test    $80
 435+ 9272 28 08                                jr      z,.AbsoluteMultiply
 436+ 9274 E6 7F        .NegativeDE:            and     $7F
 437+ 9276 57                                   ld      d,a
 438+ 9277 3E 80                                ld      a,$80
 439+ 9279 32 35 92                             ld      (mulDEbyHLSignByte),a
 440+ 927C CD 97 91     .AbsoluteMultiply:      call    mulDEbyHL
 441+ 927F 3A 35 92     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 442+ 9282 ED 27 80                             test    $80
 443+ 9285 C8                                   ret     z
 444+ 9286 AF           .Negateghl:             xor 	a
 445+ 9287 95                                   sub 	l
 446+ 9288 6F                                   ld 		l,a
 447+ 9289 9F                                   sbc 	a,a
 448+ 928A 94                                   sub 	h
 449+ 928B 67                                   ld 		h,a
 450+ 928C C9                                   ret
 451+ 928D
 452+ 928D
# file closed: ./Maths/multiply.asm
1176  928D                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 928D              ; "ASM_SQUA : TESTGOOD"
   2+ 928D              ; "AP = A^2 A = low,P = hi"
   3+ 928D
   4+ 928D              inline_squde: MACRO
   5+ 928D ~            			ld	e,a
   6+ 928D ~            			ld  d,a
   7+ 928D ~            			mul
   8+ 928D              			ENDM
   9+ 928D
  10+ 928D              inline_squa: MACRO
  11+ 928D ~            			ld	e,a
  12+ 928D ~            			ld  d,a
  13+ 928D ~            			mul
  14+ 928D ~            			ld	a,e
  15+ 928D              			ENDM
  16+ 928D
# file closed: ./Maths/asm_square.asm
1177  928D                  INCLUDE "./Maths/asm_sine.asm"
# file opened: ./Maths/asm_sine.asm
   1+ 928D              ;- MACROS
   2+ 928D              LookupSineAMacro:       MACRO
   3+ 928D ~                                    ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   4+ 928D ~                                    add     hl, a
   5+ 928D ~                                    ld      a,(hl)
   6+ 928D                                      ENDM
   7+ 928D
   8+ 928D              ; Gets the sine of A from the lookup table into A
   9+ 928D              LookupSineA:            LookupSineAMacro
   9+ 928D 21 36 93    >                        ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   9+ 9290 ED 31       >                        add     hl, a
   9+ 9292 7E          >                        ld      a,(hl)
  10+ 9293 C9                                   ret
  11+ 9294
# file closed: ./Maths/asm_sine.asm
1178  9294                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 9294              ; "ASM SQRT : TESTGOOD"
   2+ 9294              ; "16-bit integer square root"
   3+ 9294              ; "call with de = number to square root"
   4+ 9294              ; "returns   hl = square root"
   5+ 9294              ; "corrupts  bc, de"
   6+ 9294              asm_sqrt:
   7+ 9294 01 00 80     	ld bc,$8000
   8+ 9297 61           	ld h,c
   9+ 9298 69           	ld l,c
  10+ 9299              .sqrloop:
  11+ 9299 CB 38        	srl b
  12+ 929B CB 19        	rr c
  13+ 929D 09           	add hl,bc
  14+ 929E EB           	ex de,hl
  15+ 929F ED 52        	sbc hl,de
  16+ 92A1 38 04        	jr c,.sqrbit
  17+ 92A3 EB           	ex de,hl
  18+ 92A4 09           	add hl,bc
  19+ 92A5 18 05        	jr .sqrfi
  20+ 92A7              .sqrbit:
  21+ 92A7 19           	add hl,de
  22+ 92A8 EB           	ex de,hl
  23+ 92A9 B7           	or a
  24+ 92AA ED 42        	sbc hl,bc
  25+ 92AC              .sqrfi:
  26+ 92AC CB 3C        	srl h
  27+ 92AE CB 1D        	rr l
  28+ 92B0 CB 38        	srl b
  29+ 92B2 CB 19        	rr c
  30+ 92B4 30 E3        	jr nc,.sqrloop
  31+ 92B6 C9           	ret
  32+ 92B7
  33+ 92B7
  34+ 92B7              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 92B7 3A 8A 7E     	ld		a,(varQ)
  36+ 92BA 5F           	ld		e,a
  37+ 92BB 3A 8B 7E     	ld		a,(varR)
  38+ 92BE 57           	ld		d,a
  39+ 92BF CD 94 92     	call	asm_sqrt
  40+ 92C2 7D               ld      a,l
  41+ 92C3 32 8A 7E     	ld		(varQ),a
  42+ 92C6 C9           	ret
  43+ 92C7
# file closed: ./Maths/asm_sqrt.asm
1179  92C7                  INCLUDE "./Maths/asm_arctan.asm"
# file opened: ./Maths/asm_arctan.asm
   1+ 92C7              ;Calculate A = arctan(P / Q)
   2+ 92C7              ; This finds the angle in the right-angled triangle where the opposite side to angle A is length P and the adjacent side to angle A has
   3+ 92C7              ; length Q, so:  tan(A) = P / Q
   4+ 92C7              ;
   5+ 92C7              ; The result in A is an integer representing the angle in radians. The routine returns values in the range 0 to 128,  (or 0 to PI radians).
   6+ 92C7 3A 8B 7D     ARCTAN:                 ld      a,(varP)                    ; LDA P                  \ Set T1 = P EOR Q, which will have the sign of P * Q
   7+ 92CA 21 8A 7E                             ld      hl,varQ                     ; EOR Q
   8+ 92CD AE                                   xor     (hl)                        ; .
   9+ 92CE 32 88 7D                             ld      (varT1),a                   ; STA T1
  10+ 92D1 3A 8A 7E                             ld      a,(varQ)                    ; LDA Q                  \ If Q = 0, jump to AR2 to return a right angle
  11+ 92D4 A7                                   and     a                           ; BEQ AR2
  12+ 92D5 CA 17 93                             jp      z, .AR2                     ; .
  13+ 92D8 CB 27                                sla     a                           ; ASL A                  \ Set Q = |Q| * 2 (this is a quick way of clearing the
  14+ 92DA 32 8A 7E                             ld      (varQ),a                    ; STA Q                  \ sign bit, and we don't need to shift right again as we only ever use this value in the division with |P| * 2, which we set next)
  15+ 92DD 3A 8B 7D                             ld      a,(varP)                    ; LDA P                  \ Set A = |P| * 2
  16+ 92E0 CB 27                                sla     a                           ; ASL A
  17+ 92E2 32 8B 7D                             ld      (varP),a
  18+ 92E5 21 8A 7E                             ld      hl,varQ
  19+ 92E8 BE                                   cp      (hl)                        ; CMP Q                  \ If A >= Q, i.e. |P| > |Q|, jump to AR1 to swap P
  20+ 92E9 D2 FB 92                             jp      nc, .AR1                    ; BCS AR1                \ and Q around, so we can still use the lookup table
  21+ 92EC CD 23 93                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table:  A = arctan(A / Q)  = arctan(|P / Q|)
  22+ 92EF                                      ClearCarryFlag                      ; SEC                    \ Set the C flag so the SBC instruction in AR3 will be correct, should we jump there
  22+ 92EF B7          >                        or a
  23+ 92F0 4F           .AR4:                   ld      c,a                         ; as we have to use a we use c as a temp, we can't push af as we would loose flags on pop
  24+ 92F1 3A 88 7D                             ld      a,(varT1)                   ; LDX T1                 \ If T1 is negative, i.e. P and Q have different signs,
  25+ 92F4 47                                   ld      b,a                         ; .
  26+ 92F5 A7                                   and     a                           ; BMI AR3                \ jump down to AR3 to return arctan(-|P / Q|)
  27+ 92F6 79                                   ld      a,c                         ; .                      \ we need to get a back before jump
  28+ 92F7 FA 1A 93                             jp      m, .AR3                     ; .
  29+ 92FA C9                                   ret                                 ; RTS                    \ Otherwise P and Q have the same sign, so our result is correct and we can return from the subroutine
  30+ 92FB              ; We want to calculate arctan(t) where |t| > 1, so we can use the calculation described in the documentation for the ACT table, i.e. 64 - arctan(1 / t)
  31+ 92FB              ; In the 6502 verion it works with A already being P but we will fetch it
  32+ 92FB 3A 8A 7E     .AR1:                   ld      a,(varQ)                    ; LDX Q                  \ Swap the values in Q and P, using the fact that we
  33+ 92FE 47                                   ld      b,a                         ; .
  34+ 92FF 3A 8B 7D                             ld      a,(varP)                    ; STA Q                  \ called AR1 with A = P
  35+ 9302 32 8A 7E                             ld      (varQ),a                    ; .
  36+ 9305 78                                   ld      a,b                         ; TXA                    \ This also sets A = P (which now contains the original argument |Q|)
  37+ 9306 32 8B 7D                             ld      (varP),a                    ; STX P                  \
  38+ 9309 CD 23 93                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table: A = arctan(A / Q) = arctan(|Q / P|) = arctan(1 / |P / Q|)
  39+ 930C 32 A6 7E                             ld      (varT),a                    ; STA T                  \ Set T = 64 - T, we use B as T (its not really that)
  40+ 930F 47                                   ld      b,a                         ; its actually t = a, a = 64-a
  41+ 9310 3E 40                                ld      a,64                        ; LDA #64 What is going on here is t = result
  42+ 9312                                      ClearCarryFlag                      ; SBC T                            a = 64- result
  42+ 9312 B7          >                        or a
  43+ 9313 98                                   sbc     a,b                         ; .
  44+ 9314 C3 F0 92                             jp      .AR4                        ; BCS AR4                \ Jump to AR4 to continue the calculation (this BCS is effectively a JMP as the subtraction will never underflow, as ARS1 returns values in the range 0-31)
  45+ 9317              ; If we get here then Q = 0, so tan(A) = infinity and A is a right angle, or 0.25 of a circle. We allocate 255 to a full circle, so we should return 63 for a right angle
  46+ 9317 3E 3F        .AR2:                   ld      a,63                        ; LDA #63                \ Set A to 63, to represent a right angle
  47+ 9319 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  48+ 931A              ; A contains arctan(|P / Q|) but P and Q have different signs, so we need to return arctan(-|P / Q|), using the calculation described in the documentation for the ACT table, i.e. 128 - A
  49+ 931A 32 A6 7E     .AR3:                   ld      (varT),a
  50+ 931D 47                                   ld      b,a                         ; STA T                  \ Set A = 128 - A, we use b as T
  51+ 931E 3E 80                                ld      a,128                       ; LDA #128               \
  52+ 9320                                      ClearCarryFlag                      ; SBC T                  \ The subtraction will work because we did a SEC before calling AR3
  52+ 9320 B7          >                        or a
  53+ 9321 98                                   sbc     a,b
  54+ 9322 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  55+ 9323              ; This routine fetches arctan(A / Q) from the ACT table, so A will be set to an integer in the range 0 to 31 that represents an angle from 0 to 45 degrees (or 0 to \ PI / 4 radians)
  56+ 9323 CD 4C A1     ARS1:                   call    LL28Amul256DivQ_6502        ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q
  57+ 9326 3A 8B 7E                             ld      a,(varR)                    ; LDA R                  \ Set X = R / 8
  58+ 9329 CB 3F                                srl     a                           ; LSR A                  \       = 32 * A / Q
  59+ 932B CB 3F                                srl     a                           ; LSR A                  \
  60+ 932D CB 3F                                srl     a                           ; LSR A                  \ so X has the value t * 32 where t = A / Q, which is
  61+ 932F 21 56 93                             ld      hl,ACT                      ; TAX                    \ what we need to look up values in the ACT table
  62+ 9332 ED 31                                add     hl,a                        ; LDA ACT,X              \ Fetch ACT+X from the ACT table into A, so now:
  63+ 9334 7E                                   ld      a,(hl)                      ;                        \   A = value in ACT + X = value in ACT + (32 * A / Q)= arctan(A / Q)
  64+ 9335 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  65+ 9336
  66+ 9336              ;;;arctan:										; .ARCTAN	\ -> &2A3C  \ A=TAN-1(P/Q) \ A=arctan (P/Q)  called from block E
  67+ 9336              ;;;		ld		a,(varP)					; a = var P
  68+ 9336              ;;;		ld		hl,varQ
  69+ 9336              ;;;		xor		(hl)						; a = var p XOR varQ
  70+ 9336              ;;;		ld		a,(varT1)					; \ T1	 \ quadrant info
  71+ 9336              ;;;		ld		c,a							; c = copy of T1
  72+ 9336              ;;;		ld		a,(hl)						; Q
  73+ 9336              ;;;		cp		0
  74+ 9336              ;;;		jr		z,.AR2						;  Q=0 so set angle to 63, pi/2
  75+ 9336              ;;;		ld		(varQ),a					; Q move to reg B?
  76+ 9336              ;;;		ld		d,a							; copy to reg d
  77+ 9336              ;;;		sla		a							; drop sign
  78+ 9336              ;;;		ld		a,(varP)					; P
  79+ 9336              ;;;		ld		e,a							; copy to reg e
  80+ 9336              ;;;		sla		a							; drop sign
  81+ 9336              ;;;		cp		d							; compare with b (unsigned varQ * 2)
  82+ 9336              ;;;		jr		nc, .ars1					; if q >  p then adjust  swop A and Q as A >= Q
  83+ 9336              ;;;		call	ars1						; \ ARS1 \ get Angle for A*32/Q from table.
  84+ 9336              ;;;		scf									; set carry flag
  85+ 9336              ;;;.ar4:										; sub o.k
  86+ 9336              ;;;		bit 	7,c							; is T1 (also in c) negative?
  87+ 9336              ;;;		jr		nz,.ar3						;  -ve quadrant
  88+ 9336              ;;;		ret
  89+ 9336              ;;;.ar1:										; swop A and Q entering here d = q and e = P
  90+ 9336              ;;;		ld		a,d							; a = varQ
  91+ 9336              ;;;		ld		d,e							; varQ = varP
  92+ 9336              ;;;		ld		e,a							; swap D and E around
  93+ 9336              ;;;		ld		(varP),a					; write to actual variables
  94+ 9336              ;;;		ld		a,d
  95+ 9336              ;;;		ld		(varQ),a					; write to actual variables
  96+ 9336              ;;;		call	.ars1
  97+ 9336              ;;;		ld		(varT),b
  98+ 9336              ;;;		ld		b,a							; B = T = angle
  99+ 9336              ;;;		ld		a,64						; next range of angle, pi/4 to pi/2
 100+ 9336              ;;;		sub		a,b							; a = 64 - T (or b)
 101+ 9336              ;;;		jr		nc,.ar4						;  sub o.k
 102+ 9336              ;;;.ar2:										; .AR2	\ set angle to 90 degrees
 103+ 9336              ;;;		ld 		a,&3F						;  #63
 104+ 9336              ;;;		ret
 105+ 9336              ;;;.ar3:										;.AR3	\ -ve quadrant
 106+ 9336              ;;;		ld		b,a							; b = T	= \ angle
 107+ 9336              ;;;		ld		a,ConstPi					; a = Pi
 108+ 9336              ;;;		sub		b,a							; A = 128-T, so now covering range pi/2 to pi correctly
 109+ 9336              ;;;		ret
 110+ 9336              ;;;.ars1:										; .ARS1	\ -> &2A75  \ get Angle for A*32/Q from table.
 111+ 9336              ;;;		call	RequAmul256divQ				;  LL28 \ BFRDIV R=A*256/Q
 112+ 9336              ;;;		ld		a,(regA)
 113+ 9336              ;;;		srl		a
 114+ 9336              ;;;		srl		a
 115+ 9336              ;;;		srl		a							;  31 max.
 116+ 9336              ;;;		ld		hl, ArcTanTable				; root of index into table at end of words data
 117+ 9336              ;;;		add		hl,a						; now at real data
 118+ 9336              ;;;		ld		a,(hl)						; a =  ACT[a]
 119+ 9336              ;;;.arsr:										; rts used by laser lines below (will not in later code)
 120+ 9336              ;;;		ret
 121+ 9336
 122+ 9336
 123+ 9336
# file closed: ./Maths/asm_arctan.asm
1180  9336                  INCLUDE "./Maths/SineTable.asm"
# file opened: ./Maths/SineTable.asm
   1+ 9336              ;; PRINT "SIN TABLE"
   2+ 9336              ;; FOR I% =  0 TO  31
   3+ 9336              ;; N = ABS(SIN((I%/64)*2*PI))
   4+ 9336              ;; IF N >= 1 THEN B% = 255  ELSE B% = INT(256 * N + 0.5)
   5+ 9336              ;; PRINT B%
   6+ 9336              ;; NEXT I%
   7+ 9336
   8+ 9336
   9+ 9336 00 19 32 4A  SNE:            DB 000, 025, 050, 074, 098, 121, 142, 162
   9+ 933A 62 79 8E A2
  10+ 933E B5 C6 D5 E2                  DB 181, 198, 213, 226, 237, 245, 251, 255
  10+ 9342 ED F5 FB FF
  11+ 9346 FF FF FB F5                  DB 255, 255, 251, 245, 237, 226, 213, 198
  11+ 934A ED E2 D5 C6
  12+ 934E B5 A2 8E 79                  DB 181, 162, 142, 121, 098, 074, 050, 025
  12+ 9352 62 4A 32 19
# file closed: ./Maths/SineTable.asm
1181  9356                  INCLUDE "./Maths/ArcTanTable.asm"
# file opened: ./Maths/ArcTanTable.asm
   1+ 9356              ;PRINT "ARCTAN TABLE"
   2+ 9356              ;FOR I% = 0 TO 31
   3+ 9356              ;    PRINT INT((128/PI) * ATN(I%/32)+0.5)
   4+ 9356              ;NEXT I%
   5+ 9356
   6+ 9356 00 01 03 04  ACT:            DB 000, 001, 003, 004, 005, 006, 008, 009
   6+ 935A 05 06 08 09
   7+ 935E 0A 0B 0C 0D                  DB 010, 011, 012, 013, 015, 016, 017, 018
   7+ 9362 0F 10 11 12
   8+ 9366 13 14 15 16                  DB 019, 020, 021, 022, 023, 024, 025, 025
   8+ 936A 17 18 19 19
   9+ 936E 1A 1B 1C 1D                  DB 026, 027, 028, 029, 030, 031, 031, 031
   9+ 9372 1E 1F 1F 1F
  10+ 9376
# file closed: ./Maths/ArcTanTable.asm
1182  9376                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 9376              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 9376              ;; 16-bit negate
   3+ 9376                      ; Input:
   4+ 9376                      ;       HL = value
   5+ 9376                      ; Output:
   6+ 9376                      ;       HL = -value
   7+ 9376                      ; Destroys:
   8+ 9376                      ;       AF
   9+ 9376                      ;
  10+ 9376              negate16:
  11+ 9376 AF           negate16hl:         xor 	a
  12+ 9377 95                               sub 	l
  13+ 9378 6F                               ld 		l,a
  14+ 9379 9F                               sbc 	a,a
  15+ 937A 94                               sub 	h
  16+ 937B 67                               ld 		h,a
  17+ 937C C9                               ret
  18+ 937D
  19+ 937D AF           negate16de:         xor 	a
  20+ 937E 93                               sub 	e
  21+ 937F 5F                               ld 		e,a
  22+ 9380 9F                               sbc 	a,a
  23+ 9381 92                               sub 	d
  24+ 9382 57                               ld 		d,a
  25+ 9383 C9                               ret
  26+ 9384
  27+ 9384 AF           negate16bc:         xor 	a
  28+ 9385 91                               sub 	c
  29+ 9386 4F                               ld 		c,a
  30+ 9387 9F                               sbc 	a,a
  31+ 9388 90                               sub 	b
  32+ 9389 47                               ld 		b,a
  33+ 938A C9                               ret
  34+ 938B
# file closed: ./Maths/negate16.asm
1183  938B                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 938B              ;   K(3 2 1 0)           The result of the division
   2+ 938B              ;   X                    X is preserved
   3+ 938B
   4+ 938B              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) where zsign hi lo is in DE with zsign leading hi
   5+ 938B 00 00 00 00  varQRS                 DS      4
   6+ 938F 00 00 00     varAPP                  DS     3
   7+ 9392
   8+ 9392                                  DISPLAY "TODO:  neds rewrite of whoel DIDV3B2"
   9+ 9392              ;; NEEDS REWRITE TODO OF WHOLE DIVD3B2
  10+ 9392              ;; NEEDS REWRITE TODO
  11+ 9392
  12+ 9392              ; b = varR, c= varQ
  13+ 9392              Requ256mulAdivQ_6502:
  14+ 9392 CB 27        .LL31_6502:             sla     a                       ; ASL A                   \ Shift A to the left
  15+ 9394 DA A9 93                             jp      c,.LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  16+ 9397                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  16+ 9397 3F          >                        ccf
  17+ 9398                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  17+ 9398 B9          >                        cp      c
  17+ 9399 DA 9E 93    >                        jp		c, .LL31_SKIPSUB_6502
  18+ 939C                                                                      ; BCC P%+4
  19+ 939C 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  20+ 939D                                      ClearCarryFlag
  20+ 939D B7          >                        or a
  21+ 939E              .LL31_SKIPSUB_6502:     FlipCarryFlag
  21+ 939E 3F          >                        ccf
  22+ 939F CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  23+ 93A1 DA 92 93                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  24+ 93A4 78                                   ld      a,b
  25+ 93A5 32 B7 F1                             ld      (Rvar),a
  26+ 93A8 C9                                   ret                             ; RTS                    \ R left with remainder of division
  27+ 93A9 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  28+ 93AA                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  28+ 93AA 37          >                        scf
  29+ 93AB CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  30+ 93AD DA 92 93                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  31+ 93B0 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  32+ 93B1 32 B7 F1                             ld      (Rvar),a                ; .
  33+ 93B4 C9                                   ret                             ; .                      \ remainder of the division
  34+ 93B5 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  35+ 93B7 32 8B 7E                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  36+ 93BA 47                                   ld      b,a                     ; as we are using b as varR
  37+ 93BB                                      SetCarryFlag                    ; we failed so need carry flag set
  37+ 93BB 37          >                        scf
  38+ 93BC C9                                   ret                             ; RTS                    \ Return from the subroutine
  39+ 93BD
  40+ 93BD
  41+ 93BD 00           DIVD3B_SHIFT_REG:       DB      0
  42+ 93BE
  43+ 93BE 7B           DIV3B2DE:               ld      a,e                         ; load QRS with Z sign hi lo
  44+ 93BF 32 8D 93                             ld      (varQRS+2),a
  45+ 93C2 7A                                   ld      a,d
  46+ 93C3 E6 7F                                and     $7F
  47+ 93C5 32 8C 93                             ld      (varQRS+1),a
  48+ 93C8 7A                                   ld      a,d
  49+ 93C9 E6 80                                and     $80
  50+ 93CB 32 8B 93                             ld      (varQRS),a
  51+ 93CE C3 D4 93                             jp      DVID3B
  52+ 93D1              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) = A P[1 0 ] / (SRQ)
  53+ 93D1              ; We don't use zlo and assume its already loaded into SRQ
  54+ 93D1 32 8D 7D     DVID3B2:                ld      (varP+2),a                  ;STA P+2                \ Set P+2 = A
  55+ 93D4                                                                          ; LDA INWK+6             \ Set Q = z_lo
  56+ 93D4                                                                          ; STA Q
  57+ 93D4                                                                          ; LDA INWK+7             \ Set R = z_hi
  58+ 93D4                                                                          ; STA R
  59+ 93D4                                                                          ; LDA INWK+8             \ Set S = z_sign
  60+ 93D4                                                                          ; STA S
  61+ 93D4              ;  Given the above assignments, we now want to calculate K(3 2 1 0) = P(2 1 0) / (S R Q)
  62+ 93D4 3A 8B 7D     DVID3B:                 ld      a,(varP)                    ; LDA P                 \ Make sure P(2 1 0) is at least 1
  63+ 93D7 F6 01                                or      1                           ; ORA #1
  64+ 93D9 32 8B 7D                             ld      (varP),a                    ; STA P
  65+ 93DC              ;--- t = sign of P2 xor S (i.e. sign of result) ------------;
  66+ 93DC 3A 8D 7D                             ld      a,(varP+2)                  ; LDA P+2                \ Set T to the sign of P+2 * S (i.e. the sign of the
  67+ 93DF 21 8C 7E                             ld      hl, varS                    ; EOR S                  \ result) and store it in T
  68+ 93E2 AE                                   xor     (hl)
  69+ 93E3 E6 80                                and     $80                         ; AND #%10000000
  70+ 93E5 32 A6 7E                             ld      (varT),a                    ; STA T
  71+ 93E8              ;--- New bit added to aviod a divde by 0 -------------------;
  72+ 93E8 3A 8A 7E     .CheckQRSAtLeast1:      ld      a,(varQ)                    ;
  73+ 93EB 21 8B 7E                             ld      hl,varR                     ;
  74+ 93EE B6                                   or      (hl)                        ;
  75+ 93EF C2 F7 93                             jp      nz,.DVL9Prep                ;
  76+ 93F2 3E 01                                ld      a,1                         ;
  77+ 93F4 32 8A 7E                             ld      (varQ),a                    ;
  78+ 93F7              ; A P(1) P(0) = ABS P(2 1 0)
  79+ 93F7 06 00        .DVL9Prep:              ld      b,0                         ; LDY #0                 \ Set Y = 0 to store the scale factor (use b as Y)
  80+ 93F9 3A 8D 7D                             ld      a,(varP+2)                  ; LDA P+2                \ Clear the sign bit of P+2, so the division can be done
  81+ 93FC E6 7F                                and     $7F                         ; AND #%01111111         \ with positive numbers and we'll set the correct sign below, once all the maths is done
  82+ 93FE              ; We now shift (A P+1 P) left until A >= 64, counting the number of shifts in Y. This makes the top part of the division as large as possible, thus retaining as
  83+ 93FE              ; much accuracy as we can.  When we come to return the final result, we shift the result by the number of places in Y, and in the correct direction
  84+ 93FE                                      DISPLAY "TODO DVL9 and DVL6 move P and QRS into registers for faster shift"
  85+ 93FE              ;-- while A < 64 shift A P(1) P(0) -------------------------;
  86+ 93FE FE 40        .DVL9:                  cp      64                          ; CMP #64                \ If A >= 64, jump down to DV14
  87+ 9400 D2 11 94                             jp      nc, .DV14                   ; BCS DV14
  88+ 9403 21 8B 7D                             ld      hl,varP                     ; ASL P                  \ Shift (A P+1 P) to the left
  89+ 9406 CB 26                                sla     (hl)
  90+ 9408 23                                   inc     hl                          ; ROL P+1
  91+ 9409 CB 16                                rl      (hl)
  92+ 940B CB 17                                rl      a                           ; ROL A
  93+ 940D 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
  94+ 940E C3 FE 93                             jp      .DVL9                       ; BNE DVL9               \ Loop up to DVL9 (this BNE is effectively a JMP, as Y will never be zero)
  95+ 9411              ; If we get here, A >= 64 and contains the highest byte of the numerator, scaled up by the number of left shifts in Y (b in our code)
  96+ 9411 32 8D 7D     .DV14:                  ld      (varP+2),a                  ; Store A in P+2, so we now have the scaled value of the numerator in P(2 1 0)
  97+ 9414 3A 8C 7E                             ld      a,(varS)                    ; LDA S                  \ Set A = |S|
  98+ 9417 E6 7F                                and     $7F                         ; AND #%01111111
  99+ 9419                                      ;nop                                ;  BMI DV9               \ If bit 7 of A is set, jump down to DV9 (which can never happen)
 100+ 9419              ; We now shift (S R Q) left until bit 7 of S is set, reducing Y by the number of shifts. This makes the bottom part of the division as large as possible, thus
 101+ 9419              ; retaining as much accuracy as we can. When we come to return the final result, we shift the result by the total number of places in Y, and in the correct
 102+ 9419              ; direction, to give us the correct result
 103+ 9419              ; We set A to |S| above, so the following actually shifts (A R Q)
 104+ 9419 05           .DVL6:                  dec     b                           ; DEY                    \ Decrement the scale factor in Y (b)
 105+ 941A 21 8A 7E                             ld      hl,varQ                     ; ASL Q                  \ Shift (A R Q) to the left
 106+ 941D CB 26                                sla     (hl)                        ; .
 107+ 941F 21 8B 7E                             ld      hl,varR                     ; ROL R
 108+ 9422 CB 16                                rl      (hl)                        ; .
 109+ 9424 CB 17                                rl      a                           ; ROL A
 110+ 9426 F2 19 94                             jp      p,.DVL6                     ; BPL DVL6               \ Loop up to DVL6 to do another shift, until bit 7 of A is set and we can't shift left any further
 111+ 9429              ; We have now shifted both the numerator and denominator left as far as they will go, keeping a tally of the overall scale factor of the various shifts in Y. We
 112+ 9429              ; can now divide just the two highest bytes to get our result
 113+ 9429 32 8A 7E     .DV9:                   ld      (varQ),a                    ; STA Q                  \ Set Q = A, the highest byte of the denominator
 114+ 942C 4F                                   ld      c,a                         ; for Requ256mulAdivQ_6502 as it uses c as Q
 115+ 942D 78                                   ld      a,b                         ; preserve shift register in DEVD3B_SHIFT_REG
 116+ 942E 32 BD 93                             ld      (DIVD3B_SHIFT_REG),a
 117+ 9431              ; Note in Requ256mulAdivQ_6502 we use B as R Var for shift register
 118+ 9431 06 FE                                ld      b,254                       ; LDA #254               \ Set R to have bits 1-7 set, so we can pass this to
 119+ 9433 32 8B 7E                             ld      (varR),a                    ; STA R                  \ LL31 to act as the bit counter in the division
 120+ 9436 3A 8D 7D                             ld      a,(varP+2)                  ; LDA P+2                \ Set A to the highest byte of the numerator
 121+ 9439 CD 92 93                             call    Requ256mulAdivQ_6502        ; JSR LL31               \ Call LL31 to calculate: R = 256 * A / Q which means result is in b
 122+ 943C              ; The result of our division is now in R, so we just need to shift it back by the scale factor in Y
 123+ 943C                                      ZeroA                               ; LDA #0                \ Set K(3 2 1) = 0 to hold the result (we populate K)
 123+ 943C AF          >                        xor a
 124+ 943D 32 9E 7E                             ld      (varK+1),a                  ; STA K+1               \ next)
 125+ 9440 32 9F 7E                             ld      (varK+2),a                  ; STA K+2
 126+ 9443 32 A0 7E                             ld      (varK+3),a                  ; STA K+3
 127+ 9446 3A BD 93                             ld      a,(DIVD3B_SHIFT_REG)        ; TYA                   \ If Y (shift counter in b) is positive, jump to DV12
 128+ 9449 B7                                   or      a                           ; .                      we want to check the sign or if its zero
 129+ 944A CA 75 94                             jp      z,.DV13                     ; Optimisation to save a second jump from DV12 to DV13
 130+ 944D F2 80 94                             jp      p,.DV12                     ; BPL DV12
 131+ 9450              ; If we get here then Y is negative, so we need to shift the result R to the left by Y places, and then set the correct sign for the result
 132+ 9450                                      DISPLAY "TODO check oprimisation here for var r  in b"
 133+ 9450 48                                   ld      c,b
 134+ 9451 3A BD 93                             ld      a,(DIVD3B_SHIFT_REG)
 135+ 9454 47                                   ld      b,a
 136+ 9455 79                                   ld      a,c
 137+ 9456                                      ; OPTIM ld      a,(varR)                    ; LDA R                  \ Set A = R
 138+ 9456 CB 27        .DVL8:                  sla     a                           ; ASL A                  \ Shift (K+3 K+2 K+1 A) left
 139+ 9458 21 9E 7E                             ld      hl,varK+1                   ; ROL K+1
 140+ 945B CB 16                                rl      (hl)                        ; .
 141+ 945D 23                                   inc     hl                          ; ROL K+2
 142+ 945E CB 16                                rl      (hl)                        ; .
 143+ 9460 23                                   inc     hl                          ; ROL K+3
 144+ 9461 CB 16                                rl      (hl)                        ; .
 145+ 9463 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 146+ 9464 C2 56 94                             jp      nz,.DVL8                    ; BNE DVL8               \ Loop back to DVL8 until we have shifted left by Y places
 147+ 9467 32 9D 7E                             ld      (varK),a                    ; STA K                  \ Store A in K so the result is now in K(3 2 1 0)
 148+ 946A 3A A0 7E                             ld      a,(varK+3)                  ; LDA K+3                \ Set K+3 to the sign in T, which we set above to the
 149+ 946D 21 A6 7E                             ld      hl,varT                     ; ORA T                  \ correct sign for the result
 150+ 9470 B6                                   or      (hl)                        ; .
 151+ 9471 32 A0 7E                             ld      (varK+3),a                  ; STA K+3
 152+ 9474 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 153+ 9475              ; If we get here then Y is zero, so we don't need to shift the result R, we just need to set the correct sign for the result
 154+ 9475 78           .DV13:                  ld      a,b; varR)                  ; LDA R                  \ Store R in K so the result is now in K(3 2 1 0)
 155+ 9476 32 9D 7E                             ld      (varK),a                    ; STA K
 156+ 9479 3A A6 7E                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 157+ 947C 32 A0 7E                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 158+ 947F C9                                   ret                                 ; RTS                    \ Return from the subroutine
 159+ 9480              ; if we get here U is positive but still could be zero, now this is handled in DV9
 160+ 9480              .DV12:                  ; nop                               ; BEQ DV13               \ We jumped here having set A to the scale factor in Y, so this jumps up to DV13 if Y = 0
 161+ 9480              ; If we get here then Y is positive and non-zero, so we need to shift the result R to the right by Y places and then set the correct sign for the result. We also
 162+ 9480              ; know that K(3 2 1) will stay 0, as we are shifting the lowest byte to the right, so no set bits will make their way into the top three bytes
 163+ 9480                                      ;ld      a,(varR)                    ; LDA R                  \ Set A = R
 164+ 9480 48                                   ld      c,b
 165+ 9481 3A BD 93                             ld      a,(DIVD3B_SHIFT_REG)
 166+ 9484 47                                   ld      b,a
 167+ 9485 79                                   ld      a,c
 168+ 9486 CB 3F        .DVL10:                 srl     a                           ; LSR A                  \ Shift A right
 169+ 9488 05                                   dec     b                           ; DEY                    \ Decrement the scale factor in Y
 170+ 9489 C2 86 94                             jp      nz,.DVL10                   ; BNE DVL10              \ Loop back to DVL10 until we have shifted right by Y places
 171+ 948C 32 9D 7E                             ld      (varK),a                    ; STA K                  \ Store the shifted A in K so the result is now in K(3 2 1 0)
 172+ 948F 3A A6 7E                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 173+ 9492 32 A0 7E                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 174+ 9495 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 175+ 9496              ;
 176+ 9496              ;   Set flags E to 11111110
 177+ 9496              ;   Loop:   A << 2
 178+ 9496              ;           if carry was 0
 179+ 9496              ;               if a >= D
 180+ 9496              ;                   A = A - D
 181+ 9496              ;                   clear carry (probably irrelevant really)
 182+ 9496              ;           else
 183+ 9496
 184+ 9496              ;               sla flags << bringing in carry of 1
 185+ 9496              ;               if bit 7 of flag was set then loop
 186+ 9496              ;                                        elase a = e and exit
 187+ 9496              ;
 188+ 9496              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
 189+ 9496              ;
 190+ 9496              ;INPUTS: hl = dividend dbc = divisor
 191+ 9496              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
 192+ 9496
 193+ 9496 57           DVIDT:                  ld      d,a                     ; D = var P+1
 194+ 9497 3A 8A 7E                             ld      a,(varQ)
 195+ 949A 4F                                   ld      c,a                     ; C = var Q
 196+ 949B 3A 8B 7D                             ld      a,(varP)
 197+ 949E 5F                                   ld      e,a                     ; E = var P
 198+ 949F                                      ; Need fast exists on ABS values
 199+ 949F 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
 200+ 94A0 B3                                   or      e                       ; .
 201+ 94A1 28 2A                                jr      z,.ResultIsZero         ; .
 202+ 94A3 79                                   ld      a,c                     ; Fast exit is divide by 0
 203+ 94A4 A7                                   and     a                       ;
 204+ 94A5 28 29                                jr      z,.ResultIsFFFF         ;
 205+ 94A7 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 206+ 94A8 A9                                   xor     c                       ;
 207+ 94A9 E6 80                                and     $80
 208+ 94AB 6F                                   ld      l,a                     ; l = var T
 209+ 94AC 3E 00                                ld      a,0
 210+ 94AE 06 10                                ld      b,16
 211+ 94B0                                      ShiftDELeft1
 211+ 94B0 CB 23       >			   sla e
 211+ 94B2 CB 12       >			   rl  d
 212+ 94B4 CB 21                                sla     c                       ; c = abs c
 213+ 94B6 CB 39                                srl     c
 214+ 94B8 CB 17        .DivideLoop:            rl      a
 215+ 94BA                                      JumpIfALTNusng c, .SkipSubtract
 215+ 94BA B9          >                        cp      c
 215+ 94BB DA C1 94    >                        jp		c, .SkipSubtract
 216+ 94BE                                      ClearCarryFlag
 216+ 94BE B7          >                        or a
 217+ 94BF 99                                   sbc     c
 218+ 94C0                                      ClearCarryFlag
 218+ 94C0 B7          >                        or a
 219+ 94C1 3F           .SkipSubtract:          ccf
 220+ 94C2 CB 13                                rl      e
 221+ 94C4 CB 12                                rl      d
 222+ 94C6 05                                   dec     b
 223+ 94C7 20 EF                                jr      nz,.DivideLoop
 224+ 94C9 7B                                   ld      a,e
 225+ 94CA B5                                   or      l
 226+ 94CB 42                                   ld      b,d
 227+ 94CC C9                                   ret
 228+ 94CD              .ResultIsZero:          ZeroA
 228+ 94CD AF          >                        xor a
 229+ 94CE 47                                   ld      b,a
 230+ 94CF C9                                   ret
 231+ 94D0 3E FF        .ResultIsFFFF:          ld      a,$FF
 232+ 94D2 47                                   ld      b,a
 233+ 94D3 C9                                   ret
 234+ 94D4
 235+ 94D4 57           DIV96:                  ld      d,a                     ; D = var P+1
 236+ 94D5 3A 8A 7E                             ld      a,(varQ)
 237+ 94D8 0E 60                                ld      c,96                    ; C = var Q
 238+ 94DA 3A 8B 7D                             ld      a,(varP)
 239+ 94DD 5F                                   ld      e,a                     ; E = var P
 240+ 94DE                                      ; Need fast exists on ABS values
 241+ 94DE 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
 242+ 94DF B3                                   or      e                       ; .
 243+ 94E0 28 26                                jr      z,.ResultIsZero         ; .
 244+ 94E2 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 245+ 94E3 A9                                   xor     c                       ;
 246+ 94E4 E6 80                                and     $80
 247+ 94E6 6F                                   ld      l,a                     ; l = var T
 248+ 94E7 3E 00                                ld      a,0
 249+ 94E9 06 10                                ld      b,16
 250+ 94EB                                      ShiftDELeft1
 250+ 94EB CB 23       >			   sla e
 250+ 94ED CB 12       >			   rl  d
 251+ 94EF CB 21                                sla     c                       ; c = abs c
 252+ 94F1 CB 39                                srl     c
 253+ 94F3 CB 17        .DivideLoop:            rl      a
 254+ 94F5                                      JumpIfALTNusng c, .SkipSubtract
 254+ 94F5 B9          >                        cp      c
 254+ 94F6 DA FC 94    >                        jp		c, .SkipSubtract
 255+ 94F9                                      ClearCarryFlag
 255+ 94F9 B7          >                        or a
 256+ 94FA 99                                   sbc     c
 257+ 94FB                                      ClearCarryFlag
 257+ 94FB B7          >                        or a
 258+ 94FC 3F           .SkipSubtract:          ccf
 259+ 94FD CB 13                                rl      e
 260+ 94FF CB 12                                rl      d
 261+ 9501 05                                   dec     b
 262+ 9502 20 EF                                jr      nz,.DivideLoop
 263+ 9504 7B                                   ld      a,e
 264+ 9505 B5                                   or      l
 265+ 9506 42                                   ld      b,d
 266+ 9507 C9                                   ret
 267+ 9508              .ResultIsZero:          ZeroA
 267+ 9508 AF          >                        xor a
 268+ 9509 47                                   ld      b,a
 269+ 950A C9                                   ret
 270+ 950B
 271+ 950B 14           Div16by24usgn:          inc     d                           ; can we fast retu
 272+ 950C 15                                   dec     d
 273+ 950D 20 13                                jr      nz,.ResultZero
 274+ 950F 50 59                                ld      de,bc                       ; so prep for bc/de
 275+ 9511 44 4D                                ld      bc,hl
 276+ 9513 7A           .div16by16usng:         ld      a,d
 277+ 9514 B3                                   or      e
 278+ 9515 28 10                                jr      z,.DivideByZero
 279+ 9517 14                                   inc     d
 280+ 9518 15                                   dec     d
 281+ 9519 CD 6B 96                             call    BC_Div_DE
 282+ 951C                                      ZeroA
 282+ 951C AF          >                        xor a
 283+ 951D EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 284+ 951E 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 285+ 9520 4F                                   ld      c,a                         ; now fix c
 286+ 9521 C9                                   ret
 287+ 9522 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 288+ 9523 4F                                   ld      c,a                         ; c = 0
 289+ 9524 67                                   ld      h,a
 290+ 9525 6F                                   ld      l,a
 291+ 9526 C9                                   ret
 292+ 9527 3E FF        .DivideByZero:          ld      a,$FF
 293+ 9529 67                                   ld      h,a
 294+ 952A 6F                                   ld      l,a
 295+ 952B                                      SetCarryFlag
 295+ 952B 37          >                        scf
 296+ 952C C9                                   ret
 297+ 952D
 298+ 952D              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 299+ 952D                          IFDEF HLEquAmul256DivD_Used
 300+ 952D ~            HLEquAmul256DivD:       ld		b,8							; counter
 301+ 952D ~                                    sla		a							;
 302+ 952D ~                                    ld		h,a							; r a * 2 we will build result in hl
 303+ 952D ~            .DivideLoop:            rl		a							; a = a * 2
 304+ 952D ~                                    jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 305+ 952D ~                                    cp      d                           ; what was var Q
 306+ 952D ~                                    jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 307+ 952D ~            .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 308+ 952D ~                                    sbc     a,d                         ; a = a - q
 309+ 952D ~                                    ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 310+ 952D ~            .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 311+ 952D ~                                    rl      h                           ; roll d left bringing in carry if there was an sbc performed
 312+ 952D ~                                    djnz    .DivideLoop                 ; 8 cycles
 313+ 952D ~            .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 314+ 952D ~                                    jr      nc, .RemainderTooBig
 315+ 952D ~                                    ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 316+ 952D ~            .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 317+ 952D ~                                    ld      l,b                         ; and set l to capture result bits (R)
 318+ 952D ~            .RemainderLoop:         sla     a                           ; shift a left
 319+ 952D ~                                    jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 320+ 952D ~                                    cp      d                           ; if a < d then skip subtraction
 321+ 952D ~                                    jr      c,.RemainderSkipSubtract    ; .
 322+ 952D ~                                    sbc     d                           ; a > q so a = a - q, carry will be clear here
 323+ 952D ~            .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 324+ 952D ~                                    rl      l                           ; rotate counter to the left
 325+ 952D ~                                    jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 326+ 952D ~                                    ret
 327+ 952D ~            .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 328+ 952D ~                                    SetCarryFlag                        ; roll in a carry bit to result
 329+ 952D ~                                    rl      l                           ;
 330+ 952D ~                                    jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 331+ 952D ~                                    ret
 332+ 952D ~            .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 333+ 952D ~                                    ret
 334+ 952D                          ENDIF
 335+ 952D
 336+ 952D BA           AEquAmul256DivD:        cp      d
 337+ 952E 28 1D                                jr      z,.BothSame
 338+ 9530 30 1E                                jr      nc,.DgtA
 339+ 9532 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 340+ 9534 CB 27        .DivideLoop:            sla     a
 341+ 9536 38 0D                                jr      c,.LL29
 342+ 9538                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 342+ 9538 BA          >                        cp      d
 342+ 9539 DA 3E 95    >                        jp		c, .SkipSub
 343+ 953C 92                                   sub     d
 344+ 953D                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 344+ 953D B7          >                        or a
 345+ 953E              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 345+ 953E 3F          >                        ccf
 346+ 953F CB 13                                rl      e
 347+ 9541 38 F1                                jr      c,.DivideLoop
 348+ 9543 7B                                   ld      a,e
 349+ 9544 C9                                   ret
 350+ 9545 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 351+ 9546                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 351+ 9546 37          >                        scf
 352+ 9547 CB 13                                rl      e                           ; rotate counter e left
 353+ 9549 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 354+ 954B 7B                                   ld      a,e                         ; stick result in a
 355+ 954C C9                                   ret
 356+ 954D 3E 01        .BothSame:              ld  a,1
 357+ 954F C9                                   ret
 358+ 9550 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 359+ 9552 C9                                   ret
 360+ 9553
 361+ 9553              ; Divide 8-bit values
 362+ 9553              ; In: Divide E by divider C
 363+ 9553              ; Out: A = result, B = rest
 364+ 9553              ;
 365+ 9553              ;;;Div8:
 366+ 9553              ;;;    xor a
 367+ 9553              ;;;    ld b,8
 368+ 9553              ;;;Div8_Loop:
 369+ 9553              ;;;    rl e
 370+ 9553              ;;;    rla
 371+ 9553              ;;;    sub c
 372+ 9553              ;;;    jr nc,Div8_NoAdd
 373+ 9553              ;;;    add a,c
 374+ 9553              ;;;Div8_NoAdd:
 375+ 9553              ;;;    djnz Div8_Loop
 376+ 9553              ;;;    ld b,a0
 377+ 9553              ;;;    ld a,e
 378+ 9553              ;;;    rla
 379+ 9553              ;;;    cpl
 380+ 9553              ;;;    ret
 381+ 9553
 382+ 9553              ;;Inputs: DE is the numerator, BC is the divisor
 383+ 9553              ;;Outputs: DE is the result
 384+ 9553              ;;         A is a copy of E
 385+ 9553              ;;         HL is the remainder
 386+ 9553              ;;         BC is not changed
 387+ 9553              ;; so DE = DE /BC
 388+ 9553              ;140 bytes
 389+ 9553              ;145cc
 390+ 9553
 391+ 9553              MacroDEDivBC:       MACRO
 392+ 9553 ~                                rla
 393+ 9553 ~                                adc     hl,hl
 394+ 9553 ~                                sbc     hl,bc
 395+ 9553 ~                                jr      nc,$+3
 396+ 9553 ~                                add     hl,bc
 397+ 9553                                  ENDM
 398+ 9553
 399+ 9553 AF           DEequDEDivBC:       xor a
 400+ 9554 ED 62                            sbc hl,hl
 401+ 9556 7A                               ld a,d
 402+ 9557                                  MacroDEDivBC
 402+ 9557 17          >                    rla
 402+ 9558 ED 6A       >                    adc     hl,hl
 402+ 955A ED 42       >                    sbc     hl,bc
 402+ 955C 30 01       >                    jr      nc,$+3
 402+ 955E 09          >                    add     hl,bc
 403+ 955F                                  MacroDEDivBC
 403+ 955F 17          >                    rla
 403+ 9560 ED 6A       >                    adc     hl,hl
 403+ 9562 ED 42       >                    sbc     hl,bc
 403+ 9564 30 01       >                    jr      nc,$+3
 403+ 9566 09          >                    add     hl,bc
 404+ 9567                                  MacroDEDivBC
 404+ 9567 17          >                    rla
 404+ 9568 ED 6A       >                    adc     hl,hl
 404+ 956A ED 42       >                    sbc     hl,bc
 404+ 956C 30 01       >                    jr      nc,$+3
 404+ 956E 09          >                    add     hl,bc
 405+ 956F                                  MacroDEDivBC
 405+ 956F 17          >                    rla
 405+ 9570 ED 6A       >                    adc     hl,hl
 405+ 9572 ED 42       >                    sbc     hl,bc
 405+ 9574 30 01       >                    jr      nc,$+3
 405+ 9576 09          >                    add     hl,bc
 406+ 9577                                  MacroDEDivBC
 406+ 9577 17          >                    rla
 406+ 9578 ED 6A       >                    adc     hl,hl
 406+ 957A ED 42       >                    sbc     hl,bc
 406+ 957C 30 01       >                    jr      nc,$+3
 406+ 957E 09          >                    add     hl,bc
 407+ 957F                                  MacroDEDivBC
 407+ 957F 17          >                    rla
 407+ 9580 ED 6A       >                    adc     hl,hl
 407+ 9582 ED 42       >                    sbc     hl,bc
 407+ 9584 30 01       >                    jr      nc,$+3
 407+ 9586 09          >                    add     hl,bc
 408+ 9587                                  MacroDEDivBC
 408+ 9587 17          >                    rla
 408+ 9588 ED 6A       >                    adc     hl,hl
 408+ 958A ED 42       >                    sbc     hl,bc
 408+ 958C 30 01       >                    jr      nc,$+3
 408+ 958E 09          >                    add     hl,bc
 409+ 958F                                  MacroDEDivBC
 409+ 958F 17          >                    rla
 409+ 9590 ED 6A       >                    adc     hl,hl
 409+ 9592 ED 42       >                    sbc     hl,bc
 409+ 9594 30 01       >                    jr      nc,$+3
 409+ 9596 09          >                    add     hl,bc
 410+ 9597 17                               rla
 411+ 9598 2F                               cpl
 412+ 9599 57                               ld d,a
 413+ 959A
 414+ 959A 7B                               ld a,e
 415+ 959B                                  MacroDEDivBC
 415+ 959B 17          >                    rla
 415+ 959C ED 6A       >                    adc     hl,hl
 415+ 959E ED 42       >                    sbc     hl,bc
 415+ 95A0 30 01       >                    jr      nc,$+3
 415+ 95A2 09          >                    add     hl,bc
 416+ 95A3                                  MacroDEDivBC
 416+ 95A3 17          >                    rla
 416+ 95A4 ED 6A       >                    adc     hl,hl
 416+ 95A6 ED 42       >                    sbc     hl,bc
 416+ 95A8 30 01       >                    jr      nc,$+3
 416+ 95AA 09          >                    add     hl,bc
 417+ 95AB                                  MacroDEDivBC
 417+ 95AB 17          >                    rla
 417+ 95AC ED 6A       >                    adc     hl,hl
 417+ 95AE ED 42       >                    sbc     hl,bc
 417+ 95B0 30 01       >                    jr      nc,$+3
 417+ 95B2 09          >                    add     hl,bc
 418+ 95B3                                  MacroDEDivBC
 418+ 95B3 17          >                    rla
 418+ 95B4 ED 6A       >                    adc     hl,hl
 418+ 95B6 ED 42       >                    sbc     hl,bc
 418+ 95B8 30 01       >                    jr      nc,$+3
 418+ 95BA 09          >                    add     hl,bc
 419+ 95BB                                  MacroDEDivBC
 419+ 95BB 17          >                    rla
 419+ 95BC ED 6A       >                    adc     hl,hl
 419+ 95BE ED 42       >                    sbc     hl,bc
 419+ 95C0 30 01       >                    jr      nc,$+3
 419+ 95C2 09          >                    add     hl,bc
 420+ 95C3                                  MacroDEDivBC
 420+ 95C3 17          >                    rla
 420+ 95C4 ED 6A       >                    adc     hl,hl
 420+ 95C6 ED 42       >                    sbc     hl,bc
 420+ 95C8 30 01       >                    jr      nc,$+3
 420+ 95CA 09          >                    add     hl,bc
 421+ 95CB                                  MacroDEDivBC
 421+ 95CB 17          >                    rla
 421+ 95CC ED 6A       >                    adc     hl,hl
 421+ 95CE ED 42       >                    sbc     hl,bc
 421+ 95D0 30 01       >                    jr      nc,$+3
 421+ 95D2 09          >                    add     hl,bc
 422+ 95D3                                  MacroDEDivBC
 422+ 95D3 17          >                    rla
 422+ 95D4 ED 6A       >                    adc     hl,hl
 422+ 95D6 ED 42       >                    sbc     hl,bc
 422+ 95D8 30 01       >                    jr      nc,$+3
 422+ 95DA 09          >                    add     hl,bc
 423+ 95DB 17                               rla
 424+ 95DC 2F                               cpl
 425+ 95DD 5F                               ld e,a
 426+ 95DE C9                               ret
 427+ 95DF              ;divdide by 16 using undocumented instrunctions
 428+ 95DF              ;Input: BC = Dividend, DE = Divisor, HL = 0
 429+ 95DF              ;Output: BC = Quotient, HL = Remainder
 430+ 95DF              ; Our use
 431+ 95DF              ; BC = A0
 432+ 95DF              ; DE = 0C
 433+ 95DF              ; so BC = a * 256 / C
 434+ 95DF              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 434+ 95DF B9          >                        cp     c
 434+ 95E0 D2 0B 96    >                        jp		nc,DEV16ATooLarge
 435+ 95E3 47                                   ld      b,a
 436+ 95E4 59                                   ld      e,c
 437+ 95E5 0E 00                                ld      c,0
 438+ 95E7 16 00                                ld      d,0
 439+ 95E9 C3 F6 95                             jp      DIV16UNDOC
 440+ 95EC 47           DIV16Amul256dQUNDOC:    ld      b,a
 441+ 95ED 0E 00                                ld      c,0
 442+ 95EF 21 8A 7E                             ld      hl,varQ
 443+ 95F2 7E                                   ld      a,(hl)
 444+ 95F3 16 00                                ld      d,0
 445+ 95F5 5F                                   ld      e,a
 446+ 95F6              DIV16BCDivDEUNDOC:
 447+ 95F6 21 00 00     DIV16UNDOC:             ld      hl,0
 448+ 95F9 78                                   ld      a,b
 449+ 95FA 06 10                                ld      b,16
 450+ 95FC CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 451+ 95FE 17                                   rla			; ...
 452+ 95FF ED 6A                                adc	hl,hl		; ...
 453+ 9601 ED 52                                sbc	hl,de		; ...
 454+ 9603 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 455+ 9605 19                                   add	hl,de		; ...
 456+ 9606 0D                                   dec	c		; ...
 457+ 9607 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 458+ 9609 47                                   ld   b,a
 459+ 960A C9                                   ret
 460+ 960B 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 461+ 960E C9                                   ret
 462+ 960F              ; switch to logarithm version
 463+ 960F              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 464+ 960F 06 08        asm_div8:               ld b,8
 465+ 9611 AF                                   xor a
 466+ 9612 CB 21        .div8_loop:	            sla c
 467+ 9614 17                                   rla
 468+ 9615 BA                                   cp d
 469+ 9616 38 02                                jr c,.div8_skip
 469+ 9618
 470+ 9618 0C                                   inc c
 471+ 9619 92                                   sub d
 472+ 961A 10 F6        .div8_skip:	            djnz .div8_loop
 473+ 961C C9                                   ret
 474+ 961D              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 475+ 961D 06 10        asm_div16:              ld b,16
 476+ 961F AF                                   xor a
 477+ 9620 CB 25        div16_loop:	            sla l
 478+ 9622 CB 14                                rl	h
 479+ 9624              ;    add hl,hl
 480+ 9624 17                                   rla
 481+ 9625 B9                                   cp c
 482+ 9626 38 02                                jr c,div16_skip
 483+ 9628 2C                                   inc l
 484+ 9629 91                                   sub c
 485+ 962A 10 F4        div16_skip:		        djnz div16_loop
 486+ 962C C9                                   ret
 487+ 962D              ;
 488+ 962D              ; Divide 16-bit values (with 16-bit result)
 489+ 962D              ; In: Divide BC by divider DE
 490+ 962D              ; Out: BC = result, HL = rest
 491+ 962D              ;
 492+ 962D              HLDivC_Iteration: 	    MACRO
 493+ 962D ~                                    add	hl,hl		; unroll 16 times
 494+ 962D ~                                    rla				; ...
 495+ 962D ~                                    cp	c			; ...
 496+ 962D ~                                    jr	1F
 497+ 962D ~                                    sub	c			; ...
 498+ 962D ~            1:
 499+ 962D ~                                    inc	l			; ...
 500+ 962D                                      ENDM
 501+ 962D
 502+ 962D              EDivC_Iteration:        MACRO
 503+ 962D ~                                    rl  e
 504+ 962D ~                                    rla
 505+ 962D ~                                    sub c
 506+ 962D ~                                    jr  nc,.Div8_NoAdd
 507+ 962D ~                                    add a,c
 508+ 962D ~            .Div8_NoAdd:
 509+ 962D                                      ENDM
 510+ 962D
 511+ 962D              ; Switch to a logarithm version
 512+ 962D              ; Divide E by divider C Out: A = result, B = rest
 513+ 962D              E_Div_C:                ZeroA
 513+ 962D AF          >                        xor a
 514+ 962E                                      EDivC_Iteration
 514+ 962E CB 13       >                        rl  e
 514+ 9630 17          >                        rla
 514+ 9631 91          >                        sub c
 514+ 9632 30 01       >                        jr  nc,.Div8_NoAdd
 514+ 9634 81          >                        add a,c
 514+ 9635             >.Div8_NoAdd:
 515+ 9635                                      EDivC_Iteration
 515+ 9635 CB 13       >                        rl  e
 515+ 9637 17          >                        rla
 515+ 9638 91          >                        sub c
 515+ 9639 30 01       >                        jr  nc,.Div8_NoAdd
 515+ 963B 81          >                        add a,c
 515+ 963C             >.Div8_NoAdd:
 516+ 963C                                      EDivC_Iteration
 516+ 963C CB 13       >                        rl  e
 516+ 963E 17          >                        rla
 516+ 963F 91          >                        sub c
 516+ 9640 30 01       >                        jr  nc,.Div8_NoAdd
 516+ 9642 81          >                        add a,c
 516+ 9643             >.Div8_NoAdd:
 517+ 9643                                      EDivC_Iteration
 517+ 9643 CB 13       >                        rl  e
 517+ 9645 17          >                        rla
 517+ 9646 91          >                        sub c
 517+ 9647 30 01       >                        jr  nc,.Div8_NoAdd
 517+ 9649 81          >                        add a,c
 517+ 964A             >.Div8_NoAdd:
 518+ 964A                                      EDivC_Iteration
 518+ 964A CB 13       >                        rl  e
 518+ 964C 17          >                        rla
 518+ 964D 91          >                        sub c
 518+ 964E 30 01       >                        jr  nc,.Div8_NoAdd
 518+ 9650 81          >                        add a,c
 518+ 9651             >.Div8_NoAdd:
 519+ 9651                                      EDivC_Iteration
 519+ 9651 CB 13       >                        rl  e
 519+ 9653 17          >                        rla
 519+ 9654 91          >                        sub c
 519+ 9655 30 01       >                        jr  nc,.Div8_NoAdd
 519+ 9657 81          >                        add a,c
 519+ 9658             >.Div8_NoAdd:
 520+ 9658                                      EDivC_Iteration
 520+ 9658 CB 13       >                        rl  e
 520+ 965A 17          >                        rla
 520+ 965B 91          >                        sub c
 520+ 965C 30 01       >                        jr  nc,.Div8_NoAdd
 520+ 965E 81          >                        add a,c
 520+ 965F             >.Div8_NoAdd:
 521+ 965F                                      EDivC_Iteration
 521+ 965F CB 13       >                        rl  e
 521+ 9661 17          >                        rla
 521+ 9662 91          >                        sub c
 521+ 9663 30 01       >                        jr  nc,.Div8_NoAdd
 521+ 9665 81          >                        add a,c
 521+ 9666             >.Div8_NoAdd:
 522+ 9666 47                                   ld      b,a
 523+ 9667 7B                                   ld      a,e
 524+ 9668 17                                   rla
 525+ 9669 2F                                   cpl
 526+ 966A C9                                   ret
 527+ 966B
 528+ 966B
 529+ 966B              BCDIVDE_Iteration:      MACRO
 530+ 966B ~                                    rla
 531+ 966B ~                                    adc	    hl,hl
 532+ 966B ~                                    add	    hl,de
 533+ 966B ~                                    jr	    c,1F
 534+ 966B ~                                    sbc	    hl,de
 535+ 966B ~            1:
 536+ 966B                                      ENDM
 537+ 966B
 538+ 966B
 539+ 966B              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 540+ 966B              ;BC/DE ==> BC, remainder in HL
 541+ 966B              ;NOTE: BC/0 returns 0 as the quotient.
 542+ 966B              ;min: 738cc
 543+ 966B              ;max: 898cc
 544+ 966B              ;avg: 818cc
 545+ 966B              ;144 bytes
 546+ 966B AF           BC_Div_DE:              xor a
 547+ 966C 67                                   ld h,a
 548+ 966D 6F                                   ld l,a
 549+ 966E 93                                   sub e
 550+ 966F 5F                                   ld e,a
 551+ 9670 9F                                   sbc a,a
 552+ 9671 92                                   sub d
 553+ 9672 57                                   ld d,a
 554+ 9673 78                                   ld a,b
 555+ 9674                                      BCDIVDE_Iteration
 555+ 9674 17          >                        rla
 555+ 9675 ED 6A       >                        adc	    hl,hl
 555+ 9677 19          >                        add	    hl,de
 555+ 9678 38 02       >                        jr	    c,1F
 555+ 967A ED 52       >                        sbc	    hl,de
 555+ 967C             >1:
 556+ 967C                                      BCDIVDE_Iteration
 556+ 967C 17          >                        rla
 556+ 967D ED 6A       >                        adc	    hl,hl
 556+ 967F 19          >                        add	    hl,de
 556+ 9680 38 02       >                        jr	    c,1F
 556+ 9682 ED 52       >                        sbc	    hl,de
 556+ 9684             >1:
 557+ 9684                                      BCDIVDE_Iteration
 557+ 9684 17          >                        rla
 557+ 9685 ED 6A       >                        adc	    hl,hl
 557+ 9687 19          >                        add	    hl,de
 557+ 9688 38 02       >                        jr	    c,1F
 557+ 968A ED 52       >                        sbc	    hl,de
 557+ 968C             >1:
 558+ 968C                                      BCDIVDE_Iteration
 558+ 968C 17          >                        rla
 558+ 968D ED 6A       >                        adc	    hl,hl
 558+ 968F 19          >                        add	    hl,de
 558+ 9690 38 02       >                        jr	    c,1F
 558+ 9692 ED 52       >                        sbc	    hl,de
 558+ 9694             >1:
 559+ 9694                                      BCDIVDE_Iteration
 559+ 9694 17          >                        rla
 559+ 9695 ED 6A       >                        adc	    hl,hl
 559+ 9697 19          >                        add	    hl,de
 559+ 9698 38 02       >                        jr	    c,1F
 559+ 969A ED 52       >                        sbc	    hl,de
 559+ 969C             >1:
 560+ 969C                                      BCDIVDE_Iteration
 560+ 969C 17          >                        rla
 560+ 969D ED 6A       >                        adc	    hl,hl
 560+ 969F 19          >                        add	    hl,de
 560+ 96A0 38 02       >                        jr	    c,1F
 560+ 96A2 ED 52       >                        sbc	    hl,de
 560+ 96A4             >1:
 561+ 96A4                                      BCDIVDE_Iteration
 561+ 96A4 17          >                        rla
 561+ 96A5 ED 6A       >                        adc	    hl,hl
 561+ 96A7 19          >                        add	    hl,de
 561+ 96A8 38 02       >                        jr	    c,1F
 561+ 96AA ED 52       >                        sbc	    hl,de
 561+ 96AC             >1:
 562+ 96AC                                      BCDIVDE_Iteration
 562+ 96AC 17          >                        rla
 562+ 96AD ED 6A       >                        adc	    hl,hl
 562+ 96AF 19          >                        add	    hl,de
 562+ 96B0 38 02       >                        jr	    c,1F
 562+ 96B2 ED 52       >                        sbc	    hl,de
 562+ 96B4             >1:
 563+ 96B4 17                                   rla
 564+ 96B5 47                                   ld b,a
 565+ 96B6 79                                   ld a,c
 566+ 96B7                                      BCDIVDE_Iteration
 566+ 96B7 17          >                        rla
 566+ 96B8 ED 6A       >                        adc	    hl,hl
 566+ 96BA 19          >                        add	    hl,de
 566+ 96BB 38 02       >                        jr	    c,1F
 566+ 96BD ED 52       >                        sbc	    hl,de
 566+ 96BF             >1:
 567+ 96BF                                      BCDIVDE_Iteration
 567+ 96BF 17          >                        rla
 567+ 96C0 ED 6A       >                        adc	    hl,hl
 567+ 96C2 19          >                        add	    hl,de
 567+ 96C3 38 02       >                        jr	    c,1F
 567+ 96C5 ED 52       >                        sbc	    hl,de
 567+ 96C7             >1:
 568+ 96C7                                      BCDIVDE_Iteration
 568+ 96C7 17          >                        rla
 568+ 96C8 ED 6A       >                        adc	    hl,hl
 568+ 96CA 19          >                        add	    hl,de
 568+ 96CB 38 02       >                        jr	    c,1F
 568+ 96CD ED 52       >                        sbc	    hl,de
 568+ 96CF             >1:
 569+ 96CF                                      BCDIVDE_Iteration
 569+ 96CF 17          >                        rla
 569+ 96D0 ED 6A       >                        adc	    hl,hl
 569+ 96D2 19          >                        add	    hl,de
 569+ 96D3 38 02       >                        jr	    c,1F
 569+ 96D5 ED 52       >                        sbc	    hl,de
 569+ 96D7             >1:
 570+ 96D7                                      BCDIVDE_Iteration
 570+ 96D7 17          >                        rla
 570+ 96D8 ED 6A       >                        adc	    hl,hl
 570+ 96DA 19          >                        add	    hl,de
 570+ 96DB 38 02       >                        jr	    c,1F
 570+ 96DD ED 52       >                        sbc	    hl,de
 570+ 96DF             >1:
 571+ 96DF                                      BCDIVDE_Iteration
 571+ 96DF 17          >                        rla
 571+ 96E0 ED 6A       >                        adc	    hl,hl
 571+ 96E2 19          >                        add	    hl,de
 571+ 96E3 38 02       >                        jr	    c,1F
 571+ 96E5 ED 52       >                        sbc	    hl,de
 571+ 96E7             >1:
 572+ 96E7                                      BCDIVDE_Iteration
 572+ 96E7 17          >                        rla
 572+ 96E8 ED 6A       >                        adc	    hl,hl
 572+ 96EA 19          >                        add	    hl,de
 572+ 96EB 38 02       >                        jr	    c,1F
 572+ 96ED ED 52       >                        sbc	    hl,de
 572+ 96EF             >1:
 573+ 96EF                                      BCDIVDE_Iteration
 573+ 96EF 17          >                        rla
 573+ 96F0 ED 6A       >                        adc	    hl,hl
 573+ 96F2 19          >                        add	    hl,de
 573+ 96F3 38 02       >                        jr	    c,1F
 573+ 96F5 ED 52       >                        sbc	    hl,de
 573+ 96F7             >1:
 574+ 96F7 17                                   rla
 575+ 96F8 4F                                   ld c,a
 576+ 96F9 C9                                   ret
 577+ 96FA              ; BC = BC / DE
 578+ 96FA              ; HL = BC % DE
 579+ 96FA              ; if HL > 0 BC -= 1
 580+ 96FA 7A           Floor_DivQ:             ld      a,d
 581+ 96FB B3                                   or      e
 582+ 96FC 28 22                                jr      z, .divideBy0
 583+ 96FE D5                                   push    de
 584+ 96FF CD 6B 96     .DoDivide:              call    BC_Div_DE       ; bc(q0) = bc / de , hl(r0) = bc %de
 585+ 9702 D1                                   pop     de              ; get divisor back to test
 586+ 9703 CB 7A                                bit     7,d             ; if divisor <0 or = 0 goto else branch
 587+ 9705 C2 15 97                             jp      nz,.deLTE0
 588+ 9708 7A                                   ld      a,d
 589+ 9709 B3                                   or      e
 590+ 970A CA 15 97                             jp      z,.deLTE0
 591+ 970D CB 7C        .deGT0:                 bit     7,h             ; if remainder >=0 return with no adjustment
 592+ 970F C8                                   ret     z               ; if remainder was not negative then all done
 593+ 9710 0B                                   dec     bc              ; else q --
 594+ 9711                                      ClearCarryFlag          ;      r += b
 594+ 9711 B7          >                        or a
 595+ 9712 ED 5A                                adc     hl,de           ;      .
 596+ 9714 C9                                   ret
 597+ 9715 CB 7C        .deLTE0:                bit     7,h             ; if remainder <= 0 retun with no adjustment
 598+ 9717 C8                                   ret     z               ; (return if negative)
 599+ 9718 7C                                   ld      a,h
 600+ 9719 B5                                   or      l               ; (return if zero)
 601+ 971A C8                                   ret     z
 602+ 971B 0B                                   dec     bc              ; else q --
 603+ 971C                                      ClearCarryFlag          ;      r += b
 603+ 971C B7          >                        or a
 604+ 971D ED 5A                                adc     hl,de           ;      .
 605+ 971F C9                                   ret
 606+ 9720
 607+ 9720
 608+ 9720 21 00 00     .divideBy0:             ld      hl,0
 609+ 9723 01 01 00                             ld      bc,1
 610+ 9726 C9                                   ret
 611+ 9727
 612+ 9727
 613+ 9727              L_DIV_0_ITERATION:      MACRO
 614+ 9727 ~                                    rl      de              ;left shift dividend + quotient carry
 615+ 9727 ~                                    ex      de,hl
 616+ 9727 ~                                    rl      de              ;left shift remainder + dividend carry
 617+ 9727 ~                                    ex      de,hl
 618+ 9727 ~                                    sub     hl,bc           ;substract divisor from remainder
 619+ 9727 ~                                    jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 620+ 9727 ~                                    add     hl,bc           ;revert subtraction of divisor
 621+ 9727 ~            .skip_revert0:          ccf                     ;complement carry
 622+ 9727 ~                                    rl      de              ;left shift dividend + quotient carry
 623+ 9727 ~                                    ex      de,hl
 624+ 9727 ~                                    rl      de              ;left shift remainder + dividend carry
 625+ 9727 ~                                    ex      de,hl
 626+ 9727 ~                                    sub     hl,bc           ;substract divisor from remainder
 627+ 9727 ~                                    jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 628+ 9727 ~                                    add     hl,bc           ;revert subtraction of divisor
 629+ 9727 ~            .skip_revert1:          ccf                     ;complement carry
 630+ 9727                                      ENDM
 631+ 9727
 632+ 9727              ; HL = DE / BC, DE = DE % BC
 633+ 9727 21 00 00     l_div_0:                ld      hl,0            ;clear remainder
 634+ 972A                                      L_DIV_0_ITERATION
 634+ 972A CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 634+ 972E EB          >                        ex      de,hl
 634+ 972F CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 634+ 9733 EB          >                        ex      de,hl
 634+ 9734 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 634+ 9737 D2 3B 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 634+ 973A 09          >                        add     hl,bc           ;revert subtraction of divisor
 634+ 973B 3F          >.skip_revert0:          ccf                     ;complement carry
 634+ 973C CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 634+ 9740 EB          >                        ex      de,hl
 634+ 9741 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 634+ 9745 EB          >                        ex      de,hl
 634+ 9746 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 634+ 9749 D2 4D 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 634+ 974C 09          >                        add     hl,bc           ;revert subtraction of divisor
 634+ 974D 3F          >.skip_revert1:          ccf                     ;complement carry
 635+ 974E                                      L_DIV_0_ITERATION
 635+ 974E CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 635+ 9752 EB          >                        ex      de,hl
 635+ 9753 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 635+ 9757 EB          >                        ex      de,hl
 635+ 9758 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 635+ 975B D2 5F 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 635+ 975E 09          >                        add     hl,bc           ;revert subtraction of divisor
 635+ 975F 3F          >.skip_revert0:          ccf                     ;complement carry
 635+ 9760 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 635+ 9764 EB          >                        ex      de,hl
 635+ 9765 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 635+ 9769 EB          >                        ex      de,hl
 635+ 976A B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 635+ 976D D2 71 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 635+ 9770 09          >                        add     hl,bc           ;revert subtraction of divisor
 635+ 9771 3F          >.skip_revert1:          ccf                     ;complement carry
 636+ 9772                                      L_DIV_0_ITERATION
 636+ 9772 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 636+ 9776 EB          >                        ex      de,hl
 636+ 9777 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 636+ 977B EB          >                        ex      de,hl
 636+ 977C B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 636+ 977F D2 83 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 636+ 9782 09          >                        add     hl,bc           ;revert subtraction of divisor
 636+ 9783 3F          >.skip_revert0:          ccf                     ;complement carry
 636+ 9784 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 636+ 9788 EB          >                        ex      de,hl
 636+ 9789 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 636+ 978D EB          >                        ex      de,hl
 636+ 978E B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 636+ 9791 D2 95 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 636+ 9794 09          >                        add     hl,bc           ;revert subtraction of divisor
 636+ 9795 3F          >.skip_revert1:          ccf                     ;complement carry
 637+ 9796                                      L_DIV_0_ITERATION
 637+ 9796 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 637+ 979A EB          >                        ex      de,hl
 637+ 979B CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 637+ 979F EB          >                        ex      de,hl
 637+ 97A0 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 637+ 97A3 D2 A7 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 637+ 97A6 09          >                        add     hl,bc           ;revert subtraction of divisor
 637+ 97A7 3F          >.skip_revert0:          ccf                     ;complement carry
 637+ 97A8 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 637+ 97AC EB          >                        ex      de,hl
 637+ 97AD CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 637+ 97B1 EB          >                        ex      de,hl
 637+ 97B2 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 637+ 97B5 D2 B9 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 637+ 97B8 09          >                        add     hl,bc           ;revert subtraction of divisor
 637+ 97B9 3F          >.skip_revert1:          ccf                     ;complement carry
 638+ 97BA                                      L_DIV_0_ITERATION
 638+ 97BA CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 638+ 97BE EB          >                        ex      de,hl
 638+ 97BF CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 638+ 97C3 EB          >                        ex      de,hl
 638+ 97C4 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 638+ 97C7 D2 CB 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 638+ 97CA 09          >                        add     hl,bc           ;revert subtraction of divisor
 638+ 97CB 3F          >.skip_revert0:          ccf                     ;complement carry
 638+ 97CC CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 638+ 97D0 EB          >                        ex      de,hl
 638+ 97D1 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 638+ 97D5 EB          >                        ex      de,hl
 638+ 97D6 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 638+ 97D9 D2 DD 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 638+ 97DC 09          >                        add     hl,bc           ;revert subtraction of divisor
 638+ 97DD 3F          >.skip_revert1:          ccf                     ;complement carry
 639+ 97DE                                      L_DIV_0_ITERATION
 639+ 97DE CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 639+ 97E2 EB          >                        ex      de,hl
 639+ 97E3 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 639+ 97E7 EB          >                        ex      de,hl
 639+ 97E8 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 639+ 97EB D2 EF 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 639+ 97EE 09          >                        add     hl,bc           ;revert subtraction of divisor
 639+ 97EF 3F          >.skip_revert0:          ccf                     ;complement carry
 639+ 97F0 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 639+ 97F4 EB          >                        ex      de,hl
 639+ 97F5 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 639+ 97F9 EB          >                        ex      de,hl
 639+ 97FA B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 639+ 97FD D2 01 98    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 639+ 9800 09          >                        add     hl,bc           ;revert subtraction of divisor
 639+ 9801 3F          >.skip_revert1:          ccf                     ;complement carry
 640+ 9802                                      L_DIV_0_ITERATION
 640+ 9802 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 640+ 9806 EB          >                        ex      de,hl
 640+ 9807 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 640+ 980B EB          >                        ex      de,hl
 640+ 980C B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 640+ 980F D2 13 98    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 640+ 9812 09          >                        add     hl,bc           ;revert subtraction of divisor
 640+ 9813 3F          >.skip_revert0:          ccf                     ;complement carry
 640+ 9814 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 640+ 9818 EB          >                        ex      de,hl
 640+ 9819 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 640+ 981D EB          >                        ex      de,hl
 640+ 981E B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 640+ 9821 D2 25 98    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 640+ 9824 09          >                        add     hl,bc           ;revert subtraction of divisor
 640+ 9825 3F          >.skip_revert1:          ccf                     ;complement carry
 641+ 9826                                      L_DIV_0_ITERATION
 641+ 9826 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 641+ 982A EB          >                        ex      de,hl
 641+ 982B CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 641+ 982F EB          >                        ex      de,hl
 641+ 9830 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 641+ 9833 D2 37 98    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 641+ 9836 09          >                        add     hl,bc           ;revert subtraction of divisor
 641+ 9837 3F          >.skip_revert0:          ccf                     ;complement carry
 641+ 9838 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 641+ 983C EB          >                        ex      de,hl
 641+ 983D CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 641+ 9841 EB          >                        ex      de,hl
 641+ 9842 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 641+ 9845 D2 49 98    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 641+ 9848 09          >                        add     hl,bc           ;revert subtraction of divisor
 641+ 9849 3F          >.skip_revert1:          ccf                     ;complement carry
 642+ 984A CB 13 CB 12                          rl      de              ;left shift dividend + quotient carry
 643+ 984E EB                                   ex      de,hl           ;dividend<>remainder
 644+ 984F C9                                   ret
 645+ 9850
 646+ 9850
 647+ 9850
 648+ 9850 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 649+ 9853              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 649+ 9853 CB 25       >			   sla l
 649+ 9855 CB 14       >			   rl  h
 650+ 9857 7C                                   ld      a,h
 651+ 9858 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 652+ 985A                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 652+ 985A B9          >                        cp      c
 652+ 985B DA 66 98    >                        jp		c, .LL132
 653+ 985E 3F           .LL131:                 ccf                                 ; compliment carry
 654+ 985F 99                                   sbc     a,c                         ; q
 655+ 9860 67                                   ld      h,a                         ; h (s)
 656+ 9861 7D                                   ld      a,l                         ; r
 657+ 9862 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 658+ 9864 37                                   scf                                 ; set carry for next rolls
 659+ 9865 3F                                   ccf
 660+ 9866              .LL132:                 RollDELeft1                         ; Rotate de bits left
 660+ 9866 CB 13       >               rl  e
 660+ 9868 CB 12       >               rl  d
 661+ 986A 38 E7                                jr      c,.LL130                    ;
 662+ 986C EB                                   ex      de,hl                       ; hl = result
 663+ 986D C9                                   ret
 664+ 986E
 665+ 986E
 666+ 986E AF           div_hl_c:               xor	a
 667+ 986F 06 10                                ld	b, 16
 668+ 9871 29           .loop:                  add	hl, hl
 669+ 9872 17                                   rla
 670+ 9873 38 03                                jr	c, $+5
 671+ 9875 B9                                   cp	c
 672+ 9876 38 02                                jr	c, $+4
 673+ 9878 91                                   sub	c
 674+ 9879 2C                                   inc	l
 675+ 987A 10 F5                                djnz	.loop
 676+ 987C C9                                   ret
 677+ 987D              ;l_div, signed division
 678+ 987D              ; comes in with DE and HL
 679+ 987D              ; HL = DE / HL, DE = DE % HL
 680+ 987D 4A           l_div:                  ld      c,d             ;sign of dividend
 681+ 987E 44                                   ld      b,h             ;sign of divisor
 682+ 987F C5                                   push    bc              ;save signs
 683+ 9880 4D                                   ld      c,l             ;divisor to bc
 684+ 9881 7A                                   ld      a,d
 685+ 9882 B7                                   or      a
 686+ 9883 F2 8C 98                             jp      p,.NotDENeg
 687+ 9886              .DeNegate:              macronegate16de
 687+ 9886 AF          >					xor 	a
 687+ 9887 93          >                    sub 	e
 687+ 9888 5F          >                    ld 		e,a
 687+ 9889 9F          >                    sbc 	a,a
 687+ 988A 92          >                    sub 	d
 687+ 988B 57          >                    ld 		d,a
 688+ 988C 78           .NotDENeg:              ld      a,b
 689+ 988D B7                                   or      a
 690+ 988E F2 97 98                             jp      p,.NotBCNeg     ; if signs are opposite them flip
 691+ 9891                                      macronegate16bc
 691+ 9891 AF          >					xor 	a
 691+ 9892 91          >                    sub 	c
 691+ 9893 4F          >                    ld 		c,a
 691+ 9894 9F          >                    sbc 	a,a
 691+ 9895 90          >                    sub 	b
 691+ 9896 47          >                    ld 		b,a
 692+ 9897 CD 27 97     .NotBCNeg:              call    l_div_0         ;unsigned HL = DE / BC, DE = DE % BC
 693+ 989A                                      ; C standard requires that the result of division satisfy a = (a/b)*b + a%b emainder takes sign of the dividend
 694+ 989A C1                                   pop     bc              ;restore sign info
 695+ 989B 78                                   ld      a,b
 696+ 989C A9                                   xor     c               ;quotient, sign of dividend^divisor
 697+ 989D F2 A6 98                             jp      p,.NotHLNeg
 698+ 98A0                                      macronegate16hl
 698+ 98A0 AF          >					xor 	a
 698+ 98A1 95          >					sub 	l
 698+ 98A2 6F          >					ld 		l,a
 698+ 98A3 9F          >					sbc 	a,a
 698+ 98A4 94          >					sub 	h
 698+ 98A5 67          >					ld 		h,a
 699+ 98A6 79           .NotHLNeg:              ld      a,c
 700+ 98A7 B7                                   or      a,a             ;remainder, sign of dividend
 701+ 98A8 F0                                   ret     p
 702+ 98A9                                      macronegate16de
 702+ 98A9 AF          >					xor 	a
 702+ 98AA 93          >                    sub 	e
 702+ 98AB 5F          >                    ld 		e,a
 702+ 98AC 9F          >                    sbc 	a,a
 702+ 98AD 92          >                    sub 	d
 702+ 98AE 57          >                    ld 		d,a
 703+ 98AF C9                                   ret
 704+ 98B0
# file closed: ./Maths/asm_divide.asm
1184  98B0                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 98B0              asm_tis2:
   2+ 98B0              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 98B0              ; ">DOES NOT DO SIGNED YET"
   4+ 98B0 F5           	push af
   5+ 98B1 E6 7F            and SignMask8Bit
   6+ 98B3 57           	ld d,a				;; d = A
   7+ 98B4 3A 8A 7E     	ld a,(varQ)
   8+ 98B7 5F           	ld e,a
   9+ 98B8 7A           	ld a,d
  10+ 98B9 BB           	cp e
  11+ 98BA 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 98BC 1E 60        	ld e, 96
  13+ 98BE ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 98C0 EB           	ex de,hl
  15+ 98C1 3A 8A 7E     	ld a,(varQ)
  16+ 98C4 4F           	ld c,a
  17+ 98C5 CD 1D 96     	call asm_div16
  18+ 98C8 F1           	pop af
  19+ 98C9 E6 80        	and $80
  20+ 98CB B5           	or l
  21+ 98CC C9           	ret
  22+ 98CD              .tis2_set96:
  23+ 98CD F1           	pop af
  24+ 98CE E6 80        	and $80
  25+ 98D0 F6 96        	or $96
  26+ 98D2 C9           	ret
  27+ 98D3
  28+ 98D3
  29+ 98D3              asm_unit_vector:
  30+ 98D3              squareregfx:
  31+ 98D3 3A A6 C0     	ld a,(UBnkXScaled)
  32+ 98D6 57           	ld d,a
  33+ 98D7 5F           	ld e,a
  34+ 98D8 ED 30        	mul
  35+ 98DA EB           	ex de,hl
  36+ 98DB              squareregfy:
  37+ 98DB 3A A8 C0     	ld a, (UBnkYScaled)
  38+ 98DE 57           	ld d,a
  39+ 98DF 5F           	ld e,a
  40+ 98E0 ED 30        	mul
  41+ 98E2 19           	add hl,de
  42+ 98E3              squareregfz:
  43+ 98E3 3A AA C0     	ld a, (UBnkZScaled)
  44+ 98E6 57           	ld d,a
  45+ 98E7 5F           	ld e,a
  46+ 98E8 ED 30        	mul
  47+ 98EA 19           	add hl,de
  48+ 98EB EB           	ex de,hl			; de de to number to root
  49+ 98EC              hlequsquareroot:
  50+ 98EC CD 94 92     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 98EF E5           	push hl				; save it for work 3 copies
  52+ 98F0 E5           	push hl				; save it for work
  53+ 98F1 E5           	push hl				; save it for work
  54+ 98F2              normfx:
  55+ 98F2 3A A6 C0     	ld a,(UBnkXScaled)
  56+ 98F5 E1           	pop hl				; get copy #1
  57+ 98F6 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 98F7 4F           	ld c,a
  59+ 98F8 CD B0 98     	call asm_tis2
  60+ 98FB 32 A6 C0     	ld (UBnkXScaled),a
  61+ 98FE              normfy:
  62+ 98FE 3A A8 C0     	ld a,(UBnkYScaled)
  63+ 9901 E1           	pop hl				; get copy #2
  64+ 9902 7D           	ld a,l
  65+ 9903 4F           	ld c,a
  66+ 9904 CD B0 98     	call asm_tis2
  67+ 9907 32 A8 C0     	ld (UBnkYScaled),a
  68+ 990A              normfz:
  69+ 990A 3A AA C0     	ld a,(UBnkZScaled)
  70+ 990D E1           	pop hl				; get copy #2
  71+ 990E 7D           	ld a,l
  72+ 990F 4F           	ld c,a
  73+ 9910 CD B0 98     	call asm_tis2
  74+ 9913 32 AA C0     	ld (UBnkZScaled),a
  75+ 9916              asm_unit_vector_end:
  76+ 9916 C9           	ret
  77+ 9917
# file closed: ./Maths/asm_unitvector.asm
1185  9917                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 9917              ; Input:
   2+ 9917              ;       HL = 1st value
   3+ 9917              ;       DE = 2nd value
   4+ 9917              ; Output:
   5+ 9917              ;       CF, ZF = results of comparison:
   6+ 9917              ;
   7+ 9917              ;               CF      ZF      Result
   8+ 9917              ;               -----------------------------------
   9+ 9917              ;               0       0       HL > DE
  10+ 9917              ;               0       1       HL == DE
  11+ 9917              ;               1       0       HL < DE
  12+ 9917              ;               1       1       Impossible
  13+ 9917              ;
  14+ 9917
  15+ 9917
  16+ 9917 E5           CompareBCDESigned:  push    hl
  17+ 9918 A7                               and     a
  18+ 9919 60 69                            ld      hl,bc
  19+ 991B ED 52                            sbc     hl,de
  20+ 991D E1                               pop     hl
  21+ 991E C9                               ret
  22+ 991F
  23+ 991F E5           CompareDEBCSigned:  push    hl
  24+ 9920 A7                               and     a
  25+ 9921 62 6B                            ld      hl,de
  26+ 9923 ED 42                            sbc     hl,bc
  27+ 9925 E1                               pop     hl
  28+ 9926 C9                               ret
  29+ 9927
  30+ 9927
  31+ 9927              ;### CMPGTE -> test if A>=B
  32+ 9927              ;### Input      HL=A, DE=B if hl=> de no carry else de > hl and set carry
  33+ 9927 7C           CompareHLDESgn:     ld a,h
  34+ 9928 AA                               xor d
  35+ 9929 FA 33 99                         jp m, .cmpgte2
  36+ 992C ED 52                            sbc hl,de
  37+ 992E 30 09                            jr nc, .cmpgte3
  38+ 9930 19           .cmpgte1            add hl,de
  39+ 9931                                  SetCarryFlag
  39+ 9931 37          >                        scf
  40+ 9932 C9                               ret
  41+ 9933 CB 7A        .cmpgte2            bit 7,d
  42+ 9935 28 05                            jr z,.cmpgte4
  43+ 9937              .cmpgte5:           ClearCarryFlag
  43+ 9937 B7          >                        or a
  44+ 9938 C9                               ret
  45+ 9939 19           .cmpgte3            add hl,de
  46+ 993A                                  ClearCarryFlag
  46+ 993A B7          >                        or a
  47+ 993B C9                               ret
  48+ 993C              .cmpgte4:           SetCarryFlag
  48+ 993C 37          >                        scf
  49+ 993D C9                               ret
  50+ 993E
  51+ 993E              ; Compares HL and DE sets z flag if same, else nz
  52+ 993E 7C           CompareHLDESame:    ld  a,h
  53+ 993F BA                               cp  d
  54+ 9940 C0                               ret nz
  55+ 9941 7D                               ld  a,l
  56+ 9942 BB                               cp  e
  57+ 9943 C9                               ret
  58+ 9944
  59+ 9944
  60+ 9944
  61+ 9944 7C           CompareHLBCSgn:     ld a,h
  62+ 9945 A8                               xor b
  63+ 9946 FA 4F 99                         jp m, .cmpgte2
  64+ 9949 ED 42                            sbc hl,bc
  65+ 994B 30 06                            jr nc, .cmpgte3
  66+ 994D              .cmpgte1            SetCarryFlag
  66+ 994D 37          >                        scf
  67+ 994E C9                               ret
  68+ 994F CB 78        .cmpgte2            bit 7,b
  69+ 9951 28 FA                            jr z,.cmpgte1
  70+ 9953              .cmpgte3            ClearCarryFlag
  70+ 9953 B7          >                        or a
  71+ 9954 C9                               ret
  72+ 9955
  73+ 9955              CompareHLDESigned:
  74+ 9955 E5           compare16HLDE:      push    hl
  75+ 9956 A7                               and     a
  76+ 9957 ED 52                            sbc     hl,de
  77+ 9959 E1                               pop     hl
  78+ 995A C9                               ret
  79+ 995B              CompareHLBCSigned:
  80+ 995B E5           CompareHLBC:        push    hl
  81+ 995C A7                               and     a
  82+ 995D ED 42                            sbc     hl,bc
  83+ 995F E1                               pop     hl
  84+ 9960 C9                               ret
  85+ 9961
  86+ 9961              ; With compare signed we do ABS comparison
  87+ 9961              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  88+ 9961
  89+ 9961 E5 D5        compare16HLDEABS:   push    hl,,de
  90+ 9963 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  91+ 9964 E6 7F                            and     SignMask8Bit
  92+ 9966 67                               ld      h,a
  93+ 9967 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  94+ 9968 E6 7F                            and     SignMask8Bit
  95+ 996A 57                               ld      d,a
  96+ 996B A7                               and     a
  97+ 996C ED 52                            sbc     hl,de
  98+ 996E D1 E1                            pop     hl,,de
  99+ 9970 C9                               ret
 100+ 9971
 101+ 9971
# file closed: ./Maths/compare16.asm
1186  9971                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 9971              ; a equal a / d * 96
   2+ 9971
   3+ 9971
   4+ 9971 DD 7E 00     NormaliseIXVector:      ld		a,(ix+0)	        ; XX15+0
   5+ 9974 E6 7F                                and		SignMask8Bit        ; a = unsigned version
   6+ 9976              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
   6+ 9976 5F          >			ld	e,a
   6+ 9977 57          >			ld  d,a
   6+ 9978 ED 30       >			mul
   7+ 997A 62 6B                                ld		hl,de		 		; h == varR d = varO e= varA
   8+ 997C DD 7E 01     .n96SQY:                ld		a,(ix+1)
   9+ 997F E6 7F                                and		SignMask8Bit        ; = abs
  10+ 9981                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  10+ 9981 5F          >			ld	e,a
  10+ 9982 57          >			ld  d,a
  10+ 9983 ED 30       >			mul
  11+ 9985 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  12+ 9986 DD 7E 02     .n96SQZ:                ld		a,(ix+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  13+ 9989 E6 7F                                and		SignMask8Bit        ; unsigned
  14+ 998B                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  14+ 998B 5F          >			ld	e,a
  14+ 998C 57          >			ld  d,a
  14+ 998D ED 30       >			mul
  15+ 998F 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  16+ 9990 EB                                   ex		de,hl				; hl => de ready for square root
  17+ 9991 CD 94 92     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  18+ 9994 DD 7E 00     .n96NORMX:              ld		a,(ix+0)
  19+ 9997 4F                                   ld		c,a                 ; save copy into c
  20+ 9998 E6 7F                                and		SignMask8Bit
  21+ 999A 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  22+ 999B CD 8E 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  23+ 999E 47                                   ld		b,a				    ;++SGN
  24+ 999F 79                                   ld      a,c
  25+ 99A0 E6 80                                and     SignOnly8Bit			    ;++SGN
  26+ 99A2 B0                                   or		b				    ;++SGN
  27+ 99A3 DD 77 00                             ld		(ix+0),a
  28+ 99A6 DD 7E 01     .n96NORMY:              ld		a,(ix+1)
  29+ 99A9 4F                                   ld		c,a                 ; save copy into c
  30+ 99AA E6 7F                                and		SignMask8Bit
  31+ 99AC 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  32+ 99AD CD 8E 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  33+ 99B0 47                                   ld		b,a				    ;++SGN
  34+ 99B1 79                                   ld      a,c
  35+ 99B2 E6 80                                and     SignOnly8Bit			    ;++SGN
  36+ 99B4 B0                                   or		b				    ;++SGN
  37+ 99B5 DD 77 01                             ld		(ix+1),a
  38+ 99B8 DD 7E 02     .n96NORMZ:              ld		a,(ix+2)
  39+ 99BB 4F                                   ld		c,a                 ; save copy into c
  40+ 99BC E6 7F                                and		SignMask8Bit
  41+ 99BE 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  42+ 99BF CD 8E 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  43+ 99C2 47                                   ld		b,a				    ;++SGN
  44+ 99C3 79                                   ld      a,c
  45+ 99C4 E6 80                                and     SignOnly8Bit			    ;++SGN
  46+ 99C6 B0                                   or		b				    ;++SGN
  47+ 99C7 DD 77 02                             ld		(ix+2),a
  48+ 99CA C9                                   ret
  49+ 99CB
  50+ 99CB              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  51+ 99CB 3A A6 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
  52+ 99CE DD 67                                ld		ixh,a               ; ixh = signed x component
  53+ 99D0 E6 7F                                and		SignMask8Bit        ; a = unsigned version
  54+ 99D2              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  54+ 99D2 5F          >			ld	e,a
  54+ 99D3 57          >			ld  d,a
  54+ 99D4 ED 30       >			mul
  55+ 99D6 62                                   ld		h,d					; h == varR d = varO e= varA
  56+ 99D7 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  57+ 99D8 3A A7 C0     .n96SQY:                ld		a,(XX15VecY)
  58+ 99DB DD 6F                                ld		ixl,a               ; ixl = signed y componet
  59+ 99DD E6 7F                                and		SignMask8Bit                 ; = abs
  60+ 99DF                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  60+ 99DF 5F          >			ld	e,a
  60+ 99E0 57          >			ld  d,a
  60+ 99E1 ED 30       >			mul
  61+ 99E3 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  62+ 99E4 3A A8 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  63+ 99E7 FD 67                                ld		iyh,a               ; iyh = signed
  64+ 99E9 E6 7F                                and		SignMask8Bit                 ; unsigned
  65+ 99EB                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  65+ 99EB 5F          >			ld	e,a
  65+ 99EC 57          >			ld  d,a
  65+ 99ED ED 30       >			mul
  66+ 99EF 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  67+ 99F0 EB                                   ex		de,hl				; hl => de ready for square root
  68+ 99F1 CD 94 92     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  69+ 99F4 3A A6 C0     .n96NORMX:              ld		a,(XX15VecX)
  70+ 99F7 E6 7F                                and		SignMask8Bit
  71+ 99F9 4F                                   ld		c,a
  72+ 99FA 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  73+ 99FB CD 8E 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  74+ 99FE 47                                   ld		b,a				    ;++SGN
  75+ 99FF DD 7C                                ld		a,ixh			    ;++SGN
  76+ 9A01 E6 80                                and		$80				    ;++SGN
  77+ 9A03 B0                                   or		b				    ;++SGN
  78+ 9A04 32 A6 C0                             ld		(XX15VecX),a
  79+ 9A07 3A A7 C0     .n96NORMY:              ld		a,(XX15VecY)
  80+ 9A0A E6 7F                                and		SignMask8Bit
  81+ 9A0C 4F                                   ld		c,a
  82+ 9A0D 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  83+ 9A0E CD 8E 9B                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  84+ 9A11 47                                   ld		b,a				    ;++SGN
  85+ 9A12 DD 7D                                ld		a,ixl			    ;++SGN
  86+ 9A14 E6 80                                and		$80				    ;++SGN
  87+ 9A16 B0                                   or		b				    ;++SGN
  88+ 9A17 32 A7 C0                             ld		(XX15VecY),a
  89+ 9A1A 3A A8 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  90+ 9A1D E6 7F                                and		SignMask8Bit
  91+ 9A1F 4F                                   ld		c,a
  92+ 9A20 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  93+ 9A21 CD 8E 9B                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  94+ 9A24 47                                   ld		b,a				    ;++SGN
  95+ 9A25 FD 7C                                ld		a,iyh			    ;++SGN
  96+ 9A27 E6 80                                and		$80				    ;++SGN
  97+ 9A29 B0                                   or		b				    ;++SGN
  98+ 9A2A 32 A8 C0                             ld		(XX15VecZ),a
  99+ 9A2D C9                                   ret
 100+ 9A2E
 101+ 9A2E              ; Normalise vector
 102+ 9A2E              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
 103+ 9A2E              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
 104+ 9A2E              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
 105+ 9A2E              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
 106+ 9A2E
# file closed: ./Maths/normalise96.asm
1187  9A2E                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 9A2E              ;Number in hl to decimal ASCII
   2+ 9A2E              ;Thanks to z80 Bits
   3+ 9A2E              ;inputs:	hl = number to ASCII
   4+ 9A2E              ;example: hl=300 outputs '00300'
   5+ 9A2E              ;destroys: af, bc, hl, de used
   6+ 9A2E              DispHLtoDE:
   7+ 9A2E              ; "DispHL, writes HL to DE address"
   8+ 9A2E 01 F0 D8     	ld	bc,-10000
   9+ 9A31 CD 47 9A     	call	Num1
  10+ 9A34 01 18 FC     	ld	bc,-1000
  11+ 9A37 CD 47 9A     	call	Num1
  12+ 9A3A 01 9C FF     	ld	bc,-100
  13+ 9A3D CD 47 9A     	call	Num1
  14+ 9A40 0E F6        	ld	c,-10
  15+ 9A42 CD 47 9A     	call	Num1
  16+ 9A45 0E FF        	ld	c,-1
  17+ 9A47              Num1:
  18+ 9A47 3E 2F        	ld	a,'0'-1
  19+ 9A49              .Num2:
  20+ 9A49 3C           	inc	a
  21+ 9A4A 09           	add	hl,bc
  22+ 9A4B 38 FC        	jr	c,.Num2
  23+ 9A4D ED 42        	sbc	hl,bc
  24+ 9A4F 12           	ld	(de),a
  25+ 9A50 13           	inc	de
  26+ 9A51 C9           	ret
  27+ 9A52
  28+ 9A52              DispAtoDE:
  29+ 9A52 26 00        	ld h,0
  30+ 9A54 6F           	ld l,a
  31+ 9A55 C3 2E 9A     	jp DispHLtoDE
  32+ 9A58
  33+ 9A58              DispPriceAtoDE:
  34+ 9A58 26 00        	ld h,0
  35+ 9A5A 6F           	ld l,a
  36+ 9A5B 01 9C FF     	ld	bc,-100
  37+ 9A5E CD 6E 9A     	call	.NumLeadBlank1
  38+ 9A61 0E F6        	ld	c,-10
  39+ 9A63 CD 47 9A     	call	Num1
  40+ 9A66 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9A68                                  DISPLAY "TODO:  optimise "
  42+ 9A68 12           	ld		(de),a					; we can optimse that later TODO
  43+ 9A69 13           	inc		de						; with just an inc De
  44+ 9A6A 0E FF        	ld	c,-1
  45+ 9A6C 18 D9        	jr		Num1
  46+ 9A6E              .NumLeadBlank1:
  47+ 9A6E 3E 2F        	ld	a,'0'-1
  48+ 9A70              .NumLeadBlank2:
  49+ 9A70 3C           	inc	a
  50+ 9A71 09           	add	hl,bc
  51+ 9A72 38 FC        	jr	c,.NumLeadBlank2
  52+ 9A74 FE 30        	cp	'0'
  53+ 9A76 20 02        	jr	nz,.DontBlank
  54+ 9A78              .Blank:
  55+ 9A78 3E 20        	ld	a,' '
  56+ 9A7A              .DontBlank:
  57+ 9A7A ED 42        	sbc	hl,bc
  58+ 9A7C 12           	ld	(de),a
  59+ 9A7D 13           	inc	de
  60+ 9A7E C9           	ret
  61+ 9A7F
  62+ 9A7F              DispQtyAtoDE:
  63+ 9A7F FE 00        	cp	0
  64+ 9A81 28 23        	jr	z,.NoStock
  65+ 9A83 26 00        	ld h,0
  66+ 9A85 6F           	ld l,a
  67+ 9A86 01 9C FF     	ld	bc,-100
  68+ 9A89 CD 95 9A     	call	.NumLeadBlank1
  69+ 9A8C 0E F6        	ld	c,-10
  70+ 9A8E CD 95 9A     	call	.NumLeadBlank1
  71+ 9A91 0E FF        	ld	c,-1
  72+ 9A93 18 B2        	jr		Num1
  73+ 9A95              .NumLeadBlank1:
  74+ 9A95 3E 2F        	ld	a,'0'-1
  75+ 9A97              .NumLeadBlank2:
  76+ 9A97 3C           	inc	a
  77+ 9A98 09           	add	hl,bc
  78+ 9A99 38 FC        	jr	c,.NumLeadBlank2
  79+ 9A9B FE 30        	cp	'0'
  80+ 9A9D 20 02        	jr	nz,.DontBlank
  81+ 9A9F              .Blank:
  82+ 9A9F 3E 20        	ld	a,' '
  83+ 9AA1              .DontBlank:
  84+ 9AA1 ED 42        	sbc	hl,bc
  85+ 9AA3 12           	ld	(de),a
  86+ 9AA4 13           	inc	de
  87+ 9AA5 C9           	ret
  88+ 9AA6              .NoStock:
  89+ 9AA6 3E 20        	ld	a,' '
  90+ 9AA8 12           	ld	(de),a
  91+ 9AA9 13           	inc	de
  92+ 9AAA 12           	ld	(de),a
  93+ 9AAB 13           	inc	de
  94+ 9AAC 3E 2D        	ld	a,'-'
  95+ 9AAE 12           	ld	(de),a
  96+ 9AAF 13           	inc de
  97+ 9AB0 C9           	ret
  98+ 9AB1
  99+ 9AB1
 100+ 9AB1              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 101+ 9AB1              ;### Input      DE,IX=32bit value, IY=destination address
 102+ 9AB1              ;### Output     IY=last char in destination string
 103+ 9AB1              ;### Destroyed AF,BC,DE,HL,IX
 104+ 9AB1 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 104+ 9AB5 0A 00 00 00
 104+ 9AB9 64 00 00 00
 104+ 9ABD E8 03 00 00
 104+ 9AC1 10 27 00 00
 105+ 9AC5 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 105+ 9AC9 40 42 0F 00
 105+ 9ACD 80 96 98 00
 105+ 9AD1 00 E1 F5 05
 105+ 9AD5 00 CA 9A 3B
 106+ 9AD9 00 00 00 00  clcn32z ds 4
 107+ 9ADD
 108+ 9ADD              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 109+ 9ADD CD EC 9A     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 110+ 9AE0 FD 7E 00                             ld      a,(IY+0)
 111+ 9AE3 FD 77 01                             ld      (IY+1),a
 112+ 9AE6 3E 2E                                ld      a,"."
 113+ 9AE8 FD 77 00                             ld      (IY+0),a
 114+ 9AEB C9                                   ret
 115+ 9AEC
 116+ 9AEC DD 22 D9 9A  DispDEIXtoIY:           ld (clcn32z),ix
 117+ 9AF0 ED 53 DB 9A                          ld (clcn32z+2),de
 118+ 9AF4 DD 21 D5 9A                          ld ix,clcn32t+36
 119+ 9AF8 06 09                                ld b,9
 120+ 9AFA 0E 00                                ld c,0
 121+ 9AFC 3E 30        .clcn321:               ld a,'0'
 122+ 9AFE B7                                   or a
 123+ 9AFF DD 5E 00     .clcn322:               ld e,(ix+0)
 124+ 9B02 DD 56 01                             ld d,(ix+1)
 125+ 9B05 2A D9 9A                             ld hl,(clcn32z)
 126+ 9B08 ED 52                                sbc hl,de
 127+ 9B0A 22 D9 9A                             ld (clcn32z),hl
 128+ 9B0D DD 5E 02                             ld e,(ix+2)
 129+ 9B10 DD 56 03                             ld d,(ix+3)
 130+ 9B13 2A DB 9A                             ld hl,(clcn32z+2)
 131+ 9B16 ED 52                                sbc hl,de
 132+ 9B18 22 DB 9A                             ld (clcn32z+2),hl
 133+ 9B1B 38 04                                jr c,.clcn325
 134+ 9B1D 0C                                   inc c
 135+ 9B1E 3C                                   inc a
 136+ 9B1F 18 DE                                jr .clcn322
 137+ 9B21 DD 5E 00     .clcn325:               ld e,(ix+0)
 138+ 9B24 DD 56 01                             ld d,(ix+1)
 139+ 9B27 2A D9 9A                             ld hl,(clcn32z)
 140+ 9B2A 19                                   add hl,de
 141+ 9B2B 22 D9 9A                             ld (clcn32z),hl
 142+ 9B2E DD 5E 02                             ld e,(ix+2)
 143+ 9B31 DD 56 03                             ld d,(ix+3)
 144+ 9B34 2A DB 9A                             ld hl,(clcn32z+2)
 145+ 9B37 ED 5A                                adc hl,de
 146+ 9B39 22 DB 9A                             ld (clcn32z+2),hl
 147+ 9B3C 11 FC FF                             ld de,-4
 148+ 9B3F DD 19                                add ix,de
 149+ 9B41 0C                                   inc c
 150+ 9B42 0D                                   dec c
 151+ 9B43 28 05                                jr z,.clcn323
 152+ 9B45 FD 77 00                             ld (iy+0),a
 153+ 9B48 FD 23                                inc iy
 154+ 9B4A 10 B0        .clcn323:               djnz .clcn321
 155+ 9B4C 3A D9 9A                             ld a,(clcn32z)
 156+ 9B4F C6 30                                add A,'0'
 157+ 9B51 FD 77 00                             ld (iy+0),a
 158+ 9B54 FD 36 01 00                          ld (iy+1),0
 159+ 9B58 C9                                   ret
 160+ 9B59
# file closed: ./Maths/binary_to_decimal.asm
1188  9B59                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ 9B59              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 9B59 BA          >                        cp     d
   1+ 9B5A D2 75 9B    >                        jp		nc,.TIS2AccGTEQ
   2+ 9B5D 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9B5F CB 27        .TIS2RollTLoop:			sla			a
   4+ 9B61                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9B61 BA          >                        cp      d
   4+ 9B62 DA 78 9B    >                        jp		c, .TIS2SkipSub
   5+ 9B65 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9B66 37                                   scf
   7+ 9B67 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 9B69 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 9B6B 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 9B6C CB 3F                                srl			a							; result / 2
  11+ 9B6E CB 3F                                srl			a							; result / 4
  12+ 9B70 47                                   ld			b,a							; t = t /4
  13+ 9B71 CB 3F                                srl			a							; result / 8
  14+ 9B73 80                                   add			a,b							; result /8 + result /4
  15+ 9B74 C9                                   ret
  16+ 9B75 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9B77 C9                                   ret
  18+ 9B78 B7           .TIS2SkipSub:           or			a
  19+ 9B79 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 9B7B 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 9B7D C3 6B 9B                             jp			.TIS2SKIPCont
  22+ 9B80
  23+ 9B80
  24+ 9B80              ; USES 			A DE BC
  25+ 9B80              ; DOES NOT USE 	HL
  26+ 9B80              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9B80 CB 7F        	bit			7,a
  28+ 9B82 28 04        	jr			z,AequAdivQmul96
  29+ 9B84 ED 44        	neg										; revers 2s'c and just set neg bit
  30+ 9B86 CB FF        	set			7,a
  31+ 9B88              ; Note negative numbers are bit 7 set not 2's compliment
  32+ 9B88              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9B88              TIS2:
  34+ 9B88 4F           	ld			c,a							; copy of Acc
  35+ 9B89 3A 8A 7E     	ld			a,(varQ)
  36+ 9B8C 57           	ld			d,a							; d = varQ
  37+ 9B8D 79           	ld			a,c							; recover a
  38+ 9B8E              AequAdivDmul967Bit:
  39+ 9B8E 4F               ld          c,a
  40+ 9B8F 7A               ld          a,d
  41+ 9B90 CB 27            sla         a
  42+ 9B92 30 10            jr          nc, .OKToDivide
  43+ 9B94              .ScaleDown:
  44+ 9B94 B7               or          a
  45+ 9B95 CB 3A            srl         d
  46+ 9B97
  47+ 9B97 79               ld          a,c
  48+ 9B98 E6 7F            and         SignMask8Bit
  49+ 9B9A CB 3F            srl         a
  50+ 9B9C 47               ld          b,a
  51+ 9B9D 79               ld          a,c
  52+ 9B9E E6 80            and         $80
  53+ 9BA0 B0               or          b
  54+ 9BA1 C3 A5 9B         jp          AequAdivDmul96
  55+ 9BA4              .OKToDivide:
  56+ 9BA4 79               ld          a,c
  57+ 9BA5              AequAdivDmul96:
  58+ 9BA5 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  59+ 9BA6 E6 7F        	and			SignMask8Bit				; ignore sign
  60+ 9BA8              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  60+ 9BA8 BA          >                        cp     d
  60+ 9BA9 D2 C9 9B    >                        jp		nc,.TIS2AccGTEQ
  61+ 9BAC 06 FE        	ld			b,$FE						; division roll (replaced varT)
  62+ 9BAE              .TIS2RollTLoop:									; .TIL2	; roll T
  63+ 9BAE CB 27        	sla			a
  64+ 9BB0              	JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  64+ 9BB0 BA          >                        cp      d
  64+ 9BB1 DA CF 9B    >                        jp		c, .TIS2SkipSub
  65+ 9BB4 9A           	sbc			a,d							; do subtraction with carry
  66+ 9BB5 37           	scf                                     ; set carrry to roll into b
  67+ 9BB6 CB 10        	rl			b							; T rolled left to push bit out the end
  68+ 9BB8 38 F4        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  69+ 9BBA              .TIS2SKIPCont:
  70+ 9BBA 78           	ld			a,b							; A = T = 4 / 4
  71+ 9BBB CB 3F        	srl			a							; .
  72+ 9BBD CB 3F        	srl			a							; .
  73+ 9BBF 47           	ld			b,a							; .
  74+ 9BC0 CB 3F        	srl			a							; A = A / 2 (i.e. T /8)
  75+ 9BC2 80           	add			a,b							; A = T/8 + T/4 (3T/8)
  76+ 9BC3 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  77+ 9BC4 79           	ld			a,c							; copy of Acc to look at sign bit
  78+ 9BC5 E6 80        	and			$80							; recover sign only
  79+ 9BC7 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  80+ 9BC8 C9           	ret
  81+ 9BC9              .TIS2AccGTEQ:
  82+ 9BC9              ;TI4:										;\ clean to +/- unity
  83+ 9BC9 79           	ld			a,c
  84+ 9BCA E6 80        	and			$80							; copy of Acc
  85+ 9BCC F6 60        	or			$60							; unity
  86+ 9BCE C9           	ret
  87+ 9BCF              .TIS2SkipSub:
  88+ 9BCF              	ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  88+ 9BCF B7          >                        or a
  89+ 9BD0 CB 10        	rl			b							; T rolled left to push bit out the end
  90+ 9BD2 38 DA        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  91+ 9BD4 C3 BA 9B     	jp			.TIS2SKIPCont
  92+ 9BD7
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1189  9BD7                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 9BD7              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 9BD7              fmltu:
   3+ 9BD7 57           AequAmulQdiv256:        ld	d,a
   4+ 9BD8 3A 8A 7E                             ld	a,(varQ)
   5+ 9BDB 5F                                   ld	e,a
   6+ 9BDC ED 30                                mul
   7+ 9BDE 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 9BDF C9                                   ret
   9+ 9BE0
  10+ 9BE0 5F           AequAmulDdiv256:        ld  e,a
  11+ 9BE1 ED 30                                mul
  12+ 9BE3 7A                                   ld  a,d
  13+ 9BE4 C9                                   ret
  14+ 9BE5
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1190  9BE5                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ 9BE5              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ 9BE5              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ 9BE5 21 2D 80     		ld		hl,varDustZ
   4+ 9BE8 FD 7D        		ld		a,iyl
   5+ 9BEA ED 31        		add		hl,a
   6+ 9BEC 7E           		ld		a,(hl)
   7+ 9BED C3 F9 9B     		jp		DV41
   8+ 9BF0              DV42:										; travel step of dust particle front/rear
   9+ 9BF0 21 2D 80     		ld		hl,varDustZ
  10+ 9BF3 3A 75 7D     		ld		a,(regY)
  11+ 9BF6 ED 31        		add		hl,a
  12+ 9BF8 7E           		ld		a,(hl)						; a = SZ[y]
  13+ 9BF9              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ 9BF9 5F           		ld		e,a							; using E as Q var replacement
  15+ 9BFA 3A 84 7E     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ 9BFD              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ 9BFD 06 08        		ld		b,8							; counter
  18+ 9BFF CB 27        		sla		a							;
  19+ 9C01 57           		ld		d,a							; use d for - p = delta * 2
  20+ 9C02 AF           		xor		a
  21+ 9C03              DVL4:										; counter x loop (b reg)
  22+ 9C03 CB 17        		rl		a							; a = a * 2
  23+ 9C05 38 03        		jr		c,DV8						; jump on carry
  24+ 9C07 BB           		cp		e							; var Q
  25+ 9C08 38 02        		jr		c,DV5						; skip subtraction
  26+ 9C0A              DV8:
  27+ 9C0A 9B           		sbc		a,e							; a = a - q (with carry)
  28+ 9C0B 37           		scf									;  carry gets set
  29+ 9C0C              DV5:										; skipped subtraction
  30+ 9C0C CB 12        		rl		d							; d (P hi)
  31+ 9C0E 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ 9C10              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ 9C10              ; Note we are not going to call LL28+4 but inline code here:
  34+ 9C10 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ 9C12 4F           		ld		c,a							; use c as R var
  36+ 9C13              .RollRemainder:
  37+ 9C13 CB 27        		sla		a
  38+ 9C15 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ 9C17 B8           		cp		b							; a < q?
  40+ 9C18 30 01        		jr		nc,.DontSBC
  41+ 9C1A              .DoSBC:										; a is < q
  42+ 9C1A 98           		sbc		a,b							; 	a -= q
  43+ 9C1B              .DontSBC:
  44+ 9C1B CB 11        		rl		c							; r << 1
  45+ 9C1D 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ 9C1F 79           		ld		a,c
  47+ 9C20 32 8B 7E     		ld		(varR),a					; for backwards compat
  48+ 9C23 7A           		ld		a,d
  49+ 9C24 32 8B 7D     		ld		(varP),a
  50+ 9C27 C9           		ret									; R (c) left with remainder
  51+ 9C28              .Reduce:									; a geneated a carry
  52+ 9C28 98           		sbc		a,b							; a = a - (q +1)
  53+ 9C29 37           		scf									; set carry flag for rl
  54+ 9C2A CB 11        		rl		c							; r << 1 briging in carry
  55+ 9C2C 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ 9C2E 79           		ld		a,c
  57+ 9C2F 32 8B 7E     		ld		(varR),a					; for backwards compat
  58+ 9C32 7A           		ld		a,d
  59+ 9C33 32 8B 7D     		ld		(varP),a
  60+ 9C36 C9           		ret
  61+ 9C37              .AnswerTooBig:
  62+ 9C37 0E FF        		ld		c,$FF						; arse its too big
  63+ 9C39 79           		ld		a,c
  64+ 9C3A 32 8B 7E     		ld		(varR),a					; for backwards compat
  65+ 9C3D 7A           		ld		a,d
  66+ 9C3E 32 8B 7D     		ld		(varP),a
  67+ 9C41 C9           		ret
  68+ 9C42
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1191  9C42              ;    INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm" Moved to general multiply code
1192  9C42
1193  9C42                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9C42              APequQmulA:
   2+ 9C42              asm_mult1:
   3+ 9C42              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9C42 FE 00        	cp	0
   5+ 9C44 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9C46 5F           	ld	e,a
   7+ 9C47 3A 8A 7E     	ld	a,(varQ)
   8+ 9C4A 57           	ld	d,a
   9+ 9C4B FE 00        	cp	0				; compare a
  10+ 9C4D 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9C4F AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9C50 E6 80        	and $80				; get the resultant sign and save into b
  13+ 9C52 47           	ld	b,a
  14+ 9C53 7A           	ld	a,d
  15+ 9C54 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9C56 57           	ld	d,a
  17+ 9C57 7B           	ld	a,e
  18+ 9C58 E6 7F        	and SignMask8Bit
  19+ 9C5A 5F           	ld	e,a
  20+ 9C5B ED 30        	mul					; zxn de = d * e
  21+ 9C5D 7B           	ld	a,e
  22+ 9C5E 32 8B 7D     	ld	(varP),a		; p = lo
  23+ 9C61 7A           	ld	a,d				; a = hi
  24+ 9C62 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9C63 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9C64 C9           	ret
  27+ 9C65              .mul0:
  28+ 9C65 AF           	xor	a
  29+ 9C66 32 8B 7D     	ld	(varP),a
  30+ 9C69 57           	ld	d,a
  31+ 9C6A 5F           	ld  e,a
  32+ 9C6B C9           	ret
  33+ 9C6C
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1194  9C6C                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9C6C              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9C6C              SAEquSRPlusAQ:
   3+ 9C6C              ; Calculate the following between sign-magnitude numbers:
   4+ 9C6C              ;   (S A) = (S R) + (A Q)
   5+ 9C6C              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9C6C              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9C6C              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9C6C              LL38:
   9+ 9C6C              ;	ld		d,a
  10+ 9C6C              ;	ld		a,(varQ)
  11+ 9C6C              ;	ld		e,a
  12+ 9C6C              ;	ld		a,(varS)
  13+ 9C6C              ;	ld		h,a
  14+ 9C6C              ;	ld		a,(varR)
  15+ 9C6C              ;	ld		l,a
  16+ 9C6C              ;	call	ADDHLDESignedv3
  17+ 9C6C              ;	ld		a,h
  18+ 9C6C              ;	ld		(varS),a
  19+ 9C6C              ;	ld		a,l
  20+ 9C6C              ;	ret
  21+ 9C6C              ; calculation table
  22+ 9C6C              ;   R     Q    Op            Sign calc
  23+ 9C6C              ;	10    5    Add           +    sign same add R sign
  24+ 9C6C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9C6C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9C6C              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9C6C              ;   5    10    Add           +    sign same add R sign
  28+ 9C6C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9C6C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9C6C              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9C6C
  32+ 9C6C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9C6C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9C6C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9C6C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9C6C
  37+ 9C6C
  38+ 9C6C              ; Calculate sign for Q from A and varS
  39+ 9C6C 21 8C 7E     	ld		hl,varS							;
  40+ 9C6F AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9C70 FA 7B 9C     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9C73 3A 8A 7E     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9C76 21 8B 7E     	ld		hl,varR
  44+ 9C79 86           	add		a,(hl)							; a = Q + R
  45+ 9C7A C9           	ret										; Done carry set if overflow
  46+ 9C7B              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9C7B 3A 8B 7E     	ld		a,(varR)						; a = R
  48+ 9C7E 21 8A 7E     	ld		hl,varQ                         ; Q
  49+ 9C81              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9C81              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9C81 B7          >                        or a
  51+ 9C82 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9C83 38 01            jr      c,.LL39SignCorrection
  53+ 9C85              ;--    jr      a,.LL39ResultZero
  54+ 9C85              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9C85              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9C85 C9           	ret
  57+ 9C86              .LL39SignCorrection:
  58+ 9C86 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9C88 28 0E            jr      z,.LL39ResultZero
  60+ 9C8A ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9C8C 08           	ex		af,af'							; save A temporarily
  62+ 9C8D 3A 8C 7E     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9C90 EE 80        	xor		$80							    ;
  64+ 9C92 32 8C 7E     	ld		(varS),a                        ; flip sign bit of a
  65+ 9C95 08           	ex		af,af'                          ; get back a which is the result
  66+ 9C96                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9C96 B7          >                        or a
  67+ 9C97 C9           	ret
  68+ 9C98              .LL39ResultZero:
  69+ 9C98 32 8C 7E         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9C9B                  ClearCarryFlag                          ; clear carry
  70+ 9C9B B7          >                        or a
  71+ 9C9C C9               ret
  72+ 9C9D              ;--LL39SwapSubtraction:
  73+ 9C9D              ;--	push	bc
  74+ 9C9D              ;--	ld		b,a
  75+ 9C9D              ;--	ld		a,(hl)
  76+ 9C9D              ;--	sub		b
  77+ 9C9D              ;--	pop		bc
  78+ 9C9D              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9C9D              ;--	ld		a,(varS)
  80+ 9C9D              ;--	xor		$80
  81+ 9C9D              ;--	ld		(varS),a
  82+ 9C9D              ;--	ex		af,af'
  83+ 9C9D              ;--	ret
  84+ 9C9D
  85+ 9C9D              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9C9D              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9C9D              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9C9D              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9C9D              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9C9D              ;;;;LL38:
  91+ 9C9D              ;;;;; Calculate sign for Q from A and varS
  92+ 9C9D              ;;;;	ld		hl,varS							;
  93+ 9C9D              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9C9D              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9C9D              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9C9D              ;;;;	ld		hl,varR
  97+ 9C9D              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9C9D              ;;;;	ret										; Done
  99+ 9C9D              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9C9D              ;;;;	ld		hl,varQ                         ;
 101+ 9C9D              ;;;;	ld		a,(hl)
 102+ 9C9D              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9C9D              ;;;;	ld		a,(varR)						;
 104+ 9C9D              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9C9D              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9C9D              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9C9D              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9C9D              ;;;;	ret
 109+ 9C9D              ;;;;.SignCorrection:
 110+ 9C9D              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9C9D              ;;;;	ex		af,af'							; save A temporarily
 112+ 9C9D              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9C9D              ;;;;	xor		$80							    ;
 114+ 9C9D              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9C9D              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9C9D              ;;;;	ret
 117+ 9C9D              ;;;;LL39Sub16Bit:
 118+ 9C9D              ;;;;	ld		e,a
 119+ 9C9D              ;;;;	ld		d,0
 120+ 9C9D              ;;;;	ld		a,(varR)
 121+ 9C9D              ;;;;	ld		l,a
 122+ 9C9D              ;;;;	ld		h,0
 123+ 9C9D              ;;;;	ClearCarryFlag
 124+ 9C9D              ;;;;	sbc		hl,de
 125+ 9C9D              ;;;;	jr		c,.SignCorrection16bit
 126+ 9C9D              ;;;;	bit		7,h
 127+ 9C9D              ;;;;	jr		z,.GoodToReturn
 128+ 9C9D              ;;;;.Needtonegate:
 129+ 9C9D              ;;;;	macronegate16hl
 130+ 9C9D              ;;;;.GoodToReturn
 131+ 9C9D              ;;;;	ld		a,l
 132+ 9C9D              ;;;;	or		a
 133+ 9C9D              ;;;;	ret
 134+ 9C9D              ;;;;.SignCorrection16bit:
 135+ 9C9D              ;;;;	macronegate16hl
 136+ 9C9D              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9C9D              ;;;;	xor		$80							    ;
 138+ 9C9D              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9C9D              ;;;;	ld		a,l
 140+ 9C9D              ;;;;	ret
 141+ 9C9D
 142+ 9C9D
# file closed: ./Maths/Utilities/badd_ll38.asm
1195  9C9D              ;;DEFUNCT    INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
1196  9C9D
1197  9C9D                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ 9C9D              ;;;LL28:
   2+ 9C9D              ;;;    ld      c,a                         ;
   3+ 9C9D              ;;;    ld      a,(varQ)                    ;
   4+ 9C9D              ;;;    ld      b,a                         ;
   5+ 9C9D              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ 9C9D              ;;;RequAmul256divB:                        ;
   7+ 9C9D              ;;;LL28Breg:
   8+ 9C9D              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ 9C9D              ;;;	cp		b							; Check A >= Q
  10+ 9C9D              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ 9C9D              ;;;.CalcRemainder:
  12+ 9C9D              ;;;	ld		c, 	$FE						; set R to $FE
  13+ 9C9D              ;;;.RollRemainder:
  14+ 9C9D              ;;;	sla		a
  15+ 9C9D              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ 9C9D              ;;;	cp		b							; a < q?
  17+ 9C9D              ;;;	jr		nc,.DontSBC
  18+ 9C9D              ;;;.DoSBC:									; a is < q
  19+ 9C9D              ;;;	sbc		a,b							; 	a -= q
  20+ 9C9D              ;;;.DontSBC:
  21+ 9C9D              ;;;	rl		c							; r << 1
  22+ 9C9D              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ 9C9D              ;;;    ld      a,c
  24+ 9C9D              ;;;    ld      (varR),a
  25+ 9C9D              ;;;	ret									; R (c) left with remainder
  26+ 9C9D              ;;;.Reduce:								; a geneated a carry
  27+ 9C9D              ;;;	sbc		a,b							; a = a - (q +1)
  28+ 9C9D              ;;;	scf									; set carry flag for rl
  29+ 9C9D              ;;;	rl		c							; r << 1 briging in carry
  30+ 9C9D              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ 9C9D              ;;;    ld      a,c
  32+ 9C9D              ;;;    ld      (varR),a
  33+ 9C9D              ;;;	ret
  34+ 9C9D              ;;;.AnswerTooBig:
  35+ 9C9D              ;;;	ld	    c,$FF							; arse its too big
  36+ 9C9D              ;;;    ld      a,c
  37+ 9C9D              ;;;    ld      (varR),a
  38+ 9C9D              ;;;	ret
  39+ 9C9D
  40+ 9C9D              BCequAmul256DivC:
  41+ 9C9D 59             ld    e,c
  42+ 9C9E 67             ld    h,a
  43+ 9C9F 2E 00          ld    l,0
  44+ 9CA1              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ 9CA1 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ 9CA2 B7             or a                                   ; from this time on the carry is cleared
  47+ 9CA3 C8             ret z
  48+ 9CA4 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ 9CA7 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ 9CA9              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ 9CA9 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ 9CAB 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ 9CAC 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ 9CAE C9             ret
  55+ 9CAF
  56+ 9CAF              HL_Div_C:
  57+ 9CAF              ; Integer divides HL by C
  58+ 9CAF              ; Result in HL, remainder in A
  59+ 9CAF              ; Clobbers F, B
  60+ 9CAF 06 10                ld b,16
  61+ 9CB1 AF                   xor a
  62+ 9CB2              HL_Div_C_Loop:
  63+ 9CB2 29                   add hl,hl
  64+ 9CB3 17                   rla
  65+ 9CB4 B9                   cp c
  66+ 9CB5 38 02                jr c,HL_DivC_Skip
  67+ 9CB7 91                   sub c
  68+ 9CB8 2C                   inc l
  69+ 9CB9              HL_DivC_Skip:
  70+ 9CB9 10 F7                djnz HL_Div_C_Loop
  71+ 9CBB 7D                   ld   a,l
  72+ 9CBC 32 8B 7E             ld  (varR),a
  73+ 9CBF C9                   ret
  74+ 9CC0
  75+ 9CC0
  76+ 9CC0
  77+ 9CC0              ; Entry point if varQ is populated with demoninator
  78+ 9CC0              RequAmul256divQ:
  79+ 9CC0              BFRDIV:
  80+ 9CC0 F5           		push	af
  81+ 9CC1 3A 8A 7E     		ld		a,(varQ)
  82+ 9CC4 4F           		ld		c,a
  83+ 9CC5 F1           		pop		af
  84+ 9CC6 FE 00        		cp		0
  85+ 9CC8 CA DF 9C     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ 9CCB              RequAmul256divC:
  87+ 9CCB 2E 00        		ld		l,0
  88+ 9CCD 67           		ld		h,a
  89+ 9CCE              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ 9CCE 06 10        		ld b,16
  91+ 9CD0 AF           		xor a
  92+ 9CD1              LOOPPOINT:
  93+ 9CD1 29           		add hl,hl
  94+ 9CD2 17           		rla
  95+ 9CD3 B9           		cp c
  96+ 9CD4 38 02        		jr c,SKIPINCSUB
  97+ 9CD6 2C           		inc l
  98+ 9CD7 91           		sub c
  99+ 9CD8              SKIPINCSUB:
 100+ 9CD8 10 F7        		djnz LOOPPOINT
 101+ 9CDA 7D           		ld		a,l
 102+ 9CDB 32 8B 7E     		ld 		(varR),a
 103+ 9CDE C9           		ret
 104+ 9CDF              HLDIVC_0_BY:
 105+ 9CDF 32 8B 7E     		ld		(varR),a
 106+ 9CE2 C9           		ret
 107+ 9CE3              ;	push	af
 108+ 9CE3              ;	ld		a,b
 109+ 9CE3              ;	ld		(varQ),a
 110+ 9CE3              ;	pop		af
 111+ 9CE3              ;RequAmul256divQ:
 112+ 9CE3              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ 9CE3              ;	ld		hl,varQ
 114+ 9CE3              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ 9CE3              ;	ld		b,$FE						; b = X
 116+ 9CE3              ;	ld		c,a							; c = R	div roll counter
 117+ 9CE3              ;LL31:									; roll R
 118+ 9CE3              ;	sla		a
 119+ 9CE3              ;	jr		c,LL29						; hop to Reduce
 120+ 9CE3              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ 9CE3              ;	sbc		a,(hl)						; a = a - Q
 122+ 9CE3              ;	rl		c							; rotate R left
 123+ 9CE3              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ 9CE3              ;	jr		LL2Good
 125+ 9CE3              ;LL29:									; Reduce
 126+ 9CE3              ;	sbc		a,(hl)
 127+ 9CE3              ;	scf
 128+ 9CE3              ;	rl		c							; roll a carry flag into R
 129+ 9CE3              ;	jr		c,LL31						;  loop R
 130+ 9CE3              ;	jr		LL2Good
 131+ 9CE3              ;LL2:
 132+ 9CE3              ;	ld		c,$FF
 133+ 9CE3              ;LL2Good:
 134+ 9CE3              ;	ld		a,c
 135+ 9CE3              ;	ld		(varR),a
 136+ 9CE3              ;	ret
 137+ 9CE3
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1198  9CE3                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ 9CE3              RequAdivQ:
   2+ 9CE3              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ 9CE3              LL61:										; Handling division R=A/Q for case further down
   4+ 9CE3 4F           	ld		c,a								; c = A
   5+ 9CE4 3A 8A 7E     	ld		a,(varQ)						; test for divide by 0
   6+ 9CE7 FE 00        	cp		0
   7+ 9CE9 28 16        	jr		z,LL84							; divide by zero error
   8+ 9CEB 57           	ld		d,a								; now we can do C/D
   9+ 9CEC 06 08            ld b,8
  10+ 9CEE AF               xor a
  11+ 9CEF              LL63:										; roll divide loop
  12+ 9CEF CB 21            sla c
  13+ 9CF1 17               rla
  14+ 9CF2 BA               cp d
  15+ 9CF3 38 02            jr c,LL64
  16+ 9CF5 0C               inc c
  17+ 9CF6 92               sub d
  18+ 9CF7              LL64:
  19+ 9CF7 10 F6            djnz LL63
  20+ 9CF9 32 89 7E     	ld	(varU),a							; store remainder in U
  21+ 9CFC 79           	ld	a,c
  22+ 9CFD 32 8B 7E     	ld	(varR),a							; store remainder in R
  23+ 9D00 C9               ret
  24+ 9D01              LL84:										; div error  R=U=#5
  25+ 9D01 3E 32        	ld		a,50
  26+ 9D03 32 8B 7E     	ld		(varR),a
  27+ 9D06 32 89 7E     	ld		(varU),a
  28+ 9D09 C9           	ret
  29+ 9D0A
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1199  9D0A                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ 9D0A              asm_mult12:
   2+ 9D0A              RSequQmulA:
   3+ 9D0A              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ 9D0A CD 42 9C     	call APequQmulA
   5+ 9D0D 08           	ex 	af,af'
   6+ 9D0E 7A           	ld	a,d
   7+ 9D0F 32 8C 7E     	ld	(varS),a
   8+ 9D12 7B           	ld	a,e
   9+ 9D13 32 8B 7E     	ld	(varR),a
  10+ 9D16 08           	ex 	af,af'
  11+ 9D17 C9           	ret
  12+ 9D18
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1200  9D18
1201  9D18                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ./Universe/Ships/CopyRotMattoXX15.asm
   1+ 9D18              CopyRotMatNoseVtoXX15:
   2+ 9D18                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 9D18 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 9D1B 32 A6 C0    >                        ld       (XX15VecX),a
   3+ 9D1E                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 9D1E 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 9D21 32 A7 C0    >                        ld       (XX15VecY),a
   4+ 9D24                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 9D24 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 9D27 32 A8 C0    >                        ld       (XX15VecZ),a
   5+ 9D2A C9                   ret
   6+ 9D2B
   7+ 9D2B              CopyRotMatRoofVtoXX15:
   8+ 9D2B                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 9D2B 3A 30 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 9D2E 32 A6 C0    >                        ld       (XX15VecX),a
   9+ 9D31                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 9D31 3A 32 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 9D34 32 A7 C0    >                        ld       (XX15VecY),a
  10+ 9D37                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 9D37 3A 34 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 9D3A 32 A8 C0    >                        ld       (XX15VecZ),a
  11+ 9D3D C9                   ret
  12+ 9D3E
  13+ 9D3E              CopyRotMatSideVtoXX15:
  14+ 9D3E                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 9D3E 3A 2A C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 9D41 32 A6 C0    >                        ld       (XX15VecX),a
  15+ 9D44                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 9D44 3A 2C C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 9D47 32 A7 C0    >                        ld       (XX15VecY),a
  16+ 9D4A                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 9D4A 3A 2E C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 9D4D 32 A8 C0    >                        ld       (XX15VecZ),a
  17+ 9D50 C9                   ret
  18+ 9D51
# file closed: ./Universe/Ships/CopyRotMattoXX15.asm
1202  9D51                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ./Universe/Ships/CopyXX15toRotMat.asm
   1+ 9D51              CopyXX15toRotMatNoseV:
   2+ 9D51                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 9D51 3A A6 C0    >                        ld       a,(XX15VecX)
   2+ 9D54 32 36 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 9D57                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 9D57 3A A7 C0    >                        ld       a,(XX15VecY)
   3+ 9D5A 32 38 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 9D5D                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 9D5D 3A A8 C0    >                        ld       a,(XX15VecZ)
   4+ 9D60 32 3A C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 9D63                      ZeroA
   5+ 9D63 AF          >                        xor a
   6+ 9D64 32 35 C0             ld  (UBnkrotmatNosevX),a
   7+ 9D67 32 37 C0             ld  (UBnkrotmatNosevY),a
   8+ 9D6A 32 39 C0             ld  (UBnkrotmatNosevZ),a
   9+ 9D6D C9                   ret
  10+ 9D6E
  11+ 9D6E              CopyXX15toRotMatRoofV:
  12+ 9D6E                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 9D6E 3A A6 C0    >                        ld       a,(XX15VecX)
  12+ 9D71 32 30 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 9D74                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 9D74 3A A7 C0    >                        ld       a,(XX15VecY)
  13+ 9D77 32 32 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 9D7A                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 9D7A 3A A8 C0    >                        ld       a,(XX15VecZ)
  14+ 9D7D 32 34 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 9D80                      ZeroA
  15+ 9D80 AF          >                        xor a
  16+ 9D81 32 2F C0             ld  (UBnkrotmatRoofvX),a
  17+ 9D84 32 31 C0             ld  (UBnkrotmatRoofvY),a
  18+ 9D87 32 33 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 9D8A C9                   ret
  20+ 9D8B
  21+ 9D8B              CopyXX15toRotMatSideV:
  22+ 9D8B                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 9D8B 3A A6 C0    >                        ld       a,(XX15VecX)
  22+ 9D8E 32 2A C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 9D91                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 9D91 3A A7 C0    >                        ld       a,(XX15VecY)
  23+ 9D94 32 2C C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 9D97                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 9D97 3A A8 C0    >                        ld       a,(XX15VecZ)
  24+ 9D9A 32 2E C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 9D9D                      ZeroA
  25+ 9D9D AF          >                        xor a
  26+ 9D9E 32 29 C0             ld  (UBnkrotmatSidevX),a
  27+ 9DA1 32 2B C0             ld  (UBnkrotmatSidevY),a
  28+ 9DA4 32 2D C0             ld  (UBnkrotmatSidevZ),a
  29+ 9DA7 C9                   ret
  30+ 9DA8
# file closed: ./Universe/Ships/CopyXX15toRotMat.asm
1203  9DA8                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ 9DA8              ;rotmap0xLo: DB	0				; INWK +9
   2+ 9DA8              ;rotmap0xHi: DB	0				; INWK +10
   3+ 9DA8              ;rotmat0yLo: DB	0				; INWK +11
   4+ 9DA8              ;rotmat0yHi: DB	0				; INWK +12
   5+ 9DA8              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ 9DA8              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ 9DA8              ;rotmap1xLo: DB	0				; INWK +15
   8+ 9DA8              ;rotmap1xHi:	DB	0				; INWK +16
   9+ 9DA8              ;rotmat1yLo:	DB	0				; INWK +17
  10+ 9DA8              ;rotmat1yHi:	DB	0				; INWK +18
  11+ 9DA8              ;rotmat1zLo:	DB	0				; INWK +19
  12+ 9DA8              ;rotmat1zHi:	DB	0				; INWK +20
  13+ 9DA8              ;rotmat2xLo: DB	0				; INWK +21
  14+ 9DA8              ;rotmat2xHi:	DB	0				; INWK +22
  15+ 9DA8              ;rotmat2yLo:	DB	0				; INWK +23
  16+ 9DA8              ;rotmat2yHi:	DB	0				; INWK +24
  17+ 9DA8              ;rotmat2zLo:	DB	0				; INWK +25
  18+ 9DA8              ;rotmat2zHi:	DB	0				; INWK +26
  19+ 9DA8              ;
  20+ 9DA8              ;rotmatFx	equ	rotmat0xHi
  21+ 9DA8              ;rotmatFy	equ	rotmat0yHi
  22+ 9DA8              ;rotmatFz	equ	rotmat0zHi
  23+ 9DA8              ;rotmatUx	equ	rotmat1xHi
  24+ 9DA8              ;rotmatUy	equ	rotmat1yHi
  25+ 9DA8              ;rotmatUz	equ	rotmat1zHi
  26+ 9DA8              ;
  27+ 9DA8              ;inwkarray			equ		INWK+10
  28+ 9DA8
  29+ 9DA8
  30+ 9DA8
  31+ 9DA8
  32+ 9DA8              ; Divide that sets value to FFFF if divide by 0 unless main value is 0, then 0
  33+ 9DA8
  34+ 9DA8              ; (P+1 A) = (A P) / Q
  35+ 9DA8              ;  B A    = (A P) / Q
  36+ 9DA8              ; TESTED OK
  37+ 9DA8
  38+ 9DA8
  39+ 9DA8 2A A6 C0     NormalizeXX15:          ld      hl, (XX15VecX)              ; h= VecX, l = VecY
  40+ 9DAB 3A A8 C0                             ld      a,  (XX15VecZ)              ; a = VecZ, d we don't care
  41+ 9DAE E6 7F        .ABSZ:                  and     SignMask8Bit
  42+ 9DB0 FD 67                                ld      iyh,a                       ; iyh = abs z
  43+ 9DB2 57           .ZSquared:              ld      d,a
  44+ 9DB3 5F                                   ld      e,a
  45+ 9DB4 ED 30                                mul     de
  46+ 9DB6 42 4B                                ld      bc,de                       ; bc = z squared
  47+ 9DB8 7D           .ABSX:                  ld      a,l
  48+ 9DB9 E6 7F        .XSquared:              and     SignMask8Bit
  49+ 9DBB DD 67                                ld      ixh,a                       ; ixh = abs x
  50+ 9DBD 57                                   ld      d,a
  51+ 9DBE 5F                                   ld      e,a
  52+ 9DBF ED 30                                mul     de
  53+ 9DC1 EB                                   ex      de,hl                       ; hl = x squared
  54+ 9DC2 7A           .ABSY:                  ld      a,d                         ; as h was swapped into d
  55+ 9DC3 E6 7F                                and     SignMask8Bit
  56+ 9DC5 DD 6F                                ld      ixl,a                       ; ixl = abs y
  57+ 9DC7 5F           .YSquared:              ld      e,a
  58+ 9DC8 57                                   ld      d,a
  59+ 9DC9 ED 30                                mul     de                          ; de = y squared
  60+ 9DCB 19                                   add     hl,de                       ; hl = hl + de + bc
  61+ 9DCC 09                                   add     hl,bc                       ;
  62+ 9DCD EB                                   ex      de,hl
  63+ 9DCE CD 94 92                             call    asm_sqrt                    ; d = iyl =hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
  64+ 9DD1 55                                   ld      d,l
  65+ 9DD2 FD 6A                                ld      iyl,d
  66+ 9DD4 DD 7C        .NormaliseX:            ld      a,ixh                       ; normalise x
  67+ 9DD6 CD 8E 9B                             call    AequAdivDmul967Bit
  68+ 9DD9 57                                   ld      d,a
  69+ 9DDA 3A A6 C0                             ld      a,(XX15VecX)
  70+ 9DDD E6 80                                and     SignOnly8Bit
  71+ 9DDF B2                                   or      d
  72+ 9DE0 32 A6 C0                             ld      (XX15VecX),a
  73+ 9DE3 DD 7D        .NormaliseY:            ld      a,ixl                       ; normalise y
  74+ 9DE5 55                                   ld      d,l
  75+ 9DE6 CD 8E 9B                             call    AequAdivDmul967Bit
  76+ 9DE9 57                                   ld      d,a
  77+ 9DEA 3A A7 C0                             ld      a,(XX15VecY)
  78+ 9DED E6 80                                and     SignOnly8Bit
  79+ 9DEF B2                                   or      d
  80+ 9DF0 32 A7 C0                             ld      (XX15VecY),a
  81+ 9DF3 FD 7C        .NormaliseZ:            ld      a,iyh                       ; normalise z
  82+ 9DF5 55                                   ld      d,l
  83+ 9DF6 CD 8E 9B                             call    AequAdivDmul967Bit
  84+ 9DF9 57                                   ld      d,a
  85+ 9DFA 3A A8 C0                             ld      a,(XX15VecZ)
  86+ 9DFD E6 80                                and     SignOnly8Bit
  87+ 9DFF B2                                   or      d
  88+ 9E00 32 A8 C0                             ld      (XX15VecZ),a
  89+ 9E03 C9                                   ret
  90+ 9E04
  91+ 9E04              TidyNormaliseNoseV:     MACRO
  92+ 9E04 ~                                    call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
  93+ 9E04 ~                                    call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
  94+ 9E04 ~                                    call	CopyXX15toRotMatNoseV       ; .
  95+ 9E04                                      ENDM
  96+ 9E04              TidyNormaliseRoofV:     MACRO
  97+ 9E04 ~                                    call	CopyRotMatRoofVtoXX15
  98+ 9E04 ~                                    call	NormalizeXX15			; normalise z hi, its really TIS3
  99+ 9E04 ~                                    call	CopyXX15toRotMatRoofV
 100+ 9E04                                      ENDM
 101+ 9E04
 102+ 9E04
 103+ 9E04              TidyUbnK:               ;break
 104+ 9E04                                      TidyNormaliseNoseV
 104+ 9E04 CD 18 9D    >                        call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
 104+ 9E07 CD A8 9D    >                        call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
 104+ 9E0A CD 51 9D    >                        call	CopyXX15toRotMatNoseV       ; .
 105+ 9E0D 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)      ; Now check and see which vector elemetn we are going to
 106+ 9E10 E6 60                                and     %01100000                   ; if X is not small then we go straigth to roofx
 107+ 9E12 C2 AA 9E                             jp      nz,.ProcessRoofX            ; .
 108+ 9E15 3A 38 C0     .TidyXIsSmall:          ld      a,(UBnkrotmatNosevY+1)      ; Else we test Y on to using
 109+ 9E18 E6 60                                and     %01100000                   ; if Y is not small we process roofz
 110+ 9E1A 20 47                                jr      nz,.ProcessRoofZ            ; .
 111+ 9E1C              ;...roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 112+ 9E1C 3A 36 C0     .ProcessRoofY:          ld		a,(UBnkrotmatNosevX+1)
 113+ 9E1F 32 8A 7E                             ld		(varQ),a					; q = nosev_y
 114+ 9E22 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 115+ 9E25 CD 0A 9D                             call	RSequQmulA
 116+ 9E28 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 117+ 9E2B 32 8A 7E                             ld		(varQ),a					; b = regX for now
 118+ 9E2E 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 119+ 9E31 CD 09 91                             call	madDEequQmulAaddRS
 120+ 9E34 7A                                   ld      a,d                         ; flip sign bit
 121+ 9E35 EE 80                                xor     SignOnly8Bit
 122+ 9E37 57                                   ld      d,a
 123+ 9E38 3A 38 C0                             ld      a,(UBnkrotmatNosevY+1)
 124+ 9E3B 32 8A 7E                             ld      (varQ),a
 125+ 9E3E 7A           .YTest0Div:             ld      a,d
 126+ 9E3F E6 7F                                and     $7F
 127+ 9E41 B3                                   or      e
 128+ 9E42 FE 00                                cp      0
 129+ 9E44 20 0E                                jr      nz,.SkipYZeroTest
 130+ 9E46                                      ZeroA
 130+ 9E46 AF          >                        xor a
 131+ 9E47 C3 A4 9E                             jp      .SetRoofZ
 132+ 9E4A FE 00        .YTestDiv0:             cp      0
 133+ 9E4C 20 06                                jr      nz,.SkipYZeroTest
 134+ 9E4E 3E 60        .YDivideByZero:         ld      a,96
 135+ 9E50 B2                                   or      d
 136+ 9E51 C3 A4 9E                             jp      .SetRoofZ
 137+ 9E54 7B           .SkipYZeroTest:         ld      a,e
 138+ 9E55 32 8B 7D                             ld      (varP),a
 139+ 9E58 7A                                   ld      a,d
 140+ 9E59 CD 96 94                             call    DVIDT
 141+ 9E5C 78                                   ld      a,b
 142+ 9E5D 32 32 C0     .SetRoofY:              ld      (UBnkrotmatRoofvY+1),a
 143+ 9E60 C3 EE 9E                             jp      .DoneRoof
 144+ 9E63              ;...roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 145+ 9E63 3A 36 C0     .ProcessRoofZ:          ld		a,(UBnkrotmatNosevX+1)      ; Failing that we default to Z
 146+ 9E66 32 8A 7E                             ld		(varQ),a				    ; q = nosev_y
 147+ 9E69 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 148+ 9E6C CD 0A 9D                             call	RSequQmulA
 149+ 9E6F 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)	    ; nosev z
 150+ 9E72 32 8A 7E                             ld		(varQ),a				    ; b = regX for now
 151+ 9E75 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 152+ 9E78 CD 09 91                             call	madDEequQmulAaddRS
 153+ 9E7B 7A                                   ld      a,d                         ; flip sign bit
 154+ 9E7C EE 80                                xor     SignOnly8Bit
 155+ 9E7E 57                                   ld      d,a
 156+ 9E7F 3A 3A C0                             ld      a,(UBnkrotmatNosevZ+1)
 157+ 9E82 32 8A 7E                             ld      (varQ),a
 158+ 9E85 7A           .ZTest0Div:             ld      a,d
 159+ 9E86 E6 7F                                and     $7F
 160+ 9E88 B3                                   or      e
 161+ 9E89 FE 00                                cp      0
 162+ 9E8B 20 0E                                jr      nz,.SkipZZeroTest
 163+ 9E8D                                      ZeroA
 163+ 9E8D AF          >                        xor a
 164+ 9E8E C3 A4 9E                             jp      .SetRoofZ
 165+ 9E91 FE 00        .ZTestDiv0:             cp      0
 166+ 9E93 20 06                                jr      nz,.SkipZZeroTest
 167+ 9E95 3E 60        .ZDivideByZero:         ld      a,96
 168+ 9E97 B2                                   or      d
 169+ 9E98 C3 A4 9E                             jp      .SetRoofZ
 170+ 9E9B 7B           .SkipZZeroTest:         ld      a,e
 171+ 9E9C 32 8B 7D                             ld      (varP),a
 172+ 9E9F 7A                                   ld      a,d
 173+ 9EA0 CD 96 94                             call    DVIDT
 174+ 9EA3 78                                   ld      a,b
 175+ 9EA4 32 34 C0     .SetRoofZ:              ld      (UBnkrotmatRoofvZ+1),a
 176+ 9EA7 C3 EE 9E                             jp      .DoneRoof
 177+ 9EAA              ;...roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 178+ 9EAA 3A 38 C0     .ProcessRoofX:          ld		a,(UBnkrotmatNosevY+1)      ; so we set Q to Nose Y
 179+ 9EAD 32 8A 7E                             ld		(varQ),a					; q = nosev_y
 180+ 9EB0 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; A = roofv Y
 181+ 9EB3 CD 0A 9D                             call	RSequQmulA                  ; RS = NoseY & RoofY
 182+ 9EB6 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 183+ 9EB9 32 8A 7E                             ld		(varQ),a					; b = regX for now
 184+ 9EBC 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 185+ 9EBF CD 09 91                             call	madDEequQmulAaddRS
 186+ 9EC2 7A                                   ld      a,d                         ; flip sign bit
 187+ 9EC3 EE 80                                xor     SignOnly8Bit
 188+ 9EC5 57                                   ld      d,a
 189+ 9EC6 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)
 190+ 9EC9 32 8A 7E                             ld      (varQ),a
 191+ 9ECC 7A           .XTest0Div:             ld      a,d
 192+ 9ECD E6 7F                                and     $7F
 193+ 9ECF B3                                   or      e
 194+ 9ED0 FE 00                                cp      0
 195+ 9ED2 20 0E                                jr      nz,.SkipXZeroTest
 196+ 9ED4                                      ZeroA
 196+ 9ED4 AF          >                        xor a
 197+ 9ED5 C3 A4 9E                             jp      .SetRoofZ
 198+ 9ED8 FE 00        .XTestDiv0:             cp      0
 199+ 9EDA 20 06                                jr      nz,.SkipXZeroTest
 200+ 9EDC 3E 60        .XDivideByZero:         ld      a,96
 201+ 9EDE B2                                   or      d
 202+ 9EDF C3 EB 9E                             jp      .SetRoofX
 203+ 9EE2 7B           .SkipXZeroTest:         ld      a,e
 204+ 9EE3 32 8B 7D                             ld      (varP),a
 205+ 9EE6 7A                                   ld      a,d
 206+ 9EE7 CD 96 94                             call    DVIDT
 207+ 9EEA 78                                   ld      a,b
 208+ 9EEB 32 30 C0     .SetRoofX:              ld      (UBnkrotmatRoofvX+1),a
 209+ 9EEE              .DoneRoof:              TidyNormaliseRoofV
 209+ 9EEE CD 2B 9D    >                        call	CopyRotMatRoofVtoXX15
 209+ 9EF1 CD A8 9D    >                        call	NormalizeXX15			; normalise z hi, its really TIS3
 209+ 9EF4 CD 6E 9D    >                        call	CopyXX15toRotMatRoofV
 210+ 9EF7              ;...sidex = ((nosez * roofy) - nosey * roofz) / 96
 211+ 9EF7 3A 3A C0     .DoSidevX:              ld		a,(UBnkrotmatNosevZ+1)      ;  -(-nosev_z * roofv_y + nosev_y * roofv_z) / 96
 212+ 9EFA EE 80                                xor     SignOnly8Bit
 213+ 9EFC 32 8A 7E                             ld		(varQ),a					; q = nosev_y
 214+ 9EFF 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	     ;roov z
 215+ 9F02 CD 0A 9D                             call	RSequQmulA
 216+ 9F05 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)		; nosev z
 217+ 9F08 32 8A 7E                             ld		(varQ),a							; b = regX for now
 218+ 9F0B 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 219+ 9F0E CD 09 91                             call	madDEequQmulAaddRS
 220+ 9F11 CD DE 94                             call    BAequDEdiv96
 221+ 9F14 78                                   ld      a,b
 222+ 9F15 32 2A C0                             ld      (UBnkrotmatSidevX+1),a
 223+ 9F18              ;...sidey = ((nosex * roofz) - nosez * roofx) / 96
 224+ 9F18 3A 36 C0     .DoSidevY:              ld		a,(UBnkrotmatNosevX+1)      ; -(-nosev_x * roofv_z - nosev_z * roofv_x) / 96
 225+ 9F1B EE 80                                xor     SignOnly8Bit
 226+ 9F1D 32 8A 7E                             ld		(varQ),a					; q = nosev_y
 227+ 9F20 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roov z
 228+ 9F23 CD 0A 9D                             call	RSequQmulA                  ; rs = nosex * roofz
 229+ 9F26 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 230+ 9F29 32 8A 7E                             ld		(varQ),a					; b = regX for now
 231+ 9F2C 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 232+ 9F2F CD 09 91                             call	madDEequQmulAaddRS          ; DE = noseyz* roofz +
 233+ 9F32 CD DE 94                             call    BAequDEdiv96
 234+ 9F35 78                                   ld      a,b
 235+ 9F36 32 2C C0                             ld      (UBnkrotmatSidevY+1),a         ;-(-nosev_y * roofv_x + nosev_x * roofv_y) / 96
 236+ 9F39              ;...sidez = ((nosey * roofx) - nosex * roofy) / 96
 237+ 9F39 3A 38 C0     .DoSidevZ:              ld		a,(UBnkrotmatNosevY+1)      ;
 238+ 9F3C EE 80                                xor     SignOnly8Bit
 239+ 9F3E 32 8A 7E                             ld		(varQ),a					; q = nosev_y
 240+ 9F41 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 241+ 9F44 CD 0A 9D                             call	RSequQmulA
 242+ 9F47 3A 36 C0                             ld		a,(UBnkrotmatNosevX+1)		; nosev z
 243+ 9F4A 32 8A 7E                             ld		(varQ),a							; b = regX for now
 244+ 9F4D 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 245+ 9F50 CD 09 91                             call	madDEequQmulAaddRS
 246+ 9F53 CD DE 94                             call    BAequDEdiv96
 247+ 9F56 78                                   ld      a,b
 248+ 9F57 32 2E C0                             ld      (UBnkrotmatSidevZ+1),a
 249+ 9F5A                                      ZeroA
 249+ 9F5A AF          >                        xor a
 250+ 9F5B 32 29 C0                             ld      (UBnkrotmatSidevX),a
 251+ 9F5E 32 2B C0                             ld      (UBnkrotmatSidevY),a
 252+ 9F61 32 2D C0                             ld      (UBnkrotmatSidevZ),a
 253+ 9F64 C9                                   ret
 254+ 9F65
 255+ 9F65
 256+ 9F65              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 257+ 9F65              		; b = regX on entry
 258+ 9F65              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
 259+ 9F65 08           		ex		af,af'
 260+ 9F66 78           		ld		a,b
 261+ 9F67 32 8A 7E     		ld		(varQ),a
 262+ 9F6A 08           		ex		af,af'
 263+ 9F6B EE 80        		xor		$80							;	 flip sign of Acc
 264+ 9F6D CD E7 90     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
 265+ 9F70              ; USES 				A BC E
 266+ 9F70              ; DOES NOT USE		D HL
 267+ 9F70              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
 268+ 9F70 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
 269+ 9F71 E6 80        		and		SignOnly8Bit						; ..
 270+ 9F73 5F           		ld		e,a							; ..
 271+ 9F74 79           		ld		a,c							; a = high byte again with sign bit cleared
 272+ 9F75 E6 7F        		and		SignMask8Bit							; ..
 273+ 9F77 06 FE        		ld		b,$FE						; slide counter T1
 274+ 9F79              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
 275+ 9F79 CB 27        		sla		a
 276+ 9F7B              		JumpIfALTNusng $60, TIS1SkipSub
 276+ 9F7B FE 60       >                        cp      $60
 276+ 9F7D DA 8A 9F    >                        jp		c, TIS1SkipSub
 277+ 9F80 DE 60        		sbc		a,$60							; subtract 96
 278+ 9F82 37           		scf
 279+ 9F83 CB 10        		rl		b							;  T1
 280+ 9F85 38 F2        		jr		c,TIS1RollTLoop
 281+ 9F87              TIS1KIPCont:
 282+ 9F87 78           		ld		a,b							;   T1
 283+ 9F88 B3           		or		e							;   restore T sign
 284+ 9F89 C9           		ret
 285+ 9F8A              TIS1SkipSub:
 286+ 9F8A B7           	or			a
 287+ 9F8B CB 10        	rl			b							; T rolled left to push bit out the end
 288+ 9F8D 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
 289+ 9F8F C3 87 9F     	jp			TIS1KIPCont
 290+ 9F92
 291+ 9F92              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
 292+ 9F92              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
 293+ 9F92
 294+ 9F92
 295+ 9F92
 296+ 9F92
 297+ 9F92                          DISPLAY "TODO: look at note on TODO"
 298+ 9F92              TidyRotYSmall:
 299+ 9F92 CD BB A0     		call	CalcRoofvZ
 300+ 9F95 32 34 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
 301+ 9F98 C3 CC 9F     		jp		NormaliseRoofV
 302+ 9F9B
 303+ 9F9B              TidyRotXSmall:
 304+ 9F9B AF           		xor		a
 305+ 9F9C 47           		ld		b,a
 306+ 9F9D 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
 307+ 9FA0 E6 60        		and		%01100000
 308+ 9FA2 CA 92 9F     		jp		z,TidyRotYSmall
 309+ 9FA5 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 310+ 9FA8 47           		ld		b,a							; b = regX for now
 311+ 9FA9 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 312+ 9FAC CD 81 A0     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
 313+ 9FAF 32 32 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
 314+ 9FB2 C3 CC 9F     		jp		NormaliseRoofV
 315+ 9FB5              ; TIDY is broken
 316+ 9FB5
 317+ 9FB5
 318+ 9FB5              TIDY:
 319+ 9FB5
 320+ 9FB5              ORTHOGALISE:
 321+ 9FB5              ;-- NormaliseNosev
 322+ 9FB5 CD 18 9D     		call	CopyRotMatNoseVtoXX15
 323+ 9FB8 CD CB 99     		call	normaliseXX1596S7			; normalise z hi, its really TIS3
 324+ 9FBB CD 51 9D     		call	CopyXX15toRotMatNoseV
 325+ 9FBE              .CheckNXSmall:
 326+ 9FBE 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 327+ 9FC1 E6 60        		and		%01100000					; check top two magnitude bits
 328+ 9FC3 CA 9B 9F     		jp		z,TidyRotXSmall
 329+ 9FC6              .RotXIsBig:
 330+ 9FC6 CD 47 A0             call	CalcRoofvX
 331+ 9FC9 32 30 C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 332+ 9FCC              NormaliseRoofV:
 333+ 9FCC CD 2B 9D     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 334+ 9FCF CD CB 99     		call	normaliseXX1596S7			; normalise roof
 335+ 9FD2              ;calc sidev x
 336+ 9FD2 CD 6E 9D     		call	CopyXX15toRotMatRoofV		; get back normalised version
 337+ 9FD5 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 338+ 9FD8 32 8A 7E     		ld		(varQ),a					; q = nosev_y
 339+ 9FDB 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 340+ 9FDE CD 0A 9D     		call	RSequQmulA
 341+ 9FE1 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 342+ 9FE4 47           		ld		b,a							; b = regX for now
 343+ 9FE5 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 344+ 9FE8 CD 65 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 345+ 9FEB                      JumpIfAIsZero NormSideXNoNeg
 345+ 9FEB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 345+ 9FEC CA F1 9F    >                        jp	    z, NormSideXNoNeg
 346+ 9FEF EE 80        		xor		$80							; flip a to get -sidev_x
 347+ 9FF1              NormSideXNoNeg:
 348+ 9FF1 32 2A C0     		ld		(UBnkrotmatSidevX+1),a
 349+ 9FF4              ;calc sidev y
 350+ 9FF4 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 351+ 9FF7 32 8A 7E     		ld		(varQ),a
 352+ 9FFA 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 353+ 9FFD CD 0A 9D     		call	RSequQmulA
 354+ A000 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 355+ A003 47           		ld		b,a							; b = regX for now
 356+ A004 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 357+ A007 CD 65 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 358+ A00A                      JumpIfAIsZero NormSideYNoNeg
 358+ A00A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 358+ A00B CA 10 A0    >                        jp	    z, NormSideYNoNeg
 359+ A00E EE 80        		xor		$80							; flip a to get -sidev_y
 360+ A010              NormSideYNoNeg:
 361+ A010 32 38 C0     		ld		(UBnkrotmatNosevY+1),a
 362+ A013              ;calc sidev z
 363+ A013 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 364+ A016 32 8A 7E     		ld		(varQ),a
 365+ A019 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 366+ A01C CD 0A 9D     		call	RSequQmulA
 367+ A01F 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 368+ A022 47           		ld		b,a							; b = regX for now
 369+ A023 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 370+ A026 CD 65 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 371+ A029                      JumpIfAIsZero NormSideZNoNeg
 371+ A029 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 371+ A02A CA 2F A0    >                        jp	    z, NormSideZNoNeg
 372+ A02D EE 80        		xor		$80							; flip a to get -sidev_y
 373+ A02F              NormSideZNoNeg:
 374+ A02F 32 2C C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 375+ A032              .ClearLoBytes:
 376+ A032 21 35 C0     		ld		hl,UBnkrotmatNosevX
 377+ A035 06 09        		ld		b,9
 378+ A037 AF                   xor     a
 379+ A038              .ClearLoLoop:
 380+ A038 77           		ld		(hl),a						; zero out lo bytes
 381+ A039 23           		inc		hl
 382+ A03A 23           		inc		hl
 383+ A03B 10 FB        		djnz	.ClearLoLoop
 384+ A03D CD 3E 9D     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 385+ A040 CD CB 99     		call	normaliseXX1596S7			; normalise roof
 386+ A043              ;calc sidev x
 387+ A043 CD 8B 9D     		call	CopyXX15toRotMatSideV		; get back normalised version
 388+ A046
 389+ A046 C9           		ret
 390+ A047
 391+ A047
 392+ A047              CalcRoofvX:
 393+ A047              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 394+ A047              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 394+ A047 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 394+ A04A 32 8A 7E    >                        ld       (varQ),a
 395+ A04D 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 396+ A050 CD 0A 9D     		call	RSequQmulA						; rs = nosez hi * roofz hi
 397+ A053              		ldCopyByte UBnkrotmatNosevY+1,varQ
 397+ A053 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 397+ A056 32 8A 7E    >                        ld       (varQ),a
 398+ A059 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 399+ A05C CD E7 90     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 400+ A05F 7A           		ld		a,d
 401+ A060 E6 80        		and 	$80
 402+ A062 FD 67        		ld		iyh,a
 403+ A064              ;DEBUG		ld		c,a
 404+ A064 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 405+ A067 4F           		ld		c,a								; temp save
 406+ A068 E6 80        		and		$80
 407+ A06A FD AC        		xor		iyh								; flip from saved multiply sign result
 408+ A06C FD 67        		ld		iyh,a							; save nosesev sign to iyh
 409+ A06E 79           		ld		a,c								; recover a
 410+ A06F E6 7F        		and		$7F								; a is unsigned nosev x
 411+ A071 42           		ld		b,d
 412+ A072 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 413+ A073 57           		ld		d,a								; de = nosev x hi
 414+ A074 1E 00        		ld		e,0
 415+ A076 CD 6B 96     		call	BC_Div_DE
 416+ A079 FD 7C        		ld		a,iyh							; get back sign from nosevx
 417+ A07B EE 80        		xor		$80								; flip sign
 418+ A07D E6 80        		and		$80								; keep sign bit only
 419+ A07F B0           		or		b
 420+ A080 C9           		ret
 421+ A081
 422+ A081
 423+ A081              CalcRoofvY:
 424+ A081              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 425+ A081              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 425+ A081 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 425+ A084 32 8A 7E    >                        ld       (varQ),a
 426+ A087 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 427+ A08A CD 0A 9D     		call	RSequQmulA
 428+ A08D              		ldCopyByte UBnkrotmatNosevX+1,varQ
 428+ A08D 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 428+ A090 32 8A 7E    >                        ld       (varQ),a
 429+ A093 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 430+ A096 CD E7 90     		call	madXAequQmulAaddRS
 431+ A099 7A           		ld		a,d
 432+ A09A E6 80        		and 	$80
 433+ A09C FD 67        		ld		iyh,a
 434+ A09E 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 435+ A0A1 4F           		ld		c,a								; temp save
 436+ A0A2 E6 80        		and		$80
 437+ A0A4 FD AC        		xor		iyh								; flip from saved multiply sign result
 438+ A0A6 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 439+ A0A8 79           		ld		a,c								; recover a
 440+ A0A9 E6 7F        		and		$7F								; a is unsigned nosev x
 441+ A0AB 42           		ld		b,d
 442+ A0AC 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 443+ A0AD 57           		ld		d,a								; de = nosev x hi
 444+ A0AE 1E 00        		ld		e,0
 445+ A0B0 CD 6B 96     		call	BC_Div_DE
 446+ A0B3 FD 7C        		ld		a,iyh
 447+ A0B5 EE 80        		xor		$80
 448+ A0B7 E6 80        		and		$80
 449+ A0B9 B0           		or		b
 450+ A0BA C9           		ret
 451+ A0BB
 452+ A0BB              CalcRoofvZ:
 453+ A0BB              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 454+ A0BB              		ldCopyByte UBnkrotmatNosevY+1,varQ
 454+ A0BB 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 454+ A0BE 32 8A 7E    >                        ld       (varQ),a
 455+ A0C1 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 456+ A0C4 CD 0A 9D     		call	RSequQmulA						; rs = NOSEy * ROOFy
 457+ A0C7              		ldCopyByte UBnkrotmatNosevX+1,varQ
 457+ A0C7 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 457+ A0CA 32 8A 7E    >                        ld       (varQ),a
 458+ A0CD 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 459+ A0D0 CD E7 90     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 460+ A0D3 7A           		ld		a,d
 461+ A0D4 E6 80        		and 	$80
 462+ A0D6 FD 67        		ld		iyh,a
 463+ A0D8 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 464+ A0DB 4F           		ld		c,a								; temp save
 465+ A0DC E6 80        		and		$80
 466+ A0DE FD AC        		xor		iyh								; flip from saved multiply sign result
 467+ A0E0 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 468+ A0E2 79           		ld		a,c								; recover a
 469+ A0E3 E6 7F        		and		$7F								; a is unsigned nosev x
 470+ A0E5 42           		ld		b,d
 471+ A0E6 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 472+ A0E7 57           		ld		d,a								; de = nosev x hi
 473+ A0E8 1E 00        		ld		e,0
 474+ A0EA CD 6B 96     		call	BC_Div_DE
 475+ A0ED FD 7C        		ld		a,iyh
 476+ A0EF EE 80        		xor		$80
 477+ A0F1 E6 80        		and		$80
 478+ A0F3 B0           		or		b
 479+ A0F4 C9           		ret
 480+ A0F5
# file closed: ./Maths/Utilities/tidy.asm
1204  A0F5                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ A0F5
   2+ A0F5              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ A0F5 BA          >                        cp     d
   2+ A0F6 D2 14 A1    >                        jp		nc,.Ll28Exit255
   3+ A0F9 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ A0FB CB 27        .LL31:                  sla     a
   5+ A0FD 38 0D                                jr      c,.LL29
   6+ A0FF                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ A0FF BA          >                        cp      d
   6+ A100 DA 05 A1    >                        jp		c, .SkipSub
   7+ A103 92                                   sub     d
   8+ A104                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ A104 B7          >                        or a
   9+ A105 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ A106 CB 13                                rl      e
  11+ A108 38 F1                                jr      c,.LL31
  12+ A10A 7B                                   ld      a,e
  13+ A10B C9                                   ret
  14+ A10C 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ A10D 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ A10E CB 13                                rl      e                           ; rotate counter e left
  17+ A110 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ A112 7B                                   ld      a,e                         ; stick result in a
  19+ A113 C9                                   ret
  20+ A114 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A116 C9                                   ret
  22+ A117
  23+ A117              ;-- Name: LL28 Calculate R = 256 * A / Q
  24+ A117              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  25+ A117              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  26+ A117              ;   Reg mapping 6502  Z80
  27+ A117              ;               a     a
  28+ A117              ;               b     x
  29+ A117              ;               c     q
  30+ A117              ;               d     r
  31+ A117              ;
  32+ A117 21 B6 F1     LL28Amul256DivD_6502:   ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  33+ A11A 4E                                   ld      c,(hl)                  ; using c as Q var
  34+ A11B B9                                   cp      c
  35+ A11C                                      FlipCarryFlag
  35+ A11C 3F          >                        ccf
  36+ A11D DA 45 A1                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  37+ A120 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  38+ A122 CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  39+ A124 DA 39 A1                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  40+ A127                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  40+ A127 3F          >                        ccf
  41+ A128                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  41+ A128 B9          >                        cp      c
  41+ A129 DA 2E A1    >                        jp		c, .LL31_SKIPSUB_6502
  42+ A12C                                                                      ; BCC P%+4
  43+ A12C 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  44+ A12D                                      ClearCarryFlag
  44+ A12D B7          >                        or a
  45+ A12E              .LL31_SKIPSUB_6502:     FlipCarryFlag
  45+ A12E 3F          >                        ccf
  46+ A12F CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  47+ A131 DA 22 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  48+ A134 78                                   ld      a,b
  49+ A135 32 B7 F1                             ld      (Rvar),a
  50+ A138 C9                                   ret                             ; RTS                    \ R left with remainder of division
  51+ A139 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  52+ A13A                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  52+ A13A 37          >                        scf
  53+ A13B CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  54+ A13D DA 22 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  55+ A140 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  56+ A141 32 B7 F1                             ld      (Rvar),a                ; .
  57+ A144 C9                                   ret                             ; .                      \ remainder of the division
  58+ A145 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  59+ A147 32 B7 F1                             ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  60+ A14A                                      SetCarryFlag                    ; we failed so need carry flag set
  60+ A14A 37          >                        scf
  61+ A14B C9                                   ret                             ; RTS                    \ Return from the subroutine
  62+ A14C
  63+ A14C
  64+ A14C 21 8A 7E     LL28Amul256DivQ_6502:   ld      hl,varQ                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  65+ A14F 4E                                   ld      c,(hl)                  ; using c as Q var
  66+ A150 B9                                   cp      c
  67+ A151                                      FlipCarryFlag
  67+ A151 3F          >                        ccf
  68+ A152 DA 7A A1                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  69+ A155 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  70+ A157 CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  71+ A159 DA 6E A1                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  72+ A15C                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  72+ A15C 3F          >                        ccf
  73+ A15D                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  73+ A15D B9          >                        cp      c
  73+ A15E DA 63 A1    >                        jp		c, .LL31_SKIPSUB_6502
  74+ A161                                                                      ; BCC P%+4
  75+ A161 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  76+ A162                                      ClearCarryFlag
  76+ A162 B7          >                        or a
  77+ A163              .LL31_SKIPSUB_6502:     FlipCarryFlag
  77+ A163 3F          >                        ccf
  78+ A164 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  79+ A166 DA 57 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  80+ A169 78                                   ld      a,b
  81+ A16A 32 8B 7E                             ld      (varR),a
  82+ A16D C9                                   ret                             ; RTS                    \ R left with remainder of division
  83+ A16E 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  84+ A16F                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  84+ A16F 37          >                        scf
  85+ A170 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  86+ A172 DA 57 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  87+ A175 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  88+ A176 32 8B 7E                             ld      (varR),a                ; .
  89+ A179 C9                                   ret                             ; .                      \ remainder of the division
  90+ A17A 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  91+ A17C 32 8B 7E                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  92+ A17F                                      SetCarryFlag                    ; we failed so need carry flag set
  92+ A17F 37          >                        scf
  93+ A180 C9                                   ret                             ; RTS                    \ Return from the subroutine
  94+ A181
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1205  A181                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A181              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A181              TIS1:
   3+ A181 08           		ex		af,af'
   4+ A182 3A 74 7D     		ld		a,(regX)
   5+ A185 47           		ld		b,a
   6+ A186 08           		ex		af,af'
   7+ A187              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A187 08           		ex		af,af'
   9+ A188 78           		ld		a,b
  10+ A189 32 8A 7E     		ld		(varQ),a
  11+ A18C 08           		ex		af,af'
  12+ A18D EE 80        		xor		$80							;	 flip sign of Acc
  13+ A18F CD E7 90     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A192              ; USES 				A BC E
  15+ A192              ; DOES NOT USE		D HL
  16+ A192              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A192 47           		ld		b,a
  18+ A193 E6 80        		and		$80							;	hi sign
  19+ A195 5F           		ld		e,a							;   e = varT
  20+ A196 78           		ld		a,b
  21+ A197 E6 7F        		and		$7F							;	hi A7
  22+ A199 06 FE        		ld		b,$FE						;   slide counter
  23+ A19B 48           		ld		c,b							;   c == T1 ::  T1
  24+ A19C              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A19C CB 27        		sla		a
  26+ A19E FE 60        		cp		$60							; max 96
  27+ A1A0 30 02        		jr		nc,.DV4
  28+ A1A2 DE 60        		sbc		a,$60							;  SBC #&60
  29+ A1A4              .DV4:										; skip subtraction
  30+ A1A4 CB 11        		rl		c							;  T1
  31+ A1A6 38 F4        		jr		c,.DVL3
  32+ A1A8 79           		ld		a,c							;   T1
  33+ A1A9 B3           		or		e							;   restore T sign
  34+ A1AA C9           		ret
  35+ A1AB
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1206  A1AB
1207  A1AB                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ A1AB
   2+ A1AB                                      DEFINE TACTICSDEBUG 1
   3+ A1AB              ;                       DEFINE ALWAYSANGRY 1
   4+ A1AB              ;                        DEFINE TARGETDEBUG 1
   5+ A1AB              MISSILEMAXPITCH         equ 3
   6+ A1AB              MISSILEMINPITCH         equ -3
   7+ A1AB              MISSILEMAXROLL          equ 3
   8+ A1AB              MISSILEMINROLL          equ -3
   9+ A1AB              ;Ship Tactics
  10+ A1AB              ;ShipTypeNormal          equ 0
  11+ A1AB              ;ShipTypeMissile         equ 1
  12+ A1AB              ;ShipTypeStation         equ 2
  13+ A1AB              ;ShipTypeJunk            equ 3
  14+ A1AB              ;ShipTypeScoopable       equ 4         ; a sub set of junk
  15+ A1AB              ; To be added
  16+ A1AB              ;ShipTypeTargoid
  17+ A1AB              ;ShipTypeHermit
  18+ A1AB              ; Maybe add the followign with ai flags changing in memory shiptype
  19+ A1AB              ;ShipTypePirate
  20+ A1AB              ;ShipTypeBountyHunter
  21+ A1AB              ;ShipTypeTrader
  22+ A1AB              ;ShipType.....
  23+ A1AB              ;ShipTypeMissionTypeA
  24+ A1AB              ;ShipTypeMissionTypeB
  25+ A1AB              ;ShipTypeMissionTypeETC
  26+ A1AB              ;ShipTypeNoAI
  27+ A1AB
  28+ A1AB
  29+ A1AB
  30+ A1AB 58 A7 30 A4  ShipAIJumpTable:      DW    NormalAI,   MissileAIV3,  StationAI,  JunkAI,     ScoopableAI
  30+ A1AF DE A1 DF A1
  30+ A1B3 E0 A1
  31+ A1B5 E1 A1 E2 A1                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
  31+ A1B9 E2 A1 E2 A1
  31+ A1BD E2 A1
  32+ A1BF              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
  33+ A1BF
  34+ A1BF
  35+ A1BF
  36+ A1BF              ;----------------------------------------------------------------------------------------------------------------------------------
  37+ A1BF              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  38+ A1BF              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  39+ A1BF 21 37 68                            ld      hl,TidyCounter
  40+ A1C2 35                                  dec     (hl)
  41+ A1C3                                     DISPLAY "TODO: SEE IF THIS IS AN ISSUE"
  42+ A1C3 CC 04 9E                            call     z,TidyUbnK  ;TODO SEE IF THIS IS AN ISSUE"
  43+ A1C6                                     ; This shoudl be a call nz to tidy *****ret     nz
  44+ A1C6 3E 10                               ld      a,16
  45+ A1C8 32 37 68                            ld      (TidyCounter),a
  46+ A1CB                                     ;call    TidyUbnK
  47+ A1CB                                     ; add AI in here too
  48+ A1CB 3A 0D C4                            ld       a,(ShipTypeAddr)
  49+ A1CE                                                 DISPLAY "TODO: capture duff jumps"
  50+ A1CE                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  50+ A1CE FE 0A       >                        cp    ShipAiJumpTableMax
  50+ A1D0 D0          >                        ret	 nc
  51+ A1D1 21 AB A1                            ld       hl,ShipAIJumpTable
  52+ A1D4 ED 31                               add      hl,a
  53+ A1D6 ED 31                               add      hl,a
  54+ A1D8 7E                                  ld       a,(hl)                                  ; contrary to the name
  55+ A1D9 23                                  inc      hl                                      ; jp (hl) is really
  56+ A1DA 66                                  ld       h,(hl)                                  ; jp hl
  57+ A1DB 6F                                  ld       l,a                                     ;
  58+ A1DC E9                                  jp       hl                                      ; Follow the AI Jump Table
  59+ A1DD C9                                  ret                                              ; not needed as jp handles this
  60+ A1DE
  61+ A1DE
  62+ A1DE
  63+ A1DE              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  64+ A1DE
  65+ A1DE
  66+ A1DE C9           StationAI:              ret
  67+ A1DF C9           JunkAI:                 ret
  68+ A1E0 C9           ScoopableAI:            ret
  69+ A1E1 C9           ThargoidAI:             ret
  70+ A1E2 C9           NoAI:                   ret
  71+ A1E3              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ A1E3              CalculateAgression:     IFDEF   ALWAYSANGRY
  73+ A1E3 ~                                        jp  UltraHostile
  74+ A1E3                                      ENDIF
  75+ A1E3 3A 0F C4                             ld      a,(ShipAIFlagsAddr)
  76+ A1E6 47                                   ld      b,a
  77+ A1E7 E6 02                                and     %00000010
  78+ A1E9 20 20                                jr      nz,.UltraHostile
  79+ A1EB 78                                   ld      a,b
  80+ A1EC E6 F0                                and     %11110000                               ; if it can can anger a fighter bay then generally more hostile as implies its a large ship
  81+ A1EE 21 5C C0                             ld      hl,UBnKMissilesLeft                     ; more missiles more agression
  82+ A1F1 B6                                   or      (hl)
  83+ A1F2 47                                   ld      b,a
  84+ A1F3 3A 0E C4                             ld      a,(ShipNewBitsAddr)
  85+ A1F6 E6 4E                                and     %01001110                               ; We look at if its a bounty hunter, hostile already, pirate and cop
  86+ A1F8 B0                                   or      b
  87+ A1F9 47                                   ld      b,a
  88+ A1FA 3A 53 C0                             ld      a,(UBnKShipAggression)
  89+ A1FD                                      JumpIfALTNusng 64,.NotAlreadyAgressive
  89+ A1FD FE 40       >                        cp      64
  89+ A1FF DA 06 A2    >                        jp		c, .NotAlreadyAgressive
  90+ A202 78                                   ld      a,b
  91+ A203 F6 80                                or      %10000000                               ; if its already at least 64 agressive then likley to stay so
  92+ A205 47                                   ld      b,a
  93+ A206 78           .NotAlreadyAgressive:   ld      a,b
  94+ A207 32 53 C0                             ld      (UBnKShipAggression),a
  95+ A20A C9                                   ret
  96+ A20B 3E FF        .UltraHostile:          ld      a,$FF
  97+ A20D 32 53 C0                             ld      (UBnKShipAggression),a
  98+ A210 C9                                   ret
  99+ A211              ;----------------------------------------------------------------------------------------------------------------------------------
 100+ A211              ; set angry if possible, if its an innocent then flag the space station to get angry
 101+ A211 3A 0E C4     MakeHostile:            ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
 102+ A214                                      ;break
 103+ A214                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbHostile
 103+ A214 3A 0D C4    >                        ld  a,(ShipTypeAddr)
 103+ A217 FE 02       >                        cp  ShipTypeStation
 103+ A219 CA 38 A2    >                        jp  z,.SetNewbHostile
 104+ A21C E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
 105+ A21E C4 72 A2                             call    nz, SetStationHostile                   ; Set Space Station if present, Angry
 106+ A221 3A 54 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
 107+ A224                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
 107+ A224 CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
 107+ A226 C8          >                        ret		z
 108+ A227 4F                                   ld      c,a                                     ; Copy to c in case we need it later
 109+ A228                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
 109+ A228 3E 02       >                        ld      a,2
 109+ A22A 32 47 C0    >                        ld      (UBnKAccel),a
 110+ A22D CB 27                                sla     a                                       ; set pitch to 4
 111+ A22F 32 49 C0                             ld      (UBnKRotZCounter),a                     ; .
 112+ A232 3A 0F C4                             ld      a,(ShipAIFlagsAddr)
 113+ A235                                      ReturnIfBitMaskClear ShipCanAnger
 113+ A235 E6 80       >                        and     ShipCanAnger
 113+ A237 C8          >                        ret     z
 114+ A238 CD 1A C6     .SetNewbHostile:        call    SetShipHostile
 115+ A23B C9                                   ret
 116+ A23C
 117+ A23C                          DISPLAY "TODO: Missile Did Hit Us"
 118+ A23C              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ A23C C9           MissileDidHitUs:        ret ; TODO
 120+ A23D
 121+ A23D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ A23D              PlayerHitByMissile:     MMUSelectLayer1
 122+ A23D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 123+ A241 3E 05                                ld      a,L1ColourInkCyan
 124+ A243 CD B4 E0                             call    l1_set_border
 125+ A246 3A 3C C0                             ld      a,(UBnKMissileBlastDamage)
 126+ A249 47                                   ld      b,a                                     ; b = damage
 127+ A24A 3A 28 C0                             ld      a,(UBnKzsgn)
 128+ A24D E6 80                                and     $80
 129+ A24F 20 0A                                jr      nz,.HitRear
 130+ A251 3A 02 81     .HitFront:              ld      a,(ForeShield)
 131+ A254 CD F8 63                             call    ApplyDamage
 132+ A257 32 02 81                             ld      (ForeShield),a
 133+ A25A C9                                   ret
 134+ A25B 3A 03 81     .HitRear:               ld      a,(AftShield)
 135+ A25E CD F8 63                             call    ApplyDamage
 136+ A261 32 03 81                             ld      (AftShield),a
 137+ A264                                                  DISPLAY "TODO: Set up blast radius"
 138+ A264 C9                                   ret; TODO , do hit set up blast radius etc
 139+ A265              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ A265              MissileHitShipA:        MMUSelectLayer1
 140+ A265 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 141+ A269 3E 02                                ld      a,L1ColourInkRed
 142+ A26B CD B4 E0                             call    l1_set_border
 143+ A26E CD 45 C7                             call    UnivExplodeShip
 144+ A271                                                  DISPLAY "TODO:  hit ship do explosion"
 145+ A271 C9                                   ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
 146+ A272              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ A272 CD AD 83     SetStationHostile:      call    IsSpaceStationPresent                   ; only if present
 148+ A275 D8                                   ret     c
 149+ A276 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
 150+ A279 FD 67                                ld      iyh,a
 151+ A27B                                      MMUSelectUniverseN 0                            ; space station is always 0
 151+ A27B ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 152+ A27F CD 1A C6                             call    SetShipHostile
 153+ A282 FD 7C                                ld      a,iyh                                   ; get prev bank back
 154+ A284                                      MMUSelectUniverseA                              ;
 154+ A284 C6 46       >                     add    a,BankUNIVDATA0
 154+ A286 ED 92 56    >                     nextreg UniverseMMU,       a
 155+ A289 C9                                   ret
 156+ A28A
 157+ A28A              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ A28A              CheckMissileBlastInit:  ZeroA
 158+ A28A AF          >                        xor a
 159+ A28B 32 53 80                             ld      (CurrentMissileCheck),a
 160+ A28E 21 20 C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
 161+ A291 01 0C 00                             ld      bc,12                           ; and Damage stats
 162+ A294 11 5A 7F                             ld      de,MissileXPos
 163+ A297 ED B0                                ldir
 164+ A299                                      ZeroA                                   ; we have processd enque request
 164+ A299 AF          >                        xor a
 165+ A29A 32 44 C0                             ld      (UBnKMissleHitToProcess),a      ;
 166+ A29D CD 5A A3                             call    CheckIfBlastHitUs               ; If we are in Range
 167+ A2A0 DC 3C A2                             call    c, MissileDidHitUs              ; Then we get hit
 168+ A2A3 C9                                   ret
 169+ A2A4
 170+ A2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 171+ A2A4              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
 172+ A2A4 ~                                    ld      a,(MissilePos)                      ; check X Coord
 173+ A2A4 ~                                    ld      hl,(ShipSign)
 174+ A2A4 ~                                    xor     (hl)
 175+ A2A4 ~                                    and     SignOnly8Bit
 176+ A2A4 ~                                    ld      hl,(ShipPos)
 177+ A2A4 ~                                    ld      de,(MissilePos)
 178+ A2A4 ~                                    jr      z,.SignsDiffernt
 179+ A2A4 ~            .XSame:                 and     a
 180+ A2A4 ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
 181+ A2A4 ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
 182+ A2A4 ~                                    NegHL
 183+ A2A4 ~                                    jp      .CheckDiff
 184+ A2A4 ~            .SignsDiffernt:         add     hl,de
 185+ A2A4 ~                                    ReturnIfNegative                            ; if we overflowed then return
 186+ A2A4 ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 187+ A2A4 ~                                    ReturnIfANotZero
 188+ A2A4 ~                                    ld      a,l
 189+ A2A4 ~                                    and     a
 190+ A2A4 ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
 191+ A2A4                                      ENDM
 192+ A2A4              ;...................................................................
 193+ A2A4              ; We only do one test per loop for spreading the load of work
 194+ A2A4 3A 53 80     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 195+ A2A7                                      ReturnIfAGTENusng   UniverseSlotListSize
 195+ A2A7 FE 0C       >                        cp    UniverseSlotListSize
 195+ A2A9 D0          >                        ret	 nc
 196+ A2AA FD 6F                                ld      iyl,a
 197+ A2AC 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 198+ A2AD 32 53 80                             ld      (CurrentMissileCheck),a
 199+ A2B0                                      ReturnIfSlotAEmpty
 199+ A2B0 21 55 80    >                        ld      hl,UniverseSlotList
 199+ A2B3 ED 31       >                        add     hl,a
 199+ A2B5 7E          >                        ld      a,(hl)
 199+ A2B6 3C          >                        inc     a
 199+ A2B7 C8          >                        ret     z           ; if slot was ff inc would make it 0
 199+ A2B8 3D          >                        dec     a           ; get original value back for later
 200+ A2B9 CD AD 83                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 201+ A2BC D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 202+ A2BD 3A 51 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 203+ A2C0 E6 20                                and     ShipExploding                       ;
 204+ A2C2                                      ReturnIfNotZero                             ;
 204+ A2C2 C0          >                        ret     nz
 205+ A2C3 3A 7B 7F                             ld      a,(CurrentMissileBlastRange)
 206+ A2C6 FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 207+ A2C8 FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 208+ A2CA                                      MMUSelectUniverseA
 208+ A2CA C6 46       >                     add    a,BankUNIVDATA0
 208+ A2CC ED 92 56    >                     nextreg UniverseMMU,       a
 209+ A2CF                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 209+ A2CF 3A 5A 7F    >                        ld      a,(MissileXPos)                      ; check X Coord
 209+ A2D2 2A 22 C0    >                        ld      hl,(UBnKxsgn)
 209+ A2D5 AE          >                        xor     (hl)
 209+ A2D6 E6 80       >                        and     SignOnly8Bit
 209+ A2D8 2A 20 C0    >                        ld      hl,(UBnKxlo)
 209+ A2DB ED 5B 5A 7F >                        ld      de,(MissileXPos)
 209+ A2DF 28 0F       >                        jr      z,.SignsDiffernt
 209+ A2E1 A7          >.XSame:                 and     a
 209+ A2E2 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 209+ A2E4             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 209+ A2E4 F2 F2 A2    >                        jp		p, .CheckDiff
 209+ A2E7             >                        NegHL
 209+ A2E7 AF          >                    xor a
 209+ A2E8 95          >                    sub l
 209+ A2E9 6F          >                    ld l,a
 209+ A2EA 9F          >                    sbc a,a
 209+ A2EB 94          >                    sub h
 209+ A2EC 67          >                    ld h,a
 209+ A2ED C3 F2 A2    >                        jp      .CheckDiff
 209+ A2F0 19          >.SignsDiffernt:         add     hl,de
 209+ A2F1             >                        ReturnIfNegative                            ; if we overflowed then return
 209+ A2F1 F8          >                        ret     m
 209+ A2F2 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 209+ A2F3             >                        ReturnIfANotZero
 209+ A2F3 A7          >                        and     a
 209+ A2F4 C0          >                        ret     nz
 209+ A2F5 7D          >                        ld      a,l
 209+ A2F6 A7          >                        and     a
 209+ A2F7             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 209+ A2F7 21 7B 7F    >                        ld      hl,CurrentMissileBlastRange
 209+ A2FA BE          >                        cp      (hl)
 209+ A2FB D0          >                        ret	    nc
 210+ A2FC                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 210+ A2FC 3A 5D 7F    >                        ld      a,(MissileYPos)                      ; check X Coord
 210+ A2FF 2A 25 C0    >                        ld      hl,(UBnKysgn)
 210+ A302 AE          >                        xor     (hl)
 210+ A303 E6 80       >                        and     SignOnly8Bit
 210+ A305 2A 23 C0    >                        ld      hl,(UBnKylo)
 210+ A308 ED 5B 5D 7F >                        ld      de,(MissileYPos)
 210+ A30C 28 0F       >                        jr      z,.SignsDiffernt
 210+ A30E A7          >.XSame:                 and     a
 210+ A30F ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 210+ A311             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 210+ A311 F2 1F A3    >                        jp		p, .CheckDiff
 210+ A314             >                        NegHL
 210+ A314 AF          >                    xor a
 210+ A315 95          >                    sub l
 210+ A316 6F          >                    ld l,a
 210+ A317 9F          >                    sbc a,a
 210+ A318 94          >                    sub h
 210+ A319 67          >                    ld h,a
 210+ A31A C3 1F A3    >                        jp      .CheckDiff
 210+ A31D 19          >.SignsDiffernt:         add     hl,de
 210+ A31E             >                        ReturnIfNegative                            ; if we overflowed then return
 210+ A31E F8          >                        ret     m
 210+ A31F 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 210+ A320             >                        ReturnIfANotZero
 210+ A320 A7          >                        and     a
 210+ A321 C0          >                        ret     nz
 210+ A322 7D          >                        ld      a,l
 210+ A323 A7          >                        and     a
 210+ A324             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 210+ A324 21 7B 7F    >                        ld      hl,CurrentMissileBlastRange
 210+ A327 BE          >                        cp      (hl)
 210+ A328 D0          >                        ret	    nc
 211+ A329                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 211+ A329 3A 60 7F    >                        ld      a,(MissileZPos)                      ; check X Coord
 211+ A32C 2A 28 C0    >                        ld      hl,(UBnKzsgn)
 211+ A32F AE          >                        xor     (hl)
 211+ A330 E6 80       >                        and     SignOnly8Bit
 211+ A332 2A 26 C0    >                        ld      hl,(UBnKzlo)
 211+ A335 ED 5B 60 7F >                        ld      de,(MissileZPos)
 211+ A339 28 0F       >                        jr      z,.SignsDiffernt
 211+ A33B A7          >.XSame:                 and     a
 211+ A33C ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 211+ A33E             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 211+ A33E F2 4C A3    >                        jp		p, .CheckDiff
 211+ A341             >                        NegHL
 211+ A341 AF          >                    xor a
 211+ A342 95          >                    sub l
 211+ A343 6F          >                    ld l,a
 211+ A344 9F          >                    sbc a,a
 211+ A345 94          >                    sub h
 211+ A346 67          >                    ld h,a
 211+ A347 C3 4C A3    >                        jp      .CheckDiff
 211+ A34A 19          >.SignsDiffernt:         add     hl,de
 211+ A34B             >                        ReturnIfNegative                            ; if we overflowed then return
 211+ A34B F8          >                        ret     m
 211+ A34C 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 211+ A34D             >                        ReturnIfANotZero
 211+ A34D A7          >                        and     a
 211+ A34E C0          >                        ret     nz
 211+ A34F 7D          >                        ld      a,l
 211+ A350 A7          >                        and     a
 211+ A351             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 211+ A351 21 7B 7F    >                        ld      hl,CurrentMissileBlastRange
 211+ A354 BE          >                        cp      (hl)
 211+ A355 D0          >                        ret	    nc
 212+ A356 CD 34 C7                             call    ShipMissileBlast                    ; Ship hit by missile blast
 213+ A359 C9                                   ret                                         ; we are done
 214+ A35A              ;...................................................................
 215+ A35A 3A 3B C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 216+ A35D 4F                                   ld      c,a
 217+ A35E C3 65 A3                             jp      MissileHitUsCheckPos
 218+ A361              ;...................................................................
 219+ A361 3A 3D C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 220+ A364 4F                                   ld      c,a
 221+ A365              ;...................................................................
 222+ A365 2A 20 C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 223+ A368 ED 5B 23 C0                          ld      de, (UBnKylo)
 224+ A36C ED 4B 26 C0                          ld      bc, (UBnKzlo)
 225+ A370 7C                                   ld      a,h
 226+ A371 B2                                   or      d
 227+ A372 B0                                   or      b
 228+ A373                                      ClearCarryFlag
 228+ A373 B7          >                        or a
 229+ A374                                      ReturnIfNotZero
 229+ A374 C0          >                        ret     nz
 230+ A375                                      SetCarryFlag
 230+ A375 37          >                        scf
 231+ A376 C9                                   ret
 232+ A377
 233+ A377                                      ZeroA
 233+ A377 AF          >                        xor a
 234+ A378 B4                                   or      h
 235+ A379                                      ClearCarryFlag
 235+ A379 B7          >                        or a
 236+ A37A                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 236+ A37A C0          >                        ret     nz
 237+ A37B 7D                                   ld      a,l
 238+ A37C                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 238+ A37C B9          >                        cp    c
 238+ A37D D0          >                        ret	 nc
 239+ A37E 2A 23 C0     .CheckY:                ld      hl,(UBnKylo)
 240+ A381                                      ZeroA
 240+ A381 AF          >                        xor a
 241+ A382 B5                                   or      l
 242+ A383                                      ClearCarryFlag
 242+ A383 B7          >                        or a
 243+ A384                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 243+ A384 C0          >                        ret     nz
 244+ A385 7D                                   ld      a,l
 245+ A386                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 245+ A386 B9          >                        cp    c
 245+ A387 D0          >                        ret	 nc
 246+ A388 2A 26 C0     .CheckZ:                ld      hl,(UBnKzlo)
 247+ A38B                                      ZeroA
 247+ A38B AF          >                        xor a
 248+ A38C B5                                   or      l
 249+ A38D                                      ClearCarryFlag
 249+ A38D B7          >                        or a
 250+ A38E                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 250+ A38E C0          >                        ret     nz
 251+ A38F 7D                                   ld      a,l
 252+ A390                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 252+ A390 B9          >                        cp    c
 252+ A391 D0          >                        ret	 nc
 253+ A392              .ItsAHit:               SetCarryFlag                                ; So must have hit
 253+ A392 37          >                        scf
 254+ A393 C9                                   ret
 255+ A394
 256+ A394              SelectMissileBank:      MACRO
 257+ A394 ~                                    ld      a,iyh
 258+ A394 ~                                    MMUSelectUnivBankA
 259+ A394                                      ENDM
 260+ A394
 261+ A394              SelectTargetBank:       MACRO
 262+ A394 ~                                    ld      a,iyl
 263+ A394 ~                                    MMUSelectUnivBankA
 264+ A394                                      ENDM
 265+ A394
 266+ A394              ;...................................................................
 267+ A394              ; ... Copy of target data for missile calcs etc
 268+ A394                                      INCLUDE "./TacticsWorkingData.asm"
# file opened: ./GameEngine/./TacticsWorkingData.asm
   1++A394 00           TacticsTargetShip       DB 0
   2++A395 20           TacticsPad0A            DB " "
   3++A396 00           TacticsMissileBank      DB 0
   4++A397 00           TacticsTargetBank       DB 0
   5++A398 50 72 64 3E  TacticsPad0B            DB "Prd>"
   6++A39C 00 00        TacticsDotProduct1      DS 2
   7++A39E 3E           TacticsPad0C            DB ">"
   8++A39F 00 00        TacticsDotProduct2      DS 2
   9++A3A1 3E           TacticsPad0D            DB ">"
  10++A3A2 00 00        TacticsDotProduct3      DS 2
  11++A3A4 4D 69 73 6C  TacticsPad1A            DB "MislX"
  11++A3A8 58
  12++A3A9 00 00 00     TacticsMissileX         DS 3
  13++A3AC 59           TacticsPad1B            DB "Y"
  14++A3AD 00 00 00     TacticsMissileY         DS 3
  15++A3B0 5A           TacticsPad1C            DB "Z"
  16++A3B1 00 00 00     TacticsMissileZ         DS 3
  17++A3B4 4D 61 74 20  TcaticsPad2A            DB "Mat X"
  17++A3B8 58
  18++A3B9 20 59        TacticsPad2B            DB " Y"
  19++A3BB 20 5A        TacticsPad2C            DB " Z"
  20++A3BD 00           TacticsRotMatX          DB 0
  21++A3BE 00           TacticsToyMatXSign      DB 0
  22++A3BF 00           TacticsRotMatY          DB 0
  23++A3C0 00           TacticsToyMatYSign      DB 0
  24++A3C1 00           TacticsRotMatZ          DB 0
  25++A3C2 00           TacticsToyMatZSign      DB 0
  26++A3C3 20           TacticsPad2D            DB " "
  27++A3C4 54 61 72 67  TacticsPad3A            DB "Targ="
  27++A3C8 3D
  28++A3C9 00 00 00     TacticsTargetX          DS 3
  29++A3CC 00 00 00     TacticsTargetY          DS 3
  30++A3CF 00 00 00     TacticsTargetZ          DS 3
  31++A3D2 3D 20        TacticsPad3B            DB "= "
  32++A3D4 56 65 63 74  TacticsPad4A            DB "VectX"
  32++A3D8 58
  33++A3D9 00 00 00     TacticsVectorX:         DS 3
  34++A3DC 59           TacticsPad4B            DB "Y"
  35++A3DD 00 00 00     TacticsVectorY:         DS 3
  36++A3E0 5A           TacticsPad4C            DB "Z"
  37++A3E1 00 00 00     TacticsVectorZ:         DS 3
  38++A3E4 4E 6F 72 6D  TacticsPad5A            DB "NormX"
  38++A3E8 58
  39++A3E9 00 00        TacticsNormX:           DS 2
  40++A3EB 20 59        TacticsPad5B            DB " Y"
  41++A3ED 00 00        TacticsNormY:           DS 2
  42++A3EF 20 5A        TacticsPad5C            DB " Z"
  43++A3F1 00 00        TacticsNormZ:           DS 2
  44++A3F3 20           TacticsPad5D            DB " "
  45++A3F4 53 69 64 65  TacticsPad7A            DB "SideX"
  45++A3F8 58
  46++A3F9 00 00        TacticsSideX            DS 2
  47++A3FB 20 59        TacticsPad7B            DB " Y"
  48++A3FD 00 00        TacticsSideY            DS 2
  49++A3FF 20 5A        TacticsPad7C            DB " Z"
  50++A401 00 00        TacticsSideZ            DS 2
  51++A403 20 52 6F 6F  TacticsPad8A            DB " RoofX"
  51++A407 66 58
  52++A409 00 00        TacticsRoofX            DS 2
  53++A40B 20 59        TacticsPad8B            DB " Y"
  54++A40D 00 00        TacticsRoofY            DS 2
  55++A40F 20 5A        TacticsPad8C            DB " Z"
  56++A411 00 00        TacticsRoofZ            DS 2
  57++A413 20 4E 6F 73  TacticsPad9A            DB " NoseX"
  57++A417 65 58
  58++A419 00 00        TacticsNoseX            DS 2
  59++A41B 20 59        TacticsPad9B            DB " Y"
  60++A41D 00 00        TacticsNoseY            DS 2
  61++A41F 20 5A        TacticsPad9C            DB " Z"
  62++A421 00 00        TacticsNoseZ            DS 2
  63++A423 20           TacticsPad9D            DB " "
  64++A424 52 45 53 55  TacticsPadAA            DB "RESULT"
  64++A428 4C 54
  65++A42A 00           TacticsRotX             DS 1
  66++A42B 20           TacticsPadAB            DB " "
  67++A42C 00           TacticsRotZ             DS 1
  68++A42D 20           TacticsPadAC            DB " "
  69++A42E 00           TacticsSpeed            DS 1
  70++A42F 20           TacticsPadAD            DB " "
  71++A430
  72++A430
# file closed: ./GameEngine/./TacticsWorkingData.asm
 269+ A430                                      INCLUDE "../GameEngine/MissileAI.asm"
# file opened: ./GameEngine/../GameEngine/MissileAI.asm
   1++A430                                      DEFINE MISSILEDEBUG 1
   2++A430                                      DEFINE MISSILEDOHIT 1
   3++A430
   4++A430              MISSILEMAXACCEL         equ 3
   5++A430              MISSILEMAXDECEL         equ -3
   6++A430                                      ;DEFINE MISSILEBREAK
   7++A430              ;.. Thsi version uses new kind logic
   8++A430              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
   9++A430              MissileAIV3:            ;ld      a,(ShipAIEnabled)
  10++A430                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  11++A430                                      IFDEF MISSILEDOHIT
  12++A430                                          JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
  12++A430 3A 44 C0    >                        ld      a,(UBnKMissleHitToProcess)
  12++A433 A7          >                        and     a
  12++A434 CA 96 A5    >                        jp      z, .ProcessMissileHit
  13++A437                                      ENDIF
  14++A437              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
  14++A437 3A 9F 7D    >                        ld  a,(ECMCountDown)
  14++A43A A7          >                        and a
  14++A43B C2 9F A5    >                        jp  nz,.ECMIsActive
  15++A43E              .IsMissileHostile:      IsShipHostile                               ; is missle attacking us?
  15++A43E 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
  15++A441 E6 04       >                        and     ShipIsHostile
  16++A443                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
  16++A443 CA 69 A4    >                        jp	z,.MissileTargetingShip
  17++A446 2A 20 C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
  18++A449 3A 3D C0                             ld      a,(UBnKMissileDetonateRange)
  19++A44C 4F                                   ld      c,a                                 ; c holds detonation range
  20++A44D CD 65 A3                             call    MissileHitUsCheckPos
  21++A450 D2 59 A4     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
  22++A453 CD 3D A2     .MissleHitUs:           call    PlayerHitByMissile
  23++A456 C3 9F A5                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
  24++A459 CD 72 AA     .UpdateTargetingUsPos:  call    SetPlayerAsTarget
  25++A45C CD 4D AA                             call    CopyPosToVector
  26++A45F 3A 46 80                             ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  27++A462 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  28++A464 FD 67                                ld      iyh,a
  29++A466 C3 74 A5                             jp      .NormaliseDirection
  30++A469              ;--- Missile is targeting other ship
  31++A469 3A 46 80     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  32++A46C C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  33++A46E FD 67                                ld      iyh,a
  34++A470                                      IFDEF MISSILEDEBUG
  35++A470 32 96 A3                                 ld  (TacticsMissileBank),a
  36++A473                                      ENDIF
  37++A473 3A 45 C0     .SaveTargetBank:        ld      a,(UBnKMissileTarget)               ; target will be used a lot too
  38++A476 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  39++A478 FD 6F                                ld      iyl,a                               ; save target
  40++A47A                                      IFDEF MISSILEDEBUG
  41++A47A 32 97 A3                                 ld  (TacticsTargetBank),a
  42++A47D                                      ENDIF
  43++A47D              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
  43++A47D 21 55 80    >                        ld      hl,UniverseSlotList
  43++A480 ED 31       >                        add     hl,a
  43++A482 7E          >                        ld      a,(hl)
  43++A483 3C          >                        inc     a
  43++A484 CA 9F A5    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
  43++A487 3D          >                        dec     a           ; get original value back for later
  44++A488              ;... Note we don't have to check for impact as we already have a loop doing that
  45++A488              .SelectTargetShip:      SelectTargetBank
  45++A488 FD 7D       >                        ld      a,iyl
  45++A48A             >                        MMUSelectUnivBankA
  45++A48A ED 92 56    >                     nextreg UniverseMMU,       a
  46++A48D 3A 54 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)                    ; check exploding status
  47++A490 E6 20                                and     ShipExploding                       ; as if exploding then the missile will also explode
  48++A492 28 08                                jr      z,.UpdateTargetingShipX
  49++A494              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
  49++A494 FD 7C       >                        ld      a,iyh
  49++A496             >                        MMUSelectUnivBankA
  49++A496 ED 92 56    >                     nextreg UniverseMMU,       a
  50++A499 C3 9F A5                             jp      .ECMIsActive
  51++A49C              ;--- At this point we already have the target banked in ready for calculating vector
  52++A49C              ; Tactics vector = missile - target
  53++A49C              .UpdateTargetingShipX:  IFDEF MISSILEBREAK
  54++A49C ~                                        break
  55++A49C                                      ENDIF
  56++A49C ED 5B 20 C0                          ld      de,(UBnKxlo)                        ; get target ship X
  57++A4A0 3A 22 C0                             ld      a,(UBnKxsgn)                        ; and flip sign so we have missile - target
  58++A4A3                                      IFDEF MISSILEDEBUG
  59++A4A3 ED 53 C9 A3                              ld  (TacticsTargetX),de
  60++A4A7 32 CB A3                                 ld  (TacticsTargetX+2),a
  61++A4AA                                      ENDIF
  62++A4AA                                      FlipSignBitA
  62++A4AA EE 80       >                        xor     SignOnly8Bit
  63++A4AC 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  64++A4AD                                      SelectMissileBank
  64++A4AD FD 7C       >                        ld      a,iyh
  64++A4AF             >                        MMUSelectUnivBankA
  64++A4AF ED 92 56    >                     nextreg UniverseMMU,       a
  65++A4B2 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
  66++A4B5 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
  67++A4B8                                      IFDEF MISSILEDEBUG
  68++A4B8 22 A9 A3                                 ld  (TacticsMissileX),hl
  69++A4BB 32 AB A3                                 ld  (TacticsMissileX+2),a
  70++A4BE                                      ENDIF
  71++A4BE 47                                   ld      b,a
  72++A4BF CD FF 8E                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  73++A4C2 22 D9 A3                             ld      (TacticsVectorX),hl
  74++A4C5 32 DB A3                             ld      (TacticsVectorX+2),a
  75++A4C8              .UpdateTargetingShipY:  SelectTargetBank
  75++A4C8 FD 7D       >                        ld      a,iyl
  75++A4CA             >                        MMUSelectUnivBankA
  75++A4CA ED 92 56    >                     nextreg UniverseMMU,       a
  76++A4CD ED 5B 23 C0                          ld      de,(UBnKylo)                        ; get target ship X
  77++A4D1 3A 25 C0                             ld      a,(UBnKysgn)
  78++A4D4                                      IFDEF MISSILEDEBUG
  79++A4D4 ED 53 CC A3                              ld  (TacticsTargetY),de
  80++A4D8 32 CE A3                                 ld  (TacticsTargetY+2),a
  81++A4DB                                      ENDIF
  82++A4DB                                      FlipSignBitA
  82++A4DB EE 80       >                        xor     SignOnly8Bit
  83++A4DD 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  84++A4DE                                      SelectMissileBank
  84++A4DE FD 7C       >                        ld      a,iyh
  84++A4E0             >                        MMUSelectUnivBankA
  84++A4E0 ED 92 56    >                     nextreg UniverseMMU,       a
  85++A4E3 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
  86++A4E6 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
  87++A4E9                                      IFDEF MISSILEDEBUG
  88++A4E9 22 AD A3                                 ld  (TacticsMissileY),hl
  89++A4EC 32 AF A3                                 ld  (TacticsMissileY+2),a
  90++A4EF                                      ENDIF
  91++A4EF 47                                   ld      b,a
  92++A4F0 CD FF 8E                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  93++A4F3 22 DD A3                             ld      (TacticsVectorY),hl
  94++A4F6 32 DF A3                             ld      (TacticsVectorY+2),a
  95++A4F9              .UpdateTargetingShipZ:  SelectTargetBank
  95++A4F9 FD 7D       >                        ld      a,iyl
  95++A4FB             >                        MMUSelectUnivBankA
  95++A4FB ED 92 56    >                     nextreg UniverseMMU,       a
  96++A4FE ED 5B 26 C0                          ld      de,(UBnKzlo)                        ; get target ship X
  97++A502 3A 28 C0                             ld      a,(UBnKzsgn)
  98++A505                                      IFDEF MISSILEDEBUG
  99++A505 ED 53 CF A3                              ld  (TacticsTargetZ),de
 100++A509 32 D1 A3                                 ld  (TacticsTargetZ+2),a
 101++A50C                                      ENDIF
 102++A50C                                      FlipSignBitA
 102++A50C EE 80       >                        xor     SignOnly8Bit
 103++A50E 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 104++A50F                                      SelectMissileBank
 104++A50F FD 7C       >                        ld      a,iyh
 104++A511             >                        MMUSelectUnivBankA
 104++A511 ED 92 56    >                     nextreg UniverseMMU,       a
 105++A514 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 106++A517 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 107++A51A                                      IFDEF MISSILEDEBUG
 108++A51A 22 B1 A3                                 ld  (TacticsMissileZ),hl
 109++A51D 32 B3 A3                                 ld  (TacticsMissileZ+2),a
 110++A520                                      ENDIF
 111++A520
 112++A520 47                                   ld      b,a
 113++A521 CD FF 8E                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 114++A524 22 E1 A3                             ld      (TacticsVectorZ),hl
 115++A527 32 E3 A3                             ld      (TacticsVectorZ+2),a
 116++A52A              ; by here missile in in memory and TacticsVector now holds distance
 117++A52A              ; if or ABS all high bytes is <> 0
 118++A52A              .CheckDistance:         IFDEF MISSILEDOHIT
 119++A52A 2A DA A3                                 ld      hl,(TacticsVectorX+1)              ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 120++A52D 7C                                       ld      a,h                                ; .
 121++A52E ED 5B DE A3                              ld      de,(TacticsVectorY+1)              ; .
 122++A532 B2                                       or      d                                  ; .
 123++A533 ED 4B E2 A3                              ld      bc,(TacticsVectorZ+1)              ; .
 124++A537 B0                                       or      b                                  ; .
 125++A538                                          ClearSignBitA                              ; .
 125++A538 E6 7F       >                        and     SignMask8Bit
 126++A53A                                          JumpIfNotZero       .FarAway               ; .
 126++A53A C2 49 A5    >                        jp	nz,.FarAway
 127++A53D B5                                       or      l                                    ; test for low byte bit 7, i.e high of 16 bit values
 128++A53E B3                                       or      e                                  ; .
 129++A53F B1                                       or      c                                  ; .
 130++A540                                          JumpIfNotZero       .FarAway               ; .
 130++A540 C2 49 A5    >                        jp	nz,.FarAway
 131++A543                                      ELSE
 132++A543 ~                                        jp                  .FarAway
 133++A543                                      ENDIF
 134++A543              ; If we get here its close enough to detonate
 135++A543 3A 45 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 136++A546 C3 65 A2                             jp      MissileHitShipA
 137++A549                          DISPLAY "TODO: far away ** TODO need to set memory read write on page 0"
 138++A549              .FarAway:               SelectTargetBank
 138++A549 FD 7D       >                        ld      a,iyl
 138++A54B             >                        MMUSelectUnivBankA
 138++A54B ED 92 56    >                     nextreg UniverseMMU,       a
 139++A54E                                      JumpIfMemFalse      UBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 139++A54E 3A 5A C0    >                        ld      a,(UBnKECMFitted)
 139++A551 A7          >                        and     a
 139++A552 C2 6F A5    >                        jp      nz, .NoECM
 140++A555                                      JumpIfMemLTNusng    UBnKEnergy,    ECMCounterMax, .NoECM    ; .
 140++A555 3A 58 C0    >                        ld      a,(UBnKEnergy)
 140++A558 FE 80       >                        cp      ECMCounterMax
 140++A55A DA 6F A5    >                        jp	  c,.NoECM
 141++A55D                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 141++A55D 3A 9F 7D    >                        ld      a,(ECMCountDown)
 141++A560 A7          >                        and     a
 141++A561 C2 6F A5    >                        jp	    nz,.NoECM
 142++A564 3A 82 7D     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 143++A567                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 143++A567 FE 10       >                        cp     16
 143++A569 D2 6F A5    >                        jp		nc,.UpdateMissilePos
 144++A56C              ;. If we get here then target is still paged in to fire ECM
 145++A56C C3 42 C6     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 146++A56F              ;                       implicit ret
 147++A56F              ;. If we get here then target is still paged in with no ECM
 148++A56F              .NoECM:
 149++A56F                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 150++A56F                                    ;;;         ** targeting computer looses track and destructs missiles
 151++A56F              ;--- Now we can actually update the missile AI
 152++A56F              .UpdateMissilePos:      ;break
 153++A56F                                      SelectMissileBank
 153++A56F FD 7C       >                        ld      a,iyh
 153++A571             >                        MMUSelectUnivBankA
 153++A571 ED 92 56    >                     nextreg UniverseMMU,       a
 154++A574                                      ;break
 155++A574                                      ;call    ORTHOGALISE
 156++A574              .NormaliseDirection:    IFDEF MISSILEBREAK
 157++A574 ~                                        break
 158++A574                                      ENDIF
 159++A574 CD D3 AA                             call    NormalizeTactics                    ; Normalise vector down to 7 bit + sign byte (.TA19->TAS2)
 160++A577                                      IFDEF TACTICSDEBUG
 161++A577 CD 9A A9                                 call DebugTacticsCopy
 162++A57A                                      ENDIF
 163++A57A              .NegateDirection:       FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 163++A57A 3A DB A3    >                        ld  a,(TacticsVectorX+2)
 163++A57D EE 80       >                        xor SignOnly8Bit
 163++A57F 32 DB A3    >                        ld  (TacticsVectorX+2),a
 164++A582                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 164++A582 3A DF A3    >                        ld  a,(TacticsVectorY+2)
 164++A585 EE 80       >                        xor SignOnly8Bit
 164++A587 32 DF A3    >                        ld  (TacticsVectorY+2),a
 165++A58A                                      FlipSignMem TacticsVectorZ+2                ; .
 165++A58A 3A E3 A3    >                        ld  a,(TacticsVectorZ+2)
 165++A58D EE 80       >                        xor SignOnly8Bit
 165++A58F 32 E3 A3    >                        ld  (TacticsVectorZ+2),a
 166++A592 CD A9 A5                             call    SeekingLogic
 167++A595 C9                                   ret
 168++A596 3A 53 80     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 169++A599                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 169++A599 FE 0C       >                        cp    UniverseSlotListSize
 169++A59B D0          >                        ret	 nc
 170++A59C C3 8A A2     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 171++A59F                                      ; DUMMY RET get a free return by using jp
 172++A59F CD 45 C7     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 173++A5A2                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 173++A5A2 AF          >                        xor     a
 173++A5A3 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 174++A5A6 C3 96 A5                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 175++A5A9                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 176++A5A9
 177++A5A9 CD DF A9     SeekingLogic:           call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 178++A5AC 32 9C A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 179++A5AF 3A 8C 7E                             ld      a,(varS)                            ; get sign from dot product
 180++A5B2 32 A0 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A5B5 CD 35 AA     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 182++A5B8 32 9F A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 183++A5BB 3A 8C 7E                             ld      a,(varS)                            ; .
 184++A5BE 32 A0 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 185++A5C1 CD CB A5                             call    SimplifiedShipPitchv3
 186++A5C4 CD EF A5                             call    SimplifiedShipRollv3
 187++A5C7 CD 1D A6                             call    SimplifiedShipSpeedv3
 188++A5CA C9                                   ret
 189++A5CB
 190++A5CB              SimplifiedShipPitchv3:  ;break
 191++A5CB 2A 9F A3                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 192++A5CE 7C                                   ld      a,h                                ; .
 193++A5CF EE 80                                xor     $80                                ; .
 194++A5D1 E6 80                                and     $80                                ; .
 195++A5D3 67                                   ld      h,a                                ; h  = flipped sign
 196++A5D4 7D                                   ld      a,l                                ; a = value * 2
 197++A5D5 CB 27                                sla     a                                  ;
 198++A5D7                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 198++A5D7 FE 10       >                        cp     16
 198++A5D9 D2 E5 A5    >                        jp		nc,.skipPitchZero
 199++A5DC                                      ZeroA                                      ; else we zero pitch but
 199++A5DC AF          >                        xor a
 200++A5DD B4                                   or      h                                  ; we need to retain the sign
 201++A5DE 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 202++A5E1                                      IFDEF MISSILEDEBUG
 203++A5E1 32 2C A4                                 ld  (TacticsRotZ),a
 204++A5E4                                      ENDIF
 205++A5E4 C9                                   ret
 206++A5E5 3E 02        .skipPitchZero:         ld      a,2
 207++A5E7 B4                                   or      h
 208++A5E8 32 49 C0                             ld      (UBnKRotZCounter),a
 209++A5EB                                      IFDEF MISSILEDEBUG
 210++A5EB 32 2C A4                                 ld  (TacticsRotZ),a
 211++A5EE                                      ENDIF
 212++A5EE C9                                   ret
 213++A5EF
 214++A5EF              ;Direct on dot product nose is $24
 215++A5EF              ; Position                  Pitch   Roll    Speed
 216++A5EF              ; Top left forwards         up      -ve     +
 217++A5EF              ; Top right forwards        up      +ve     +
 218++A5EF              ; Bottom left forwards      down    -ve     +
 219++A5EF              ; Bottom right forwards     down    +ve     +
 220++A5EF              ; Top left rear             up      -ve     -
 221++A5EF              ; Top right rear            up      +ve     -
 222++A5EF              ; Bottom left rear          down    -ve     -
 223++A5EF              ; Bottom right rear         down    +ve     -
 224++A5EF
 225++A5EF
 226++A5EF
 227++A5EF              SimplifiedShipRollv3:  ; ld      a,(UBnKRotXCounter)               ; get current roll
 228++A5EF                                     ; sla     a                                 ; * 2 to also abs
 229++A5EF                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 230++A5EF CD 3B AA                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 231++A5F2 32 A2 A3                             ld      (TacticsDotProduct3),a             ; .
 232++A5F5 6F                                   ld      l,a                                ; .
 233++A5F6 3A 8C 7E                             ld      a,(varS)                           ; .
 234++A5F9 32 A3 A3                             ld      (TacticsDotProduct3+1),a           ; .
 235++A5FC 67                                   ld      h,a                                ; h = sign sidev
 236++A5FD 3A A0 A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 237++A600                                      ;xor     $80                               ; .
 238++A600                                      ;xor     h                                 ; b = flip against pitch sign
 239++A600                                      ;and     $80                               ; .
 240++A600                                      ;xor $80
 241++A600 47                                   ld      b,a                                ; b = roof product
 242++A601 7D                                   ld      a,l                                ; a = abs sidev  * 2
 243++A602 CB 27                                sla     a                                  ;
 244++A604                                      JumpIfAGTENusng 16,.skipRollZero           ;
 244++A604 FE 10       >                        cp     16
 244++A606 D2 12 A6    >                        jp		nc,.skipRollZero
 245++A609                                      ZeroA                                      ; if its zoer then set rotx to zero
 245++A609 AF          >                        xor a
 246++A60A B0                                   or      b
 247++A60B 32 48 C0                             ld      (UBnKRotXCounter),a
 248++A60E                                      IFDEF MISSILEDEBUG
 249++A60E 32 2A A4                                 ld  (TacticsRotX),a
 250++A611                                      ENDIF
 251++A611 C9                                   ret
 252++A612 3E 02        .skipRollZero:          ld      a,2
 253++A614 B4                                   or      h
 254++A615 A8                                   xor     b
 255++A616 32 48 C0                             ld      (UBnKRotXCounter),a
 256++A619                                      IFDEF MISSILEDEBUG
 257++A619 32 2A A4                                 ld  (TacticsRotX),a
 258++A61C                                      ENDIF
 259++A61C C9                                   ret
 260++A61D
 261++A61D 2A 9C A3     SimplifiedShipSpeedv3:  ld      hl,(TacticsDotProduct1)
 262++A620 7C                                   ld      a,h
 263++A621 A7                                   and     a
 264++A622 20 13                                jr      nz,.SlowDown
 265++A624 ED 5B 9F A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 266++A628 7D                                   ld      a,l
 267++A629                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 267++A629 FE 16       >                        cp      22
 267++A62B DA 37 A6    >                        jp		c, .SlowDown
 268++A62E 3E 03        .Accelerate:            ld      a,3                                 ; else
 269++A630 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 270++A633                                      IFDEF MISSILEDEBUG
 271++A633 32 2E A4                                 ld  (TacticsSpeed),a
 272++A636                                      ENDIF
 273++A636 C9                                   ret                                         ;  .
 274++A637              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 274++A637 FE 12       >                        cp      18
 274++A639 DA 45 A6    >                        jp		c, .NoSpeedChange
 275++A63C 3E FE        .Deccelerate:           ld      a,-2
 276++A63E 32 47 C0                             ld      (UBnKAccel),a
 277++A641                                      IFDEF MISSILEDEBUG
 278++A641 32 2E A4                                 ld  (TacticsSpeed),a
 279++A644                                      ENDIF
 280++A644 C9                                   ret
 281++A645              .NoSpeedChange:         ZeroA                                       ; else no change
 281++A645 AF          >                        xor a
 282++A646 32 47 C0                             ld      (UBnKAccel),a
 283++A649                                      IFDEF MISSILEDEBUG
 284++A649 32 2E A4                                 ld  (TacticsSpeed),a
 285++A64C                                      ENDIF
 286++A64C C9                                   ret
 287++A64D
 288++A64D
 289++A64D CD 8C A6     SimplifiedShipSpeedv3b:  call    GetDistance                         ;
 290++A650 7C                                   ld      a,h
 291++A651 A7                                   and     a
 292++A652 06 16                                ld      b,22
 293++A654 20 08                                jr      nz,.NotSlow
 294++A656 7D           .CloseSlowTest:         ld      a,l
 295++A657                                      JumpIfAGTENusng 30, .NotSlow
 295++A657 FE 1E       >                        cp     30
 295++A659 D2 5E A6    >                        jp		nc,.NotSlow
 296++A65C 06 3C                                ld      b,60
 297++A65E 2A 9C A3     .NotSlow:               ld      hl,(TacticsDotProduct1)             ; if nosedir is negative (pointing the wrong way)
 298++A661 7C                                   ld      a,h                                 ; or nosedir < 22 (very far off)
 299++A662 E6 80                                and     $80                                 ; do decelleration test
 300++A664 C2 75 A6                             jp      nz,.DecelTest                       ; .
 301++A667 7D                                   ld      a,l                                 ; .
 302++A668                                      JumpIfALTNusng b, .DecelTest                ; .
 302++A668 B8          >                        cp      b
 302++A669 DA 75 A6    >                        jp		c, .DecelTest
 303++A66C 3E 03        .Accelerate:            ld      a,3                                 ; else
 304++A66E 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 305++A671                                      IFDEF MISSILEDEBUG
 306++A671 32 2E A4                                 ld  (TacticsSpeed),a
 307++A674                                      ENDIF
 308++A674 C9                                   ret                                         ;  .
 309++A675 7D           .DecelTest:             ld      a,l                                 ; if abs acelleration > 18
 310++A676                                      JumpIfAGTENusng 18 ,.Deccelerate             ;    decelerate by 2
 310++A676 FE 12       >                        cp     18
 310++A678 D2 83 A6    >                        jp		nc,.Deccelerate
 311++A67B              .NoSpeedChange:         ZeroA                                       ; else no change
 311++A67B AF          >                        xor a
 312++A67C 32 47 C0                             ld      (UBnKAccel),a
 313++A67F                                      IFDEF MISSILEDEBUG
 314++A67F 32 2E A4                                 ld  (TacticsSpeed),a
 315++A682                                      ENDIF
 316++A682 C9                                   ret
 317++A683 3E FE        .Deccelerate:           ld      a,-2
 318++A685 32 47 C0                             ld      (UBnKAccel),a
 319++A688                                      IFDEF MISSILEDEBUG
 320++A688 32 2E A4                                 ld  (TacticsSpeed),a
 321++A68B                                      ENDIF
 322++A68B C9                                   ret
 323++A68C
 324++A68C 2A D9 A3     GetDistance:            ld      hl,(TacticsVectorX)
 325++A68F ED 5B DD A3                          ld      de,(TacticsVectorY)
 326++A693 ED 4B E1 A3                          ld      bc,(TacticsVectorZ)
 327++A697 7C                                   ld      a,h
 328++A698 E6 7F                                and     $7F
 329++A69A 67                                   ld      h,a
 330++A69B 78                                   ld      a,b
 331++A69C E6 7F                                and     $7F
 332++A69E 47                                   ld      b,a
 333++A69F 7A                                   ld      a,d
 334++A6A0 E6 7F                                and     $7F
 335++A6A2 57                                   ld      d,a
 336++A6A3 09                                   add     hl,bc
 337++A6A4 19                                   add     hl,de
 338++A6A5                                      ShiftHLRight1
 338++A6A5 CB 3C       >			   srl h
 338++A6A7 CB 1D       >			   rr  l
 339++A6A9                                      ShiftHLRight1
 339++A6A9 CB 3C       >			   srl h
 339++A6AB CB 1D       >			   rr  l
 340++A6AD C9                                   ret
 341++A6AE
 342++A6AE
# file closed: ./GameEngine/../GameEngine/MissileAI.asm
 270+ A6AE                                      INCLUDE "../GameEngine/NormalAI.asm"
# file opened: ./GameEngine/../GameEngine/NormalAI.asm
   1++A6AE               ;                       DEFINE DEBUGFORCEHOSTILE 1
   2++A6AE
   3++A6AE 00 00 00     NewLaunchUBnKX          DS 3
   4++A6B1 00 00 00     NewLaunchUBnKY          DS 3
   5++A6B4 00 00 00     NewLaunchUBnKZ          DS 3
   6++A6B7
   7++A6B7 00 00 00...  NewLaunchMatrix         DS 3*3*2    ; 3x3 matrix of 3 bytes
   8++A6C9 00           NewLaunchSpeed          DS 1
   9++A6CA 00           NewLaunchRotX           DS 1
  10++A6CB 00           NewLaunchRotZ           DS 1
  11++A6CC
  12++A6CC              NewLaunchDataBlockSize  equ (3*3) + (3*3*2)
  13++A6CC              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++A6CC              ; a = y offset negative from center of ship
  15++A6CC 21 20 C0     CalcLaunchOffset:       ld      hl,UBnKxlo
  16++A6CF 11 AE A6                             ld      de,NewLaunchUBnKX
  17++A6D2 01 1B 00                             ld      bc,NewLaunchDataBlockSize
  18++A6D5 ED B0                                ldir
  19++A6D7 CB 27        .ApplyOffset:           sla     a
  20++A6D9 CB 27                                sla     a
  21++A6DB FD 6F                                ld      iyl,a                          ; save pre calculated speed
  22++A6DD              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatRoofvX     ; e =  ABS (nosev x hi) c = sign
  22++A6DD 5F          >                        ld      e,a
  22++A6DE 2A 2F C0    >                        ld      hl,(UBnkrotmatRoofvX)
  22++A6E1 7C          >                        ld      a,h
  22++A6E2             >                        ClearSignBitA
  22++A6E2 E6 7F       >                        and     SignMask8Bit
  22++A6E4 57          >                        ld      d,a
  22++A6E5 ED 30       >                        mul     de
  22++A6E7 7C          >                        ld      a,h
  22++A6E8             >                        SignBitOnlyA
  22++A6E8 E6 80       >                        and     SignOnly8Bit
  22++A6EA 47          >                        ld      b,a;ld      c,a
  22++A6EB 62          >                        ld      h,d;ld      e,d
  22++A6EC 0E 00       >                        ld      c,0;ld      d,0
  23++A6EE 78                                   ld      a,b
  24++A6EF EE 80                                xor     $80
  25++A6F1 47                                   ld      b,a
  26++A6F2              .AddSpeedToX:           AddSpeedToVert NewLaunchUBnKX
  26++A6F2 ED 5B AF A6 >                        ld      de,(NewLaunchUBnKX+1)
  26++A6F6 3A AE A6    >                        ld      a,(NewLaunchUBnKX)
  26++A6F9 6F          >                        ld      l,a
  26++A6FA CD 5C 8F    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  26++A6FD 7D          >                        ld      a,l
  26++A6FE 32 AE A6    >                        ld      (NewLaunchUBnKX),a
  26++A701 ED 53 AF A6 >                        ld      (NewLaunchUBnKX+1),de
  27++A705              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatRoofvY
  27++A705 FD 5D       >                        ld      e,iyl
  27++A707 2A 31 C0    >                        ld      hl,(UBnkrotmatRoofvY)
  27++A70A 7C          >                        ld      a,h
  27++A70B             >                        ClearSignBitA
  27++A70B E6 7F       >                        and     SignMask8Bit
  27++A70D 57          >                        ld      d,a
  27++A70E ED 30       >                        mul     de
  27++A710 7C          >                        ld      a,h
  27++A711             >                        SignBitOnlyA
  27++A711 E6 80       >                        and     SignOnly8Bit
  27++A713 47          >                        ld      b,a;ld      c,a
  27++A714 62          >                        ld      h,d;ld      e,d
  27++A715 0E 00       >                        ld      c,0;ld      d,0
  28++A717 78                                   ld      a,b
  29++A718 EE 80                                xor     $80
  30++A71A 47                                   ld      b,a
  31++A71B              .AddSpeedToY:           AddSpeedToVert NewLaunchUBnKY
  31++A71B ED 5B B2 A6 >                        ld      de,(NewLaunchUBnKY+1)
  31++A71F 3A B1 A6    >                        ld      a,(NewLaunchUBnKY)
  31++A722 6F          >                        ld      l,a
  31++A723 CD 5C 8F    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  31++A726 7D          >                        ld      a,l
  31++A727 32 B1 A6    >                        ld      (NewLaunchUBnKY),a
  31++A72A ED 53 B2 A6 >                        ld      (NewLaunchUBnKY+1),de
  32++A72E              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatRoofvZ
  32++A72E FD 5D       >                        ld      e,iyl
  32++A730 2A 33 C0    >                        ld      hl,(UBnkrotmatRoofvZ)
  32++A733 7C          >                        ld      a,h
  32++A734             >                        ClearSignBitA
  32++A734 E6 7F       >                        and     SignMask8Bit
  32++A736 57          >                        ld      d,a
  32++A737 ED 30       >                        mul     de
  32++A739 7C          >                        ld      a,h
  32++A73A             >                        SignBitOnlyA
  32++A73A E6 80       >                        and     SignOnly8Bit
  32++A73C 47          >                        ld      b,a;ld      c,a
  32++A73D 62          >                        ld      h,d;ld      e,d
  32++A73E 0E 00       >                        ld      c,0;ld      d,0
  33++A740 78                                   ld      a,b
  34++A741 EE 80                                xor     $80
  35++A743 47                                   ld      b,a
  36++A744              .AddSpeedToZ:           AddSpeedToVert NewLaunchUBnKZ
  36++A744 ED 5B B5 A6 >                        ld      de,(NewLaunchUBnKZ+1)
  36++A748 3A B4 A6    >                        ld      a,(NewLaunchUBnKZ)
  36++A74B 6F          >                        ld      l,a
  36++A74C CD 5C 8F    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  36++A74F 7D          >                        ld      a,l
  36++A750 32 B4 A6    >                        ld      (NewLaunchUBnKZ),a
  36++A753 ED 53 B5 A6 >                        ld      (NewLaunchUBnKZ+1),de
  37++A757 C9                                   ret
  38++A758
  39++A758
  40++A758
  41++A758                                      ;DEFINE MISSILEBREAK
  42++A758              ;.. Thsi version uses new kind logic
  43++A758              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
  44++A758              NormalAI:               ;ld      a,(ShipAIEnabled)
  45++A758                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  46++A758 CD 53 C6     .GetEnergy:             call    RechargeEnergy                  ; TA13 if enegery <= maxumum value for blueprint then recharge energy by 1
  47++A75B 3A 0E C4                             ld      a,(ShipNewBitsAddr)
  48++A75E E6 01        .IsItATrader:           and     ShipIsTrader
  49++A760 20 06                                jr      nz, .NotATrader
  50++A762 CD 1C 84     .ItsATrader:            call    doRandom
  51++A765                                      ReturnIfALTNusng 100                    ; 61% chance do nothing
  51++A765 FE 64       >                        cp    100
  51++A767 D8          >                        ret	 c
  52++A768                                      IFDEF DEBUGFORCEHOSTILE
  53++A768 ~                                            call SetShipHostile
  54++A768 ~                                            ld      a,(ShipNewBitsAddr)
  55++A768 ~                                            or      ShipIsBountyHunter
  56++A768 ~                                            ld      (ShipNewBitsAddr),a
  57++A768                                      ENDIF
  58++A768              .NotATrader:
  59++A768 3A 0E C4     .IsItBountyHunter:      ld      a,(ShipNewBitsAddr)
  60++A76B E6 02                                and     ShipIsBountyHunter
  61++A76D 20 08                                jr      nz, .NotBountyHunter
  62++A76F              .CheckFIST:             CallIfMemGTENusng FugitiveInnocentStatus, 40, SetShipHostile ; if our FIST rating >= 40 set ship hostile (bit 2)
  62++A76F 3A 3B 7F    >                        ld      a,(FugitiveInnocentStatus)
  62++A772 FE 28       >                        cp      40
  62++A774 D4 1A C6    >                        call    nc,SetShipHostile
  63++A777              .NotBountyHunter:
  64++A777 3A 0E C4     .CheckHostile:          ld      a,(ShipNewBitsAddr)
  65++A77A E6 04                                and     ShipIsHostile
  66++A77C 20 09                                jr      nz,.ItsHostile
  67++A77E 3A 0E C4     .ItsNotHostile:         ld      a,(ShipNewBitsAddr)
  68++A781 E6 10                                and     ShipIsDocking                   ; if bit 4 is not clear
  69++A783 20 01                                jr      nz,.NotDocking
  70++A785              .ItsDocking:            ;break
  71++A785                                      ;       do docking algorithm
  72++A785                                      ;       return
  73++A785 C9                                   ret
  74++A786              .NotDocking:            ;break
  75++A786                                      ;       calcuilate vector to planet
  76++A786                                      ;       move towards planet
  77++A786                                      ;       return
  78++A786 C9                                   ret
  79++A787 3A 0E C4     .ItsHostile:            ld      a,(ShipNewBitsAddr)
  80++A78A E6 08        .IsItPirate:            and     ShipIsPirate
  81++A78C 20 0E                                jr      nz,.NotAPirate
  82++A78E              .IsItInSafeZone:        ;      if we are not in space station safe zone
  83++A78E 3A 0E C4     .InSafeZone:            ld      a,(ShipNewBitsAddr)
  84++A791 F6 81                                or      Bit7Only | ShipIsTrader
  85++A793 CD 72 AA     .NotSafeZone:           call    SetPlayerAsTarget
  86++A796 CD 4D AA                             call    CopyPosToVector
  87++A799 CD D3 AA                             call    NormalizeTactics
  88++A79C              .NotAPirate:
  89++A79C 3A 5E C0     .SpawnFighter:          ld      a,(UBnKFightersLeft)
  90++A79F A7                                   and     a
  91++A7A0 28 0C                                jr      z,.NoFighters
  92++A7A2 CD 1C 84     .CanSpawnFighter:       call    doRandom
  93++A7A5                                      JumpIfALTNusng 200, .NoFighters
  93++A7A5 FE C8       >                        cp      200
  93++A7A7 DA AE A7    >                        jp		c, .NoFighters
  94++A7AA                                      ;break
  95++A7AA                                      ;SPAWN FIGHTER of Type UBnKFighterShipId at Y - 20 z - 20
  96++A7AA 21 5E C0                             ld      hl,UBnKFightersLeft             ;reduced figters left
  97++A7AD 35                                   dec     (hl)
  98++A7AE                                      ;inherits parent's ai angry
  99++A7AE 3A 83 7D     .NoFighters:            ld      a,(RandomSeed3)                 ;if random >= 250
 100++A7B1 F6 68                                or      104                             ;set a noticable roll
 101++A7B3 3A 05 C4     .CheckEnergyLevels:     ld      a,(EnergyAddr)
 102++A7B6 47                                   ld      b,a
 103++A7B7 3A 58 C0                             ld      a,(UBnKEnergy)
 104++A7BA CB 38                                srl     b                               ; max energy / 2
 105++A7BC                                      JumpIfAGTENusng b,.EnergyOverHalf       ; if ship max energy / 2 < current enerhy
 105++A7BC B8          >                        cp     b
 105++A7BD D2 E0 A7    >                        jp		nc,.EnergyOverHalf
 106++A7C0 CB 38                                srl     b
 107++A7C2                                      JumpIfAGTENusng b,.EnergyOverQuater     ; if ship max enery / 4 < current energy
 107++A7C2 B8          >                        cp     b
 107++A7C3 D2 E0 A7    >                        jp		nc,.EnergyOverQuater
 108++A7C6 3A 0E C4                             ld      a,(ShipNewBitsAddr)
 109++A7C9 E6 80                                and     ShipHasEscapePod
 110++A7CB 28 13                                jr      z, .NoEscapePod
 111++A7CD 3A 82 7D                             ld      a,(RandomSeed2)
 112++A7D0                                      JumpIfALTNusng 230,.NoEscapePod         ;if random >= 230
 112++A7D0 FE E6       >                        cp      230
 112++A7D2 DA E0 A7    >                        jp		c, .NoEscapePod
 113++A7D5 3A 54 C0                             ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 114++A7D8 E6 7F                                and     ShipAIDisabled                  ;  .
 115++A7DA 32 54 C0                             ld      (UBnkaiatkecm),a                ;  .
 116++A7DD                                      ;ZeroA                                   ;  .
 117++A7DD 32 5A C0                             ld      (UBnKECMFitted),a               ;  .
 118++A7E0              .LaunchEscapePod:       ;break
 119++A7E0                                      ;            goto spawn escape pod
 120++A7E0              .EnergyOverHalf:
 121++A7E0              .EnergyOverQuater:
 122++A7E0 3A 5C C0     .NoEscapePod:           ld      a,(UBnKMissilesLeft)            ;      if missiles > 0
 123++A7E3 47                                   ld      b,a
 124++A7E4                                      JumpIfAIsZero .NoMissileLaunch
 124++A7E4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 124++A7E5 CA FB A7    >                        jp	    z, .NoMissileLaunch
 125++A7E8 3A 83 7D     .MissileLaunchTest:     ld      a,(RandomSeed3)                 ;         if random and 15 > = nbr missiles
 126++A7EB E6 0F                                and     15
 127++A7ED                                      JumpIfALTNusng b, .NoMissileLaunch
 127++A7ED B8          >                        cp      b
 127++A7EE DA FB A7    >                        jp		c, .NoMissileLaunch
 128++A7F1 3A 9F 7D                             ld      a,(ECMCountDown)
 129++A7F4                                      JumpIfAIsNotZero  .NoMissileLaunch
 129++A7F4 A7          >                        and     a
 129++A7F5 C2 FB A7    >                        jp	    nz,.NoMissileLaunch
 130++A7F8 C3 1A 62                             jp    LaunchEnemyMissile                ; jump out and return if firing missile
 131++A7FB 3A 21 C0     .NoMissileLaunch:       ld      a,(UBnKxhi)
 132++A7FE 2A 24 C0                             ld      hl,(UBnKyhi)
 133++A801 B6                                   or      (hl)
 134++A802 2A 27 C0                             ld      hl,(UBnKzhi)
 135++A805 B6                                   or      (hl)
 136++A806                                      JumpIfAGTENusng 160, .TooFarForLaser   ; if in laser range (all highs order together < 160)
 136++A806 FE A0       >                        cp     160
 136++A808 D2 2F A8    >                        jp		nc,.TooFarForLaser
 137++A80B CD DF A9                             call    XX12EquTacticsDotNosev
 138++A80E 47                                   ld      b,a
 139++A80F 3A 8C 7E                             ld      a,(varS)
 140++A812                                      JumpIfAIsNotZero .TooFarForLaser        ;   if dot product of ship < 160 i.e. > -32
 140++A812 A7          >                        and     a
 140++A813 C2 2F A8    >                        jp	    nz,.TooFarForLaser
 141++A816 78                                   ld      a,b                            ;    .
 142++A817                                      JumpIfALTNusng    32, .DoneLaserShot  ;    .
 142++A817 FE 20       >                        cp      32
 142++A819 DA 2A A8    >                        jp		c, .DoneLaserShot
 143++A81C              .FireLaser:             ;break                        ;      do fire laser logic (drain energy, add beam to lines as random line from ship to a random edge of screen)
 144++A81C 78                                   ld      a,b ;; need to see if b gets corrupted by laser fire
 145++A81D                                      JumpIfAEqNusng      35, .LaserHitPlayer
 145++A81D FE 23       >                        cp     35
 145++A81F CA 2A A8    >                        jp      z,.LaserHitPlayer
 146++A822                                      JumpIfAEqNusng      36, .LaserHitPlayer
 146++A822 FE 24       >                        cp     36
 146++A824 CA 2A A8    >                        jp      z,.LaserHitPlayer
 147++A827 C3 2A A8     .LaserMissedPlayer:     jp      .DoneLaserShot
 148++A82A              .LaserHitPlayer:        ;break ;         do direct hit logic
 149++A82A 21 47 C0     .DoneLaserShot:         ld      hl,UBnKAccel                   ;      Half attacking ship's accelleration in byte 28 (dec so must be 0 1 or 2)
 150++A82D CB 26                                sla     (hl)
 151++A82F              .TooFarForLaser:
 152++A82F              .UpdateShip             ;break
 153++A82F CD E3 A1                             call    CalculateAgression              ; refresh aggression levels
 154++A832 3A 27 C0                             ld      a,(UBnKzhi)
 155++A835                                      JumpIfAGTENusng 3, .ShipFarAway
 155++A835 FE 03       >                        cp     3
 155++A837 D2 45 A8    >                        jp		nc,.ShipFarAway
 156++A83A 3A 21 C0                             ld      a,(UBnKxhi)
 157++A83D 2A 24 C0                             ld      hl,(UBnKyhi)
 158++A840 B6                                   or      (hl)
 159++A841 E6 FE                                and     %11111110
 160++A843 28 26                                jr      z,.ShipTurnAway
 161++A845 3A 82 7D     .ShipFarAway:           ld      a,(RandomSeed2)                     ; if random with bit 7 set < ship AI byte 32 flag
 162++A848                                      ;or      %10000000               ; .
 163++A848                                      JumpIfAGTEMemusng UBnKShipAggression, .ShipTurnAway
 163++A848 21 53 C0    >                        ld      hl,UBnKShipAggression
 163++A84B BE          >                        cp      (hl)
 163++A84C D2 6B A8    >                        jp		nc,.ShipTurnAway
 164++A84F                                      FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 164++A84F 3A DB A3    >                        ld  a,(TacticsVectorX+2)
 164++A852 EE 80       >                        xor SignOnly8Bit
 164++A854 32 DB A3    >                        ld  (TacticsVectorX+2),a
 165++A857                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 165++A857 3A DF A3    >                        ld  a,(TacticsVectorY+2)
 165++A85A EE 80       >                        xor SignOnly8Bit
 165++A85C 32 DF A3    >                        ld  (TacticsVectorY+2),a
 166++A85F                                      FlipSignMem TacticsVectorZ+2                ; .
 166++A85F 3A E3 A3    >                        ld  a,(TacticsVectorZ+2)
 166++A862 EE 80       >                        xor SignOnly8Bit
 166++A864 32 E3 A3    >                        ld  (TacticsVectorZ+2),a
 167++A867 CD 6F A8                             call    ShipSeekingLogic            ;    seek as per missile
 168++A86A C9                                   ret
 169++A86B CD 6F A8     .ShipTurnAway:          call    ShipSeekingLogic            ; move away (ie.. as per missile but dot products not reversed)
 170++A86E                                      ;              consider a random roll
 171++A86E C9                                   ret
 172++A86F
 173++A86F CD DF A9     ShipSeekingLogic:       call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 174++A872 32 9C A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 175++A875 3A 8C 7E                             ld      a,(varS)                            ; get sign from dot product
 176++A878 32 A0 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 177++A87B CD 35 AA     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 178++A87E 32 9F A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 179++A881 3A 8C 7E                             ld      a,(varS)                            ; .
 180++A884 32 A0 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A887 CD 91 A8                             call    ShipPitchv3
 182++A88A CD B5 A8                             call    ShipRollv3
 183++A88D CD E3 A8                             call    ShipSpeedv3
 184++A890 C9                                   ret
 185++A891
 186++A891 2A 9F A3     ShipPitchv3:            ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 187++A894 7C                                   ld      a,h                                ; .
 188++A895 EE 80                                xor     $80                                ; .
 189++A897 E6 80                                and     $80                                ; .
 190++A899 67                                   ld      h,a                                ; h  = flipped sign
 191++A89A 7D                                   ld      a,l                                ; a = value * 2
 192++A89B CB 27                                sla     a                                  ;
 193++A89D                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 193++A89D FE 10       >                        cp     16
 193++A89F D2 AB A8    >                        jp		nc,.skipPitchZero
 194++A8A2                                      ZeroA                                      ; else we zero pitch but
 194++A8A2 AF          >                        xor a
 195++A8A3 B4                                   or      h                                  ; we need to retain the sign
 196++A8A4 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 197++A8A7                                      IFDEF MISSILEDEBUG
 198++A8A7 32 2C A4                                 ld  (TacticsRotZ),a
 199++A8AA                                      ENDIF
 200++A8AA C9                                   ret
 201++A8AB 3E 02        .skipPitchZero:         ld      a,2
 202++A8AD B4                                   or      h
 203++A8AE 32 49 C0                             ld      (UBnKRotZCounter),a
 204++A8B1                                      IFDEF MISSILEDEBUG
 205++A8B1 32 2C A4                                 ld  (TacticsRotZ),a
 206++A8B4                                      ENDIF
 207++A8B4 C9                                   ret
 208++A8B5
 209++A8B5 CD 3B AA     ShipRollv3:             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 210++A8B8 32 A2 A3                             ld      (TacticsDotProduct3),a             ; .
 211++A8BB 6F                                   ld      l,a                                ; .
 212++A8BC 3A 8C 7E                             ld      a,(varS)                           ; .
 213++A8BF 32 A3 A3                             ld      (TacticsDotProduct3+1),a           ; .
 214++A8C2 67                                   ld      h,a                                ; h = sign sidev
 215++A8C3 3A A0 A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 216++A8C6 47                                   ld      b,a                                ; b = roof product
 217++A8C7 7D                                   ld      a,l                                ; a = abs sidev  * 2
 218++A8C8 CB 27                                sla     a                                  ;
 219++A8CA                                      JumpIfAGTENusng 16,.skipRollZero           ;
 219++A8CA FE 10       >                        cp     16
 219++A8CC D2 D8 A8    >                        jp		nc,.skipRollZero
 220++A8CF                                      ZeroA                                      ; if its zoer then set rotx to zero
 220++A8CF AF          >                        xor a
 221++A8D0 B0                                   or      b
 222++A8D1 32 48 C0                             ld      (UBnKRotXCounter),a
 223++A8D4                                      IFDEF MISSILEDEBUG
 224++A8D4 32 2A A4                                 ld  (TacticsRotX),a
 225++A8D7                                      ENDIF
 226++A8D7 C9                                   ret
 227++A8D8 3E 02        .skipRollZero:          ld      a,2
 228++A8DA B4                                   or      h
 229++A8DB A8                                   xor     b
 230++A8DC 32 48 C0                             ld      (UBnKRotXCounter),a
 231++A8DF                                      IFDEF MISSILEDEBUG
 232++A8DF 32 2A A4                                 ld  (TacticsRotX),a
 233++A8E2                                      ENDIF
 234++A8E2 C9                                   ret
 235++A8E3
 236++A8E3 2A 9C A3     ShipSpeedv3:            ld      hl,(TacticsDotProduct1)
 237++A8E6 7C                                   ld      a,h
 238++A8E7 A7                                   and     a
 239++A8E8 20 13                                jr      nz,.SlowDown
 240++A8EA ED 5B 9F A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 241++A8EE 7D                                   ld      a,l
 242++A8EF                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 242++A8EF FE 16       >                        cp      22
 242++A8F1 DA FD A8    >                        jp		c, .SlowDown
 243++A8F4 3E 03        .Accelerate:            ld      a,3                                 ; else
 244++A8F6 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 245++A8F9                                      IFDEF MISSILEDEBUG
 246++A8F9 32 2E A4                                 ld  (TacticsSpeed),a
 247++A8FC                                      ENDIF
 248++A8FC C9                                   ret                                         ;  .
 249++A8FD              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 249++A8FD FE 12       >                        cp      18
 249++A8FF DA 0B A9    >                        jp		c, .NoSpeedChange
 250++A902 3E FF        .Deccelerate:           ld      a,-1
 251++A904 32 47 C0                             ld      (UBnKAccel),a
 252++A907                                      IFDEF MISSILEDEBUG
 253++A907 32 2E A4                                 ld  (TacticsSpeed),a
 254++A90A                                      ENDIF
 255++A90A C9                                   ret
 256++A90B              .NoSpeedChange:         ZeroA                                       ; else no change
 256++A90B AF          >                        xor a
 257++A90C 32 47 C0                             ld      (UBnKAccel),a
 258++A90F                                      IFDEF MISSILEDEBUG
 259++A90F 32 2E A4                                 ld  (TacticsSpeed),a
 260++A912                                      ENDIF
 261++A912 C9                                   ret
 262++A913              ;;;ShipPitchv2:  ;break
 263++A913              ;;;                        ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 264++A913              ;;;                        ld      a,h                                ; .
 265++A913              ;;;                        xor     $80                                ; .
 266++A913              ;;;                        and     $80                                ; .
 267++A913              ;;;                        ld      h,a                                ; h  = flipped sign
 268++A913              ;;;                        ld      a,l                                ; a = value * 2
 269++A913              ;;;                        sla     a                                  ;
 270++A913              ;;;                        JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 271++A913              ;;;                        ZeroA                                      ; else we zero pitch but
 272++A913              ;;;                        or      h                                  ; we need to retain the sign
 273++A913              ;;;                        ld      (UBnKRotZCounter),a                ; .
 274++A913              ;;;                        IFDEF MISSILEDEBUG
 275++A913              ;;;                            ld  (TacticsRotZ),a
 276++A913              ;;;                        ENDIF
 277++A913              ;;;                        ret
 278++A913              ;;;.skipPitchZero:         ld      a,3
 279++A913              ;;;                        or      h
 280++A913              ;;;                        ld      (UBnKRotZCounter),a
 281++A913              ;;;                        IFDEF MISSILEDEBUG
 282++A913              ;;;                            ld  (TacticsRotZ),a
 283++A913              ;;;                        ENDIF
 284++A913              ;;;                        ret
 285++A913
 286++A913
 287++A913              ;;;ShipRollv2:             ld      a,(UBnKRotXCounter)
 288++A913              ;;;                        and     $7F
 289++A913              ;;;                        cp      16
 290++A913              ;;;                        ret     z
 291++A913              ;;;                        call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 292++A913              ;;;                        ld      (TacticsDotProduct3),a             ; .
 293++A913              ;;;                        ld      l,a                                ; .
 294++A913              ;;;                        ld      a,(varS)                           ; .
 295++A913              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 296++A913              ;;;                        ld      h,a                                ; h = sign sidev
 297++A913              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 298++A913              ;;;                        ld      b,a                                ; b = roof product
 299++A913              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 300++A913              ;;;                        sla     a                                  ;
 301++A913              ;;;                        JumpIfAGTENusng 16,.skipRollZero           ;
 302++A913              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 303++A913              ;;;                        or      b
 304++A913              ;;;                        ld      (UBnKRotXCounter),a
 305++A913              ;;;                        IFDEF MISSILEDEBUG
 306++A913              ;;;                            ld  (TacticsRotX),a
 307++A913              ;;;                        ENDIF
 308++A913              ;;;                        ret
 309++A913              ;;;.skipRollZero:          ld      a,3
 310++A913              ;;;                        or      h
 311++A913              ;;;                        xor     b
 312++A913              ;;;                        ld      (UBnKRotXCounter),a
 313++A913              ;;;                        IFDEF MISSILEDEBUG
 314++A913              ;;;                            ld  (TacticsRotX),a
 315++A913              ;;;                        ENDIF
 316++A913              ;;;                        ret
 317++A913              ;;;
 318++A913              ;;;ShipSpeedv2:            ld      hl,(TacticsDotProduct1)
 319++A913              ;;;                        ld      a,h
 320++A913              ;;;                        and     a
 321++A913              ;;;                        jr      nz,.SlowDown
 322++A913              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 323++A913              ;;;                        ld      a,l
 324++A913              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 325++A913              ;;;.Accelerate:            ld      a,2                                 ; else
 326++A913              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 327++A913              ;;;                        IFDEF MISSILEDEBUG
 328++A913              ;;;                            ld  (TacticsSpeed),a
 329++A913              ;;;                        ENDIF
 330++A913              ;;;                        ret                                         ;  .
 331++A913              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 332++A913              ;;;.Deccelerate:           ld      a,-1
 333++A913              ;;;                        ld      (UBnKAccel),a
 334++A913              ;;;                        IFDEF MISSILEDEBUG
 335++A913              ;;;                            ld  (TacticsSpeed),a
 336++A913              ;;;                        ENDIF
 337++A913              ;;;                        ret
 338++A913              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 339++A913              ;;;                        ld      (UBnKAccel),a
 340++A913              ;;;                        IFDEF MISSILEDEBUG
 341++A913              ;;;                            ld  (TacticsSpeed),a
 342++A913              ;;;                        ENDIF
 343++A913              ;;;                        ret
 344++A913              ;;;
 345++A913              ;;;
 346++A913              ;;;
 347++A913              ;;;RAT2 equ    4           ; roll pitch threshold
 348++A913              ;;;RAT  equ    3           ; magnitude of counter
 349++A913              ;;;CNT2 equ    22          ; angle for ship slowdown
 350++A913              ;;;
 351++A913              ;;;
 352++A913              ;;;ShipPitch:              ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 353++A913              ;;;                        ld      a,h                                ; .
 354++A913              ;;;                        xor     $80                                ; .
 355++A913              ;;;                        and     $80                                ; .
 356++A913              ;;;                        ld      h,a                                ; h  = flipped sign
 357++A913              ;;;                        ld      a,l                                ; a = value * 2
 358++A913              ;;;                        sla     a                                  ;
 359++A913              ;;;                        JumpIfAGTENusng RAT2, .skipPitchZero         ; if its > 16 then update pitch
 360++A913              ;;;                        ZeroA                                      ; else we zero pitch but
 361++A913              ;;;                        or      h                                  ; we need to retain the sign
 362++A913              ;;;                        ld      (UBnKRotZCounter),a                ; .
 363++A913              ;;;                        IFDEF MISSILEDEBUG
 364++A913              ;;;                            ld  (TacticsRotZ),a
 365++A913              ;;;                        ENDIF
 366++A913              ;;;                        ret
 367++A913              ;;;.skipPitchZero:         ld      a,l
 368++A913              ;;;                        or      h
 369++A913              ;;;                        ld      (UBnKRotZCounter),a
 370++A913              ;;;                        IFDEF MISSILEDEBUG
 371++A913              ;;;                            ld  (TacticsRotZ),a
 372++A913              ;;;                        ENDIF
 373++A913              ;;;                        ret
 374++A913              ;;;
 375++A913              ;;;
 376++A913              ;;;                        ;
 377++A913              ;;;ShipRoll:               call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 378++A913              ;;;                        ld      (TacticsDotProduct3),a             ; .
 379++A913              ;;;                        ld      l,a                                ; .
 380++A913              ;;;                        ld      a,(varS)                           ; .
 381++A913              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 382++A913              ;;;                        ld      h,a                                ; h = sign sidev
 383++A913              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 384++A913              ;;;                        ld      b,a                                ; b = roof product
 385++A913              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 386++A913              ;;;                        sla     a                                  ;
 387++A913              ;;;                        JumpIfAGTENusng RAT2,.skipRollZero           ;
 388++A913              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 389++A913              ;;;                        or      b
 390++A913              ;;;                        ld      (UBnKRotXCounter),a
 391++A913              ;;;                        IFDEF MISSILEDEBUG
 392++A913              ;;;                            ld  (TacticsRotX),a
 393++A913              ;;;                        ENDIF
 394++A913              ;;;                        ret
 395++A913              ;;;.skipRollZero:          ld      a,1
 396++A913              ;;;                        or      h
 397++A913              ;;;                        xor     b
 398++A913              ;;;                        ld      (UBnKRotXCounter),a
 399++A913              ;;;                        IFDEF MISSILEDEBUG
 400++A913              ;;;                            ld  (TacticsRotX),a
 401++A913              ;;;                        ENDIF
 402++A913              ;;;                        ret
 403++A913              ;;;
 404++A913              ;;;ShipSpeed:              ld      hl,(TacticsDotProduct1)
 405++A913              ;;;                        ld      a,h
 406++A913              ;;;                        and     a
 407++A913              ;;;                        jr      nz,.SlowDown
 408++A913              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 409++A913              ;;;                        ld      a,l
 410++A913              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 411++A913              ;;;.Accelerate:            ld      a,3                                 ; else
 412++A913              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 413++A913              ;;;                        IFDEF MISSILEDEBUG
 414++A913              ;;;                            ld  (TacticsSpeed),a
 415++A913              ;;;                        ENDIF
 416++A913              ;;;                        ret                                         ;  .
 417++A913              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 418++A913              ;;;.Deccelerate:           ld      a,-1
 419++A913              ;;;                        ld      (UBnKAccel),a
 420++A913              ;;;                        IFDEF MISSILEDEBUG
 421++A913              ;;;                            ld  (TacticsSpeed),a
 422++A913              ;;;                        ENDIF
 423++A913              ;;;                        ret
 424++A913              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 425++A913              ;;;                        ld      (UBnKAccel),a
 426++A913              ;;;                        IFDEF MISSILEDEBUG
 427++A913              ;;;                            ld  (TacticsSpeed),a
 428++A913              ;;;                        ENDIF
 429++A913              ;;;                        ret
 430++A913
# file closed: ./GameEngine/../GameEngine/NormalAI.asm
 271+ A913
 272+ A913              ; On Entry A = TacticsDotProduct2 sign (i.e. roof direction)
 273+ A913              ; on exit a == new roll
 274+ A913 EE 80        calcNPitch:             xor     SignOnly8Bit                    ; c = sign flipped of dot product only
 275+ A915 E6 80                                and     SignOnly8Bit                    ; .
 276+ A917 4F                                   ld      c,a                             ; . (varT in effect)
 277+ A918 F6 03                                or      MISSILEMAXPITCH                 ; a = flipped sign max pitch
 278+ A91A 3A 49 C0                             ld      a,(UBnKRotZCounter)             ; b = abs (currentz pitch)
 279+ A91D C9                                   ret
 280+ A91E
 281+ A91E E6 7F                                and     SignMask8Bit                    ; . which will initially be 0
 282+ A920 47                                   ld      b,a                             ; .
 283+ A921 3A 9F A3                             ld      a,(TacticsDotProduct2)          ; a = abs roof dot product
 284+ A924                                      JumpIfALTNusng MISSILEMAXPITCH+1, .calcNPitch2    ; if a >= roll threshold
 284+ A924 FE 04       >                        cp      MISSILEMAXPITCH+1
 284+ A926 DA 33 A9    >                        jp		c, .calcNPitch2
 285+ A929 78                                   ld      a,b
 286+ A92A E6 80                                and     SignOnly8Bit
 287+ A92C                                      ;jr      z,.NPitchPositive
 288+ A92C                                     ; ld      a,
 289+ A92C 3E 03                                ld      a,MISSILEMAXPITCH                         ;    z rot = z rot * dot product flipped sign
 290+ A92E B1                                   or      c                               ;    i.e. zrot = current magnitude but dot product sign flipped
 291+ A92F 32 49 C0                             ld      (UBnKRotZCounter),a             ;    .
 292+ A932 C9                                   ret                                     ; else (a LT current abs z)
 293+ A933 B1           .calcNPitch2:           or      c                               ;     rot z = dot product with sign flipped
 294+ A934 32 49 C0                             ld      (UBnKRotZCounter),a             ;
 295+ A937 C9                                   ret                                     ;
 296+ A938
 297+ A938 3A 49 C0     calcNRoll:              ld      a,(UBnKRotZCounter)
 298+ A93B E6 80                                and     SignOnly8Bit
 299+ A93D EE 80                                xor     SignOnly8Bit                    ; flip sign of dot product
 300+ A93F F6 05                                or      5
 301+ A941 32 48 C0                             ld      (UBnKRotXCounter),a
 302+ A944 C9                                   ret
 303+ A945
 304+ A945 4F                                   ld      c,a
 305+ A946 F6 03                                or      MISSILEMAXPITCH
 306+ A948 3A 48 C0                             ld      a,(UBnKRotXCounter)
 307+ A94B C9                                   ret
 308+ A94C
 309+ A94C
 310+ A94C
 311+ A94C E6 7F                                and     SignMask8Bit                    ; get ABS value
 312+ A94E 47                                   ld      b,a
 313+ A94F 3A 9F A3                             ld      a,(TacticsDotProduct2)          ; now we have the dot product abs value
 314+ A952                                      JumpIfALTNusng MISSILEMAXROLL+1, .calcNRoll2
 314+ A952 FE 04       >                        cp      MISSILEMAXROLL+1
 314+ A954 DA 5E A9    >                        jp		c, .calcNRoll2
 315+ A957 3E 03                                ld      a,MISSILEMAXROLL
 316+ A959 B1                                   or      c
 317+ A95A 32 48 C0                             ld      (UBnKRotXCounter),a
 318+ A95D C9                                   ret
 319+ A95E B1           .calcNRoll2:            or      c                               ;     rot z = dot product with sign flipped
 320+ A95F 32 48 C0                             ld      (UBnKRotXCounter),a
 321+ A962 C9                                   ret
 322+ A963
 323+ A963
 324+ A963 21 2A C0     CopyRotSideToTacticsMat:ld      hl,UBnkrotmatSidevX+1
 325+ A966 C3 72 A9                             jp      CopyRotmatToTacticsMat
 326+ A969
 327+ A969 21 36 C0     CopyRotNoseToTacticsMat:ld      hl,UBnkrotmatNosevX+1
 328+ A96C C3 72 A9                             jp      CopyRotmatToTacticsMat
 329+ A96F
 330+ A96F 21 30 C0     CopyRotRoofToTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 331+ A972              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 332+ A972 11 BD A3     CopyRotmatToTacticsMat: ld      de,TacticsRotMatX
 333+ A975 7E                                   ld      a,(hl)              ; matrix high byte of x
 334+ A976 47                                   ld      b,a
 335+ A977 E6 7F                                and     SignMask8Bit
 336+ A979 12                                   ld      (de),a              ; set rot mat value
 337+ A97A 13                                   inc     de
 338+ A97B 78                                   ld      a,b
 339+ A97C E6 80                                and     SignOnly8Bit
 340+ A97E 12                                   ld      (de),a              ; set rot mat sign
 341+ A97F 13                                   inc     de                  ; move to next rot mat element
 342+ A980 23                                   inc     hl
 343+ A981 23                                   inc     hl                  ; matrix high byte of y
 344+ A982 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 345+ A983 47                                   ld      b,a
 346+ A984 E6 7F                                and     SignMask8Bit
 347+ A986 12                                   ld      (de),a              ; set rot mat value
 348+ A987 13                                   inc     de
 349+ A988 78                                   ld      a,b
 350+ A989 E6 80                                and     SignOnly8Bit
 351+ A98B 12                                   ld      (de),a              ; set rot mat sign
 352+ A98C 13                                   inc     de                  ; move to next rot mat element
 353+ A98D 23                                   inc     hl
 354+ A98E 23                                   inc     hl                  ; matrix high byte of z
 355+ A98F 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 356+ A990 47                                   ld      b,a
 357+ A991 E6 7F                                and     SignMask8Bit
 358+ A993 12                                   ld      (de),a              ; set rot mat value
 359+ A994 13                                   inc     de
 360+ A995 78                                   ld      a,b
 361+ A996 E6 80                                and     SignOnly8Bit
 362+ A998 12                                   ld      (de),a              ; set rot mat sign
 363+ A999 C9                                   ret
 364+ A99A
 365+ A99A                                      IFDEF TACTICSDEBUG
 366+ A99A              DebugTacticsCopy:
 367+ A99A 2A 29 C0                             ld      hl,(UBnkrotmatSidevX)
 368+ A99D ED 5B 2B C0                          ld      de,(UBnkrotmatSidevY)
 369+ A9A1 ED 4B 2D C0                          ld      bc,(UBnkrotmatSidevZ)
 370+ A9A5 22 F9 A3                             ld      (TacticsSideX),hl
 371+ A9A8 ED 53 FD A3                          ld      (TacticsSideY),de
 372+ A9AC ED 43 01 A4                          ld      (TacticsSideZ),bc
 373+ A9B0
 374+ A9B0 2A 2F C0                             ld      hl,(UBnkrotmatRoofvX)
 375+ A9B3 ED 5B 31 C0                          ld      de,(UBnkrotmatRoofvY)
 376+ A9B7 ED 4B 33 C0                          ld      bc,(UBnkrotmatRoofvZ)
 377+ A9BB 22 09 A4                             ld      (TacticsRoofX),hl
 378+ A9BE ED 53 0D A4                          ld      (TacticsRoofY),de
 379+ A9C2 ED 43 11 A4                          ld      (TacticsRoofZ),bc
 380+ A9C6
 381+ A9C6 2A 35 C0                             ld      hl,(UBnkrotmatNosevX)
 382+ A9C9 ED 5B 37 C0                          ld      de,(UBnkrotmatNosevY)
 383+ A9CD ED 4B 39 C0                          ld      bc,(UBnkrotmatNosevZ)
 384+ A9D1 22 19 A4                             ld      (TacticsNoseX),hl
 385+ A9D4 ED 53 1D A4                          ld      (TacticsNoseY),de
 386+ A9D8 ED 43 21 A4                          ld      (TacticsNoseZ),bc
 387+ A9DC
 388+ A9DC C9                                   ret
 389+ A9DD                                      ENDIF
 390+ A9DD
 391+ A9DD 00 00        TacticsVarResult        DW 0
 392+ A9DF CD 69 A9     XX12EquTacticsDotNosev: call    CopyRotNoseToTacticsMat
 393+ A9E2 21 BD A3     XX12EquTacticsDotHL:    ld      hl,TacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 394+ A9E5 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 395+ A9E6 5F                                   ld      e,a                                 ; .
 396+ A9E7 3A D9 A3                             ld      a,(TacticsVectorX)                  ; .
 397+ A9EA 57                                   ld      d,a                                 ; .
 398+ A9EB ED 30                                mul                                         ; .
 399+ A9ED 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 400+ A9EE 32 8C 7E                             ld      (varS),a                            ; .
 401+ A9F1 23                                   inc     hl                                  ; move to sign byte
 402+ A9F2 3A DB A3     .CalcXSign:             ld      a,(TacticsVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 403+ A9F5 AE                                   xor     (hl)                                ; .
 404+ A9F6 47                                   ld      b,a                                 ; .
 405+ A9F7 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 406+ A9F8 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 407+ A9F9 5F                                   ld      e,a                                 ; .
 408+ A9FA 3A DD A3                             ld      a,(TacticsVectorY)                  ; .
 409+ A9FD 57                                   ld      d,a                                 ; .
 410+ A9FE ED 30                                mul     de                                  ; .
 411+ AA00 5A                                   ld      e,d                                 ; .
 412+ AA01 16 00                                ld      d,0                                 ; .
 413+ AA03 23                                   inc     hl                                  ; move to sign byte
 414+ AA04 3A DF A3     .CalcYSign:             ld      a,(TacticsVectorY+2)                ; c = sign of y_sign * sidev_y
 415+ AA07 AE                                   xor     (hl)                                ;
 416+ AA08 4F                                   ld      c,a                                 ;
 417+ AA09 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 418+ AA0A E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 419+ AA0B 3A 8C 7E                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 420+ AA0E 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 421+ AA10 6F                                   ld      l,a                                 ;
 422+ AA11 CD FF 8E                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 423+ AA14 47                                   ld      b,a                                 ; b = sign of result
 424+ AA15 22 DD A9                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 425+ AA18 E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 426+ AA19 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 427+ AA1A 5F                                   ld      e,a                                 ; .
 428+ AA1B 3A E1 A3                             ld      a,(TacticsVectorZ)                  ; .
 429+ AA1E 57                                   ld      d,a                                 ; .
 430+ AA1F ED 30                                mul     de                                  ; .
 431+ AA21 5A                                   ld      e,d                                 ; .
 432+ AA22 16 00                                ld      d,0                                 ; .
 433+ AA24 23                                   inc     hl                                  ; move to sign byte
 434+ AA25 3A E3 A3     .CalcZSign:             ld      a,(TacticsVectorZ+2)
 435+ AA28 AE                                   xor     (hl)
 436+ AA29 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 437+ AA2A 2A DD A9                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 438+ AA2D CD FF 8E                             call    ADDHLDESignBC                       ; so AHL = X y z products
 439+ AA30 32 8C 7E                             ld      (varS),a                            ; for backwards compatibility
 440+ AA33 7D                                   ld      a,l                                  ; .
 441+ AA34 C9                                   ret
 442+ AA35
 443+ AA35 CD 6F A9     XX12EquTacticsDotRoofv: call    CopyRotRoofToTacticsMat
 444+ AA38 C3 E2 A9                             jp      XX12EquTacticsDotHL
 445+ AA3B
 446+ AA3B CD 63 A9     XX12EquTacticsDotSidev: call    CopyRotSideToTacticsMat
 447+ AA3E C3 E2 A9                             jp      XX12EquTacticsDotHL
 448+ AA41
 449+ AA41 21 20 C0     CopyToTargetVector:     ld      hl,UBnKxlo
 450+ AA44 11 C9 A3                             ld      de,TacticsTargetX
 451+ AA47 01 09 00                             ld      bc,9
 452+ AA4A ED B0                                ldir
 453+ AA4C C9                                   ret
 454+ AA4D
 455+ AA4D 2A 20 C0     CopyPosToVector:        ld      hl,(UBnKxlo)
 456+ AA50 3A 22 C0                             ld      a,(UBnKxsgn)
 457+ AA53                                      ;xor     $80
 458+ AA53 22 D9 A3                             ld      (TacticsVectorX),hl
 459+ AA56 32 DB A3                             ld      (TacticsVectorX+2),a
 460+ AA59
 461+ AA59 2A 23 C0                             ld      hl,(UBnKylo)
 462+ AA5C 3A 25 C0                             ld      a,(UBnKysgn)
 463+ AA5F                                      ;xor     $80
 464+ AA5F 22 DD A3                             ld      (TacticsVectorY),hl
 465+ AA62 32 DF A3                             ld      (TacticsVectorY+2),a
 466+ AA65
 467+ AA65 2A 26 C0                             ld      hl,(UBnKzlo)
 468+ AA68 3A 28 C0                             ld      a,(UBnKzsgn)
 469+ AA6B                                      ;xor     $80
 470+ AA6B 22 E1 A3                             ld      (TacticsVectorZ),hl
 471+ AA6E 32 E3 A3                             ld      (TacticsVectorZ+2),a
 472+ AA71 C9                                   ret
 473+ AA72
 474+ AA72              SetPlayerAsTarget:      ZeroA
 474+ AA72 AF          >                        xor a
 475+ AA73 21 C9 A3                             ld      hl,TacticsTargetX
 476+ AA76 06 09                                ld      b, 3*3
 477+ AA78 77           .ZeroLoop:              ld      (hl),a                              ; player is always at 0,0,0
 478+ AA79 23                                   inc     hl
 479+ AA7A 10 FC                                djnz    .ZeroLoop
 480+ AA7C C9                                   ret
 481+ AA7D
 482+ AA7D CD 72 AA     CalcVectorToMyShip:     call    SetPlayerAsTarget
 483+ AA80 CD 4D AA                             call    CopyPosToVector
 484+ AA83                                      ;call    CopyToTargetVector
 485+ AA83                                      ;FlipSignMem     TacticsTargetX+2
 486+ AA83                                      ;FlipSignMem     TacticsTargetY+2
 487+ AA83                                      ;FlipSignMem     TacticsTargetZ+2
 488+ AA83 C9                                   ret
 489+ AA84
 490+ AA84 ED 5B C9 A3  CalcTargetVector:       ld      de,(TacticsTargetX)                        ; get target ship X
 491+ AA88 3A CB A3                             ld      a,(TacticsTargetX+2)                       ; and flip sign so we have missile - target
 492+ AA8B                                      FlipSignBitA
 492+ AA8B EE 80       >                        xor     SignOnly8Bit
 493+ AA8D 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 494+ AA8E 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
 495+ AA91 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
 496+ AA94 47                                   ld      b,a
 497+ AA95 CD FF 8E                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 498+ AA98 22 D9 A3                             ld      (TacticsVectorX),hl
 499+ AA9B 32 DB A3                             ld      (TacticsVectorX+2),a
 500+ AA9E ED 5B CC A3  .UpdateTargetingShipY:  ld      de,(TacticsTargetY)
 501+ AAA2 3A CE A3                             ld      a,(TacticsTargetY+2)
 502+ AAA5                                      FlipSignBitA
 502+ AAA5 EE 80       >                        xor     SignOnly8Bit
 503+ AAA7 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 504+ AAA8 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
 505+ AAAB 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 506+ AAAE 47                                   ld      b,a
 507+ AAAF CD FF 8E                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 508+ AAB2 22 DD A3                             ld      (TacticsVectorY),hl
 509+ AAB5 32 DF A3                             ld      (TacticsVectorY+2),a
 510+ AAB8 ED 5B CF A3  .UpdateTargetingShipZ:  ld      de,(TacticsTargetZ)
 511+ AABC 3A D1 A3                             ld      a,(TacticsTargetZ+2)
 512+ AABF                                      FlipSignBitA
 512+ AABF EE 80       >                        xor     SignOnly8Bit
 513+ AAC1 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 514+ AAC2 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 515+ AAC5 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 516+ AAC8 47                                   ld      b,a
 517+ AAC9 CD FF 8E                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 518+ AACC 22 E1 A3                             ld      (TacticsVectorZ),hl
 519+ AACF 32 E3 A3                             ld      (TacticsVectorZ+2),a
 520+ AAD2 C9                                   ret
 521+ AAD3
 522+ AAD3              ;-- Now its scaled we can normalise
 523+ AAD3              ;-- Scale down so that h d &b are zero, then do once again so l e and c are 7 bit
 524+ AAD3              ;-- use 7 bit mul96 to ensure we don;t get odd maths
 525+ AAD3 2A D9 A3     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 526+ AAD6 ED 5B DD A3                          ld      de, (TacticsVectorY)        ; .
 527+ AADA ED 4B E1 A3                          ld      bc, (TacticsVectorZ)        ; .
 528+ AADE 7C           .ScaleLoop:             ld      a,h
 529+ AADF B2                                   or      d
 530+ AAE0 B0                                   or      b
 531+ AAE1 28 0F                                jr      z,.DoneScaling
 532+ AAE3                                      ShiftHLRight1
 532+ AAE3 CB 3C       >			   srl h
 532+ AAE5 CB 1D       >			   rr  l
 533+ AAE7                                      ShiftDERight1
 533+ AAE7 CB 3A       >			   srl d
 533+ AAE9 CB 1B       >			   rr  e
 534+ AAEB                                      ShiftBCRight1
 534+ AAEB CB 38       >			   srl b
 534+ AAED CB 19       >			   rr  c
 535+ AAEF C3 DE AA                             jp      .ScaleLoop
 536+ AAF2              .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 536+ AAF2 CB 3C       >			   srl h
 536+ AAF4 CB 1D       >			   rr  l
 537+ AAF6                                      ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 537+ AAF6 CB 3A       >			   srl d
 537+ AAF8 CB 1B       >			   rr  e
 538+ AAFA                                      ShiftBCRight1                       ; now values are in L E C
 538+ AAFA CB 38       >			   srl b
 538+ AAFC CB 19       >			   rr  c
 539+ AAFE E5 D5 C5                             push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 540+ AB01 53                                   ld      d,e                         ; hl = y(e) ^ 2
 541+ AB02 ED 30                                mul     de                          ; .
 542+ AB04 EB                                   ex      de,hl                       ; .
 543+ AB05 53                                   ld      d,e                         ; de = x(l) ^ 2
 544+ AB06 ED 30                                mul     de                          ; .
 545+ AB08 19                                   add     hl,de                       ; hl = hl + de
 546+ AB09 51                                   ld      d,c                         ; de = y(c)^ 2 + x ^ 2
 547+ AB0A 59                                   ld      e,c                         ; .
 548+ AB0B ED 30                                mul     de                          ; .
 549+ AB0D 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 550+ AB0E EB                                   ex      de,hl                       ; fix as hl was holding square
 551+ AB0F CD 94 92                             call    asm_sqrt                    ; IYH = A = hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 552+ AB12                                      ; add in logic if h is low then use lower bytes for all
 553+ AB12 7D                                   ld      a,l                         ;
 554+ AB13 FD 67                                ld      iyh,a                       ;
 555+ AB15 57                                   ld      d,a                         ; D = sqrt
 556+ AB16 C1                                   pop     bc                          ; retrive tacticsvectorz scaled
 557+ AB17 79                                   ld      a,c                         ; a = scaled byte
 558+ AB18 CD 8E 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 559+ AB1B 32 E1 A3                             ld      (TacticsVectorZ),a          ; z = normalised z
 560+ AB1E D1                                   pop     de
 561+ AB1F 7B                                   ld      a,e
 562+ AB20 FD 54                                ld      d,iyh
 563+ AB22 CD 8E 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 564+ AB25 32 DD A3                             ld      (TacticsVectorY),a
 565+ AB28 E1                                   pop     hl
 566+ AB29 7D                                   ld      a,l
 567+ AB2A FD 54                                ld      d,iyh
 568+ AB2C CD 8E 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 569+ AB2F 32 D9 A3                             ld      (TacticsVectorX),a
 570+ AB32                                      ; BODGE FOR NOW
 571+ AB32                                     ; BODGE FOR NOW
 572+ AB32                                      ZeroA                              ;; added to help debugging
 572+ AB32 AF          >                        xor a
 573+ AB33 32 DA A3                             ld      (TacticsVectorX+1),a       ;; added to help debugging
 574+ AB36 32 DE A3                             ld      (TacticsVectorY+1),a       ;; added to help debugging
 575+ AB39 32 E2 A3                             ld      (TacticsVectorZ+1),a       ;; added to help debugging
 576+ AB3C                                      SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 576+ AB3C 3A DB A3    >                        ld      a, (TacticsVectorX+2)
 576+ AB3F E6 80       >                        and     SignOnly8Bit
 576+ AB41 32 DB A3    >                        ld      (TacticsVectorX+2),a
 577+ AB44                                      SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 577+ AB44 3A DF A3    >                        ld      a, (TacticsVectorY+2)
 577+ AB47 E6 80       >                        and     SignOnly8Bit
 577+ AB49 32 DF A3    >                        ld      (TacticsVectorY+2),a
 578+ AB4C                                      SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 578+ AB4C 3A E3 A3    >                        ld      a, (TacticsVectorZ+2)
 578+ AB4F E6 80       >                        and     SignOnly8Bit
 578+ AB51 32 E3 A3    >                        ld      (TacticsVectorZ+2),a
 579+ AB54 C9                                   ret
 580+ AB55
 581+ AB55                          DISPLAY "TODO: TactivtsPosMinus Target"
 582+ AB55              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 583+ AB55              ;;TODO                        check range
 584+ AB55              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 585+ AB55              ;;TODO                        else
 586+ AB55              ;;TODO                            normalise teh vector for direction
 587+ AB55              ;;TODO                            dot product = missile nosev . normalised vector
 588+ AB55              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 589+ AB55              ;;TODO                            negate normalised vector so its opposite product
 590+ AB55              ;;TODO                            invert sign of cnt
 591+ AB55              ;;TODO                            AK = roovf . XX15
 592+ AB55              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 593+ AB55              ;;TODO                            if pitch * 2 < 32 then
 594+ AB55              ;;TODO                                ax = sidev . xx15
 595+ AB55              ;;TODO                                    a = x xort current pitch direction
 596+ AB55              ;;TODO                                    shipts roll = nroll
 597+ AB55              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 598+ AB55
 599+ AB55              ;;TODO
 600+ AB55              ;;TODO
 601+ AB55              ;;TODO
 602+ AB55              ;;TODOget the targetted ship inbto bank
 603+ AB55              ;;TODO                        check range as per player
 604+ AB55              ;;TODO                        handle explosion enc
 605+ AB55
 606+ AB55              ;                    else see how close it is to target
 607+ AB55              ;                         if close to target
 608+ AB55              ;                            then explodes destroy missile
 609+ AB55              ;                                 if ship is not station
 610+ AB55              ;                                    then set up signal target ship hit my missile flag
 611+ AB55              ;                                         set blastcheckcounter to slotlist length  (12)
 612+ AB55              ;                                 end if
 613+ AB55              ;                                 if we are in range of missle blast
 614+ AB55              ;                                    cause blast damage to our ship (this will signal death is needed)
 615+ AB55              ;                                 end if
 616+ AB55              ;                                 return
 617+ AB55              ;                         end if
 618+ AB55              ;                 end if
 619+ AB55              ;         end if
 620+ AB55
 621+ AB55
 622+ AB55                          ;            else if ship is angry at us
 623+ AB55              ;
 624+ AB55
 625+ AB55              ; Part 1 - if type is missile and enquing a missile blast and slot free
 626+ AB55              ;             then enqueue missile blast details
 627+ AB55              ;                  mark as exploded
 628+ AB55              ;                  remove missile from universe slot list
 629+ AB55
 630+ AB55              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 631+ AB55              ; also for future ship vs ship combat
 632+ AB55              ;... Tactics........................................................................
 633+ AB55              ;.PART 1
 634+ AB55              ; if shiphitbymissleflag <> false
 635+ AB55              ;    then dec blast check counter
 636+ AB55              ;         if blast check counter = 0
 637+ AB55              ;            then set shiphitbymissileflag to FF
 638+ AB55              ;    else if SetShipHitByMissileFlag = current ship number
 639+ AB55              ;            then cause damage to ship
 640+ AB55              ;         else if ship is in range and ship is not a station
 641+ AB55              ;                  then cause blast damage to ship
 642+ AB55              ;         if destroyed
 643+ AB55              ;            then explode ship
 644+ AB55              ;                 return
 645+ AB55              ; end if
 646+ AB55              ; if ship is a missle (I think we allow missile on missle action)
 647+ AB55              ;    then if ecm is active
 648+ AB55              ;            then destroy missile and return
 649+ AB55              ;            else if ship is angry at us
 650+ AB55              ;                    then if ship is close to us
 651+ AB55              ;                            then explodes causing damage to our ship
 652+ AB55              ;                                 enque missile blast
 653+ AB55              ;                                 destroy missile
 654+ AB55              ;                                 set blastcheckcounter to slotlist length
 655+ AB55              ;                                 set shiphitbymissileflag to FE (general blast)
 656+ AB55              ;                                 return
 657+ AB55              ;                            else jump to part 3 to do updates
 658+ AB55              ;                         end if
 659+ AB55              ;                    else see how close it is to target
 660+ AB55              ;                         if close to target
 661+ AB55              ;                            then
 662+ AB55              ;                                 enque missile blast
 663+ AB55              ;                                 destroy missile
 664+ AB55              ;                                 if ship is not station
 665+ AB55              ;                                    then set up signal target ship hit my missile flag
 666+ AB55              ;                                         set blastcheckcounter to slotlist length  (12)
 667+ AB55              ;                                 end if
 668+ AB55              ;                                 if we are in range of missle blast
 669+ AB55              ;                                    cause blast damage to our ship (this will signal death is needed)
 670+ AB55              ;                                 end if
 671+ AB55              ;                                 return
 672+ AB55              ;                         end if
 673+ AB55              ;                 end if
 674+ AB55              ;         end if
 675+ AB55              ;.PART 2A ** adding in a collision logic
 676+ AB55              ;    else if ship is close to another ship
 677+ AB55              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 678+ AB55              ;                    then if aligned correctly
 679+ AB55              ;                         then remove ship as docked
 680+ AB55              ;                              return
 681+ AB55              ;         else
 682+ AB55              ;            call collision route and determine daamage based on sizes and bounce vectors
 683+ AB55              ;            return
 684+ AB55              ;.PART 2 ** Need to check if ship has AI flag
 685+ AB55              ;    else if not hostile
 686+ AB55              ;            then if not docking or station not present
 687+ AB55              ;                    then calculate vector to planet
 688+ AB55              ;                         jump to part 7
 689+ AB55              ;                    else calculate verctor to docking slot
 690+ AB55              ;                         call caluclate vector to docking slot (DOCKIT)
 691+ AB55              ;                         jump to part 7
 692+ AB55              ;                 end if
 693+ AB55              ;            else case ship type
 694+ AB55              ;                      >>escape pod>> point at planet and jump to step 7
 695+ AB55              ;                      >>space station>> if hostile
 696+ AB55              ;                                           then if cop counter < 7 and 6.2% chance
 697+ AB55              ;                                                   then spawm hostile cop
 698+ AB55              ;                                                end if
 699+ AB55              ;                                           else
 700+ AB55              ;                                                if 0.8% change and transporter count = 0
 701+ AB55              ;                                                   then if 50% chance
 702+ AB55              ;                                                           then spawn transporter
 703+ AB55              ;                                                           else spawn shuttle
 704+ AB55              ;                                                        end if
 705+ AB55              ;                                                end if
 706+ AB55              ;                                        end if
 707+ AB55              ;                                        return
 708+ AB55              ;                      >>targoid and no mother ship in slot list>> set random drift
 709+ AB55              ;                                                                  return
 710+ AB55              ;                      >>if bounty hunter flag>> if ship not hostile
 711+ AB55              ;                                                   then if trader flag clear or 20% chance
 712+ AB55              ;                                                        then if fugitive or offender
 713+ AB55              ;                                                                then set hosile
 714+ AB55              ;                                                end if
 715+ AB55              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 716+ AB55              ;                                         then spawn agressive hosting one of types carried
 717+ AB55              ;                                              reduce ships in hanger by 1
 718+ AB55              ;                                              return
 719+ AB55              ;                      >>rock hermit>> if 22% chance
 720+ AB55              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 721+ AB55              ;                                              return
 722+ AB55              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 723+ AB55              ;                 end case
 724+ AB55              ;         end if
 725+ AB55              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 726+ AB55              ; .PART 3
 727+ AB55              ;         calulcate dot product of ship nose to us
 728+ AB55              ; .PART 4
 729+ AB55              ;         2.5% change ship rill roll a noticable amount
 730+ AB55              ;         if ship has > 50% energy jump to part 6
 731+ AB55              ;         if ship > 1/8th energy jump to part 5
 732+ AB55              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 733+ AB55              ;            then launch escape pod
 734+ AB55              ;                 set AI to null
 735+ AB55              ;                 set random pitch and roll
 736+ AB55              ;                 set accelleation to 0
 737+ AB55              ;         end if
 738+ AB55              ; .PART 5
 739+ AB55              ;         if ship does not have any missilesor ECM is firing to part 6
 740+ AB55              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 741+ AB55              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 742+ AB55              ;                            then launch thargon
 743+ AB55              ;                            else spawn angry missle under ship
 744+ AB55              ;                         end if
 745+ AB55              ;                 end if
 746+ AB55              ;            else return
 747+ AB55              ;         end if
 748+ AB55              ; .PART 6
 749+ AB55              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 750+ AB55              ;            then jump to part 7
 751+ AB55              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 752+ AB55              ;                    then fire laser at us (which reduces energy)
 753+ AB55              ;                         cause laser damage to our ship (this will signal death is needed)
 754+ AB55              ;                         decellerate by half as ship has lock on
 755+ AB55              ;                         return
 756+ AB55              ;                    else fire laser into space (which reduces energy)
 757+ AB55              ;                 end if
 758+ AB55              ;         end if
 759+ AB55              ; .PART 7#
 760+ AB55              ;        if ship is a msile targetting us
 761+ AB55              ;           then ship turns towards us some more
 762+ AB55              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 763+ AB55              ;                    then do random wiht bit 7 set
 764+ AB55              ;                         if random < AI flag
 765+ AB55              ;                            then   ship turned towards us
 766+ AB55              ;                            else   ship turns away from us
 767+ AB55              ;                         end if
 768+ AB55              ;                end if
 769+ AB55              ;           end if
 770+ AB55              ;           calculate new roll, pitch and accelleration based on new targe vector
 771+ AB55
 772+ AB55
 773+ AB55              ;        determine ship direction based on agression and type
 774+ AB55              ;        set pitch and roll coutners
 775+ AB55              ;        adjust speed depleding on relationship to us
 776+ AB55              ; .PART 8 - new
 777+ AB55              ;        if ship has ECM, another ECM is not active and missile targeted at it
 778+ AB55              ;           if ship has enery of ECM energey cost + 1/8th total
 779+ AB55              ;              if chance 25%
 780+ AB55              ;                 then fire ECM
 781+ AB55              ;
 782+ AB55
 783+ AB55
 784+ AB55
 785+ AB55
 786+ AB55 2A D9 A3     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 787+ AB58 ED 5B DD A3                      ld      de, (TacticsVectorY)        ; .
 788+ AB5C ED 4B E1 A3                      ld      bc, (TacticsVectorZ)        ; .
 789+ AB60 3A DB A3                         ld      a,(TacticsVectorX+2)        ; .
 790+ AB63 FD 67                            ld      iyh,a                       ; iyh = X sign
 791+ AB65 3A DF A3                         ld      a,(TacticsVectorY+2)        ; .
 792+ AB68 FD 6F                            ld      iyl,a                       ; iyl = Y sign
 793+ AB6A 3A E3 A3                         ld      a,(TacticsVectorZ+2)        ; .
 794+ AB6D DD 67                            ld      ixh,a                       ; ixh = z sign
 795+ AB6F FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 796+ AB71 FD B5                            or      iyl                         ; .
 797+ AB73                                  ClearSignBitA                       ;  exluding sign bit
 797+ AB73 E6 7F       >                        and     SignMask8Bit
 798+ AB75 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 799+ AB77 FD 7C        .ScaledDownBy2:     ld      a,iyh
 800+ AB79 CB 2F                            sra     a
 801+ AB7B FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 802+ AB7D CB 1C                            rr      h                           ; Deal with X
 803+ AB7F CB 1D                            rr      l                           ;
 804+ AB81 FD 7D                            ld      a,iyl
 805+ AB83 CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 806+ AB85 FD 6F                            ld      iyl,a
 807+ AB87 CB 1A                            rr      d                           ; Deal with Y
 808+ AB89 CB 1B                            rr      e                           ;
 809+ AB8B DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 810+ AB8D CB 2F                            sra     a
 811+ AB8F DD 6F                            ld      ixl,a
 812+ AB91 CB 18                            rr      b                           ; Deal with Z
 813+ AB93 CB 19                            rr      c                           ;
 814+ AB95 C3 6F AB                         jp      .ScaleLoop
 815+ AB98 7C           .DoneScaling:       ld      a,h
 816+ AB99 B2                               or      d
 817+ AB9A B0                               or      b
 818+ AB9B                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 818+ AB9B E6 80       >                        and     SignOnly8Bit
 819+ AB9D 28 0C                            jr      z,.OKToNormalise
 820+ AB9F              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 820+ AB9F CB 3C       >			   srl h
 820+ ABA1 CB 1D       >			   rr  l
 821+ ABA3                                  ShiftDERight1                       ; to do sign bytes
 821+ ABA3 CB 3A       >			   srl d
 821+ ABA5 CB 1B       >			   rr  e
 822+ ABA7                                  ShiftBCRight1                       ; as value must be 0
 822+ ABA7 CB 38       >			   srl b
 822+ ABA9 CB 19       >			   rr  c
 823+ ABAB 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 824+ ABAC FD B4                            or      iyh                         ; so by the end of here
 825+ ABAE 67                               ld      h,a                         ;   hl = x
 826+ ABAF 7A                               ld      a,d                         ;   de = y
 827+ ABB0 FD B5                            or      iyl                         ;   bc = z
 828+ ABB2 57                               ld      d,a                         ; all scaled to 15 bit + sign
 829+ ABB3 78                               ld      a,b                         ;
 830+ ABB4 DD B4                            or      ixh                         ;
 831+ ABB6 47                               ld      b,a                         ;
 832+ ABB7 22 E9 A3                         ld      (TacticsNormX),hl
 833+ ABBA 22 ED A3                         ld      (TacticsNormY),hl
 834+ ABBD 22 F1 A3                         ld      (TacticsNormZ),hl
 835+ ABC0 C9                               ret
 836+ ABC1                                 ; ***SIgn bits*** need to be in byte 3
 837+ ABC1
# file closed: ./GameEngine/Tactics.asm
1208  ABC1                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ ABC1              M_GETSETDRV             equ $89
   2+ ABC1              F_OPEN                  equ $9a
   3+ ABC1              F_CLOSE                 equ $9b
   4+ ABC1              F_READ                  equ $9d
   5+ ABC1              F_WRITE                 equ $9e
   6+ ABC1              F_SEEK                  equ $9f
   7+ ABC1
   8+ ABC1              FA_READ                 equ $01
   9+ ABC1              FA_APPEND               equ $06
  10+ ABC1              FA_OVERWRITE            equ $0C
  11+ ABC1              DISK_FILEMAP            equ $85
  12+ ABC1              DISK_STRMSTART          equ $86
  13+ ABC1              DISK_STRMEND            equ $87
  14+ ABC1
  15+ ABC1              ESX_MODE_READ           equ $01
  16+ ABC1              ESX_MODE_OPEN_EXIST     equ $00
  17+ ABC1
  18+ ABC1              FILEMAP_SIZE            equ $20
  19+ ABC1              FILEMAP_BLOCK_SIZE      equ $06
  20+ ABC1
  21+ ABC1              ; Success 1 = default drive, carry reset
  22+ ABC1              ; Failure HL = -1 , carry set, errno set
  23+ ABC1 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ ABC5 DD E5
  24+ ABC7 AF                                   xor	    a	; a = 0 means get default drive into A
  25+ ABC8 CF                                   rst	    $08
  26+ ABC9 89                                   db	    M_GETSETDRV
  27+ ABCA 32 5F AC                             ld	    (DefaultDrive),a
  28+ ABCD DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ ABD1 C1 F1
  29+ ABD3 C9                                   ret
  30+ ABD4
  31+ ABD4
  32+ ABD4              ; Disable NMI Multi face - needed for streaming
  33+ ABD4              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ ABD4              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ ABD4              ;                        out     (c),a
  36+ ABD4              ;                        inc     b
  37+ ABD4              ;                        in      a,(c)
  38+ ABD4              ;                        and     %11110111
  39+ ABD4              ;                        out     (c),a
  40+ ABD4              ;                        ret
  41+ ABD4              ;
  42+ ABD4              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ ABD4              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ ABD4              ;                        out     (c),a
  45+ ABD4              ;                        inc     b
  46+ ABD4              ;                        in      a,(c)
  47+ ABD4              ;                        or      %00001000
  48+ ABD4              ;                        out     (c),a
  49+ ABD4              ;                        ret
  50+ ABD4              ;
  51+ ABD4              ; *******************************************************************************************************
  52+ ABD4              ;	Function:	Open a file read for reading/writing
  53+ ABD4              ;	In:		ix = filename
  54+ ABD4              ;			b  = Open filemode
  55+ ABD4              ;	ret		a  = handle, 0 on error
  56+ ABD4              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ ABD4              ; *******************************************************************************************************
  58+ ABD4              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ ABD4              ;                        call    GetDefaultDrive
  60+ ABD4              ;                        call    fOpen
  61+ ABD4              ;                        call    fRefill_map
  62+ ABD4              ;                        jp      c,.RefilMapError
  63+ ABD4              ;                        jp      z,.RefilMapEmpty
  64+ ABD4              ;                        ret
  65+ ABD4              ;.RefilMapError:         jp      .RefilMapError
  66+ ABD4              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ ABD4              ;
  68+ ABD4              ;
  69+ ABD4
  70+ ABD4 3A 5F AC     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ ABD7 CF                                   rst	    $08
  72+ ABD8 9A                                   db	    F_OPEN
  73+ ABD9 32 60 AC                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ ABDC 38 01                                jr      c,.FileOpenError
  75+ ABDE C9                                   ret
  76+ ABDF C3 DF AB     .FileOpenError:         jp      .FileOpenError
  77+ ABE2
  78+ ABE2              ; *******************************************************************************************************
  79+ ABE2              ;	Function	refills the buffer map with card addresses for the file
  80+ ABE2              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ ABE2              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ ABE2              ;           de = filemap size (which should equal 4 in our case)
  83+ ABE2              ;			bc  = amount to read
  84+ ABE2              ;	ret:		carry set = error
  85+ ABE2              ;               zero set  = no data loaded so still error
  86+ ABE2              ;   you can use fRefill_map to pull default valuess
  87+ ABE2              ; *******************************************************************************************************
  88+ ABE2              ;fRefill_map:            ld      a,(FileHandle)
  89+ ABE2              ;                        ld      ix,FilemapBuffer
  90+ ABE2              ;                        ld      de,FILEMAP_SIZE
  91+ ABE2              ;fRefill_mapA:           rst     $08
  92+ ABE2              ;                        db      DISK_FILEMAP
  93+ ABE2              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ ABE2              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ ABE2              ;                        ld      de,FilemapBuffer
  96+ ABE2              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ ABE2              ;                        ld      a,$ff
  98+ ABE2              ;                        ret
  99+ ABE2              ;
 100+ ABE2              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ ABE2              ;                        ldBCDEatHL                              ; load the disk address
 102+ ABE2              ;                        push    bc                              ; into IXDE
 103+ ABE2              ;                        pop     ix                              ; now IXDE = card address
 104+ ABE2              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ ABE2              ;                        ld      (FilemapBlockCount),bc
 106+ ABE2              ;                        ret
 107+ ABE2              ; Start up stream of data
 108+ ABE2              ; If successful, the call returns with:
 109+ ABE2              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ ABE2              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ ABE2              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ ABE2              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ ABE2              ;                        ZeroA
 114+ ABE2              ;                        ld      (FilereadsPerformed),a
 115+ ABE2              ;                        call    read_stream_block
 116+ ABE2              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ ABE2              ;                        rst     $08
 118+ ABE2              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ ABE2              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ ABE2              ;                        ret
 121+ ABE2
 122+ ABE2              ; *******************************************************************************************************
 123+ ABE2              ;	Function	stream in a block of data to memory
 124+ ABE2              ;	In:		ix  = address to read into
 125+ ABE2              ;			bc  = amount to read
 126+ ABE2              ;	ret:		carry set = error
 127+ ABE2              ; *******************************************************************************************************
 128+ ABE2              ;fStream_block:          ld      ix,FileBuffer
 129+ ABE2              ;                        ld      a,(CardFlags)
 130+ ABE2              ;                        ld      bc,(FileStreamPort)
 131+ ABE2              ;                        ld      hl,FileBuffer
 132+ ABE2              ;                        ld      (FilemapBufferPointer),hl
 133+ ABE2              ;.StreamLoop:            ld      b,0
 134+ ABE2              ;                        ld      a,(TargetSize+1)
 135+ ABE2              ;                        cp      2
 136+ ABE2              ;                        jr      c,.stream_partial_block
 137+ ABE2              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ ABE2              ;                        inir                                ; read 256 bytes to hl+256
 139+ ABE2              ;                        dec     b                           ; update byte count
 140+ ABE2              ;                        dec     b                           ; .
 141+ ABE2              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ ABE2              ;                        ld      de,512
 143+ ABE2              ;                        ClearCarryFlag
 144+ ABE2              ;                        sbc     hl,de
 145+ ABE2              ;                        ld      (TargetSize),hl
 146+ ABE2              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ ABE2              ;                        and     a
 148+ ABE2              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ ABE2              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ ABE2              ;                        nop                                 ; as the max performance of the interface is
 151+ ABE2              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ ABE2              ;                        in      a,(c)
 153+ ABE2              ;                        nop
 154+ ABE2              ;                        nop
 155+ ABE2              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ ABE2              ;                        cp      $FF
 157+ ABE2              ;                        jr      z,.wait_for_next_block
 158+ ABE2              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ ABE2              ;                        jr      nz,.token_error
 160+ ABE2              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ ABE2              ;                        ld      a,d
 162+ ABE2              ;                        or      e
 163+ ABE2              ;                        jr      z,.streaming_complete
 164+ ABE2              ;                        ret
 165+ ABE2              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ ABE2              ;                        jr      z,.under256_bytes
 167+ ABE2              ;                        inir                                ; get 256 bytes
 168+ ABE2              ;.under256_bytes:        ld      b,e
 169+ ABE2              ;                        inc     b
 170+ ABE2              ;                        dec     b
 171+ ABE2              ;                        jr      z,.streaming_complete
 172+ ABE2              ;                        inir
 173+ ABE2              ;.streaming_complete:    ld      a,(CardFlags)
 174+ ABE2              ;                        rst     $08
 175+ ABE2              ;                        DB      DISK_STRMEND
 176+ ABE2              ;                        ld      a,(FileHandle)
 177+ ABE2              ;                        call    fClose
 178+ ABE2              ;                        ret
 179+ ABE2              ;.token_error:           jp      .token_error
 180+ ABE2              ;
 181+ ABE2              ;
 182+ ABE2              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ ABE2              ;                        call    disable_multiface
 184+ ABE2              ;                        call    fOpen_read_exists
 185+ ABE2              ;.SetupStream:           call    fStream_start
 186+ ABE2              ;                        jr      c,.FileStreamError
 187+ ABE2              ;                        ret
 188+ ABE2              ;
 189+ ABE2              ;.FileStreamError:       jp      .FileStreamError
 190+ ABE2              ;
 191+ ABE2              ; *******************************************************************************************************
 192+ ABE2              ;	Function	Read bytes from the open file
 193+ ABE2              ;	In:		ix  = address to read into
 194+ ABE2              ;			bc  = amount to read
 195+ ABE2              ;	ret:		carry set = error
 196+ ABE2              ; *******************************************************************************************************
 197+ ABE2 B7           fRead:                  or   	a             ; is it zero?
 198+ ABE3 C8                                   ret  	z             ; if so return
 199+ ABE4 E5                                   push    hl
 200+ ABE5 DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ ABE8 CF                                   rst	    $08
 202+ ABE9 9D                                   db	    F_READ
 203+ ABEA E1                                   pop	    hl
 204+ ABEB C9                                   ret
 205+ ABEC
 206+ ABEC              ; *******************************************************************************************************
 207+ ABEC              ;	Function	Write bytes to the open file
 208+ ABEC              ;	In:		ix  = address to read from
 209+ ABEC              ;			bc  = amount to write
 210+ ABEC              ;	ret:		carry set = error
 211+ ABEC              ; *******************************************************************************************************
 212+ ABEC B7           fWrite:                 or   	a             ; is it zero?
 213+ ABED C8                                   ret  	z             ; if so return
 214+ ABEE E5                                   push	hl
 215+ ABEF DD E5 E1                             ld      hl,ix
 216+ ABF2 CF                                   rst	    $08
 217+ ABF3 9E                                   db	    F_WRITE
 218+ ABF4 E1                                   pop	    hl
 219+ ABF5 C9                                   ret
 220+ ABF6
 221+ ABF6              ; *******************************************************************************************************
 222+ ABF6              ;	Function:	Close open file
 223+ ABF6              ;	In:		a  = handle
 224+ ABF6              ;	ret		a  = handle, 0 on error
 225+ ABF6              ; *******************************************************************************************************
 226+ ABF6 B7           fClose:		            or   	a             ; is it zero?
 227+ ABF7 C8                                   ret  	z             ; if so return
 228+ ABF8 CF                                   rst	    $08
 229+ ABF9 9B                                   db	    F_CLOSE
 230+ ABFA C9                                   ret
 231+ ABFB
 232+ ABFB              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ ABFB              ;                        ld      bc,0
 234+ ABFB              ;                        ld      de,0
 235+ ABFB              ;                        ld      l,0
 236+ ABFB              ;                        call    fSeek
 237+ ABFB              ;                        pop     bc,,de,,hl,,ix
 238+ ABFB              ;                        ret
 239+ ABFB              ;
 240+ ABFB              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ ABFB              ;                        ld      bc,0
 242+ ABFB              ;                        ld      de,256
 243+ ABFB              ;                        ld      l,1
 244+ ABFB              ;                        call    fSeek
 245+ ABFB              ;                        pop     bc,,de,,hl,,ix
 246+ ABFB              ;                        ret
 247+ ABFB
 248+ ABFB              ; *******************************************************************************************************
 249+ ABFB              ;	Function	Read bytes from the open file
 250+ ABFB              ;	In:		a   = file handle
 251+ ABFB              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ ABFB              ;			BCDE = bytes to seek
 253+ ABFB              ;	ret:		BCDE = file pos from start
 254+ ABFB              ; *******************************************************************************************************
 255+ ABFB DD E5 E5     fSeek:                  push	ix,,hl
 256+ ABFE CF                                   rst	    $08
 257+ ABFF 9F                                   db	    F_SEEK
 258+ AC00 E1 DD E1                             pop	    ix,,hl
 259+ AC03 C9                                   ret
 260+ AC04
 261+ AC04              ; *******************************************************************************************************
 262+ AC04              ; Init the file system
 263+ AC04              ; *******************************************************************************************************
 264+ AC04 CD C1 AB     InitFileSystem:         call    GetDefaultDrive
 265+ AC07 C9                                   ret
 266+ AC08
 267+ AC08              ; *******************************************************************************************************
 268+ AC08              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ AC08              ; In:		hl = file data pointer
 270+ AC08              ;		    ix = address to load to
 271+ AC08              ;           bc = filelength
 272+ AC08              ; *******************************************************************************************************
 273+ AC08 CD C1 AB     FileLoad:	            call    GetDefaultDrive
 274+ AC0B C5 D5 F5                             push	bc,,de,,af
 275+ AC0E                                      ; get file size
 276+ AC0E C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ AC11 E5 DD E1                             ld      ix,hl
 278+ AC14 06 01                                ld      b,FA_READ		; mode open for reading
 279+ AC16 CD D4 AB                             call    fOpen
 280+ AC19 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ AC1B FE 00                                cp	    0				; was file handle 0?
 282+ AC1D 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ AC1F DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ AC22 F5                                   push	af				; remember handle
 285+ AC23 CD E2 AB                             call	fRead			; read data from A to address IX of length BC
 286+ AC26 38 0C                                jr	    c,.error_reading
 287+ AC28 F1                                   pop	    af			    ; get handle back
 288+ AC29 CD F6 AB                             call	fClose			; close file
 289+ AC2C 38 07                                jr	    c,.error_closing
 290+ AC2E F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ AC31 C9                                   ret
 292+ AC32              ;
 293+ AC32              ; On error, display error code an lock up so we can see it
 294+ AC32              ;
 295+ AC32 DD E1        .error_opening:         pop	ix
 296+ AC34 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ AC35
 298+ AC35              .error_closing:
 299+ AC35 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ AC36 D1                                   pop	de
 301+ AC37 C1                                   pop	bc
 302+ AC38 C9                                   ret
 303+ AC39
 304+ AC39              ; *******************************************************************************************************
 305+ AC39              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ AC39              ; In:		hl = file name
 307+ AC39              ;		    ix = address to save from
 308+ AC39              ;		    bc = size
 309+ AC39              ; *******************************************************************************************************
 310+ AC39 CD C1 AB     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ AC3C C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ AC3F E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ AC42 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ AC44 CD D4 AB                             call    fOpen
 315+ AC47 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ AC49 FE 00                                cp	    0			        ; was file handle 0?
 317+ AC4B 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ AC4D DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ AC50 F5                                   push	af			        ; remember handle
 320+ AC51 CD EC AB                             call	fWrite			    ; read data from A to address IX of length BC
 321+ AC54 38 04                                jr	c,.error
 322+ AC56 F1                                   pop	af			            ; get handle back
 323+ AC57 CD F6 AB                             call	fClose			    ; close file
 324+ AC5A C9           .error:                 ret
 325+ AC5B              ;
 326+ AC5B              ; On error, display error code an lock up so we can see it
 327+ AC5B              ;
 328+ AC5B DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ AC5E C9                                   ret
 330+ AC5F
 331+ AC5F 00           DefaultDrive:	        DB	0
 332+ AC60 00           FileHandle:             DB  0
 333+ AC61 00           CardFlags               DB  0
 334+ AC62 00 00        TargetSize              DW  0
 335+ AC64 00 00        FileStreamPort          DW  0
 336+ AC66 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ AE66 00           FilereadsPerformed      DB  0
 338+ AE67 00 00        FilemapBlockCount       DW  0
 339+ AE69 00 00        FilemapBufferPointer    DW  0
 340+ AE6B 00 00        FilemapBufferLast       DW  0
 341+ AE6D 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ AF2D
# file closed: ./Hardware/drive_access.asm
1209  AF2D
1210  AF2D                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AF2D 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AF31 41 4E 44 45
   1+ AF35 52 00
   2+ AF37 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AF3B 4E 54 4F 52
   2+ AF3F 59 00
   3+ AF41 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AF45 65 6E 74 20
   3+ AF49 53 79 73 74
   3+ AF4D 65 6D 20 20
   3+ AF51 20 3A 00
   4+ AF54 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AF58 72 73 70 61
   4+ AF5C 63 65 20 53
   4+ AF60 79 73 74 65
   4+ AF64 6D 3A 00
   5+ AF67 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AF6B 69 74 69 6F
   5+ AF6F 6E 20 20 20
   5+ AF73 3A 00
   6+ AF75 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AF79 20 20 20 20
   6+ AF7D 20 20 20 20
   6+ AF81 3A 00
   7+ AF83 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AF87 20 20 20 20
   7+ AF8B 20 20 20 20
   7+ AF8F 3A 00
   8+ AF91 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AF95 6C 20 53 74
   8+ AF99 61 74 75 73
   8+ AF9D 3A 00
   9+ AF9F 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AFA3 6E 67 20 20
   9+ AFA7 20 20 20 20
   9+ AFAB 3A 00
  10+ AFAD 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AFB1 50 4D 45 4E
  10+ AFB5 54 3A 00
  11+ AFB8
  12+ AFB8 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AFBC 20 4C 69 67
  12+ AFC0 68 74 20 59
  12+ AFC4 65 61 72 73
  12+ AFC8 00
  13+ AFC9 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AFCD 58 58 58 58
  13+ AFD1 58 58 00
  14+ AFD4 2E           txt_cash_decimal        DB "."
  15+ AFD5 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AFD9 00
  16+ AFDA
  17+ AFDA              txt_status_colour		equ $FF
  18+ AFDA
  19+ AFDA              ;;DEFUNCTprint_boiler_text_l2:
  20+ AFDA              ;;DEFUNCT; ">print_boilder_text hl = text structure, b = message count"
  21+ AFDA              ;;DEFUNCTBoilerTextLoop:
  22+ AFDA              ;;DEFUNCT	push		bc			; Save Message Count loop value
  23+ AFDA              ;;DEFUNCT	ld			c,(hl)		; Get Row into b
  24+ AFDA              ;;DEFUNCT	inc			hl
  25+ AFDA              ;;DEFUNCT	ld			b,(hl)		; Get Col into b
  26+ AFDA              ;;DEFUNCT	inc			hl
  27+ AFDA              ;;DEFUNCT	ld			e,(hl)		; Get text address Lo into E
  28+ AFDA              ;;DEFUNCT	inc			hl
  29+ AFDA              ;;DEFUNCT	ld			d,(hl)		; Get text address Hi into E
  30+ AFDA              ;;DEFUNCT	inc			hl
  31+ AFDA              ;;DEFUNCT	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AFDA              ;;DEFUNCT	ex			de,hl		; now hl = address of text data
  33+ AFDA              ;;DEFUNCT	ld			e,txt_status_colour
  34+ AFDA              ;;DEFUNCT    MMUSelectLayer2
  35+ AFDA              ;;DEFUNCT	call		l1_print_at
  36+ AFDA              ;;DEFUNCT	pop			hl
  37+ AFDA              ;;DEFUNCT	pop			bc
  38+ AFDA              ;;DEFUNCT	djnz		BoilerTextLoop
  39+ AFDA              ;;DEFUNCT	ret
  40+ AFDA
  41+ AFDA
  42+ AFDA              ;:DEFUNCT print_boiler_text:
  43+ AFDA              ;:DEFUNCT ; ">print_boilder_text hl = text structure, b = message count"
  44+ AFDA              ;:DEFUNCT .BoilerTextLoop:
  45+ AFDA              ;:DEFUNCT 	push		bc			; Save Message Count loop value
  46+ AFDA              ;:DEFUNCT 	ld			c,(hl)		; Get Row into b
  47+ AFDA              ;:DEFUNCT 	inc			hl
  48+ AFDA              ;:DEFUNCT 	ld			b,(hl)		; Get Col into b
  49+ AFDA              ;:DEFUNCT 	inc			hl
  50+ AFDA              ;:DEFUNCT 	ld			e,(hl)		; Get text address Lo into E
  51+ AFDA              ;:DEFUNCT 	inc			hl
  52+ AFDA              ;:DEFUNCT 	ld			d,(hl)		; Get text address Hi into E
  53+ AFDA              ;:DEFUNCT 	inc			hl
  54+ AFDA              ;:DEFUNCT 	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AFDA              ;:DEFUNCT 	ex			de,hl		; now hl = address of text data
  56+ AFDA              ;:DEFUNCT 	ld			e,txt_status_colour
  57+ AFDA              ;:DEFUNCT 	push		bc
  58+ AFDA              ;:DEFUNCT 	pop			de
  59+ AFDA              ;:DEFUNCT 	call		l1_print_at
  60+ AFDA              ;:DEFUNCT 	pop			hl
  61+ AFDA              ;:DEFUNCT 	pop			bc
  62+ AFDA              ;:DEFUNCT 	djnz		.BoilerTextLoop
  63+ AFDA              ;:DEFUNCT 	ret
  64+ AFDA
  65+ AFDA              ;;DEFUNCTGetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
  66+ AFDA
  67+ AFDA              ;;DEFUNCTGetCash:                ld      hl,(Cash)
  68+ AFDA              ;;DEFUNCT                        ex      de,hl
  69+ AFDA              ;;DEFUNCT                        ld      ix,(Cash+2)
  70+ AFDA              ;;DEFUNCT                        ld		iy,txt_cash_amount
  71+ AFDA              ;;DEFUNCT                        call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AFDA              ;;DEFUNCT.ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AFDA              ;;DEFUNCT                        ld		(txt_cash_fraction),a
  74+ AFDA              ;;DEFUNCT.UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AFDA              ;;DEFUNCT                        ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AFDA              ;;DEFUNCT                        cp		0
  77+ AFDA              ;;DEFUNCT                        ret		z
  78+ AFDA              ;;DEFUNCT                        ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AFDA              ;;DEFUNCT                        ret
  80+ AFDA
# file closed: ./Menus/common_menu.asm
1211  AFDA              MainNonBankedCodeEnd:
1212  AFDA                  DISPLAY "Main Non Banked Code Ends at ",$
1213  AFDA
1214  AFDA                  org $B000
1215  B000                  DISPLAY "Vector Table Starts at ",$
1216  B000              VectorTable:
1217  B000 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1217  B004 B1 B1 B1 B1
1217  B008 B1 B1 B1 B1
1217  B00C B1 B1 B1 B1
1217  B010 B1 B1 B1 B1
1217  B014 B1 B1 B1 B1
1217  B018 B1 B1 B1 B1
1217  B01C B1 B1 B1 B1
1218  B020 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1218  B024 B1 B1 B1 B1
1218  B028 B1 B1 B1 B1
1218  B02C B1 B1 B1 B1
1218  B030 B1 B1 B1 B1
1218  B034 B1 B1 B1 B1
1218  B038 B1 B1 B1 B1
1218  B03C B1 B1 B1 B1
1219  B040 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1219  B044 B1 B1 B1 B1
1219  B048 B1 B1 B1 B1
1219  B04C B1 B1 B1 B1
1219  B050 B1 B1 B1 B1
1219  B054 B1 B1 B1 B1
1219  B058 B1 B1 B1 B1
1219  B05C B1 B1 B1 B1
1220  B060 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1220  B064 B1 B1 B1 B1
1220  B068 B1 B1 B1 B1
1220  B06C B1 B1 B1 B1
1220  B070 B1 B1 B1 B1
1220  B074 B1 B1 B1 B1
1220  B078 B1 B1 B1 B1
1220  B07C B1 B1 B1 B1
1221  B080 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1221  B084 B1 B1 B1 B1
1221  B088 B1 B1 B1 B1
1221  B08C B1 B1 B1 B1
1221  B090 B1 B1 B1 B1
1221  B094 B1 B1 B1 B1
1221  B098 B1 B1 B1 B1
1221  B09C B1 B1 B1 B1
1222  B0A0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1222  B0A4 B1 B1 B1 B1
1222  B0A8 B1 B1 B1 B1
1222  B0AC B1 B1 B1 B1
1222  B0B0 B1 B1 B1 B1
1222  B0B4 B1 B1 B1 B1
1222  B0B8 B1 B1 B1 B1
1222  B0BC B1 B1 B1 B1
1223  B0C0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1223  B0C4 B1 B1 B1 B1
1223  B0C8 B1 B1 B1 B1
1223  B0CC B1 B1 B1 B1
1223  B0D0 B1 B1 B1 B1
1223  B0D4 B1 B1 B1 B1
1223  B0D8 B1 B1 B1 B1
1223  B0DC B1 B1 B1 B1
1224  B0E0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1224  B0E4 B1 B1 B1 B1
1224  B0E8 B1 B1 B1 B1
1224  B0EC B1 B1 B1 B1
1224  B0F0 B1 B1 B1 B1
1224  B0F4 B1 B1 B1 B1
1224  B0F8 B1 B1 B1 B1
1224  B0FC B1 B1 B1 B1
1225  B100 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine
1226  B104                              ;(The last DW could just be a DB as it needs to b 257 bytes but its cleaner for source code)
1227  B104
1228  B104 60 00        IR_COUNT        dw  $0060
1229  B106
1230  B106 00           LAST_DELTA      db  0
1231  B107 00           SavedMMU6       db  0
1232  B108 00           SavedMMU7       db  0
1233  B109              SoundInterrupt      EQU IM2Sound
1234  B109              DanubeInterrupt     EQU IM2PlayDanube
1235  B109              AttractInterrrupt   EQU IM2AttractMode
1236  B109
1237  B109
1238  B109              StartOfInterruptHandler:
1239  B109                  DISPLAY "Non Banked Code Ends At", StartOfInterruptHandler
1240  B109
1241  B109                              ; NOTE play then equeue simplifies ligic, more chance slot free
1242  B109                              org $B1B1
1243  B1B1                  DISPLAY "Interrupt Handler Starts at",$
1244  B1B1              ; keeping the handler to a minimal size in order to make best use of
1245  B1B1              ; non pageable memory
1246  B1B1              IM2Routine:             IFDEF INTERRUPT_BLOCKER
1247  B1B1 ~                                            DISPLAY "Interrupt Blocker Enabled"
1248  B1B1 ~                                            ei
1249  B1B1 ~                                            reti
1250  B1B1                                      ELSE
1251  B1B1                                              DISPLAY "Interrupt Blocker Disabled"
1252  B1B1                                      ENDIF
1253  B1B1 F5 C5 D5 E5                          push    af,,bc,,de,,hl,,ix,,iy
1253  B1B5 DD E5 FD E5
1254  B1B9 08                                   ex      af,af'
1255  B1BA D9                                   exx
1256  B1BB F5 C5 D5 E5                          push    af,,bc,,de,,hl
1257  B1BF 21 88 7E                             ld      hl,InterruptCounter
1258  B1C2 34                                   inc     (hl)                        ; cycles each interrupt
1259  B1C3                                      ;break
1260  B1C3 CD D7 B1     IM2SoundHandler:        call    IM2Sound                    ; This is a self modifying code address to change the actual sound vector if we are doing special music e.g. intro or docking
1261  B1C6 E1 D1 C1 F1                          pop    af,,bc,,de,,hl
1262  B1CA 08                                   ex      af,af'
1263  B1CB D9                                   exx
1264  B1CC FD E1 DD E1                          pop     af,,bc,,de,,hl,,ix,,iy
1264  B1D0 E1 D1 C1 F1
1265  B1D4 FB           .IMFinishup:            ei
1266  B1D5 ED 4D                                reti
1267  B1D7                  DISPLAY "Interrupt Handler Ends at",$
1268  B1D7              EndOfNonBanked:
1269  B1D7                  DISPLAY "Non Banked Code + Interrupt Handler Ends At", EndOfNonBanked
1270  B1D7
1271  B1D7
1272  B1D7              SaveMMU6:               MACRO
1273  B1D7 ~                                    GetNextReg  MMU_SLOT_6_REGISTER
1274  B1D7 ~                                    ld      (SavedMMU6),a
1275  B1D7                                      ENDM
1276  B1D7
1277  B1D7              RestoreMMU6:            MACRO
1278  B1D7 ~                                    ld      a,(SavedMMU6)               ; now restore up post interrupt
1279  B1D7 ~                                    nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
1280  B1D7                                      ENDM
1281  B1D7
1282  B1D7              SaveMMU7:               MACRO
1283  B1D7 ~                                    GetNextReg  MMU_SLOT_7_REGISTER
1284  B1D7 ~                                    ld      (SavedMMU7),a
1285  B1D7                                      ENDM
1286  B1D7
1287  B1D7              RestoreMMU7:            MACRO
1288  B1D7 ~                                    ld      a,(SavedMMU7)               ; now restore up post interrupt
1289  B1D7 ~                                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1290  B1D7                                      ENDM
1291  B1D7
1292  B1D7              IM2Sound:               SaveMMU7
1292  B1D7             >                        GetNextReg  MMU_SLOT_7_REGISTER
1292  B1D7 01 3B 24    >            ld bc,$243B
1292  B1DA 3E 57       >            ld a,MMU_SLOT_7_REGISTER
1292  B1DC ED 79       >            out (c),a
1292  B1DE 04          >            inc b
1292  B1DF ED 78       >            in a,(c)
1292  B1E1 32 08 B1    >                        ld      (SavedMMU7),a
1293  B1E4                                      MMUSelectSound
1293  B1E4 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
1294  B1E8                                      ; This is a self modifying code address to change the
1295  B1E8                                      ; actual sound vector if we are doing special music
1296  B1E8                                      ; e.g. intro or docking
1297  B1E8 CD 00 E0     .IM2SoundHandler:       call    SoundInterruptHandler       ; this does the work
1298  B1EB              .DoneInterrupt:         RestoreMMU7
1298  B1EB 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
1298  B1EE ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1299  B1F1 C9                                   ret
1300  B1F2
1301  B1F2
1302  B1F2              IM2PlayDanube:          SaveMMU7
1302  B1F2             >                        GetNextReg  MMU_SLOT_7_REGISTER
1302  B1F2 01 3B 24    >            ld bc,$243B
1302  B1F5 3E 57       >            ld a,MMU_SLOT_7_REGISTER
1302  B1F7 ED 79       >            out (c),a
1302  B1F9 04          >            inc b
1302  B1FA ED 78       >            in a,(c)
1302  B1FC 32 08 B1    >                        ld      (SavedMMU7),a
1303  B1FF                                      MMUSelectSound
1303  B1FF ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
1304  B203                                      ; This is a self modifying code address to change the
1305  B203                                      ; actual sound vector if we are doing special music
1306  B203                                      ; e.g. intro or docking
1307  B203 CD 1B E4     .IM2SoundHandler:       call    PlayDanube                  ; this does the work
1308  B206              .DoneInterrupt:         RestoreMMU7
1308  B206 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
1308  B209 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1309  B20C C9                                   ret
1310  B20D
1311  B20D              IM2AttractMode:         ;break
1312  B20D                                  IFDEF SKIPATTRACTMUSIC
1313  B20D ~                                    DISPLAY "Attract mode Music disabled"
1314  B20D                                  ELSE
1315  B20D                                      DISPLAY "Attract mode Music enabled"
1316  B20D CD F2 B1                             call    IM2PlayDanube
1317  B210                                  ENDIF
1318  B210                                  IFDEF SKIPATTRACTGRAPHICS
1319  B210 ~                                    DISPLAY "Attract mode graphics disabled"
1320  B210                                  ELSE
1321  B210                                      DISPLAY "Attract mode graphics enabled"
1322  B210                                      SaveMMU6
1322  B210             >                        GetNextReg  MMU_SLOT_6_REGISTER
1322  B210 01 3B 24    >            ld bc,$243B
1322  B213 3E 56       >            ld a,MMU_SLOT_6_REGISTER
1322  B215 ED 79       >            out (c),a
1322  B217 04          >            inc b
1322  B218 ED 78       >            in a,(c)
1322  B21A 32 07 B1    >                        ld      (SavedMMU6),a
1323  B21D                                      SaveMMU7
1323  B21D             >                        GetNextReg  MMU_SLOT_7_REGISTER
1323  B21D 01 3B 24    >            ld bc,$243B
1323  B220 3E 57       >            ld a,MMU_SLOT_7_REGISTER
1323  B222 ED 79       >            out (c),a
1323  B224 04          >            inc b
1323  B225 ED 78       >            in a,(c)
1323  B227 32 08 B1    >                        ld      (SavedMMU7),a
1324  B22A                                      ;break
1325  B22A CD 02 78                             call    AttractModeUpdate
1326  B22D                                      RestoreMMU6
1326  B22D 3A 07 B1    >                        ld      a,(SavedMMU6)               ; now restore up post interrupt
1326  B230 ED 92 56    >                        nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
1327  B233                                      RestoreMMU7
1327  B233 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
1327  B236 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1328  B239                                  ENDIF
1329  B239 C9                                   ret
1330  B23A
1331  B23A              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1332  B23A              ;INCLUDE "./title_page.asm"
1333  B23A
1334  B23A              ; Blocks dependent on variables in Universe Banks
1335  B23A              ; Bank 49
1336  B23A              ;    SEG RESETUNIVSEG
1337  B23A              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1338  B23A              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1339  B23A
1340  B23A
1341  B23A
1342  B23A              ;	ORG ResetUniverseAddr
1343  B23A              ;INCLUDE "./GameEngine/resetUniverse.asm"
1344  B23A              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
1345  B23A                  SLOT    MenuShrChtAddr
1346  B23A                  PAGE    BankMenuShrCht
1347  B23A              	ORG     MenuShrChtAddr,BankMenuShrCht
1348  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 C2 8D  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041                          DISPLAY "TODO: space for occupied cells may mvoe to bit flags"
  30+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  31+ C0C1 00           src_buffer_size         DB  0
  32+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  33+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C0C3 4E                                   ld			c,(hl)		; Get Row into b
   5++C0C4 23                                   inc			hl
   6++C0C5 46                                   ld			b,(hl)		; Get Col into b
   7++C0C6 23                                   inc			hl
   8++C0C7 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C0C8 23                                   inc			hl
  10++C0C9 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C0CA 23                                   inc			hl
  12++C0CB E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C0CC EB                                   ex			de,hl		; now hl = address of text data
  14++C0CD 1E FF                                ld			e,txt_status_colour
  15++C0CF C5                                   push		bc
  16++C0D0 D1                                   pop			de
  17++C0D1                                      MMUSelectLayer1
  17++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0D5 CD D7 E0                             call		l1_print_at
  19++C0D8 E1                                   pop			hl
  20++C0D9 C1                                   pop			bc
  21++C0DA 10 E6                                djnz		.BoilerTextLoop
  22++C0DC C9                                   ret
  23++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  34+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  35+ C0DD              SRM_draw_chart_circle_and_crosshair:
  36+ C0DD ED 4B 2C 7F                          ld		bc,(PresentSystemX)				; bc = present system
  37+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  38+ C0E4                                      MMUSelectSpriteBank
  38+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  39+ C0E8 CD F5 E0                             call	sprite_local_cursor
  40+ C0EB 3A E5 83                             ld		a,(Fuel)
  41+ C0EE 57                                   ld		d,a
  42+ C0EF 1E FF                                ld		e,$FF
  43+ C0F1                                      MMUSelectLayer2
  43+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ C0F5 CD CA EB                             call	l2_draw_circle
  45+ C0F8 C9                                   ret
  46+ C0F9                                                      DISPLAY "TODO:  move cursor code"
  47+ C0F9              ; TODO MOVE CURSOR CODE
  48+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ C0F9              SRM_draw_hyperspace_cross_hair:
  50+ C0F9 ED 4B 2E 7F                          ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0FD ED 5B 2C 7F                          ld		de,(PresentSystemX)
  52+ C101 0E 80                                ld		c,src_x_centre
  53+ C103 06 60                                ld		b,src_y_centre
  54+ C105                                      MMUSelectSpriteBank
  54+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  55+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  56+ C10C C9                                   ret
  57+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  58+ C10D 3A 19 7F     src_get_name:           ld      a,(Galaxy)
  59+ C110                                      MMUSelectGalaxyA
  59+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  60+ C113 ED 4B 2E 7F                          ld      bc,(TargetSystemX)
  61+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  62+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  63+ C11E FE 00                                cp      0
  64+ C120 C8                                   ret     z
  65+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  66+ C124 21 8E 8E                             ld		hl,name_expanded
  67+ C127 CD E3 8D                             call	CapitaliseString
  68+ C12A 21 8E 8E                             ld		hl, name_expanded
  69+ C12D 3E FF                                ld      a,$FF
  70+ C12F C9                                   ret
  71+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C130              SRM_update_hyperspace_cross_hair:
  73+ C130 ED 4B 2E 7F                          ld		bc,(TargetSystemX)              ; bc = selected jump
  74+ C134 ED 5B 2C 7F                          ld		de,(PresentSystemX)
  75+ C138 79                                   ld		a,c                             ; a = target x pos
  76+ C139 93                                   sub		e                               ; a = target x - present x
  77+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  78+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  79+ C13F CB 27                                sla		a                               ; .
  80+ C141 CB 27                                sla		a                               ; .
  81+ C143 4F                                   ld      c,a                             ;  .
  82+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  83+ C146 91                                   sub     c                               ; .
  84+ C147 4F                                   ld      c,a                             ; .
  85+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  86+ C14B CB 27        .NoFlipX:               sla		a
  87+ C14D CB 27                                sla		a
  88+ C14F C6 80                                add		a,src_x_centre
  89+ C151 4F                                   ld      c,a
  90+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  91+ C153 92                                   sub		d
  92+ C154 F2 63 C1                             jp      p,.NoFlipY
  93+ C157 ED 44                                neg
  94+ C159 CB 27                                sla     a
  95+ C15B 47                                   ld      b,a
  96+ C15C 3E 60                                ld      a,src_y_centre
  97+ C15E 90                                   sub     b
  98+ C15F 47                                   ld      b,a
  99+ C160 C3 68 C1                             jp      .RedrawSprite
 100+ C163 CB 27        .NoFlipY                sla		a
 101+ C165 C6 60                                add		a,src_y_centre
 102+ C167 47                                   ld		b,a
 103+ C168              .RedrawSprite:          MMUSelectSpriteBank
 103+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 104+ C16C CD D0 E0                             call	sprite_lhc_move
 105+ C16F CD A1 C1                             call    src_name_current
 106+ C172 C9                                   ret
 107+ C173
 108+ C173 26 08        src_clear_name_area:    ld      h,8
 109+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 110+ C178 01 0A A8                             ld      bc,$A80A
 111+ C17B E5           .ClearLoop:             push    hl
 112+ C17C D5                                   push    de
 113+ C17D C5                                   push    bc
 114+ C17E                                      MMUSelectLayer2
 114+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 115+ C182 CD 84 E4                             call	l2_draw_horz_line
 116+ C185 C1                                   pop     bc
 117+ C186 D1                                   pop     de
 118+ C187 E1                                   pop     hl
 119+ C188 04                                   inc     b
 120+ C189 25                                   dec     h
 121+ C18A 20 EF                                jr      nz,.ClearLoop
 122+ C18C C9                                   ret
 123+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 124+ C18D 3A 19 7F     src_system_undercursor: ld      a,(Galaxy)
 125+ C190                                      MMUSelectGalaxyA
 125+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 126+ C193 ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 127+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 128+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 129+ C19E FE 00                                cp      0
 130+ C1A0 C8                                   ret     z
 131+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 132+ C1A4 FE 00                                cp      0
 133+ C1A6 C8                                   ret     z
 134+ C1A7 E5                                   push    hl
 135+ C1A8 F5                                   push    af
 136+ C1A9 CD 73 C1                             call    src_clear_name_area
 137+ C1AC F1                                   pop     af
 138+ C1AD E1                                   pop     hl
 139+ C1AE 01 0A A8                             ld      bc,$A80A
 140+ C1B1 1E FF                                ld		e,$FF
 141+ C1B3                                      MMUSelectLayer2
 141+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 142+ C1B7 CD BE E3                             call	l2_print_7at
 143+ C1BA CD CD C1                             call    src_calc_distance
 144+ C1BD 21 1A C0                             ld      hl,src_distance
 145+ C1C0 01 0A B0                             ld      bc,$B00A
 146+ C1C3 1E FF                                ld		e,$FF
 147+ C1C5                                      MMUSelectLayer2
 147+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 148+ C1C9 CD BE E3                             call	l2_print_7at
 149+ C1CC C9                                   ret
 150+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ C1CD 3A 19 7F     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 152+ C1D0                                      MMUSelectGalaxyA
 152+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 153+ C1D3 11 24 C0                             ld      de,src_dist_amount
 154+ C1D6 21 36 C0                             ld      hl,src_default_dist
 155+ C1D9 ED A0                                ldi
 156+ C1DB ED A0                                ldi
 157+ C1DD ED A0                                ldi
 158+ C1DF ED A0                                ldi
 159+ C1E1 ED A0                                ldi
 160+ C1E3 ED 4B 2C 7F                          ld      bc,(PresentSystemX)
 161+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 162+ C1EB ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 163+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 164+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 165+ C1F6 DD 2A 4E 7F                          ld      ix,(Distance)
 166+ C1FA 11 00 00                             ld      de,0
 167+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 168+ C201 CD EC 9A                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 169+ C204 FD E5                                push    iy
 170+ C206 E1                                   pop     hl                                              ; hl = iy
 171+ C207 11 3B C0                             ld      de,src_distance_val
 172+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 173+ C20B 32 28 C0                             ld		(src_fraction),a
 174+ C20E 2B                                   dec     hl
 175+ C20F CD 55 99                             call    compare16HLDE
 176+ C212 38 18                                jr      c,.done_number
 177+ C214 7E                                   ld      a,(hl)
 178+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 179+ C218 2B                                   dec     hl
 180+ C219 CD 55 99                             call    compare16HLDE
 181+ C21C 38 0E                                jr      c,.done_number
 182+ C21E 7E                                   ld      a,(hl)
 183+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 184+ C222 2B                                   dec     hl
 185+ C223 CD 55 99                             call    compare16HLDE
 186+ C226 38 04                                jr      c,.done_number
 187+ C228 7E                                   ld      a,(hl)
 188+ C229 32 24 C0                             ld      (src_dist_amount),a
 189+ C22C C9           .done_number:           ret
 190+ C22D
 191+ C22D 00 00        PosScan1                DW      0
 192+ C22F 00 00        PosScan2                DW      0
 193+ C231              ; bc = row col, d = xlength e = y length
 194+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 195+ C231              ; 12   X1            X2    OK         2 LT X1
 196+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 197+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 198+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 199+ C231              ;      X1            X2 12 OK         1 GT X2
 200+ C231 16 07        FreeSlotCheck:          ld      d,7
 201+ C233 ED 30                                mul
 202+ C235 79                                   ld      a,c
 203+ C236 83                                   add     e
 204+ C237 30 02                                jr      nc,.NoOverflow
 205+ C239 3E FF        .Overflow:              ld      a,$FF
 206+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 207+ C23C 78                                   ld      a,b
 208+ C23D C6 08                                add     8
 209+ C23F 57                                   ld      d,a                     ; e = max height
 210+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 211+ C244 ED 53 2F C2                          ld      (PosScan2),de
 212+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 213+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 214+ C24F FE 00                                cp      0
 215+ C251 28 3C                                jr      z,.SafeToPrint
 216+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 217+ C254 47                                   ld      b,a
 218+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 219+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 220+ C25A 28 29                                jr      z,.NoBox
 221+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 222+ C25F 3C                                   inc     a
 223+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 223+ C260 DD BE 02    >                        cp     (ix+2)
 223+ C263 D2 85 C2    >                        jp		nc,.NoBox
 224+ C266 3A 2F C2                             ld      a,(PosScan2)
 225+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 225+ C269 DD BE 00    >                        cp      (ix+0)
 225+ C26C DA 85 C2    >                        jp		c, .NoBox
 226+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 227+ C272 3C                                   inc     a
 228+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 228+ C273 DD BE 03    >                        cp     (ix+3)
 228+ C276 D2 85 C2    >                        jp		nc,.NoBox
 229+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 230+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 230+ C27C DD BE 01    >                        cp      (ix+1)
 230+ C27F DA 85 C2    >                        jp		c, .NoBox
 231+ C282 3E FF        .MatchedBox:            ld      a,$FF
 232+ C284 C9                                   ret
 233+ C285 DD 23        .NoBox:                 inc     ix
 234+ C287 DD 23                                inc     ix
 235+ C289 DD 23                                inc     ix
 236+ C28B DD 23                                inc     ix
 237+ C28D 10 C6                                djnz    .CheckBoxLoop
 238+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 239+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 240+ C295 57                                   ld      d,a
 241+ C296 1E 04                                ld      e,4
 242+ C298 ED 30                                mul
 243+ C29A 19                                   add     hl,de
 244+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 245+ C29F 73 23 72 2B                          ld      (hl),de
 246+ C2A3 23                                   inc     hl
 247+ C2A4 23                                   inc     hl
 248+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 249+ C2A9 73 23 72 2B                          ld      (hl),de
 250+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 251+ C2B0 34                                   inc     (hl)
 252+ C2B1 AF                                   xor     a
 253+ C2B2 C9                                   ret
 254+ C2B3
 255+ C2B3 CD A2 84     src_label_ssytem:       call	copy_system_to_working
 256+ C2B6 3A 19 7F                             ld      a,(Galaxy)
 257+ C2B9                                      MMUSelectGalaxyA
 257+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 258+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 259+ C2BF 21 8E 8E                             ld		hl,name_expanded
 260+ C2C2 CD E3 8D                             call	CapitaliseString
 261+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 262+ C2C8 D6 05                                sub		local_label_shift_y
 263+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 264+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 265+ C2CE C6 03                                add		a,local_label_shift_x
 266+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 267+ C2D1 1E 00        .GetStringName:         ld      e,0
 268+ C2D3 21 8E 8E                             ld      hl,name_expanded
 269+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 270+ C2D7 23                                   inc     hl
 271+ C2D8 1C                                   inc     e
 272+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 273+ C2DB 20 F9                                jr      nz,.getStringLoop
 274+ C2DD 16 08                                ld      d,8
 275+ C2DF C5                                   push    bc
 276+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 277+ C2E3 C1                                   pop     bc
 278+ C2E4 FE 00                                cp      0
 279+ C2E6 28 19                                jr      z,.OKToPrint
 280+ C2E8 78                                   ld      a,b
 281+ C2E9 C6 08                                add     8
 282+ C2EB 47                                   ld      b,a
 283+ C2EC C5                                   push    bc
 284+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 285+ C2F0 C1                                   pop     bc
 286+ C2F1 FE 00                                cp      0
 287+ C2F3 28 0C                                jr      z,.OKToPrint
 288+ C2F5 78                                   ld      a,b
 289+ C2F6 D6 10                                sub     16
 290+ C2F8 47                                   ld      b,a
 291+ C2F9 C5                                   push    bc
 292+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 293+ C2FD C1                                   pop     bc
 294+ C2FE FE 00                                cp      0
 295+ C300 C0                                   ret     nz
 296+ C301 1E FF        .OKToPrint:             ld		e,$FF
 297+ C303 21 8E 8E                             ld		hl,name_expanded
 298+ C306                                      MMUSelectLayer2
 298+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 299+ C30A CD BE E3                             call	l2_print_7at
 300+ C30D C9                                   ret
 301+ C30E
 302+ C30E              name_if_possible:
 303+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 304+ C311 D6 05                                sub		local_label_shift_y
 305+ C313 47                                   ld		b,a					; b = effective pixel row
 306+ C314 CB 3F                                srl		a
 307+ C316 CB 3F                                srl		a
 308+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 309+ C31A                                                  DISPLAY "TODO: dont overwrite header"
 310+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 311+ C31A 21 53 7E                             ld		hl,IndexedWork
 312+ C31D ED 31                                add		hl,a
 313+ C31F 7E                                   ld		a,(hl)
 314+ C320 FE 00                                cp		0
 315+ C322                                                  DISPLAY "TODO: need to test +- 1 row"
 316+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 317+ C324 36 01                                ld		(hl),1				; flag as in use
 318+ C326 18 12                                jr		SRCFoundRow
 319+ C328 2B           SRCtryAbove:            dec		hl
 320+ C329 7E                                   ld		a,(hl)
 321+ C32A FE 00                                cp		0
 322+ C32C                                                  DISPLAY "TODO: need to test +- 1 row"
 323+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 324+ C32E 36 01                                ld		(hl),1				; flag as in use
 325+ C330 18 08                                jr		SRCFoundRow
 326+ C332 23           SRCtryBelow:            inc		hl
 327+ C333 23                                   inc		hl
 328+ C334 7E                                   ld		a,(hl)
 329+ C335 FE 00                                cp		0
 330+ C337 C8                                   ret		z
 331+ C338 36 01                                ld		(hl),1				; flag as in use
 332+ C33A CD A2 84     SRCFoundRow:            call	copy_system_to_working
 333+ C33D 3A 19 7F     SRCSmallSizeName:       ld      a,(Galaxy)
 334+ C340                                      MMUSelectGalaxyA
 334+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 335+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 336+ C346 21 8E 8E     SRCCapitaliseName:      ld		hl,name_expanded
 337+ C349 CD E3 8D                             call	CapitaliseString
 338+ C34C 21 8E 8E     SRCPrintName:           ld		hl, name_expanded
 339+ C34F 3A 18 C0                             ld		a,(local_name_row)
 340+ C352 D6 05                                sub		local_label_shift_y
 341+ C354 47                                   ld		b,a					; b = effective pixel row
 342+ C355 3A 19 C0                             ld		a,(local_name_col)
 343+ C358 C6 03                                add		a,local_label_shift_x
 344+ C35A 4F                                   ld		c,a
 345+ C35B 1E FF                                ld		e,$FF
 346+ C35D                                      MMUSelectLayer2
 346+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 347+ C361 CD BE E3                             call	l2_print_7at
 348+ C364 C9                                   ret
 349+ C365
 350+ C365 AF           plot_local_stars:       xor		a
 351+ C366 32 8F 7E                             ld		(XSAV),a
 352+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 353+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 354+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 355+ C373 11 80 00                             ld		de,src_fill_buffer_size
 356+ C376 CD 26 7D                             call	memfill_dma
 356+ C379
 357+ C379 AF           SRCCounterLoop:         xor		a
 358+ C37A 3A 19 7F                             ld      a,(Galaxy)
 359+ C37D                                      MMUSelectGalaxyA
 359+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 360+ C380 DD E5                                push    ix
 361+ C382 DD E5                                push    ix
 362+ C384 E1                                   pop     hl
 363+ C385 11 02 7F                             ld      de,SystemSeed
 364+ C388 CD 75 84                             call    copy_seed
 365+ C38B 3A 03 7F                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 366+ C38E 4F                                   ld		c,a
 367+ C38F 3A 2D 7F     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 368+ C392 47                                   ld		b,a								; so b holds Y ccord
 369+ C393 79                                   ld		a,c
 370+ C394 90                                   sub		b
 371+ C395 CB 7F                                bit		7,a
 372+ C397 28 02                                jr		z,SRCpositivedy
 373+ C399 ED 44        SRCnegativedy:          neg
 374+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 375+ C39D 30 48                                jr		nc,SRCtoofar
 376+ C39F 3A 05 7F     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 377+ C3A2 4F                                   ld		c,a
 378+ C3A3 3A 2C 7F                             ld		a,(PresentSystemX)
 379+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 380+ C3A7 79                                   ld		a,c
 381+ C3A8 90                                   sub		b
 382+ C3A9 CB 7F                                bit		7,a
 383+ C3AB 28 02                                jr		z,SRCpositivedx
 384+ C3AD ED 44        SRCnegativedx:          neg
 385+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 386+ C3B1 30 34                                jr		nc,SRCtoofar
 387+ C3B3 3A 03 7F     SRCOKToPlot             ld		a,(SystemSeed+1)
 388+ C3B6 21 2D 7F                             ld		hl,PresentSystemY
 389+ C3B9 96                                   sub		(hl)
 390+ C3BA CB 27                                sla		a								; * 2
 391+ C3BC C6 60                                add		src_y_centre
 392+ C3BE 32 18 C0                             ld		(local_name_row),a
 393+ C3C1 47                                   ld		b,a
 394+ C3C2 3A 05 7F                             ld		a,(SystemSeed+3)
 395+ C3C5 21 2C 7F                             ld		hl,PresentSystemX
 396+ C3C8 96                                   sub		(hl)
 397+ C3C9 CB 27                                sla		a
 398+ C3CB CB 27                                sla		a								; * 4
 399+ C3CD C6 80                                add		src_x_centre
 400+ C3CF 32 19 C0                             ld		(local_name_col),a
 401+ C3D2 4F                                   ld		c,a
 402+ C3D3 3A 07 7F                             ld		a,(SystemSeed+5)
 403+ C3D6 E6 01                                and		$01
 404+ C3D8 C6 02                                add		a,2
 405+ C3DA 57                                   ld		d,a
 406+ C3DB 1E D8                                ld		e,local_chart_star_colour
 407+ C3DD                                      MMUSelectLayer2
 407+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 408+ C3E1 CD F4 ED                             call	l2_draw_circle_fill
 409+ C3E4                                     ; call    src_get_name
 410+ C3E4 CD B3 C2                             call	src_label_ssytem
 411+ C3E7 E1           SRCtoofar:              pop     hl
 412+ C3E8 ED 34 08 00                          add     hl,8
 413+ C3EC E5                                   push    hl
 414+ C3ED DD E1                                pop     ix
 415+ C3EF 3A 8F 7E                             ld		a,(XSAV)
 416+ C3F2 3D                                   dec		a
 417+ C3F3 FE 00                                cp		0
 418+ C3F5 C8                                   ret		z
 419+ C3F6 32 8F 7E                             ld		(XSAV),a
 420+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 421+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 422+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 422+ C3FC             >                            MMUSelectLayer1
 422+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 422+ C400 CD 8F E0    >                            call	l1_cls
 422+ C403 3E 07       >                            ld		a,7
 422+ C405 CD AA E0    >                            call	l1_attr_cls_to_a
 422+ C408             >                            MMUSelectLayer2
 422+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 422+ C40C CD 0A E0    >                            call    asm_l2_double_buffer_off
 422+ C40F CD 0E E2    >                            call	l2_cls	; Get some space
 422+ C412             >                            MMUSelectSpriteBank
 422+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 422+ C416 CD 6E E5    >                            call    sprite_cls_cursors
 423+ C419 3E 80                                ld      a,$80
 424+ C41B 32 97 7E                             ld      (MenuIdMax),a
 425+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 425+ C41E 2A 2C 7F    >                        ld      hl,(PresentSystemX)
 425+ C421 22 2E 7F    >                        ld      (TargetSystemX),hl
 426+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 427+ C427 11 FD BE                             ld		de,$BEFD
 428+ C42A 3E C0                                ld		a,$C0
 429+ C42C                                      MMUSelectLayer2
 429+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C430 CD F9 E3                             call	l2_draw_box
 431+ C433 01 01 0A                             ld		bc,$0A01
 432+ C436 11 C0 FE                             ld		de,$FEC0
 433+ C439                                      MMUSelectLayer2
 433+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 434+ C43D CD 84 E4                             call	l2_draw_horz_line
 435+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 436+ C442 CD 09 8E                             call	expandTokenToString
 437+ C445 06 01                                ld		b,1
 438+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 439+ C44A CD C2 C0                             call	SRM_print_boiler_text
 440+ C44D CD 6F 84     SRCSetUpChart:          call	copy_galaxy_to_system
 441+ C450 CD 65 C3                             call	plot_local_stars
 442+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 443+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 444+ C459 C9                                   ret
 445+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 446+ C45A 3A 70 80     local_chart_cursors:    ld     a,(CursorKeysPressed)
 447+ C45D                                      ReturnIfAIsZero
 447+ C45D A7          >                        and     a
 447+ C45E C8          >                        ret     z
 448+ C45F 17                                   rla
 449+ C460 DC 78 C4                             call   c,src_UpPressed
 450+ C463 17                                   rla
 451+ C464 DC 95 C4                             call   c,src_DownPressed
 452+ C467 17                                   rla
 453+ C468 DC B4 C4                             call   c,src_LeftPressed
 454+ C46B 17                                   rla
 455+ C46C DC D1 C4                             call   c,src_RightPressed
 456+ C46F 17                                   rla
 457+ C470 DC F0 C4                             call   c,src_HomePressed
 458+ C473 17                                   rla
 459+ C474 DC FA C4                             call   c,src_RecenterPressed
 460+ C477 C9                                   ret
 461+ C478              ;----------------------------------------------------------------------------------------------------------------------------------
 462+ C478 3A 2F 7F     src_UpPressed:          ld     a,(TargetSystemY)
 463+ C47B                                      JumpIfAIsZero   src_BoundsLimit
 463+ C47B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 463+ C47C CA 0F C5    >                        jp	    z, src_BoundsLimit
 464+ C47F 47                                   ld      b,a                         ; save target as we will need it
 465+ C480 3A 2D 7F                             ld      a,(PresentSystemY)
 466+ C483 90                                   sub     b                           ; get the difference between present and target
 467+ C484 FA 8C C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 468+ C487                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 468+ C487 FE 28       >                        cp     40
 468+ C489 D2 0F C5    >                        jp		nc,src_BoundsLimit
 469+ C48C 78           .SkipBoundsTest:        ld      a,b
 470+ C48D 3D                                   dec     a
 471+ C48E 32 2F 7F                             ld      (TargetSystemY),a
 472+ C491 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 473+ C494 C9                                   ret
 474+ C495              ;----------------------------------------------------------------------------------------------------------------------------------
 475+ C495 3A 2D 7F     src_DownPressed:        ld     a,(PresentSystemY)
 476+ C498 47                                   ld      b,a
 477+ C499 3A 2F 7F                             ld      a,(TargetSystemY)
 478+ C49C 4F                                   ld      c,a
 479+ C49D                                      JumpIfAEqNusng 128,src_BoundsLimit
 479+ C49D FE 80       >                        cp     128
 479+ C49F CA 0F C5    >                        jp      z,src_BoundsLimit
 480+ C4A2 90                                   sub     b
 481+ C4A3 FA AB C4                             jp      m,.SkipBoundsTest
 482+ C4A6                                      JumpIfAGTENusng 40,src_BoundsLimit
 482+ C4A6 FE 28       >                        cp     40
 482+ C4A8 D2 0F C5    >                        jp		nc,src_BoundsLimit
 483+ C4AB 79           .SkipBoundsTest:        ld      a,c
 484+ C4AC 3C                                   inc    a
 485+ C4AD 32 2F 7F                             ld      (TargetSystemY),a
 486+ C4B0 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 487+ C4B3 C9                                   ret
 488+ C4B4              ;----------------------------------------------------------------------------------------------------------------------------------
 489+ C4B4 3A 2E 7F     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 490+ C4B7                                      JumpIfAIsZero   src_BoundsLimit
 490+ C4B7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 490+ C4B8 CA 0F C5    >                        jp	    z, src_BoundsLimit
 491+ C4BB 47                                   ld      b,a                         ; save target as we will need it
 492+ C4BC 3A 2C 7F                             ld      a,(PresentSystemX)
 493+ C4BF 90                                   sub     b                           ; get the difference between present and target
 494+ C4C0 FA C8 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 495+ C4C3                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 495+ C4C3 FE 14       >                        cp     20
 495+ C4C5 D2 0F C5    >                        jp		nc,src_BoundsLimit
 496+ C4C8 78           .SkipBoundsTest:        ld      a,b
 497+ C4C9 3D                                   dec     a
 498+ C4CA 32 2E 7F                             ld      (TargetSystemX),a
 499+ C4CD CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 500+ C4D0 C9                                   ret
 501+ C4D1              ;----------------------------------------------------------------------------------------------------------------------------------
 502+ C4D1 3A 2C 7F     src_RightPressed:       ld      a,(PresentSystemX)
 503+ C4D4 47                                   ld      b,a
 504+ C4D5 3A 2E 7F                             ld      a,(TargetSystemX)
 505+ C4D8 4F                                   ld      c,a
 506+ C4D9                                      JumpIfAEqNusng 255,src_BoundsLimit
 506+ C4D9 FE FF       >                        cp     255
 506+ C4DB CA 0F C5    >                        jp      z,src_BoundsLimit
 507+ C4DE 90                                   sub     b
 508+ C4DF FA E7 C4                             jp      m,.SkipBoundsTest
 509+ C4E2                                      JumpIfAGTENusng 20,src_BoundsLimit
 509+ C4E2 FE 14       >                        cp     20
 509+ C4E4 D2 0F C5    >                        jp		nc,src_BoundsLimit
 510+ C4E7 79           .SkipBoundsTest:        ld      a,c
 511+ C4E8 3C                                   inc    a
 512+ C4E9 32 2E 7F                             ld      (TargetSystemX),a
 513+ C4EC CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 514+ C4EF C9                                   ret
 515+ C4F0              ;----------------------------------------------------------------------------------------------------------------------------------
 516+ C4F0 2A 2C 7F     src_HomePressed:        ld      hl,(PresentSystemX)
 517+ C4F3 22 2E 7F                             ld      (TargetSystemX),hl
 518+ C4F6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 519+ C4F9 C9                                   ret
 520+ C4FA              ;----------------------------------------------------------------------------------------------------------------------------------
 521+ C4FA 3A 19 7F     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 522+ C4FD                                      MMUSelectGalaxyA
 522+ C4FD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 523+ C500 ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 524+ C504 CD 70 FB                             call    find_nearest_to_bc
 525+ C507 ED 43 2E 7F                          ld      (TargetSystemX),bc
 526+ C50B CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 527+ C50E C9                                   ret
 528+ C50F              ;----------------------------------------------------------------------------------------------------------------------------------
 529+ C50F AF           src_BoundsLimit:        xor     a
 530+ C510 C9                                   ret
 531+ C511
# file closed: ./Menus/short_range_chart_menu.asm
1349  C511                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
1350  C511              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
1351  C511                  SLOT    MenuGalChtAddr
1352  C511                  PAGE    BankMenuGalCht
1353  C511              	ORG     MenuGalChtAddr
1354  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 C2 8D  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C08F 4E                                   ld			c,(hl)		; Get Row into b
   5++C090 23                                   inc			hl
   6++C091 46                                   ld			b,(hl)		; Get Col into b
   7++C092 23                                   inc			hl
   8++C093 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C094 23                                   inc			hl
  10++C095 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C096 23                                   inc			hl
  12++C097 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C098 EB                                   ex			de,hl		; now hl = address of text data
  14++C099 1E FF                                ld			e,txt_status_colour
  15++C09B C5                                   push		bc
  16++C09C D1                                   pop			de
  17++C09D                                      MMUSelectLayer1
  17++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0A1 CD D7 E0                             call		l1_print_at
  19++C0A4 E1                                   pop			hl
  20++C0A5 C1                                   pop			bc
  21++C0A6 10 E6                                djnz		.BoilerTextLoop
  22++C0A8 C9                                   ret
  23++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 2C 7F  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A E5 83     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD CA EB     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE                              DISPLAY "TODO: move cursor code"
  49+ C0CE              ; TODO MOVE CURSOR CODE
  50+ C0CE
  51+ C0CE ED 4B 2E 7F  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  52+ C0D2 C5                                           push    bc
  53+ C0D3 CB 38                                        srl		b								; but row is row / 2
  54+ C0D5                                              MMUSelectSpriteBank
  54+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  55+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  56+ C0DC C1                                           pop     bc
  57+ C0DD CD A9 E0                                     call	sprite_ghc_move
  58+ C0E0 C9                                           ret
  59+ C0E1
  60+ C0E1
  61+ C0E1 AF           plot_gc_stars:          xor		a
  62+ C0E2 32 8F 7E                             ld		(XSAV),a
  63+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  64+ C0E9 3A 19 7F     .CounterLoop:           ld      a,(Galaxy)
  65+ C0EC                                      MMUSelectGalaxyA
  65+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  66+ C0EF DD E5                                push    ix
  67+ C0F1 E1                                   pop     hl
  68+ C0F2 11 02 7F                             ld      de,SystemSeed
  69+ C0F5 CD 75 84                             call    copy_seed
  70+ C0F8 3A 05 7F                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  71+ C0FB 4F                                   ld		c,a								; c = X Coord
  72+ C0FC 3A 03 7F                             ld		a,(SystemSeed+1)
  73+ C0FF CB 3F                                srl		a								; Ycoord /2
  74+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  75+ C103 47                                   ld		b,a								; b = row
  76+ C104 C5                                   push	bc
  77+ C105 3E D8                                ld		a,galactic_star_colour
  78+ C107                                      MMUSelectLayer2
  78+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  79+ C10B CD B6 E2                             call	l2_plot_pixel
  80+ C10E C1                                   pop		bc
  81+ C10F 3A 06 7F                             ld		a,(SystemSeed+4)
  82+ C112 F6 50                                or		$50								; minimum distance away
  83+ C114 FE 90                                cp		$90
  84+ C116 30 0A                                jr		nc,.NoSecondPixel
  85+ C118 0C           .SecondPixel:           inc		c
  86+ C119 3E 6C                                ld		a,galactic_star_colour2
  87+ C11B                                      MMUSelectLayer2
  87+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  88+ C11F CD B6 E2                             call	l2_plot_pixel
  89+ C122 DD E5        .NoSecondPixel:         push    ix
  90+ C124 E1                                   pop     hl
  91+ C125 ED 34 08 00                          add     hl,8
  92+ C129 E5                                   push    hl
  93+ C12A DD E1                                pop     ix
  94+ C12C 3A 8F 7E                             ld		a,(XSAV)
  95+ C12F 3D                                   dec		a
  96+ C130 FE 00                                cp		0
  97+ C132 C8                                   ret		z
  98+ C133 32 8F 7E                             ld		(XSAV),a
  99+ C136 18 B1                                jr		.CounterLoop
 100+ C138
 101+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 101+ C13C 2A 2A 2A 2A
 101+ C140 2B 2B 2B 2B
 101+ C144 2B 2B 2B 2B
 102+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 102+ C148             >                            MMUSelectLayer1
 102+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 102+ C14C CD 8F E0    >                            call	l1_cls
 102+ C14F 3E 07       >                            ld		a,7
 102+ C151 CD AA E0    >                            call	l1_attr_cls_to_a
 102+ C154             >                            MMUSelectLayer2
 102+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 102+ C158 CD 0A E0    >                            call    asm_l2_double_buffer_off
 102+ C15B CD 0E E2    >                            call	l2_cls	; Get some space
 102+ C15E             >                            MMUSelectSpriteBank
 102+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C162 CD 6E E5    >                            call    sprite_cls_cursors
 103+ C165 DD 2E DC                                 ld      ixl,$DC
 104+ C168 3E 40                                    ld      a,$40
 105+ C16A 32 97 7E                                 ld      (MenuIdMax),a
 106+ C16D 2A 2C 7F                                 ld      hl,(PresentSystemX)
 107+ C170              ;                            ld      (TargetSystemX),hl
 108+ C170 CD 5B C4                                 call    gc_present_system               ; Set up the seed for present system
 109+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 110+ C176 11 FD BE                                 ld		de,$BEFD
 111+ C179 3E C0                                    ld		a,$C0
 112+ C17B                                          MMUSelectLayer2
 112+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C17F CD F9 E3                                 call	l2_draw_box
 114+ C182 01 01 0A                                 ld		bc,$0A01
 115+ C185 11 C0 FE                                 ld		de,$FEC0
 116+ C188 CD 84 E4                                 call	l2_draw_horz_line
 117+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 118+ C18D CD 09 8E                                 call	expandTokenToString
 119+ C190 06 01                                    ld		b,1
 120+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 121+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 122+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 123+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 124+ C19E CD E1 C0                                 call	plot_gc_stars
 125+ C1A1 3A 19 7F                                 ld      a,(Galaxy)
 126+ C1A4                                          MMUSelectGalaxyA
 126+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 127+ C1A7 ED 4B 2E 7F                              ld      bc,(TargetSystemX)
 128+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 129+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 130+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 131+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 131+ C1B2 2A 2C 7F    >                        ld      hl,(PresentSystemX)
 131+ C1B5 22 2E 7F    >                        ld      (TargetSystemX),hl
 132+ C1B8 ED 4B 2E 7F                              ld      bc,(TargetSystemX)
 133+ C1BC                                          MMUSelectSpriteBank
 133+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 134+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 135+ C1C3 3A 19 7F     .CurrentTargetIsValid:      ld      a,(Galaxy)
 136+ C1C6                                          MMUSelectGalaxyA
 136+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 137+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 138+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 139+ C1D0 CD B3 C3                                 call    gc_name_if_possible
 140+ C1D3                                          SetMemFalse TextInputMode
 140+ C1D3 3E FF       >                        ld      a,$FF
 140+ C1D5 32 6F 80    >                        ld      (TextInputMode),a
 141+ C1D8 C9                                       ret
 142+ C1D9
 143+ C1D9              gcDelayVal                  equ $0A
 144+ C1D9              gcBlinkVal                  equ $10
 145+ C1D9
 146+ C1D9
 147+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 148+ C1DA 20           gcCursorChar                DB  " "
 149+ C1DB 00           gcEndOfString               DB  0
 150+ C1DC 00 00 00...  gcInputText                 DS  31
 151+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 151+ C1FF 00
 152+ C200 00 00 00...  gcBlank                     DS  32
 153+ C220
 154+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 156+ C223 21 3C C0                             ld      hl,galactic_find_message
 157+ C226                                      MMUSelectLayer1
 157+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 158+ C22A CD D7 E0                             call	l1_print_at
 159+ C22D C9                                   ret
 160+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 161+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 162+ C231                                      MMUSelectKeyboard
 162+ C231 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 163+ C235 CD 3D E2                             call    keyboard_copy_input_to_de
 164+ C238 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 165+ C23B ED A0                                ldi                             ; Copy cursor to local
 166+ C23D 3A 39 E2                             ld      a,(InputCursor)
 167+ C240 3C                                   inc     a
 168+ C241 47                                   ld      b,a
 169+ C242 3E 14                                ld      a,20
 170+ C244 90                                   sub     b
 171+ C245 47                                   ld      b,a
 172+ C246 3E 20                                ld      a," "
 173+ C248 12           .SpacePad:              ld      (de),a
 174+ C249 13                                   inc     de
 175+ C24A 10 FC                                djnz    .SpacePad
 176+ C24C AF                                   xor     a
 177+ C24D 12                                   ld      (de),a
 178+ C24E 11 38 B0                             ld		de,galactic_find_text    ; Display text
 179+ C251 21 DC C1                             ld      hl,gcInputText
 180+ C254                                      MMUSelectLayer1
 180+ C254 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 181+ C258 CD D7 E0                             call	l1_print_at
 182+ C25B C9                                   ret
 183+ C25C
 184+ C25C 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 185+ C25F 3D                                   dec     a
 186+ C260 32 D9 C1                             ld      (gcCursorBlink),a
 187+ C263 C0                                   ret     nz
 188+ C264 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 189+ C266 32 D9 C1                             ld      (gcCursorBlink),a
 190+ C269 3A DA C1                             ld      a,(gcCursorChar)
 191+ C26C FE 20                                cp      " "
 192+ C26E 28 06                                jr      z,.ChangeToStar
 193+ C270 3E 20                                ld      a," "
 194+ C272 32 DA C1                             ld      (gcCursorChar),a
 195+ C275 C9                                   ret
 196+ C276 3E 2A        .ChangeToStar:          ld      a,"*"
 197+ C278 32 DA C1                             ld      (gcCursorChar),a
 198+ C27B C9                                   ret
 199+ C27C              ;----------------------------------------------------------------------------------------------------------------------------------
 200+ C27C              ; The main loop handles the find key
 201+ C27C              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 201+ C27C 3A 6F 80    >                        ld      a,(TextInputMode)
 201+ C27F A7          >                        and     a
 201+ C280 CA A1 C2    >                        jp      z, AlreadyInInputMode
 202+ C283              .StartFindCheck:        MacroIsKeyPressed c_Pressed_Find                        ;Is F pressed
 202+ C283 3E 4E       >                        ld      a,c_Pressed_Find
 202+ C285             >                        MMUSelectKeyboard
 202+ C285 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 202+ C289 CD A2 E1    >                        call    is_key_pressed
 203+ C28C C0                                   ret     nz                                      ;the main loop handles find key
 204+ C28D                                      MMUSelectKeyboard
 204+ C28D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 205+ C291 CD 9C E2                             call    initInputText                           ;Initialise find input
 206+ C294                                      SetMemTrue TextInputMode                        ;Set input mode to true
 206+ C294 AF          >                        xor     a
 206+ C295 32 6F 80    >                        ld      (TextInputMode),a
 207+ C298                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 207+ C298 3E 10       >                        ld      a,gcBlinkVal
 207+ C29A 32 D9 C1    >                        ld      (gcCursorBlink),a
 208+ C29D CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 209+ C2A0 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 210+ C2A1              ;Already in input mode post pressing find
 211+ C2A1              AlreadyInInputMode:     MMUSelectKeyboard
 211+ C2A1 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 212+ C2A5 CD C3 E2                             call    InputName                               ; Call input routine to parse a key
 213+ C2A8                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 213+ C2A8 3A 3B E2    >                        ld      a,(InputChanged)
 213+ C2AB A7          >                        and     a
 213+ C2AC C2 B9 C2    >                        jp      nz, .blinkNoDelay
 214+ C2AF              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 214+ C2AF 3A 3A E2    >                        ld      a,(EnterPressed)
 214+ C2B2 A7          >                        and     a
 214+ C2B3 CA C5 C2    >                        jp      z, .FindEnterPressed
 215+ C2B6 CD 2E C2                             call    gc_display_find_string                  ; update string
 216+ C2B9 CD 5C C2     .blinkNoDelay:          call    blink_cursor
 217+ C2BC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 217+ C2BC 3A D9 C1    >                        ld      a,(gcCursorBlink)
 217+ C2BF FE 10       >                        cp      gcBlinkVal
 217+ C2C1 CC 2E C2    >                        call    z,gc_display_find_string
 218+ C2C4 C9                                   ret
 219+ C2C5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 219+ C2C5 3E FF       >                        ld      a,$FF
 219+ C2C7 32 3A E2    >                        ld      (EnterPressed),a
 220+ C2CA                                      SetMemFalse TextInputMode                       ; leave input mode
 220+ C2CA 3E FF       >                        ld      a,$FF
 220+ C2CC 32 6F 80    >                        ld      (TextInputMode),a
 221+ C2CF 3A 19 7F                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 222+ C2D2                                      MMUSelectGalaxyA
 222+ C2D2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 223+ C2D5 21 19 E2                             ld      hl,InputString
 224+ C2D8 11 5E E8                             ld      de,GalaxySearchString
 225+ C2DB CD D0 F6                             call    GalaxyCopyLoop
 226+ C2DE CD 39 FB                             call    find_system_by_name
 227+ C2E1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 228+ C2E3 28 1D                                jr      z,.FindNoMatch
 229+ C2E5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 230+ C2E8 4F                                   ld      c,a
 231+ C2E9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 232+ C2EC 47                                   ld      b,a
 233+ C2ED ED 43 2E 7F                          ld      (TargetSystemX),bc
 234+ C2F1 CD 94 C3                             call    UpdateGalacticCursor
 235+ C2F4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 236+ C2F7 21 73 C0                             ld      hl,galactic_find_match
 237+ C2FA                                      MMUSelectLayer1
 237+ C2FA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 238+ C2FE CD D7 E0                             call	l1_print_at
 239+ C301 C9                                   ret
 240+ C302              .FindNoMatch:           ; if not found display "Not found"
 241+ C302                                      ; move curor if found
 242+ C302 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 243+ C305 21 58 C0                             ld      hl,galactic_find_no_match
 244+ C308                                      MMUSelectLayer1
 244+ C308 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 245+ C30C CD D7 E0                             call	l1_print_at
 246+ C30F C9                                   ret; DOSTUFFHERE
 247+ C310              ;----------------------------------------------------------------------------------------------------------------------------------
 248+ C310              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 248+ C310 3A 6F 80    >                        ld      a,(TextInputMode)
 248+ C313 A7          >                        and     a
 248+ C314 C8          >                        ret     z
 249+ C315 3A 70 80                             ld      a,(CursorKeysPressed)
 250+ C318                                      ReturnIfAIsZero
 250+ C318 A7          >                        and     a
 250+ C319 C8          >                        ret     z
 251+ C31A 17                                   rla
 252+ C31B DC 33 C3                             call   c,gc_UpPressed
 253+ C31E 17                                   rla
 254+ C31F DC 43 C3                             call   c,gc_DownPressed
 255+ C322 17                                   rla
 256+ C323 DC 53 C3                             call   c,gc_LeftPressed
 257+ C326 17                                   rla
 258+ C327 DC 63 C3                             call   c,gc_RightPressed
 259+ C32A 17                                   rla
 260+ C32B DC 73 C3                             call   c,gc_HomePressed
 261+ C32E 17                                   rla
 262+ C32F DC 7D C3                             call   c,gc_RecenterPressed
 263+ C332 C9                                   ret
 264+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 265+ C333 3A 2F 7F     gc_UpPressed:           ld     a,(TargetSystemX+1)
 266+ C336                                      JumpIfAEqNusng 1,gc_BoundsLimit
 266+ C336 FE 01       >                        cp     1
 266+ C338 CA 92 C3    >                        jp      z,gc_BoundsLimit
 267+ C33B 3D                                   dec     a
 268+ C33C 32 2F 7F                             ld      (TargetSystemX+1),a
 269+ C33F CD 94 C3                             call    UpdateGalacticCursor
 270+ C342 C9                                   ret
 271+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 272+ C343 3A 2F 7F     gc_DownPressed:         ld     a,(TargetSystemX+1)
 273+ C346                                      JumpIfAEqNusng 255,gc_BoundsLimit
 273+ C346 FE FF       >                        cp     255
 273+ C348 CA 92 C3    >                        jp      z,gc_BoundsLimit
 274+ C34B 3C                                   inc    a
 275+ C34C 32 2F 7F                             ld      (TargetSystemX+1),a
 276+ C34F CD 94 C3                             call    UpdateGalacticCursor
 277+ C352 C9                                   ret
 278+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 279+ C353 3A 2E 7F     gc_LeftPressed:         ld     a,(TargetSystemX)
 280+ C356                                      JumpIfAEqNusng 2,gc_BoundsLimit
 280+ C356 FE 02       >                        cp     2
 280+ C358 CA 92 C3    >                        jp      z,gc_BoundsLimit
 281+ C35B 3D                                   dec    a
 282+ C35C 32 2E 7F                             ld      (TargetSystemX),a
 283+ C35F CD 94 C3                             call    UpdateGalacticCursor
 284+ C362 C9                                   ret
 285+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 286+ C363 3A 2E 7F     gc_RightPressed:        ld     a,(TargetSystemX)
 287+ C366                                      JumpIfAEqNusng 253,gc_BoundsLimit
 287+ C366 FE FD       >                        cp     253
 287+ C368 CA 92 C3    >                        jp      z,gc_BoundsLimit
 288+ C36B 3C                                   inc    a
 289+ C36C 32 2E 7F                             ld      (TargetSystemX),a
 290+ C36F CD 94 C3                             call    UpdateGalacticCursor
 291+ C372 C9                                   ret
 292+ C373              ;----------------------------------------------------------------------------------------------------------------------------------
 293+ C373 2A 2C 7F     gc_HomePressed:         ld      hl,(PresentSystemX)
 294+ C376 22 2E 7F                             ld      (TargetSystemX),hl
 295+ C379 CD 94 C3                             call    UpdateGalacticCursor
 296+ C37C C9                                   ret
 297+ C37D              ;----------------------------------------------------------------------------------------------------------------------------------
 298+ C37D 3A 19 7F     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 299+ C380                                      MMUSelectGalaxyA
 299+ C380 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 300+ C383 ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 301+ C387 CD 70 FB                             call    find_nearest_to_bc
 302+ C38A ED 43 2E 7F                          ld      (TargetSystemX),bc
 303+ C38E CD 94 C3                             call    UpdateGalacticCursor
 304+ C391 C9                                   ret
 305+ C392              ;----------------------------------------------------------------------------------------------------------------------------------
 306+ C392 AF           gc_BoundsLimit          xor     a
 307+ C393 C9                                   ret
 308+ C394
 309+ C394              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C394 ED 4B 2E 7F  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 311+ C398              OnGalacticChart:        MMUSelectSpriteBank
 311+ C398 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 312+ C39C CD A9 E0                             call	sprite_ghc_move
 313+ C39F 3A 19 7F                             ld      a,(Galaxy)
 314+ C3A2                                      MMUSelectGalaxyA
 314+ C3A2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 315+ C3A5 ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 316+ C3A9 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 317+ C3AD CD 64 FC                             call    galaxy_system_under_cursor
 318+ C3B0 FE 00                                cp      0
 319+ C3B2 C8                                   ret     z
 320+ C3B3              ; just fall into gc_name_if_possible
 321+ C3B3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 322+ C3B6 CD E1 C3                             call    gc_clear_name_area
 323+ C3B9 21 8E 8E                             ld		hl,name_expanded
 324+ C3BC CD E3 8D                             call	CapitaliseString
 325+ C3BF 21 8E 8E                             ld		hl, name_expanded
 326+ C3C2 01 0A A0                             ld      bc,$A00A
 327+ C3C5 1E FF                                ld		e,$FF
 328+ C3C7                                      MMUSelectLayer2
 328+ C3C7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ C3CB CD BE E3                             call	l2_print_7at
 330+ C3CE CD FB C3                             call    gc_calc_distance
 331+ C3D1 21 14 C0                             ld      hl,galactic_chart_distance
 332+ C3D4 01 0A A8                             ld      bc,$A80A
 333+ C3D7 1E FF                                ld		e,$FF
 334+ C3D9                                      MMUSelectLayer2
 334+ C3D9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 335+ C3DD CD BE E3                             call	l2_print_7at
 336+ C3E0 C9                                   ret
 337+ C3E1              ;----------------------------------------------------------------------------------------------------------------------------------
 338+ C3E1 26 08        gc_clear_name_area:     ld      h,8
 339+ C3E3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 340+ C3E6 01 0A A0                             ld      bc,$A00A
 341+ C3E9 E5           .ClearLoop:             push    hl
 342+ C3EA D5                                   push    de
 343+ C3EB C5                                   push    bc
 344+ C3EC                                      MMUSelectLayer2
 344+ C3EC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 345+ C3F0 CD 84 E4                             call	l2_draw_horz_line
 346+ C3F3 C1                                   pop     bc
 347+ C3F4 D1                                   pop     de
 348+ C3F5 E1                                   pop     hl
 349+ C3F6 04                                   inc     b
 350+ C3F7 25                                   dec     h
 351+ C3F8 20 EF                                jr      nz,.ClearLoop
 352+ C3FA C9                                   ret
 353+ C3FB              ;----------------------------------------------------------------------------------------------------------------------------------
 354+ C3FB 3A 19 7F     gc_calc_distance:       ld      a,(Galaxy)
 355+ C3FE                                      MMUSelectGalaxyA
 355+ C3FE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 356+ C401 11 1E C0                             ld      de,galactic_chart_dist_amount
 357+ C404 21 30 C0                             ld      hl,galactic_default_dist
 358+ C407 ED A0                                ldi
 359+ C409 ED A0                                ldi
 360+ C40B ED A0                                ldi
 361+ C40D ED A0                                ldi
 362+ C40F ED A0                                ldi
 363+ C411 ED 4B 2C 7F                          ld      bc,(PresentSystemX)
 364+ C415 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 365+ C419 ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 366+ C41D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 367+ C421 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 368+ C424 DD 2A 4E 7F                          ld      ix,(Distance)
 369+ C428 11 00 00                             ld      de,0
 370+ C42B FD 21 36 C0                          ld      iy,galactic_distance
 371+ C42F CD EC 9A                             call    DispDEIXtoIY
 372+ C432 FD E5                                push    iy
 373+ C434 E1                                   pop     hl
 374+ C435 11 36 C0                             ld      de,galactic_distance
 375+ C438 7E                                   ld		a,(hl)				;Push last digit to post decimal
 376+ C439 32 22 C0                             ld		(galactic_chart_fraction),a
 377+ C43C 2B                                   dec     hl
 378+ C43D CD 55 99                             call    compare16HLDE
 379+ C440 38 18                                jr      c,.done_number
 380+ C442 7E                                   ld      a,(hl)
 381+ C443 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 382+ C446 2B                                   dec     hl
 383+ C447 CD 55 99                             call    compare16HLDE
 384+ C44A 38 0E                                jr      c,.done_number
 385+ C44C 7E                                   ld      a,(hl)
 386+ C44D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 387+ C450 2B                                   dec     hl
 388+ C451 CD 55 99                             call    compare16HLDE
 389+ C454 38 04                                jr      c,.done_number
 390+ C456 7E                                   ld      a,(hl)
 391+ C457 32 1E C0                             ld      (galactic_chart_dist_amount),a
 392+ C45A C9           .done_number:           ret
 393+ C45B              ;----------------------------------------------------------------------------------------------------------------------------------
 394+ C45B AF           gc_present_system:      xor     a
 395+ C45C 32 8F 7E                             ld		(XSAV),a
 396+ C45F DD 21 16 E0                          ld      ix,galaxy_data
 397+ C463 3A 19 7F     GCCounterLoop:          ld      a,(Galaxy)
 398+ C466                                      MMUSelectGalaxyA
 398+ C466 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 399+ C469 2A 2C 7F                             ld      hl,(PresentSystemX)
 400+ C46C DD E5                                push    ix
 401+ C46E 7D                                   ld      a,l
 402+ C46F DD BE 03                             cp      (ix+3)                          ; seed x
 403+ C472 20 14                                jr      nz,.ItsNotThisX
 404+ C474 7C                                   ld      a,h
 405+ C475 DD BE 01                             cp      (ix+1)                          ; seed x
 406+ C478 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 407+ C47A DD E5                                push    ix
 408+ C47C E1                                   pop     hl
 409+ C47D 11 20 7F                             ld      de,PresentSystemSeeds
 410+ C480 CD 75 84                             call    copy_seed
 411+ C483 3E FF                                ld      a,$FF
 412+ C485 DD E1                                pop     ix
 413+ C487 C9                                   ret
 414+ C488 E1           .ItsNotThisX:           pop     hl
 415+ C489 ED 34 08 00                          add     hl,8
 416+ C48D E5                                   push    hl
 417+ C48E DD E1                                pop     ix
 418+ C490 3A 8F 7E                             ld		a,(XSAV)
 419+ C493 3D                                   dec		a
 420+ C494 32 8F 7E                             ld      (XSAV),a
 421+ C497 FE 00                                cp		0
 422+ C499 C8                                   ret		z
 423+ C49A 18 C7                                jr		GCCounterLoop
 424+ C49C
# file closed: ./Menus//galactic_chart_menu.asm
1355  C49C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
1356  C49C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
1357  C49C                  SLOT    MenuInventAddr
1358  C49C                  PAGE    BankMenuInvent
1359  C49C              	ORG     MenuInventAddr
1360  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C071 4E                                   ld			c,(hl)		; Get Row into b
   5++C072 23                                   inc			hl
   6++C073 46                                   ld			b,(hl)		; Get Col into b
   7++C074 23                                   inc			hl
   8++C075 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C076 23                                   inc			hl
  10++C077 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C078 23                                   inc			hl
  12++C079 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C07A EB                                   ex			de,hl		; now hl = address of text data
  14++C07B 1E FF                                ld			e,txt_status_colour
  15++C07D C5                                   push		bc
  16++C07E D1                                   pop			de
  17++C07F                                      MMUSelectLayer1
  17++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C083 CD D7 E0                             call		l1_print_at
  19++C086 E1                                   pop			hl
  20++C087 C1                                   pop			bc
  21++C088 10 E6                                djnz		.BoilerTextLoop
  22++C08A C9                                   ret
  23++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A E5 83     	ld		a,(Fuel)
   4++C136 11 B8 AF     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 E8 83                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 69 87                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 0E 8C                             ld		hl, WordIdx
 118+ C17A CD 69 87                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD D7 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD D7 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 69 87                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 0E 8C                             ld		hl,WordIdx
 148+ C1C1 CD 69 87                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD D7 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A E3 83     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A E1 83                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 8F E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD AA E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 0A E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD 0E E2    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 6E E5    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 97 7E                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E5                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F9 E3                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 84 E4                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 B8 AF                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 5E E3                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 5E E3                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1361  C281                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
1362  C281              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
1363  C281                  SLOT    MenuSystemAddr
1364  C281                  PAGE    BankMenuSystem
1365  C281              	ORG     MenuSystemAddr
1366  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 C2 8D  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 8E 8E  						DW $0280,name_expanded
   5+ C018 08 0B 20 89  						DW $0B08,WordDistance
   6+ C01C 08 13 29 89  						DW $1308,WordEconomy
   7+ C020 08 1B 31 89  						DW $1B08,WordGovernment
   8+ C024 08 23 3C 89  						DW $2308,WordTechLevel
   9+ C028 08 2B 46 89  						DW $2B08,WordPopulation
  10+ C02C 08 3B 61 89  						DW $3B08,WordGross
  11+ C030 38 3B 67 89  						DW $3B38,WordProductivity
  12+ C034 08 43 74 89  						DW $4308,WordAverage
  13+ C038 48 43 7C 89  						DW $4348,WordRadius
  14+ C03C 60 0B C2 8D  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 C2 8D  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 19 7F     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 107+ C2B1 ED 4B 2C 7F                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C2C6 4E                                   ld			c,(hl)		; Get Row into b
   5++C2C7 23                                   inc			hl
   6++C2C8 46                                   ld			b,(hl)		; Get Col into b
   7++C2C9 23                                   inc			hl
   8++C2CA 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C2CB 23                                   inc			hl
  10++C2CC 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C2CD 23                                   inc			hl
  12++C2CE E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C2CF EB                                   ex			de,hl		; now hl = address of text data
  14++C2D0 1E FF                                ld			e,txt_status_colour
  15++C2D2 C5                                   push		bc
  16++C2D3 D1                                   pop			de
  17++C2D4                                      MMUSelectLayer1
  17++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C2D8 CD D7 E0                             call		l1_print_at
  19++C2DB E1                                   pop			hl
  20++C2DC C1                                   pop			bc
  21++C2DD 10 E6                                djnz		.BoilerTextLoop
  22++C2DF C9                                   ret
  23++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 8F E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD AA E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 0A E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD 0E E2    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 6E E5    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 97 7E                             ld		(MenuIdMax),a
 134+ C316 3A 19 7F     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C31C ED 4B 2E 7F  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 2C 7F  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 2E 7F  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 2C 7F                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 1A 7F     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F9 E3                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 84 E4                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 09 8E                             call	expandTokenToString
 170+ C37B 3A 19 7F     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 8E 8E                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 8E 8E                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 4E 7F  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD DD 9A                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD D7 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 09 8E                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 09 8E                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD FB 8D                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD D7 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD D7 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD DD 9A                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD D7 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 19 7F     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD D7 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD EC 9A                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD D7 E0                             call	l1_print_at
 272+ C48F 3A 19 7F     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD EC 9A                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD D7 E0                             call	l1_print_at
 289+ C4BC 3A 19 7F     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,     a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 24 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1367  C4F7                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
1368  C4F7              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
1369  C4F7                  SLOT    MenuMarketAddr
1370  C4F7                  PAGE    BankMenuMarket
1371  C4F7                  ORG     MenuMarketAddr
1372  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 C2 8D  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 8E 8E  						DW $0220,name_expanded
   4+ C018 80 0B 10 88  						DW $0B80,WordUnit
   5+ C01C B0 0B 59 8A  						DW $0BB0,WordQuantity
   6+ C020 08 13 37 8A  						DW $1308,WordProduct
   7+ C024 60 13 3F 8A  						DW $1360,WordUoM
   8+ C028 80 13 43 8A  						DW $1380,WordPrice
   9+ C02C B0 13 67 8A  						DW $13B0,WordStock
  10+ C030 E0 13 63 8A  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 3F E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 3F E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD                                                  DISPLAY "TODO: optimise"
 152+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 153+ C1BE 13                                   inc		de						; with just an inc De
 154+ C1BF 0E FF                                ld	c,-1
 155+ C1C1 18 D9                                jr		MPM_Num1
 156+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 157+ C1C5 3C           .NumLeadBlank2:	        inc	a
 158+ C1C6 09                                   add	hl,bc
 159+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 160+ C1C9 FE 30                                cp	'0'
 161+ C1CB 20 02                                jr	nz,.DontBlank
 162+ C1CD 3E 20        .Blank:                 ld	a,' '
 163+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 164+ C1D1 12                                   ld	(de),a
 165+ C1D2 13                                   inc	de
 166+ C1D3 C9                                   ret
 167+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 168+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 169+ C1D6 28 30                                jr	z,.NoStock
 170+ C1D8 26 00                                ld h,0
 171+ C1DA 6F                                   ld l,a
 172+ C1DB 01 9C FF                             ld	bc,-100
 173+ C1DE CD F7 C1                             call	.NumLeadBlank1
 174+ C1E1 FE 20        .WasLead0:              cp      ' '
 175+ C1E3 20 09                                jr      nz,.NotHundredsZero
 176+ C1E5 0E F6                                ld	c,-10
 177+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 178+ C1EA 0E FF                                ld	c,-1
 179+ C1EC 18 AE                                jr		MPM_Num1
 180+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 181+ C1F0 CD 9C C1                             call	MPM_Num1
 182+ C1F3 0E FF                                ld	c,-1
 183+ C1F5 18 A5                                jr		MPM_Num1
 184+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 185+ C1F9 3C           .NumLeadBlank2:	        inc	a
 186+ C1FA 09                                   add	hl,bc
 187+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 188+ C1FD FE 30                                cp	'0'
 189+ C1FF 20 02                                jr	nz,.DontBlank
 190+ C201 3E 20        .Blank:                 ld	a,' '
 191+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 192+ C205 12                                   ld	(de),a
 193+ C206 13                                   inc	de
 194+ C207 C9                                   ret
 195+ C208 3E 20        .NoStock:               ld	a,' '
 196+ C20A 12                                   ld	(de),a
 197+ C20B 13                                   inc	de
 198+ C20C 12                                   ld	(de),a
 199+ C20D 13                                   inc	de
 200+ C20E 3E 2D                                ld	a,'-'
 201+ C210 12                                   ld	(de),a
 202+ C211 13                                   inc de
 203+ C212 C9                                   ret
 204+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C214 4E                                   ld			c,(hl)		; Get Row into b
   5++C215 23                                   inc			hl
   6++C216 46                                   ld			b,(hl)		; Get Col into b
   7++C217 23                                   inc			hl
   8++C218 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C219 23                                   inc			hl
  10++C21A 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C21B 23                                   inc			hl
  12++C21C E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C21D EB                                   ex			de,hl		; now hl = address of text data
  14++C21E 1E FF                                ld			e,txt_status_colour
  15++C220 C5                                   push		bc
  16++C221 D1                                   pop			de
  17++C222                                      MMUSelectLayer1
  17++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C226 CD D7 E0                             call		l1_print_at
  19++C229 E1                                   pop			hl
  20++C22A C1                                   pop			bc
  21++C22B 10 E6                                djnz		.BoilerTextLoop
  22++C22D C9                                   ret
  23++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 206+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 207+ C22E 2A E3 83     MKT_GetCash:            ld		hl,(Cash+2)
 208+ C231 EB                                   ex      de,hl
 209+ C232 DD 2A E1 83                          ld      ix,(Cash)
 210+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 211+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 212+ C23D FD E5                                push    IY
 213+ C23F D1                                   pop     de
 214+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 215+ C243 01 0B 00                             ld      bc,11
 216+ C246 ED B0                                ldir
 217+ C248 C9                                   ret
 218+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 220+ C24C DD 21 00 00                          ld      ix,0
 221+ C250 3A E7 83                             ld      a,(CargoRunningLoad)
 222+ C253 DD 6F                                ld      ixl,a
 223+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 224+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 225+ C25C FD E5                                push    IY
 226+ C25E D1                                   pop     de
 227+ C25F 13                                   inc     de
 228+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 229+ C263 01 0B 00                             ld      bc,11
 230+ C266 ED B0                                ldir
 231+ C268 C9                                   ret
 232+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 233+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 234+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 235+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 236+ C272                                      MMUSelectLayer1
 236+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 237+ C276 CD D7 E0                             call	l1_print_at
 238+ C279 C9                                   ret
 239+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 240+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 241+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 242+ C280 11 48 B0                             ld      de,mkt_cash_position
 243+ C283                                      MMUSelectLayer1
 243+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 244+ C287 CD D7 E0                             call	l1_print_at
 245+ C28A C9                                   ret
 246+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 247+ C28B              ; "A = stock item number"
 248+ C28B F5           PrintMarketItem:        push     af
 249+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 250+ C28F 57                                   ld      d,a                 ; .
 251+ C290 1E 08                                ld      e,8                 ; .
 252+ C292 ED 30                                mul                         ; .
 253+ C294 53                                   ld      d,e                 ; .
 254+ C295 1E 00                                ld      e,0                 ; .
 255+ C297 19                                   add     hl,de               ; .
 256+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 257+ C29B EB                                   ex      hl,de               ; .
 258+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 259+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 259+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 260+ C2A3 CD D7 E0                             call	l1_print_at         ; .
 261+ C2A6 F1                                   pop     af
 262+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 263+ C2AB FD 21 E8 83                          ld      iy,CargoTonnes
 264+ C2AF 1E 08                                ld		e,8
 265+ C2B1 57                                   ld		d,a
 266+ C2B2 ED 30                                mul
 267+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 268+ C2B6 16 00                                ld      d,0
 269+ C2B8 5F                                   ld      e,a
 270+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 271+ C2BB              .GetName:               MMUSelectStockTable
 271+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 272+ C2BF DD 7E 00                             ld		a,(ix+0)
 273+ C2C2 21 0E 8C                             ld		hl,WordIdx
 274+ C2C5 CD 69 87                             call	getTableText
 275+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 276+ C2CC                                      MMUSelectLayer1
 276+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2D0 CD D7 E0                             call	l1_print_at
 278+ C2D3              .GetUom                 MMUSelectStockTable
 278+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2D7 DD 7E 07                             ld		a,(ix+7)
 280+ C2DA C6 2E                                add		a,market_UomOffset
 281+ C2DC 21 0E 8C                             ld		hl,WordIdx
 282+ C2DF CD 69 87                             call	getTableText
 283+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 284+ C2E6 1E 68                                ld		e,market_uom
 285+ C2E8                                      MMUSelectLayer1
 285+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C2EC CD D7 E0                             call	l1_print_at
 287+ C2EF              .GetPrice:              MMUSelectStockTable
 287+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 288+ C2F3 DD 7E 02                             ld		a,(ix+2)
 289+ C2F6 11 34 C0                             ld		de,txt_market_amount
 290+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 291+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 292+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 293+ C303 1E 88                                ld		e,market_price
 294+ C305                                      MMUSelectLayer1
 294+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 295+ C309 CD D7 E0                             call	l1_print_at
 296+ C30C              .GetQty:                MMUSelectStockTable
 296+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 297+ C310 DD 7E 01                             ld		a,(ix+1)
 298+ C313 11 39 C0                             ld		de,txt_market_quantity
 299+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 300+ C319 21 39 C0                             ld		hl,txt_market_quantity
 301+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 302+ C320 1E B0                                ld		e,market_Quantity
 303+ C322                                      MMUSelectLayer1
 303+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 304+ C326 CD D7 E0                             call	l1_print_at
 305+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 306+ C32C 11 3D C0                             ld      de,txt_market_cargo
 307+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 308+ C332 21 3D C0                             ld      hl,txt_market_cargo
 309+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 310+ C339 1E E0                                ld      e,market_Cargo
 311+ C33B                                      MMUSelectLayer1
 311+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 312+ C33F CD D7 E0                             call	l1_print_at
 313+ C342 C9                                   ret
 314+ C343
 315+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 315+ C343             >                            MMUSelectLayer1
 315+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 315+ C347 CD 8F E0    >                            call	l1_cls
 315+ C34A 3E 07       >                            ld		a,7
 315+ C34C CD AA E0    >                            call	l1_attr_cls_to_a
 315+ C34F             >                            MMUSelectLayer2
 315+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 315+ C353 CD 0A E0    >                            call    asm_l2_double_buffer_off
 315+ C356 CD 0E E2    >                            call	l2_cls	; Get some space
 315+ C359             >                            MMUSelectSpriteBank
 315+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 315+ C35D CD 6E E5    >                            call    sprite_cls_cursors
 316+ C360 3E 20                                ld      a,$20
 317+ C362 32 97 7E                             ld      (MenuIdMax),a
 318+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 319+ C368 11 FD BE                             ld		de,$BEFD
 320+ C36B 3E C0                                ld		a,$C0
 321+ C36D                                      MMUSelectLayer2
 321+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 322+ C371 CD F9 E3                             call	l2_draw_box
 323+ C374 01 01 0A                             ld		bc,$0A01
 324+ C377 11 C0 FE                             ld		de,$FEC0
 325+ C37A CD 84 E4                             call	l2_draw_horz_line
 326+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 327+ C380 11 C0 50                             ld		de,$50C0
 328+ C383 CD 84 E4                             call	l2_draw_horz_line
 329+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 330+ C389 11 C0 18                             ld		de,$18C0
 331+ C38C CD 84 E4                             call	l2_draw_horz_line
 332+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 333+ C392 11 C0 28                             ld		de,$28C0
 334+ C395 CD 84 E4                             call	l2_draw_horz_line
 335+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 336+ C39B 11 C0 28                             ld		de,$28C0
 337+ C39E CD 84 E4                             call	l2_draw_horz_line
 338+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 339+ C3A4 11 C0 18                             ld		de,$18C0
 340+ C3A7 CD 84 E4                             call	l2_draw_horz_line
 341+ C3AA 3A 19 7F     .StaticText:	        ld      a,(Galaxy)
 342+ C3AD                                      MMUSelectGalaxyA
 342+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 343+ C3B0 3E 19                                ld		a,25
 344+ C3B2 CD 09 8E                             call	expandTokenToString
 345+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 346+ C3B8 06 09                                ld		b,9
 347+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 348+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 349+ C3C0              ; Generate the market list on screen
 350+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 351+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 352+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 353+ C3C8 F5           MarketLoop:	            push	af
 354+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 355+ C3CC F1                                   pop		af
 356+ C3CD 3C                                   inc		a
 357+ C3CE FE 11                                cp		17
 358+ C3D0 20 F6                                jr		nz,MarketLoop
 359+ C3D2 AF           .InitialHighlight:      xor     a
 360+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 361+ C3D6 CD B3 C0                             call    mkt_highlight_row
 362+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 363+ C3DC 11 10 A8                             ld      de,$A810
 364+ C3DF                                      MMUSelectLayer1
 364+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 365+ C3E3 CD D7 E0                             call	l1_print_at
 366+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 367+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 368+ C3EC 11 10 B0                             ld      de,$B010
 369+ C3EF                                      MMUSelectLayer1
 369+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 370+ C3F3 CD D7 E0                             call	l1_print_at
 371+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 372+ C3F9 C9                                   ret
 373+ C3FA
 374+ C3FA
 375+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 376+ C3FA              ; Handles all the input whilst in the market menu
 377+ C3FA              loop_market_menu:       MacroIsKeyPressed c_Pressed_CursorUp
 377+ C3FA 3E 4A       >                        ld      a,c_Pressed_CursorUp
 377+ C3FC             >                        MMUSelectKeyboard
 377+ C3FC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 377+ C400 CD A2 E1    >                        call    is_key_pressed
 378+ C403 CC 2B C4                             call    z,mkt_UpPressed
 379+ C406                                      MacroIsKeyPressed c_Pressed_CursorDown
 379+ C406 3E 4C       >                        ld      a,c_Pressed_CursorDown
 379+ C408             >                        MMUSelectKeyboard
 379+ C408 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 379+ C40C CD A2 E1    >                        call    is_key_pressed
 380+ C40F CC 3C C4                             call    z,mkt_DownPressed
 381+ C412                                      MacroIsKeyPressed c_Pressed_RollLeft
 381+ C412 3E 08       >                        ld      a,c_Pressed_RollLeft
 381+ C414             >                        MMUSelectKeyboard
 381+ C414 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 381+ C418 CD A2 E1    >                        call    is_key_pressed
 382+ C41B CC 5A C4                             call    z,mkt_LeftPressed
 383+ C41E                                      MacroIsKeyPressed c_Pressed_RollRight
 383+ C41E 3E 0A       >                        ld      a,c_Pressed_RollRight
 383+ C420             >                        MMUSelectKeyboard
 383+ C420 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 383+ C424 CD A2 E1    >                        call    is_key_pressed
 384+ C427 CC 9D C4                             call    z,mkt_RightPressed
 385+ C42A C9                                   ret
 386+ C42B
 387+ C42B              ;----------------------------------------------------------------------------------------------------------------------------------
 388+ C42B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 389+ C42E FE 00                                cp      0
 390+ C430 C8                                   ret     z
 391+ C431 CD C3 C0                             call    mkt_lowlight_row
 392+ C434 21 74 C0                             ld      hl,mkt_selected_row
 393+ C437 35                                   dec     (hl)
 394+ C438 CD B3 C0                             call    mkt_highlight_row
 395+ C43B C9                                   ret
 396+ C43C              ;----------------------------------------------------------------------------------------------------------------------------------
 397+ C43C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 398+ C43E                                      MMUSelectKeyboard
 398+ C43E ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 399+ C442 CD 7D E1                             call    get_key_a_state
 400+ C445 FE 01                                cp      1
 401+ C447 28 00                                jr      z,.ItsOK
 402+ C449 3A 74 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 403+ C44C FE 10                                cp      16
 404+ C44E C8                                   ret     z
 405+ C44F CD C3 C0                             call    mkt_lowlight_row
 406+ C452 21 74 C0                             ld      hl,mkt_selected_row
 407+ C455 34                                   inc     (hl)
 408+ C456 CD B3 C0                             call    mkt_highlight_row
 409+ C459 C9                                   ret
 410+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ C45A 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 412+ C45D 21 E8 83                             ld      hl,CargoTonnes
 413+ C460 ED 31                                add     hl,a
 414+ C462 7E                                   ld      a,(hl)
 415+ C463 FE 00                                cp      0
 416+ C465 C8                                   ret     z
 417+ C466 35                                   dec     (hl)
 418+ C467 DD 21 00 E0                          ld      ix,StockFood
 419+ C46B 3A 74 C0                             ld      a,(mkt_selected_row)
 420+ C46E 16 08                                ld      d,8
 421+ C470 5F                                   ld      e,a
 422+ C471 ED 30                                mul
 423+ C473 DD 19                                add     ix,de
 424+ C475                                      MMUSelectStockTable
 424+ C475 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 425+ C479 DD 34 01                             inc     (ix+1)
 426+ C47C DD 7E 07                             ld      a,(ix+7)
 427+ C47F FE 30                                cp      48
 428+ C481 20 04                                jr      nz,.UnderATonne
 429+ C483 21 E7 83                             ld      hl,CargoRunningLoad
 430+ C486 35                                   dec     (hl)            ; We need to cosider UoM
 431+ C487 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 432+ C48A 16 00                                ld      d,0
 433+ C48C 5F                                   ld      e,a
 434+ C48D CD FE 8F                             call    addDEtoCash
 435+ C490                                      ; DO ADD CASH
 436+ C490 3A 74 C0                             ld      a,(mkt_selected_row)
 437+ C493 CD 8B C2                             call    PrintMarketItem
 438+ C496 CD 69 C2                             call    MKT_DisplayCargo
 439+ C499 CD 7A C2                             call    MKT_DisplayCash
 440+ C49C C9                                   ret
 441+ C49D              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C49D              mkt_RightPressed:       MMUSelectStockTable
 442+ C49D ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 443+ C4A1 DD 21 00 E0                          ld      ix,StockFood
 444+ C4A5 3A 74 C0                             ld      a,(mkt_selected_row)
 445+ C4A8 16 08                                ld      d,8
 446+ C4AA 5F                                   ld      e,a
 447+ C4AB ED 30                                mul
 448+ C4AD DD 19                                add     ix,de
 449+ C4AF 4F                                   ld      c,a
 450+ C4B0 DD 7E 01                             ld      a,(ix+1)
 451+ C4B3 FE 00                                cp      0
 452+ C4B5 C8                                   ret     z
 453+ C4B6 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 454+ C4B9 FE 30                                cp      48
 455+ C4BB 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 456+ C4BD 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 457+ C4C0 21 E8 83                             ld      hl,CargoTonnes
 458+ C4C3 ED 31                                add     hl,a
 459+ C4C5 7E                                   ld      a,(hl)
 460+ C4C6 FE C8                                cp      200
 461+ C4C8 C8                                   ret     z                                   ; else its a 200 UoM limit
 462+ C4C9 C3 D2 C4                             jp      .CheckCash
 463+ C4CC 2A E6 83     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 464+ C4CF 7C                                   ld      a,h
 465+ C4D0 BD                                   cp      l
 466+ C4D1 C8                                   ret     z                                   ; return if we have already maxed out
 467+ C4D2 2A E3 83     .CheckCash:             ld      hl,(Cash+2)
 468+ C4D5 7C                                   ld      a,h
 469+ C4D6 B5                                   or      l
 470+ C4D7 20 0F                                jr      nz,.MoreThanRequired
 471+ C4D9 2A E1 83                             ld      hl,(Cash)
 472+ C4DC 7C                                   ld      a,h
 473+ C4DD FE 00                                cp      0
 474+ C4DF 20 07                                jr      nz,.MoreThanRequired
 475+ C4E1 DD 7E 02                             ld      a,(ix+2)
 476+ C4E4 BD                                   cp      l
 477+ C4E5 30 01                                jr      nc,.MoreThanRequired
 478+ C4E7 C9                                   ret                         ; Insufficient Funds
 479+ C4E8 19           .MoreThanRequired:      add     hl,de
 480+ C4E9 7C                                   ld      a,h
 481+ C4EA B3                                   or      e
 482+ C4EB                                      ; check cash can we buy, and cargo capacity
 483+ C4EB DD 35 01                             dec     (ix+1)
 484+ C4EE 3A 74 C0                             ld      a,(mkt_selected_row)
 485+ C4F1 21 E8 83                             ld      hl,CargoTonnes
 486+ C4F4 ED 31                                add     hl,a
 487+ C4F6 34                                   inc     (hl)
 488+ C4F7 DD 7E 07                             ld      a,(ix+7)
 489+ C4FA 47                                   ld      b,a
 490+ C4FB FE 30                                cp      48
 491+ C4FD 20 05                                jr      nz,.UnderOneTonne
 492+ C4FF 78                                   ld      a,b
 493+ C500 21 E7 83                             ld      hl,CargoRunningLoad
 494+ C503 34                                   inc     (hl)
 495+ C504 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 496+ C507 16 00                                ld      d,0
 497+ C509 5F                                   ld      e,a
 498+ C50A CD 11 90                             call    subDEfromCash
 499+ C50D 3A 74 C0                             ld      a,(mkt_selected_row)
 500+ C510 CD 8B C2                             call    PrintMarketItem
 501+ C513 CD 69 C2                             call    MKT_DisplayCargo
 502+ C516 CD 7A C2                             call    MKT_DisplayCash
 503+ C519 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1373  C51A                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
1374  C51A              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
1375  C51A                  SLOT    StockTableAddr
1376  C51A                  PAGE    BankStockTable
1377  C51A                  ORG     StockTableAddr
1378  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 6F 84                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 18 7F                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 47 7F                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 18 7F                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 47 7F                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
1379  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
1380  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1381  E113                  SLOT    CommanderAddr
1382  E113                  PAGE    BankCommander
1383  E113                  ORG     CommanderAddr, BankCommander
1384  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 08 81    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 26 7F    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 07 7F    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 E8 83    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 00 84    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 F8 83    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 FC 83    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 2C 7F    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 2E 7F    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 E1 83    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A E5 83    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 3B 7F    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 3C 7F    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 4A 80    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 49 80    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A 02 81    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A 03 81    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A 04 81    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A E6 83    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 1A 84    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 08 81    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 26 7F    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 07 7F    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 E8 83    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 00 84    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 F8 83    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 FC 83    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 2C 7F    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 2E 7F    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 53 7E                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 6F 84                             call	        copy_galaxy_to_system
  70+ E1CA CD 2F 85                             call	        find_present_system
  71+ E1CD CD 92 84                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 E1 83    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 E5 83    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 3B 7F    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 3C 7F    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 4A 80    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 49 80    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 02 81    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 03 81    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 04 81    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 E6 83    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 1A 84    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD 39 AC                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD 08 AC                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244                                      ClearMissileTargetting
  98+ E244 3E FF       >                        ld      a,StageMissileNotTargeting
  98+ E246 32 07 81    >                        ld      (MissileTargettingFlag),a
  99+ E249 CD 8F 82                             call    SetPlayerRank
 100+ E24C                                      SetMemFalse LaserBeamOn
 100+ E24C 3E FF       >                        ld      a,$FF
 100+ E24E 32 1F 81    >                        ld      (LaserBeamOn),a
 101+ E251 C9                                   ret
 102+ E252
 103+ E252               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 104+ E252              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 104+ E252 21 10 E0    >                        ld      hl,defaultName
 104+ E255 11 08 81    >                        ld      de, CommanderName
 104+ E258 01 08 00    >                        ld      bc, 8
 104+ E25B ED B0       >                        ldir
 105+ E25D                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 105+ E25D 21 29 E0    >                        ld      hl,defaultSeeds
 105+ E260 11 26 7F    >                        ld      de, GalaxySeeds
 105+ E263 01 06 00    >                        ld      bc, 6
 105+ E266 ED B0       >                        ldir
 106+ E268                                      ldCopy2Byte defaultHomeX, PresentSystemX
 106+ E268 2A 2F E0    >                        ld       hl,(defaultHomeX)
 106+ E26B 22 2C 7F    >                        ld       (PresentSystemX),hl
 107+ E26E                                      ldCopy2Byte defaultHomeX, TargetSystemX
 107+ E26E 2A 2F E0    >                        ld       hl,(defaultHomeX)
 107+ E271 22 2E 7F    >                        ld       (TargetSystemX),hl
 108+ E274 21 53 7E                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 109+ E277 CD 6F 84                             call	copy_galaxy_to_system
 110+ E27A CD 2F 85                             call	find_present_system
 111+ E27D CD 92 84                             call	copy_working_to_galaxy
 112+ E280 01 60 EA                             ld      bc,60000
 113+ E283 ED 43 E1 83                          ld      (Cash),bc
 114+ E287 01 00 00                             ld		bc,0
 115+ E28A ED 43 E3 83                          ld		(Cash+2), bc                    ; cash no longer big endian
 116+ E28E 3E 46                                ld		a,MaxFuelLevel
 117+ E290 32 E5 83                             ld		(Fuel),a
 118+ E293 3E 5B                                ld      a,BankGalaxyData0
 119+ E295 32 19 7F                             ld		(Galaxy),a
 120+ E298 AF                                   xor		a
 121+ E299 21 00 84                             ld      hl,EquipmentFitted
 122+ E29C 06 1A                                ld      b, EQ_ITEM_COUNT
 123+ E29E 77           .ClearFittedLooop:      ld      (hl),a
 124+ E29F 23                                   inc     hl
 125+ E2A0 10 FC                                djnz    .ClearFittedLooop
 126+ E2A2                                      SetAFalse
 126+ E2A2 3E FF       >                        ld      a,$FF
 127+ E2A4 32 0E 84                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 128+ E2A7 32 7C 80                             ld		(MissionData),a						;The Plan/Mission
 129+ E2AA 3E 03                                ld      a,3                                  ; a = 0 = pulse laser
 130+ E2AC 32 F8 83                             ld		(LaserType),a
 131+ E2AF 3E FF                                ld      a,$FF                                 ; a = 255
 132+ E2B1 32 F9 83                             ld		(LaserType+1),a
 133+ E2B4 32 FA 83                             ld		(LaserType+2),a
 134+ E2B7 32 FB 83                             ld		(LaserType+3),a
 135+ E2BA AF                                   xor     a                                  ; a= 0
 136+ E2BB 32 FC 83                             ld      (LaserDamagedFlag),a
 137+ E2BE 32 FD 83                             ld      (LaserDamagedFlag+1),a
 138+ E2C1 32 FE 83                             ld      (LaserDamagedFlag+2),a
 139+ E2C4 32 FF 83                             ld      (LaserDamagedFlag+3),a
 140+ E2C7              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 141+ E2C7 AF                                   xor     a
 142+ E2C8 32 03 84                             ld		(ECMPresent),a
 143+ E2CB 32 1A 84                             ld		(FuelScoopsBarrelStatus),a
 144+ E2CE 32 06 84                             ld		(EnergyBomb),a
 145+ E2D1 32 07 84                             ld		(ExtraEnergyUnit),a
 146+ E2D4 32 08 84                             ld		(DockingComputer),a
 147+ E2D7 32 09 84                             ld		(GalacticHyperDrive),a
 148+ E2DA 32 05 84                             ld		(EscapePod),a
 149+ E2DD 32 3B 7F                             ld      (FugitiveInnocentStatus),a
 150+ E2E0 32 3C 7F                             ld		(KillTally),a
 151+ E2E3 32 4A 80                             ld      (OuterHyperCount),a
 152+ E2E6 32 49 80                             ld      (InnerHyperCount),a
 153+ E2E9 3D                                   dec		a								; now a = 255
 154+ E2EA 32 02 81                             ld		(ForeShield),a
 155+ E2ED 32 03 81                             ld		(AftShield),a
 156+ E2F0 32 04 81                             ld		(PlayerEnergy),a
 157+ E2F3 3E 14                                ld		a,20
 158+ E2F5 32 E6 83                             ld		(CargoBaySize),a
 159+ E2F8 CD 78 E3                             call	ZeroCargo						; Clear out cargo
 160+ E2FB 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 161+ E2FD CD 0E E3                             call    LoadLaserToCurrent
 162+ E300                                      ClearMissileTargetting
 162+ E300 3E FF       >                        ld      a,StageMissileNotTargeting
 162+ E302 32 07 81    >                        ld      (MissileTargettingFlag),a
 163+ E305 CD 8F 82                             call    SetPlayerRank
 164+ E308                                      SetMemFalse LaserBeamOn
 164+ E308 3E FF       >                        ld      a,$FF
 164+ E30A 32 1F 81    >                        ld      (LaserBeamOn),a
 165+ E30D C9                                   ret
 166+ E30E
 167+ E30E
 168+ E30E              ; a = current view number
 169+ E30E 21 F8 83     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 170+ E311 ED 31                                add     hl,a                            ; .
 171+ E313 7E                                   ld      a,(hl)                          ; .
 172+ E314 47                                   ld      b,a                             ; first off is there a laser present in current view
 173+ E315 32 19 81                             ld      (CurrLaserType),a               ; set type
 174+ E318 FE FF                                cp      255                             ; .
 175+ E31A C8                                   ret     z                               ; we can then drop out early if nothing fitted
 176+ E31B 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 177+ E31D ED 31                                add     hl,a
 178+ E31F 7E                                   ld      a,(hl)
 179+ E320 32 1A 81                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 180+ E323 50                                   ld      d,b                             ; get table index
 181+ E324 1E 0C                                ld      e,LaserStatsTableWidth          ;
 182+ E326 ED 30                                mul     de                              ;
 183+ E328 21 19 76                             ld      hl,LaserStatsTable              ;
 184+ E32B 19                                   add     hl,de                           ;
 185+ E32C 23                                   inc     hl                              ; we already have type
 186+ E32D                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 186+ E32D 7E          >                        ld      a,(hl)
 186+ E32E 32 1B 81    >                        ld      (CurrLaserPulseRate),a
 187+ E331 23                                   inc     hl                              ; table [2]
 188+ E332                                      ldAtHLtoMem CurrLaserPulseOnTime
 188+ E332 7E          >                        ld      a,(hl)
 188+ E333 32 1C 81    >                        ld      (CurrLaserPulseOnTime),a
 189+ E336 23                                   inc     hl                              ; table [3]
 190+ E337                                      ldAtHLtoMem CurrLaserPulseOffTime
 190+ E337 7E          >                        ld      a,(hl)
 190+ E338 32 1D 81    >                        ld      (CurrLaserPulseOffTime),a
 191+ E33B 23                                   inc     hl                              ; table [4]
 192+ E33C                                      ldAtHLtoMem CurrLaserPulseRest
 192+ E33C 7E          >                        ld      a,(hl)
 192+ E33D 32 1E 81    >                        ld      (CurrLaserPulseRest),a
 193+ E340 23                                   inc     hl                              ; table [5]
 194+ E341                                      ldAtHLtoMem CurrLaserDamageOutput
 194+ E341 7E          >                        ld      a,(hl)
 194+ E342 32 25 81    >                        ld      (CurrLaserDamageOutput),a
 195+ E345 23                                   inc     hl                              ; table [6]
 196+ E346                                      ldAtHLtoMem CurrLaserEnergyDrain
 196+ E346 7E          >                        ld      a,(hl)
 196+ E347 32 26 81    >                        ld      (CurrLaserEnergyDrain),a
 197+ E34A 23                                   inc     hl                              ; table [7]
 198+ E34B                                      ldAtHLtoMem CurrLaserHeat
 198+ E34B 7E          >                        ld      a,(hl)
 198+ E34C 32 27 81    >                        ld      (CurrLaserHeat),a
 199+ E34F 23                                   inc     hl                              ; table [8]
 200+ E350                                      ldAtHLtoMem CurrLaserDurability
 200+ E350 7E          >                        ld      a,(hl)
 200+ E351 32 28 81    >                        ld      (CurrLaserDurability),a
 201+ E354 23                                   inc     hl                              ; table [9]
 202+ E355                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 202+ E355 7E          >                        ld      a,(hl)
 202+ E356 32 29 81    >                        ld      (CurrLaserDurabilityAmount),a
 203+ E359 C9                                   ret
 204+ E35A
 205+ E35A              ; Set a = 2 * (slaves + narcotics) + firearms
 206+ E35A 3A EB 83     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 207+ E35D 47                                   ld      b,a                             ; b= slaves
 208+ E35E 3A EE 83                             ld      a,(NarcoticsCargoTonnes)        ; .
 209+ E361 80                                   add     a,b                             ; a = b + narcotics
 210+ E362 CB 27                                sla     a                               ; a *= 2
 211+ E364 47                                   ld      b,a                             ; b = a
 212+ E365 3A F2 83                             ld      a,(FirearmsCargoTonnes)         ; a = firearms tonns
 213+ E368 80                                   add     a,b                             ; a += b so firearms + 2(slaves + narcotics)
 214+ E369 C9                                   ret
 215+ E36A
 216+ E36A CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 217+ E36D                                      ZeroA                                   ; set current laser to front
 217+ E36D AF          >                        xor a
 218+ E36E CD 0E E3                             call    LoadLaserToCurrent
 219+ E371 CD 4C 82                             call    InitMainLoop
 220+ E374 CD AA 81                             call    ResetPlayerShip
 221+ E377 C9                                   ret
 222+ E378                                  ;    clear out all other objects
 223+ E378                                  ;    create debris
 224+ E378                                  ;    if cargo presetn then create a cargo
 225+ E378                                  ;
 226+ E378                                  ;    enqueve message game over
 227+ E378                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
1385  E378                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E378              ZeroCargo:
   2+ E378 AF           		xor		a							;zero-out cargo, including gems.
   3+ E379 06 10        		ld		b,16						;all the way up to alien items
   4+ E37B 21 E8 83     		ld		hl,CargoTonnes   			; cargo levels
   5+ E37E              .ZeroLoop:
   6+ E37E 77                   ld      (hl),a
   7+ E37F 23           		inc		hl
   8+ E380 10 FC        		djnz	.ZeroLoop
   9+ E382 C9           		ret
  10+ E383
# file closed: ./Commander/zero_player_cargo.asm
1386  E383                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
1387  E383              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
1388  E383                  SLOT    LAYER2Addr
1389  E383                  PAGE    BankLAYER2
1390  E383                  ORG     LAYER2Addr
1391  E000
1392  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_CURRENT_BANK           DB	0
   4+ E002 00           varL2_BUFFER_MODE            DB 0
   5+ E003 00           varL2_ACCESS_MODE            DB 0
   6+ E004
   7+ E004 3E 08        asm_l2_double_buffer_on:    ld      a,8
   8+ E006 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
   9+ E009 C9                                       ret
  10+ E00A
  11+ E00A AF           asm_l2_double_buffer_off:   xor     a
  12+ E00B 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
  13+ E00E C9                                       ret
  14+ E00F
  15+ E00F 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  16+ E012 ED 70                                    in      (c)
  17+ E014 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  18+ E017 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  19+ E019 ED 79                                    out     (c),a
  20+ E01B C9                                       ret
  21+ E01C
  22+ E01C 3A 03 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  23+ E01F E6 05                                    and     LAYER2_READ_WRITE_MASK
  24+ E021 57                                       ld      d,a
  25+ E022 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  26+ E025 ED 70                                    in      (c)
  27+ E027 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  28+ E02A A2                                       and     d
  29+ E02B ED 79                                    out     (c),a
  30+ E02D C9                                       ret
  31+ E02E
  32+ E02E 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  33+ E031 ED 70                                    in      (c)
  34+ E033 F6 05                                    or      LAYER2_READ_WRITE_MASK
  35+ E035 ED 79                                    out     (c),a
  36+ E037 C9                                       ret
  37+ E038
  38+ E038              ; "asm_l2_bank_select"
  39+ E038              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  40+ E038 57           asm_l2_bank_select:         ld      d,a
  41+ E039 FE 00                                    cp      0
  42+ E03B 28 08                                    jr      z,.NotBreakDebug
  43+ E03D FE 40                                    cp      $40
  44+ E03F 28 04                                    jr      z,.NotBreakDebug
  45+ E041 FE 80                                    cp      $80
  46+ E043 28 00                                    jr      z,.NotBreakDebug
  47+ E045              .NotBreakDebug:
  48+ E045 3A 02 E0                                 ld      a,(varL2_BUFFER_MODE)
  49+ E048 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  50+ E04A B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  51+ E04B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  52+ E04E ED 79                                    out 	(c),a
  53+ E050 C9                                       ret
  54+ E051              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  55+ E051 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  56+ E054 FE 00                                    cp		0
  57+ E056 20 04                                    jr 		nz,.nottopbank
  58+ E058 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  59+ E05A 18 DC                                    jr		asm_l2_bank_select
  60+ E05C FE 01        .nottopbank:                cp		1
  61+ E05E 20 04                                    jr 		nz,.notmiddlebank
  62+ E060 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  63+ E062 18 D4                                    jr		asm_l2_bank_select
  64+ E064 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  65+ E066 18 D0                                    jr		asm_l2_bank_select
  66+ E068              		; Note no ret as its handled by above routines
  67+ E068
  68+ E068              asm_l2_bank_0_macro:        MACRO
  69+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  70+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  71+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  72+ E068 ~                                        out 	(c),a
  73+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  74+ E068 ~                                      ;  out     (c),a
  75+ E068 ~                                        ZeroA						; set a to 0
  76+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E068                                          ENDM
  78+ E068
  79+ E068              asm_l2_bank_1_macro:        MACRO
  80+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  81+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  82+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  83+ E068 ~                                        out 	(c),a
  84+ E068 ~                                       ; ld      a,%0001000              ; Bank offset of + 1
  85+ E068 ~                                      ;  out     (c),a
  86+ E068 ~                                        ld      a,1						; set a to 0
  87+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  88+ E068                                          ENDM
  89+ E068
  90+ E068              asm_l2_bank_2_macro:        MACRO
  91+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  92+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  93+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  94+ E068 ~                                        out 	(c),a
  95+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  96+ E068 ~                                       ; out     (c),a
  97+ E068 ~                                        ld      a,2						; set a to 0
  98+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  99+ E068                                          ENDM
 100+ E068
 101+ E068              asm_l2_bank_3_macro:        MACRO
 102+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 103+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 104+ E068 ~                                        or      %0001011
 105+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 106+ E068 ~                                        out 	(c),a
 107+ E068 ~                                        ld      a,3						; set a to 0
 108+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 109+ E068                                          ENDM
 110+ E068
 111+ E068              asm_l2_bank_4_macro:        MACRO
 112+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 113+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 114+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 115+ E068 ~                                        out 	(c),a
 116+ E068 ~                                        ld      a,4						; set a to 0
 117+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 118+ E068                                          ENDM
 119+ E068
 120+ E068              ; "asm_l2_row_bank_select"
 121+ E068              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
 122+ E068              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
 123+ E068              ; "destroys BC call de is safe a = adjusted poke pixel row"
 124+ E068              asm_l2_row_bank_select:     JumpIfAGTENusng 128, .BottomBank
 124+ E068 FE 80       >                        cp     128
 124+ E06A D2 A6 E0    >                        jp		nc,.BottomBank
 125+ E06D                                          JumpIfAGTENusng 64, .MiddleBank
 125+ E06D FE 40       >                        cp     64
 125+ E06F D2 8A E0    >                        jp		nc,.MiddleBank
 126+ E072 08                                       ex      af,af'
 127+ E073                                          JumpIfMemZero varL2_BANK_SELECTED, .NoTopChange
 127+ E073 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 127+ E076 A7          >                        and a
 127+ E077 CA 88 E0    >                        jp  z,.NoTopChange
 128+ E07A                                          asm_l2_bank_0_macro
 128+ E07A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 128+ E07D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 128+ E07F 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 128+ E082 ED 79       >                            out 	(c),a
 128+ E084             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 128+ E084             >                          ;  out     (c),a
 128+ E084             >                            ZeroA						; set a to 0
 128+ E084 AF          >                        xor a
 128+ E085 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 129+ E088 08           .NoTopChange:               ex      af,af'
 130+ E089 C9                                       ret
 131+ E08A 08           .MiddleBank:                ex      af,af'
 132+ E08B                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 1, .NoMiddleChange
 132+ E08B 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 132+ E08E FE 01       >                        cp  1
 132+ E090 CA A2 E0    >                        jp  z,.NoMiddleChange
 133+ E093                                          asm_l2_bank_1_macro
 133+ E093 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 133+ E096 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 133+ E098 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 133+ E09B ED 79       >                            out 	(c),a
 133+ E09D             >                           ; ld      a,%0001000              ; Bank offset of + 1
 133+ E09D             >                          ;  out     (c),a
 133+ E09D 3E 01       >                            ld      a,1						; set a to 0
 133+ E09F 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 134+ E0A2 08           .NoMiddleChange:            ex      af,af'
 135+ E0A3 D6 40                                    sub     64
 136+ E0A5 C9                                       ret
 137+ E0A6 08           .BottomBank:                ex      af,af'
 138+ E0A7                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 2, .NoBottomChange
 138+ E0A7 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 138+ E0AA FE 02       >                        cp  2
 138+ E0AC CA BE E0    >                        jp  z,.NoBottomChange
 139+ E0AF                                          asm_l2_bank_2_macro
 139+ E0AF 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 139+ E0B2 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 139+ E0B4 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 139+ E0B7 ED 79       >                            out 	(c),a
 139+ E0B9             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 139+ E0B9             >                           ; out     (c),a
 139+ E0B9 3E 02       >                            ld      a,2						; set a to 0
 139+ E0BB 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 140+ E0BE 08           .NoBottomChange:            ex      af,af'
 141+ E0BF D6 80                                    sub     128
 142+ E0C1 C9                                       ret
 143+ E0C2
 144+ E0C2
 145+ E0C2              ; "asm_l2_row_bank_select"
 146+ E0C2              ; "HL (unsinged) = x column of pixel line from left
 147+ E0C2              ; 0-  63
 148+ E0C2              ; 64- 127
 149+ E0C2              ; 128 - 191
 150+ E0C2              ; 192 - 255
 151+ E0C2              ; 256 - 321
 152+ E0C2              ; outputs l with the correct column number
 153+ E0C2 7A           asm_l2_320_col_bank_select: ld      a,d
 154+ E0C3                                          JumpIfAIsNotZero .Bank5             ; 256 - 321
 154+ E0C3 A7          >                        and     a
 154+ E0C4 C2 27 E1    >                        jp	    nz,.Bank5
 155+ E0C7 7B                                       ld      a,e
 156+ E0C8                                          JumpIfAGTENusng 192, .Bank4
 156+ E0C8 FE C0       >                        cp     192
 156+ E0CA D2 10 E1    >                        jp		nc,.Bank4
 157+ E0CD                                          JumpIfAGTENusng 128, .Bank3
 157+ E0CD FE 80       >                        cp     128
 157+ E0CF D2 FB E0    >                        jp		nc,.Bank3
 158+ E0D2                                          JumpIfAGTENusng 64 , .Bank2
 158+ E0D2 FE 40       >                        cp     64
 158+ E0D4 D2 E6 E0    >                        jp		nc,.Bank2
 159+ E0D7              .Bank1:                     asm_l2_bank_0_macro
 159+ E0D7 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 159+ E0DA F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 159+ E0DC 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 159+ E0DF ED 79       >                            out 	(c),a
 159+ E0E1             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 159+ E0E1             >                          ;  out     (c),a
 159+ E0E1             >                            ZeroA						; set a to 0
 159+ E0E1 AF          >                        xor a
 159+ E0E2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 160+ E0E5 C9                                       ret
 161+ E0E6              .Bank2:                     asm_l2_bank_1_macro
 161+ E0E6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 161+ E0E9 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 161+ E0EB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 161+ E0EE ED 79       >                            out 	(c),a
 161+ E0F0             >                           ; ld      a,%0001000              ; Bank offset of + 1
 161+ E0F0             >                          ;  out     (c),a
 161+ E0F0 3E 01       >                            ld      a,1						; set a to 0
 161+ E0F2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 162+ E0F5                                          ClearCarryFlag
 162+ E0F5 B7          >                        or a
 163+ E0F6 7D                                       ld      a,l
 164+ E0F7 E6 BF                                    and     %10111111       ; fast subtract 64, just clear bit
 165+ E0F9 67                                       ld      h,a
 166+ E0FA C9                                       ret
 167+ E0FB              .Bank3:                     asm_l2_bank_2_macro
 167+ E0FB 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 167+ E0FE F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 167+ E100 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 167+ E103 ED 79       >                            out 	(c),a
 167+ E105             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 167+ E105             >                           ; out     (c),a
 167+ E105 3E 02       >                            ld      a,2						; set a to 0
 167+ E107 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 168+ E10A                                          ClearCarryFlag
 168+ E10A B7          >                        or a
 169+ E10B 7D                                       ld      a,l
 170+ E10C E6 7F                                    and     %01111111       ; fast subtract 128, just clear bit
 171+ E10E 67                                       ld      h,a
 172+ E10F C9                                       ret
 173+ E110              .Bank4:                     asm_l2_bank_3_macro
 173+ E110 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 173+ E113 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 173+ E115 F6 0B       >                            or      %0001011
 173+ E117 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 173+ E11A ED 79       >                            out 	(c),a
 173+ E11C 3E 03       >                            ld      a,3						; set a to 0
 173+ E11E 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 174+ E121                                          ClearCarryFlag
 174+ E121 B7          >                        or a
 175+ E122 7B                                       ld      a,e
 176+ E123 E6 3F                                    and     %00111111       ; fast subtract 192, just clear bit
 177+ E125 67                                       ld      h,a
 178+ E126 C9                                       ret
 179+ E127              .Bank5:                     asm_l2_bank_4_macro
 179+ E127 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 179+ E12A F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 179+ E12C 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 179+ E12F ED 79       >                            out 	(c),a
 179+ E131 3E 04       >                            ld      a,4						; set a to 0
 179+ E133 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 180+ E136 65                                       ld      h,l             ; fast subtract 256, just clear bit
 181+ E137 C9                                       ret
 182+ E138
 183+ E138              ;;;
 184+ E138              ;;;
 185+ E138              ;;;                            cp 		64			; row < 64?
 186+ E138              ;;;                            jr 		nc, .l2rowGTE64
 187+ E138              ;;;.l2rowLT64:                 ex		af,af'
 188+ E138              ;;;                            ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
 189+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 190+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 191+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 192+ E138              ;;;                            out 	(c),a
 193+ E138              ;;;                            xor		a						; set a to 0
 194+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 195+ E138              ;;;                            ex		af,af'					; return pixel poke unharmed
 196+ E138              ;;;                            ret
 197+ E138              ;;;.l2rowGTE64:                cp 		128
 198+ E138              ;;;                            jr 		nc, .l2rowGTE128
 199+ E138              ;;;.l2row64to127:              ex		af,af'
 200+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
 201+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 202+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 203+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 204+ E138              ;;;                            out 	(c),a
 205+ E138              ;;;                            ld		a,1						; set a to 1
 206+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 207+ E138              ;;;                            ex		af,af'
 208+ E138              ;;;                            sub		64
 209+ E138              ;;;                            ret
 210+ E138              ;;;.l2rowGTE128:               ex		af,af'
 211+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
 212+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 213+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 214+ E138              ;;;
 215+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 216+ E138              ;;;                            out 	(c),a
 217+ E138              ;;;                            ld		a,1						; set a to 2
 218+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 219+ E138              ;;;                            ex		af,af'
 220+ E138              ;;;                            sub		128
 221+ E138              ;;;                            ret
 222+ E138
 223+ E138
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1393  E138                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E138
   2+ E138 00           l2_cls_byte	            DB 0
   3+ E139              ; ">DMA Command BLOCK"
   4+ E139
   5+ E139 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E13D 7D
   6+ E13E 38 E1        l2_fill_astrt           DW l2_cls_byte
   7+ E140 00 40        l2_fill_length          DB $00,$40
   8+ E142 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E145 00 00        l2_fill_bstrt           DB $00,$00
  10+ E147 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E14B              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E14B
  13+ E14B 83 C3 C7 CB  l2_fill_burst           DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  13+ E14F 7D
  14+ E150 38 E1        .l2_fill_astrt          DW l2_cls_byte
  15+ E152 00 40        .l2_fill_length         DB $00,$40
  16+ E154 24 10 CD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE
  17+ E157 00 00        .l2_fill_bstrt          DB $00,$00
  18+ E159 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  19+ E15D              l2_fill_burst_cmd_len   EQU $ - l2_fill_burst
  20+ E15D
  21+ E15D              ; ">l2_cls_dma_bank sets a bank to"
  22+ E15D              l2_cls_dma_bank:
  23+ E15D 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  24+ E160 21 39 E1     .write_dma:             ld hl, l2_fill
  25+ E163 06 12                                ld b, l2_fill_cmd_len
  26+ E165 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  27+ E167 ED B3                                otir
  28+ E169 C9                                   ret
  29+ E16A
  30+ E16A              ; ">l2_cls_dma_bank sets a bank to"
  31+ E16A              l2_cls_dma_bank_burst:
  32+ E16A 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  33+ E16D 21 4B E1     .write_dma:             ld hl, l2_fill_burst
  34+ E170 06 12                                ld b, l2_fill_burst_cmd_len
  35+ E172 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  36+ E174 ED B3                                otir
  37+ E176 C9                                   ret
  38+ E177
  39+ E177 3E 00        l2_set_color_upper2:    ld      a,0
  40+ E179 CD 68 E0                             call asm_l2_row_bank_select
  41+ E17C 3A 38 E1                             ld      a,(l2_cls_byte)
  42+ E17F CD 5D E1                             call l2_cls_dma_bank
  43+ E182 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  44+ E184 CD 68 E0                             call asm_l2_row_bank_select
  45+ E187 3A 38 E1                             ld      a,(l2_cls_byte)
  46+ E18A CD 5D E1                             call l2_cls_dma_bank
  47+ E18D C9                                   ret
  48+ E18E
  49+ E18E
  50+ E18E              l2_cls_upper_two_thirds:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  51+ E18E                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  51+ E18E 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  51+ E191 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  51+ E193 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  51+ E196 ED 79       >                            out 	(c),a
  51+ E198             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  51+ E198             >                          ;  out     (c),a
  51+ E198             >                            ZeroA						; set a to 0
  51+ E198 AF          >                        xor a
  51+ E199 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  52+ E19C 3E E3                                ld 	a,COLOUR_TRANSPARENT
  53+ E19E CD 5D E1                             call l2_cls_dma_bank
  54+ E1A1                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  55+ E1A1                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  55+ E1A1 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  55+ E1A4 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E1A6 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  55+ E1A9 ED 79       >                            out 	(c),a
  55+ E1AB             >                           ; ld      a,%0001000              ; Bank offset of + 1
  55+ E1AB             >                          ;  out     (c),a
  55+ E1AB 3E 01       >                            ld      a,1						; set a to 0
  55+ E1AD 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  56+ E1B0 3E E3                                ld 	a,COLOUR_TRANSPARENT
  57+ E1B2 CD 5D E1                             call l2_cls_dma_bank
  58+ E1B5 C9                                   ret
  59+ E1B6
  60+ E1B6              l2_cls_upper_two_thirds_burst:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  61+ E1B6                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  61+ E1B6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  61+ E1B9 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  61+ E1BB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  61+ E1BE ED 79       >                            out 	(c),a
  61+ E1C0             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  61+ E1C0             >                          ;  out     (c),a
  61+ E1C0             >                            ZeroA						; set a to 0
  61+ E1C0 AF          >                        xor a
  61+ E1C1 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  62+ E1C4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  63+ E1C6 CD 6A E1                             call l2_cls_dma_bank_burst
  64+ E1C9                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  65+ E1C9                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  65+ E1C9 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  65+ E1CC F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  65+ E1CE 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  65+ E1D1 ED 79       >                            out 	(c),a
  65+ E1D3             >                           ; ld      a,%0001000              ; Bank offset of + 1
  65+ E1D3             >                          ;  out     (c),a
  65+ E1D3 3E 01       >                            ld      a,1						; set a to 0
  65+ E1D5 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  66+ E1D8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  67+ E1DA CD 6A E1                             call l2_cls_dma_bank_burst
  68+ E1DD C9                                   ret
  69+ E1DE
  70+ E1DE              l2_cls_lower_third:     ;ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  71+ E1DE                                      asm_l2_bank_2_macro; call asm_l2_row_bank_select
  71+ E1DE 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  71+ E1E1 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  71+ E1E3 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  71+ E1E6 ED 79       >                            out 	(c),a
  71+ E1E8             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  71+ E1E8             >                           ; out     (c),a
  71+ E1E8 3E 02       >                            ld      a,2						; set a to 0
  71+ E1EA 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  72+ E1ED 3E E3                                ld 	a,COLOUR_TRANSPARENT
  73+ E1EF CD 5D E1                             call l2_cls_dma_bank
  74+ E1F2 C9                                   ret
  75+ E1F3
  76+ E1F3              l2_cls_lower_third_burst:asm_l2_bank_2_macro; call asm_l2_row_bank_select
  76+ E1F3 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  76+ E1F6 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  76+ E1F8 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  76+ E1FB ED 79       >                            out 	(c),a
  76+ E1FD             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  76+ E1FD             >                           ; out     (c),a
  76+ E1FD 3E 02       >                            ld      a,2						; set a to 0
  76+ E1FF 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E202 3E E3                                ld 	a,COLOUR_TRANSPARENT
  78+ E204 CD 6A E1                             call l2_cls_dma_bank_burst
  79+ E207 C9                                   ret
  80+ E208
  81+ E208
  82+ E208 CD B6 E1     l2_cls_burst:           call l2_cls_upper_two_thirds_burst
  83+ E20B C3 F3 E1                             jp   l2_cls_lower_third_burst
  84+ E20E
  85+ E20E
  86+ E20E CD 8E E1     l2_cls:                 call l2_cls_upper_two_thirds
  87+ E211 C3 DE E1                             jp   l2_cls_lower_third
  88+ E214
  89+ E214              l2_320_cls:
  90+ E214 CD 8E E1     l2_640_cls:             call l2_cls_upper_two_thirds
  91+ E217 CD DE E1                             call   l2_cls_lower_third
  92+ E21A                                      ; need to clear banks 4 and 5 via normal paging, say into C000 with interrupts disabled
  93+ E21A                                      asm_l2_bank_3_macro
  93+ E21A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  93+ E21D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  93+ E21F F6 0B       >                            or      %0001011
  93+ E221 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  93+ E224 ED 79       >                            out 	(c),a
  93+ E226 3E 03       >                            ld      a,3						; set a to 0
  93+ E228 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  94+ E22B 3E E3                                ld 	a,COLOUR_TRANSPARENT
  95+ E22D CD 5D E1                             call l2_cls_dma_bank
  96+ E230                                      asm_l2_bank_4_macro
  96+ E230 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  96+ E233 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  96+ E235 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  96+ E238 ED 79       >                            out 	(c),a
  96+ E23A 3E 04       >                            ld      a,4						; set a to 0
  96+ E23C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  97+ E23F 3E E3                                ld 	a,COLOUR_TRANSPARENT
  98+ E241 CD 5D E1                             call l2_cls_dma_bank
  99+ E244
 100+ E244 C9                                   ret
 101+ E245
# file closed: ./Layer2Graphics/layer2_cls.asm
1394  E245                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E245
   2+ E245 ED 91 70 00  l2_initialise:          nextreg     LAYER_2_CONTROL_REGISTER,           %00000000               ; 256x192x8bpp
   3+ E249 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   4+ E24D ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   5+ E251 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   6+ E255                                      ZeroA
   6+ E255 AF          >                        xor a
   7+ E256                                      DoubleBufferIfPossible
   7+ E256             >                        IFDEF DOUBLEBUFFER
   7+ E256             >                            MMUSelectLayer2
   7+ E256 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7+ E25A CD 0E E2    >                            call  l2_cls
   7+ E25D CD 97 E2    >                            call  l2_flip_buffers
   7+ E260             >                        ENDIF
   8+ E260                                      DoubleBufferIfPossible
   8+ E260             >                        IFDEF DOUBLEBUFFER
   8+ E260             >                            MMUSelectLayer2
   8+ E260 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   8+ E264 CD 0E E2    >                            call  l2_cls
   8+ E267 CD 97 E2    >                            call  l2_flip_buffers
   8+ E26A             >                        ENDIF
   9+ E26A CD 68 E0                             call        asm_l2_row_bank_select
  10+ E26D C9                                   ret
  11+ E26E
  12+ E26E ED 91 70 10  l2_320_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00010000               ; 320x256x8bpp
  13+ E272 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  14+ E276 ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  15+ E27A ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  16+ E27E                                      ZeroA
  16+ E27E AF          >                        xor a
  17+ E27F                                      DoubleBuffer320IfPossible
  17+ E27F             >                        IFDEF DOUBLEBUFFER
  17+ E27F             >                            MMUSelectLayer2
  17+ E27F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  17+ E283 CD 14 E2    >                            call  l2_320_cls
  17+ E286 CD 97 E2    >                            call  l2_flip_buffers
  17+ E289             >                        ENDIF
  18+ E289                                      DoubleBuffer320IfPossible
  18+ E289             >                        IFDEF DOUBLEBUFFER
  18+ E289             >                            MMUSelectLayer2
  18+ E289 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  18+ E28D CD 14 E2    >                            call  l2_320_cls
  18+ E290 CD 97 E2    >                            call  l2_flip_buffers
  18+ E293             >                        ENDIF
  19+ E293 CD C2 E0                             call        asm_l2_320_col_bank_select
  20+ E296 C9                                   ret
  21+ E297
  22+ E297              ;l2_640_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00100000               ; 320x256x8bpp
  23+ E297              ;                        nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  24+ E297              ;                        nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  25+ E297              ;                        nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  26+ E297              ;                        ZeroA
  27+ E297              ;                        DoubleBuffer640IfPossible
  28+ E297              ;                        DoubleBuffer640IfPossible
  29+ E297              ;                        call        asm_l2_640_col_bank_select
  30+ E297              ;                        ret
  31+ E297
# file closed: ./Layer2Graphics/layer2_initialise.asm
1395  E297                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E297              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E297 01 3B 24    >            ld bc,$243B
   1+ E29A 3E 12       >            ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E29C ED 79       >            out (c),a
   1+ E29E 04          >            inc b
   1+ E29F ED 78       >            in a,(c)
   2+ E2A1 57                                   ld      d,a
   3+ E2A2                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E2A2 01 3B 24    >            ld bc,$243B
   3+ E2A5 3E 13       >            ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E2A7 ED 79       >            out (c),a
   3+ E2A9 04          >            inc b
   3+ E2AA ED 78       >            in a,(c)
   4+ E2AC 5F                                   ld      e,a
   5+ E2AD ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E2B0 7A                                   ld      a,d
   7+ E2B1 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E2B4 C9                                   ret
   9+ E2B5
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1396  E2B5                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E2B5
   2+ E2B5 DF           line_gfx_colour db $DF
   3+ E2B6
   4+ E2B6              l2_plot_macro:          MACRO
   5+ E2B6 ~                                    ld      a,b
   6+ E2B6 ~                                    JumpIfAGTENusng 192 ,.NoPlot
   7+ E2B6 ~                                    ld      l,c
   8+ E2B6 ~                                    call    asm_l2_row_bank_select
   9+ E2B6 ~                                    ld      h,a
  10+ E2B6 ~                                    ld      a,(line_gfx_colour)
  11+ E2B6 ~                                    ld      (hl),a
  12+ E2B6 ~            .NoPlot:
  13+ E2B6                                      ENDM
  14+ E2B6
  15+ E2B6
  16+ E2B6              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
  17+ E2B6 F5           l2_plot_pixel:          push    af
  18+ E2B7 78                                   ld      a,b
  19+ E2B8              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
  19+ E2B8 FE C0       >                        cp     ScreenHeight
  19+ E2BA D2 C8 E2    >                        jp		nc,l2_pp_dont_plot
  20+ E2BD C5                                   push    bc								; bank select destroys bc so need to save it
  21+ E2BE                                  ;	ld      a,b
  22+ E2BE CD 68 E0                             call    asm_l2_row_bank_select
  23+ E2C1 C1                                   pop     bc
  24+ E2C2 47                                   ld      b,a
  25+ E2C3 60                                   ld      h,b								; hl now holds ram address after bank select
  26+ E2C4 69                                   ld      l,c
  27+ E2C5 F1                                   pop     af								; a = colour to plott
  28+ E2C6 77                                   ld      (hl),a
  29+ E2C7 C9                                   ret
  30+ E2C8 F1           l2_pp_dont_plot:        pop     af
  31+ E2C9 C9                                   ret
  32+ E2CA
  33+ E2CA              ; ">l2_plot_pixel d= row number, hl = column number, e = pixel col"
  34+ E2CA 7C           l2_plot_pixel_320:      ld      a,h
  35+ E2CB FE 01                                cp      1                               ; if < 256, definite OK
  36+ E2CD 20 05                                jr      nz,.DoneCheck
  37+ E2CF 7D                                   ld      a,l
  38+ E2D0 E6 C0                                and     %11000000                       ; if its 7 or 6 set then > 319
  39+ E2D2 20 06                                jr      nz,.DontPlot
  40+ E2D4 CD C2 E0     .DoneCheck:             call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  41+ E2D7 6A                                   ld      l,d                             ; as they are horizontal now
  42+ E2D8 7B                                   ld      a,e
  43+ E2D9 77                                   ld      (hl),a
  44+ E2DA C9           .DontPlot:              ret
  45+ E2DB
  46+ E2DB CD C2 E0     l2_plot_pixel_320_no_check:   call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  47+ E2DE 6A                                   ld      l,d                             ; as they are horizontal now
  48+ E2DF 7B                                   ld      a,e
  49+ E2E0 77                                   ld      (hl),a
  50+ E2E1 C9                                   ret
  51+ E2E2
  52+ E2E2              ; y aixs bounds check must have been done before calling this
  53+ E2E2 F5           l2_plot_pixel_no_check: push    af
  54+ E2E3 C5                                   push    bc								; bank select destroys bc so need to save it
  55+ E2E4 78                                   ld      a,b                             ; determine target bank
  56+ E2E5 CD 68 E0                             call    asm_l2_row_bank_select
  57+ E2E8 C1                                   pop     bc
  58+ E2E9 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  59+ E2EA 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  60+ E2EC F1                                   pop     af								; a = colour to plott
  61+ E2ED 77                                   ld      (hl),a                          ; poke to ram
  62+ E2EE C9                                   ret
  63+ E2EF
  64+ E2EF              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  65+ E2EF              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  66+ E2EF E5           l2_plot_pixel_no_bank:  push 	hl
  67+ E2F0 60                                   ld 		h,b								; hl now holds ram address after bank select
  68+ E2F1 69                                   ld 		l,c
  69+ E2F2 77                                   ld 		(hl),a
  70+ E2F3 E1                                   pop		hl
  71+ E2F4 C9                                   ret
  72+ E2F5
  73+ E2F5              ; ">l2_plot_pixel_no_bank d= row number, h = column number, a = pixel col"
  74+ E2F5              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  75+ E2F5              l2_plot_pixel_320_no_bank:
  76+ E2F5 6A                                   ld 		l,d
  77+ E2F6 77                                   ld 		(hl),a
  78+ E2F7 C9                                   ret
  79+ E2F8              ; The more simpler h col l row is just ld (hl),a so no need for a function
  80+ E2F8
  81+ E2F8
  82+ E2F8 F5           ShipPixel:              push    af
  83+ E2F9 78                                   ld      a,b
  84+ E2FA FE 7F                                cp      127
  85+ E2FC D0                                   ret     nc
  86+ E2FD F1                                   pop     af
  87+ E2FE 18 E2                                jr      l2_plot_pixel_no_check
  88+ E300                                      ;***Implicit ret due to jr
  89+ E300
  90+ E300              ; in bc = yx iyl = colour
  91+ E300 78           DebrisPixel:            ld      a,b
  92+ E301 FE 7F                                cp      127
  93+ E303 D0                                   ret     nc
  94+ E304 FD 7D                                ld      a, iyl
  95+ E306 18 DA                                jr      l2_plot_pixel_no_check
  96+ E308                                      ;***Implicit ret due to jr
  97+ E308
  98+ E308 F5           l2_plot_pixel_y_test:   push	af
  99+ E309 78                                   ld		a,b
 100+ E30A FE C0                                cp		192
 101+ E30C 30 03                                jr		nc,.clearup
 102+ E30E F1                                   pop		af
 103+ E30F 18 A5                                jr		l2_plot_pixel
 104+ E311 F1           .clearup:               pop		af
 105+ E312 C9                                   ret
 106+ E313
 107+ E313              l2_point_pixel_y_safe:	MACRO
 108+ E313 ~            						push	hl
 109+ E313 ~            						push	bc
 110+ E313 ~            						call	l2_plot_pixel
 111+ E313 ~            						pop		bc
 112+ E313 ~            						pop		hl
 113+ E313              						ENDM
 114+ E313
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1397  E313                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E313
   2+ E313              l2_print_chr_at:
   3+ E313              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E313              ; "Need a version that also prints absence of character"
   5+ E313 7A           	ld		a,d
   6+ E314 FE 20        	cp		32
   7+ E316 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E318 FE 7F        	cp		127
   9+ E31A 30 3B        	jr		nc,.InvalidCharacter
  10+ E31C              .ValidCharater:
  11+ E31C 26 00        	ld		h,0
  12+ E31E 6A           	ld		l,d
  13+ E31F 29           	add		hl,hl						; * 2
  14+ E320 29           	add		hl,hl						; * 4
  15+ E321 29           	add		hl,hl						; * 8 to get byte address
  16+ E322 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E326 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E327 23           	inc		hl							; skip first byte
  19+ E328 16 07        	ld		d,7
  20+ E32A              .PrintCharLoop:
  21+ E32A D5           	push	de
  22+ E32B 7E           	ld		a,(hl)
  23+ E32C FE 00        	cp		0
  24+ E32E 28 21        	jr		z,.NextRowNoBCPop
  25+ E330              .PrintARow:
  26+ E330 C5           	push	bc							; save row col
  27+ E331 16 07        	ld		d,7							; d is loop row number now
  28+ E333              .PrintPixelLoop:
  29+ E333 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E334              .PrintTheRow:
  31+ E334 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E336 F5           	push	af							; save character byte
  33+ E337 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E339 20 04        	jr		nz,.PixelToPrint
  35+ E33B              .NoPixelToPrint:
  36+ E33B 3E E3        	ld		a,$E3
  37+ E33D 18 01        	jr		.HaveSetPixelColour
  38+ E33F              .PixelToPrint:
  39+ E33F 7B           	ld		a,e							; Get Colour
  40+ E340              .HaveSetPixelColour
  41+ E340 E5           	push	hl
  42+ E341              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E341              .BankOnFirstOnly:
  44+ E341 F5           	push	af
  45+ E342 7A           	ld		a,d
  46+ E343 FE 07        	cp		7
  47+ E345 28 11        	jr		z,.PlotWithBank
  48+ E347              .PlotNoBank:
  49+ E347 F1           	pop		af
  50+ E348 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E349 69           	ld 		l,c
  52+ E34A 77           	ld 		(hl),a
  53+ E34B              .IterateLoop:
  54+ E34B              ;	pop		bc
  55+ E34B E1           	pop		hl
  56+ E34C F1           	pop		af							; a= current byte shifted
  57+ E34D 15           	dec		d						 	; do dec after inc as we amy
  58+ E34E 20 E3        	jr		nz,.PrintPixelLoop
  59+ E350              .NextRow:
  60+ E350 C1           	pop		bc							; Current Col Row
  61+ E351              .NextRowNoBCPop:
  62+ E351 D1           	pop		de							; d= row loop
  63+ E352 04           	inc		b							; Down 1 row
  64+ E353 23           	inc		hl							; Next character byte
  65+ E354 15           	dec		d							; 1 done now
  66+ E355 20 D3        	jr		nz,.PrintCharLoop
  67+ E357              .InvalidCharacter:
  68+ E357 C9           	ret
  69+ E358              .PlotWithBank:
  70+ E358 F1           	pop		af
  71+ E359 CD B6 E2     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E35C 18 ED        	jr		.IterateLoop
  73+ E35E
  74+ E35E              l2_print_at:
  75+ E35E              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E35E              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E35E 7E           	ld	a,(hl)							; Return if empty string
  78+ E35F FE 00        	cp	0
  79+ E361 C8           	ret	z
  80+ E362 E5           	push	hl
  81+ E363 D5           	push	de
  82+ E364 C5           	push	bc
  83+ E365 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E366 CD 13 E3     	call 	l2_print_chr_at
  85+ E369 C1           	pop		bc
  86+ E36A D1           	pop		de
  87+ E36B E1           	pop		hl
  88+ E36C              .Move8Pixlestoright:
  89+ E36C 08           	ex		af,af'
  90+ E36D 79           	ld		a,c
  91+ E36E C6 08        	add		8
  92+ E370 4F           	ld		c,a
  93+ E371 08           	ex		af,af'
  94+ E372 23           	inc		hl
  95+ E373 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E375
  97+ E375
  98+ E375              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E375              ; "Need a version that also prints absence of character"
 100+ E375              ; removed blank line optimisation as we need spaces printed
 101+ E375 7A           l2_print_7chr_at:       ld		a,d
 102+ E376 FE 1F                                cp		31
 103+ E378 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E37A FE 7F                                cp		127
 105+ E37C 30 39                                jr		nc,.InvalidCharacter
 106+ E37E 26 00        .ValidCharater:         ld		h,0
 107+ E380 6A                                   ld		l,d
 108+ E381 29                                   add		hl,hl						; * 2
 109+ E382 29                                   add		hl,hl						; * 4
 110+ E383 29                                   add		hl,hl						; * 8 to get byte address
 111+ E384 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E388 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E389 23                                   inc		hl							; skip first byte
 114+ E38A 16 07                                ld		d,7
 115+ E38C D5           .PrintCharLoop:         push	de
 116+ E38D 7E                                   ld		a,(hl)
 117+ E38E                                      ;cp		0
 118+ E38E                                      ;jr		z,.NextRowNoBCPop
 119+ E38E C5           .PrintARow:             push	bc							; save row col
 120+ E38F 16 06                                ld		d,6							; d is loop row number now
 121+ E391 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E392 28 1C                                jr		z,.NextRow
 123+ E394 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E396 F5                                   push	af							; save character byte
 125+ E397 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E399 20 04                                jr		nz,.PixelToPrint
 127+ E39B 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E39D 18 01                                jr		.HaveSetPixelColour
 129+ E39F 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E3A0 E5           .HaveSetPixelColour		push	hl
 131+ E3A1                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E3A1 F5           .BankOnFirstOnly:       push	af
 133+ E3A2 7A                                   ld		a,d
 134+ E3A3 FE 06                                cp		6
 135+ E3A5 28 11                                jr		z,.PlotWithBank
 136+ E3A7 F1           .PlotNoBank:            pop		af
 137+ E3A8 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E3A9 69                                   ld 		l,c
 139+ E3AA 77                                   ld 		(hl),a
 140+ E3AB              .IterateLoop:	        ;	pop		bc
 141+ E3AB E1                                   pop		hl
 142+ E3AC F1                                   pop		af							; a= current byte shifted
 143+ E3AD 15                                   dec		d						 	; do dec after inc as we amy
 144+ E3AE 20 E1                                jr		nz,.PrintPixelLoop
 145+ E3B0 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E3B1 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E3B2 04                                   inc		b							; Down 1 row
 148+ E3B3 23                                   inc		hl							; Next character byte
 149+ E3B4 15                                   dec		d							; 1 done now
 150+ E3B5 20 D5                                jr		nz,.PrintCharLoop
 151+ E3B7 C9           .InvalidCharacter:      ret
 152+ E3B8 F1           .PlotWithBank:          pop		af
 153+ E3B9 CD B6 E2                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E3BC 18 ED                                jr		.IterateLoop
 155+ E3BE
 156+ E3BE              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E3BE              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E3BE 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E3BF FE 00                                cp	0
 160+ E3C1 C8                                   ret	z
 161+ E3C2 E5                                   push	hl
 162+ E3C3 D5                                   push	de
 163+ E3C4 C5                                   push	bc
 164+ E3C5 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E3C6 CD 75 E3                             call 	l2_print_7chr_at
 166+ E3C9 C1                                   pop		bc
 167+ E3CA D1                                   pop		de
 168+ E3CB E1                                   pop		hl
 169+ E3CC 08           .Move7Pixlestoright:	ex		af,af'
 170+ E3CD 79                                   ld		a,c
 171+ E3CE C6 07                                add		7
 172+ E3D0 4F                                   ld		c,a
 173+ E3D1 08                                   ex		af,af'
 174+ E3D2 23                                   inc		hl
 175+ E3D3 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E3D5
 177+ E3D5
 178+ E3D5              ; "l2_print_7at b= row, hl = col de = addr of message, c = colour"
 179+ E3D5              ; "No error trapping, if there is no null is will just cycle on the line"
 180+ E3D5
 181+ E3D5 1A           l2_print_7at_320:       ld	a,(de)							; Return if empty string
 182+ E3D6 FE 00                                cp	0
 183+ E3D8 C8                                   ret	z
 184+ E3D9 E5 D5 C5                             push	hl,,de,,bc
 185+ E3DC 57                                   ld		d,a							; bc = pos, de = char and colour
 186+ E3DD                                      ;TODOcallcall 	l2_print_7chr_at_320
 187+ E3DD C1 D1 E1                             pop		hl,,de,,bc
 188+ E3E0 08           .Move7Pixlestoright:	ex		af,af'
 189+ E3E1 79                                   ld		a,c
 190+ E3E2 C6 07                                add		7
 191+ E3E4 4F                                   ld		c,a
 192+ E3E5 08                                   ex		af,af'
 193+ E3E6 23                                   inc		hl
 194+ E3E7 18 EC                                jr		l2_print_7at_320		    ; Just loop until 0 found
 195+ E3E9
 196+ E3E9
# file closed: ./Layer2Graphics/layer2_print_character.asm
1398  E3E9                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E3E9              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E3E9              ; TODO DMA Optimise
   3+ E3E9                              DISPLAY "TODO: dma optimise"
   4+ E3E9 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   5+ E3EC 53                                   ld      d,e
   6+ E3ED 5C                                   ld      e,h
   7+ E3EE CD 84 E4                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   8+ E3F1 E1 D1 C1                             pop     bc,,de,,hl
   9+ E3F4 04                                   inc     b
  10+ E3F5 15                                   dec     d
  11+ E3F6 C8                                   ret     z
  12+ E3F7 18 F0                                jr      l2_draw_fill_box
  13+ E3F9
  14+ E3F9              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  15+ E3F9 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  16+ E3FC 53                                   ld		d,e
  17+ E3FD 5F                                   ld		e,a
  18+ E3FE 14                                   inc		d
  19+ E3FF CD 84 E4                             call	l2_draw_horz_line
  20+ E402 F1 D1 C1                             pop		bc,,de,,af
  21+ E405 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  22+ E408 67                                   ld		h,a							;save color whilst b = row + height
  23+ E409 78                                   ld		a,b
  24+ E40A 82                                   add		a,d
  25+ E40B 47                                   ld		b,a
  26+ E40C 53                                   ld		d,e							; d = width
  27+ E40D 14                                   inc		d							; Extra pixel for width
  28+ E40E 5C                                   ld		e,h							; e = colour
  29+ E40F CD 84 E4                             call	l2_draw_horz_line
  30+ E412 F1 D1 C1                             pop		bc,,de,,af
  31+ E415 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  32+ E418 04                                   inc		b							; save 2 pixles
  33+ E419 15                                   dec		d
  34+ E41A 5F                                   ld		e,a							; e = color
  35+ E41B CD EF E4                             call	l2_draw_vert_line
  36+ E41E F1 D1 C1                             pop		bc,,de,,af
  37+ E421 04           .rightvertline:         inc		b							; save 2 pixles
  38+ E422 15                                   dec		d
  39+ E423 67                                   ld		h,a							;save color whilst c = col + width
  40+ E424 79                                   ld		a,c
  41+ E425 83                                   add		a,e
  42+ E426 4F                                   ld		c,a
  43+ E427 5C                                   ld		e,h							; e = color
  44+ E428 CD EF E4                             call	l2_draw_vert_line
  45+ E42B C9                                   ret
  46+ E42C
  47+ E42C              ; "b = row, hl = col, c = height, de = width, a = colour"
  48+ E42C C5 D5 E5 F5  l2_draw_box_320:        push    bc,,de,,hl,,af
  49+ E430                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  50+ E430 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  51+ E434 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  52+ E438 08                                   ex      af,af'
  53+ E439 78                                   ld      a,b
  54+ E43A 3D                                   dec     a
  55+ E43B 81                                   add     a,c
  56+ E43C 41                                   ld      b,c
  57+ E43D 08                                   ex      af,af'
  58+ E43E                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  59+ E43E F1 E1 D1 C1  .leftVertLine:          pop     bc,,de,,hl,,af
  60+ E442 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  61+ E446                                      ;TODOcall    l2_draw_vert_line_320
  62+ E446 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  63+ E44A 19                                   add     hl,de
  64+ E44B 2B                                   dec     hl
  65+ E44C                                      ;TODOcall    l2_draw_vert_line_320
  66+ E44C C9                                   ret
  67+ E44D
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1399  E44D                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E44D
   2+ E44D              ;; NOTE DMA is little endian
   3+ E44D 00           l2_horz_pixel           DB 0
   4+ E44E
   5+ E44E 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E452 7D
   6+ E453 4D E4        l2_horz_colr            DW l2_horz_pixel
   7+ E455 00           l2_horz_lenlo           DB 0
   8+ E456 00           l2_horz_lenhi           DB 0
   9+ E457 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E45A 00 00        l2_horz_target          DB $00, $00
  11+ E45C CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E45E              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E45E
  14+ E45E
  15+ E45E              ; "l2_draw_horz_dma"
  16+ E45E              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E45E 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E45F 32 4D E4                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E462 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E463 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E465 ED 53 55 E4                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E469                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E469                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E469                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E469 ED 43 5A E4                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E46D 21 4E E4     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E470 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E472 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E474 ED B3                                otir                                                      ;
  30+ E476 C9                                   ret
  31+ E477
  32+ E477              ; "bc = left side row,col, d = length, e = color"
  33+ E477 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E478 C5                                   push 	bc							; save row col
  35+ E479 78                                   ld   	a,b
  36+ E47A CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E47D C1                                   pop  	bc
  38+ E47E 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E47F D1                                   pop  	de							; get length back
  40+ E480 CD 5E E4                             call    l2_draw_horz_dma
  41+ E483 C9                                   ret
  42+ E484
  43+ E484              ; "l2_draw_horz_line"
  44+ E484              ; "bc = left side row,col, d = length, e = color"
  45+ E484              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E484 7A           l2_draw_horz_line:      ld		a,d
  47+ E485 FE 00                                cp 		0							; if its zero length then just return
  48+ E487 C8           .zerolengthexit:        ret		z
  49+ E488 FE 01        .isitlen1:              cp 		1
  50+ E48A CA AC E4                             jp 		z,.l2_draw_horz_line_1
  51+ E48D FE 0A        .longenoughtfordma:     cp  10
  52+ E48F C3 77 E4                             jp  l2_draw_horz_dma_bank
  53+ E492 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E494 78                                   ld   	a,b
  55+ E495 CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E498 C1                                   pop  	bc
  57+ E499 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E49A 69                                   ld   	l,c
  59+ E49B D1                                   pop  	de							; get length back
  60+ E49C 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E49D 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E49E 82                                   add  	a,d
  63+ E49F 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E4A1 3E FF        .clipat255:             ld   	a,$FF
  65+ E4A3 91                                   sub  	c							; a holds clipped length
  66+ E4A4 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E4A5 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E4A7 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E4A8 23                                   inc hl
  70+ E4A9 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E4AB C9                                   ret
  72+ E4AC 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E4AD                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  73+ E4AD 78          >                        ld      a,b
  73+ E4AE             >                        JumpIfAGTENusng 192 ,.NoPlot
  73+ E4AE FE C0       >                        cp     192
  73+ E4B0 D2 BC E4    >                        jp		nc,.NoPlot
  73+ E4B3 69          >                        ld      l,c
  73+ E4B4 CD 68 E0    >                        call    asm_l2_row_bank_select
  73+ E4B7 67          >                        ld      h,a
  73+ E4B8 3A B5 E2    >                        ld      a,(line_gfx_colour)
  73+ E4BB 77          >                        ld      (hl),a
  73+ E4BC             >.NoPlot:
  74+ E4BC C9                                   ret
  75+ E4BD
  76+ E4BD
  77+ E4BD              ; "l2_draw_horz_line_to"
  78+ E4BD              ; "bc = left side row,col, d right pixel, e = color"
  79+ E4BD 7A           l2_draw_horz_line_to:   ld 		a,d
  80+ E4BE B9                                   cp 		c
  81+ E4BF 30 04                                jr		nc, .noswap
  82+ E4C1 28 07                                jr      z, .singlepixel
  83+ E4C3 51           .swap:                  ld		d,c
  84+ E4C4 4F                                   ld		c,a
  85+ E4C5 7A           .noswap:                ld		a,d
  86+ E4C6 91                                   sub		c
  87+ E4C7              ;                        dec		a							; so now its length not offset
  88+ E4C7 57                                   ld		d,a
  89+ E4C8 18 BA                                jr 		l2_draw_horz_line			; hijack routine and return statements
  90+ E4CA 7B           .singlepixel:           ld		a,e
  91+ E4CB                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  91+ E4CB 78          >                        ld      a,b
  91+ E4CC             >                        JumpIfAGTENusng 192 ,.NoPlot
  91+ E4CC FE C0       >                        cp     192
  91+ E4CE D2 DA E4    >                        jp		nc,.NoPlot
  91+ E4D1 69          >                        ld      l,c
  91+ E4D2 CD 68 E0    >                        call    asm_l2_row_bank_select
  91+ E4D5 67          >                        ld      h,a
  91+ E4D6 3A B5 E2    >                        ld      a,(line_gfx_colour)
  91+ E4D9 77          >                        ld      (hl),a
  91+ E4DA             >.NoPlot:
  92+ E4DA C9                                   ret
  93+ E4DB
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1400  E4DB                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E4DB              ; ">l2_draw_vert_segment"
   2+ E4DB              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E4DB              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E4DB 7A           l2_draw_vert_segment:   ld		a,d
   5+ E4DC FE 00        .emptylinecheck:	    cp 		0
   6+ E4DE C8                                   ret		z
   7+ E4DF FE 01        .justonepixel	        cp		1
   8+ E4E1 20 02                                jr		nz, .multiplepixelsLoop
   9+ E4E3 73                                   ld		(hl),e
  10+ E4E4 C9                                   ret
  11+ E4E5              .multiplepixelsLoop:
  12+ E4E5 7C           .endofbankcheck:        ld   	a,h
  13+ E4E6 FE 40                                cp   	64
  14+ E4E8 D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E4E9 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E4EA 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E4EB 15                                   dec		d
  18+ E4EC C8                                   ret		z
  19+ E4ED 18 F6                                jr		.multiplepixelsLoop
  20+ E4EF
  21+ E4EF              ; ">l2_draw_vert_line"
  22+ E4EF              ; ">bc = row col d = length, e = color"
  23+ E4EF 78           l2_draw_vert_line:      ld 		a,b
  24+ E4F0 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E4F2 D0                                   ret 	nc							; can't start off the screen
  26+ E4F3 7A           .emptylinecheck:        ld		a,d
  27+ E4F4 FE 00                                cp		0
  28+ E4F6 C8                                   ret		z
  29+ E4F7 FE 01                                cp		1
  30+ E4F9 20 10                                jr		nz,.multiplepixels
  31+ E4FB              .itsonepixel:           l2_plot_macro; call	l2_plot_pixel
  31+ E4FB 78          >                        ld      a,b
  31+ E4FC             >                        JumpIfAGTENusng 192 ,.NoPlot
  31+ E4FC FE C0       >                        cp     192
  31+ E4FE D2 0A E5    >                        jp		nc,.NoPlot
  31+ E501 69          >                        ld      l,c
  31+ E502 CD 68 E0    >                        call    asm_l2_row_bank_select
  31+ E505 67          >                        ld      h,a
  31+ E506 3A B5 E2    >                        ld      a,(line_gfx_colour)
  31+ E509 77          >                        ld      (hl),a
  31+ E50A             >.NoPlot:
  32+ E50A C9                                   ret
  33+ E50B              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E50B 7A           .clipto192:             ld		a,d							; get length
  35+ E50C 80                                   add		a,b							; a= row + length
  36+ E50D 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E50F FE C0                                cp		SCREEN_HEIGHT
  38+ E511 38 08                                jr		c, .noclipneeded
  39+ E513 78           .needtoclip             ld		a,b
  40+ E514 82                                   add		a,d
  41+ E515 D6 C0                                sub		SCREEN_HEIGHT
  42+ E517 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E518 7A                                   ld		a,d
  44+ E519 94                                   sub		h
  45+ E51A 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E51B              ; so now BC = row col, d = length clipped, e = color
  47+ E51B 78           .noclipneeded:          ld		a,b
  48+ E51C C5 D5                                push	bc,,de
  49+ E51E CD 68 E0                             call 	asm_l2_row_bank_select
  49+ E521               	 	; we now have poke address and a variable holding current bank number
  50+ E521 D1 C1                                pop		bc,,de
  51+ E523 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E524 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E525 CD DB E4                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E528 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E529 FE 00                                cp		0
  56+ E52B 28 27                                jr		z, .doneplotting
  57+ E52D 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E530 3C                                   inc		a
  59+ E531 06 00                                ld		b,0
  60+ E533 C5 D5                                push	bc,,de
  61+ E535 CD 51 E0                             call 	asm_l2_bank_n_select
  62+ E538 D1 C1                                pop     bc,,de
  63+ E53A 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E53B 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E53C CD DB E4                             call	l2_draw_vert_segment
  66+ E53F 7A                                   ld		a,d
  67+ E540 FE 00                                cp		0
  68+ E542 28 10                                jr		z,.doneplotting
  69+ E544 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E547 3C                                   inc		a
  71+ E548 06 00                                ld		b,0
  72+ E54A C5 D5                                push	bc,,de
  73+ E54C CD 51 E0                             call 	asm_l2_bank_n_select
  74+ E54F D1                                   pop		de
  75+ E550 E1                                   pop		hl							; hl = bc
  76+ E551 CD DB E4                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E554 C9           .doneplotting:	        ret
  78+ E555
  79+ E555              ; ">l2_draw_vert_line_to"
  80+ E555              ; ">bc = row col d = to position, e = color"
  81+ E555 78           l2_draw_vert_line_to:   ld		a,b
  82+ E556 BA                                   cp		d
  83+ E557 38 02                                jr		c, .noyswap
  84+ E559 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E55A 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E55B 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E55C 90                                   sub		b
  88+ E55D 3C                                   inc		a			; so now its length not offset
  89+ E55E 57                                   ld		d,a
  90+ E55F 18 8E                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E561                                      ; no return needed
  92+ E561
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1401  E561                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E561
   2+ E561              l2_draw_box_to:
   3+ E561              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E561              ; ">NOT IMPLEMENTED YET"
   5+ E561 C9           	ret
   6+ E562
   7+ E562              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E562              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E562              l2incbcstep EQU $03
  10+ E562              l2incbstep	EQU	$04
  11+ E562              l2decbstep	EQU $05
  12+ E562              l2decbcstep EQU $0B
  13+ E562              l2deccstep	EQU $0D
  14+ E562              l2inccstep	EQU	$0C
  15+ E562              l2incdestep EQU $13
  16+ E562              l2decdestep EQU $1B
  17+ E562              l2inchlstep EQU $23
  18+ E562              l2dechlstep EQU $2B
  19+ E562              		; l2 deltas are signed
  20+ E562 00 00        l2deltaY	DW	0
  21+ E564 00 00        l2deltaX	DW	0
  22+ E566 00           l2deltaYsq	db	0
  23+ E567 00           l2deltaXsq	db	0
  24+ E568 00           l2deltaYn	db	0
  25+ E569 00           l2deltaXn	db	0
  26+ E56A 00           l2deltaYsqn	db	0
  27+ E56B 00           l2deltaXsqn	db	0
  28+ E56C 00           l2linecolor	db	0
  29+ E56D 00 00        l2fraction	dw	0
  30+ E56F 00 00        l2e2		dw	0
  31+ E571 00           l2way		db	0
  32+ E572 00 00        l2targetPtr	dw	0
  33+ E574              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  34+ E574 00 00 00...  l2targetArray1 ds	256
  35+ E674 00 00 00...  l2targetArray2 ds	256
  36+ E774              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  37+ E774              ;;plotLine(int x0, int y0, int x1, int y1)
  38+ E774              ;;    dx =  abs(x1-x0);
  39+ E774              ;;    sx = x0<x1 ? 1 : -1;
  40+ E774              ;;    dy = -abs(y1-y0);
  41+ E774              ;;    sy = y0<y1 ? 1 : -1;
  42+ E774              ;;    err = dx+dy;  /* error value e_xy */
  43+ E774              ;;    while (true)   /* loop */
  44+ E774              ;;        plot(x0, y0);
  45+ E774              ;;        if (x0==x1 && y0==y1) break;
  46+ E774              ;;        e2 = 2*err;
  47+ E774              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  48+ E774              ;;            err += dy;
  49+ E774              ;;            x0 += sx;
  50+ E774              ;;        end if
  51+ E774              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  52+ E774              ;;            err += dx;
  53+ E774              ;;            y0 += sy;
  54+ E774              ;;        end if
  55+ E774              ;;    end while
  56+ E774              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  57+ E774              ; ">hl will be either l2targetArray1 or 2"
  58+ E774              ; For S15 version we can still use the current table as this will hold final fill data
  59+ E774              ; but we have to come in with X1Y1 X2Y2 being 16 bit
  60+ E774              ; if the Y1Y2 are both off same side of screen or X1X2 both off same side them line array is set as empty
  61+ E774              ; so
  62+ E774              ;       for each line from Y1 to Y2
  63+ E774              ;           if calculate as normal
  64+ E774              ;                if off screen we don't write
  65+ E774              ;                if on screen we clip to 0,255  which is easy as a horizontal line
  66+ E774              ;           we will need a special case were a line is not rendered    we have x1=255 and X1 = 0, i.e. they are flipped
  67+ E774              ;              we could also cheat and say view port as 1 pixel edge border so we can count x1 = 0 as no line
  68+ E774
  69+ E774              ; This must be called with  Y1 < Y2 as we won;t do a pre check
  70+ E774              ; Caulates the temp x. IY [01] = X1 [23]=Y1 [45]=X2 [67]=Y2 [89]=midY3
  71+ E774              ; Draw a line from BC to DE, with target Y position in a, all values must be 2's C at this points
  72+ E774              ; calculate deltaX, deltaY for line.
  73+ E774              ; calculate offsetY = TargetY - Y1
  74+ E774              ; calculate XTarget = X1 + (deltaX/deltaY) *  offsetY
  75+ E774              ;;;l2DiagDeltaX    DW 0
  76+ E774              ;;;l2_diagonal_getx:       ld		hl,0                            ;
  77+ E774              ;;;                        ld      ixh,0                           ; flag byte clear
  78+ E774              ;;;                        ld      (target_y),a                    ; save target
  79+ E774              ;;;.calculateDeltaX:       ld      hl,(IY+4)
  80+ E774              ;;;                        ld      de,(IY+0)
  81+ E774              ;;;                        ClearCarryFlag
  82+ E774              ;;;                        sbc     hl,de
  83+ E774              ;;;                        ld      (l2DiagDeltaX),hl
  84+ E774              ;;;.calculateDeltaY:       ld      hl,(IY+6)
  85+ E774              ;;;                        ld      de,(IY+2)
  86+ E774              ;;;                        ClearCarryFlag
  87+ E774              ;;;                        sbc     hl,de
  88+ E774              ;;;                        ld      (l2DiagDeltaY),hl
  89+ E774              ;;;.ABSDx:                 ld      hl,(l2DiagDeltaX)
  90+ E774              ;;;                        ld      a,h
  91+ E774              ;;;                        and     $80
  92+ E774              ;;;                        jr      nz,.DxPositive
  93+ E774              ;;;.DxNegative:            macronegate16hl
  94+ E774              ;;;.DxPositive:            ex      de,hl                               ; de = deltaX
  95+ E774              ;;;                        ld      hl,(l2DiagDeltaY)
  96+ E774              ;;;                        ld      a,h
  97+ E774              ;;;                        and     $80
  98+ E774              ;;;                        jr      nz,.DyPositive
  99+ E774              ;;;.DyNegative:            macronegate16hl
 100+ E774              ;;;.DyPositive:
 101+ E774              ;;;.ScaleLoop:             ld      a,h                                 ; At this point DX and DY are ABS values
 102+ E774              ;;;                        or      d                                   ; .
 103+ E774              ;;;                        jr      z,.ScaleDone                        ; .
 104+ E774              ;;;                        ShiftDERight1                               ; .
 105+ E774              ;;;                        ShiftHLRight1                               ; .
 106+ E774              ;;;                        jr      .ScaleLoop                          ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 107+ E774              ;;;.ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 108+ E774              ;;;.CalculateDelta:        ld      a,e                                 ; if DX < DY goto DX/DY
 109+ E774              ;;;                        JumpIfALTNusng l,.DXdivDY                   ; else do DY/DX
 110+ E774              ;;;.DYdivDX:               ld      a,l                                 ;    A = DY
 111+ E774              ;;;                        ld      d,e                                 ;    D = DX
 112+ E774              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DY / DX
 113+ E774              ;;;.SaveGradientDYDX:      ld      (Gradient),a
 114+ E774              ;;;                        ld      a,ixh
 115+ E774              ;;;                        or      16
 116+ E774              ;;;                        ld      ixh,a                               ;
 117+ E774              ;;;                        jp      .ClipP1                             ;
 118+ E774              ;;;.DXdivDY:               ld      a,e                                 ;    A = DX
 119+ E774              ;;;                        ld      d,l                                 ;    D = DY
 120+ E774              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DX / DY
 121+ E774              ;;;.SaveGradientDXDY:      ld      (Gradient),a
 122+ E774              ;;;
 123+ E774              ;;;have X1 -> X
 124+ E774              ;;;need deltaMidY = MidY - Y0
 125+ E774              ;;;                        X0 + (DeltaMY * Gradient) but if the graident is flipped then its X0+(deltaMY / Gradient)
 126+ E774              ;;;
 127+ E774              ;;;
 128+ E774              ;;;.calculateDeltaY:
 129+ E774              ;;;.calcualteDxDyOrDyDx
 130+ E774              ;;;.calculate
 131+ E774              ;;;
 132+ E774              ; Total unoptimised version
 133+ E774              ; use hl, de, bc, af,
 134+ E774              ; no used yet ix iy
 135+ E774              ; can we do an ex for hl' and de' holding x and hl, de holding y?
 136+ E774                                  INCLUDE "./Layer2Graphics/int_bren_save.asm"
# file opened: ././Layer2Graphics/int_bren_save.asm
   1++E774              OPCODE_IncHL            EQU $23
   2++E774              OPCODE_DecHL            EQU $2B
   3++E774              OPCODE_IncHLIndirect    EQU $34
   4++E774              OPCODE_DecHLIndirect    EQU $35
   5++E774              OPCODE_IncDE            EQU $13
   6++E774              OPCODE_DecDE            EQU $1B
   7++E774              OPCODE_JpNCnn           EQU $D2
   8++E774              OPCODE_JpCnn            EQU $DA
   9++E774              LOWEST_SAVE             EQU 0
  10++E774              HIGHEST_SAVE            EQU 1
  11++E774
  12++E774              SetIncrement:           MACRO   Location
  13++E774 ~                                    ld      a,OPCODE_IncDE
  14++E774 ~                                    ld      (Location),a
  15++E774                                      ENDM
  16++E774              SetDecrement:           MACRO   Location
  17++E774 ~                                    ld      a,OPCODE_DecDE
  18++E774 ~                                    ld      (Location),a
  19++E774                                      ENDM
  20++E774
  21++E774              ; So next optimisation
  22++E774              ; we know that we start from row y0 to row Y0
  23++E774              ; so we can just reference that row range and zero it out rather than the whole
  24++E774              ; data set
  25++E774 00           l2_fillValue            DB 0
  26++E775
  27++E775 83 C3 C7 CB  l2_fill_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  27++E779 7D
  28++E77A 74 E7        l2_fill_colr            DW l2_fillValue
  29++E77C FF           l2_fill_lenlo           DB 255
  30++E77D 00           l2_fill_lenhi           DB 0
  31++E77E 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  32++E781 00 00        l2_fill_target          DB $00, $00
  33++E783 CF 87                                DB DMA_LOAD, DMA_ENABLE
  34++E785              l2_bren_cmd_len	        EQU $ - l2_fill_line
  35++E785
  36++E785 32 74 E7     l2_fill_dma:            ld		(l2_fillValue),a                                 ; T=13     ;
  37++E788 22 81 E7                             ld      (l2_fill_target),hl
  38++E78B 21 75 E7     .write_dma:             ld 		hl, l2_fill_line                                  ;          ;
  39++E78E 06 10                                ld 		b, l2_bren_cmd_len                                ;
  40++E790 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  41++E792 ED B3                                otir                                                      ;
  42++E794 C9                                   ret
  43++E795
  44++E795              ; to find a point Y1 along a line X0Y0 to X2Y2
  45++E795              ; DX = X2-X0, DY = Y2-Y0, D = DX/DY, X1 = X0+ ((Y1-Y0)*DX)
  46++E795              ; will need 16.8 24 bit maths for DX DY unless we scale down and do a muliplier up
  47++E795              ; so we could do DX = X2-X0, scale to 8.8  ... Note this will fail for extrmem near vertical or horizontal angles
  48++E795              ;                DY = Y2-Y0, scale to 8.8  ... could we use an octlet lookup table?
  49++E795              ;                D  = DX/DY which would give us an 8.2 proportion
  50++E795              ; a look up table would not work for calc of DX DY but we could use a log table and anti log to simplify to add/subtract
  51++E795              ; need a version of this that counts down to a trigger Y axis + 1, ideallign using DX DY if possible
  52++E795              ; We may be able to use the flat top/flat botttom and pick up a calculated value 0nce it hits Y2?
  53++E795              ; Yes logirithm table will work, need to build as a decimal set optimised
  54++E795              ; logically if the ship is too close it will always be too close to render so we can exclude
  55++E795              ; excessivley large values for X and Y as they will either be too far off side or span the whole screen
  56++E795              ; and just flood fill
  57++E795              ; Thsi means we can do log maths for jsut 0 to 1024
  58++E795              ; 9/11 we assume that large values will either flood fill or be straight lines
  59++E795              ; so we allow a range of -256 to + 512 ,i.e. off screen by a whole additional screen
  60++E795              ; then divide becomes 16 bit div 16 bit to yeild an 8.8 result. This can then be used to work out the new position
  61++E795              ; so                    DE = DX (Ignoring signs for now)
  62++E795              ;                       HL = DY
  63++E795              ; we need L2_DX, L2_DY output is HL
  64++E795              ; After workign out in excel Formulas are:
  65++E795              ; incomming X0, Y0, Y1, DX , DY
  66++E795              ; dY2 = Y1-Y0
  67++E795              ; dXHi = DX/DY*256
  68++E795              ; dxRemainder = DX-dXHi
  69++E795              ; dXRemainder = TRUNC((dxRemainder)/DY)*256
  70++E795              ; Integer component = dY2 * dXHi /256
  71++E795              ; Adj     component = DY2 * dXRemainder /256
  72++E795              ; total = Integer + Adj + X0
  73++E795
  74++E795 00 00        l2_X0                   DW 0
  75++E797 00 00        l2_Y0                   DW 0
  76++E799 00 00        l2_X1                   DW 0
  77++E79B 00 00        l2_Y1                   DW 0
  78++E79D 00 00        ld_YMid                 DW 0
  79++E79F 00 00        l2_DX                   DW 0
  80++E7A1 00 00        l2_DY                   DW 0
  81++E7A3 00 00        l2_Error                DW 0
  82++E7A5 00 00        l2_E2                   DW 0
  83++E7A7 00 00        l2_dY2                  DW 0
  84++E7A9 00 00        ld_dxHi                 DW 0
  85++E7AB 00 00        l2_dxRemainder          DW 0
  86++E7AD 00 00        l2_dxRemainder2         DW 0
  87++E7AF 00 00        l2_dXRemainderAdj       DW 0
  88++E7B1 00 00        l2_integer              DW 0
  89++E7B3 00 00        l2_integer2             DW 0
  90++E7B5
  91++E7B5 2A 9F E7     ScaleDXDY:              ld      hl,(l2_DX)
  92++E7B8 ED 5B A1 E7                          ld      de,(l2_DY)
  93++E7BC 7C           .ScaleLoop:             ld      a,h
  94++E7BD B2                                   or      d
  95++E7BE 28 0B                                jr      z,.ScaleDone
  96++E7C0                                      ShiftHLRight1
  96++E7C0 CB 3C       >			   srl h
  96++E7C2 CB 1D       >			   rr  l
  97++E7C4                                      ShiftDERight1
  97++E7C4 CB 3A       >			   srl d
  97++E7C6 CB 1B       >			   rr  e
  98++E7C8 C3 BC E7                             jp      .ScaleLoop
  99++E7CB 22 9F E7     .ScaleDone:             ld      (l2_DX),hl
 100++E7CE ED 53 A1 E7                          ld      (l2_DY),de
 101++E7D2 C9                                   ret
 102++E7D3
 103++E7D3 2A 99 E7     HLEquMidX:              ld      hl,(l2_X1)
 104++E7D6 ED 5B 95 E7                          ld      de,(l2_X0)
 105++E7DA                                      ClearCarryFlag
 105++E7DA B7          >                        or a
 106++E7DB ED 52                                sbc     hl,de
 107++E7DD 22 9F E7                             ld      (l2_DX),hl
 108++E7E0 2A 9B E7                             ld      hl,(l2_Y1)
 109++E7E3 ED 5B 97 E7                          ld      de,(l2_Y0)
 110++E7E7                                      ClearCarryFlag
 110++E7E7 B7          >                        or a
 111++E7E8 ED 52                                sbc     hl,de
 112++E7EA 22 A1 E7                             ld      (l2_DY),hl
 113++E7ED DD 01                                break
 114++E7EF CD B5 E7                             call    ScaleDXDY
 115++E7F2 2A 9D E7                             ld      hl,(ld_YMid)
 116++E7F5                                      ClearCarryFlag
 116++E7F5 B7          >                        or a
 117++E7F6 ED 52                                sbc     hl,de
 118++E7F8 22 A7 E7                             ld      (l2_dY2),hl
 119++E7FB ED 4B 9F E7                          ld      bc,(l2_DX)          ; dXHi(DE)= DX/DY*256
 120++E7FF ED 5B A1 E7                          ld      de,(l2_DY)          ; .
 121++E803 DD 62 DD 6B                          ld      ix,de               ; .
 122++E807 E5 FD E1                             ld      iy,hl               ; .
 123++E80A              ;                       BC = DX/DY as 8.8           ; .
 124++E80A CD 6B 96                             call    BC_Div_DE; DEequDEDivBC; DE is the result HL is the remainder
 125++E80D 78                                   ld      a,b                 ; if DE is 8 bit only
 126++E80E A7                                   and     a                   ; .
 127++E80F 28 06                                jr      z,.LT255            ; goto LT255
 128++E811 01 FF FF                             ld      bc,$FFFF            ; else set BC to $FFFF
 129++E814 C3 50 E8                             jp      .DoneCalc           ; .
 130++E817 ED 43 A9 E7  .LT255:                 ld      (ld_dxHi),bc        ;
 131++E81B 22 AB E7                             ld      (l2_dxRemainder),hl ; dxRemainder = DX-dXHi
 132++E81E DD 01        .CalcIntegerComponent:  break
 133++E820 2A A7 E7                             ld      hl,(l2_dY2)         ; Integer component = dY2 * dXHi /256
 134++E823 ED 5B A9 E7                          ld      de,(ld_dxHi)        ; .
 135++E827 CD 77 91                             call    DEHLequDEmulHL      ; .
 136++E82A ED 53 B1 E7                          ld      (l2_integer),de     ; .
 137++E82E 22 B3 E7                             ld      (l2_integer2),hl    ; .
 138++E831 ED 4B AB E7  .CalcRemainderFraction: ld      bc,(l2_dxRemainder) ; dXRemainder = TRUNC((dxRemainder)/DY)*256
 139++E835 ED 5B A1 E7                          ld      de,(l2_DY)          ; .
 140++E839 CD 6B 96                             call    BC_Div_DE           ; BC, remainder in HL
 141++E83C ED 43 AF E7                          ld      (l2_dXRemainderAdj),bc
 142++E840 22 AD E7                             ld      (l2_dxRemainder2),hl
 143++E843 2A A7 E7     .CalcAdjustment:        ld      hl,(l2_dY2)         ; Adj component = DY2 * dXRemainder /256
 144++E846 50 59                                ld      de,bc               ;
 145++E848 CD 77 91                             call    DEHLequDEmulHL      ;
 146++E84B 2A B1 E7                             ld      hl,(l2_integer)
 147++E84E 19                                   add     hl,de
 148++E84F C9                                   ret
 149++E850
 150++E850
 151++E850              ;                       HL = (DE * B) /256
 152++E850 C5           .DoneCalc:              push    bc
 153++E851 58                                   ld      e,b
 154++E852 DD E5 E1                             ld      hl,ix
 155++E855 CD 62 91                             call AHLequHLmulE
 156++E858 6C                                   ld l,h
 157++E859 67                                   ld h,a
 158++E85A E5 DD E1                             ld      ix,hl
 159++E85D              ;                       DE = (DE * C) /256          ld e,c call AHLequHLmulE,ld l,h, ld h,a
 160++E85D C1                                   pop     bc
 161++E85E 59                                   ld      e,c
 162++E85F FD E5 E1                             ld      hl,iy
 163++E862 CD 62 91                             call AHLequHLmulE
 164++E865 6C                                   ld l,h
 165++E866 67                                   ld h,a
 166++E867              ;                       HL + = DE
 167++E867 DD 54 DD 5D                          ld      de,ix
 168++E86B 19                                   add     hl,de
 169++E86C              ;                       HL + + X0
 170++E86C ED 5B 95 E7                          ld      de,(l2_X0)
 171++E870 19                                   add     hl,de
 172++E871 C9                                   ret
 173++E872
 174++E872
 175++E872
 176++E872
 177++E872              ;; Need optimisation for vertical line and horizonal
 178++E872              int_bren_save_Array1Low:
 179++E872 3E FF                                ld      a,$FF
 180++E874 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 181++E877 CD 85 E7                             call    l2_fill_dma
 182++E87A 3E DA                                ld      a,OPCODE_JpCnn
 183++E87C 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 184++E87F C3 AD E8                             jp      int_bren_save_Array ;
 185++E882              int_bren_save_Array1High:
 186++E882                                      ZeroA
 186++E882 AF          >                        xor a
 187++E883 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 188++E886 CD 85 E7                             call    l2_fill_dma
 189++E889 3E D2                                ld      a,OPCODE_JpNCnn
 190++E88B 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 191++E88E C3 AD E8                             jp      int_bren_save_Array ;
 192++E891              int_bren_save_Array2Low:
 193++E891 3E FF                                ld      a,$FF
 194++E893 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 195++E896 CD 85 E7                             call    l2_fill_dma
 196++E899 3E DA                                ld      a,OPCODE_JpCnn
 197++E89B 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 198++E89E C3 AD E8                             jp      int_bren_save_Array ;
 199++E8A1              int_bren_save_Array2High:
 200++E8A1                                      ZeroA
 200++E8A1 AF          >                        xor a
 201++E8A2 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 202++E8A5 CD 85 E7                             call    l2_fill_dma
 203++E8A8 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 204++E8AB 3E D2                                ld      a,OPCODE_JpNCnn
 205++E8AD              ; Uses HL DE
 206++E8AD              ; Note this works out the last position for each point, not any intermediate
 207++E8AD              ; so we need a version that plots lowest for left line & highest for right line
 208++E8AD 22 39 E9     int_bren_save_Array:    ld      (.TargetArrayAddr+2),hl
 209++E8B0 32 4A E9                             ld      (.TargetJump),a
 210++E8B3 2A 99 E7                             ld      hl,(l2_X1)          ; if X0 < X1
 211++E8B6 ED 5B 95 E7                          ld      de,(l2_X0)          ; calculate SX DX
 212++E8BA              ; --- dx = abs(x1 - x0) & set up SX
 213++E8BA                                      ClearCarryFlag              ;
 213++E8BA B7          >                        or a
 214++E8BB ED 52                                sbc     hl,de               ;
 215++E8BD CB 7C                                bit     7,h                 ;
 216++E8BF 28 0E                                jr      z,.DXPositive       ;
 217++E8C1              .DXNegative:            NegHL                       ;
 217++E8C1 AF          >                    xor a
 217++E8C2 95          >                    sub l
 217++E8C3 6F          >                    ld l,a
 217++E8C4 9F          >                    sbc a,a
 217++E8C5 94          >                    sub h
 217++E8C6 67          >                    ld h,a
 218++E8C7                                      SetDecrement .UpdateX0Operation
 218++E8C7 3E 1B       >                        ld      a,OPCODE_DecDE
 218++E8C9 32 9A E9    >                        ld      (.UpdateX0Operation),a
 219++E8CC C3 D4 E8                             jp      .DoneCalcDx         ;
 220++E8CF              .DXPositive:            SetIncrement .UpdateX0Operation
 220++E8CF 3E 13       >                        ld      a,OPCODE_IncDE
 220++E8D1 32 9A E9    >                        ld      (.UpdateX0Operation),a
 221++E8D4 22 9F E7     .DoneCalcDx:            ld      (l2_DX),hl          ;
 222++E8D7 ED 5B 95 E7                          ld      de,(l2_X0)          ; fetch in X0 so we can exx
 223++E8DB ED 4B 99 E7                          ld      bc,(l2_X1)          ; and also X1
 224++E8DF D9                                   exx                         ; ++now hl' = DX, DE'=X0, BC' = X1
 225++E8E0              ; --- dy = -abs(y1 - y0) & set up SY
 226++E8E0 2A 9B E7     .CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 227++E8E3 ED 5B 97 E7                          ld      de,(l2_Y0)          ; calculate SY DY
 228++E8E7                                      ClearCarryFlag              ;
 228++E8E7 B7          >                        or a
 229++E8E8 ED 52                                sbc     hl,de               ;
 230++E8EA CB 7C                                bit     7,h                 ;
 231++E8EC 28 08                                jr      z,.DYPositive       ;
 232++E8EE              .DYNegative:            SetDecrement .UpdateY0Operation
 232++E8EE 3E 1B       >                        ld      a,OPCODE_DecDE
 232++E8F0 32 D1 E9    >                        ld      (.UpdateY0Operation),a
 233++E8F3 C3 D4 E8                             jp      .DoneCalcDx         ;
 234++E8F6              .DYPositive:            NegHL                       ;
 234++E8F6 AF          >                    xor a
 234++E8F7 95          >                    sub l
 234++E8F8 6F          >                    ld l,a
 234++E8F9 9F          >                    sbc a,a
 234++E8FA 94          >                    sub h
 234++E8FB 67          >                    ld h,a
 235++E8FC                                      SetIncrement .UpdateY0Operation
 235++E8FC 3E 13       >                        ld      a,OPCODE_IncDE
 235++E8FE 32 D1 E9    >                        ld      (.UpdateY0Operation),a
 236++E901 22 A1 E7     .DoneCalcDy:            ld      (l2_DY),hl
 237++E904 ED 5B 97 E7                          ld      de,(l2_Y0)          ; fetch in X0
 238++E908 ED 4B 9B E7                          ld      bc,(l2_Y1)          ; now hl = DY, DE=Y0, BC = Y1
 239++E90C              ; ---   error = dx + dy >> at this point hl' = DX, DE'=X0, BC' = X1 and hl = DY, DE=Y0, BC = Y1
 240++E90C E5 FD E1     .CalcError:             ld      iy,hl               ; fetch DY into IY
 241++E90F D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 242++E910 EB                                   ex      de,hl               ; quickly flip over de and to support add instruction
 243++E911 FD 19                                add     iy,de               ; we have set up IY as L2_Error
 244++E913 EB                                   ex      de,hl
 245++E914 FD 22 A3 E7                          ld      (l2_Error),iy
 246++E918              ; --- While True        >> at this point we are looing at DX and need to consider state at iteration loop
 247++E918 D9           .CalcLoop:              exx                         ; ++now looking at DY data set and DX in alternate
 248++E919                                      ;ld      hl,(l2_X0)         ; get X0 and Y0
 249++E919              ; --- PLOT X0, Y0       >> now looking at DY data set and DX in alternate
 250++E919              .CheckYRange:           ;ld      de,(l2_Y0)
 251++E919 7A                                   ld      a,d                 ; if Y0 > 127
 252++E91A A7                                   and     a                   ; or Y0 is negative
 253++E91B 20 35                                jr      nz,.YOutOfRange     ; then we can skip the plot
 254++E91D 7B                                   ld      a,e                 ;
 255++E91E E6 80                                and     $80                 ;
 256++E920 20 30                                jr      nz,.YOutOfRange     ;
 257++E922 D9           .CheckXRange:           exx                         ; ++now looking at DX data set and DY in alternate
 258++E923 7A                                   ld      a,d                 ; if X0 is negative
 259++E924 A7                                   and     a
 260++E925 28 0E                                jr      z,.XOKToPlot
 261++E927 E6 80                                and     $80
 262++E929 28 05                                jr      z,.NotXNegative
 263++E92B 3E 00        .XNegative:             ld      a,0                 ; if X0 <0 > 255 then clamp it
 264++E92D C3 36 E9                             jp      .ClipXDone          ;
 265++E930 3E FF        .NotXNegative:          ld      a,255               ;
 266++E932 C3 36 E9                             jp      .ClipXDone          ;
 267++E935 7B           .XOKToPlot:             ld      a,e                 ; no clip therefore we can just use X0 as is
 268++E936 D9           .ClipXDone:             exx                         ; ++now looking at DY data set and DX in alternate
 269++E937 DD 21 74 E5  .TargetArrayAddr:       ld      ix,l2targetArray1   ; later this will be self modifying
 270++E93B 08                                   ex      af,af'
 271++E93C 7B                                   ld      a,e
 272++E93D 32 48 E9                             ld      (.TargetRead+2),a   ; Write Y0 offset to IX offset
 273++E940 32 50 E9                             ld      (.TargetWrite+2),a  ; Write Y0 offset to IX offset
 274++E943 08                                   ex      af,af'
 275++E944 C5                                   push    bc
 276++E945 47                                   ld      b,a
 277++E946 DD 7E 00     .TargetRead:            ld      a,(IX+0)
 278++E949 B8                                   cp      b
 279++E94A DA 51 E9     .TargetJump:            jp      c,.SkipWrite
 280++E94D 78                                   ld      a,b
 281++E94E DD 77 00     .TargetWrite:           ld      (IX+0),a            ; directly updates l2targetArray1
 282++E951 C1           .SkipWrite:             pop     bc
 283++E952              ; --- if x0 == x1 && y0 == y1 break
 284++E952              .YOutOfRange: ; At this point we have either plotted or its outside array range
 285++E952 D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 286++E953              ;                        ld      bc,(l2_X1)
 287++E953              .CheckEndXY:            cpDEEquBC .CheckEndXYOK     ; de will equal X0 still by here
 287++E953 7A          >                        ld      a,d
 287++E954 B8          >                        cp      b
 287++E955 C2 5D E9    >                        jp      nz, .CheckEndXYOK
 287++E958 7B          >                        ld      a,e
 287++E959 B9          >                        cp      c
 287++E95A             >.NoTheSame:
 288++E95A C2 67 E9                             jp      nz,.x0x1Differ
 289++E95D D9           .CheckEndXYOK:          exx                         ; ++ in this branch in this branchnow looking at DY data set and DX in alternate
 290++E95E              ;                        ld      bc,(l2_Y1)
 291++E95E                                      cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 291++E95E 7A          >                        ld      a,d
 291++E95F B8          >                        cp      b
 291++E960 C2 67 E9    >                        jp      nz, .x0x1Differ
 291++E963 7B          >                        ld      a,e
 291++E964 B9          >                        cp      c
 291++E965             >.NoTheSame:
 292++E965 D9                                   exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 293++E966 C8                                   ret     z                   ; if they are both the same we are done
 294++E967              .x0x1Differ:                                        ; by this point we could be looking at DX on all branches
 295++E967              ; --- e2 = 2 * error
 296++E967 D9           .SetError2:             exx                         ; ++now looking at DY data set and DX in alternate
 297++E968 E5 D5                                push    hl,,de              ; save HL
 298++E96A EB                                   ex      de,hl               ; de = DY; could futher optimise to check DY>E2 and reduce instruction count
 299++E96B FD E5 E1                             ld      hl,iy;(l2_Error)       ; e2 = 2 * error
 300++E96E 29                                   add     hl,hl               ; .
 301++E96F 22 A5 E7                             ld      (l2_E2),hl          ; .
 302++E972                                      ; before here we are looking at DY
 303++E972              ; --- if e2 >= dy
 304++E972 CD 55 99     .CheckE2gteDY:          call    compare16HLDE       ; .
 305++E975 D1 E1                                pop     hl,,de              ; before jumps get HL back
 306++E977 EA 80 E9                             jp      pe, .E2DyParitySet  ; Jump looking at DY
 307++E97A FA 9C E9                             jp      m,  .E2ltDY         ; Jump looking at DY to get here overflow clear, so if m is set then HL<DE
 308++E97D C3 83 E9                             jp      .E2gteDY            ; Jump looking at DY
 309++E980              .E2DyParitySet:         ; entering here looking at DY
 310++E980 F2 9C E9                             jp      p,  .E2ltDY         ; Jump looking at DY if pe is set, then if sign is clear HL<DE
 311++E983              ; --- if x0 == x1 break
 312++E983 D9           .E2gteDY:               exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 313++E984                                      cpDEEquBC .ErrorUpdateDY    ;      if x0 == x1 break
 313++E984 7A          >                        ld      a,d
 313++E985 B8          >                        cp      b
 313++E986 C2 8C E9    >                        jp      nz, .ErrorUpdateDY
 313++E989 7B          >                        ld      a,e
 313++E98A B9          >                        cp      c
 313++E98B             >.NoTheSame:
 314++E98B C8                                   ret     z                   ;      .
 315++E98C              ; --- error = error + dy
 316++E98C D9           .ErrorUpdateDY:         exx                         ; if we get here we are looking at DY data set and DX in alternate
 317++E98D E5 D5                                push    hl,,de              ; save HL
 318++E98F EB                                   ex      de,hl               ; de = DY
 319++E990 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dy
 320++E993 19                                   add     hl,de               ;      .
 321++E994 E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 322++E997 D1 E1                                pop     hl,,de
 323++E999              ; --- x0 = x0 + sx
 324++E999 D9           .UpdateX0:              exx                         ; now back looking at DX data set and DY in alternate
 325++E99A 00           .UpdateX0Operation:     nop                         ;      x0 = x0 +/- sx
 326++E99B D9                                   exx                         ; correction on this brach so we are looking at DY
 327++E99C              .E2ltDY:                ; entering here, looking at DY in all branches
 328++E99C              ; --- if e2 <= dx
 329++E99C D9           .CheckE2lteDX:          exx                         ; we want to look at DX
 330++E99D E5 D5                                push    hl,,de
 331++E99F EB                                   ex      de,hl               ; de = l2_DX
 332++E9A0 2A A5 E7                             ld      hl,(l2_E2)          ; if e2 <= dx
 333++E9A3              ;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 334++E9A3 CD 55 99                             call    compare16HLDE       ; we will jump based on e2 <= dx
 335++E9A6 D1 E1                                pop     hl,,de              ; recover saved HL DE
 336++E9A8 CA BA E9                             jp      z, .E2lteDX         ; Jump looking at DX
 337++E9AB EA B4 E9                             jp      pe, .E2DxParitySet  ; Jump looking at DX
 338++E9AE FA BA E9                             jp      m,  .E2lteDX        ; Jump looking at DX : to get here overflow clear, so if m is set then HL<DE
 339++E9B1 C3 D3 E9                             jp      .E2gteDx            ; Jump looking at DX
 340++E9B4 F2 BA E9     .E2DxParitySet:         jp      p,  .E2lteDX        ; Jump looking at DX
 341++E9B7 C3 D3 E9                             jp      .E2gteDx            ; Jump looking at DX
 342++E9BA              ; ---  if y0 == y1 break
 343++E9BA              .E2lteDX:               ; Entry looking at DX
 344++E9BA D9                                   exx                         ;      in branch looking at DY
 345++E9BB                                      cpDEEquBC .ErrorUpdateDX    ;      .
 345++E9BB 7A          >                        ld      a,d
 345++E9BC B8          >                        cp      b
 345++E9BD C2 C4 E9    >                        jp      nz, .ErrorUpdateDX
 345++E9C0 7B          >                        ld      a,e
 345++E9C1 B9          >                        cp      c
 345++E9C2             >.NoTheSame:
 346++E9C2 D9                                   exx                         ;      in branch looking at DX
 347++E9C3 C8                                   ret     z                   ;      .
 348++E9C4              ; --- error = error + dx
 349++E9C4              .ErrorUpdateDX:         ; at this point will be looking at DX
 350++E9C4 E5 D5                                push    hl,,de
 351++E9C6 EB                                   ex      de,hl               ;      de = DY
 352++E9C7 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dx
 353++E9CA 19                                   add     hl,de               ;      .
 354++E9CB E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 355++E9CE D1 E1                                pop     hl,,de
 356++E9D0              ; --- y0 = y0 + sy
 357++E9D0 D9           .UpdateY0:              exx                         ;      in this branch we are looking at DY
 358++E9D1 00           .UpdateY0Operation:     nop                         ;      y0 = y0 + sy
 359++E9D2 D9                                   exx                         ;      in this branch we are looking at
 360++E9D3              ; --- Loop
 361++E9D3              .E2gteDx:               ; at this point will be looking at DX again
 362++E9D3 C3 18 E9                             jp      .CalcLoop           ; repeat until we have a return
 363++E9D6
# file closed: ././Layer2Graphics/int_bren_save.asm
 137+ E9D6              ;;;l2_X0                   DW 0
 138+ E9D6              ;;;l2_Y0                   DW 0
 139+ E9D6              ;;;l2_X1                   DW 0
 140+ E9D6              ;;;l2_Y1                   DW 0
 141+ E9D6              ;;;l2_DX                   DW 0
 142+ E9D6              ;;;l2_DY                   DW 0
 143+ E9D6              ;;;l2_SX                   DW 0
 144+ E9D6              ;;;l2_SY                   DW 0
 145+ E9D6              ;;;l2_Error                DW 0
 146+ E9D6              ;;;l2_E2                   DW 0
 147+ E9D6              ;;;int_bren_save_Array1:   ld      hl,(l2_X1)          ; if X0 < X1
 148+ E9D6              ;;;                        ld      de,(l2_X0)          ; calculate SX DX
 149+ E9D6              ;;;                        ClearCarryFlag              ;
 150+ E9D6              ;;;                        sbc     hl,de               ;
 151+ E9D6              ;;;                        bit     7,h                 ;
 152+ E9D6              ;;;                        jr      z,.DXPositive       ;
 153+ E9D6              ;;;.DXNegative:            NegHL                       ;
 154+ E9D6              ;;;                        ld      bc,-1               ;
 155+ E9D6              ;;;                        jp      .DoneCalcDx         ;
 156+ E9D6              ;;;.DXPositive:            ld      bc,1                ;
 157+ E9D6              ;;;.DoneCalcDx:            ld      (l2_SX),bc          ;
 158+ E9D6              ;;;                        ld      (l2_DX),hl          ;
 159+ E9D6              ;;;.CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 160+ E9D6              ;;;                        ld      de,(l2_Y0)          ; calculate SY DY
 161+ E9D6              ;;;                        ClearCarryFlag              ;
 162+ E9D6              ;;;                        sbc     hl,de               ;
 163+ E9D6              ;;;                        bit     7,h                 ;
 164+ E9D6              ;;;                        jr      z,.DYPositive       ;
 165+ E9D6              ;;;.DYNegative:            ld      bc,-1               ;
 166+ E9D6              ;;;                        jp      .DoneCalcDx         ;
 167+ E9D6              ;;;.DYPositive:            NegHL                       ;
 168+ E9D6              ;;;                        ld      bc,1                ;
 169+ E9D6              ;;;.DoneCalcDy:            ld      (l2_SY),bc          ;
 170+ E9D6              ;;;                        ld      (l2_DY),hl
 171+ E9D6              ;;;.CalcError:             ld      hl,(l2_DX)
 172+ E9D6              ;;;                        ld      de,(l2_DY)
 173+ E9D6              ;;;                        add     hl,de
 174+ E9D6              ;;;                        ld      (l2_Error),hl
 175+ E9D6              ;;;.CalcLoop:              break
 176+ E9D6              ;;;                        ld      hl,(l2_X0)          ; get X0 and Y0
 177+ E9D6              ;;;.CheckYRange:           ld      de,(l2_Y0)
 178+ E9D6              ;;;                        ld      a,d                 ; if Y > 127
 179+ E9D6              ;;;                        and     a                   ; or Y is negative
 180+ E9D6              ;;;                        jr      nz,.YOutOfRange     ; then we can skip the plot
 181+ E9D6              ;;;                        ld      a,e                 ;
 182+ E9D6              ;;;                        and     $80                 ;
 183+ E9D6              ;;;                        jr      nz,.YOutOfRange     ;
 184+ E9D6              ;;;.CheckXRange:           ld      a,h                 ; if X0 is negative
 185+ E9D6              ;;;                        and     a
 186+ E9D6              ;;;                        jr      z,.XOKToPlot
 187+ E9D6              ;;;                        and     $80
 188+ E9D6              ;;;                        jr      z,.NotXNegative
 189+ E9D6              ;;;.XNegative:             ld      a,0
 190+ E9D6              ;;;                        jp      .ClipXDone
 191+ E9D6              ;;;.NotXNegative:          ld      a,255
 192+ E9D6              ;;;                        jp      .ClipXDone
 193+ E9D6              ;;;.XOKToPlot:             ld      a,l                 ; no clip therefore we can just use l
 194+ E9D6              ;;;.ClipXDone:             push    hl
 195+ E9D6              ;;;                        push    af                  ; using the Y coordinate
 196+ E9D6              ;;;                        ld      hl,l2targetArray1   ; plot the X value for this row
 197+ E9D6              ;;;                        ld      a,e
 198+ E9D6              ;;;                        add     hl,a
 199+ E9D6              ;;;                        pop     af
 200+ E9D6              ;;;                        ld      (hl),a
 201+ E9D6              ;;;                        pop     hl
 202+ E9D6              ;;;.YOutOfRange: ; At this point we have either plotted or its outside array range
 203+ E9D6              ;;;                        ld      bc,(l2_X1)
 204+ E9D6              ;;;.CheckEndXY:            cpHLEquBC .CheckEndXYOK     ; hl will equal X0 still by here
 205+ E9D6              ;;;                        jp      nz,.x0x1Differ
 206+ E9D6              ;;;.CheckEndXYOK:          ld      bc,(l2_Y1)
 207+ E9D6              ;;;                        cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 208+ E9D6              ;;;                        ret     z                   ; if they are both the same we are done
 209+ E9D6              ;;;.x0x1Differ:
 210+ E9D6              ;;;.SetError2:             ld      hl,(l2_Error)       ; e2 = 2 * error
 211+ E9D6              ;;;                        add     hl,hl               ; .
 212+ E9D6              ;;;                        ld      (l2_E2),hl          ; .
 213+ E9D6              ;;;.CheckE2gteDY:          ld      de,(l2_DY)          ; if e2 >= dy
 214+ E9D6              ;;;                        call    compare16HLDE       ; .
 215+ E9D6              ;;;                        jp      pe, .E2DyParitySet
 216+ E9D6              ;;;                        jp      m,  .E2ltDY         ; to get here overflow clear, so if m is set then HL<DE
 217+ E9D6              ;;;                        jp      .E2gteDY
 218+ E9D6              ;;;.E2DyParitySet:         jp      p,  .E2ltDY         ; if pe is set, then if sign is clear HL<DE
 219+ E9D6              ;;;.E2gteDY:               ld      hl,(l2_X0)          ;      if x0 == x1 break
 220+ E9D6              ;;;                        ld      de,(l2_X1)          ;      .
 221+ E9D6              ;;;                        cpHLEquDE .ErrorUpdateDY    ;      .
 222+ E9D6              ;;;                        ret     z                   ;      .
 223+ E9D6              ;;;.ErrorUpdateDY:         ld      hl,(l2_Error)       ;      error = error + dy
 224+ E9D6              ;;;                        ld      de,(l2_DY)          ;      .
 225+ E9D6              ;;;                        add     hl,de               ;      .
 226+ E9D6              ;;;                        ld      (l2_Error),hl       ;      .
 227+ E9D6              ;;;.UpdateX0:              ld      hl,(l2_X0)          ;      x0 = x0 + sx
 228+ E9D6              ;;;                        ld      bc,(l2_SX)          ;      .
 229+ E9D6              ;;;                        add     hl,bc               ;      .
 230+ E9D6              ;;;                        ld      (l2_X0),hl          ;      .
 231+ E9D6              ;;;.E2ltDY:
 232+ E9D6              ;;;.CheckE2lteDX:          ld      hl,(l2_E2)          ; if e2 <= dx
 233+ E9D6              ;;;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 234+ E9D6              ;;;                        call    compare16HLDE       ; we will jump based on e2 <= dx
 235+ E9D6              ;;;                        jp      z, .E2lteDX
 236+ E9D6              ;;;                        jp      pe, .E2DxParitySet
 237+ E9D6              ;;;                        jp      m,  .E2lteDX         ; to get here overflow clear, so if m is set then HL<DE
 238+ E9D6              ;;;                        jp      .E2gteDx
 239+ E9D6              ;;;.E2DxParitySet:         jp      p,  .E2lteDX
 240+ E9D6              ;;;                        jp      .E2gteDx
 241+ E9D6              ;;;.E2lteDX:               ld      hl,(l2_Y0)          ;      .
 242+ E9D6              ;;;                        ld      de,(l2_Y1)          ;      .
 243+ E9D6              ;;;                        cpHLEquDE .ErrorUdpateDX    ;      .
 244+ E9D6              ;;;                        ret     z                   ;      .
 245+ E9D6              ;;;.ErrorUdpateDX:         ld      hl,(l2_Error)       ;      error = error + dx
 246+ E9D6              ;;;                        ld      de,(l2_DX)          ;      .
 247+ E9D6              ;;;                        add     hl,de               ;      .
 248+ E9D6              ;;;                        ld      (l2_Error),hl       ;      .
 249+ E9D6              ;;;.UpdateY0:              ld      hl,(l2_Y0)          ;      x0 = x0 + sx
 250+ E9D6              ;;;                        ld      bc,(l2_SY)          ;      .
 251+ E9D6              ;;;                        add     hl,bc              ;      .
 252+ E9D6              ;;;                        ld      (l2_Y0),hl         ;      .
 253+ E9D6              ;;;.E2gteDx:               jp      .CalcLoop           ; repeat until we have a return
 254+ E9D6
 255+ E9D6
 256+ E9D6              ;;;;;;;; for this it myst always be sorted Y0 -> Y2
 257+ E9D6              ;;;;;;;;; note we ca't use this to do x? as it will clip inherently
 258+ E9D6              ;;;;;;;l2_save_diagnonal_signed_1:
 259+ E9D6              ;;;;;;;                        ld		hl,0                            ;
 260+ E9D6              ;;;;;;;                        ld		(l2deltaX),hl                   ;
 261+ E9D6              ;;;;;;;                        ld		(l2deltaY),hl
 262+ E9D6              ;;;;;;;.CheckYOnScreen:        ld      de,(l2_commonTopY)
 263+ E9D6              ;;;;;;;                        ld      hl,(l2_bottomY)
 264+ E9D6              ;;;;;;;                        ld      a,d
 265+ E9D6              ;;;;;;;                        and     h
 266+ E9D6              ;;;;;;;                        and     $80
 267+ E9D6              ;;;;;;;                        jr      nz,.OffScreen
 268+ E9D6              ;;;;;;;;...dy = y1 - y0
 269+ E9D6              ;;;;;;;.CalcDeltaY:            ClearCarryFlag
 270+ E9D6              ;;;;;;;                        sbc     hl,de                           ; now delta is signed, if its negative then something bad as gone wrong
 271+ E9D6              ;;;;;;;                        ld      a,h
 272+ E9D6              ;;;;;;;                        and     $80
 273+ E9D6              ;;;;;;;                        jr      nz,.OffScreen
 274+ E9D6              ;;;;;;;                        ld      (l2deltaY),hl                   ; Delta signed
 275+ E9D6              ;;;;;;;CheckXOnScreen:         ld      de,(l2_leftX)
 276+ E9D6              ;;;;;;;                        ld      hl,(l2_rightX)
 277+ E9D6              ;;;;;;;                        ld      a,d
 278+ E9D6              ;;;;;;;                        and     h
 279+ E9D6              ;;;;;;;                        and     $80
 280+ E9D6              ;;;;;;;                        jr      nz,.OffScreen
 281+ E9D6              ;;;;;;;                        ClearCarryFlag
 282+ E9D6              ;;;;;;;;...dx = x1 - x0
 283+ E9D6              ;;;;;;;.CalcDeltaX:            sbc     hl,de                           ; now delta is signed, could be negative
 284+ E9D6              ;;;;;;;                        ld      (l2deltaX),hl                   ; Delta signed
 285+ E9D6              ;;;;;;;                        ld      a,h
 286+ E9D6              ;;;;;;;                        and     $80
 287+ E9D6              ;;;;;;;                        jr      nz,.LeftToRight
 288+ E9D6              ;;;;;;;.RightToLeft:           set up instrnctin
 289+ E9D6              ;;;;;;;.LeftToRight:           set up instrnctin
 290+ E9D6              ;;;;;;;.setErr:									                    ;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 291+ E9D6              ;;;;;;;,FracDYltDX:            ld		hl,(l2deltaY)					; Fraction = dY - dX
 292+ E9D6              ;;;;;;;                        ld		de,(l2deltaX)
 293+ E9D6              ;;;;;;;                        ClearCarryFlag
 294+ E9D6              ;;;;;;;                        sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 295+ E9D6              ;;;;;;;                        ex		de,hl
 296+ E9D6              ;;;;;;;                        ld		iyh,d							; we will use IY reg for fractions
 297+ E9D6              ;;;;;;;                        ld		iyl,e
 298+ E9D6              ;;;;;;;                        jp		p,.fracIsPositive
 299+ E9D6              ;;;;;;;
 300+ E9D6              ;;;;;;;plotLine(x0, y0, x1, y1)
 301+ E9D6              ;;;;;;;    dx = x1 - x0
 302+ E9D6              ;;;;;;;    dy = y1 - y0
 303+ E9D6              ;;;;;;;    D = 2*dy - dx
 304+ E9D6              ;;;;;;;    y = y0
 305+ E9D6              ;;;;;;;
 306+ E9D6              ;;;;;;;    for x from x0 to x1
 307+ E9D6              ;;;;;;;        plot(x,y)
 308+ E9D6              ;;;;;;;        if D > 0
 309+ E9D6              ;;;;;;;            y = y + 1
 310+ E9D6              ;;;;;;;            D = D - 2*dx
 311+ E9D6              ;;;;;;;        end if
 312+ E9D6              ;;;;;;;        D = D + 2*dy
 313+ E9D6              ;;;;;;;
 314+ E9D6
 315+ E9D6
 316+ E9D6
 317+ E9D6              ;;;;;.fracIsNegative:        NegIY
 318+ E9D6              ;;;;;                        ShiftIYRight1
 319+ E9D6              ;;;;;                        NegIY
 320+ E9D6              ;;;;;                        jp		.SkipCalcInc					; so we have a negative frac
 321+ E9D6              ;;;;;.fracIsPositive:        ShiftIYRight1
 322+ E9D6              ;;;;;.SkipCalcInc:		                        			    	; As we loop, bc = to plot current XY
 323+ E9D6              ;;;;;.preTargetArray:	    ld		hl,l2targetArray1               ; Assuming row 0
 324+ E9D6              ;;;;;l2S_setTarget:	        ld		(l2targetPtr),hl
 325+ E9D6              ;;;;;                                                                ; set DE to current row
 326+ E9D6              ;;;;;.S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 327+ E9D6              ;;;;;                                                                ; calculate current row
 328+ E9D6              ;;;;;                                                                ; if current row >= 0
 329+ E9D6              ;;;;;                                                                ; write current X value in DE to (hl)
 330+ E9D6              ;;;;;                        ld		a,b
 331+ E9D6              ;;;;;                        add		hl,a
 332+ E9D6              ;;;;;                        ld		(hl),c
 333+ E9D6              ;;;;;l2S_CheckIfEnd:	        ld		a,ixh
 334+ E9D6              ;;;;;                        JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 335+ E9D6              ;;;;;                        jp		l2S_Continue
 336+ E9D6              ;;;;;l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 337+ E9D6              ;;;;;                        cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 338+ E9D6              ;;;;;                        jr      z,.IncCP
 339+ E9D6              ;;;;;.DecCP:                 ld      a,c
 340+ E9D6              ;;;;;                        ReturnIfALTNusng ixl
 341+ E9D6              ;;;;;                        ReturnIfAEqNusng ixl
 342+ E9D6              ;;;;;                        jp      l2S_Continue
 343+ E9D6              ;;;;;.IncCP:                 ld		a,c
 344+ E9D6              ;;;;;                        ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 345+ E9D6              ;;;;;l2S_Continue:
 346+ E9D6              ;;;;;l2S_HNegative:			ld		a,iyh
 347+ E9D6              ;;;;;                        bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 348+ E9D6              ;;;;;                        jr		z,l2S_ErrNotNegative			;
 349+ E9D6              ;;;;;l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 350+ E9D6              ;;;;;                        ld		d,0
 351+ E9D6              ;;;;;                        ld		e,a
 352+ E9D6              ;;;;;                        add		iy,de							; add deltaY(unsinged) to l2fraction
 353+ E9D6              ;;;;;l2S_adjustCol:          nop										; this is our inc/dec of X
 354+ E9D6              ;;;;;                        jr		l2S_Loop							; repeat loop
 355+ E9D6              ;;;;;l2S_ErrNotNegative:     ld		a,iyh
 356+ E9D6              ;;;;;                        or		iyl
 357+ E9D6              ;;;;;                        JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 358+ E9D6              ;;;;;l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 359+ E9D6              ;;;;;                        ex		de,hl
 360+ E9D6              ;;;;;                        ld		d,0
 361+ E9D6              ;;;;;                        ld		a,(l2deltaX)
 362+ E9D6              ;;;;;                        ld		e,a
 363+ E9D6              ;;;;;                        ClearCarryFlag
 364+ E9D6              ;;;;;                        sbc		hl,de
 365+ E9D6              ;;;;;                        ex		de,hl
 366+ E9D6              ;;;;;                        ld      iy,de;ldiyde
 367+ E9D6              ;;;;;l2S_adjustRow:          inc		b								; move Y down by one
 368+ E9D6              ;;;;;                        jr		l2S_Loop
 369+ E9D6              ;;;;;l2S_ErrZero:            ld		hl,(l2deltaX)
 370+ E9D6              ;;;;;                        ex		de,hl
 371+ E9D6              ;;;;;                        ld		hl,(l2deltaY)
 372+ E9D6              ;;;;;                        ClearCarryFlag
 373+ E9D6              ;;;;;                        sbc		hl,de
 374+ E9D6              ;;;;;                        ex		de,hl
 375+ E9D6              ;;;;;                        ld      iy,de; ldiyde
 376+ E9D6              ;;;;;l2S_adjustCol2:         nop										; update X and Y
 377+ E9D6              ;;;;;                        inc		b
 378+ E9D6              ;;;;;                        jr		l2S_Loop
 379+ E9D6              ;;;;;
 380+ E9D6              ;;;;;.OffScreen:             SetCarryFlag
 381+ E9D6              ;;;;;                        ret
 382+ E9D6              ;;;;;
 383+ E9D6              ;;;;;
 384+ E9D6
 385+ E9D6                      IFDEF L2_DIAGONAL_SAVE
 386+ E9D6 ~            l2_draw_diagonal_save:  cp		1
 387+ E9D6 ~                                    jr		z,l2S_ItsArray1
 388+ E9D6 ~                                    ld		hl,l2targetArray2
 389+ E9D6 ~                                    jp		l2S_setTarget
 390+ E9D6 ~            l2S_ItsArray1:	        ld		hl,l2targetArray1
 391+ E9D6 ~            l2S_setTarget:	        ld		(l2targetPtr),hl
 392+ E9D6 ~            ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 393+ E9D6 ~                                    ld		(l2linecolor),a					;save colour for later
 394+ E9D6 ~                                    ld		hl,0                            ;
 395+ E9D6 ~                                    ld		(l2deltaX),hl                   ;
 396+ E9D6 ~                                    ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 397+ E9D6 ~            l2S_preSort:            ld		a,b								;
 398+ E9D6 ~                                    JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 399+ E9D6 ~            l2S_SortBasedOnY:	    ldhlbc									;
 400+ E9D6 ~                                    ex		de,hl                           ;
 401+ E9D6 ~                                    ldbchl									; swap over bc and de using hl as an intermediate
 402+ E9D6 ~            l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 403+ E9D6 ~                                    ld		ixl,e							; ixl now holds target X coord post sorting
 404+ E9D6 ~            l2S_setXLen:            ld		a,c                             ;
 405+ E9D6 ~                                    JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
 406+ E9D6 ~            l2S_NegXLen:            ld		a,c                             ;
 407+ E9D6 ~                                    sub     e                               ;
 408+ E9D6 ~                                    ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 409+ E9D6 ~                                    ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 410+ E9D6 ~                                    jr		l2S_XINCDEC
 411+ E9D6 ~            ; we set comparison
 412+ E9D6 ~            l2S_PosXLen:	        ld		a,e                             ;
 413+ E9D6 ~                                    sub		c                               ;
 414+ E9D6 ~                                    ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 415+ E9D6 ~                                    ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 416+ E9D6 ~            ; also need to fix the comparison, if its +x then compare with
 417+ E9D6 ~            l2S_XINCDEC:	        ld		(l2S_adjustCol),a				;
 418+ E9D6 ~                                    ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 419+ E9D6 ~            l2S_setYLen:            ld		a,d							 	; presorted on Y so it is now always positive
 420+ E9D6 ~                                    sub		b
 421+ E9D6 ~                                    ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 422+ E9D6 ~            l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 423+ E9D6 ~            ldS_FracDYltDX:         ld		hl,(l2deltaY)					; Fraction = dY - dX
 424+ E9D6 ~                                    ld		de,(l2deltaX)
 425+ E9D6 ~                                    ClearCarryFlag
 426+ E9D6 ~                                    sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 427+ E9D6 ~                                    ex		de,hl
 428+ E9D6 ~                                    ld		iyh,d							; we will use IY reg for fractions
 429+ E9D6 ~                                    ld		iyl,e
 430+ E9D6 ~                                    jp		p,l2S_fracIsPositive
 431+ E9D6 ~            l2S_fracIsNegative:     NegIY
 432+ E9D6 ~                                    ShiftIYRight1
 433+ E9D6 ~                                    NegIY
 434+ E9D6 ~                                    jp		l2S_SkipCalcInc					; so we have a negative frac
 435+ E9D6 ~            l2S_fracIsPositive:     ShiftIYRight1
 436+ E9D6 ~            l2S_SkipCalcInc:		                        				; As we loop, bc = to plot current XY
 437+ E9D6 ~            l2S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 438+ E9D6 ~                                    ld		a,b
 439+ E9D6 ~                                    add		hl,a
 440+ E9D6 ~                                    ld		(hl),c
 441+ E9D6 ~            l2S_CheckIfEnd:	        ld		a,ixh
 442+ E9D6 ~                                    JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 443+ E9D6 ~                                    jp		l2S_Continue
 444+ E9D6 ~            l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 445+ E9D6 ~                                    cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 446+ E9D6 ~                                    jr      z,.IncCP
 447+ E9D6 ~            .DecCP:                 ld      a,c
 448+ E9D6 ~                                    ReturnIfALTNusng ixl
 449+ E9D6 ~                                    ReturnIfAEqNusng ixl
 450+ E9D6 ~                                    jp      l2S_Continue
 451+ E9D6 ~            .IncCP:                 ld		a,c
 452+ E9D6 ~                                    ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 453+ E9D6 ~            l2S_Continue:
 454+ E9D6 ~            l2S_HNegative:			ld		a,iyh
 455+ E9D6 ~                                    bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 456+ E9D6 ~                                    jr		z,l2S_ErrNotNegative			;
 457+ E9D6 ~            l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 458+ E9D6 ~                                    ld		d,0
 459+ E9D6 ~                                    ld		e,a
 460+ E9D6 ~                                    add		iy,de							; add deltaY(unsinged) to l2fraction
 461+ E9D6 ~            l2S_adjustCol:          nop										; this is our inc/dec of X
 462+ E9D6 ~                                    jr		l2S_Loop							; repeat loop
 463+ E9D6 ~            l2S_ErrNotNegative:     ld		a,iyh
 464+ E9D6 ~                                    or		iyl
 465+ E9D6 ~                                    JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 466+ E9D6 ~            l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 467+ E9D6 ~                                    ex		de,hl
 468+ E9D6 ~                                    ld		d,0
 469+ E9D6 ~                                    ld		a,(l2deltaX)
 470+ E9D6 ~                                    ld		e,a
 471+ E9D6 ~                                    ClearCarryFlag
 472+ E9D6 ~                                    sbc		hl,de
 473+ E9D6 ~                                    ex		de,hl
 474+ E9D6 ~                                    ld      iy,de;ldiyde
 475+ E9D6 ~            l2S_adjustRow:          inc		b								; move Y down by one
 476+ E9D6 ~                                    jr		l2S_Loop
 477+ E9D6 ~            l2S_ErrZero:            ld		hl,(l2deltaX)
 478+ E9D6 ~                                    ex		de,hl
 479+ E9D6 ~                                    ld		hl,(l2deltaY)
 480+ E9D6 ~                                    ClearCarryFlag
 481+ E9D6 ~                                    sbc		hl,de
 482+ E9D6 ~                                    ex		de,hl
 483+ E9D6 ~                                    ld      iy,de; ldiyde
 484+ E9D6 ~            l2S_adjustCol2:         nop										; update X and Y
 485+ E9D6 ~                                    inc		b
 486+ E9D6 ~                                    jr		l2S_Loop
 487+ E9D6                      ENDIF
 488+ E9D6                      DEFINE  L2_DRAW_DIAGONAL 1
 489+ E9D6                      IFDEF L2_DRAW_DIAGONAL
 490+ E9D6              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 491+ E9D6 32 6C E5     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 492+ E9D9 21 00 00                             ld		hl,0                            ;
 493+ E9DC 22 64 E5                             ld		(l2deltaX),hl                   ;
 494+ E9DF 22 62 E5                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 495+ E9E2 78           l2D_preSort:            ld		a,b								;
 496+ E9E3                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 496+ E9E3 BA          >                        cp      d
 496+ E9E4 DA EC E9    >                        jp		c, l2D_noYSort
 497+ E9E7              l2D_SortBasedOnY:	    ldhlbc									;
 497+ E9E7 60          >                        ld		h,b
 497+ E9E8 69          >                        ld		l,c
 498+ E9E9 EB                                   ex		de,hl                           ;
 499+ E9EA                                      ldbchl									; swap over bc and de using hl as an intermediate
 499+ E9EA 44          >                        ld		b,h
 499+ E9EB 4D          >                        ld		c,l
 500+ E9EC DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 501+ E9EE DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 502+ E9F0 79           l2D_setXLen:            ld		a,c                             ;
 503+ E9F1                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 503+ E9F1 BB          >                        cp      e
 503+ E9F2 DA FE E9    >                        jp		c, l2D_PosXLen
 504+ E9F5 79           l2D_NegXLen:            ld		a,c                             ;
 505+ E9F6 93                                   sub     e                               ;
 506+ E9F7 32 64 E5                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 507+ E9FA 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 508+ E9FC 18 07                                jr		l2D_XINCDEC
 509+ E9FE 7B           l2D_PosXLen:	        ld		a,e                             ;
 510+ E9FF 91                                   sub		c                               ;
 511+ EA00 32 64 E5                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 512+ EA03 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 513+ EA05 32 80 EA     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 514+ EA08 32 B0 EA                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 515+ EA0B 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 516+ EA0C 90                                   sub		b
 517+ EA0D 32 62 E5                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 518+ EA10              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 519+ EA10 2A 62 E5     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 520+ EA13 ED 5B 64 E5                          ld		de,(l2deltaX)
 521+ EA17                                      ClearCarryFlag
 521+ EA17 B7          >                        or a
 522+ EA18 ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 523+ EA1A EB                                   ex		de,hl
 524+ EA1B FD 62                                ld		iyh,d							; we will use IY reg for fractions
 525+ EA1D FD 6B                                ld		iyl,e
 526+ EA1F F2 44 EA                             jp		p,l2D_fracIsPositive
 527+ EA22              l2D_fracIsNegative:     NegIY
 527+ EA22 AF          >                    xor a
 527+ EA23 FD 95       >                    sub iyl
 527+ EA25 FD 6F       >                    ld iyl,a
 527+ EA27 9F          >                    sbc a,a
 527+ EA28 FD 94       >                    sub iyh
 527+ EA2A FD 67       >                    ld iyh,a
 528+ EA2C                                      ShiftIYRight1
 528+ EA2C FD 7C       >			   ld 	a,iyh
 528+ EA2E CB 3F       >			   srl 	a
 528+ EA30 FD 67       >			   ld	iyh,a
 528+ EA32 FD 7D       >			   ld 	a,iyl
 528+ EA34 1F          >			   rra
 528+ EA35 FD 6F       >			   ld	iyl,a
 529+ EA37                                      NegIY
 529+ EA37 AF          >                    xor a
 529+ EA38 FD 95       >                    sub iyl
 529+ EA3A FD 6F       >                    ld iyl,a
 529+ EA3C 9F          >                    sbc a,a
 529+ EA3D FD 94       >                    sub iyh
 529+ EA3F FD 67       >                    ld iyh,a
 530+ EA41 C3 4F EA                             jp		l2D_SkipCalcInc					; so we have a negative frac
 531+ EA44              l2D_fracIsPositive:     ShiftIYRight1
 531+ EA44 FD 7C       >			   ld 	a,iyh
 531+ EA46 CB 3F       >			   srl 	a
 531+ EA48 FD 67       >			   ld	iyh,a
 531+ EA4A FD 7D       >			   ld 	a,iyl
 531+ EA4C 1F          >			   rra
 531+ EA4D FD 6F       >			   ld	iyl,a
 532+ EA4F              l2D_SkipCalcInc:
 533+ EA4F C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 534+ EA51 3A 6C E5                             ld		a,(l2linecolor)     			;
 535+ EA54                                      l2_plot_macro;call	l2_plot_pixel       			; Plot Pixel
 535+ EA54 78          >                        ld      a,b
 535+ EA55             >                        JumpIfAGTENusng 192 ,.NoPlot
 535+ EA55 FE C0       >                        cp     192
 535+ EA57 D2 63 EA    >                        jp		nc,.NoPlot
 535+ EA5A 69          >                        ld      l,c
 535+ EA5B CD 68 E0    >                        call    asm_l2_row_bank_select
 535+ EA5E 67          >                        ld      h,a
 535+ EA5F 3A B5 E2    >                        ld      a,(line_gfx_colour)
 535+ EA62 77          >                        ld      (hl),a
 535+ EA63             >.NoPlot:
 536+ EA63 D1 C1                                pop     bc,,de
 537+ EA65 DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 538+ EA67                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 538+ EA67 B8          >                        cp     b
 538+ EA68 D2 6E EA    >                        jp		nc,l2D_CheckXPos
 539+ EA6B C3 72 EA                             jp		l2D_Continue
 540+ EA6E 79           l2D_CheckXPos:          ld		a,c
 541+ EA6F                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 541+ EA6F DD BD       >                        cp      ixl
 541+ EA71 C8          >                        ret     z
 542+ EA72              l2D_Continue:
 543+ EA72 FD 7C        l2D_HNegative:			ld		a,iyh
 544+ EA74 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 545+ EA76 28 0B                                jr		z,l2D_ErrNotNegative			;
 546+ EA78 3A 62 E5     l2D_ErrNegative:		ld		a,(l2deltaY)
 547+ EA7B 16 00                                ld		d,0
 548+ EA7D 5F                                   ld		e,a
 549+ EA7E FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 550+ EA80 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 551+ EA81 18 CC                                jr		l2D_Loop							; repeat loop
 552+ EA83 FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 553+ EA85 FD B5                                or		iyl
 554+ EA87                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 554+ EA87 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 554+ EA88 CA A1 EA    >                        jp	    z, l2D_ErrZero
 555+ EA8B FD 54 FD 5D  l2D_ErrPositive:		ld      de,iy;lddeiy
 556+ EA8F EB                                   ex		de,hl
 557+ EA90 16 00                                ld		d,0
 558+ EA92 3A 64 E5                             ld		a,(l2deltaX)
 559+ EA95 5F                                   ld		e,a
 560+ EA96                                      ClearCarryFlag
 560+ EA96 B7          >                        or a
 561+ EA97 ED 52                                sbc		hl,de
 562+ EA99 EB                                   ex		de,hl
 563+ EA9A FD 62 FD 6B                          ld      iy,de;ldiyde
 564+ EA9E 04           l2D_adjustRow:			inc		b
 565+ EA9F 18 AE                                jr		l2D_Loop
 566+ EAA1 2A 64 E5     l2D_ErrZero:            ld		hl,(l2deltaX)
 567+ EAA4 EB                                   ex		de,hl
 568+ EAA5 2A 62 E5                             ld		hl,(l2deltaY)
 569+ EAA8                                      ClearCarryFlag
 569+ EAA8 B7          >                        or a
 570+ EAA9 ED 52                                sbc		hl,de
 571+ EAAB EB                                   ex		de,hl
 572+ EAAC FD 62 FD 6B                          ld      iy,de;ldiyde
 573+ EAB0 00           l2D_adjustCol2:         nop										; update X and Y
 574+ EAB1 04                                   inc		b
 575+ EAB2 18 9B                                jr		l2D_Loop
 576+ EAB4              ;----------------------------------------------------------------------------------------------------------------------------------
 577+ EAB4                      ENDIF
 578+ EAB4
 579+ EAB4
 580+ EAB4
 581+ EAB4              ;Loin:				; BBC version of line draw
 582+ EAB4              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 583+ EAB4              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 584+ EAB4              ;	ld		ixh,0							; ixh = s
 585+ EAB4              ;	ld		iyh,0							; iyh = swap
 586+ EAB4              ;	ld		l,0								; l will hold delta sign flags
 587+ EAB4              ;LoinCalcDeltaX:
 588+ EAB4              ;	ld		a,e
 589+ EAB4              ;	sub		c								; a = deltaX
 590+ EAB4              ;	JumpIfPositive LoinPosDx
 591+ EAB4              ;LoinNegDx:
 592+ EAB4              ;	neg										; carry flag will indicate deltaX was negative
 593+ EAB4              ;	ld		l,$80							; set bit 7 of l for negative
 594+ EAB4              ;LoinPosDx:
 595+ EAB4              ;	ld		ixl,a							; ixl = varP = deltaX
 596+ EAB4              ;LoinCalcDeltaY:
 597+ EAB4              ;	ld		a,d
 598+ EAB4              ;	sub		b								; a= deltaY
 599+ EAB4              ;	JumpIfPositive LoinPosDy
 600+ EAB4              ;LoinNegDy:
 601+ EAB4              ;	neg
 602+ EAB4              ;	set		6,l								; set bit 6 of l for negative deltaY
 603+ EAB4              ;LoinPosDy:
 604+ EAB4              ;	ld		iyl,a							; iyl = varQ = deltaY
 605+ EAB4              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 606+ EAB4              ;LoinSTPx:									; step along X
 607+ EAB4              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 608+ EAB4              ;LoinSTPxSwapCoords:
 609+ EAB4              ;	dec		iyh								; swap flag now becomes FF
 610+ EAB4              ;	ld		a,l								; save l flags
 611+ EAB4              ;	ex		de,hl							; save de to hl
 612+ EAB4              ;	lddebc									; Point2 = point1
 613+ EAB4              ;	ldbchl									; Point1 = point2 that was saved
 614+ EAB4              ;	ld		l,a								; get back l flags
 615+ EAB4              ;LoinSTPxCorrectOrder:
 616+ EAB4              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 617+ EAB4              ;	ld		a,iyl							; get delta Y back
 618+ EAB4              ;	ld		iy1,$FE							; roll counter
 619+ EAB4              ;LionSTPxRollQ:
 620+ EAB4              ;	sla		a								; highest bit of delta-Y
 621+ EAB4              ;	jp		c,LoinSTPxSteep
 622+ EAB4              ;	cp		ixl								; compare with DeltaX
 623+ EAB4              ;	jp		cs,LoinSTPxShallow
 624+ EAB4              ;LoinSTPxSteep:								;; LI4
 625+ EAB4              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 626+ EAB4              ;	scf										; force carry flag set
 627+ EAB4              ;LoinSTPxShallow:							;; LI5
 628+ EAB4              ;	rl		iyl								; rotate iyl which started as FE
 629+ EAB4              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 630+ EAB4              ;	inc		ihl								; DeltaX += 1
 631+ EAB4              ;LoinSTPxYDirection:							; change this to self modifying code
 632+ EAB4              ;	ld		a,d
 633+ EAB4              ;	JumpIfAGTEn	b,LionDOWN:
 634+ EAB4              ;	ld		a,iyh							; swap flag
 635+ EAB4              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 636+ EAB4              ;LoinSTPxX1Dec:
 637+ EAB4              ;	dec		c								; move left 1 pixel as we sawped
 638+ EAB4              ;LoinSTPxXCounter:							;; LIL2
 639+ EAB4              ;	sub		b
 640+ EAB4              ;	if
 641+ EAB4              ;
 642+ EAB4              ;85 82                   STA &82	   \ R	\ mask byte
 643+ EAB4              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 644+ EAB4              ;A2 FE                   LDX #&FE	\ roll counter
 645+ EAB4              ;86 81                   STX &81		\ Q
 646+ EAB4              ;.LIL1	\ roll Q
 647+ EAB4              ;0A                      ASL A		\ highest bit of delta-Y
 648+ EAB4              ;B0 04                   BCS LI4		\ steep
 649+ EAB4              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 650+ EAB4              ;90 03                   BCC LI5		\ shallow
 651+ EAB4              ;.LI4	\ steep
 652+ EAB4              ;E5 1B                   SBC &1B		\ P
 653+ EAB4              ;38                      SEC
 654+ EAB4              ;.LI5	\ shallow
 655+ EAB4              ;26 81                   ROL &81	   \ Q	\ #&FE
 656+ EAB4              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 657+ EAB4              ;A6 1B                   LDX &1B		\ P
 658+ EAB4              ;E8                      INX 		\ Xreg is width
 659+ EAB4              ;A5 37                   LDA &37		\ Y2
 660+ EAB4              ;E5 35                   SBC &35		\ Y1
 661+ EAB4              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 662+ EAB4              ;A5 90                   LDA &90		\ SWAP
 663+ EAB4              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 664+ EAB4              ;CA                      DEX
 665+ EAB4              ;.LIL2	\ counter X width
 666+ EAB4              ;A5 82                   LDA &82	   \ R	\ mask byte
 667+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 668+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 669+ EAB4              ;.LI6	\ Xreg correct
 670+ EAB4              ;46 82                   LSR &82	   \ R	\ mask byte
 671+ EAB4              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 672+ EAB4              ;66 82                   ROR &82		\ R
 673+ EAB4              ;A5 07                   LDA &07		\ SC
 674+ EAB4              ;69 08                   ADC #8		\ next column
 675+ EAB4              ;85 07                   STA &07		\ SC
 676+ EAB4              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 677+ EAB4              ;A5 83                   LDA &83		\ S
 678+ EAB4              ;65 81                   ADC &81	   \ Q	\ some low bits
 679+ EAB4              ;85 83                   STA &83		\ S
 680+ EAB4              ;90 07                   BCC LIC2	\ skip Y adjustment
 681+ EAB4              ;88                      DEY
 682+ EAB4              ;10 04                   BPL LIC2	\ skip Y adjustment
 683+ EAB4              ;C6 08                   DEC &08		\ SC+1
 684+ EAB4              ;A0 07                   LDY #7
 685+ EAB4              ;.LIC2	\ skip Y adjustment
 686+ EAB4              ;CA                      DEX
 687+ EAB4              ;D0 DC                   BNE LIL2	\ loop X width
 688+ EAB4              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 689+ EAB4              ;60                      RTS
 690+ EAB4              ;
 691+ EAB4              ;.DOWN	\ Line is going to the right and down
 692+ EAB4              ;A5 90                   LDA &90		\ SWAP
 693+ EAB4              ;F0 07                   BEQ LI9		\ no swap
 694+ EAB4              ;CA                      DEX
 695+ EAB4              ;.LIL3	\ counter X width
 696+ EAB4              ;A5 82                   LDA &82	    \ R \ mask byte
 697+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 698+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 699+ EAB4              ;.LI9	\ no swap
 700+ EAB4              ;46 82                   LSR &82		\ R
 701+ EAB4              ;90 08                   BCC LI10	\ still in correct column, hop
 702+ EAB4              ;66 82                   ROR &82		\ R
 703+ EAB4              ;A5 07                   LDA &07		\ SC
 704+ EAB4              ;69 08                   ADC #8		\ next column
 705+ EAB4              ;85 07                   STA &07		\ SC
 706+ EAB4              ;.LI10	\ this is like an overflow monitor to update Y
 707+ EAB4              ;A5 83                   LDA &83		\ S
 708+ EAB4              ;65 81                   ADC &81		\ Q
 709+ EAB4              ;85 83                   STA &83		\ S
 710+ EAB4              ;90 09                   BCC LIC3	\ skip Y adjustment
 711+ EAB4              ;C8                      INY
 712+ EAB4              ;C0 08                   CPY #8
 713+ EAB4              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 714+ EAB4              ;E6 08                   INC &08		\ SC+1
 715+ EAB4              ;A0 00                   LDY #0
 716+ EAB4              ;.LIC3	\ skipped Y adjustment
 717+ EAB4              ;CA                      DEX
 718+ EAB4              ;D0 DA                   BNE LIL3	\ loop X width
 719+ EAB4              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 720+ EAB4              ;60                      RTS
 721+ EAB4              ;
 722+ EAB4              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 723+ EAB4              ;A4 35                   LDY &35		\ Y1
 724+ EAB4              ;98                      TYA
 725+ EAB4              ;A6 34                   LDX &34		\ X1
 726+ EAB4              ;C4 37                   CPY &37		\ Y2
 727+ EAB4              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 728+ EAB4              ;C6 90                   DEC &90		\ SWAP
 729+ EAB4              ;A5 36                   LDA &36		\ X2
 730+ EAB4              ;85 34                   STA &34		\ X1
 731+ EAB4              ;86 36                   STX &36		\ X2
 732+ EAB4              ;AA                      TAX
 733+ EAB4              ;A5 37                   LDA &37		\ Y2
 734+ EAB4              ;85 35                   STA &35		\ Y1
 735+ EAB4              ;84 37                   STY &37		\ Y2
 736+ EAB4              ;A8                      TAY
 737+ EAB4              ;.LI15	\ Y1 Y2 order is now correct
 738+ EAB4              ;4A                      LSR A
 739+ EAB4              ;4A                      LSR A
 740+ EAB4              ;4A                      LSR A
 741+ EAB4              ;09 60                   ORA #&60
 742+ EAB4              ;85 08                   STA &08	 \ SC+1	\ screen hi
 743+ EAB4              ;8A                      TXA 		\ X1
 744+ EAB4              ;29 F8                   AND #&F8
 745+ EAB4              ;85 07                   STA &07	  \ SC	\ screen lo
 746+ EAB4              ;8A                      TXA
 747+ EAB4              ;29 07                   AND #7		\ mask index
 748+ EAB4              ;AA                      TAX
 749+ EAB4              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 750+ EAB4              ;85 82                   STA &82	    \ R	\ mask
 751+ EAB4              ;A5 35                   LDA &35		\ Y1
 752+ EAB4              ;29 07                   AND #7
 753+ EAB4              ;A8                      TAY
 754+ EAB4              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 755+ EAB4              ;A2 01                   LDX #1		\ roll counter
 756+ EAB4              ;86 1B                   STX &1B	    	\ P
 757+ EAB4              ;.LIL4	\ roll P
 758+ EAB4              ;0A                      ASL A
 759+ EAB4              ;B0 04                   BCS LI13	\ do subtraction
 760+ EAB4              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 761+ EAB4              ;90 03                   BCC LI14	\ less than Q
 762+ EAB4              ;.LI13	\ do subtraction
 763+ EAB4              ;E5 81                   SBC &81		\ Q
 764+ EAB4              ;38                      SEC
 765+ EAB4              ;.LI14	\ less than Q
 766+ EAB4              ;26 1B                   ROL &1B		\ P
 767+ EAB4              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 768+ EAB4              ;A6 81                   LDX &81		\ Q
 769+ EAB4              ;E8                      INX 		\ adjust height
 770+ EAB4              ;A5 36                   LDA &36		\ X2
 771+ EAB4              ;E5 34                   SBC &34		\ X1
 772+ EAB4              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 773+ EAB4              ;18                      CLC
 774+ EAB4              ;A5 90                   LDA &90		\ SWAP
 775+ EAB4              ;F0 07                   BEQ LI17 	\ skip first point
 776+ EAB4              ;CA                      DEX
 777+ EAB4              ;.LIL5	\ skipped first point, counter X
 778+ EAB4              ;A5 82                   LDA &82	    \ R \ mask byte
 779+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 780+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 781+ EAB4              ;.LI17	\ skipped first point
 782+ EAB4              ;88                      DEY
 783+ EAB4              ;10 04                   BPL LI16	\ skip hi adjust
 784+ EAB4              ;C6 08                   DEC &08		\ SC+1
 785+ EAB4              ;A0 07                   LDY #7		\ new char
 786+ EAB4              ;	.LI16	\ skipped hi adjust
 787+ EAB4              ;A5 83                   LDA &83		\ S
 788+ EAB4              ;65 1B                   ADC &1B		\ P
 789+ EAB4              ;85 83                   STA &83		\ S
 790+ EAB4              ;90 0C                   BCC LIC5	\ skip, still in same column
 791+ EAB4              ;46 82                   LSR &82	  \ R	\ mask
 792+ EAB4              ;90 08                   BCC LIC5  	\ no mask bit hop
 793+ EAB4              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 794+ EAB4              ;A5 07                   LDA &07	  \ SC  \ screen lo
 795+ EAB4              ;69 08                   ADC #8		\ next char below
 796+ EAB4              ;85 07                   STA &07		\ SC
 797+ EAB4              ;.LIC5	\ same column
 798+ EAB4              ;CA                      DEX
 799+ EAB4              ;D0 DC                   BNE LIL5	\ loop X height
 800+ EAB4              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 801+ EAB4              ;60                      RTS
 802+ EAB4              ;
 803+ EAB4              ;.LFT	\ going left
 804+ EAB4              ;A5 90                   LDA &90		\ SWAP
 805+ EAB4              ;F0 07                   BEQ LI18	\ skip first point
 806+ EAB4              ;CA                      DEX 		\ reduce height
 807+ EAB4              ;.LIL6	\ counter X height
 808+ EAB4              ;A5 82                   LDA &82	   \ R	\ mask byte
 809+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 810+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 811+ EAB4              ;.LI18
 812+ EAB4              ;88                      DEY
 813+ EAB4              ;10 04                   BPL LI19	\ skip hi adjust
 814+ EAB4              ;C6 08                   DEC &08		\ SC+1
 815+ EAB4              ;A0 07                   LDY #7		\ rest char row
 816+ EAB4              ;.LI19	\ skipped hi adjust
 817+ EAB4              ;A5 83                   LDA &83		\ S
 818+ EAB4              ;65 1B                   ADC &1B	    \ P \ some low bits
 819+ EAB4              ;85 83                   STA &83		\ S
 820+ EAB4              ;90 0D                   BCC LIC6	\ no overflow
 821+ EAB4              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 822+ EAB4              ;90 09                   BCC LIC6	\ no overflow
 823+ EAB4              ;26 82                   ROL &82		\ R
 824+ EAB4              ;A5 07                   LDA &07		\ SC
 825+ EAB4              ;E9 07                   SBC #7		\ down 1 char
 826+ EAB4              ;85 07                   STA &07		\ SC
 827+ EAB4              ;18                      CLC
 828+ EAB4              ;.LIC6	\ no overflow
 829+ EAB4              ;CA                      DEX 		\ height
 830+ EAB4              ;D0 DB                   BNE LIL6	\ loop X
 831+ EAB4              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 832+ EAB4              ;.HL6
 833+ EAB4              ;60                      RTS 		\ end Line drawing
 834+ EAB4
 835+ EAB4
 836+ EAB4              ;;l2_draw_diagonalopt:
 837+ EAB4                              DISPLAY "TODO: optimisation"
 838+ EAB4              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 839+ EAB4              ;;	push	af
 840+ EAB4              ;;	ld		a,b
 841+ EAB4              ;;	cp		d
 842+ EAB4              ;;	jr		z,.RegularDiagnonal
 843+ EAB4              ;;.CheckHorz:
 844+ EAB4              ;;	ld		a,c
 845+ EAB4              ;;	cp		e
 846+ EAB4              ;;	jr		z,.horizontalLine
 847+ EAB4              ;;.RegularDiagnonal:
 848+ EAB4              ;;	pop		af
 849+ EAB4              ;;	call diag
 850+ EAB4
 851+ EAB4
 852+ EAB4              ;;l2_signed_mul2a:
 853+ EAB4              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 854+ EAB4              ;;	TEST	$80
 855+ EAB4              ;;	jr		nz, .negativecalc
 856+ EAB4              ;;.positivecalc:
 857+ EAB4              ;;	ccf
 858+ EAB4              ;;	rla
 859+ EAB4              ;;	ret
 860+ EAB4              ;;.negativecalc:
 861+ EAB4              ;;	neg
 862+ EAB4              ;;	ccf
 863+ EAB4              ;;	rla
 864+ EAB4              ;;	neg
 865+ EAB4              ;;	ret
 866+ EAB4              ;;
 867+ EAB4              ;;l2_signed_mul2atohl:
 868+ EAB4              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 869+ EAB4              ;;	TEST	$80
 870+ EAB4              ;;	jr		nz, .negativecalc
 871+ EAB4              ;;.positivecalc:
 872+ EAB4              ;;	ld		hl,0
 873+ EAB4              ;;	ld		l,a
 874+ EAB4              ;;	add		hl,a
 875+ EAB4              ;;	ret
 876+ EAB4              ;;.negativecalc:
 877+ EAB4              ;;	neg
 878+ EAB4              ;;	ld		hl,0
 879+ EAB4              ;;	ld		l,a
 880+ EAB4              ;;	neghl
 881+ EAB4              ;;	ret
 882+ EAB4              ;;
 883+ EAB4              ;;l2_e2fractionby2:
 884+ EAB4              ;;	ld 		hl,(l2fraction)
 885+ EAB4              ;;	push	de
 886+ EAB4              ;;	ld		d,h
 887+ EAB4              ;;	ld		e,l
 888+ EAB4              ;;	add		hl,de
 889+ EAB4              ;;	pop		de
 890+ EAB4              ;;	ld		(l2e2),hl
 891+ EAB4              ;;	ret
 892+ EAB4
 893+ EAB4
 894+ EAB4
 895+ EAB4
 896+ EAB4
 897+ EAB4              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 898+ EAB4              ;;//.catchLoop:
 899+ EAB4              ;;//	jp .catchLoop
 900+ EAB4              ;;//.continue:
 901+ EAB4              ;;//    ld      A,D
 902+ EAB4              ;;//    sub     H
 903+ EAB4              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 904+ EAB4              ;;//.DXNegative:
 905+ EAB4              ;;//    neg
 906+ EAB4              ;;//.DXPositive:
 907+ EAB4              ;;//    ld      B,A              ;B <- |delta_x|
 908+ EAB4              ;;//    ld      A,E
 909+ EAB4              ;;//    sub     L
 910+ EAB4              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 911+ EAB4              ;;//.DYNegative:
 912+ EAB4              ;;//    neg
 913+ EAB4              ;;//.DYPositive:
 914+ EAB4              ;;//    sub     B               ;|delta_y|
 915+ EAB4              ;;//	push	af
 916+ EAB4              ;;//	jr		c,.DeltaX
 917+ EAB4              ;;//.DeltaY
 918+ EAB4              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 919+ EAB4              ;;//    ld      H,L             			;then values x and y are swapped
 920+ EAB4              ;;//    ld      L,A             			;so the loop will always be performed on the
 921+ EAB4              ;;//    ld      A,D             			;x value. A flag must be set to
 922+ EAB4              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 923+ EAB4              ;;//    ld      E,A             			;instead of (x,y)
 924+ EAB4              ;;//.DeltaX:
 925+ EAB4              ;;//	ld		a,d
 926+ EAB4              ;;//	sub		h
 927+ EAB4              ;;//	jr		nc,.TestDY					; x1 < x2
 928+ EAB4              ;;//.TestDX:
 929+ EAB4              ;;//	ex		de,hl
 930+ EAB4              ;;//.TestDY:
 931+ EAB4              ;;//	ld		a,e
 932+ EAB4              ;;//	sub		l
 933+ EAB4              ;;//    ld      A,$01
 934+ EAB4              ;;//    jr      NC,.StoreA
 935+ EAB4              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 936+ EAB4              ;;//.StoreA:
 937+ EAB4              ;;//        ld      (l2way),A
 938+ EAB4              ;;//.InitLine:
 939+ EAB4              ;;//        ld      B,H
 940+ EAB4              ;;//        ld      C,L
 941+ EAB4              ;;//        ld      A,E
 942+ EAB4              ;;//        sub     L
 943+ EAB4              ;;//        jr      NC,.EndInit
 944+ EAB4              ;;//        ld      A,L
 945+ EAB4              ;;//        ld      L,E
 946+ EAB4              ;;//        ld      E,A
 947+ EAB4              ;;//.EndInit:
 948+ EAB4              ;;//        ld      A,E
 949+ EAB4              ;;//        sub     L
 950+ EAB4              ;;//        rla
 951+ EAB4              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 952+ EAB4              ;;//        add     A,H
 953+ EAB4              ;;//        sub     D
 954+ EAB4              ;;//        ld      E,A             ;'d' variable is initialised
 955+ EAB4              ;;//        add     A,H
 956+ EAB4              ;;//        sub     D
 957+ EAB4              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 958+ EAB4              ;;//.Loop:
 959+ EAB4              ;;//        ld      A,B
 960+ EAB4              ;;//        sub     D
 961+ EAB4              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 962+ EAB4              ;;//        pop     AF
 963+ EAB4              ;;//        bit     7,A
 964+ EAB4              ;;//        push    AF
 965+ EAB4              ;;//        push    AF
 966+ EAB4              ;;//        push    BC
 967+ EAB4              ;;//        jr      Z,.DrawPoint
 968+ EAB4              ;;//        ld      A,B
 969+ EAB4              ;;//        ld      B,C
 970+ EAB4              ;;//        ld      C,A
 971+ EAB4              ;;//.DrawPoint:
 972+ EAB4              ;;//		push	hl
 973+ EAB4              ;;//		pushbcdeaf
 974+ EAB4              ;;//		ld		b,e
 975+ EAB4              ;;//		ld		c,d
 976+ EAB4              ;;//	ld 		a,(l2linecolor)
 977+ EAB4              ;;//	call	l2_plot_pixel
 978+ EAB4              ;;//		popafdebc
 979+ EAB4              ;;//		pop		hl
 980+ EAB4              ;;//        pop     BC
 981+ EAB4              ;;//        pop     AF
 982+ EAB4              ;;//.TestD:
 983+ EAB4              ;;//        bit     7,E
 984+ EAB4              ;;//        jr      NZ,.Case1
 985+ EAB4              ;;//.Case2:                          ;d >= 0
 986+ EAB4              ;;//        ld      A,E
 987+ EAB4              ;;//        add     A,H
 988+ EAB4              ;;//        ld      E,A
 989+ EAB4              ;;//        ld      A,(l2way)
 990+ EAB4              ;;//        add     A,C
 991+ EAB4              ;;//        ld      C,A
 992+ EAB4              ;;//        jr      .EndLoop
 993+ EAB4              ;;//.Case1:                          ;d < 0
 994+ EAB4              ;;//        ld      A,E
 995+ EAB4              ;;//        add     A,L
 996+ EAB4              ;;//        ld      E,A
 997+ EAB4              ;;//.EndLoop:
 998+ EAB4              ;;//        inc     B
 999+ EAB4              ;;//        jr      .Loop
1000+ EAB4              ;;//.EndLine:
1001+ EAB4              ;;//        pop     AF              ;MUST NOT BE REMOVED
1002+ EAB4              ;;//        pop     HL              ;can be removed
1003+ EAB4              ;;//        pop     DE              ;can be removed
1004+ EAB4              ;;//        ret
1005+ EAB4
1006+ EAB4              ;;	ld		(.l2yadjust),a
1007+ EAB4              ;;	call	calcdeltax:
1008+ EAB4              ;;	ld		(.l2xadjust),a
1009+ EAB4              ;;.calcfraction:							; err(or fraction) = dx+dy;
1010+ EAB4              ;;	push	hl
1011+ EAB4              ;;	push	de
1012+ EAB4              ;;	ld		hl,(l2deltaX)
1013+ EAB4              ;;	ld		de,(l2deltaY)
1014+ EAB4              ;;	add		hl,de
1015+ EAB4              ;;	ld		(l2fraction),hl
1016+ EAB4              ;;	pop		de
1017+ EAB4              ;;	pop		hl
1018+ EAB4              ;;.mainloop:
1019+ EAB4              ;;	push	bc
1020+ EAB4              ;;	push	de
1021+ EAB4              ;;	ld 		a,(l2linecolor)
1022+ EAB4              ;;	call	l2_plot_pixel
1023+ EAB4              ;;	pop		de
1024+ EAB4              ;;	pop		bc
1025+ EAB4              ;;.arewefinishedtest
1026+ EAB4              ;;	ld		a,b
1027+ EAB4              ;;	cp		d
1028+ EAB4              ;;	jr		nz,.notthereyet
1029+ EAB4              ;;	ld		a,c
1030+ EAB4              ;;	cp		e
1031+ EAB4              ;;	ret		z
1032+ EAB4              ;;.notthereyet:
1033+ EAB4              ;;	push	de
1034+ EAB4              ;;	call	l2_e2fractionby2			; e2 = 2*err;
1035+ EAB4              ;;	pop		de
1036+ EAB4              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
1037+ EAB4              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
1038+ EAB4              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
1039+ EAB4              ;;	or		a							;
1040+ EAB4              ;;	sbc		hl,de						;
1041+ EAB4              ;;	pop		de
1042+ EAB4              ;;	jr		z,  .dodycalc				; if equal then calc
1043+ EAB4              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
1044+ EAB4              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
1045+ EAB4              ;;.dodycalc:
1046+ EAB4              ;;	ld		hl,(l2fraction)
1047+ EAB4              ;;	push	de
1048+ EAB4              ;;	ld		de,(l2deltaY)
1049+ EAB4              ;;	add		hl,de
1050+ EAB4              ;;	ld		(l2fraction),de
1051+ EAB4              ;;	pop		de
1052+ EAB4              ;;.l2yadjust:
1053+ EAB4              ;;	nop
1054+ EAB4              ;;.skipdycalc:
1055+ EAB4              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
1056+ EAB4              ;;	ld		hl,(l2e2)
1057+ EAB4              ;;	push	de							;
1058+ EAB4              ;;	ld		de,(l2deltaX)				;
1059+ EAB4              ;;	or		a							; clear carry flag
1060+ EAB4              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
1061+ EAB4              ;;	pop		de
1062+ EAB4              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
1063+ EAB4              ;;	jp		m,.dodxcalc					; was sign bit set
1064+ EAB4              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
1065+ EAB4              ;;.dodxcalc:
1066+ EAB4              ;;	ld		hl,(l2fraction)
1067+ EAB4              ;;	push	de
1068+ EAB4              ;;	ld		de,(l2deltaX)
1069+ EAB4              ;;	add		hl,de
1070+ EAB4              ;;	ld		(l2fraction),de
1071+ EAB4              ;;	pop		de
1072+ EAB4              ;;.l2xadjust:
1073+ EAB4              ;;	nop
1074+ EAB4              ;;.skipdxcalc:
1075+ EAB4              ;;	jr 		.mainloop
1076+ EAB4
1077+ EAB4
1078+ EAB4              ;;/l2_draw_diagonalold:
1079+ EAB4              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
1080+ EAB4              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
1081+ EAB4              ;;/.sortycoords:
1082+ EAB4              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
1083+ EAB4              ;;/	cp		d
1084+ EAB4              ;;/	jr		nc, .nocoordswap
1085+ EAB4              ;;/.swapcoords:
1086+ EAB4              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
1087+ EAB4              ;;/	lddebc
1088+ EAB4              ;;/	ldbchl
1089+ EAB4              ;;/.nocoordswap:
1090+ EAB4              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
1091+ EAB4              ;;/	sub		b							; we have already sorted  so y1 > y0
1092+ EAB4              ;;/	ld		(l2deltaY),a
1093+ EAB4              ;;/	neg									; DEBUG
1094+ EAB4              ;;/	ld		(l2deltaYn),a				; DEBUG
1095+ EAB4              ;;/	neg									; DEBUG
1096+ EAB4              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
1097+ EAB4              ;;/    ld		a,c
1098+ EAB4              ;;/	cp		e
1099+ EAB4              ;;/	jr		c, .x1GTx0
1100+ EAB4              ;;/.x1LTx0
1101+ EAB4              ;;/	ld		a,c
1102+ EAB4              ;;/	sub		e
1103+ EAB4              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
1104+ EAB4              ;;/	neg									; DEBUG
1105+ EAB4              ;;/	ld		(l2deltaXn),a				; DEBUG
1106+ EAB4              ;;/	neg									; DEBUG
1107+ EAB4              ;;/	ld		a,l2incbstep
1108+ EAB4              ;;/	jr		.setlayershift0
1109+ EAB4              ;;/.x1GTx0:
1110+ EAB4              ;;/	ld		a,e
1111+ EAB4              ;;/	sub		c
1112+ EAB4              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
1113+ EAB4              ;;/	neg									; DEBUG
1114+ EAB4              ;;/	ld		(l2deltaXn),a				; DEBUG
1115+ EAB4              ;;/	neg									; DEBUG
1116+ EAB4              ;;/	ld		a,l2decbstep
1117+ EAB4              ;;/.setlayershift0:
1118+ EAB4              ;;/	ld		a,0
1119+ EAB4              ;;/	pushbcde
1120+ EAB4              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
1121+ EAB4              ;;/	popdebc
1122+ EAB4              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
1123+ EAB4              ;;/.dymuliplyby2:
1124+ EAB4              ;;/	ld		a, (l2deltaY)				; dy *= 2
1125+ EAB4              ;;/	call	l2_signed_mul2a
1126+ EAB4              ;;/	ld		(l2deltaYsq),a
1127+ EAB4              ;;/	neg									; DEBUG
1128+ EAB4              ;;/	ld		(l2deltaYsqn),a				; DEBUG
1129+ EAB4              ;;/	neg									; DEBUG
1130+ EAB4              ;;/.dxmuliplyby2:
1131+ EAB4              ;;/	ld		a, (l2deltaX)				; dx *= 2
1132+ EAB4              ;;/	call	l2_signed_mul2a
1133+ EAB4              ;;/	ld		(l2deltaXsq),a
1134+ EAB4              ;;/	neg									; DEBUG
1135+ EAB4              ;;/	ld		(l2deltaXsqn),a				; DEBUG
1136+ EAB4              ;;/	neg									; DEBUG
1137+ EAB4              ;;/.plotfirstpixel:
1138+ EAB4              ;;/	pushbcde
1139+ EAB4              ;;/	ld a,(l2linecolor)
1140+ EAB4              ;;/	call	l2_plot_pixel
1141+ EAB4              ;;/	popdebc
1142+ EAB4              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
1143+ EAB4              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
1144+ EAB4              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
1145+ EAB4              ;;/	cp		(hl)
1146+ EAB4              ;;/	jp		m,	.signset
1147+ EAB4              ;;/.signclear:
1148+ EAB4              ;;/	jp		pe,	.dxLTEdybranch
1149+ EAB4              ;;/	jr		.dxGTdybranch
1150+ EAB4              ;;/.signset:
1151+ EAB4              ;;/	jp		po,	.dxLTEdybranch
1152+ EAB4              ;;/.dxGTdybranch:
1153+ EAB4              ;;/	ld		a,(l2deltaYsq)
1154+ EAB4              ;;/	ld		hl,l2deltaX
1155+ EAB4              ;;/	sub		(hl)
1156+ EAB4              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
1157+ EAB4              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
1158+ EAB4              ;;/	ld		a,c
1159+ EAB4              ;;/	cp		e
1160+ EAB4              ;;/	ret		z							; if x0 = x1 then done
1161+ EAB4              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
1162+ EAB4              ;;/	ld		a,(l2fraction)
1163+ EAB4              ;;/	TEST	$80
1164+ EAB4              ;;/	jr		nz,.BranchAskipYstep
1165+ EAB4              ;;/	inc		b							; 		++l2_vy0;
1166+ EAB4              ;;/	ld		hl,l2deltaXsq
1167+ EAB4              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
1168+ EAB4              ;;/	ld		(l2fraction),a
1169+ EAB4              ;;/.BranchAskipYstep:
1170+ EAB4              ;;/.l2stepx1:
1171+ EAB4              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
1172+ EAB4              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
1173+ EAB4              ;;/	ld		hl,l2deltaYsq
1174+ EAB4              ;;/	add		a,(hl)
1175+ EAB4              ;;/	ld		(l2fraction),a
1176+ EAB4              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
1177+ EAB4              ;;/	pushbcde
1178+ EAB4              ;;/	ld a,(l2linecolor)
1179+ EAB4              ;;/	call	l2_plot_pixel
1180+ EAB4              ;;/	popdebc
1181+ EAB4              ;;/.BranchAloop:
1182+ EAB4              ;;/	jr		.BranchAwhile
1183+ EAB4              ;;/.dxLTEdybranch:
1184+ EAB4              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
1185+ EAB4              ;;/	ld		hl, l2deltaY
1186+ EAB4              ;;/	sub		(hl)
1187+ EAB4              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
1188+ EAB4              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
1189+ EAB4              ;;/	ld		a,b
1190+ EAB4              ;;/	cp		d
1191+ EAB4              ;;/	ret		z							; if x0 = x1 then done
1192+ EAB4              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
1193+ EAB4              ;;/	ld		a,(l2fraction)
1194+ EAB4              ;;/	TEST	$80
1195+ EAB4              ;;/	jr		nz,.BranchBskipYstep
1196+ EAB4              ;;/.l2stepx2
1197+ EAB4              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
1198+ EAB4              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
1199+ EAB4              ;;/	ld		hl,l2deltaYsq
1200+ EAB4              ;;/	sub		(hl)
1201+ EAB4              ;;/	ld		(l2fraction),a
1202+ EAB4              ;;/.BranchBskipYstep:
1203+ EAB4              ;;/	ld		hl, l2deltaYsq
1204+ EAB4              ;;/	add		a,(hl)
1205+ EAB4              ;;/	ld		(l2fraction),a
1206+ EAB4              ;;/	inc		b							; ++l2_vy0;
1207+ EAB4              ;;/.BranchBplotBCColA:
1208+ EAB4              ;;/	pushbcde
1209+ EAB4              ;;/	ld a,(l2linecolor)
1210+ EAB4              ;;/	call	l2_plot_pixel
1211+ EAB4              ;;/	popdebc
1212+ EAB4              ;;/.BranchBloop:
1213+ EAB4              ;;/	jr		.BranchBwhile
1214+ EAB4
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1402  EAB4              ;    INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
1403  EAB4              ;    INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
1404  EAB4              ;    INCLUDE "./Layer2Graphics/L2_SolidTriangles.asm"
1405  EAB4                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ EAB4
   2+ EAB4 00 00        l2_circle_pos		DW 0
   3+ EAB6 00           l2_circle_colour	DB 0
   4+ EAB7 00           l2_circle_radius	DB 0
   5+ EAB8 00           l2_circle_x			DB 0
   6+ EAB9 00           l2_circle_y			DB 0
   7+ EABA 00           l2_circle_d			DB 0
   8+ EABB
   9+ EABB 00 00 00...  l2_circle_xHeap 	DS 2*66
  10+ EB3F 00 00 00...  l2_circle_yHeap     DS 2*66
  11+ EBC3 00           l2_circle_heap_size DB 0
  12+ EBC4 00 00        l2_circle_clip_y    DW 0
  13+ EBC6 00 00        l2_circle_clip_x    DW 0
  14+ EBC8 00           l2_circle_flag      DB 0
  15+ EBC9 00           l2_circle_counter   DB 0
  16+ EBCA              ;Sine table
  17+ EBCA              ;FOR I%, 0, 31
  18+ EBCA              ;
  19+ EBCA              ; N = ABS(SIN((I% / 64) * 2 * PI))
  20+ EBCA              ;
  21+ EBCA              ; IF N >= 1
  22+ EBCA              ;  EQUB 255
  23+ EBCA              ; ELSE
  24+ EBCA              ;  EQUB INT(256 * N + 0.5)
  25+ EBCA              ; ENDIF
  26+ EBCA              ;
  27+ EBCA              ;NEXT
  28+ EBCA              ;---------------------------------------------------------------------------------------------------------------------------------
  29+ EBCA              ; in HL = xPixelPos, DE = yPixelPos, A = Radius
  30+ EBCA              ;IFDEF   CIRCLE2
  31+ EBCA              ;;;;+l2_circle_clipped:	ld		(l2_circle_radius),a
  32+ EBCA              ;;;;+					ld		(l2_circle_clip_y),de
  33+ EBCA              ;;;;+					ld		(l2_circle_clip_x),hl
  34+ EBCA              ;;;;+					ZeroA
  35+ EBCA              ;;;;+					ld		(l2_circle_heap_size),a
  36+ EBCA              ;;;;+					ld		(l2_circle_counter),a
  37+ EBCA              ;;;;+					dec		a
  38+ EBCA              ;;;;+					ld		(l2_circle_flag),a
  39+ EBCA              ;;;;+.CircleLoop:		call	SinCounter						; a = sin (counter) * 256
  40+ EBCA              ;;;;+					ld		d,a
  41+ EBCA              ;;;;+					ld		a,(l2_circle_radius)
  42+ EBCA              ;;;;+					ld		e,a
  43+ EBCA              ;;;;+					mul										; de = k * sin (counter) so d = k * sin (counter) / 256
  44+ EBCA              ;;;;+					ld		e,d								; using de as TA
  45+ EBCA              ;;;;+					ld		d,0
  46+ EBCA              ;;;;+					ld		a,(l2_circle_counter)
  47+ EBCA              ;;;;+					JumpIfALTNusng 33,.RightHalf
  48+ EBCA              ;;;;+.LeftHalf:			NegateDE								; if >= 33 then DE = de * -1 (2's c)
  49+ EBCA              ;;;;+					K6 = de + l2_circle_clip_x
  50+ EBCA              ;;;;+					call	CosCounter
  51+ EBCA              ;;;;+					ld		d,a
  52+ EBCA              ;;;;+					ld		a,(l2_circla_radius)
  53+ EBCA              ;;;;+					mul		de
  54+ EBCA              ;;;;+					ld		e,d
  55+ EBCA              ;;;;+					ld		d,0
  56+ EBCA              ;;;;+					a 		= l2_counter + 15 mod 64
  57+ EBCA              ;;;;+					JumpIfALTNusng	33, .BottomHalf
  58+ EBCA              ;;;;+.TopHalf:			NegateDE
  59+ EBCA              ;;;;+					K62 = de + l2_circle_clip_y
  60+ EBCA              ;;;;+					ld		a,(l2_circle_flag)
  61+ EBCA              ;;;;+					JumpIfAIsZZero		.SkipFlagUpdate
  62+ EBCA              ;;;;+					inc		a
  63+ EBCA              ;;;;+					ld		(l2_circle_flag),a
  64+ EBCA              ;;;;+.SkipFlagUpdate:
  65+ EBCA              ;;;;+
  66+ EBCA              ;;;;+                X = K * SIN (CNT + 16) (i.e X = K * COS (CNT)
  67+ EBCA              ;;;;+                A = (CNT + 15) mod 64
  68+ EBCA              ;;;;+                if  A >= 33     ; top half of circle
  69+ EBCA              ;;;;+                    X = neg X
  70+ EBCA              ;;;;+                    T = negative
  71+ EBCA              ;;;;+                call    Bline (draw segment)
  72+ EBCA              ;;;;+                        K6(32) = TX + K4(10) = y corrc of center + new point
  73+ EBCA              ;;;;+                        if flag <> 0
  74+ EBCA              ;;;;+                            flag ++ (as flag initially will be $FF so go to 0)
  75+ EBCA              ;;;;+                        BL5:
  76+ EBCA              ;;;;+                        if LSY2[LSP-1] <> $FF and LSY2 [LSP1] <> $FF    (BL5)
  77+ EBCA              ;;;;+                            X15 [0 1] = K5(10)                      (BL1)
  78+ EBCA              ;;;;+                            X15 [2 3] = K5(32)
  79+ EBCA              ;;;;+                            X15 [4 5] = K6(10)
  80+ EBCA              ;;;;+                            X15 [6 7] = K6(32)
  81+ EBCA              ;;;;+                            call clip X1Y1 to X2Y2
  82+ EBCA              ;;;;+                            if Line off scren goto BL5
  83+ EBCA              ;;;;+                            IF swap <> 0
  84+ EBCA              ;;;;+                                swap X1Y1 with X2Y2
  85+ EBCA              ;;;;+                            Y = LAP                                 (BL9)
  86+ EBCA              ;;;;+                            A = LSY2-1 [Y]
  87+ EBCA              ;;;;+                            if A = $FF
  88+ EBCA              ;;;;+                                LSX2[Y] = X1
  89+ EBCA              ;;;;+                                LSY2[Y] = Y1
  90+ EBCA              ;;;;+                                Y++
  91+ EBCA              ;;;;+
  92+ EBCA              ;;;;+                            Store X2 in LSX2(Y)                     (BL8)
  93+ EBCA              ;;;;+                            Store Y2 in lSY2(y)
  94+ EBCA              ;;;;+                            call    DrawLine from (X1 Y1 to X2 Y2)
  95+ EBCA              ;;;;+                            if  XX13 <> 0 goto BL5
  96+ EBCA              ;;;;+                                                                (BL7)
  97+ EBCA              ;;;;+                        Copy data for K6(3210) into K5(3210) for next call (K5(10) = x  K5(32) = y)
  98+ EBCA              ;;;;+                        CNT = CNT + STP
  99+ EBCA              ;;;;+            while CNT < 65
 100+ EBCA              ;ENDIF
 101+ EBCA
 102+ EBCA              ; ix = x Position, iy = y position, d = radius in Leading sign magnitude
 103+ EBCA
 104+ EBCA              ;EliteCheckOnSM:     ld
 105+ EBCA              ;; ix = x Position, iy = y position, d = radius in 2's compliment
 106+ EBCA              ;;EliteCheckOn2c:
 107+ EBCA              ;;.CheckXOffLeft:     ld      hl,ix               ; if x position + radius is < 0 then its off screen
 108+ EBCA              ;;                    ld      c,d                 ; use c as a temporary holding
 109+ EBCA              ;;                    ld      d,0                 ;
 110+ EBCA              ;;                    ld      e,c                 ;
 111+ EBCA              ;;                    ClearCarryFlag              ;
 112+ EBCA              ;;                    adc     hl,de               ;
 113+ EBCA              ;;                    jp      m, .NotOnScreen     ;
 114+ EBCA              ;;.CheckXOffRight:    ld      hl,ix               ; if x position - radius > 255 then its off screen
 115+ EBCA              ;;                    ClearCarryFlag              ;
 116+ EBCA              ;;                    sbc     hl,de               ;
 117+ EBCA              ;;                    ld      a,h                 ;
 118+ EBCA              ;;                    and     a
 119+ EBCA              ;;                    jp      nz,.NotOnScreen
 120+ EBCA              ;;.CheckXOffLeft:     ld      hl,iy               ; if y position + radius is < 0 then its off screen
 121+ EBCA              ;;                    ld      c,d                 ; use c as a temporary holding
 122+ EBCA              ;;                    ld      d,0                 ;
 123+ EBCA              ;;                    ld      e,c                 ;
 124+ EBCA              ;;                    ClearCarryFlag              ;
 125+ EBCA              ;;                    adc     hl,de               ;
 126+ EBCA              ;;                    jp      m, .NotOnScreen     ;
 127+ EBCA              ;;.CheckXOffRight:    ld      hl,iy               ; if y position - radius > 255 then its off screen
 128+ EBCA              ;;                    ClearCarryFlag              ; if y position - radius > 127 then also off screen
 129+ EBCA              ;;                    sbc     hl,de               ;
 130+ EBCA              ;;                    ld      a,h                 ;
 131+ EBCA              ;;                    and     a                   ;
 132+ EBCA              ;;                    jp      nz,.NotOnScreen     ;
 133+ EBCA              ;;                    ld      a,l                 ;
 134+ EBCA              ;;                    and     $80                 ;
 135+ EBCA              ;;                    jp      nz,.NotOnScreen     ;
 136+ EBCA              ;;.OnScreen:          ClearCarryFlag
 137+ EBCA              ;;                    ret
 138+ EBCA              ;;.NotOnScreen:       SetCarryFlag
 139+ EBCA              ;;                    ret
 140+ EBCA
 141+ EBCA
 142+ EBCA              ;;CircleRadius        DB      0
 143+ EBCA              ;;CircleStep          DB      0
 144+ EBCA              ;;CircleFlag          DB      0
 145+ EBCA              ;;CircleCounter       DB      0
 146+ EBCA              ;;; EliteCircle, uses lines as per original elite
 147+ EBCA              ;;; ix = x Position, iy = y position, d = radius, e = colour x and y are 2's compliment not leading sign
 148+ EBCA              ;;EliteCircle:        push    de                      ; save radius
 149+ EBCA              ;;                    call    EliteCheckOn2c          ; if its off screen carry will be set to
 150+ EBCA              ;;                    ret     c                       ;
 151+ EBCA              ;;                    pop     de                      ; set X (or in our case circle radius) to radius
 152+ EBCA              ;;                    ld      a,d                     ;
 153+ EBCA              ;;                    ld      (CircleRadius),a        ;
 154+ EBCA              ;;                    ld      d,8
 155+ EBCA              ;;                    JumpIfALTNusng  d,.DoneRadius   ; If the radius < 8, skip to PL89
 156+ EBCA              ;;                    srl     d                       ; Halve d so d = 4
 157+ EBCA              ;;                    JumpifALTNusng  60,.DoneRadius  ; If the radius < 60, skip to PL89
 158+ EBCA              ;;                    srl     d                       ; Halve d so d = 2
 159+ EBCA              ;;.DoneRadius:        ld      a,d                     ; Now store value in d into step
 160+ EBCA              ;;                    ld      (CircleStep),a
 161+ EBCA              ;;; ix = x Position, iy = y position, CircleRadius = radius, CircleStep = step value based on radius, must be on screen
 162+ EBCA              ;;EliteCircle2:       ld      a,$FF                   ; set flag for first plot
 163+ EBCA              ;;                    ld      (CircleFlag),a
 164+ EBCA              ;;                    inc     a                       ; set counter to 0 (goes to 64)
 165+ EBCA              ;;                    ld      (CircleCounter),a
 166+ EBCA              ;;.CircleLoop:        ld      a,(CircleCounter)       ; Set A = CNT
 167+ EBCA              ;;
 168+ EBCA              ;; JSR FMLTU2             \ Call FMLTU2 to calculate:
 169+ EBCA              ;;                        \
 170+ EBCA              ;;                        \   A = K * sin(A)
 171+ EBCA              ;;                        \     = K * sin(CNT)
 172+ EBCA              ;;
 173+ EBCA              ;; LDX #0                 \ Set T = 0, so we have the following:
 174+ EBCA              ;; STX T                  \
 175+ EBCA              ;;                        \   (T A) = K * sin(CNT)
 176+ EBCA              ;;                        \
 177+ EBCA              ;;                        \ which is the x-coordinate of the circle for this count
 178+ EBCA              ;;
 179+ EBCA              ;; LDX CNT                \ If CNT < 33 then jump to PL37, as this is the right
 180+ EBCA              ;; CPX #33                \ half of the circle and the sign of the x-coordinate is
 181+ EBCA              ;; BCC PL37               \ correct
 182+ EBCA              ;;
 183+ EBCA              ;; EOR #%11111111         \ This is the left half of the circle, so we want to
 184+ EBCA              ;; ADC #0                 \ flip the sign of the x-coordinate in (T A) using two's
 185+ EBCA              ;; TAX                    \ complement, so we start with the low byte and store it
 186+ EBCA              ;;                        \ in X (the ADC adds 1 as we know the C flag is set)
 187+ EBCA              ;;
 188+ EBCA              ;; LDA #&FF               \ And then we flip the high byte in T
 189+ EBCA              ;; ADC #0
 190+ EBCA              ;; STA T
 191+ EBCA              ;;
 192+ EBCA              ;; TXA                    \ Finally, we restore the low byte from X, so we have
 193+ EBCA              ;;                        \ now negated the x-coordinate in (T A)
 194+ EBCA              ;;
 195+ EBCA              ;; CLC                    \ Clear the C flag so we can do some more addition below
 196+ EBCA              ;;
 197+ EBCA              ;;.PL37
 198+ EBCA              ;;
 199+ EBCA              ;; ADC K3                 \ We now calculate the following:
 200+ EBCA              ;; STA K6                 \
 201+ EBCA              ;;                        \   K6(1 0) = (T A) + K3(1 0)
 202+ EBCA              ;;                        \
 203+ EBCA              ;;                        \ to add the coordinates of the centre to our circle
 204+ EBCA              ;;                        \ point, starting with the low bytes
 205+ EBCA              ;;
 206+ EBCA              ;; LDA K3+1               \ And then doing the high bytes, so we now have:
 207+ EBCA              ;; ADC T                  \
 208+ EBCA              ;; STA K6+1               \   K6(1 0) = K * sin(CNT) + K3(1 0)
 209+ EBCA              ;;                        \
 210+ EBCA              ;;                        \ which is the result we want for the x-coordinate
 211+ EBCA              ;;
 212+ EBCA              ;; LDA CNT                \ Set A = CNT + 16
 213+ EBCA              ;; CLC
 214+ EBCA              ;; ADC #16
 215+ EBCA              ;;
 216+ EBCA              ;; JSR FMLTU2             \ Call FMLTU2 to calculate:
 217+ EBCA              ;;                        \
 218+ EBCA              ;;                        \   A = K * sin(A)
 219+ EBCA              ;;                        \     = K * sin(CNT + 16)
 220+ EBCA              ;;                        \     = K * cos(CNT)
 221+ EBCA              ;;
 222+ EBCA              ;; TAX                    \ Set X = A
 223+ EBCA              ;;                        \       = K * cos(CNT)
 224+ EBCA              ;;
 225+ EBCA              ;; LDA #0                 \ Set T = 0, so we have the following:
 226+ EBCA              ;; STA T                  \
 227+ EBCA              ;;                        \   (T X) = K * cos(CNT)
 228+ EBCA              ;;                        \
 229+ EBCA              ;;                        \ which is the y-coordinate of the circle for this count
 230+ EBCA              ;;
 231+ EBCA              ;; LDA CNT                \ Set A = (CNT + 15) mod 64
 232+ EBCA              ;; ADC #15
 233+ EBCA              ;; AND #63
 234+ EBCA              ;;
 235+ EBCA              ;; CMP #33                \ If A < 33 (i.e. CNT is 0-16 or 48-64) then jump to
 236+ EBCA              ;; BCC PL38               \ PL38, as this is the bottom half of the circle and the
 237+ EBCA              ;;                        \ sign of the y-coordinate is correct
 238+ EBCA              ;;
 239+ EBCA              ;; TXA                    \ This is the top half of the circle, so we want to
 240+ EBCA              ;; EOR #%11111111         \ flip the sign of the y-coordinate in (T X) using two's
 241+ EBCA              ;; ADC #0                 \ complement, so we start with the low byte in X (the
 242+ EBCA              ;; TAX                    \ ADC adds 1 as we know the C flag is set)
 243+ EBCA              ;;
 244+ EBCA              ;; LDA #&FF               \ And then we flip the high byte in T, so we have
 245+ EBCA              ;; ADC #0                 \ now negated the y-coordinate in (T X)
 246+ EBCA              ;; STA T
 247+ EBCA              ;;
 248+ EBCA              ;; CLC                    \ Clear the C flag so we can do some more addition below
 249+ EBCA              ;;
 250+ EBCA              ;;.PL38
 251+ EBCA              ;;
 252+ EBCA              ;; JSR BLINE              \ Call BLINE to draw this segment, which also increases
 253+ EBCA              ;;                        \ CNT by STP, the step size
 254+ EBCA              ;;
 255+ EBCA              ;; CMP #65                \ If CNT >= 65 then skip the next instruction
 256+ EBCA              ;; BCS P%+5
 257+ EBCA              ;;
 258+ EBCA              ;; JMP PLL3               \ Jump back for the next segment
 259+ EBCA              ;;
 260+ EBCA              ;; CLC                    \ Clear the C flag to indicate success
 261+ EBCA              ;;
 262+ EBCA              ;; RTS                    \ Return from the subroutine
 263+ EBCA              ;;; ">L2_draw_circle16 bit" ix = x Position, iy = y position, d = radius, e = colour
 264+ EBCA              ;;; draw using minium squared algorithm
 265+ EBCA              ;;;
 266+ EBCA              ;;CircleCurrentX      DB      0
 267+ EBCA              ;;CircleCurrentY      DB      0
 268+ EBCA              ;;CircleCurrentError  DW      0
 269+ EBCA              ;;l2_draw_circle16bit:ld
 270+ EBCA              ;;.ConvertIXto2sC
 271+ EBCA              ;;.ConvertIYto2sC
 272+ EBCA              ;;.ZeroCurrentError
 273+ EBCA              ;;.SetCurrentXRadius:
 274+ EBCA              ;;.ZeroCurrentY
 275+ EBCA              ;;.DrawPixels:
 276+ EBCA              ;;
 277+ EBCA              ;;                    MMUSelectLayer2
 278+ EBCA              ;;.PlotLoop:
 279+ EBCA              ;;.Plot1:
 280+ EBCA              ;;
 281+ EBCA              ;;.Plot2:
 282+ EBCA              ;;
 283+ EBCA              ;;.Plot3:
 284+ EBCA              ;;
 285+ EBCA              ;;.Plot3:
 286+ EBCA              ;;
 287+ EBCA              ;;.Plot5:
 288+ EBCA              ;;
 289+ EBCA              ;;.Plot6:
 290+ EBCA              ;;
 291+ EBCA              ;;.Plot7:
 292+ EBCA              ;;
 293+ EBCA              ;;.Plot8:
 294+ EBCA              ;;
 295+ EBCA              ;;
 296+ EBCA              ;;
 297+ EBCA              ;;
 298+ EBCA              ;;
 299+ EBCA              ;;
 300+ EBCA              ;;
 301+ EBCA              ;;
 302+ EBCA              ;;
 303+ EBCA              ;;                    ld      a,(CurrentX)    ; if x <= y then break loop
 304+ EBCA              ;;                    ld      hl,CurrentY     ; .
 305+ EBCA              ;;                    cp      (hl)            ; .
 306+ EBCA              ;;                    ret     z               ; . X = Y
 307+ EBCA              ;;                    ret     c               ; . X < Y
 308+ EBCA              ;;.UpdateError:       ld      a,(CurrentY)    ; e += 2*y + 1
 309+ EBCA              ;;                    ld      e,a
 310+ EBCA              ;;                    ld      d,0
 311+ EBCA              ;;                    ShiftDELeft1
 312+ EBCA              ;;                    inc     de
 313+ EBCA              ;;                    ld      hl,(CircleCurrentError)
 314+ EBCA              ;;                    ClearCarryFlag
 315+ EBCA              ;;                    adc     hl,de
 316+ EBCA              ;;                    ld      (CircleCurrentError),hl
 317+ EBCA              ;;.NextCurrentY:      ld      hl,CircleCurrentY
 318+ EBCA              ;;                    inc     (hl)
 319+ EBCA              ;;.CheckEgtX:         ld      hl,(CircleCurrentError)
 320+ EBCA              ;;                    ld      a,(CircleCurrentX)
 321+ EBCA              ;;                    ld      d,0
 322+ EBCA              ;;                    ld      e,0
 323+ EBCA              ;;                    cpHLDE
 324+ EBCA              ;;                    jp      z,.AdjustError
 325+ EBCA              ;;                    jp      nc,.PlotLoop
 326+ EBCA              ;;.AdjustError:       ld      a,(CircleCurrentX)
 327+ EBCA              ;;                    ld      d,0
 328+ EBCA              ;;                    ld      e,a
 329+ EBCA              ;;                    ShiftDELeft1
 330+ EBCA              ;;                    ld      hl,(CircleCurrentError)
 331+ EBCA              ;;                    inc     hl
 332+ EBCA              ;;                    ClearCarryFlag
 333+ EBCA              ;;                    sbc     hl,de
 334+ EBCA              ;;                    ld      a,e
 335+ EBCA              ;;                    dec     a
 336+ EBCA              ;;                    ld      (CircleCurrentX),a
 337+ EBCA              ;;                    jp      .PlotLoop
 338+ EBCA              ;;;plot pixel at x = de y = bc
 339+ EBCA              ;;.PlotPixelBCDE:     ld		a,0                     ; This was originally indirect, where as it neeed to be value
 340+ EBCA              ;;                    push	de,,bc,,hl
 341+ EBCA              ;;                    ld      a,d                     ; if d is not zero then it must be -ve or > 255 to skip
 342+ EBCA              ;;                    and     a                       ;
 343+ EBCA              ;;                    ret     nz                      ;
 344+ EBCA              ;;                    ld      a,b                     ; if b is not zero then it must be -ve or > 255 to skip
 345+ EBCA              ;;                    and     a
 346+ EBCA              ;;                    ret     nz
 347+ EBCA              ;;                    ld      a,c                     ; but also check if y > 127 and if so skip
 348+ EBCA              ;;                    and     $80
 349+ EBCA              ;;                    ret     nz
 350+ EBCA              ;;                    ld      a,c                     ; so we can now plot
 351+ EBCA              ;;                    call    asm_l2_row_bank_select
 352+ EBCA              ;;                    ld      h,a
 353+ EBCA              ;;                    ld      l,e
 354+ EBCA              ;;                    ld      a,(line_gfx_colour)
 355+ EBCA              ;;                    ld      (hl),a
 356+ EBCA              ;;                    pop		de,,bc,,hl
 357+ EBCA              ;;                    ret
 358+ EBCA              ;;
 359+ EBCA
 360+ EBCA              ;---------------------------------------------------------------------------------------------------------------------------------
 361+ EBCA              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
 362+ EBCA 7B           l2_draw_circle:     ld		a,e
 363+ EBCB 32 71 EC                         ld		(.PlotPixel+1),a
 364+ EBCE 7A                               ld		a,d								; get radius
 365+ EBCF A7                               and		a
 366+ EBD0 C8                               ret		z
 367+ EBD1 FE 01                            cp		1
 368+ EBD3 CA 88 EC                         jp		z,CircleSinglepixel
 369+ EBD6 ED 43 00 EC                      ld		(.Plot1+1),bc	        ; save origin into cXcY reg in code
 370+ EBDA DD 67                            ld		ixh,a			        ; ixh =  x = raidus
 371+ EBDC DD 2E 00                         ld		ixl,0			        ; iyh =  y = 0
 372+ EBDF 26 00        .calcd:	            ld		h,0
 373+ EBE1 6F                               ld		l,a
 374+ EBE2 29                               add		hl,hl			        ; hl = r * 2
 375+ EBE3 EB                               ex		de,hl			        ; de = r * 2
 376+ EBE4 21 03 00                         ld		hl,3
 377+ EBE7 A7                               and		a
 378+ EBE8 ED 52                            sbc		hl,de			        ; hl = 3 - (r * 2)
 379+ EBEA 44                               ld		b,h
 380+ EBEB 4D                               ld		c,l				        ; bc = 3 - (r * 2)
 381+ EBEC 21 01 00     .calcdelta:         ld		hl,1
 382+ EBEF 16 00                            ld		d,0
 383+ EBF1 DD 5D                            ld		e,ixl
 384+ EBF3 A7                               and		a
 385+ EBF4 ED 52                            sbc		hl,de
 386+ EBF6 11 01 00     .Setde1:            ld		de,1
 387+ EBF9 DD 7C        .CircleLoop:        ld		a,ixh
 388+ EBFB DD BD                            cp		ixl
 389+ EBFD D8                               ret		c
 390+ EBFE D9           .ProcessLoop:	    exx
 391+ EBFF 11 00 00     .Plot1:             ld		de,0                    ; de = cXcY
 392+ EC02 7B                               ld		a,e                     ; c = cY + error
 393+ EC03 DD 85                            add		a,ixl                   ;
 394+ EC05 4F                               ld		c,a                     ;
 395+ EC06 7A                               ld		a,d                     ; b = xY+radius
 396+ EC07 DD 84                            add		a,ixh                   ;
 397+ EC09 47                               ld		b,a                     ;
 398+ EC0A CD 70 EC                         call	.PlotPixel			    ;CX+X,CY+Y
 399+ EC0D 7B           .Plot2:             ld 		a,e
 400+ EC0E DD 95                            sub 	ixl
 401+ EC10 4F                               ld 		c,a
 402+ EC11 7A                               ld 		a,d
 403+ EC12 DD 84                            add 	a,ixh
 404+ EC14 47                               ld		b,a
 405+ EC15 CD 70 EC                         call	.PlotPixel			    ;CX-X,CY+Y
 406+ EC18 7B           .Plot3:             ld 		a,e
 407+ EC19 DD 85                            add		a,ixl
 408+ EC1B 4F                               ld 		c,a
 409+ EC1C 7A                               ld 		a,d
 410+ EC1D DD 94                            sub 	ixh
 411+ EC1F 47                               ld 		b,a
 412+ EC20 CD 70 EC                         call	.PlotPixel			    ;CX+X,CY-Y
 413+ EC23 7B           .Plot4:             ld 		a,e
 414+ EC24 DD 95                            sub 	ixl
 415+ EC26 4F                               ld 		c,a
 416+ EC27 7A                               ld 		a,d
 417+ EC28 DD 94                            sub 	ixh
 418+ EC2A 47                               ld 		b,a
 419+ EC2B CD 70 EC                         call	.PlotPixel			    ;CX-X,CY-Y
 420+ EC2E 7A           .Plot5:	            ld 		a,d
 421+ EC2F DD 85                            add 	a,ixl
 422+ EC31 47                               ld 		b,a
 423+ EC32 7B                               ld 		a,e
 424+ EC33 DD 84                            add 	a,ixh
 425+ EC35 4F                               ld 		c,a
 426+ EC36 CD 70 EC                         call	.PlotPixel			    ;CY+X,CX+Y
 427+ EC39 7A           .Plot6:	            ld 		a,d
 428+ EC3A DD 95                            sub 	ixl
 429+ EC3C 47                               ld 		b,a
 430+ EC3D 7B                               ld 		a,e
 431+ EC3E DD 84                            add 	a,ixh
 432+ EC40 4F                               ld 		c,a
 433+ EC41 CD 70 EC                         call	.PlotPixel			    ;CY-X,CX+Y
 434+ EC44 7A           .Plot7:	            ld 		a,d
 435+ EC45 DD 85                            add 	a,ixl
 436+ EC47 47                               ld 		b,a
 437+ EC48 7B                               ld 		a,e
 438+ EC49 DD 94                            sub 	ixh
 439+ EC4B 4F                               ld 		c,a
 440+ EC4C CD 70 EC                         call	.PlotPixel			    ;CY+X,CX-Y
 441+ EC4F 7A           .Plot8:	            ld 		a,d
 442+ EC50 DD 95                            sub 	ixl
 443+ EC52 47                               ld		b,a
 444+ EC53 7B                               ld 		a,e
 445+ EC54 DD 94                            sub 	ixh
 446+ EC56 4F                               ld 		c,a
 447+ EC57 CD 70 EC                         call	.PlotPixel			    ;CY-X,CX-Y
 448+ EC5A D9                               exx
 449+ EC5B CB 7C        .IncrementCircle:	bit     7,h				        ; Check for Hl<=0
 450+ EC5D 28 03                            jr z,   .draw_circle_1
 451+ EC5F 19                               add hl,de			            ; Delta=Delta+D1
 452+ EC60 18 05                            jr      .draw_circle_2		;
 453+ EC62 09           .draw_circle_1:		add     hl,bc			        ; Delta=Delta+D2
 454+ EC63 03                               inc     bc
 455+ EC64 03                               inc     bc				        ; D2=D2+2
 456+ EC65 DD 25                            dec     ixh				        ; Y=Y-1
 457+ EC67 03           .draw_circle_2:		inc bc				            ; D2=D2+2
 458+ EC68 03                               inc bc
 459+ EC69 13                               inc de				            ; D1=D1+2
 460+ EC6A 13                               inc de
 461+ EC6B DD 2C                            inc ixl				            ; X=X+1
 462+ EC6D C3 F9 EB                         jp      .CircleLoop
 463+ EC70 3E 00        .PlotPixel:         ld		a,0                     ; This was originally indirect, where as it neeed to be value
 464+ EC72 D5 C5 E5                         push	de,,bc,,hl
 465+ EC75                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 465+ EC75 78          >                        ld      a,b
 465+ EC76             >                        JumpIfAGTENusng 192 ,.NoPlot
 465+ EC76 FE C0       >                        cp     192
 465+ EC78 D2 84 EC    >                        jp		nc,.NoPlot
 465+ EC7B 69          >                        ld      l,c
 465+ EC7C CD 68 E0    >                        call    asm_l2_row_bank_select
 465+ EC7F 67          >                        ld      h,a
 465+ EC80 3A B5 E2    >                        ld      a,(line_gfx_colour)
 465+ EC83 77          >                        ld      (hl),a
 465+ EC84             >.NoPlot:
 466+ EC84 E1 C1 D1                         pop		de,,bc,,hl
 467+ EC87 C9                               ret
 468+ EC88 7B           CircleSinglepixel:  ld		a,e
 469+ EC89                                  l2_plot_macro; call	l2_plot_pixel_y_test
 469+ EC89 78          >                        ld      a,b
 469+ EC8A             >                        JumpIfAGTENusng 192 ,.NoPlot
 469+ EC8A FE C0       >                        cp     192
 469+ EC8C D2 98 EC    >                        jp		nc,.NoPlot
 469+ EC8F 69          >                        ld      l,c
 469+ EC90 CD 68 E0    >                        call    asm_l2_row_bank_select
 469+ EC93 67          >                        ld      h,a
 469+ EC94 3A B5 E2    >                        ld      a,(line_gfx_colour)
 469+ EC97 77          >                        ld      (hl),a
 469+ EC98             >.NoPlot:
 470+ EC98 C9                               ret
 471+ EC99
 472+ EC99              CalcNewPointMacro:  MACRO reg1, oper, reg2
 473+ EC99 ~                                ClearCarryFlag
 474+ EC99 ~                                ld      b,0
 475+ EC99 ~                                ld      c,reg2
 476+ EC99 ~                                oper    hl,bc
 477+ EC99                                  ENDM
 478+ EC99
 479+ EC99              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 480+ EC99              l2_draw_clipped_circle:
 481+ EC99 78                               ld      a,b                     ; save Colour
 482+ EC9A 32 CB ED                         ld		(.PlotColour+1),a
 483+ EC9D 79                               ld		a,c								; get radius
 484+ EC9E                                  ReturnIfAIsZero
 484+ EC9E A7          >                        and     a
 484+ EC9F C8          >                        ret     z
 485+ ECA0                                  JumpIfAEqNusng  1, .circleSinglepixel
 485+ ECA0 FE 01       >                        cp     1
 485+ ECA2 CA E5 ED    >                        jp      z,.circleSinglepixel
 486+ ECA5 ED 53 D2 EC                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 487+ ECA9 22 D5 EC                         ld      (.Plot1X+1),hl                  ; .
 488+ ECAC                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 489+ ECAC DD 67                            ld		ixh,a							; ixh = x = raidus
 490+ ECAE DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 491+ ECB1 26 00        .calcd:	            ld		h,0                             ; hl = radius
 492+ ECB3 6F                               ld		l,a                             ; raidius is still in a at this point
 493+ ECB4 29                               add		hl,hl							; hl = r * 2
 494+ ECB5 EB                               ex		de,hl							; de = r * 2
 495+ ECB6 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 496+ ECB9                                  ClearCarryFlag                          ; .
 496+ ECB9 B7          >                        or a
 497+ ECBA ED 52                            sbc		hl,de							; .
 498+ ECBC 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 499+ ECBE 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 500+ ECC1 16 00                            ld		d,0                             ; de = ixl (error)
 501+ ECC3 DD 5D                            ld		e,ixl                           ;
 502+ ECC5                                  ClearCarryFlag                          ;
 502+ ECC5 B7          >                        or a
 503+ ECC6 ED 52                            sbc		hl,de                           ; hl = 1 - error
 504+ ECC8 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 505+ ECCB              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 505+ ECCB DD 7C       >                        ld      a,ixh
 505+ ECCD DD BD       >                        cp      ixl
 505+ ECCF D8          >                        ret	    c
 506+ ECD0 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 507+ ECD1              ;--- CX+X,CY+Y ---------------------------------------------;
 508+ ECD1 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 509+ ECD4 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 510+ ECD7 E5 D5                            push    hl,,de
 511+ ECD9                                  CalcNewPointMacro hl, adc, ixh          ;
 511+ ECD9             >                    ClearCarryFlag
 511+ ECD9 B7          >                        or a
 511+ ECDA 06 00       >                    ld      b,0
 511+ ECDC DD 4C       >                    ld      c,ixh
 511+ ECDE ED 4A       >                    adc    hl,bc
 512+ ECE0 EB                               ex      de,hl                           ; de = x coord calculated, hl =y center Y
 513+ ECE1                                  CalcNewPointMacro hl, adc, ixl          ;
 513+ ECE1             >                    ClearCarryFlag
 513+ ECE1 B7          >                        or a
 513+ ECE2 06 00       >                    ld      b,0
 513+ ECE4 DD 4D       >                    ld      c,ixl
 513+ ECE6 ED 4A       >                    adc    hl,bc
 514+ ECE8 CD C0 ED                         call	.PlotPixel	            		; CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 515+ ECEB D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 516+ ECED              ;--- CX+X,CY-Y ---------------------------------------------;
 517+ ECED E5 D5        .Plot2:             push    hl,,de                          ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 518+ ECEF                                  CalcNewPointMacro hl, adc, ixh          ;
 518+ ECEF             >                    ClearCarryFlag
 518+ ECEF B7          >                        or a
 518+ ECF0 06 00       >                    ld      b,0
 518+ ECF2 DD 4C       >                    ld      c,ixh
 518+ ECF4 ED 4A       >                    adc    hl,bc
 519+ ECF6                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 519+ ECF6 7C          >                        ld      a,h
 519+ ECF7 A7          >                        and     a
 519+ ECF8 C2 06 ED    >                        jp	    nz,.Plot2Done
 520+ ECFB EB                               ex      de,hl                           ; de = calculated x
 521+ ECFC                                  CalcNewPointMacro hl, sbc, ixl          ;
 521+ ECFC             >                    ClearCarryFlag
 521+ ECFC B7          >                        or a
 521+ ECFD 06 00       >                    ld      b,0
 521+ ECFF DD 4D       >                    ld      c,ixl
 521+ ED01 ED 42       >                    sbc    hl,bc
 522+ ED03 CD C0 ED                         call	.PlotPixel	                    ; CX-X,CY+Y
 523+ ED06 D1 E1        .Plot2Done:         pop     hl,,de
 524+ ED08              ;--- CX-X,CY-Y ---------------------------------------------; bollocksC
 525+ ED08 E5 D5        .Plot3:             push    hl,,de
 526+ ED0A                                  CalcNewPointMacro hl, sbc, ixh          ;
 526+ ED0A             >                    ClearCarryFlag
 526+ ED0A B7          >                        or a
 526+ ED0B 06 00       >                    ld      b,0
 526+ ED0D DD 4C       >                    ld      c,ixh
 526+ ED0F ED 42       >                    sbc    hl,bc
 527+ ED11                                  JumpIfRegIsNotZero  h,.Plot3Done        ;
 527+ ED11 7C          >                        ld      a,h
 527+ ED12 A7          >                        and     a
 527+ ED13 C2 21 ED    >                        jp	    nz,.Plot3Done
 528+ ED16 EB                               ex      de,hl                           ; de = calculated x
 529+ ED17                                  CalcNewPointMacro hl, sbc, ixl          ;
 529+ ED17             >                    ClearCarryFlag
 529+ ED17 B7          >                        or a
 529+ ED18 06 00       >                    ld      b,0
 529+ ED1A DD 4D       >                    ld      c,ixl
 529+ ED1C ED 42       >                    sbc    hl,bc
 530+ ED1E CD C0 ED                         call	.PlotPixel	                    ; CX+X,CY-Y
 531+ ED21 D1 E1        .Plot3Done:         pop     hl,,de
 532+ ED23              ;--- CX-X,CY+Y ---------------------------------------------; bollocks
 533+ ED23 E5 D5        .Plot4:             push    hl,,de
 534+ ED25                                  CalcNewPointMacro hl, sbc, ixh          ;
 534+ ED25             >                    ClearCarryFlag
 534+ ED25 B7          >                        or a
 534+ ED26 06 00       >                    ld      b,0
 534+ ED28 DD 4C       >                    ld      c,ixh
 534+ ED2A ED 42       >                    sbc    hl,bc
 535+ ED2C                                  JumpIfRegIsNotZero  h,.Plot4Done
 535+ ED2C 7C          >                        ld      a,h
 535+ ED2D A7          >                        and     a
 535+ ED2E C2 3C ED    >                        jp	    nz,.Plot4Done
 536+ ED31 EB                               ex      de,hl
 537+ ED32                                  CalcNewPointMacro hl, adc, ixl          ;
 537+ ED32             >                    ClearCarryFlag
 537+ ED32 B7          >                        or a
 537+ ED33 06 00       >                    ld      b,0
 537+ ED35 DD 4D       >                    ld      c,ixl
 537+ ED37 ED 4A       >                    adc    hl,bc
 538+ ED39 CD C0 ED                         call	.PlotPixel	                    ; CX-X,CY-Y
 539+ ED3C D1 E1        .Plot4Done:         pop     hl,,de
 540+ ED3E              ;--- CX+Y,CY+X ---------------------------------------------; bollocks
 541+ ED3E E5 D5        .Plot5:             push    hl,,de
 542+ ED40                                  CalcNewPointMacro hl, adc, ixl          ;
 542+ ED40             >                    ClearCarryFlag
 542+ ED40 B7          >                        or a
 542+ ED41 06 00       >                    ld      b,0
 542+ ED43 DD 4D       >                    ld      c,ixl
 542+ ED45 ED 4A       >                    adc    hl,bc
 543+ ED47                                  JumpIfRegIsNotZero  h,.Plot5Done
 543+ ED47 7C          >                        ld      a,h
 543+ ED48 A7          >                        and     a
 543+ ED49 C2 57 ED    >                        jp	    nz,.Plot5Done
 544+ ED4C EB                               ex      de,hl
 545+ ED4D                                  CalcNewPointMacro hl, adc, ixh          ;
 545+ ED4D             >                    ClearCarryFlag
 545+ ED4D B7          >                        or a
 545+ ED4E 06 00       >                    ld      b,0
 545+ ED50 DD 4C       >                    ld      c,ixh
 545+ ED52 ED 4A       >                    adc    hl,bc
 546+ ED54 CD C0 ED                         call	.PlotPixel	                    ;CY+X,CX+Y
 547+ ED57 D1 E1        .Plot5Done:         pop     hl,,de
 548+ ED59              ;--- CX+Y,CX-X ---------------------------------------------;bollocks
 549+ ED59 E5 D5        .Plot6:             push    hl,,de
 550+ ED5B                                  CalcNewPointMacro hl, adc, ixl          ;
 550+ ED5B             >                    ClearCarryFlag
 550+ ED5B B7          >                        or a
 550+ ED5C 06 00       >                    ld      b,0
 550+ ED5E DD 4D       >                    ld      c,ixl
 550+ ED60 ED 4A       >                    adc    hl,bc
 551+ ED62                                  JumpIfRegIsNotZero  h,.Plot6Done
 551+ ED62 7C          >                        ld      a,h
 551+ ED63 A7          >                        and     a
 551+ ED64 C2 72 ED    >                        jp	    nz,.Plot6Done
 552+ ED67 EB                               ex      de,hl
 553+ ED68                                  CalcNewPointMacro hl, sbc, ixh          ;
 553+ ED68             >                    ClearCarryFlag
 553+ ED68 B7          >                        or a
 553+ ED69 06 00       >                    ld      b,0
 553+ ED6B DD 4C       >                    ld      c,ixh
 553+ ED6D ED 42       >                    sbc    hl,bc
 554+ ED6F CD C0 ED                         call	.PlotPixel	                    ; CY-X,CX+Y
 555+ ED72 D1 E1        .Plot6Done:         pop     hl,,de
 556+ ED74              ;--- CX-Y,CY-X ---------------------------------------------;bollocksC
 557+ ED74 E5 D5        .Plot7:             push    hl,,de
 558+ ED76                                  CalcNewPointMacro hl, sbc, ixl          ;
 558+ ED76             >                    ClearCarryFlag
 558+ ED76 B7          >                        or a
 558+ ED77 06 00       >                    ld      b,0
 558+ ED79 DD 4D       >                    ld      c,ixl
 558+ ED7B ED 42       >                    sbc    hl,bc
 559+ ED7D                                  JumpIfRegIsNotZero  h,.Plot7Done
 559+ ED7D 7C          >                        ld      a,h
 559+ ED7E A7          >                        and     a
 559+ ED7F C2 8D ED    >                        jp	    nz,.Plot7Done
 560+ ED82 EB                               ex      de,hl
 561+ ED83                                  CalcNewPointMacro hl, sbc, ixh          ;
 561+ ED83             >                    ClearCarryFlag
 561+ ED83 B7          >                        or a
 561+ ED84 06 00       >                    ld      b,0
 561+ ED86 DD 4C       >                    ld      c,ixh
 561+ ED88 ED 42       >                    sbc    hl,bc
 562+ ED8A CD C0 ED                         call	.PlotPixel	                    ; CY+X,CX-Y
 563+ ED8D D1 E1        .Plot7Done:         pop     hl,,de
 564+ ED8F              ;--- CX-Y,CY+X ---------------------------------------------; bollocks
 565+ ED8F E5 D5        .Plot8:             push    hl,,de
 566+ ED91                                  CalcNewPointMacro hl, sbc, ixl          ;
 566+ ED91             >                    ClearCarryFlag
 566+ ED91 B7          >                        or a
 566+ ED92 06 00       >                    ld      b,0
 566+ ED94 DD 4D       >                    ld      c,ixl
 566+ ED96 ED 42       >                    sbc    hl,bc
 567+ ED98                                  JumpIfRegIsNotZero  h,.Plot8Done
 567+ ED98 7C          >                        ld      a,h
 567+ ED99 A7          >                        and     a
 567+ ED9A C2 A8 ED    >                        jp	    nz,.Plot8Done
 568+ ED9D EB                               ex      de,hl
 569+ ED9E                                  CalcNewPointMacro hl, adc, ixh          ;
 569+ ED9E             >                    ClearCarryFlag
 569+ ED9E B7          >                        or a
 569+ ED9F 06 00       >                    ld      b,0
 569+ EDA1 DD 4C       >                    ld      c,ixh
 569+ EDA3 ED 4A       >                    adc    hl,bc
 570+ EDA5 CD C0 ED                         call	.PlotPixel	                    ; CY-X,CX-Y
 571+ EDA8 D1 E1        .Plot8Done:         pop     hl,,de
 572+ EDAA D9           .PlotDone:          exx
 573+ EDAB CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 574+ EDAD 28 03                            jr z,   .draw_circle_1
 575+ EDAF 19                               add hl,de			; Delta=Delta+D1
 576+ EDB0 18 05                            jr      .draw_circle_2		;
 577+ EDB2 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 578+ EDB3 03                               inc     bc
 579+ EDB4 03                               inc     bc				; D2=D2+2
 580+ EDB5 DD 25                            dec     ixh				; Y=Y-1
 581+ EDB7 03           .draw_circle_2:		inc     bc				; D2=D2+2
 582+ EDB8 03                               inc     bc
 583+ EDB9 13                               inc     de				; D1=D1+2
 584+ EDBA 13                               inc     de
 585+ EDBB DD 2C                            inc     ixl				; X=X+1
 586+ EDBD C3 CB EC                         jp      .CircleLoop
 587+ EDC0 7A           .PlotPixel:         ld      a,d             ; filter x> 256 or negative
 588+ EDC1 A7                               and     a
 589+ EDC2 C0                               ret     nz
 590+ EDC3 7C                               ld      a,h             ; filter y > 256 or negative
 591+ EDC4 A7                               and     a
 592+ EDC5 C0                               ret     nz
 593+ EDC6 7D                               ld      a,l             ; filter y > 127
 594+ EDC7 E6 80                            and     $80
 595+ EDC9 C0                               ret     nz
 596+ EDCA 3E 00        .PlotColour:        ld		a,0             ; This was originally indirect, where as it neeed to be value
 597+ EDCC D5 C5 E5                         push	de,,bc,,hl
 598+ EDCF 45                               ld      b,l             ; At this point de = x and hl = y
 599+ EDD0 4B                               ld      c,e
 600+ EDD1                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 600+ EDD1 78          >                        ld      a,b
 600+ EDD2             >                        JumpIfAGTENusng 192 ,.NoPlot
 600+ EDD2 FE C0       >                        cp     192
 600+ EDD4 D2 E0 ED    >                        jp		nc,.NoPlot
 600+ EDD7 69          >                        ld      l,c
 600+ EDD8 CD 68 E0    >                        call    asm_l2_row_bank_select
 600+ EDDB 67          >                        ld      h,a
 600+ EDDC 3A B5 E2    >                        ld      a,(line_gfx_colour)
 600+ EDDF 77          >                        ld      (hl),a
 600+ EDE0             >.NoPlot:
 601+ EDE0 E1 C1 D1                         pop		de,,bc,,hl
 602+ EDE3                                  ClearCarryFlag
 602+ EDE3 B7          >                        or a
 603+ EDE4 C9                               ret
 604+ EDE5 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 605+ EDE6 B2                               or      d
 606+ EDE7 C0                               ret     nz
 607+ EDE8 CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 608+ EDEA C0                               ret     nz
 609+ EDEB 78                               ld      a,b             ; a = colour
 610+ EDEC 43                               ld      b,e             ; b = y
 611+ EDED 4D                               ld      c,l             ; c = x
 612+ EDEE CD B6 E2                         call    l2_plot_pixel
 613+ EDF1 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1406  EDF2                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ EDF2
   2+ EDF2 00           l2_circle_dblx		DB 0
   3+ EDF3 00           l2_circle_dbly		DB 0
   4+ EDF4
   5+ EDF4              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ EDF4              ; Note this code currently does not process BC
   7+ EDF4 7B           l2_draw_circle_fill:    ld		a,e
   8+ EDF5 32 8B EE                             ld		(.LineColour+1),a
   9+ EDF8 7A                                   ld		a,d								; get radius
  10+ EDF9 A7                                   and		a
  11+ EDFA C8                                   ret		z
  12+ EDFB FE 01                                cp		1
  13+ EDFD CA 88 EC                             jp		z,CircleSinglepixel
  14+ EE00 ED 43 2A EE                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ EE04 DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ EE06 DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EE09 26 00        .calcd:	                ld		h,0
  18+ EE0B 6F                                   ld		l,a
  19+ EE0C 29                                   add		hl,hl							; hl = r * 2
  20+ EE0D EB                                   ex		de,hl							; de = r * 2
  21+ EE0E 21 03 00                             ld		hl,3
  22+ EE11 A7                                   and		a
  23+ EE12 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EE14 44                                   ld		b,h
  25+ EE15 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EE16 21 01 00     .calcdelta              ld		hl,1
  27+ EE19 16 00                                ld		d,0
  28+ EE1B DD 5D                                ld		e,ixl
  29+ EE1D A7                                   and		a
  30+ EE1E ED 52                                sbc		hl,de
  31+ EE20 11 01 00     .Setde1	                ld		de,1
  32+ EE23 DD 7C        .CircleLoop:            ld		a,ixh
  33+ EE25 DD BD                                cp		ixl
  34+ EE27 D8                                   ret		c
  35+ EE28 D9           .ProcessLoop:	        exx
  36+ EE29 11 00 00     .Line1:                 ld		de,0
  37+ EE2C 7B                                   ld 		a,e
  38+ EE2D DD 95                                sub 	ixl
  39+ EE2F 4F                                   ld 		c,a
  40+ EE30 7A                                   ld 		a,d
  41+ EE31 DD 84                                add 	a,ixh
  42+ EE33 47                                   ld		b,a
  43+ EE34                                                  DISPLAY "TODO: add double x calc"
  44+ EE34                                      ;; TODO ADD DOUBLE X CALC
  45+ EE34 D5                                   push	de
  46+ EE35 DD 55                                ld		d,ixl
  47+ EE37 CB 22                                sla		d
  48+ EE39 CD 86 EE                             call	.PlotLine			;CX-X,CY+Y
  49+ EE3C D1                                   pop		de
  50+ EE3D 7B           .Line2:                 ld 		a,e
  51+ EE3E DD 95                                sub		ixl
  52+ EE40 4F                                   ld 		c,a
  53+ EE41 7A                                   ld 		a,d
  54+ EE42 DD 94                                sub 	ixh
  55+ EE44 47                                   ld 		b,a
  56+ EE45                                      ;; TODO ADD DOUBLE X CALC
  57+ EE45 D5                                   push	de
  58+ EE46 DD 55                                ld		d,ixl
  59+ EE48 CB 22                                sla		d
  60+ EE4A CD 86 EE                             call	.PlotLine			;CX-X,CY-Y
  61+ EE4D D1                                   pop		de
  62+ EE4E 7B           .Line3:	                ld 		a,e
  63+ EE4F DD 94                                sub		ixh
  64+ EE51 4F                                   ld 		c,a
  65+ EE52 7A                                   ld 		a,d
  66+ EE53 DD 85                                add 	a,ixl
  67+ EE55 47                                   ld 		b,a
  68+ EE56                                      ;; TODO ADD DOUBLE Y CALC
  69+ EE56 D5                                   push	de
  70+ EE57 DD 54                                ld		d,ixh
  71+ EE59 CB 22                                sla		d
  72+ EE5B CD 86 EE                             call	.PlotLine			;CX-Y,CY+x
  73+ EE5E D1                                   pop		de
  74+ EE5F 7B           .Line4:	                ld 		a,e
  75+ EE60 DD 94                                sub		ixh
  76+ EE62 4F                                   ld 		c,a
  77+ EE63 7A                                   ld 		a,d
  78+ EE64 DD 95                                sub 	ixl
  79+ EE66 47                                   ld 		b,a
  80+ EE67                                      ;; TODO ADD DOUBLE Y CALC
  81+ EE67 D5                                   push	de
  82+ EE68 DD 54                                ld		d,ixh
  83+ EE6A CB 22                                sla		d
  84+ EE6C CD 86 EE                             call	.PlotLine			;CX-Y,CY+x
  85+ EE6F D1                                   pop		de
  86+ EE70 D9                                   exx
  87+ EE71 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  88+ EE73 28 03                                jr z,.draw_circle_1
  89+ EE75 19                                   add hl,de			; Delta=Delta+D1
  90+ EE76 18 05                                jr .draw_circle_2		;
  91+ EE78 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  92+ EE79 03                                   inc bc
  93+ EE7A 03                                   inc bc				; D2=D2+2
  94+ EE7B DD 25                                dec ixh				; Y=Y-1
  95+ EE7D 03           .draw_circle_2:		    inc bc				; D2=D2+2
  96+ EE7E 03                                   inc bc
  97+ EE7F 13                                   inc de				; D1=D1+2
  98+ EE80 13                                   inc de
  99+ EE81 DD 2C                                inc ixl				; X=X+1
 100+ EE83 C3 23 EE                             jp .CircleLoop
 101+ EE86 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 102+ EE8A 3E 00        .LineColour:	        ld		a,0         ; circle colur
 103+ EE8C 5F                                   ld      e,a
 104+ EE8D CD 84 E4                             call 	l2_draw_horz_line
 105+ EE90 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 106+ EE94 C9                                   ret
 107+ EE95
 108+ EE95              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 109+ EE95              l2_draw_clipped_circle_filled:
 110+ EE95 78                               ld      a,b                             ; save Colour
 111+ EE96 32 90 EF                         ld		(.PlotColour+1),a
 112+ EE99 79                               ld		a,c								; get radius
 113+ EE9A                                  ReturnIfAIsZero
 113+ EE9A A7          >                        and     a
 113+ EE9B C8          >                        ret     z
 114+ EE9C                                  JumpIfAEqNusng  1, .circleSinglepixel
 114+ EE9C FE 01       >                        cp     1
 114+ EE9E CA 96 EF    >                        jp      z,.circleSinglepixel
 115+ EEA1 ED 53 CE EE                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 116+ EEA5 22 D1 EE                         ld      (.Plot1X+1),hl                  ; .
 117+ EEA8                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 118+ EEA8 DD 67                            ld		ixh,a							; ixh = x = raidus
 119+ EEAA DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 120+ EEAD 26 00        .calcd:	            ld		h,0                             ; hl = radius
 121+ EEAF 6F                               ld		l,a                             ; raidius is still in a at this point
 122+ EEB0 29                               add		hl,hl							; hl = r * 2
 123+ EEB1 EB                               ex		de,hl							; de = r * 2
 124+ EEB2 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 125+ EEB5                                  ClearCarryFlag                          ; .
 125+ EEB5 B7          >                        or a
 126+ EEB6 ED 52                            sbc		hl,de							; .
 127+ EEB8 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 128+ EEBA 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 129+ EEBD 16 00                            ld		d,0                             ; de = ixl (error)
 130+ EEBF DD 5D                            ld		e,ixl                           ;
 131+ EEC1                                  ClearCarryFlag                          ;
 131+ EEC1 B7          >                        or a
 132+ EEC2 ED 52                            sbc		hl,de                           ; hl = 1 - error
 133+ EEC4 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 134+ EEC7              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 134+ EEC7 DD 7C       >                        ld      a,ixh
 134+ EEC9 DD BD       >                        cp      ixl
 134+ EECB D8          >                        ret	    c
 135+ EECC D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 136+ EECD              ; For line drawing we can go from left to right in a single call
 137+ EECD              ;--- from CX-X to CX+X, CY+Y -------------------------------;
 138+ EECD 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 139+ EED0 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 140+ EED3 E5 D5        .Plot1:             push    hl,,de                          ; push X then Y  on top Stack+2
 141+ EED5                                  CalcNewPointMacro hl, sbc, ixh          ; hl = CX - X
 141+ EED5             >                    ClearCarryFlag
 141+ EED5 B7          >                        or a
 141+ EED6 06 00       >                    ld      b,0
 141+ EED8 DD 4C       >                    ld      c,ixh
 141+ EEDA ED 42       >                    sbc    hl,bc
 142+ EEDC EB                               ex      de,hl                           ; de = CX - X
 143+ EEDD ED 53 01 EF                      ld      (.LoadDEXStart1+1),de           ; save it for Plot 2 as well
 144+ EEE1                                  CalcNewPointMacro hl, adc, ixl          ; hl = CY + Y
 144+ EEE1             >                    ClearCarryFlag
 144+ EEE1 B7          >                        or a
 144+ EEE2 06 00       >                    ld      b,0
 144+ EEE4 DD 4D       >                    ld      c,ixl
 144+ EEE6 ED 4A       >                    adc    hl,bc
 145+ EEE8 06 00                            ld      b,0                             ; Now we have calculated D is bc
 146+ EEEA DD 4C                            ld      c,ixh                           ;
 147+ EEEC                                  ShiftBCLeft1                            ;
 147+ EEEC CB 21       >			   sla c
 147+ EEEE CB 10       >			   rl  b
 148+ EEF0 ED 43 04 EF                      ld      (.LoadBCLength1+1),bc            ; self modifying to optimise laod on line 2
 149+ EEF4 CD 55 EF                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 150+ EEF7 E1           .Plot1Done:         pop     hl                              ; Stack+1 get cy from stack into hl to save an ex as we have pre calculated x positions
 151+ EEF8              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 152+ EEF8 E5           .Plot2:             push    hl                              ; Stack+2 put cy back on stack so it holds cy stack already holds cx
 153+ EEF9                                  CalcNewPointMacro hl, sbc, ixl          ; now we have CY-Y in hl
 153+ EEF9             >                    ClearCarryFlag
 153+ EEF9 B7          >                        or a
 153+ EEFA 06 00       >                    ld      b,0
 153+ EEFC DD 4D       >                    ld      c,ixl
 153+ EEFE ED 42       >                    sbc    hl,bc
 154+ EF00 11 00 00     .LoadDEXStart1:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 155+ EF03 01 00 00     .LoadBCLength1:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 156+ EF06 CD 55 EF                         call	.PlotLine                       ;
 157+ EF09 D1 E1        .Plot2Done:         pop     hl,,de                          ; Stack+0 now hl = cx, de = cy
 158+ EF0B              ;--- from CX-Y to CX+Y, CY+X -------------------------------;
 159+ EF0B D5           .Plot3:             push    de                              ; Stack + 1 we need cy for final plot calculation
 160+ EF0C                                  CalcNewPointMacro hl, sbc, ixl          ; hl = CX - Y
 160+ EF0C             >                    ClearCarryFlag
 160+ EF0C B7          >                        or a
 160+ EF0D 06 00       >                    ld      b,0
 160+ EF0F DD 4D       >                    ld      c,ixl
 160+ EF11 ED 42       >                    sbc    hl,bc
 161+ EF13 EB                               ex      de,hl                           ; de = CX - Y
 162+ EF14 ED 53 37 EF                      ld      (.LoadDEXStart2+1),de             ; save it for Plot 2 as well
 163+ EF18                                  CalcNewPointMacro hl, adc, ixh          ; hl = CY + X
 163+ EF18             >                    ClearCarryFlag
 163+ EF18 B7          >                        or a
 163+ EF19 06 00       >                    ld      b,0
 163+ EF1B DD 4C       >                    ld      c,ixh
 163+ EF1D ED 4A       >                    adc    hl,bc
 164+ EF1F 06 00                            ld      b,0                             ; Now we have calculated D is bc
 165+ EF21 DD 4D                            ld      c,ixl                           ;
 166+ EF23                                  ShiftBCLeft1                            ;
 166+ EF23 CB 21       >			   sla c
 166+ EF25 CB 10       >			   rl  b
 167+ EF27 ED 43 3A EF                      ld      (.LoadBCLength2+1),bc            ; self modifying to optimise laod on line 2
 168+ EF2B CD 55 EF                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 169+ EF2E E1           .Plot3Done:         pop     hl                              ; Stack + 0 get cy from stack into hl to save an ex as we have pre calculated x positions
 170+ EF2F              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 171+ EF2F              .Plot4a:            CalcNewPointMacro hl, sbc, ixh          ; now we have CY-X in hl
 171+ EF2F             >                    ClearCarryFlag
 171+ EF2F B7          >                        or a
 171+ EF30 06 00       >                    ld      b,0
 171+ EF32 DD 4C       >                    ld      c,ixh
 171+ EF34 ED 42       >                    sbc    hl,bc
 172+ EF36 11 00 00     .LoadDEXStart2:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 173+ EF39 01 00 00     .LoadBCLength2:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 174+ EF3C CD 55 EF                         call	.PlotLine                       ;
 175+ EF3F D9           .PlotDone:          exx                                     ; get back data from alternate registers
 176+ EF40 CB 7C        .IncrementCircle:	bit     7,h			                  	; Check for Hl<=0
 177+ EF42 28 03                            jr z,   .draw_circle_1
 178+ EF44 19                               add hl,de			                    ; Delta=Delta+D1
 179+ EF45 18 05                            jr      .draw_circle_2		            ;
 180+ EF47 09           .draw_circle_1:		add     hl,bc		                    ; Delta=Delta+D2
 181+ EF48 03                               inc     bc
 182+ EF49 03                               inc     bc			                    ; D2=D2+2
 183+ EF4A DD 25                            dec     ixh			                    ; Y=Y-1
 184+ EF4C 03           .draw_circle_2:		inc     bc			                    ; D2=D2+2
 185+ EF4D 03                               inc     bc
 186+ EF4E 13                               inc     de			                    ; D1=D1+2
 187+ EF4F 13                               inc     de
 188+ EF50 DD 2C                            inc     ixl			                    ; X=X+1
 189+ EF52 C3 C7 EE                         jp      .CircleLoop
 190+ EF55              ;-- PERFORM THE LINE DRAW ----------------------------------;
 191+ EF55              ; comes in with de = left x , hl = y, bc = length
 192+ EF55              ; Note bc must be +ve < 32768
 193+ EF55              .PlotLine:
 194+ EF55 7C           .IsYOnScreen:       ld      a,h                             ; if y > 255 or < 0 then no line to draw
 195+ EF56 A7                               and     a                               ;
 196+ EF57 C0                               ret     nz                              ;
 197+ EF58 7D                               ld      a,l                             ;
 198+ EF59 A7                               and     a                               ;
 199+ EF5A F8                               ret     m                               ; if m set then y must be > 127
 200+ EF5B              ;-- now check X coordinate, if X < 256 then skip x position clip
 201+ EF5B 7A           .IsXOffRight:       ld      a,d                             ; if x >255
 202+ EF5C A7                               and     a
 203+ EF5D 28 19                            jr      z,.NoLeftClip                   ; if high is not set then no X clip
 204+ EF5F              ;-- if X > 255 then off screen so just skip line
 205+ EF5F F0           .LeftClip:          ret     p                               ; if its > 255 then no line
 206+ EF60              ;-- if its off the left then add distance, if this is < 0 then off screen skip
 207+ EF60 E5           .IsTotallyOffLeft:  push    hl                              ; if X pos + length <0 then no line
 208+ EF61 62 6B                            ld      hl,de                           ; .
 209+ EF63                                  ClearCarryFlag                          ; .
 209+ EF63 B7          >                        or a
 210+ EF64              ;    but also this calculation gives us the line length if x is clipped to 90
 211+ EF64 ED 4A                            adc     hl,bc                           ; .
 212+ EF66 44 4D                            ld      bc,hl                           ; save the result in HL as this is also line length from hl = 0
 213+ EF68 E1                               pop     hl                              ; .
 214+ EF69 F8                               ret     m                               ; if x + distance < 0 then off screen skip
 215+ EF6A              ;-- now as its on screen but clipped x < 0 we can just draw a line from 0 to x+d, maxed at x+d = 255
 216+ EF6A 11 00 00     .ClippedSpanX:      ld      de,0                            ; if off left X = 0, bc already calcualted above in ADC
 217+ EF6D 78                               ld      a,b                             ; if bc < 255 then good
 218+ EF6E A7                               and     a
 219+ EF6F CA 8C EF                         jp      z,.NoPopPlotColour              ;
 220+ EF72 01 FF 00                         ld      bc,255                          ; max length
 221+ EF75 C3 8C EF                         jp      .NoPopPlotColour                ; we can now just draw
 222+ EF78              ;-- No left side clipping needed so we just need to work out if x + d > 255
 223+ EF78 E5           .NoLeftClip:        push    hl                              ; STACK+1 if corrected x + length < 256 then
 224+ EF79 62 6B                            ld      hl,de                           ; just plot
 225+ EF7B 09                               add     hl,bc
 226+ EF7C 7C                               ld      a,h
 227+ EF7D B7                               or      a
 228+ EF7E E1                               pop     hl
 229+ EF7F CA 8C EF                         jp      z,.NoPopPlotColour
 230+ EF82              ;-- x + d > 255 so we plot from x to distance 255 - x
 231+ EF82 E5           .LengthClip:        push    hl
 232+ EF83 21 FF 00                         ld      hl,255
 233+ EF86                                  ClearCarryFlag
 233+ EF86 B7          >                        or a
 234+ EF87 ED 52                            sbc     hl,de                           ; now hl = corrected length
 235+ EF89 44 4D                            ld      bc,hl
 236+ EF8B              ;-- This entry point is if there is hl on the stack
 237+ EF8B E1           .PopHLPlotColour:   pop     hl
 238+ EF8C 51           .NoPopPlotColour:   ld      d,c             ; d = length
 239+ EF8D 4B                               ld      c,e             ; c = start X
 240+ EF8E 45                               ld      b,l             ; b = row Y
 241+ EF8F 1E 00        .PlotColour:        ld		e,0             ; This was originally indirect, where as it neeed to be value
 242+ EF91 CD 77 E4                         call    l2_draw_horz_dma_bank
 243+ EF94                                  ClearCarryFlag
 243+ EF94 B7          >                        or a
 244+ EF95 C9                               ret
 245+ EF96 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 246+ EF97 B2                               or      d
 247+ EF98 C0                               ret     nz
 248+ EF99 CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 249+ EF9B C0                               ret     nz
 250+ EF9C 78                               ld      a,b             ; a = colour
 251+ EF9D 43                               ld      b,e             ; b = y
 252+ EF9E 4D                               ld      c,l             ; c = x
 253+ EF9F CD B6 E2                         call    l2_plot_pixel
 254+ EFA2 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1407  EFA3                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ EFA3
   2+ EFA3 FF FF        starty                  DW     $FFFF
   3+ EFA5 FF FF        endy                    DW     $FFFF
   4+ EFA7 CF           traingleColor           DB     $CF
   5+ EFA8 00 00 00...  SaveArrayS1             DS     128*2
   6+ F0A8 00 00 00...  SaveArrayS2             DS     128*2
   7+ F1A8
   8+ F1A8                  INCLUDE "./Layer2Graphics/BBCEliteDirectMappingLL118.asm"
# file opened: ././Layer2Graphics/BBCEliteDirectMappingLL118.asm
   1++F1A8                              IFDEF DEBUG_LL122_DIRECT
   2++F1A8 ~                                    ; (Y X) = (S R) * Q
   3++F1A8 ~                                    ; yxregpair = (20 * 140)/256 = 16d 10h
   4++F1A8 ~            Debug_LL122_6502:       ld      hl, 20
   4++F1A8 ~             ld      (SRvarPair),hl
   5++F1A8 ~                                    ld      a,  140
   5++F1A8 ~             ld      (Qvar),a
   6++F1A8 ~                                    call    LL122_6502  ; -10                               >> PASS
   7++F1A8 ~                                    ;break
   8++F1A8 ~                                    ; yxregpair = 20 * 140 = 17d 11h
   9++F1A8 ~                                    ld      hl, 20
   9++F1A8 ~             ld      (SRvarPair),hl
  10++F1A8 ~                                    ld      a,  230
  10++F1A8 ~             ld      (Qvar),a
  11++F1A8 ~                                    call    LL122_6502  ; -17                               >> PASS
  12++F1A8 ~                                    break
  13++F1A8 ~                                    ret
  14++F1A8                              ENDIF
  15++F1A8
  16++F1A8              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
  17++F1A8
  18++F1A8                              IFDEF DEBUG_LL121_DIRECT
  19++F1A8 ~                                    ; (Y X) = (S R) / Q
  20++F1A8 ~                                    ; yxregpair = 20 / 140 = 20*256 / 140 = 36d, 24h
  21++F1A8 ~            Debug_LL121_6502:       ld      hl, 20
  21++F1A8 ~             ld      (SRvarPair),hl
  22++F1A8 ~                                    ld      a,  140
  22++F1A8 ~             ld      (Qvar),a
  23++F1A8 ~                                    call    LL121_6502  ; -36                               >> PASS
  24++F1A8 ~                                    ;break
  25++F1A8 ~                                    ; yxregpair =  20 / 140 = 20*256 / 230 = 22d, 11h
  26++F1A8 ~                                    ld      hl, 20
  26++F1A8 ~             ld      (SRvarPair),hl
  27++F1A8 ~                                    ld      a,  230
  27++F1A8 ~             ld      (Qvar),a
  28++F1A8 ~                                    call    LL121_6502  ; -22                               >> PASS
  29++F1A8 ~                                    ;break
  30++F1A8 ~                                    ret
  31++F1A8                              ENDIF
  32++F1A8
  33++F1A8                              IFDEF DEBUG_LL129_DIRECT
  34++F1A8 ~            Debug_LL129_6502:       ld      hl,-20
  34++F1A8 ~             ld     (SRvarPair),hl
  35++F1A8 ~                                    ld      a, 0
  35++F1A8 ~             ld     (XX12p3),a
  36++F1A8 ~                                    ld      a, 10
  36++F1A8 ~             ld     (XX12p2),a
  37++F1A8 ~                                    call    LL129_6502  ; expect q = 10, a = $FF SR = 20    >> PASS
  38++F1A8 ~                                    ;break
  39++F1A8 ~                                    ld      hl,20
  39++F1A8 ~             ld     (SRvarPair),hl
  40++F1A8 ~                                    ld      a, 0
  40++F1A8 ~             ld     (XX12p3),a
  41++F1A8 ~                                    ld      a, 40
  41++F1A8 ~             ld     (XX12p2),a
  42++F1A8 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 20     >> PASS
  43++F1A8 ~                                    ;break
  44++F1A8 ~                                    ld      hl,40
  44++F1A8 ~             ld     (SRvarPair),hl
  45++F1A8 ~                                    ld      a, $FF
  45++F1A8 ~             ld     (XX12p3),a
  46++F1A8 ~                                    ld      a, 40
  46++F1A8 ~             ld     (XX12p2),a
  47++F1A8 ~                                    call    LL129_6502  ; expect q = 40, a = $FF SR = 40    >> PASS
  48++F1A8 ~                                    ;break
  49++F1A8 ~                                    ld      hl,-40
  49++F1A8 ~             ld     (SRvarPair),hl
  50++F1A8 ~                                    ld      a, $FF
  50++F1A8 ~             ld     (XX12p3),a
  51++F1A8 ~                                    ld      a, 40
  51++F1A8 ~             ld     (XX12p2),a
  52++F1A8 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 40     >> PASS
  53++F1A8 ~                                    ;break
  54++F1A8 ~                                    ret
  55++F1A8                              ENDIF
  56++F1A8
  57++F1A8                              IFDEF DEBUG_LL120_DIRECT
  58++F1A8 ~            Debug_LL120_6502:       ld      a,0
  58++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  59++F1A8 ~                                    ld      hl,20
  59++F1A8 ~             ld a,h
  59++F1A8 ~              ld (Svar),a
  59++F1A8 ~              ld a,l
  59++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  60++F1A8 ~                                    ld      a,140
  60++F1A8 ~             ld      (XX12p2),a                ; XX12+2  140, gradient 0.546875
  61++F1A8 ~                                    ld      a,0
  61++F1A8 ~             ld      (XX12p3),a                ; SLOPE DIRECTION so -ve result
  62++F1A8 ~                                    ; post LL129 Q = 140 a = 00  SR YX = (20 * 140) /256 * -1 = -10
  63++F1A8 ~                                    call    LL120_6502  ; Expect mulitply so (Y X) -10      >> PASS
  64++F1A8 ~                                    ;break
  65++F1A8 ~                                    ld      a,0
  65++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  66++F1A8 ~                                    ld      hl,20
  66++F1A8 ~             ld a,h
  66++F1A8 ~              ld (Svar),a
  66++F1A8 ~              ld a,l
  66++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  67++F1A8 ~                                    ld      a,140
  67++F1A8 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  68++F1A8 ~                                    ld      a,$FF
  68++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION so +ve result
  69++F1A8 ~                                    ; post LL129 Q = 140 a = FF  SR = 20  YX = (20 * 140) /256 = 10
  70++F1A8 ~                                    call    LL120_6502  ; Expect / so (Y X)10                   >> PASS
  71++F1A8 ~                                    ;break
  72++F1A8 ~                                    ld      a,$FF
  72++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  73++F1A8 ~                                    ld      hl,20
  73++F1A8 ~             ld a,h
  73++F1A8 ~              ld (Svar),a
  73++F1A8 ~              ld a,l
  73++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  74++F1A8 ~                                    ld      a,140
  74++F1A8 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  75++F1A8 ~                                    ld      a,$00
  75++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so -ve result
  76++F1A8 ~                                    ; post LL129 Q = 140 a = 00  SR = 20  YX = (20 *256 / 140) = -36
  77++F1A8 ~                                    call    LL120_6502  ; Expect / so (Y X)-36
  78++F1A8 ~                                    ld      a,$FF
  78++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  79++F1A8 ~                                    ld      hl,20
  79++F1A8 ~             ld a,h
  79++F1A8 ~              ld (Svar),a
  79++F1A8 ~              ld a,l
  79++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  80++F1A8 ~                                    ld      a,140
  80++F1A8 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  81++F1A8 ~                                    ld      a,$FF
  81++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so +ve result
  82++F1A8 ~                                    ; post LL129 Q = 140 a = 00 SR = 20 YX = (20 *256 / 140) = 36
  83++F1A8 ~                                    call    LL120_6502  ; Expect / so (Y X)  36                   >> PASS
  84++F1A8 ~                                    ret
  85++F1A8                              ENDIF
  86++F1A8              ;----------------------------------------------------------------------------------------------------------------------------
  87++F1A8              ;-- Calculate the following:
  88++F1A8              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2
  89++F1A8              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2
  90++F1A8              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
  91++F1A8                              IFDEF DEBUG_LL123_DIRECT
  92++F1A8 ~            Debug_LL123_6502:       ld      a,$00
  92++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  93++F1A8 ~                                    ld      hl,20
  93++F1A8 ~             ld      (SRvarPair),hl
  94++F1A8 ~                                    ld      a,140
  94++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
  95++F1A8 ~                                    ld      a,0
  95++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
  96++F1A8 ~                                    call    LL123_6502  ; Expect * so (Y X)-36 = (20 / 140 ) * 256 * -1 PASS
  97++F1A8 ~                                    ;break
  98++F1A8 ~                                    ld      a,$00
  98++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  99++F1A8 ~                                    ld      hl,20
  99++F1A8 ~             ld      (SRvarPair),hl
 100++F1A8 ~                                    ld      a,140
 100++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 101++F1A8 ~                                    ld      a,$FF
 101++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 102++F1A8 ~                                    call    LL123_6502  ; Expect * so (Y X)36 = (20 / 140 ) * 256  PASS
 103++F1A8 ~                                    ;break
 104++F1A8 ~                                    ld      a,$FF
 104++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 105++F1A8 ~                                    ld      hl,20
 105++F1A8 ~             ld      (SRvarPair),hl
 106++F1A8 ~                                    ld      a,140
 106++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 107++F1A8 ~                                    ld      a,$00
 107++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 108++F1A8 ~                                    call    LL123_6502  ; Expect / so (Y X)-10 (20 * 140 ) / 256 * -1 PASS
 109++F1A8 ~                                    ld      a,$FF
 109++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 110++F1A8 ~                                    ld      hl,20
 110++F1A8 ~             ld      (SRvarPair),hl
 111++F1A8 ~                                    ld      a,140
 111++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 112++F1A8 ~                                    ld      a,$FF
 112++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 113++F1A8 ~                                    call    LL123_6502  ; Expect / so (Y X) 10 (20 * 140 ) / 256  PASS
 114++F1A8 ~                                    ret
 115++F1A8                              ENDIF
 116++F1A8
 117++F1A8                              IFDEF DEBUG_LL118_DIRECT
 118++F1A8 ~            Debug_LL118_6502:       ld      a,$FF
 118++F1A8 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 119++F1A8 ~                                    ld      hl,-20
 119++F1A8 ~             ld      (XX1510),hl               ; x1 = -20
 120++F1A8 ~                                    ld      hl,-20
 120++F1A8 ~             ld      (XX1532),hl               ; y1 = -20
 121++F1A8 ~                                    ld      a,120
 121++F1A8 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 122++F1A8 ~                                    ld      a,0
 122++F1A8 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 123++F1A8 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 124++F1A8 ~                                    call    LL118_6502  ; Expect * so x = 0 y =  -20 + (-20/(120/256)) = 22, x1 = 0 so stop there PASS
 125++F1A8 ~                                    ;break
 126++F1A8 ~
 127++F1A8 ~                                    ld      a,$FF
 127++F1A8 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 128++F1A8 ~                                    ld      hl,-30
 128++F1A8 ~             ld      (XX1510),hl               ; x1 = -20
 129++F1A8 ~                                    ld      hl,-20
 129++F1A8 ~             ld      (XX1532),hl               ; y1 = -20
 130++F1A8 ~                                    ld      a,60
 130++F1A8 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 131++F1A8 ~                                    ld      a,0
 131++F1A8 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 132++F1A8 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 133++F1A8 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 134++F1A8 ~                                    ;break
 135++F1A8 ~
 136++F1A8 ~                                    ld      a,$0
 136++F1A8 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 137++F1A8 ~                                    ld      hl,-20
 137++F1A8 ~             ld      (XX1510),hl               ; x1 = -20
 138++F1A8 ~                                    ld      hl,-20
 138++F1A8 ~             ld      (XX1532),hl               ; y1 = -20
 139++F1A8 ~                                    ld      a,60
 139++F1A8 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 140++F1A8 ~                                    ld      a,0
 140++F1A8 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 141++F1A8 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 142++F1A8 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 143++F1A8 ~                                    ;break
 144++F1A8 ~                                    ret
 145++F1A8 ~
 146++F1A8                              ENDIF
 147++F1A8
 148++F1A8                              IFDEF DEBUG_LL28_6502
 149++F1A8 ~            Debug_LL28_6502:        ld      a,27
 149++F1A8 ~             ld     (Qvar),a
 150++F1A8 ~                                    ld      a,76
 151++F1A8 ~                                    call    LL28_6502   ; Expect $FF carry
 152++F1A8 ~                                    ;break
 153++F1A8 ~                                    ld      a,76
 153++F1A8 ~             ld     (Qvar),a
 154++F1A8 ~                                    ld      a,27        ; Expect 2
 155++F1A8 ~                                    call    LL28_6502
 156++F1A8 ~                                    ;break
 157++F1A8 ~                                    ld      a,200
 157++F1A8 ~             ld     (Qvar),a
 158++F1A8 ~                                    ld      a,50
 159++F1A8 ~                                    call    LL28_6502   ; Expect 4
 160++F1A8 ~                                    ;break
 161++F1A8 ~                                    ld      a,97
 161++F1A8 ~             ld     (Qvar),a
 162++F1A8 ~                                    ld      a,76
 163++F1A8 ~                                    call    LL28_6502   ; Expect 1
 164++F1A8 ~                                    ;break
 165++F1A8 ~                                    ld      a,$20
 165++F1A8 ~             ld     (Qvar),a
 166++F1A8 ~                                    ld      a,$10
 167++F1A8 ~                                    call    LL28_6502   ; Expect 1
 168++F1A8 ~                                    ;break
 169++F1A8 ~                                    ld      d,27
 170++F1A8 ~                                    ld      a,76
 171++F1A8 ~                                    call    AEquAmul256DivD
 172++F1A8 ~                                    ;break
 173++F1A8 ~                                    ld      d,76
 174++F1A8 ~                                    ld      a,27
 175++F1A8 ~                                    call    AEquAmul256DivD
 176++F1A8 ~                                    ;break
 177++F1A8 ~                                    ld      d,200
 178++F1A8 ~                                    ld      a,50
 179++F1A8 ~                                    call    AEquAmul256DivD
 180++F1A8 ~                                    ;break
 181++F1A8 ~                                    ld      d,$20
 182++F1A8 ~                                    ld      a,$10
 183++F1A8 ~                                    call    AEquAmul256DivD
 184++F1A8 ~                                    ;break
 185++F1A8 ~                                    ret
 186++F1A8                              ENDIF
 187++F1A8
 188++F1A8
 189++F1A8                              IFDEF DEBUG_LL145_6502
 190++F1A8 ~            Debug_LL145_6502:       ; ld  a,1      : ld  (UbnkLineArrayLen),a
 191++F1A8 ~                                    ; ld  hl,$0116 : ld  (UbnkLineArray),hl
 192++F1A8 ~                                    ; ld  hl,$004B : ld  (UbnkLineArray+2),hl
 193++F1A8 ~                                    ; ld  hl,$00F8 : ld  (UbnkLineArray+4),hl
 194++F1A8 ~                                    ; ld  hl,$002F : ld  (UbnkLineArray+6),hl
 195++F1A8 ~                                    ; call    DrawLinesLateClipping : ;break
 196++F1A8 ~                                    ; ld  a,1      : ld  (UbnkLineArrayLen),a
 197++F1A8 ~                                    ; ld  hl,$0033 : ld  (UbnkLineArray),hl
 198++F1A8 ~                                    ; ld  hl,$0016 : ld  (UbnkLineArray+2),hl
 199++F1A8 ~                                    ; ld  hl,$001D : ld  (UbnkLineArray+4),hl
 200++F1A8 ~                                    ; ld  hl,$FFBE : ld  (UbnkLineArray+6),hl
 201++F1A8 ~                                    ; call    DrawLinesLateClipping : ;break
 202++F1A8 ~                                    ; ld  a,1      : ld  (UbnkLineArrayLen),a
 203++F1A8 ~                                    ; ld  hl,$0055 : ld  (UbnkLineArray),hl
 204++F1A8 ~                                    ; ld  hl,$FF83 : ld  (UbnkLineArray+2),hl
 205++F1A8 ~                                    ; ld  hl,$0033 : ld  (UbnkLineArray+4),hl
 206++F1A8 ~                                    ; ld  hl,$0016 : ld  (UbnkLineArray+6),hl
 207++F1A8 ~                                    ; call    DrawLinesLateClipping :  ;break
 208++F1A8 ~
 209++F1A8 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 210++F1A8 ~                                    ;ld  hl,$00B3 : ld  (UbnkLineArray),hl
 211++F1A8 ~                                    ;ld  hl,$0054 : ld  (UbnkLineArray+2),hl
 212++F1A8 ~                                    ;ld  hl,$005d : ld  (UbnkLineArray+4),hl
 213++F1A8 ~                                    ;ld  hl,$ffd5 : ld  (UbnkLineArray+6),hl
 214++F1A8 ~                                    ;call    DrawLinesLateClipping :  ;break
 215++F1A8 ~                                    ;
 216++F1A8 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 217++F1A8 ~                                    ;ld  hl,$005d : ld  (UbnkLineArray),hl
 218++F1A8 ~                                    ;ld  hl,$ffd5 : ld  (UbnkLineArray+2),hl
 219++F1A8 ~                                    ;ld  hl,$00b9 : ld  (UbnkLineArray+4),hl
 220++F1A8 ~                                    ;ld  hl,$0028 : ld  (UbnkLineArray+6),hl
 221++F1A8 ~                                    ;call    DrawLinesLateClipping :  ;break
 222++F1A8 ~
 223++F1A8 ~                                    ld  a,1
 223++F1A8 ~              ld  (UbnkLineArrayLen),a
 224++F1A8 ~                                    ld  hl,$ffc7
 224++F1A8 ~              ld  (UbnkLineArray),hl
 225++F1A8 ~                                    ld  hl,$001a
 225++F1A8 ~              ld  (UbnkLineArray+2),hl
 226++F1A8 ~                                    ld  hl,$005d
 226++F1A8 ~              ld  (UbnkLineArray+4),hl
 227++F1A8 ~                                    ld  hl,$ffd5
 227++F1A8 ~              ld  (UbnkLineArray+6),hl
 228++F1A8 ~                                    call    DrawLinesLateClipping
 228++F1A8 ~               ;break
 229++F1A8 ~
 230++F1A8 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 231++F1A8 ~                                    ;ld  hl,$0089 : ld  (UbnkLineArray),hl
 232++F1A8 ~                                    ;ld  hl,$00e2 : ld  (UbnkLineArray+2),hl
 233++F1A8 ~                                    ;ld  hl,$fff3 : ld  (UbnkLineArray+4),hl
 234++F1A8 ~                                    ;ld  hl,$00b9 : ld  (UbnkLineArray+6),hl
 235++F1A8 ~                                    ;call    DrawLinesLateClipping :  ;break
 236++F1A8 ~
 237++F1A8 ~                                    ret
 238++F1A8                              ENDIF
 239++F1A8                      DEFINE DEBUG_6502_LINE_CLIPPING
 240++F1A8                      IFDEF DEBUG_6502_LINE_CLIPPING
 241++F1A8
 242++F1A8 00           xX13        DB 0
 243++F1A9 00 00        XX1510      DW 0    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 244++F1AB 00 00        XX1532      DW 0    ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 245++F1AD 00 00        XX1554      DW 0    ; x2
 246++F1AF              XX1554p1    EQU XX1554+1
 247++F1AF 00 00        XX1576      DW 0    ; y2
 248++F1B1              XX1210      EQU XX1576
 249++F1B1              XX12p1      EQU XX1210+1
 250++F1B1              XX15X1lo    EQU XX1510
 251++F1B1              XX15X1hi    EQU XX1510+1
 252++F1B1              XX15Y1lo    EQU XX1532
 253++F1B1              XX15Y1hi    EQU XX1532+1
 254++F1B1              XX15X2lo    EQU XX1554
 255++F1B1              XX15X2hi    EQU XX1554+1
 256++F1B1              XX15Y2lo    EQU XX1210
 257++F1B1              XX15Y2hi    EQU XX1210+1
 258++F1B1
 259++F1B1 00           XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
 260++F1B2 00           XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
 261++F1B3 00           XX12p4      DB 0
 262++F1B4 00           XX12p5      DB 0
 263++F1B5              Delta_x     EQU XX12p2
 264++F1B5              Delta_y     EQU XX12p4
 265++F1B5 00           Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX)
 266++F1B6                                  ; Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
 267++F1B6 00           Qvar        DB 0
 268++F1B7 00           Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
 269++F1B8 00           Svar        DB 0    ; sign variable
 270++F1B9              SRvarPair   EQU Rvar
 271++F1B9 00           Xreg        DB 0
 272++F1BA 00           Yreg        DB 0
 273++F1BB              YXregPair   EQU Xreg
 274++F1BB
 275++F1BB              ;-- Name: LL28 Calculate R = 256 * A / Q
 276++F1BB              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
 277++F1BB              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
 278++F1BB              ;   Reg mapping 6502  Z80
 279++F1BB              ;               a     a
 280++F1BB              ;               b     x
 281++F1BB              ;               c     q
 282++F1BB              ;               d     r
 283++F1BB              ;
 284++F1BB 21 B6 F1     LL28_6502:          ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 285++F1BE 4E                               ld      c,(hl)                  ; using c as Q var
 286++F1BF B9                               cp      c
 287++F1C0                                  FlipCarryFlag
 287++F1C0 3F          >                        ccf
 288++F1C1 DA E9 F1                         jp      c, LL2_6502             ; BCS LL2                \ so jump to LL2 to return 255
 289++F1C4 06 FE                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 290++F1C6 CB 27        LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 291++F1C8 DA DD F1                         jp      c,LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 292++F1CB                                  FlipCarryFlag                   ;                          If A < N, then C flag is set.
 292++F1CB 3F          >                        ccf
 293++F1CC                                  JumpIfALTNusng c, LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 293++F1CC B9          >                        cp      c
 293++F1CD DA D2 F1    >                        jp		c, LL31_SKIPSUB_6502
 294++F1D0                                                                  ; BCC P%+4
 295++F1D0 91                               sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 296++F1D1                                  ClearCarryFlag
 296++F1D1 B7          >                        or a
 297++F1D2              LL31_SKIPSUB_6502:  FlipCarryFlag
 297++F1D2 3F          >                        ccf
 298++F1D3 CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 299++F1D5 DA C6 F1                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 300++F1D8 78                               ld      a,b
 301++F1D9 32 B7 F1                         ld      (Rvar),a
 302++F1DC C9                               ret                             ; RTS                    \ R left with remainder of division
 303++F1DD 91           LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 304++F1DE                                  SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 304++F1DE 37          >                        scf
 305++F1DF CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 306++F1E1 DA C6 F1                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 307++F1E4 78                               ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 308++F1E5 32 B7 F1                         ld      (Rvar),a                ; .
 309++F1E8 C9                               ret                             ; .                      \ remainder of the division
 310++F1E9 3E FF        LL2_6502:           ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 311++F1EB 32 B7 F1                         ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 312++F1EE                                  SetCarryFlag                    ; we failed so need carry flag set
 312++F1EE 37          >                        scf
 313++F1EF C9                               ret                             ; RTS                    \ Return from the subroutine
 314++F1F0
 315++F1F0 3A B9 F1     ADDXRegtoY1:        ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 316++F1F3 4F                               ld      c,a
 317++F1F4 06 00                            ld      b,0
 318++F1F6 2A AB F1                         ld      hl,(XX1532)
 319++F1F9                                  ClearCarryFlag
 319++F1F9 B7          >                        or a
 320++F1FA ED 4A                            adc     hl,bc
 321++F1FC 22 AB F1                         ld      (XX1532),hl
 322++F1FF C9                               ret
 323++F200
 324++F200 ED 4B B9 F1  ADDYXRegtoY1:       ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 325++F204 2A AB F1                         ld      hl,(XX1532)
 326++F207                                  ClearCarryFlag
 326++F207 B7          >                        or a
 327++F208 ED 4A                            adc     hl,bc
 328++F20A 22 AB F1                         ld      (XX1532),hl
 329++F20D C9                               ret
 330++F20E
 331++F20E ED 4B B9 F1  ADDYXRegtoX1:       ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 332++F212 2A A9 F1                         ld      hl,(XX1510)
 333++F215                                  ClearCarryFlag
 333++F215 B7          >                        or a
 334++F216 ED 4A                            adc     hl,bc
 335++F218 22 A9 F1                         ld      (XX1510),hl
 336++F21B C9                               ret
 337++F21C
 338++F21C 2A AB F1     SUBBCFromY1:        ld      hl,(XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 339++F21F                                  ClearCarryFlag
 339++F21F B7          >                        or a
 340++F220 ED 42                            sbc     hl,bc
 341++F222 22 B7 F1                         ld      (SRvarPair),hl
 342++F225 C9                               ret
 343++F226
 344++F226 2A B9 F1     AddSRToYX:          ld      hl,(YXregPair)
 345++F229 ED 5B B7 F1                      ld      de,(SRvarPair)
 346++F22D                                  ClearCarryFlag
 346++F22D B7          >                        or a
 347++F22E ED 5A                            adc     hl,de
 348++F230 22 B9 F1                         ld      (YXregPair),hl
 349++F233 C9                               ret
 350++F234
 351++F234
 352++F234
 353++F234 7C           ClampX:             ld      a,h
 354++F235 A7                               and     a
 355++F236 7D                               ld      a,l
 356++F237 C8                               ret     z
 357++F238 F2 3D F2                         jp      p,.Max255
 358++F23B              .Min0:              ZeroA
 358++F23B AF          >                        xor a
 359++F23C C9                               ret
 360++F23D 3E FF        .Max255:            ld      a,$FF
 361++F23F C9                               ret
 362++F240
 363++F240 7C           ClampY:             ld      a,h
 364++F241 A7                               and     a
 365++F242 CA 4D F2                         jp      z,.ClampYlo
 366++F245 F2 4A F2                         jp      p,.Max127
 367++F248              .Min0:              ZeroA
 367++F248 AF          >                        xor a
 368++F249 C9                               ret
 369++F24A 3E 7F        .Max127:            ld      a,127
 370++F24C C9                               ret
 371++F24D 7D           .ClampYlo:          ld      a,l
 372++F24E A7                               and     a
 373++F24F F0                               ret     p
 374++F250 3E 7F                            ld      a,127
 375++F252 C9                               ret
 376++F253
 377++F253              ;-- Rountes to code:
 378++F253              ;-- LL118
 379++F253              ;-- LL120   Done
 380++F253              ;-- LL129   Done
 381++F253              ;-- LL123   Done
 382++F253                              ; NOTE DOES ABS ONLY
 383++F253
 384++F253
 385++F253                              ;--- LL118 Move along a point until on screen
 386++F253              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 387++F253              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 388++F253              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 389++F253              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 390++F253              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 391++F253              ;  Out  XX150               x1 as an 8-bit coordinate
 392++F253              ;       XX152               y1 as an 8-bit coordinate
 393++F253              ;----------------------------------------------------------------------------------------------------------------
 394++F253
 395++F253
 396++F253              ;---------------------------------------------------------------------------------------------------------------------
 397++F253              ;--  Calculate the following:
 398++F253              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 399++F253              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 400++F253              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 401++F253              ;---------------------------------------------------------------------------------------------------------------------
 402++F253 3A A9 F1     LL120_6502:         ld      a,(XX1510)              ;LDA XX15               \ Set R = x1_lo
 403++F256 32 B7 F1                         ld      (Rvar),a                ;STA R
 404++F259 CD 05 F3                         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 405++F25C F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 406++F25D              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 407++F25D 3A B5 F1                         ld      a,(Tvar)                ; .
 408++F260 32 B9 F1                         ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 409++F263 A7                               and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 410++F264              ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 411++F264 20 48                            jr      nz,LL121_6502           ;.
 412++F266              ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 413++F266              LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 413++F266 AF          >                        xor a
 414++F267                          IFDEF DEBUG_LL122_DIRECT
 415++F267 ~                                DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 416++F267 ~                                push    af
 417++F267                          ENDIF
 418++F267 32 B9 F1                         ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 419++F26A 32 BA F1                         ld      (Yreg),a                ;TAY
 420++F26D 21 B8 F1                         ld      hl,Svar
 421++F270 ED 4B B7 F1                      ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 422++F274                                  ShiftBCRight1                   ;ROR R                  \ into the C flag
 422++F274 CB 38       >			   srl b
 422++F276 CB 19       >			   rr  c
 423++F278 ED 43 B7 F1                      ld      (SRvarPair),bc
 424++F27C 21 B6 F1                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 425++F27F CB 26                            sla     (hl)                    ;.
 426++F281 30 03                            jr      nc, LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 427++F283                                                                  ;                         the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 428++F283 CD 26 F2     LL125_6502:         call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 429++F286 ED 4B B7 F1  LL126_6502:         ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 430++F28A                                  ShiftBCRight1                   ;ROR R
 430++F28A CB 38       >			   srl b
 430++F28C CB 19       >			   rr  c
 431++F28E ED 43 B7 F1                      ld      (SRvarPair),bc          ;.
 432++F292 21 B6 F1                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 433++F295 CB 26                            sla     (hl)                    ;.
 434++F297 38 EA                            jr      c,LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 435++F299 20 EB                            jr      nz,LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the "shift" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 436++F29B F1                               pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 437++F29C A7                               and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 438++F29D F2 F6 F2                         jp      p,LL133_6502            ;.
 439++F2A0              ;.. return from the subroutine using a tail call
 440++F2A0 C9                               ret                             ;RTS                    \ Return from the subroutine
 441++F2A1
 442++F2A1              ;----------------------------------------------------------------------------------------------------------------------------
 443++F2A1              ;-- Calculate the following:
 444++F2A1              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 445++F2A1              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 446++F2A1              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 447++F2A1 CD 05 F3     LL123_6502:         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 448++F2A4 F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 449++F2A5              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 450++F2A5 3A B5 F1                         ld      a,(Tvar)                ; .
 451++F2A8 32 B9 F1                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 452++F2AB A7                               and     a                       ;.
 453++F2AC              ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 454++F2AC 20 B8                            jr      nz,LL122_6502           ;.
 455++F2AE              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 456++F2AE 3E FF        LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 457++F2B0 32 BA F1                         ld      (Yreg),a                ;TAY
 458++F2B3 CB 27                            sla     a                       ;ASL A                  \ Set X = %11111110
 459++F2B5 32 B9 F1                         ld      (Xreg),a                ;TAX
 460++F2B8              ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 461++F2B8 ED 4B B7 F1  LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 462++F2BC                                  ShiftBCLeft1                    ;.
 462++F2BC CB 21       >			   sla c
 462++F2BE CB 10       >			   rl  b
 463++F2C0 ED 43 B7 F1                      ld      (SRvarPair),bc          ;ROL S
 464++F2C4 3A B8 F1                         ld      a,(Svar)                ;LDA S                  \ Set A = S
 465++F2C7 38 07                            jr      c, LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 466++F2C9 21 B6 F1                         ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 467++F2CC BE                               cp      (hl)
 468++F2CD                                  FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 468++F2CD 3F          >                        ccf
 469++F2CE 30 12                            jr      nc,LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 470++F2D0              LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 470++F2D0 3F          >                        ccf
 471++F2D1 9E                               sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 472++F2D2 32 B8 F1                         ld      (Svar),a                ;STA S
 473++F2D5 3A B7 F1                         ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 474++F2D8                                  ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 474++F2D8 B7          >                        or a
 475++F2D9 DE 00                            sbc     0                       ;SBC #0
 476++F2DB 32 B7 F1                         ld      (Rvar),a                ;STA R
 477++F2DE                                  SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 477++F2DE 37          >                        scf
 478++F2DF C3 E3 F2                         jp      LL132_6502              ;added so that we can do a 6502 style carry above
 479++F2E2 00           LL132A_6502:        nop; FlipCarryFlag
 480++F2E3 ED 4B B9 F1  LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 481++F2E7                                  RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 481++F2E7 CB 11       >               rl  c
 481++F2E9 CB 10       >               rl  b
 482++F2EB ED 43 B9 F1                      ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 483++F2EF 38 C7                            jr      c, LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 484++F2F1                          IFDEF DEBUG_LL121_DIRECT
 485++F2F1 ~                                DISPLAY "DIRECT CALL TO LL121 so dummy push"
 486++F2F1 ~                                push    af
 487++F2F1                          ENDIF
 488++F2F1 F1                               pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 489++F2F2 A7                               and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 490++F2F3 FA 04 F3                         jp      m, LL128_6502           ; .                      \ subroutine with (Y X) as is
 491++F2F6 ED 4B B9 F1  LL133_6502:         ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 492++F2FA                                  macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 492++F2FA AF          >					xor 	a
 492++F2FB 91          >                    sub 	c
 492++F2FC 4F          >                    ld 		c,a
 492++F2FD 9F          >                    sbc 	a,a
 492++F2FE 90          >                    sub 	b
 492++F2FF 47          >                    ld 		b,a
 493++F300 ED 43 B9 F1                      ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 494++F304 C9           LL128_6502:         ret                             ; RTS                    \ Return from the subroutine
 495++F305              ;-------------------------------------------------------------------------------------------------------
 496++F305              ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 497++F305              ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 498++F305 F5           LL129_6502:         push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 499++F306 3A B1 F1                         ld      a,(XX12p2)              ;.
 500++F309 32 B9 F1                         ld      (Xreg),a                ;.
 501++F30C 32 B6 F1                         ld      (Qvar),a                ;STX Q
 502++F30F F1                               pop     af                      ;.
 503++F310 3A B8 F1                         ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 504++F313 A7                               and     a                       ;BPL LL127
 505++F314 F2 2C F3                         jp      p,LL127_6502            ;.
 506++F317                                  ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 506++F317 AF          >                        xor a
 507++F318                                  ClearCarryFlag                  ;SEC
 507++F318 B7          >                        or a
 508++F319 21 B7 F1                         ld      hl, Rvar                ;SBC R
 509++F31C 9E                               sbc     (hl)                    ;.
 510++F31D 32 B7 F1                         ld      (Rvar),a                ;STA R
 511++F320 3A B8 F1                         ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 512++F323 F5                               push    af                      ;PHA
 513++F324 EE FF                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 514++F326 CE 00                            adc     0                       ;ADC #0
 515++F328 32 B8 F1                         ld      (Svar),a                ;STA S
 516++F32B F1                               pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 517++F32C 21 B2 F1     LL127_6502:         ld      hl,XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 518++F32F AE                               xor     (hl)                    ;.
 519++F330 C9                               ret                             ;RTS                    \ Return from the subroutine
 520++F331              ;----------------------------------------------------------------------------------------------------------------
 521++F331              ;--- LL118 Move along a point until on screen
 522++F331              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 523++F331              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 524++F331              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 525++F331              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 526++F331              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 527++F331              ;  Out  XX150               x1 as an 8-bit coordinate
 528++F331              ;       XX152               y1 as an 8-bit coordinate
 529++F331              ;----------------------------------------------------------------------------------------------------------------
 530++F331
 531++F331 3A AA F1     LL118_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 532++F334 A7                               and     a                       ; BPL LL119              \ .
 533++F335 F2 52 F3                         jp      p, LL119_6502           ;                        \ following
 534++F338 32 B8 F1     .X1Negative:        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 535++F33B CD 53 F2                         call    LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 536++F33E                                                                  ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 537++F33E                                                                  ; with the sign of (Y X) set to the opposite of the line's direction of slope
 538++F33E CD 00 F2                         call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 539++F341 22 AB F1                         ld      (XX1532),hl             ; .
 540++F344 21 00 00                         ld      hl,0                    ; Set x1 = 0
 541++F347 22 A9 F1                         ld      (XX1510),hl             ; .
 542++F34A 3E 00                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 543++F34C 32 B9 F1                         ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 544++F34F C3 68 F3                         jp      LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 545++F352              ;-- Entering LL119 a will always be the value of X1 Hi byte
 546++F352 CA 68 F3     LL119_6502:         jp      z,LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 547++F355                                                                  ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 548++F355 32 B8 F1                         ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 549++F358 3D                               dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 550++F359 32 B8 F1                         ld      (Svar),a                ;
 551++F35C CD 53 F2                         call    LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 552++F35F                                                                  ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 553++F35F                                                                  ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 554++F35F CD 00 F2                         call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 555++F362 21 FF 00                         ld      hl,255                  ; LDX #255               \ Set x1 = 255
 556++F365 22 A9 F1                         ld      (XX1510),hl             ; STX XX15 ;INX; STX XX15+1
 557++F368              ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 558++F368 3A AC F1     LL134_6502:         ld      a,(XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 559++F36B A7                               and     a                       ; BPL LL135              \ the following
 560++F36C F2 84 F3                         jp      p, LL135_6502           ; .
 561++F36F 32 B8 F1                         ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 562++F372 3A AB F1                         ld      a, (XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 563++F375 32 B7 F1                         ld      (Rvar),a                ; STA R
 564++F378 CD A1 F2                         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 565++F37B                                                                  ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 566++F37B                                                                  ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 567++F37B CD 0E F2                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 568++F37E 21 00 00                         ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 569++F381 22 AB F1                         ld      (XX1532),hl             ; STA XX15+2, XX15+3
 570++F384 01 80 00     LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 571++F387 CD 1C F2                         call    SUBBCFromY1             ; .                      \ .
 572++F38A 38 0C                            jr      c, LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 573++F38C                                                                  ;                        \ to return from the subroutine, as we are done
 574++F38C              ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 575++F38C CD A1 F2     LL139_6502:         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 576++F38F                                                                  ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 577++F38F                                                                  ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 578++F38F CD 0E F2                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 579++F392 21 7F 00                         ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 580++F395 22 AB F1                         ld      (XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 581++F398 C9           LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 582++F399              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 583++F399              ;-- LL145 LINE CLIP
 584++F399              ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 585++F399              ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 586++F399              ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 587++F399              ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 588++F399              ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 589++F399              ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 590++F399              ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 591++F399              ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 592++F399                                  DISPLAY "TODO: treat horz vert and sigle pixel as special cases"
 593++F399              ; TODO treat horizonal/vert and single pixel as special cases
 594++F399              LL145_6502:         ZeroA                           ; LDA #0                 \ Set SWAP = 0
 594++F399 AF          >                        xor a
 595++F39A 32 18 C9                         ld      (SWAP),a                ; STA SWAP
 596++F39D 3A AE F1                         ld      a,(XX1554+1)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 597++F3A0 47                               ld      b,a                     ; .
 598++F3A1              ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 599++F3A1              ; for the screen coord we will use 127 though, we use c as a temporay X register
 600++F3A1 3E BF        LL147_6502:         ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 601++F3A3 32 B9 F1                         ld      (Xreg),a                ; .
 602++F3A6              ;                    ld      a,127
 603++F3A6              ;                    ld      c,a
 604++F3A6 78           .CheckX2Y2High:     ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 605++F3A7 21 B0 F1                         ld      hl,XX12p1               ; .
 606++F3AA B6                               or      (hl)                    ; .
 607++F3AB C2 BB F3                         jp      nz,LL107_6502           ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 608++F3AE 3E 7F        .CheckY2Lo:         ld      a,127 ;,c               ; get back the temporary x reg from c
 609++F3B0 21 AF F1                         ld      hl,XX1210               ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 610++F3B3 BE                               cp      (hl)                    ; .
 611++F3B4 DA BB F3                         jp      c,LL107_6502            ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 612++F3B7                                  ZeroA                           ; LDX #0                 \ Set X = 0
 612++F3B7 AF          >                        xor a
 613++F3B8 32 B9 F1                         ld      (Xreg),a
 614++F3BB 3A B9 F1     LL107_6502:         ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 615++F3BE 32 99 7E                         ld      (XX13),a                ; now c is released as a temporary x reg
 616++F3C1 3A AA F1                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 617++F3C4 21 AC F1                         ld      hl,XX1532+1             ; ORA XX15+3             \ to LL83
 618++F3C7 B6                               or      (hl)                    ; .
 619++F3C8 C2 08 F4                         jp      nz,LL83_6502            ; BNE LL83
 620++F3CB              ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 621++F3CB 3A AB F1                         ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 622++F3CE 26 7F                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 623++F3D0 BC                               cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 624++F3D1 D2 08 F4                         jp      nc, LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 625++F3D4 3A 99 7E                         ld      a,(XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 626++F3D7 A7                               and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 627++F3D8 C2 03 F4                         jp      nz,LL108_6502
 628++F3DB              ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 629++F3DB              ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 630++F3DB              ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 631++F3DB                  DEFINE CLAMPINGEXTREMES
 632++F3DB              LL146_6502: IFDEF CLAMPINGEXTREMES
 633++F3DB 2A A9 F1                         ld      hl,(XX1510)             ;  Save X1 to XX1510
 634++F3DE CD 34 F2                         call    ClampX
 635++F3E1 32 A9 F1                         ld      (XX1510),a
 636++F3E4                          ENDIF
 637++F3E4 2A AB F1                         ld      hl,(XX1532)             ;  hl = y1
 638++F3E7 CD 40 F2                         call    ClampY
 639++F3EA 32 AA F1                         ld      (XX1510+1),a            ;  XX1510... = [X1][Y1]
 640++F3ED
 641++F3ED 2A AD F1                         ld      hl,(XX1554)             ;  de = x2
 642++F3F0 CD 34 F2                         call    ClampX
 643++F3F3 32 AB F1                         ld      (XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 644++F3F6
 645++F3F6 2A AF F1                         ld      hl,(XX1576)             ;  bc = y2
 646++F3F9 CD 40 F2                         call    ClampY
 647++F3FC 32 AC F1                         ld      (XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 648++F3FF
 649++F3FF                                  ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 649++F3FF B7          >                        or a
 650++F400 C9                               ret                             ; RTS                    \ Return from the subroutine
 651++F401              LL109_6502:         SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 651++F401 37          >                        scf
 652++F402 C9                               ret                             ; RTS                    \ Return from the subroutine
 653++F403 21 99 7E     LL108_6502:         ld      hl,XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 654++F406 CB 3E                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 655++F408              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 656++F408              ;-- LL145 (Part 2 of 4)
 657++F408 3A 99 7E     LL83_6502:          ld      a,(XX13)                ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 658++F40B A7                               and     a                       ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 659++F40C F2 58 F4                         jp      p,LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 660++F40F              ;-- If we get here, both points are off-screen
 661++F40F 3A AA F1                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 662++F412 21 AE F1                         ld      hl,XX1554+1             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 663++F415 A6                               and     (hl)
 664++F416 FA 01 F4                         jp      m, LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 665++F419 3A AC F1                         ld      a,(XX1532+1)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 666++F41C 21 B0 F1                         ld      hl,XX1576+1             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 667++F41F A6                               and     (hl)                    ; BMI LL109              \ the entire line is to the left of the screen
 668++F420 FA 01 F4                         jp      m,LL109_6502            ; .
 669++F423 3A AA F1                         ld      a,(XX1510+1)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 670++F426 3D                               dec     a                       ; DEX
 671++F427 32 B9 F1                         ld      (Xreg),a                ; TXA
 672++F42A F5                               push    af                      ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 673++F42B 3A AE F1                         ld      a,(XX1554+1)            ; .
 674++F42E 3D                               dec     a                       ; DEX
 675++F42F 32 B9 F1                         ld      (Xreg),a                ; STX XX12+2
 676++F432 F1                               pop     af                      ; .              SP+0    restore a register
 677++F433 21 B0 F1                         ld      hl,XX1576+1             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 678++F436 B6                               or      (hl)                    ; .
 679++F437 F2 01 F4                         jp      p, LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 680++F43A              ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 681++F43A              ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 682++F43A 3A AB F1     LL83_DEBUG:         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 683++F43D FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 684++F43F 3A AC F1                         ld      a,(XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 685++F442              ;                    FlipCarryFlag                   ; as 6502 uses borrow in subtracts we flip for SBC as z80 CP does opposite too, if A < N carry set so flip
 686++F442 DE 00                            sbc     0                       ; SBC #0                 \ .
 687++F444 32 B1 F1                         ld      (XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 688++F447 3A AF F1                         ld      a,(XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 689++F44A FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 690++F44C 3A B0 F1                         ld      a,(XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 691++F44F              ;                    FlipCarryFlag
 692++F44F DE 00                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 693++F451 21 B1 F1                         ld      hl,XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 694++F454 B6                               or      (hl)                    ; .
 695++F455 F2 01 F4                         jp      p,LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 696++F458              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 697++F458              ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 698++F458 3A BA F1     LL115_6502:         ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 699++F45B F5                               push    af                      ; PHA            SP+1    \ call to this subroutine
 700++F45C 2A AD F1                         ld      hl,(XX1554)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 701++F45F ED 5B A9 F1                      ld      de,(XX1510)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 702++F463                                  ClearCarryFlag                  ; SBC XX15+1
 702++F463 B7          >                        or a
 703++F464 ED 52                            sbc     hl,de                   ; .
 704++F466 22 02 F6                         ld      (delta_x),hl            ; .
 705++F469 2A AF F1                         ld      hl,(XX1576)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 706++F46C ED 5B AB F1                      ld      de,(XX1532)             ;
 707++F470                                  ClearCarryFlag                  ; SBC XX15+2
 707++F470 B7          >                        or a
 708++F471 ED 52                            sbc     hl,de                   ; .
 709++F473 22 04 F6                         ld      (delta_y),hl            ; .
 710++F476              ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 711++F476 3A 05 F6                         ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 712++F479 21 03 F6                         ld      hl,delta_x+1
 713++F47C AE                               xor     (hl)
 714++F47D 32 B8 F1                         ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 715++F480 2A 04 F6                         ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 716++F483 7C                               ld      a,h
 717++F484 A7                               and     a
 718++F485 F2 91 F4                         jp      p, LL110_6502           ; BPL LL110              \ the following
 719++F488                                  NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 719++F488 AF          >                    xor a
 719++F489 95          >                    sub l
 719++F48A 6F          >                    ld l,a
 719++F48B 9F          >                    sbc a,a
 719++F48C 94          >                    sub h
 719++F48D 67          >                    ld h,a
 720++F48E 22 04 F6                         ld      (delta_y),hl            ; positive, starting with the low bytes
 721++F491 2A 02 F6     LL110_6502:         ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 722++F494 7C                               ld      a,h                     ; BPL LL111              \ the following
 723++F495 A7                               and     a                       ; .
 724++F496 F2 A2 F4                         jp      p,LL111_6502            ; .
 725++F499                                  NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 725++F499 AF          >                    xor a
 725++F49A 95          >                    sub l
 725++F49B 6F          >                    ld l,a
 725++F49C 9F          >                    sbc a,a
 725++F49D 94          >                    sub h
 725++F49E 67          >                    ld h,a
 726++F49F 22 02 F6                         ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 727++F4A2              ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 728++F4A2 2A 02 F6     LL111_6502:         ld      hl,(delta_x)
 729++F4A5 ED 5B 04 F6                      ld      de,(delta_y)
 730++F4A9 7C                               ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 731++F4AA B2                               or      d                       ; BNE LL112
 732++F4AB CA C0 F4                         jp      z,LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 733++F4AE              LL112_6502:         ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 733++F4AE CB 3C       >			   srl h
 733++F4B0 CB 1D       >			   rr  l
 734++F4B2                                  ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 734++F4B2 CB 3A       >			   srl d
 734++F4B4 CB 1B       >			   rr  e
 735++F4B6 22 02 F6                         ld      (delta_x),hl
 736++F4B9 ED 53 04 F6                      ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 737++F4BD C3 A2 F4                         jp  LL111_6502                  ; JMP LL111              \ Loop back to LL111
 738++F4C0              ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 739++F4C0              LL113_6502:         ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 739++F4C0 AF          >                        xor a
 740++F4C1 32 B5 F1                         ld  (Tvar),a
 741++F4C4 3A 02 F6                         ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 742++F4C7 21 04 F6                         ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 743++F4CA BE                               cp      (hl)
 744++F4CB DA DD F4                         jp      c, LL114_6502           ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 745++F4CE              ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 746++F4CE 3A 02 F6                         ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 747++F4D1 32 B6 F1                         ld      (Qvar),a                ; .
 748++F4D4 3A 04 F6                         ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 749++F4D7 CD BB F1                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 750++F4DA C3 EE F4                         jp      LL116_6502              ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 751++F4DD              ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 752++F4DD 3A 04 F6     LL114_6502:         ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 753++F4E0 32 B6 F1                         ld      (Qvar),a                ; STA Q
 754++F4E3 3A 02 F6                         ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 755++F4E6 CD BB F1                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 756++F4E9 3E FF                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 757++F4EB 32 B5 F1                         ld      (Tvar),a                ;                        \ line is steep
 758++F4EE              ;----------------------------------------------------------------------------------------------------------------
 759++F4EE              ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 760++F4EE              ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 761++F4EE              ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 762++F4EE              ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 763++F4EE 3A B7 F1     LL116_6502:         ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 764++F4F1 32 B1 F1                         ld      (XX12p2),a              ; STA XX12+2
 765++F4F4 3A B8 F1                         ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 766++F4F7 32 B2 F1                         ld      (XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 767++F4FA 3A 99 7E                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 768++F4FD FE 00                            cp      0                       ; BEQ LL138
 769++F4FF CA 05 F5                         jp      z,LL138_6502            ; .
 770++F502 F2 21 F5                         jp      p, LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 771++F505              ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 772++F505 CD 31 F3     LL138_6502:         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 773++F508 3A 99 7E                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 774++F50B A7                               and     a
 775++F50C F2 44 F5                         jp      p,LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 776++F50F              ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 777++F50F 3A AA F1     LL117_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 778++F512 21 AC F1                         ld      hl,XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 779++F515 B6                               or      (hl)
 780++F516 C2 4C F5                         jp      nz, LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 781++F519 3A AB F1                         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 782++F51C FE 80                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 783++F51E D2 4C F5                         jp      nc, LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 784++F521              ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 785++F521 2A A9 F1     LLX117_6502:        ld      hl,(XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 786++F524 ED 5B AD F1                      ld      de,(XX1554)
 787++F528 ED 53 A9 F1                      ld      (XX1510),de
 788++F52C 22 AD F1                         ld      (XX1554),hl
 789++F52F 2A AB F1                         ld      hl,(XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 790++F532 ED 5B AF F1                      ld      de,(XX1576)
 791++F536 ED 53 AB F1                      ld      (XX1532),de
 792++F53A 22 AF F1                         ld      (XX1576),hl
 793++F53D CD 31 F3                         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 794++F540 21 18 C9                         ld      hl,SWAP
 795++F543 35                               dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 796++F544 F1           LL124_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 797++F545 32 BA F1                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 798++F548 CD DB F3                         call    LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 799++F54B C9                               ret                             ; then exit so we don't pop it twice
 800++F54C F1           LL137_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 801++F54D 32 BA F1                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 802++F550                                  SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 802++F550 37          >                        scf
 803++F551 C9                               ret                             ; RTS                    \ Return from the subroutine
 804++F552                      ENDIF
# file closed: ././Layer2Graphics/BBCEliteDirectMappingLL118.asm
   9+ F552
  10+ F552                      IFDEF Add_l2_drawHorzClipY
  11+ F552 ~            l2_drawHorzClipY:
  12+ F552 ~            .ClipY:                 ex      de,hl                       ; get X1 into de
  13+ F552 ~            .ClipDE:                bit     7,d
  14+ F552 ~                                    jr      z,.DEPositive
  15+ F552 ~            .DENegative:            ld      de,0
  16+ F552 ~                                    jp      .ClipDEDone
  17+ F552 ~            .DEPositive:            ld      a,d
  18+ F552 ~                                    and     a
  19+ F552 ~                                    jp      z,.ClipDE127
  20+ F552 ~            .ClipDE256:             ld      de,127
  21+ F552 ~                                    jp      .ClipDEDone
  22+ F552 ~            .ClipDE127:             bit     7,e
  23+ F552 ~                                    jp      z,.ClipDEDone
  24+ F552 ~                                    ld      de,127
  25+ F552 ~            .ClipDEDone:
  26+ F552 ~            .AdjustStartY:          ld      hl,(starty)
  27+ F552 ~                                    call    CompareHLDESgn           ; if de < HL
  28+ F552 ~                                    jr      z,.AdjustEndY               ;
  29+ F552 ~                                    jr      c,.AdjustEndY               ;
  30+ F552 ~            .ClipStartY:            ld      (starty),de                 ; .
  31+ F552 ~            .AdjustEndY:            ld      hl,(endy)                   ; is endy still uninitialised
  32+ F552 ~            .InitEndY:              ld      a,h                         ;
  33+ F552 ~                                    and     l                           ;
  34+ F552 ~                                    cp      $FF                         ;
  35+ F552 ~                                    jr      z,.ForceEndYSet
  36+ F552 ~            .CheckEndY:             call    CompareHLDESgn           ; if de < HL
  37+ F552 ~                                    ret     z
  38+ F552 ~                                    ret     nc
  39+ F552 ~            .ForceEndYSet:          ld      (endy),de
  40+ F552 ~                                    ret
  41+ F552                      ENDIF
  42+ F552
  43+ F552
  44+ F552 2A DA F5     l2_drawVertClip:        ld      hl,(y1)
  45+ F555 ED 5B DE F5                          ld      de,(y2)
  46+ F559 CD 27 99                             call    CompareHLDESgn
  47+ F55C 30 01                                jr      nc,.y1ltey2
  48+ F55E EB                                   ex      de,hl
  49+ F55F CB 7C        .y1ltey2:               bit     7,h
  50+ F561 CA 67 F5                             jp      z,.y1Positive
  51+ F564 21 00 00                             ld      hl,0
  52+ F567 7A           .y1Positive             ld      a,d
  53+ F568 A7                                   and     a
  54+ F569 CA 71 F5                             jp      z,.y2lt255
  55+ F56C 1E 7F                                ld      e,127
  56+ F56E C3 78 F5                             jp      .y2Clipped
  57+ F571 CB 7B        .y2lt255:               bit     7,e
  58+ F573 CA 78 F5                             jp      z,.y2Clipped
  59+ F576 1E 7F                                ld      e,127
  60+ F578 ED 4B D8 F5  .y2Clipped:             ld      bc,(x1)
  61+ F57C 45                                   ld      b,l
  62+ F57D 53                                   ld      d,e
  63+ F57E 1E BF                                ld      e,$BF
  64+ F580 C3 55 E5                             jp      l2_draw_vert_line_to                ; ">bc = row col d = to position, e = color"
  65+ F583
  66+ F583
  67+ F583 2A D8 F5     l2_drawHorzClip:        ld      hl,(x1)
  68+ F586 ED 5B DC F5                          ld      de,(x2)
  69+ F58A CD 27 99                             call    CompareHLDESgn
  70+ F58D 30 01                                jr      nc,.x1ltex2
  71+ F58F EB                                   ex      de,hl
  72+ F590 CB 7C        .x1ltex2:               bit     7,h
  73+ F592 CA 98 F5                             jp      z,.x1Positive
  74+ F595 21 00 00                             ld      hl,0
  75+ F598 7A           .x1Positive             ld      a,d
  76+ F599 A7                                   and     a
  77+ F59A CA 9F F5                             jp      z,.x2Clipped
  78+ F59D 1E FF                                ld      e,255
  79+ F59F ED 4B DA F5  .x2Clipped:             ld      bc,(y1)
  80+ F5A3 41                                   ld      b,c
  81+ F5A4 4D                                   ld      c,l
  82+ F5A5 53                                   ld      d,e
  83+ F5A6 1E BF                                ld      e,$BF
  84+ F5A8 C3 BD E4                             jp      l2_draw_horz_line_to                ; "bc = left side row,col, d right pixel, e = color"
  85+ F5AB
  86+ F5AB                      IFDEF Add_l2_drawVertClipY
  87+ F5AB ~            l2_drawVertClipY:       bit     7,d                     ; i = (py1<0?0:py1);
  88+ F5AB ~                                    jr      z,.PYIsOK
  89+ F5AB ~            .SetPYTo0:              ld      de,0
  90+ F5AB ~            .PYIsOK:                ld      hl,(starty)
  91+ F5AB ~                                    IsHLEqu255
  92+ F5AB ~                                    jp      z,.UpdateStartY
  93+ F5AB ~                                    call    CompareHLDESgn       ; or starty > py
  94+ F5AB ~                                    jr      nc,.UpdateStartY        ;
  95+ F5AB ~                                    jp      .PrepareUpdateArray
  96+ F5AB ~            .UpdateStartY:          ld      (starty),de
  97+ F5AB ~            .PrepareUpdateArray:    JumpIfRegLTE c, 127, .UpdateCounters ; we loop from
  98+ F5AB ~                                    ld      c,127
  99+ F5AB ~            .UpdateEndY:            ld      (endy),bc               ; save BC to endy y as its now clamped, thsi frees up BC regsiters
 100+ F5AB ~            .UpdateCounters:        ld      hl,ix                   ; get target array index and set it to
 101+ F5AB ~                                    add     hl,de                   ; targetArray[de]
 102+ F5AB ~                                    add     hl,de                   ; .
 103+ F5AB ~                                    ld      a,c                     ; now set up B as an iterator
 104+ F5AB ~                                    sub     b                       ; for py2 - py1 + 1 entries
 105+ F5AB ~                                    inc     a                       ; .
 106+ F5AB ~                                    ld      b,a                     ; .
 107+ F5AB ~                                    ld      de,ix                   ; we don't need de anymore to move ix for faster instructions
 108+ F5AB ~            .UpdateArray:           ld      (hl),de                 ; use sjasm fake as it does (hl)=e,inc hl, (hl)=d,inc hl
 109+ F5AB ~                                    inc     a                       ; use a as a counter for the end when we update EndY
 110+ F5AB ~                                    djnz    .UpdateArray            ; .
 111+ F5AB ~                                    ret                             ; we are now done
 112+ F5AB                      ENDIF
 113+ F5AB
 114+ F5AB
 115+ F5AB              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
 116+ F5AB              ; b - y0 c - x0, d - y1 e - x1 a - colour
 117+ F5AB 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
 118+ F5AC 79                                   ld		a,c                 ; if x and e are the same its horizontal
 119+ F5AD BB                                   cp		e
 120+ F5AE 28 08                                jr		z,.HorizontalLineCheck
 121+ F5B0 78                                   ld		a,b                 ; if b and d are the same its vertica;
 122+ F5B1 BA                                   cp		d
 123+ F5B2 28 0E                                jr		z,.VerticalLine
 124+ F5B4              ; use jp and get a free ret instruction optimisation
 125+ F5B4 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
 126+ F5B5 C3 D6 E9                             jp		l2_draw_diagonal
 127+ F5B8
 128+ F5B8 78           .HorizontalLineCheck:   ld      a,b
 129+ F5B9 BA                                   cp      d
 130+ F5BA 28 0B                                jr      z, .SinglePixel
 131+ F5BC 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
 132+ F5BD 53                                   ld		d,e				    ; set d as target right pixel
 133+ F5BE 5F                                   ld		e,a				    ; e holds colour on this call
 134+ F5BF C3 BD E4                             jp		l2_draw_horz_line_to
 135+ F5C2 08           .VerticalLine:          ex		af,af'
 136+ F5C3 5F                                   ld		e,a				    ; e holds colour on this call
 137+ F5C4 C3 55 E5                             jp		l2_draw_vert_line_to
 138+ F5C7 08           .SinglePixel:           ex		af,af'              ; get colour back into a
 139+ F5C8                                      l2_plot_macro; jp      l2_plot_pixel
 139+ F5C8 78          >                        ld      a,b
 139+ F5C9             >                        JumpIfAGTENusng 192 ,.NoPlot
 139+ F5C9 FE C0       >                        cp     192
 139+ F5CB D2 D7 F5    >                        jp		nc,.NoPlot
 139+ F5CE 69          >                        ld      l,c
 139+ F5CF CD 68 E0    >                        call    asm_l2_row_bank_select
 139+ F5D2 67          >                        ld      h,a
 139+ F5D3 3A B5 E2    >                        ld      a,(line_gfx_colour)
 139+ F5D6 77          >                        ld      (hl),a
 139+ F5D7             >.NoPlot:
 140+ F5D7 C9                                   ret
 141+ F5D8              ;-*-*-;......................................................
 142+ F5D8              ;-*-*-; hl'hl = x1y1 de'de = x3y3 , does not save, just plots points
 143+ F5D8              ;-*-*-Layer2_draw_ClipY_Line:
 144+ F5D8              ;-*-*-;                       Eliminte totally off screen first
 145+ F5D8              ;-*-*-.Y1HighTest:            IsHLGT127                       ; if y1 and y2 > 127
 146+ F5D8              ;-*-*-                        jr      nz,.Y1HighLTE127        ; .
 147+ F5D8              ;-*-*-.Y2HighTest:            IsDEGT127                       ; .
 148+ F5D8              ;-*-*-                        ret     nz                       ;   return
 149+ F5D8              ;-*-*-.Y1HighLTE127:
 150+ F5D8              ;-*-*-.Y1LowTest:             bit     7,h                     ; if y1 and y2 < 0
 151+ F5D8              ;-*-*-                        jr      z,.YTestPass            ; .
 152+ F5D8              ;-*-*-                        bit     7,d                     ; .
 153+ F5D8              ;-*-*-                        ret     nz                      ;   return
 154+ F5D8              ;-*-*-.YTestPass:             exx                             ; hl hl' = x1y1 de de' = x2y2
 155+ F5D8              ;-*-*-                        ld      a,h                     ; if x1 and x2 < 0 or > 255
 156+ F5D8              ;-*-*-                        and     a                       ; then in either scenario high
 157+ F5D8              ;-*-*-                        jr      z,.XTestPass            ; byte will not be zero
 158+ F5D8              ;-*-*-                        ld      a,d                     ; .
 159+ F5D8              ;-*-*-                        and     a                       ; .
 160+ F5D8              ;-*-*-                        ret     nz                      ;   return
 161+ F5D8              ;-*-*-.XTestPass:                                             ;
 162+ F5D8              ;-*-*-;                       Check for horizontal and vertical exceptions
 163+ F5D8              ;-*-*-.CheckForVertical:      call    CompareHLDESigned       ; if x1 = x2 then vertical line
 164+ F5D8              ;-*-*-                        jp      z, l2_drawVertClipY     ;    goto vertical and use its ret as a free exit
 165+ F5D8              ;-*-*-.CheckForHorizontal:    exx                             ; hl'hl = x1y1 de'de = x2y2
 166+ F5D8              ;-*-*-                        call    CompareHLDESigned       ; if y1 = y2 then horizonal line
 167+ F5D8              ;-*-*-                        jp      z, l2_drawHorzClipY     ; goto  horizontal and use its ret as a free exit
 168+ F5D8              ;-*-*-                        exx                             ; hl hl' = x1y1 de de' = x2y2
 169+ F5D8              ;-*-*-;                       Now we can draw diagnoal, note we are pre-sorting Y so no need to do sort logic
 170+ F5D8              ;-*-*-;                       Check if X1 > X2 and set sign, X1 x2 and clip accordingly
 171+ F5D8              ;-*-*-.SetupMinMaxX:          call    CompareHLDESigned       ; If x1 > x2
 172+ F5D8              ;-*-*-                        jr      c, .x1LTx2              ; . (else jump to x1 < x2 as we have already handled x1 = x2)
 173+ F5D8              ;-*-*-.x1GTEx2:               ld      a,$FF                   ;   sign_x = -1 (also iyh)
 174+ F5D8              ;-*-*-                        ld      (sign_x),a              ;   .
 175+ F5D8              ;-*-*-                        ld      iyh,a
 176+ F5D8              ;-*-*-                        NegHL                           ;   x1 = - x1
 177+ F5D8              ;-*-*-                        NegDE                           ;   x2 = - x2
 178+ F5D8              ;-*-*-                        xor     a                       ;   xmax = 0
 179+ F5D8              ;-*-*-                        ld      (clip_xmax),a           ;   .
 180+ F5D8              ;-*-*-                        ld      (clip_xmax+1),a         ;   .
 181+ F5D8              ;-*-*-                        inc     a                       ;   xmin = -255 ($FF01)
 182+ F5D8              ;-*-*-                        ld      (clip_xmin),a           ;   .
 183+ F5D8              ;-*-*-                        ld      a,$FF
 184+ F5D8              ;-*-*-                        ld      (clip_xmin+1),a         ;   .
 185+ F5D8              ;-*-*-                        jp      .DoneSignSetup          ; else
 186+ F5D8              ;-*-*-;                       if X1<X2 then set up sign as 1, clip, we don't need to change X1 and X2
 187+ F5D8              ;-*-*-.x1LTx2:                ld      a,1                     ;   sign_x = 1 (also iyh)
 188+ F5D8              ;-*-*-                        ld      (sign_x),a              ;   .
 189+ F5D8              ;-*-*-                        ld      iyh,a                   ;   .
 190+ F5D8              ;-*-*-                        ZeroA                           ;   clip_xmin = 0
 191+ F5D8              ;-*-*-                        ld      (clip_xmin),a           ;   .
 192+ F5D8              ;-*-*-                        ld      (clip_xmin+1),a         ;   .
 193+ F5D8              ;-*-*-                        ld      (clip_xmax+1),a         ;   clip_xmax = 255
 194+ F5D8              ;-*-*-                        dec     a                       ;   .
 195+ F5D8              ;-*-*-                        ld      (clip_xmax),a           ;   .
 196+ F5D8              ;-*-*-.DoneSignSetup:
 197+ F5D8              ;-*-*-;                       Set up Delta x = x2 - x1
 198+ F5D8              ;-*-*-.CalcDeltas:            ex      de,hl                   ; de = x1 hl = x2
 199+ F5D8              ;-*-*-                        push    hl                      ; save x2                       Stack+1
 200+ F5D8              ;-*-*-                        ClearCarryFlag                  ; delta_x = x2 - x1
 201+ F5D8              ;-*-*-                        sbc     hl,de                   ; .
 202+ F5D8              ;-*-*-                        ld      (delta_x),hl            ; .
 203+ F5D8              ;-*-*-;                       Set up Delta X step
 204+ F5D8              ;-*-*-                        ClearCarryFlag                  ; multiply by 2
 205+ F5D8              ;-*-*-                        adc     hl,hl                   ; .
 206+ F5D8              ;-*-*-                        ld      (delta_x_step),hl       ; delta_x_step = delta x * 2
 207+ F5D8              ;-*-*-                        pop     hl                      ; Restore X2                     Stack+0
 208+ F5D8              ;-*-*-                        ; now hl = x2 and de = x1
 209+ F5D8              ;-*-*-;                       Set up Delta y = y2 - y1
 210+ F5D8              ;-*-*-.CalcDeltaY:            exx                             ; hl = y1 de = y2, we don't save hl,de as we will load later
 211+ F5D8              ;-*-*-                        ld      (y1Work),hl             ; y1Work = y1
 212+ F5D8              ;-*-*-                        push    hl                      ; save y1 so that it can be loaded to HL later
 213+ F5D8              ;-*-*-                        ld      (y2Work),de             ; y2Work = y2
 214+ F5D8              ;-*-*-                        ex      de,hl                   ; set de to y2Work and hl to y1Work
 215+ F5D8              ;-*-*-                        ClearCarryFlag                  ; delta_y = y2 - y1
 216+ F5D8              ;-*-*-                        sbc     hl,de                   ; .
 217+ F5D8              ;-*-*-                        ld      (delta_y),hl            ; .
 218+ F5D8              ;-*-*-;                       Set up Delta Y step
 219+ F5D8              ;-*-*-                        ClearCarryFlag                  ; multiply by 2
 220+ F5D8              ;-*-*-                        adc     hl,hl                   ; .
 221+ F5D8              ;-*-*-                        ld      (delta_y_step),hl       ; delta_y_step = delta y * 2
 222+ F5D8              ;-*-*-                        ; now hl = y1 de = y2
 223+ F5D8              ;-*-*-;                       x_pos = x1, y_pos = y1
 224+ F5D8              ;-*-*-.SavePositions:         exx                             ; de = x1 hl = x2
 225+ F5D8              ;-*-*-                        ld      (x1Work),de             ; x1Work = x1
 226+ F5D8              ;-*-*-                        ld      (x2Work),hl             ; x2Work = x2
 227+ F5D8              ;-*-*-                        ;ex      de,hl                   ; hl = x1 de = x2
 228+ F5D8              ;-*-*-                        pop     hl                      ; y_pos = hl = y1   = y_pos     Stack+0
 229+ F5D8              ;-*-*-                        ld      (x_pos),de              ; .
 230+ F5D8              ;-*-*-                        ld      (y_pos),hl              ; .
 231+ F5D8              ;-*-*-;                       Check for Delta X >= Delta Y and do respective code version
 232+ F5D8              ;-*-*-.CheckDeltaXGTEDeltaY:  ld      hl,(delta_x)            ; hl = delta x
 233+ F5D8              ;-*-*-                        ld      de,(delta_y)            ; de = delta y
 234+ F5D8              ;-*-*-                        call    CompareHLDESigned       ; if data x < deltay
 235+ F5D8              ;-*-*-                        jp      c, DeltaXltDeltaY
 236+ F5D8              ;-*-*-;..................................................................................................................................
 237+ F5D8              ;-*-*-;                       this is where dx >= dy
 238+ F5D8              ;-*-*-;--- Delta X >= DeltaY ---------------------------------;    error = delta y_step - delta x
 239+ F5D8              ;-*-*-;                       Error = delta Y Step - Delta X and set Exit false
 240+ F5D8              ;-*-*-L2DeltaXgteDeltaY:      ErrorEquStepMinusDelta delta_y_step, delta_x ; this also sets de to delta x
 241+ F5D8              ;-*-*-                        SetExitFalse                    ;    set exit = false
 242+ F5D8              ;-*-*-;---                    if y < 0 then set y = 0 & save X pos to targetArray[0]..;
 243+ F5D8              ;-*-*-.IsY1TL0:               IsAxisLT0 (y1Work)              ;    if y1 < 0
 244+ F5D8              ;-*-*-                        jp     z,.Y1IsNotLT0           ;    .
 245+ F5D8              ;-*-*-;                       ... temp = 2 * (-y1) -1 * delta X
 246+ F5D8              ;-*-*-.Y1IsLT0:               ex      de,hl                   ;       de = delta x
 247+ F5D8              ;-*-*-                        ld      hl,(y1Work)             ;       temp = (2 * (0 - y1) - 1) * delta_x; Note from entering de = delta_x
 248+ F5D8              ;-*-*-                        NegHL                        ;       .      (0-y1 also equals negate y1)
 249+ F5D8              ;-*-*-                        ClearCarryFlag                  ;       .
 250+ F5D8              ;-*-*-                        adc     hl,hl                   ;       .      (y1 = y1 * 2)
 251+ F5D8              ;-*-*-                        dec     hl                      ;       .      (y1 = y1 -1)
 252+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;       .      (multiply by de which is delta x)
 253+ F5D8              ;-*-*-                        ld      (linetemp),hl           ;       .      (and save to linetemp)
 254+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       .  (set BC to divq floor bc/de)
 255+ F5D8              ;-*-*-                        ex      de,hl                   ;       msd = floor_divq (temp, delta_y_step)
 256+ F5D8              ;-*-*-;                       ... msd = floor (temp , delta y step)
 257+ F5D8              ;-*-*-                        FloorHLdivDETarget msd          ;       .
 258+ F5D8              ;-*-*-;                       ... xpos += msd
 259+ F5D8              ;-*-*-                        ex      hl,de                   ;       x pos += msd (move msd to de)
 260+ F5D8              ;-*-*-                        ld      hl,(x_pos)              ;       .            (pull in x1temp and add de)
 261+ F5D8              ;-*-*-                        add     hl,de                   ;       .
 262+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;       .            (store result in x_pos)
 263+ F5D8              ;-*-*-;                       ... if x_pos > clip_xmax then return
 264+ F5D8              ;-*-*-.IsXposGTClipXMax:      ld      de,(clip_xmax)          ;       if x_pos > clip_xmax then return
 265+ F5D8              ;-*-*-                        call    CompareHLDESigned               ;       .
 266+ F5D8              ;-*-*-                        jr      z,.XPosLTEXMax         ;       .
 267+ F5D8              ;-*-*-                        ret     nc                      ;       .
 268+ F5D8              ;-*-*-.XPosLTEXMax:
 269+ F5D8              ;-*-*-;                       ... if x_pos > clip_xmin
 270+ F5D8              ;-*-*-.IsXposGTEClipXmin:     ld      de,(clip_xmin)          ;       if x_pos >= clip_xmin
 271+ F5D8              ;-*-*-                        call    CompareHLDESigned               ;       .
 272+ F5D8              ;-*-*-                        jr      z,.XposLTClipXmin       ;       .
 273+ F5D8              ;-*-*-                        jr      c,.XposLTClipXmin       ;
 274+ F5D8              ;-*-*-;                       ... ... then rem = temp - msd * delta y step
 275+ F5D8              ;-*-*-.XposGTEClipXMin:       ld      hl,(msd)                ;          rem = temp - msd * delta_y_step
 276+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;          .     (de =  delta_y_step)
 277+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;          .     (hl = msd * delta y step)
 278+ F5D8              ;-*-*-                        ex      de,hl                   ;          .     (de = hl)
 279+ F5D8              ;-*-*-                        ld      hl,(linetemp)           ;          .     (hl = linetemp)
 280+ F5D8              ;-*-*-                        ClearCarryFlag                  ;          .
 281+ F5D8              ;-*-*-                        sbc     hl,de                   ;          .     (hl = hl = de)
 282+ F5D8              ;-*-*-                        ld      (rem),hl                ;          .     (rem = result)
 283+ F5D8              ;-*-*-;                       ... ... y pos = 0
 284+ F5D8              ;-*-*-                        xor     a                       ;          y_pos = 0
 285+ F5D8              ;-*-*-                        ld      (y_pos),a               ;          .
 286+ F5D8              ;-*-*-                        ld      (y_pos+1),a             ;          .
 287+ F5D8              ;-*-*-;                       ... ... error = error - (rem + delta x)
 288+ F5D8              ;-*-*-                        ld      de,(delta_x)            ;          error -= rem + delta_x
 289+ F5D8              ;-*-*-                        add     hl,de                   ;          .      (hl = (rem still) (de = delta x) )
 290+ F5D8              ;-*-*-                        ex      de,hl                   ;          .      (move result into de)
 291+ F5D8              ;-*-*-                        ld      hl,(error)              ;          .      (get error into hl)
 292+ F5D8              ;-*-*-                        ClearCarryFlag                  ;          .      (error - de)
 293+ F5D8              ;-*-*-                        sbc     hl,de                   ;          .
 294+ F5D8              ;-*-*-                        ld      (error),hl              ;          .      (save in hl)
 295+ F5D8              ;-*-*-;                       ... ... if rem > 0
 296+ F5D8              ;-*-*-                        IsMem16GT0JumpFalse rem, .remNotGT0 ;      if (rem > 0)
 297+ F5D8              ;-*-*-;                       ... ... ... xpos ++
 298+ F5D8              ;-*-*-.remGT0:                ld      hl,x_pos                ;              x_pos += 1
 299+ F5D8              ;-*-*-                        inc     (hl)                    ;              .
 300+ F5D8              ;-*-*-;                       ... ... ... error += delta y step
 301+ F5D8              ;-*-*-                        ErrorPlusStep delta_y_step      ;              error += delta_y_step
 302+ F5D8              ;-*-*-;                       ... ... set exit true
 303+ F5D8              ;-*-*-.remNotGT0:             ld      a,$FF                   ;          set_exit = true
 304+ F5D8              ;-*-*-                        ld      (set_exit),a            ;          .
 305+ F5D8              ;-*-*-;                       ... ...  set target array [0] to xpos
 306+ F5D8              ;-*-*-                        ld      hl,(x_pos)              ;          targetArray[0] = x_pos
 307+ F5D8              ;-*-*-                        ld      (ix+0),l                ;          .  (targetArray is pointed to by ix)
 308+ F5D8              ;-*-*-                        ld      (ix+1),h                ;          .
 309+ F5D8              ;-*-*-.Y1IsNotLT0:
 310+ F5D8              ;-*-*-;                       x pos end = x2
 311+ F5D8              ;-*-*-.XposLTClipXmin:        ld      hl,(x2Work)             ;    x_pos_end = x2
 312+ F5D8              ;-*-*-                        ld      (x_pos_end),hl          ;    .
 313+ F5D8              ;-*-*-;                       if y2 > 127
 314+ F5D8              ;-*-*-.IsY2GT127:             ld      hl,(y2Work)             ;    if (y2 > 127)
 315+ F5D8              ;-*-*-                        IsHLGT127                       ;    .
 316+ F5D8              ;-*-*-                        jr      nz,.Y2LTE127            ;    .
 317+ F5D8              ;-*-*-;                       ... temp = delta x step * (127 - y1) + delta x
 318+ F5D8              ;-*-*-.Y2GT127:               ld      de,(y1Work)             ;       temp = delta_x_step * (127 - y1) + delta_x
 319+ F5D8              ;-*-*-                        ld      hl,127                  ;       .      (de = y1work)
 320+ F5D8              ;-*-*-                        ClearCarryFlag                  ;       .      (hl = 127 )
 321+ F5D8              ;-*-*-                        sbc     hl,de                   ;       .      (hl - de)
 322+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;       .      (de = delta x step)
 323+ F5D8              ;-*-*-                        call    mulHLbyDE2sc                    ;       .      (hl = hl * de)
 324+ F5D8              ;-*-*-                        ld      de,(delta_x)            ;       .      (de = delta x)
 325+ F5D8              ;-*-*-                        add     hl,de                   ;       .      (hl + de)
 326+ F5D8              ;-*-*-                        ld      (linetemp),hl           ;       .      (and save to line temp)
 327+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       de = delta y step
 328+ F5D8              ;-*-*-                        ex      de,hl                   ;       de = linetemp hl = delta y step
 329+ F5D8              ;-*-*-;                       ... msd = floor_divq (temp, delta y step)
 330+ F5D8              ;-*-*-                        FloorHLdivDETarget msd          ;       msd = floor_divq(temp,delta_y_step); (hl=de/hl)
 331+ F5D8              ;-*-*-                        ld      bc,hl                   ;       save off msd as we will need it again
 332+ F5D8              ;-*-*-                        ld      de,(x1Work)             ;
 333+ F5D8              ;-*-*-;                       ... xpos_end = x1 + msd
 334+ F5D8              ;-*-*-                        add     hl,de                   ;       x_pos_end = x1 + msd;
 335+ F5D8              ;-*-*-                        ld      (x_pos_end),hl          ;
 336+ F5D8              ;-*-*-;                       ... if (temp - msd * delta y step)) == 0
 337+ F5D8              ;-*-*-                        ld      hl,bc                   ;       if ((temp - msd * delta_y_step) == 0) --x_pos_end;
 338+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       .    (hl = msd * delta_y_step)
 339+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;       .
 340+ F5D8              ;-*-*-                        ex      hl,de                   ;       .    (hl = linetemp - hl
 341+ F5D8              ;-*-*-                        ld      hl,(linetemp)           ;       .
 342+ F5D8              ;-*-*-                        ClearCarryFlag                  ;       .
 343+ F5D8              ;-*-*-                        sbc     hl,de                   ;       .
 344+ F5D8              ;-*-*-                        jr      nz,.Calc1NotZero        ;       .
 345+ F5D8              ;-*-*-;                       ... ... x pos end minus 1
 346+ F5D8              ;-*-*-                        ld      hl,x_pos_end            ;           then -- x_pos_end
 347+ F5D8              ;-*-*-                        dec     (hl)                    ;           .
 348+ F5D8              ;-*-*-.Calc1NotZero:
 349+ F5D8              ;-*-*-;                       if sign_x == -1
 350+ F5D8              ;-*-*-.Y2LTE127:              break
 351+ F5D8              ;-*-*-                        IsMemNegative8JumpFalse sign_x, .SignXNotNegative ; just check if its negative
 352+ F5D8              ;-*-*-;                       ... xpos = - xpos
 353+ F5D8              ;-*-*-.SignXNegative:         ld      hl,(x_pos)              ;       x_pos = -x_pos
 354+ F5D8              ;-*-*-                        NegHL                           ;       .
 355+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;       .
 356+ F5D8              ;-*-*-;                       ... xpos end = - xpos end
 357+ F5D8              ;-*-*-                        ld      hl,(x_pos_end)          ;       x_pos_end = -x_pos_end
 358+ F5D8              ;-*-*-                        NegHL                           ;       .
 359+ F5D8              ;-*-*-                        ld      (x_pos_end),hl          ;       .
 360+ F5D8              ;-*-*-                        dec     (hl)                    ;       .
 361+ F5D8              ;-*-*-;                       delta x step = delta x step - delta y step
 362+ F5D8              ;-*-*-.SignXNotNegative:      ld      hl,(delta_x_step)       ;    delta_x_step -= delta_y_step
 363+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;    .
 364+ F5D8              ;-*-*-                        ClearCarryFlag                  ;    .
 365+ F5D8              ;-*-*-                        sbc     hl,de                   ;    .
 366+ F5D8              ;-*-*-                        ld      (delta_x_step),hl       ;    .
 367+ F5D8              ;-*-*-;..................................................................................................................................
 368+ F5D8              ;-*-*-;--- DxFTEDyNotLongest while loop ----------------------;
 369+ F5D8              ;-*-*-L2DxGTEDy:                ld      bc,(x_pos)              ;    while (x_pos != x_pos_end) loading bc with xppos an de as x_pos_end
 370+ F5D8              ;-*-*-                        ld      de,(x_pos_end)          ;    .
 371+ F5D8              ;-*-*-                        ld      hl,ix                   ;    load hl as target array
 372+ F5D8              ;-*-*-                        ld      a,(y_pos)               ;    by this point y pos must be 8 bit
 373+ F5D8              ;-*-*-                        add     hl,a                    ;    So we are setting up hl as targetArray pointer
 374+ F5D8              ;-*-*-                        add     hl,a                    ;    .
 375+ F5D8              ;-*-*-;..................................................................................................................................
 376+ F5D8              ;-*-*-;--- Version where longest is not saved ----------------;
 377+ F5D8              ;-*-*-                        exx                             ;      switch to alternate registers
 378+ F5D8              ;-*-*-                        ld      hl,(error)              ;      load up stepping into alternate registers
 379+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;      .
 380+ F5D8              ;-*-*-                        ld      bc,(delta_y_step)       ;      .
 381+ F5D8              ;-*-*-                        exx                             ;      .
 382+ F5D8              ;-*-*-                        ld      a,(sign_x)              ;      Self modify inc of y_pos
 383+ F5D8              ;-*-*-                        and     $80                     ;
 384+ F5D8              ;-*-*-                        jr      z,.SetWhileInc          ;
 385+ F5D8              ;-*-*-.SetWhileDec:           ld      a,InstrDECBC
 386+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction), a
 387+ F5D8              ;-*-*-                        jp      .WhileLoop
 388+ F5D8              ;-*-*-.SetWhileInc:           ld      a,InstrINCBC
 389+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction), a
 390+ F5D8              ;-*-*-;--- Update Loop ---------------------------------------;
 391+ F5D8              ;-*-*-; In loop hl  = target array pointer bc = x_pos,       de = x_pos_end, (we don't need to reatin Y_pos)
 392+ F5D8              ;-*-*-;         hl' = error                bc'= delta_y_step de'=delta_x_step
 393+ F5D8              ;-*-*-.WhileLoop:             call    CompareBCDESigned       ;      while x_pos != x_pos_end
 394+ F5D8              ;-*-*-                        ret     z                       ;      .
 395+ F5D8              ;-*-*-                        call    L2_plotAtRowLColC       ;        targetArray[y_pos] = x_pos
 396+ F5D8              ;-*-*-                        exx                             ;        if error >= 0
 397+ F5D8              ;-*-*-                        bit     7,h                     ;        .
 398+ F5D8              ;-*-*-                        jr      nz,.ErrorNegative       ;        .
 399+ F5D8              ;-*-*-.ErrorPositive:         ClearCarryFlag                  ;             error -= delta_x_step
 400+ F5D8              ;-*-*-                        sbc     hl,de                   ;             .
 401+ F5D8              ;-*-*-                        exx                             ;             back to main regsters
 402+ F5D8              ;-*-*-                        inc     hl                      ;             y pos for target Array index +2
 403+ F5D8              ;-*-*-                        inc     hl                      ;             as its 16 bit
 404+ F5D8              ;-*-*-                        jp      .WhileIncInstuction     ;             .
 405+ F5D8              ;-*-*-.ErrorNegative:         add     hl,bc                   ;        else error += delta y step
 406+ F5D8              ;-*-*-                        exx                             ;             back to main regsters
 407+ F5D8              ;-*-*-.WhileIncInstuction:    inc     bc                      ;       x_pos += sign_x (doneas self modifying to inc or dec)
 408+ F5D8              ;-*-*-                        jp      .WhileLoop
 409+ F5D8              ;-*-*-;..................................................................................................................................;--- Delta X < DeltaY ----------------------------------;
 410+ F5D8              ;-*-*-;--- ELSE ----------------------------------------------;
 411+ F5D8              ;-*-*-;--- DX < DY -------------------------------------------;
 412+ F5D8              ;-*-*-;..................................................................................................................................;--- Delta X < DeltaY ----------------------------------;
 413+ F5D8              ;-*-*-;                       error = delta x_step - delta y
 414+ F5D8              ;-*-*-L2DeltaXltDeltaY:       ErrorEquStepMinusDelta delta_x_step, delta_y
 415+ F5D8              ;-*-*-;                       set exit false
 416+ F5D8              ;-*-*-                        SetExitFalse                    ; set exit = false
 417+ F5D8              ;-*-*-;                       if x1 < xmin && y pos > 127 then exit early
 418+ F5D8              ;-*-*-.IsY1TL0:               ld      hl,(x1Work)             ; if x1 < clip xmin
 419+ F5D8              ;-*-*-                        ld      de,(clip_xmin)          ; .
 420+ F5D8              ;-*-*-                        call    CompareHLDESigned               ; .
 421+ F5D8              ;-*-*-                        jp      z, .X1gteClipMin        ; .
 422+ F5D8              ;-*-*-                        jp      c, .X1ltClipMin         ; and y_pos > 127
 423+ F5D8              ;-*-*-                        ld      hl,(y1Work)             ;
 424+ F5D8              ;-*-*-.X1gteClipMin:          ReturnIfHLGT127                 ;    then return
 425+ F5D8              ;-*-*-;                       if y1 work < 0
 426+ F5D8              ;-*-*-.X1ltClipMin:           IsAxisLT0 (y1Work)              ; if y1 < 0             ;
 427+ F5D8              ;-*-*-                        jr      z,.Y1IsNotLT0           ; .
 428+ F5D8              ;-*-*-;                       ... temp = delta x step * (-y1)
 429+ F5D8              ;-*-*-.Y1IsLT0:               ld      hl,(y1Work)             ;    temp = (0 - y1) * delta_x_step;
 430+ F5D8              ;-*-*-                        NegHL                        ;    . (0 - y1 also equals negate HL)
 431+ F5D8              ;-*-*-                        ClearCarryFlag                  ;    .
 432+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;    .
 433+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;    .
 434+ F5D8              ;-*-*-                        ld      (linetemp),hl           ;    .
 435+ F5D8              ;-*-*-;                       ... msd = floor_divq (temp, delta y step)
 436+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;    msd = floor_divq (temp, delta_y_step);
 437+ F5D8              ;-*-*-;                       ... rem calculation now done in floor macro above into de
 438+ F5D8              ;-*-*-                        FloorHLdivDETarget msd          ;    .
 439+ F5D8              ;-*-*-                        ld      (rem),de                ;    As DE = reminder we can do rem = temp % delta_y_step; for free
 440+ F5D8              ;-*-*-;                       ... xpos = xpos + msd
 441+ F5D8              ;-*-*-                        ex      hl,de                   ;    x pos += msd (move msd to de)
 442+ F5D8              ;-*-*-                        ld      hl,(x_pos)              ;    .            (pull in x1temp and add de)
 443+ F5D8              ;-*-*-                        add     hl,de                   ;    .
 444+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;    .            (store result in x_pos)
 445+ F5D8              ;-*-*-;                       ... if xpos > xmax
 446+ F5D8              ;-*-*-.IsXposGTClipXMax:      ld      de,(clip_xmax)          ;    if x_pos > clip_xmax then return
 447+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 448+ F5D8              ;-*-*-;                       ...    or (pos = xmax && rem >= delta y) then return
 449+ F5D8              ;-*-*-                        jr      z,.XPosLTEXMax          ;    .
 450+ F5D8              ;-*-*-                        ret     nc                      ;    .
 451+ F5D8              ;-*-*-.XPosLTEXMax:           ld      de,(clip_xmin)          ;    if x_pos == clip_xmin
 452+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 453+ F5D8              ;-*-*-                        jr      nz,.XneClipMax          ;    and rem >= deltay
 454+ F5D8              ;-*-*-                        ld      hl,(rem)                ;    .
 455+ F5D8              ;-*-*-                        ld      de,(delta_y)            ;    .
 456+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 457+ F5D8              ;-*-*-                        ret     c                       ;    then return
 458+ F5D8              ;-*-*-;                       ... save rem and set y pos to 0
 459+ F5D8              ;-*-*-                        ex      de,hl                   ;    save rem
 460+ F5D8              ;-*-*-                        ld      hl,0                    ;    y_pos = 0
 461+ F5D8              ;-*-*-;                       ... error = error + rem
 462+ F5D8              ;-*-*-                        ld      (y_pos),hl              ;    error += rem
 463+ F5D8              ;-*-*-                        ld      hl,(error)              ;    .
 464+ F5D8              ;-*-*-                        add     hl,de                   ;    .
 465+ F5D8              ;-*-*-                        ld      (error),hl              ;    .
 466+ F5D8              ;-*-*-;                       ... if rem >= delta y
 467+ F5D8              ;-*-*-                        ex      de,hl                   ;    if (rem >= delta_y)
 468+ F5D8              ;-*-*-                        ld      de,(delta_y)            ;    .
 469+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 470+ F5D8              ;-*-*-                        jr      z,.RemGTEDeltaY         ;    .
 471+ F5D8              ;-*-*-                        jr      nc,.RemGTEDeltaY        ;    .
 472+ F5D8              ;-*-*-;                       ... ... x pos = x pos + 1
 473+ F5D8              ;-*-*-                        ld      hl,x_pos                ;       ++x_pos
 474+ F5D8              ;-*-*-                        inc     (hl)                    ;       .
 475+ F5D8              ;-*-*-                        ld      hl,(error)              ;       error += delta_y_step
 476+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       .
 477+ F5D8              ;-*-*-                        add     hl,de                   ;       .
 478+ F5D8              ;-*-*-                        ld      (error),hl              ;       .
 479+ F5D8              ;-*-*-.RemGTEDeltaY:
 480+ F5D8              ;-*-*-.Y1IsNotLT0:
 481+ F5D8              ;-*-*-.XneClipMax:            ld      hl,(y2Work)             ;  y_pos_end = y2
 482+ F5D8              ;-*-*-                        ld      (y_pos_end),hl          ;  .
 483+ F5D8              ;-*-*-                        ld      de,127                  ;  y_pos_end = (y_pos_end < 127)?y_pos_end+1:128
 484+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;  .
 485+ F5D8              ;-*-*-                        jr      nc,.YPosEndlt127        ;  .
 486+ F5D8              ;-*-*-                        ld      hl,128                  ;  .
 487+ F5D8              ;-*-*-                        jp      .DoneXneClipMax         ;  .
 488+ F5D8              ;-*-*-.YPosEndlt127:          inc     hl                      ;  .
 489+ F5D8              ;-*-*-.DoneXneClipMax:        ld      (y_pos_end),hl          ;  .
 490+ F5D8              ;-*-*-                                                        ; if sign_x == -1
 491+ F5D8              ;-*-*-.Y2LTE127:              IsMemNegative8JumpFalse sign_x, .SignXNotNegative
 492+ F5D8              ;-*-*-.SignXNegative:         ld      hl,(x_pos)              ;    x_pos = -x_pos
 493+ F5D8              ;-*-*-                        NegHL                        ;    .
 494+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;    .
 495+ F5D8              ;-*-*-                        ld      hl,(y2Work)             ;    x_pos_end = -x_pos_end
 496+ F5D8              ;-*-*-.SignXNotNegative:      ld      hl,(delta_y_step)       ; delta_y_step -= delta_x_step
 497+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ; .
 498+ F5D8              ;-*-*-                        ClearCarryFlag                  ; .
 499+ F5D8              ;-*-*-                        sbc     hl,de                   ; .
 500+ F5D8              ;-*-*-                        ld      hl,(delta_x_step)       ; .
 501+ F5D8              ;-*-*-;..................................................................................................................................
 502+ F5D8              ;-*-*-;--- Dx < Dy Longest while loop ------------------------;
 503+ F5D8              ;-*-*-L2DxLTDy:               ld      hl,(y_pos)              ;       starty=y_pos
 504+ F5D8              ;-*-*-                        ld      (starty),hl             ;       .
 505+ F5D8              ;-*-*-;--- Version where longest issaved ---------------------;
 506+ F5D8              ;-*-*-.LoadAlternateRegs:     ld      bc,(y_pos)              ;       we already have IY so just need xpos and end
 507+ F5D8              ;-*-*-                        ld      de,(y_pos_end)
 508+ F5D8              ;-*-*-                        ld      iy,(x_pos)
 509+ F5D8              ;-*-*-                        ld      hl,ix                   ;    load hl as target array
 510+ F5D8              ;-*-*-                        ld      a,c                     ;    by this point y pos must be 8 bit
 511+ F5D8              ;-*-*-                        add     hl,a                    ;    So we are setting up hl as targetArray pointer
 512+ F5D8              ;-*-*-                        add     hl,a
 513+ F5D8              ;-*-*-                        exx                             ;       switch to alternate registers
 514+ F5D8              ;-*-*-                        ld      hl,(error)              ;       load up stepping into alternate registers
 515+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;       and error
 516+ F5D8              ;-*-*-                        ld      bc,(delta_y_step)       ;
 517+ F5D8              ;-*-*-                        exx                             ;       and then switch back to main registers
 518+ F5D8              ;-*-*-                        ld      a,(sign_x)              ;       if Sign x is -1
 519+ F5D8              ;-*-*-                        and     $80                     ;       .
 520+ F5D8              ;-*-*-                        jr      z,.SetWhileInc          ;       .
 521+ F5D8              ;-*-*-.SetWhileDec:           ld      a,InstrDECIY
 522+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction+1),a; set self modifying to dec and 2 byte instruction
 523+ F5D8              ;-*-*-                        jp      .WhileLoop:             ;       .
 524+ F5D8              ;-*-*-.SetWhileInc:           ld      a,InstrINCIY
 525+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction+1),a; else set to inc
 526+ F5D8              ;-*-*-;--- Update Loop ---------------------------------------;
 527+ F5D8              ;-*-*-; In loop hl  = target array pointer bc = x_pos,       de = x_pos_end, (we don't need to reatin Y_pos)
 528+ F5D8              ;-*-*-;         hl' = error                bc'= delta_y_step de'=delta_x_step
 529+ F5D8              ;-*-*-;- we coudl optimise by setting bc to y_pos_end - y_pos +1 and just doing djnz
 530+ F5D8              ;-*-*-.WhileLoop:             call    CompareBCDESigned       ;      while y_pos != y_pos_end
 531+ F5D8              ;-*-*-                        ret     z                       ;      .
 532+ F5D8              ;-*-*-                        ld      a,iyl
 533+ F5D8              ;-*-*-                        call    L2_plotAtRowLColA       ; targetArray[y_pos] = x_pos
 534+ F5D8              ;-*-*-                        inc     hl
 535+ F5D8              ;-*-*-                        ld      a,iyh
 536+ F5D8              ;-*-*-                        ld      (hl),a
 537+ F5D8              ;-*-*-                        inc     hl
 538+ F5D8              ;-*-*-                        exx                             ;        if error >= 0
 539+ F5D8              ;-*-*-                        bit     7,h                     ;        .
 540+ F5D8              ;-*-*-                        jr      nz,.ErrorNegative       ;        .
 541+ F5D8              ;-*-*-.WhileIncInstuction:    inc     iy                      ;             x_pos += sign_x (doneas self modifying to inc or dec)
 542+ F5D8              ;-*-*-.ErrorPositive:         ClearCarryFlag                  ;             error -= delta_y_step
 543+ F5D8              ;-*-*-                        sbc     hl,bc                   ;             .
 544+ F5D8              ;-*-*-                        jp      .LoopEnd                ;             .
 545+ F5D8              ;-*-*-.ErrorNegative:         add     hl,de                   ;        else error += delta x step
 546+ F5D8              ;-*-*-.LoopEnd:               exx                             ;             back to main regsters
 547+ F5D8              ;-*-*-                        inc     bc                      ;        ++y_pos
 548+ F5D8              ;-*-*-                        jp      .WhileLoop
 549+ F5D8              ;-*-*-
 550+ F5D8              ;-*-*-
 551+ F5D8              ;-*-*-;---------------------------------
 552+ F5D8              ;-*-*-L2_plotAtRowLColC:      ld      a,c
 553+ F5D8              ;-*-*-L2_plotAtRowLColA:      push    bc,,de,,hl,,af
 554+ F5D8              ;-*-*-                        ex      af,af'
 555+ F5D8              ;-*-*-                        push    af
 556+ F5D8              ;-*-*-                        ex      af,af'
 557+ F5D8              ;-*-*-                        ld      b,l
 558+ F5D8              ;-*-*-                        ld      c,a
 559+ F5D8              ;-*-*-                        ld      a,$FF                   ; white for now
 560+ F5D8              ;-*-*-                        call    l2_plot_pixel
 561+ F5D8              ;-*-*-                        pop     af
 562+ F5D8              ;-*-*-                        ex      af,af'
 563+ F5D8              ;-*-*-                        pop     bc,,de,,hl,,af
 564+ F5D8              ;-*-*-                        ret
 565+ F5D8              ;-*-*-
 566+ F5D8
 567+ F5D8 00 00        x1                      dw 0
 568+ F5DA 00 00        y1                      dw 0
 569+ F5DC 00 00        x2                      dw 0
 570+ F5DE 00 00        y2                      dw 0
 571+ F5E0 00 00        savex1                  dw 0
 572+ F5E2 00 00        savey1                  dw 0
 573+ F5E4 00 00        savex2                  dw 0
 574+ F5E6 00 00        savey2                  dw 0
 575+ F5E8 00 00        temp                    dw 0
 576+ F5EA 00           longest:                DB 0
 577+ F5EB 00 00        x1Work:                 DW 0
 578+ F5ED 00 00        y1Work:                 DW 0
 579+ F5EF 00 00        x2Work:                 DW 0
 580+ F5F1 00 00        y2Work:                 DW 0
 581+ F5F3 00 00        x_pos:                  DW 0
 582+ F5F5 00 00        y_pos:                  DW 0
 583+ F5F7 00 00        x_pos_end:              DW 0
 584+ F5F9 00 00        y_pos_end:              DW 0
 585+ F5FB 00 00        clip_xmax:              DW 0
 586+ F5FD 00 00        clip_xmin:              DW 0
 587+ F5FF 00 00        sign_x                  DW 0
 588+ F601 00           sign_y                  DB 0
 589+ F602 00 00        delta_x                 DW 0
 590+ F604 00 00        delta_y                 DW 0
 591+ F606 00 00        delta_y_x               DW 0 ; holds the compressed version for elite line draw
 592+ F608 00 00        delta_x_step            DW 0
 593+ F60A 00 00        delta_y_step            DW 0
 594+ F60C 00 00        linetemp                DW 0
 595+ F60E 00 00        gradient                DW 0
 596+ F610 00 00        tSlope                  DW 0
 597+ F612 00 00        msd                     DW 0
 598+ F614 00 00        error                   DW 0
 599+ F616 00           set_exit                DB 0
 600+ F617 00 00        rem                     DW 0
 601+ F619              InstrDECBC              equ $0B
 602+ F619              InstrINCBC              equ $03
 603+ F619              InstrDECIY              equ $2B
 604+ F619              InstrINCIY              equ $23
 605+ F619
 606+ F619              MACROAequBMinusC16:     MACRO   pA, pB, pC
 607+ F619 ~                                    ld      hl,(pB)                         ;       error = delta_y_step - delta_x;
 608+ F619 ~                                    ld      de,(pC)                         ; .
 609+ F619 ~                                    ClearCarryFlag                          ; .
 610+ F619 ~                                    sbc     hl,de                           ; .
 611+ F619 ~                                    ld      (pA),hl
 612+ F619                                      ENDM
 613+ F619              ;--- Swaps point 1 and point 2 around (i.e x1 y1 <--> x2 y2)
 614+ F619 2A DA F5     SwapCoords:             ld      hl,(y1)                         ;       then swap point 1 and point 2
 615+ F61C ED 5B DE F5                          ld      de,(y2)                         ;       .
 616+ F620 ED 53 DA F5                          ld      (y1),de                         ;       .
 617+ F624 22 DE F5                             ld      (y2),hl                         ;       .
 618+ F627 2A D8 F5                             ld      hl,(x1)                         ;       .
 619+ F62A ED 5B DC F5                          ld      de,(x2)                         ;       .
 620+ F62E ED 53 D8 F5                          ld      (x1),de                         ;       .
 621+ F632 22 DC F5                             ld      (x2),hl                         ;       .
 622+ F635 C9                                   ret
 623+ F636
 624+ F636                      ; DEFINE SPLITLINE 1
 625+ F636
 626+ F636                      DEFINE CLIPPED_LINEX 1
 627+ F636                      DEFINE SPLITORLINEX  1
 628+ F636                      IFDEF SPLITLINE
 628+ F636 ~
 629+ F636 ~            l2_draw_clipped_line:
 630+ F636                      ENDIF
 631+ F636                      IFDEF CLIPPED_LINEX
 631+ F636
 632+ F636              l2_draw_clipped_lineX:
 633+ F636                      ENDIF
 634+ F636                      IFDEF SPLITORLINEX
 635+ F636 2A DA F5                             ld      hl,(y1)                         ; if (y1 > y2)
 636+ F639 ED 5B DE F5                          ld      de,(y2)                         ; .
 637+ F63D CD 27 99                             call    CompareHLDESgn                  ; .
 638+ F640 DA 46 F6                             jp      c,.NoSwapCoords
 639+ F643 CD 19 F6     .SwapCoords:            call    SwapCoords
 640+ F646              .NoSwapCoords:
 641+ F646 ED 5B DA F5  .CalcDX:                ld      de,(y1)                         ; Calculate |dy|
 642+ F64A 2A DE F5                             ld      hl,(y2)                         ; .
 643+ F64D                                      ClearCarryFlag                          ; .
 643+ F64D B7          >                        or a
 644+ F64E ED 52                                sbc     hl,de                           ; .
 645+ F650 E5 FD E1                             ld      iy,hl                           ; iy = |dy|
 646+ F653 ED 5B D8 F5  .CalcDy:                ld      de,(x1)                         ; Calculate |dx|
 647+ F657 2A DC F5                             ld      hl,(x2)                         ; .
 648+ F65A 06 00                                ld      b,0                             ; assume x1 < x2 and assume no negate needed
 649+ F65C CD 27 99                             call    CompareHLDESgn                  ;
 650+ F65F D2 64 F6                             jp      nc,.DxNoSwap                     ;
 651+ F662 EB           .DxSwap:                ex      de,hl                           ; swap just x over
 652+ F663 04                                   inc     b                               ; and flag that we had to do it
 653+ F664              .DxNoSwap:              ClearCarryFlag                          ;
 653+ F664 B7          >                        or a
 654+ F665 ED 52                                sbc     hl,de                           ;
 655+ F667 E5 DD E1                             ld      ix,hl                           ; ix = |dx|
 656+ F66A DD 7C        .CheckForHuge:          ld      a,ixh                           ; if either dx or dy > 255 then split line
 657+ F66C FD B4                                or      iyh                             ; .
 658+ F66E C2 82 F6                             jp      nz, .BreakNeeded                ; .
 659+ F671 DD 7D        .ChecktGT180:           ld      a,ixl
 660+ F673 FE B4                                cp      180
 661+ F675 D2 82 F6                             jp      nc,.BreakNeeded
 662+ F678 FD 7D                                ld      a,iyl
 663+ F67A FE B4                                cp      180
 664+ F67C D2 82 F6                             jp      nc,.BreakNeeded
 665+ F67F C3 E6 F6                             jp      .noBreakNeeded
 666+ F682              .BreakNeeded:           ldCopy2Byte y1, savey1                  ;       savey1 = y1                     create savey1 (y1) to savey2 (y break)
 666+ F682 2A DA F5    >                        ld       hl,(y1)
 666+ F685 22 E2 F5    >                        ld       (savey1),hl
 667+ F688                                      ShiftIYRight1                           ;       savey2 = y1 + (work_dy/2)
 667+ F688 FD 7C       >			   ld 	a,iyh
 667+ F68A CB 3F       >			   srl 	a
 667+ F68C FD 67       >			   ld	iyh,a
 667+ F68E FD 7D       >			   ld 	a,iyl
 667+ F690 1F          >			   rra
 667+ F691 FD 6F       >			   ld	iyl,a
 668+ F693 2A DA F5                             ld      hl,(y1)                         ;       .
 669+ F696                                      ClearCarryFlag                          ;       .
 669+ F696 B7          >                        or a
 670+ F697 FD 54 FD 5D                          ld      de,iy
 671+ F69B ED 5A                                adc     hl,de                           ;       .
 672+ F69D 22 E6 F5                             ld      (savey2),hl                     ;       .
 673+ F6A0 22 DA F5                             ld      (y1),hl                         ;       y1     = savey2, y2 untouched   create y1 (break) to y2
 674+ F6A3 05                                   dec     b                               ;       if b was 1 then decb would set z flag so we know that x1 > x2
 675+ F6A4 C2 AA F6                             jp      nz,.X1gtX2
 676+ F6A7 CD 19 F6     .X1lteX2:               call    SwapCoords
 677+ F6AA              .X1gtX2:                ldCopy2Byte x1, savex1                  ;       savex1 = x1                     create savex1 (x1) to savex2 (x break)
 677+ F6AA 2A D8 F5    >                        ld       hl,(x1)
 677+ F6AD 22 E0 F5    >                        ld       (savex1),hl
 678+ F6B0                                      ShiftIXRight1                           ;       savex2 = x1 + (work_dx/2)
 678+ F6B0 DD 7C       >			   ld 	a,ixh
 678+ F6B2 CB 3F       >			   srl 	a
 678+ F6B4 DD 67       >			   ld	ixh,a
 678+ F6B6 DD 7D       >			   ld 	a,ixl
 678+ F6B8 1F          >			   rra
 678+ F6B9 DD 6F       >			   ld	ixl,a
 679+ F6BB 2A D8 F5                             ld      hl,(x1)                         ;       .
 680+ F6BE                                      ClearCarryFlag                          ;       .
 680+ F6BE B7          >                        or a
 681+ F6BF DD 54 DD 5D                          ld      de,ix
 682+ F6C3 ED 5A                                adc     hl,de                           ;       .
 683+ F6C5 22 E4 F5                             ld      (savex2),hl                     ;       .
 684+ F6C8 22 D8 F5                             ld      (x1),hl                         ;       x1     = savex1, x2 untouched  create x1 (break to x2)
 685+ F6CB                      ENDIF
 686+ F6CB                      IFDEF SPLITLINE
 687+ F6CB ~                                    call    l2_draw_short_line              ;       drawshortLine
 688+ F6CB                      ENDIF
 689+ F6CB                      IFDEF CLIPPED_LINEX
 690+ F6CB CD E6 F6                             call    l2_draw_clipped_line
 691+ F6CE                      ENDIF
 692+ F6CE                      IFDEF SPLITORLINEX
 693+ F6CE                                      ldCopyWord savex1,x1
 693+ F6CE             >                        ldCopy2Byte savex1, x1
 693+ F6CE 2A E0 F5    >                        ld       hl,(savex1)
 693+ F6D1 22 D8 F5    >                        ld       (x1),hl
 694+ F6D4                                      ldCopyWord savey1,y1
 694+ F6D4             >                        ldCopy2Byte savey1, y1
 694+ F6D4 2A E2 F5    >                        ld       hl,(savey1)
 694+ F6D7 22 DA F5    >                        ld       (y1),hl
 695+ F6DA                                      ldCopyWord savex2,x2
 695+ F6DA             >                        ldCopy2Byte savex2, x2
 695+ F6DA 2A E4 F5    >                        ld       hl,(savex2)
 695+ F6DD 22 DC F5    >                        ld       (x2),hl
 696+ F6E0                                      ldCopyWord savey2,y2
 696+ F6E0             >                        ldCopy2Byte savey2, y2
 696+ F6E0 2A E6 F5    >                        ld       hl,(savey2)
 696+ F6E3 22 DE F5    >                        ld       (y2),hl
 697+ F6E6              .noBreakNeeded:         // Falls straight into l2_draw_short_line
 698+ F6E6                      ENDIF
 699+ F6E6                      IFDEF SPLITLINE
 699+ F6E6 ~
 700+ F6E6 ~            l2_draw_short_line:     ; check out of bounds
 701+ F6E6                      ENDIF
 702+ F6E6                      IFDEF CLIPPED_LINEX
 703+ F6E6              l2_draw_clipped_line:
 704+ F6E6                      ENDIF
 705+ F6E6                      IFDEF SPLITORLINEX
 706+ F6E6 2A D8 F5     CheckForOnScreen:       ld      hl,(x1)
 707+ F6E9 ED 5B DC F5                          ld      de,(x2)
 708+ F6ED CB 7C        .X1X2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 709+ F6EF 28 03                                jr      z,.X1X2NotNegative
 710+ F6F1 CB 7A                                bit     7,d
 711+ F6F3 C0           .X1X2IsNegative:        ret     nz
 712+ F6F4 7C           .X1X2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 713+ F6F5 AA                                   xor     d
 714+ F6F6 FA 01 F7                             jp      m,.X1X2SpanScreen
 715+ F6F9 7C           .X1X2BothPositive:      ld      a,h                             ; if x1 or x2 high is zero then at least one pixel is on screen
 716+ F6FA A7                                   and     a
 717+ F6FB CA 01 F7                             jp      z,.X1X2SpanScreen
 718+ F6FE 7A                                   ld      a,d                             ; if x1 was > 255 then if x2 > 255 bail out
 719+ F6FF A7                                   and     a
 720+ F700 C0                                   ret     nz
 721+ F701 2A DA F5     .X1X2SpanScreen:        ld      hl,(y1)
 722+ F704 ED 5B DE F5                          ld      de,(y2)
 723+ F708 CB 7C        .Y1Y2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 724+ F70A 28 03                                jr      z,.Y1Y2NotNegative
 725+ F70C CB 7A                                bit     7,d
 726+ F70E C0           .Y1Y2IsNegative:        ret     nz
 727+ F70F 7C           .Y1Y2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 728+ F710 AA                                   xor     d
 729+ F711 FA 23 F7                             jp      m,.Y1Y2SpanScreen
 730+ F714 01 80 00     .Y1Y2BothPositive:      ld      bc,128                          ; if they are both positive and at least one is < 128 then carry on
 731+ F717 CD 5B 99                             call    CompareHLBC
 732+ F71A 38 07                                jr      c,.Y1Y2SpanScreen
 733+ F71C EB                                   ex      de,hl                           ; save y1 into de
 734+ F71D CD 5B 99                             call    CompareHLBC
 735+ F720 38 01                                jr      c,.Y1Y2SpanScreen
 736+ F722 C9                                   ret
 737+ F723              .Y1Y2SpanScreen:
 738+ F723 CD 3E 99     CheckForHorizontal:     call    CompareHLDESame                 ; de = saved y1 , hl = y2
 739+ F726 CA 52 F5                             jp      z, l2_drawVertClip
 740+ F729 2A D8 F5     CheckForVertical:       ld      hl,(x1)
 741+ F72C ED 5B DC F5                          ld      de,(x2)
 742+ F730 CD 3E 99                             call    CompareHLDESame
 743+ F733 CA 83 F5                             jp      z, l2_drawHorzClip
 744+ F736                                      ; Need horizontal and vertical optimisation code in at thispoint
 745+ F736 2A DA F5     CheckForSwap:           ld      hl,(y1)                         ; if (y1 > y2)
 746+ F739 ED 5B DE F5                          ld      de,(y2)                         ; .
 747+ F73D CD 27 99                             call    CompareHLDESgn                  ; .
 748+ F740 DA 46 F7                             jp      c,.NoSwapCoords
 749+ F743 CD 19 F6     .SwapCoords:            call    SwapCoords
 750+ F746                                      ; Default in sign and clip ranges, sign 16 bit for now
 751+ F746 21 00 00     .NoSwapCoords:          ld      hl,0                            ; clip_xmin = 0;
 752+ F749 22 FD F5                             ld      (clip_xmin),hl                  ; .
 753+ F74C 2E FF                                ld      l,255                           ; clip xmax = 255;
 754+ F74E 22 FB F5                             ld      (clip_xmax),hl                  ; .
 755+ F751 21 01 00                             ld      hl,1                            ; sign_x = 1
 756+ F754 22 FF F5                             ld      (sign_x),hl                     ; .
 757+ F757                                      ; if moving right to left then swap signs and clip
 758+ F757 2A D8 F5                             ld      hl,(x1)                         ; if x1 > x2
 759+ F75A ED 5B DC F5                          ld      de,(x2)                         ; .
 760+ F75E CD 27 99                             call    CompareHLDESgn                  ; .
 761+ F761 38 2C                                jr      c,.X1tlX2                       ; .
 762+ F763 21 FF FF     .X1gteX2:               ld      hl, -1                          ;        sign_x = 01
 763+ F766 22 FF F5                             ld      (sign_x),hl                     ;        .
 764+ F769 2A D8 F5                             ld      hl,(x1)                         ;        x1 = -x1;
 765+ F76C                                      macronegate16hl                         ;        .
 765+ F76C AF          >					xor 	a
 765+ F76D 95          >					sub 	l
 765+ F76E 6F          >					ld 		l,a
 765+ F76F 9F          >					sbc 	a,a
 765+ F770 94          >					sub 	h
 765+ F771 67          >					ld 		h,a
 766+ F772 22 D8 F5                             ld      (x1),hl                         ;        .
 767+ F775 ED 5B DC F5                          ld      de,(x2)                         ;        x2 = -x2;
 768+ F779                                      macronegate16de                         ;        .
 768+ F779 AF          >					xor 	a
 768+ F77A 93          >                    sub 	e
 768+ F77B 5F          >                    ld 		e,a
 768+ F77C 9F          >                    sbc 	a,a
 768+ F77D 92          >                    sub 	d
 768+ F77E 57          >                    ld 		d,a
 769+ F77F ED 53 DC F5                          ld      (x2),de                         ;        .
 770+ F783 21 01 FF                             ld      hl,-255                         ;        clip_xmin =-255;
 771+ F786 22 FD F5                             ld      (clip_xmin),hl                  ;        .
 772+ F789 21 00 00                             ld      hl,0                            ;        clip_xmax = 0;
 773+ F78C 22 FB F5                             ld      (clip_xmax),hl                  ;        .
 774+ F78F              .X1tlX2:                                                        ;
 775+ F78F                                      ; calculate deltas
 776+ F78F 2A DC F5     .DxEquX2MinusX1:        ld      hl,(x2)                         ; delta_x = x2 - x1;
 777+ F792 ED 5B D8 F5                          ld      de,(x1)                         ; .
 778+ F796                                      ClearCarryFlag                          ; .
 778+ F796 B7          >                        or a
 779+ F797 ED 52                                sbc     hl,de                           ; .
 780+ F799 22 02 F6                             ld      (delta_x),hl                    ; .
 781+ F79C 2A DE F5     .DyEquY2MinusY1:        ld      hl,(y2)                         ; delta_y = y2 - y1;
 782+ F79F ED 5B DA F5                          ld      de,(y1)                         ; .
 783+ F7A3                                      ClearCarryFlag                          ; .
 783+ F7A3 B7          >                        or a
 784+ F7A4 ED 52                                sbc     hl,de                           ; .
 785+ F7A6 22 04 F6                             ld      (delta_y),hl                    ; .
 786+ F7A9 ED 5B 02 F6  .ScaleDeltaXY:          ld      de,(delta_x)                    ; we already have delta y but x could be negative
 787+ F7AD 06 00                                ld      b,0
 788+ F7AF CB 7A                                bit     7,d
 789+ F7B1 CA BB F7                             jp      z,.DeltaYABSDone                ; de = | de |, b = 1 to denote negative needs resetting
 790+ F7B4 04                                   inc     b
 791+ F7B5                                      macronegate16de
 791+ F7B5 AF          >					xor 	a
 791+ F7B6 93          >                    sub 	e
 791+ F7B7 5F          >                    ld 		e,a
 791+ F7B8 9F          >                    sbc 	a,a
 791+ F7B9 92          >                    sub 	d
 791+ F7BA 57          >                    ld 		d,a
 792+ F7BB              .DeltaYABSDone:
 793+ F7BB ~            /*.ScaleHighLoop:         ld      a,d
 794+ F7BB ~                                    or      h
 795+ F7BB ~                                    jr      z,.HighScaleDone
 796+ F7BB ~                                    ShiftDERight1
 797+ F7BB ~                                    ShiftHLRight1
 798+ F7BB ~                                    jp      .ScaleHighLoop
 799+ F7BB ~            .HighScaleDone:
 800+ F7BB ~            .LowScaleLoop:          ld      a,e
 801+ F7BB ~                                    or      l
 802+ F7BB ~                                    and     $80
 803+ F7BB ~                                    jr      z,.LowScaleDone
 804+ F7BB ~                                    ShiftDERight1
 805+ F7BB ~                                    ShiftHLRight1
 806+ F7BB ~                                    jp      .LowScaleLoop
 807+ F7BB ~            .LowScaleDone:          bit     0,b
 808+ F7BB ~                                    jr      z,.DeltaDone
 809+ F7BB ~            .SortDXSign:            macronegate16de
 810+ F7BB ~            .DeltaDone:             ld      (delta_x),de
 811+ F7BB ~                                    ld      (delta_y),hl*/
 812+ F7BB 2A 02 F6     .DeltaXStepCalc:        ld     hl, (delta_x)
 813+ F7BE                                      ClearCarryFlag                          ; delta_x_step = 2 * delta_x;
 813+ F7BE B7          >                        or a
 814+ F7BF ED 6A                                adc     hl,hl                           ; .
 815+ F7C1 22 08 F6                             ld      (delta_x_step),hl               ; .
 816+ F7C4 2A 04 F6     .DeltaYStepCalc:        ld     hl, (delta_y)
 817+ F7C7                                      ClearCarryFlag                          ; delta_y_step = 2 * delta_y;
 817+ F7C7 B7          >                        or a
 818+ F7C8 ED 6A                                adc     hl,hl                           ; .
 819+ F7CA 22 0A F6                             ld      (delta_y_step),hl               ; .
 820+ F7CD 2A D8 F5                             ld      hl,(x1)                         ; x_pos = x1;
 821+ F7D0 22 F3 F5                             ld      (x_pos),hl                      ; .
 822+ F7D3 ED 5B DA F5                          ld      de,(y1)                         ; y_pos = y1;
 823+ F7D7 ED 53 F5 F5                          ld      (y_pos),de                      ; .
 824+ F7DB                                      ; check if we are workign on dx or dy
 825+ F7DB 2A 02 F6     .CompareDxDy:           ld      hl,(delta_x)                    ; if (delta_x >= delta_y)
 826+ F7DE ED 5B 04 F6                          ld      de,(delta_y)
 827+ F7E2 CD 27 99                             call    CompareHLDESgn
 828+ F7E5 DA 2C FA                             jp      c, LineDrawDxLTDy
 829+ F7E8              ;.......................DxGteDy branch.............................................................................................
 830+ F7E8 2A 0A F6     LineDrawDxGteDy:        ld      hl,(delta_y_step)               ;       error = delta_y_step - delta_x;
 831+ F7EB ED 5B 02 F6                          ld      de,(delta_x)                    ;       .
 832+ F7EF                                      ClearCarryFlag                          ;       .
 832+ F7EF B7          >                        or a
 833+ F7F0 ED 52                                sbc     hl,de                           ;       .
 834+ F7F2 22 14 F6                             ld      (error),hl                      ;       .
 835+ F7F5                                      ZeroA                                   ;       set exit false (0 == false)
 835+ F7F5 AF          >                        xor a
 836+ F7F6 32 16 F6                             ld      (set_exit),a                    ;       .
 837+ F7F9                                      ; clipping of negative y1
 838+ F7F9 2A DA F5                             ld      hl,(y1)                         ;       if (y1 < 0)
 839+ F7FC CB 7C                                bit     7,h                             ;       .
 840+ F7FE CA 96 F8                             jp      z,.y1GTE0                       ;       .
 841+ F801 2A DA F5     .y1LT0:                 ld      hl,(y1)                         ;           temp = (2 * (0 - y1) - 1) * delta_x;
 842+ F804                                      macronegate16hl                         ;               hl = |y1|
 842+ F804 AF          >					xor 	a
 842+ F805 95          >					sub 	l
 842+ F806 6F          >					ld 		l,a
 842+ F807 9F          >					sbc 	a,a
 842+ F808 94          >					sub 	h
 842+ F809 67          >					ld 		h,a
 843+ F80A                                      ClearCarryFlag
 843+ F80A B7          >                        or a
 844+ F80B ED 6A                                adc     hl,hl                           ;               hl = (2 * |y1|)
 845+ F80D 2B                                   dec     hl                              ;               hl = (2 * |y1| - 1)
 846+ F80E ED 5B 02 F6                          ld      de,(delta_x)                    ;               hl = hl * delta_x
 847+ F812 CD D6 91                             call    mulHLbyDE2sc                    ;               .
 848+ F815 22 E8 F5                             ld      (temp),hl                       ;               save to temp
 849+ F818 44 4D                                ld      bc,hl                           ;            msd = temp / delta_y_step
 850+ F81A ED 5B 0A F6                          ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
 851+ F81E CD FA 96                             call    Floor_DivQ                      ;               .
 852+ F821 ED 43 12 F6                          ld      (msd),bc                        ;               .
 853+ F825 2A F3 F5                             ld      hl,(x_pos)                      ;            x_pos += msd
 854+ F828                                      ClearCarryFlag
 854+ F828 B7          >                        or a
 855+ F829 ED 4A                                adc     hl,bc                           ;            .
 856+ F82B 22 F3 F5                             ld      (x_pos),hl                      ;            .
 857+ F82E ED 5B FB F5                          ld      de,(clip_xmax)                  ;            if (x_pos >= clip_xmax)
 858+ F832 CD 3E 99                             call    CompareHLDESame                 ;            .
 859+ F835 CA 3C F8                             jp      z,.xposLTEClipxmax              ;            .
 860+ F838 CD 27 99                             call    CompareHLDESgn                  ;            .
 861+ F83B D0                                   ret     nc                              ;               return
 862+ F83C 2A F3 F5     .xposLTEClipxmax:       ld      hl,(x_pos)                      ;            if (x_pos >= clip_xmin)
 863+ F83F ED 5B FD F5                          ld      de,(clip_xmin)                  ;            .
 864+ F843 CD 27 99                             call    CompareHLDESgn                  ;            .
 865+ F846 DA 96 F8                             jp      c,.xposLTxmin                   ;            .
 866+ F849 2A 12 F6     .xposGTExmin:           ld      hl,(msd)                        ;               rem = temp - (msd * delta_y_step) (its really IY from floor_divq)
 867+ F84C ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   de = msd * delta_y_step
 868+ F850 CD D6 91                             call    mulHLbyDE2sc                    ;                   .
 869+ F853 EB                                   ex      de,hl                           ;                   .
 870+ F854 2A E8 F5                             ld      hl,(temp)                       ;                   hl = temp - de
 871+ F857                                      ClearCarryFlag                          ;                   .
 871+ F857 B7          >                        or a
 872+ F858 ED 52                                sbc     hl,de                           ;                   .
 873+ F85A 22 17 F6                             ld      (rem),hl                        ;                   .
 874+ F85D 11 00 00                             ld      de,0                            ;               y_pos = 0
 875+ F860 ED 53 F5 F5                          ld      (y_pos),de                      ;               .
 876+ F864 ED 5B 17 F6                          ld      de,(rem)                        ;               error -= rem + delta_x
 877+ F868                                      ClearCarryFlag
 877+ F868 B7          >                        or a
 878+ F869 ED 5A                                adc     hl,de                           ;                   de = rem+delta_x
 879+ F86B EB                                   ex      de,hl                           ;                   .
 880+ F86C 2A 14 F6                             ld      hl,(error)                      ;                   hl = error - de
 881+ F86F                                      ClearCarryFlag                          ;                   .
 881+ F86F B7          >                        or a
 882+ F870 ED 52                                sbc     hl,de                           ;                   .
 883+ F872 22 14 F6                             ld      (error),hl                      ;                   write to error
 884+ F875 2A 17 F6                             ld      hl,(rem)                        ;               if (rem > 0)
 885+ F878 7C                                   ld      a,h                             ;               .
 886+ F879 B5                                   or      l                               ;               .
 887+ F87A CA 91 F8                             jp      z,.remLte0                      ;               .
 888+ F87D 2A F3 F5     .remGT0:                ld      hl,(x_pos)                      ;                   x_pos += 1;
 889+ F880 23                                   inc     hl                              ;                   .
 890+ F881 22 F3 F5                             ld      (x_pos),hl                      ;                   .
 891+ F884 2A 14 F6                             ld      hl,(error)                      ;                   error += delta_y_step;
 892+ F887 ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   .
 893+ F88B                                      ClearCarryFlag                          ;                   .
 893+ F88B B7          >                        or a
 894+ F88C ED 5A                                adc     hl,de                           ;                   .
 895+ F88E 22 14 F6                             ld      (error),hl                      ;                   .
 896+ F891 3E 01        .remLte0:               ld      a,1                             ;               set exit = true
 897+ F893 32 16 F6                             ld      (set_exit),a                    ;               .
 898+ F896              .xposLTxmin:
 899+ F896 3A 16 F6     .y1GTE0:                ld      a,(set_exit)                    ;           if (!set_exit && x1 < clip_xmin)
 900+ F899 A7                                   and     a                               ;           .
 901+ F89A C2 2A F9                             jp      nz,.exit_false                  ;           .   Exit if set_exit is true
 902+ F89D 2A D8 F5                             ld      hl,(x1)                         ;           .
 903+ F8A0 ED 5B FD F5                          ld      de,(clip_xmin)                  ;           .   Exit if x1 > xmin
 904+ F8A4 CD 27 99                             call    CompareHLDESgn                  ;           .
 905+ F8A7 D2 2A F9                             jp      nc,.exit_false                  ;           .
 906+ F8AA EB                                   ex      de,hl                           ;               temp = delta_y_step * (clip_xmin - x1)
 907+ F8AB ED 5B D8 F5                          ld      de,(x1)                         ;                   (clip_xmin - x1) (already have clip_xmin in de)
 908+ F8AF                                      ClearCarryFlag                          ;                   .
 908+ F8AF B7          >                        or a
 909+ F8B0 ED 52                                sbc     hl,de                           ;                   .
 910+ F8B2 ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   hl = delta_y_step * (clip_xmin - x1)
 911+ F8B6 CD D6 91                             call    mulHLbyDE2sc                    ;                   .
 912+ F8B9 22 E8 F5                             ld      (temp),hl                       ;                   .
 913+ F8BC 44 4D        .msdEQtempDIVdxstep:    ld      bc,hl                           ;               msd = temp / delta_x_step
 914+ F8BE ED 5B 08 F6                          ld      de,(delta_x_step)               ;                  BC = BC / DE, HL = BC % DE
 915+ F8C2 CD FA 96                             call    Floor_DivQ                      ;                  .
 916+ F8C5 ED 43 12 F6                          ld      (msd),bc                        ;                  .
 917+ F8C9 E5 FD E1                             ld      iy,hl                           ;                  save BC%DE into HL (temp % delta x step0
 918+ F8CC 2A F5 F5     .yposPlusmsd:           ld      hl,(y_pos)                      ;               y_pos += msd
 919+ F8CF                                      ClearCarryFlag                          ;                   bc already is msd
 919+ F8CF B7          >                        or a
 920+ F8D0 ED 4A                                adc     hl,bc                           ;                   hl += bc
 921+ F8D2 22 F5 F5                             ld      (y_pos),hl                      ;                   .
 922+ F8D5 FD E5 E1                             ld      hl,iy                           ;               rem = temp % delta_x_step (which is in IY)
 923+ F8D8 22 17 F6                             ld      (rem),hl                        ;               .
 924+ F8DB 2A F5 F5                             ld      hl,(y_pos)                      ;           if ((y_pos > 127) || (y_pos == 127 && rem >= delta_x))
 925+ F8DE 11 7F 00                             ld      de,127                          ;           .
 926+ F8E1 CD 3E 99                             call    CompareHLDESame                 ;           .    if y_pos != clipxmax skip the abort test
 927+ F8E4 20 0B                                jr      nz,.YPosNotClipymax             ;           .
 928+ F8E6 2A 17 F6                             ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
 929+ F8E9 ED 5B 02 F6                          ld      de,(delta_x)                    ;           .
 930+ F8ED CD 27 99                             call    CompareHLDESgn                  ;           .
 931+ F8F0 D8                                   ret     c                               ;           .
 932+ F8F1 EB           .YPosNotClipymax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
 933+ F8F2 CD 27 99                             call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
 934+ F8F5 D8                                   ret     c
 935+ F8F6 2A FD F5     .yposLT127:             ld      hl,(clip_xmin)                  ;               x_pos = clip_xmin;
 936+ F8F9 22 F3 F5                             ld      (x_pos),hl                      ;               .
 937+ F8FC 2A 14 F6                             ld      hl,(error)                      ;               error += rem
 938+ F8FF ED 5B 17 F6                          ld      de,(rem)                        ;               .
 939+ F903                                      ClearCarryFlag                          ;               .
 939+ F903 B7          >                        or a
 940+ F904 ED 5A                                adc     hl,de                           ;               .
 941+ F906 22 14 F6                             ld      (error),hl                      ;               .
 942+ F909 2A 17 F6                             ld      hl,(rem)                        ;               if (rem >= delta_x)
 943+ F90C ED 5B 02 F6                          ld      de,(delta_x)                    ;               .
 944+ F910 CD 27 99                             call    CompareHLDESgn                  ;               .
 945+ F913 DA 2A F9                             jp      c,.remLTDeltaX                  ;               .
 946+ F916 2A F5 F5     .remGTEDeltaX:          ld      hl,(y_pos)                      ;                   y_pos++
 947+ F919 23                                   inc     hl
 948+ F91A 22 F5 F5                             ld      (y_pos),hl
 949+ F91D 2A 14 F6                             ld      hl,(error)                      ;                    error -= delta_x_step;
 950+ F920 ED 5B 08 F6                          ld      de,(delta_x_step)               ;                    .
 951+ F924                                      ClearCarryFlag                          ;                    .
 951+ F924 B7          >                        or a
 952+ F925 ED 52                                sbc     hl,de                           ;                    .
 953+ F927 22 14 F6                             ld      (error),hl                      ;                    .
 954+ F92A              .remLTDeltaX:
 955+ F92A 2A DC F5     .exit_false:            ld      hl,(x2)                         ;           x_pos_end = x2;
 956+ F92D 22 F7 F5                             ld      (x_pos_end),hl                  ;           .
 957+ F930 2A DE F5                             ld      hl,(y2)                         ;           if (y2 > 127)
 958+ F933 11 7F 00                             ld      de,127                          ;           .
 959+ F936 CD 3E 99                             call    CompareHLDESame                 ;           .   if y2 is zero fails check
 960+ F939 CA 90 F9                             jp      z,.y2LTE127                     ;           .
 961+ F93C CD 27 99                             call    CompareHLDESgn                  ;           .   if y2 < 127 then there is carry so fails check
 962+ F93F DA 90 F9                             jp      c,.y2LTE127                      ;           .
 963+ F942 21 7F 00     .y2GT127:               ld      hl,127                          ;               temp = delta_x_step * (127 - y1) + delta_x;
 964+ F945 ED 5B DA F5                          ld      de,(y1)                         ;                   hl = 127-y1
 965+ F949                                      ClearCarryFlag                          ;
 965+ F949 B7          >                        or a
 966+ F94A ED 52                                sbc     hl,de
 967+ F94C ED 5B 08 F6                          ld      de,(delta_x_step)               ;                   hl = delta_x_step * (127-y1)
 968+ F950 CD D6 91                             call    mulHLbyDE2sc                    ;                   .
 969+ F953 ED 5B 02 F6                          ld      de,(delta_x)                    ;                   hl += delta_x
 970+ F957                                      ClearCarryFlag                          ;                   .
 970+ F957 B7          >                        or a
 971+ F958 ED 5A                                adc     hl,de                           ;                   .
 972+ F95A 22 E8 F5                             ld      (temp),hl
 973+ F95D 44 4D                                ld      bc,hl
 974+ F95F ED 5B 0A F6                          ld      de,(delta_y_step)               ;               msd = temp / delta y step
 975+ F963 CD FA 96                             call    Floor_DivQ                      ;               .
 976+ F966 ED 43 12 F6                          ld      (msd),bc                        ;               .
 977+ F96A 2A D8 F5                             ld      hl,(x1)                         ;               x_pos_end = x1 + msd;
 978+ F96D                                      ClearCarryFlag                          ;               .
 978+ F96D B7          >                        or a
 979+ F96E ED 4A                                adc     hl,bc                           ;               .
 980+ F970 22 F7 F5                             ld      (x_pos_end),hl                  ;               .
 981+ F973 2A 12 F6                             ld      hl,(msd)                        ;               if ((temp - msd * delta_y_step) == 0) --x_pos_end
 982+ F976 ED 5B 0A F6                          ld      de,(delta_y_step)               ;               .
 983+ F97A CD D6 91                             call    mulHLbyDE2sc                    ;               .
 984+ F97D EB                                   ex      de,hl                           ;               .
 985+ F97E 2A E8 F5                             ld      hl,(temp)                       ;               .
 986+ F981                                      ClearCarryFlag                          ;               .
 986+ F981 B7          >                        or a
 987+ F982 ED 52                                sbc     hl,de                           ;               .
 988+ F984 7C                                   ld      a,h                             ;               .
 989+ F985 B5                                   or      l                               ;               .
 990+ F986 C2 90 F9                             jp      nz,.NotTheSame                  ;               .
 991+ F989 2A F7 F5     .IsTheSame:             ld      hl,(x_pos_end)                  ;                   --x_pos_end
 992+ F98C 2B                                   dec     hl                              ;                   .
 993+ F98D 22 F7 F5                             ld      (x_pos_end),hl                  ;                   .
 994+ F990              .NotTheSame:
 995+ F990 2A F7 F5     .y2LTE127:              ld      hl,(x_pos_end)                  ;           x_pos_end = min (x_pos_end,clip_xmax) + 1
 996+ F993 ED 5B FB F5                          ld      de,(clip_xmax)                  ;           .
 997+ F997 CD 27 99                             call    CompareHLDESgn                  ;           .
 998+ F99A D2 A7 F9                             jp      nc,.xposgtexmax                 ;           .
 999+ F99D 2A F7 F5     .xposltxmax:            ld      hl,(x_pos_end)                  ;           .
1000+ F9A0 23                                   inc     hl                              ;               x_pos_end+1
1001+ F9A1 22 F7 F5                             ld      (x_pos_end),hl                  ;               .
1002+ F9A4 C3 AC F9                             jp      .DoneXposAdjust                 ;               .
1003+ F9A7 13           .xposgtexmax:           inc     de                              ;               else
1004+ F9A8 ED 53 F7 F5                          ld      (x_pos_end),de                  ;               clip_xmax+1
1005+ F9AC 3A FF F5     .DoneXposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
1006+ F9AF 3C                                   inc     a
1007+ F9B0 C2 CB F9                             jp      nz,.SignNotMinus1
1008+ F9B3 2A F3 F5     .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
1009+ F9B6                                      macronegate16hl
1009+ F9B6 AF          >					xor 	a
1009+ F9B7 95          >					sub 	l
1009+ F9B8 6F          >					ld 		l,a
1009+ F9B9 9F          >					sbc 	a,a
1009+ F9BA 94          >					sub 	h
1009+ F9BB 67          >					ld 		h,a
1010+ F9BC 22 F3 F5                             ld      (x_pos),hl
1011+ F9BF 2A F7 F5                             ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
1012+ F9C2                                      macronegate16hl
1012+ F9C2 AF          >					xor 	a
1012+ F9C3 95          >					sub 	l
1012+ F9C4 6F          >					ld 		l,a
1012+ F9C5 9F          >					sbc 	a,a
1012+ F9C6 94          >					sub 	h
1012+ F9C7 67          >					ld 		h,a
1013+ F9C8 22 F7 F5                             ld      (x_pos_end),hl
1014+ F9CB              .y2LTE27:
1015+ F9CB              .SignNotMinus1:
1016+ F9CB ED 5B 0A F6                          ld      de,(delta_y_step)               ;        delta_x_step -= delta_y_step;
1017+ F9CF 2A 08 F6                             ld      hl,(delta_x_step)               ;        .
1018+ F9D2                                      ClearCarryFlag                          ;        .
1018+ F9D2 B7          >                        or a
1019+ F9D3 ED 52                                sbc     hl,de                           ;        .
1020+ F9D5 22 08 F6                             ld      (delta_x_step),hl               ;        .
1021+ F9D8 2A F3 F5     .PlottingLoop:          ld      hl,(x_pos)                      ;        while (x_pos != x_pos_end)
1022+ F9DB ED 5B F7 F5                          ld      de,(x_pos_end)                  ;        .
1023+ F9DF CD 3E 99                             call    CompareHLDESame                 ;        .
1024+ F9E2 C8                                   ret     z                               ;        .
1025+ F9E3 2A F3 F5                             ld      hl,(x_pos)                      ;               drawpixel at xpos, ypos, Colour
1026+ F9E6 4D                                   ld      c,l                             ;               .
1027+ F9E7 2A F5 F5                             ld      hl,(y_pos)                      ;               .
1028+ F9EA 45                                   ld      b,l                             ;               .
1029+ F9EB 3E BF                                ld      a,$BF                           ;               .
1030+ F9ED CD B6 E2     .PlotPixel:             call    l2_plot_pixel                   ;               .
1031+ F9F0 2A 14 F6                             ld      hl,(error)                      ;               if (error >= 0)
1032+ F9F3 CB 7C                                bit     7,h                             ;               .
1033+ F9F5 C2 0F FA                             jp      nz,.errorLT0                    ;               .
1034+ F9F8 2A F5 F5     .errorGTE0:             ld	    hl,(y_pos)                      ;                   ++y_pos;
1035+ F9FB 23                                   inc	    hl                              ;                   .
1036+ F9FC 22 F5 F5                             ld	    (y_pos),hl                      ;                   .
1037+ F9FF 2A 14 F6                             ld	    hl,(error)                      ;                   error -= delta_x_step;
1038+ FA02 ED 5B 08 F6                          ld	    de,(delta_x_step)               ;                   .
1039+ FA06                                      ClearCarryFlag                          ;                   .
1039+ FA06 B7          >                        or a
1040+ FA07 ED 52                                sbc	    hl,de                           ;                   .
1041+ FA09 22 14 F6                             ld	    (error),hl                      ;                   .
1042+ FA0C C3 1C FA                             jp      .DoneErrorAdjust                ;                   .
1043+ FA0F 2A 14 F6     .errorLT0:              ld	    hl,(error)                      ;                   error += delta_y_step;
1044+ FA12 ED 5B 0A F6                          ld	    de,(delta_y_step)
1045+ FA16                                      ClearCarryFlag
1045+ FA16 B7          >                        or a
1046+ FA17 ED 5A                                adc	    hl,de
1047+ FA19 22 14 F6                             ld	    (error),hl
1048+ FA1C ED 5B FF F5  .DoneErrorAdjust:       ld      de,(sign_x)
1049+ FA20 2A F3 F5                             ld      hl,(x_pos)
1050+ FA23                                      ClearCarryFlag
1050+ FA23 B7          >                        or a
1051+ FA24 ED 5A                                adc     hl,de
1052+ FA26 22 F3 F5                             ld      (x_pos),hl
1053+ FA29 C3 D8 F9                             jp      .PlottingLoop
1054+ FA2C              ;.......................DxGltDy branch.............................................................................................
1055+ FA2C              LineDrawDxLTDy:         ;ret
1056+ FA2C 2A 08 F6                             ld      hl,(delta_x_step)               ;       error = delta_x_step - delta_y;
1057+ FA2F ED 5B 04 F6                          ld      de,(delta_y)
1058+ FA33                                      ClearCarryFlag
1058+ FA33 B7          >                        or a
1059+ FA34 ED 52                                sbc     hl,de
1060+ FA36 22 14 F6                             ld      (error),hl
1061+ FA39                                      ZeroA                                   ;        set exit false (0 == false)
1061+ FA39 AF          >                        xor a
1062+ FA3A 32 16 F6                             ld      (set_exit),a
1063+ FA3D 2A D8 F5                             ld      hl,(x1)                         ;        if (x1 < clip_xmin)
1064+ FA40 ED 5B FD F5                          ld      de,(clip_xmin)                  ;        .
1065+ FA44 CD 27 99                             call    CompareHLDESgn                  ;        .
1066+ FA47 D2 DB FA                             jp      nc,.x1GTEClipXmin               ;        .
1067+ FA4A ED 5B D8 F5  .x1LTClipXmin:          ld      de,(x1)                         ;           temp = (2 * (cllp_xmin - x1) - 1) * delta_y;
1068+ FA4E 2A FD F5                             ld      hl,(clip_xmin)                  ;               hl = clip_xmin - x1
1069+ FA51                                      ClearCarryFlag                          ;               .
1069+ FA51 B7          >                        or a
1070+ FA52 ED 52                                sbc     hl,de                           ;               .
1071+ FA54                                      ClearCarryFlag
1071+ FA54 B7          >                        or a
1072+ FA55 ED 6A                                adc     hl,hl                           ;               hl = (2* hl)
1073+ FA57 2B                                   dec     hl                              ;               hl = (2 *  hl - 1)
1074+ FA58 ED 5B 04 F6                          ld      de,(delta_y)                    ;               hl = hl  * delta_y
1075+ FA5C CD D6 91                             call    mulHLbyDE2sc                    ;               .
1076+ FA5F 22 E8 F5                             ld      (temp),hl                       ;               .
1077+ FA62 44 4D                                ld      bc,hl                           ;            msd = temp / delta_x_step
1078+ FA64 ED 5B 08 F6                          ld      de,(delta_x_step)               ;               BC = BC / DE, HL = BC % DE
1079+ FA68 CD FA 96                             call    Floor_DivQ                      ;               .
1080+ FA6B ED 43 12 F6                          ld      (msd),bc                        ;               .
1081+ FA6F 2A F5 F5                             ld      hl,(y_pos)                      ;            y_pos += msd
1082+ FA72                                      ClearCarryFlag
1082+ FA72 B7          >                        or a
1083+ FA73 ED 4A                                adc     hl,bc                           ;            .
1084+ FA75 22 F5 F5                             ld      (y_pos),hl                      ;            .
1085+ FA78 11 7F 00                             ld      de,127                          ;            if (y_pos >= 127)
1086+ FA7B CD 3E 99                             call    CompareHLDESame                 ;            .
1087+ FA7E CA 85 FA                             jp      z,.yposGT127                    ;            .
1088+ FA81 CD 27 99                             call    CompareHLDESgn                  ;            .
1089+ FA84 D0                                   ret     nc                              ;               return
1090+ FA85 2A F5 F5     .yposGT127:             ld      hl,(y_pos)                      ;            if (y_pos >= 0)
1091+ FA88 CB 7C                                bit     7,h
1092+ FA8A C2 DB FA                             jp      nz,.yposLT0
1093+ FA8D 2A 12 F6     .yposGT0:               ld      hl,(msd)                        ;               rem = temp - (msd * delta_x_step)
1094+ FA90 ED 5B 08 F6                          ld      de,(delta_x_step)               ;                   de = msd * delta_x_step
1095+ FA94 CD D6 91                             call    mulHLbyDE2sc                    ;                   .
1096+ FA97 EB                                   ex      de,hl                           ;                   .
1097+ FA98 2A E8 F5                             ld      hl,(temp)                       ;                   hl = temp - de
1098+ FA9B                                      ClearCarryFlag                          ;                   .
1098+ FA9B B7          >                        or a
1099+ FA9C ED 52                                sbc     hl,de                           ;                   .
1100+ FA9E 22 17 F6                             ld      (rem),hl                        ;                   .
1101+ FAA1 ED 5B FD F5                          ld      de,(clip_xmin)                  ;               x_pos = clip_xmin
1102+ FAA5 ED 53 F3 F5                          ld      (x_pos),de                      ;               .
1103+ FAA9 ED 5B 17 F6                          ld      de,(rem)                        ;               error -= rem + delta_y
1104+ FAAD                                      ClearCarryFlag                          ;               .
1104+ FAAD B7          >                        or a
1105+ FAAE ED 5A                                adc     hl,de                           ;                   de = rem+delta_x
1106+ FAB0 EB                                   ex      de,hl                           ;                   .
1107+ FAB1 2A 14 F6                             ld      hl,(error)                      ;                   hl = error - de
1108+ FAB4                                      ClearCarryFlag                          ;                   .
1108+ FAB4 B7          >                        or a
1109+ FAB5 ED 52                                sbc     hl,de                           ;                   .
1110+ FAB7 22 14 F6                             ld      (error),hl                      ;                   .
1111+ FABA 2A 17 F6                             ld      hl,(rem)                        ;               if (rem > 0)
1112+ FABD 7C                                   ld      a,h                             ;               .
1113+ FABE B5                                   or      l                               ;               .
1114+ FABF CA D6 FA                             jp      z,.remLte0                      ;               .
1115+ FAC2 2A F5 F5     .remGT0:                ld      hl,(y_pos)                      ;                   y_pos += 1;
1116+ FAC5 23                                   inc     hl
1117+ FAC6 22 F5 F5                             ld      (y_pos),hl
1118+ FAC9 2A 14 F6                             ld      hl,(error)                      ;                   error += delta_x_step;
1119+ FACC ED 5B 08 F6                          ld      de,(delta_x_step)
1120+ FAD0                                      ClearCarryFlag
1120+ FAD0 B7          >                        or a
1121+ FAD1 ED 5A                                adc     hl,de
1122+ FAD3 22 14 F6                             ld      (error),hl
1123+ FAD6 3E 01        .remLte0:               ld      a,1                             ;               set exit = true
1124+ FAD8 32 16 F6                             ld      (set_exit),a                    ;               .
1125+ FADB
1126+ FADB              .yposLT0:
1127+ FADB 3A 16 F6     .x1GTEClipXmin:         ld      a,(set_exit)                    ;        if (!set_exit && y1 < 0)
1128+ FADE A7                                   and     a                               ;        .
1129+ FADF C2 69 FB                             jp      nz,.exit_false                  ;        .  if exit is 1 then its true so exit branch
1130+ FAE2 2A DA F5                             ld      hl,(y1)                         ;        .  if y1 is positive (including 0) then exit branch
1131+ FAE5 CB 7C                                bit     7,h                             ;        .
1132+ FAE7 CA 69 FB                             jp      z,.exit_false                   ;        .
1133+ FAEA 2A DA F5                             ld      hl,(y1)                         ;           temp = delta_x_step * (0 - y1)
1134+ FAED                                      macronegate16hl                         ;           .
1134+ FAED AF          >					xor 	a
1134+ FAEE 95          >					sub 	l
1134+ FAEF 6F          >					ld 		l,a
1134+ FAF0 9F          >					sbc 	a,a
1134+ FAF1 94          >					sub 	h
1134+ FAF2 67          >					ld 		h,a
1135+ FAF3 ED 5B 08 F6                          ld      de,(delta_x_step)               ;           .       hl = delta_x_step * (- y1)
1136+ FAF7 CD D6 91                             call    mulHLbyDE2sc                    ;           .
1137+ FAFA 22 E8 F5                             ld      (temp),hl                       ;           .
1138+ FAFD 44 4D        .msdEQtempDIVdxstep:    ld      bc,hl                           ;           msd = temp / delta_y_step
1139+ FAFF ED 5B 0A F6                          ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
1140+ FB03 CD FA 96                             call    Floor_DivQ                      ;               .
1141+ FB06 ED 43 12 F6                          ld      (msd),bc                        ;               .
1142+ FB0A E5 FD E1                             ld      iy,hl                           ;               same remainders (which is also mod result)
1143+ FB0D 22 17 F6                             ld      (rem),hl                        ;           rem = temp % delta_y_step (swapped from being after x_pos += msd)
1144+ FB10 2A F3 F5     .yposPlusmsd:           ld      hl,(x_pos)                      ;           x_pos += msd
1145+ FB13                                      ClearCarryFlag                          ;           .   bc already is msd
1145+ FB13 B7          >                        or a
1146+ FB14 ED 4A                                adc     hl,bc                           ;           .   hl += bc
1147+ FB16 22 F3 F5                             ld      (x_pos),hl                      ;           .
1148+ FB19 2A F3 F5                             ld      hl,(x_pos)                      ;           if ((x_pos > clip_xmax) || (x_pos == clip_xmax && rem >= delta_y))
1149+ FB1C ED 5B FB F5                          ld      de,(clip_xmax)                  ;           .
1150+ FB20 CD 3E 99                             call    CompareHLDESame                 ;           .    if xpos != clipxmax skip the abort test
1151+ FB23 20 0B                                jr      nz,.XPosNotClipxmax             ;           .
1152+ FB25 2A 17 F6                             ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
1153+ FB28 ED 5B 04 F6                          ld      de,(delta_y)                    ;           .
1154+ FB2C CD 27 99                             call    CompareHLDESgn                  ;           .
1155+ FB2F D8                                   ret     c                               ;           .
1156+ FB30 EB           .XPosNotClipxmax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
1157+ FB31 CD 27 99                             call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
1158+ FB34 D8                                   ret     c
1159+ FB35 21 00 00     .xposLT127:             ld      hl,0                            ;           y_pos = 0;
1160+ FB38 22 F5 F5                             ld      (y_pos),hl                      ;           .
1161+ FB3B 2A 14 F6                             ld      hl,(error)                      ;           error += rem
1162+ FB3E ED 5B 17 F6                          ld      de,(rem)                        ;           .
1163+ FB42                                      ClearCarryFlag                          ;           .
1163+ FB42 B7          >                        or a
1164+ FB43 ED 5A                                adc     hl,de                           ;           .
1165+ FB45 22 14 F6                             ld      (error),hl                      ;           .
1166+ FB48 2A 17 F6                             ld      hl,(rem)                        ;           if (rem >= delta_y)
1167+ FB4B ED 5B 04 F6                          ld      de,(delta_y)                    ;           .
1168+ FB4F CD 27 99                             call    CompareHLDESgn                  ;           .
1169+ FB52 DA 69 FB                             jp      c,.remLTDeltaY                  ;           .
1170+ FB55 2A F3 F5     .remGTEDeltaY:          ld      hl,(x_pos)                      ;                x_pos++
1171+ FB58 23                                   inc     hl
1172+ FB59 22 F3 F5                             ld      (x_pos),hl
1173+ FB5C 2A 14 F6                             ld      hl,(error)                      ;                error -= delta_y_step;
1174+ FB5F ED 5B 0A F6                          ld      de,(delta_y_step)               ;                .
1175+ FB63                                      ClearCarryFlag                          ;                .
1175+ FB63 B7          >                        or a
1176+ FB64 ED 52                                sbc     hl,de                           ;                .
1177+ FB66 22 14 F6                             ld      (error),hl                      ;                .
1178+ FB69              .remLTDeltaY:
1179+ FB69 2A DE F5     .exit_false:            ld      hl,(y2)                         ;           y_pos_end = y2;
1180+ FB6C 22 F9 F5                             ld      (y_pos_end),hl                  ;           .
1181+ FB6F 2A DC F5                             ld      hl,(x2)                         ;           if (x2 > clip_xmax)
1182+ FB72 ED 5B FB F5                          ld      de,(clip_xmax)                  ;           .
1183+ FB76 CD 3E 99                             call    CompareHLDESame                 ;           .
1184+ FB79 CA D0 FB                             jp      z,.x2LTEclipxmax                ;           .
1185+ FB7C CD 27 99                             call    CompareHLDESgn                  ;           .
1186+ FB7F DA D0 FB                             jp      c,.x2LTEclipxmax                ;           .
1187+ FB82 2A FB F5     .x2GTclipxmax:          ld      hl,(clip_xmax)                  ;               temp = delta_y_step * (clip_xmax - x1) + delta_y;
1188+ FB85 ED 5B D8 F5                          ld      de,(x1)                         ;                   hl = 127-y1
1189+ FB89                                      ClearCarryFlag                          ;
1189+ FB89 B7          >                        or a
1190+ FB8A ED 52                                sbc     hl,de
1191+ FB8C ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   hl = delta_x_step * (clip_xmax - x1)
1192+ FB90 CD D6 91                             call    mulHLbyDE2sc                    ;                   .
1193+ FB93 ED 5B 04 F6                          ld      de,(delta_y)                    ;                   hl += delta_y
1194+ FB97                                      ClearCarryFlag                          ;                   .
1194+ FB97 B7          >                        or a
1195+ FB98 ED 5A                                adc     hl,de                           ;                   .
1196+ FB9A 22 E8 F5                             ld      (temp),hl
1197+ FB9D 44 4D                                ld      bc,hl
1198+ FB9F ED 5B 08 F6                          ld      de,(delta_x_step)               ;               msd = temp / delta x step
1199+ FBA3 CD FA 96                             call    Floor_DivQ                      ;               .
1200+ FBA6 ED 43 12 F6                          ld      (msd),bc                        ;               .
1201+ FBAA 2A DA F5                             ld      hl,(y1)                         ;               y_pos_end = y1 + msd;
1202+ FBAD                                      ClearCarryFlag                          ;               .
1202+ FBAD B7          >                        or a
1203+ FBAE ED 4A                                adc     hl,bc                           ;               .
1204+ FBB0 22 F9 F5                             ld      (y_pos_end),hl                  ;               .
1205+ FBB3 2A 12 F6                             ld      hl,(msd)                        ;               if ((temp - msd * delta_x_step) == 0) --y_pos_end
1206+ FBB6 ED 5B 08 F6                          ld      de,(delta_x_step)               ;               .
1207+ FBBA CD D6 91                             call    mulHLbyDE2sc                    ;               .
1208+ FBBD EB                                   ex      de,hl                           ;               .
1209+ FBBE 2A E8 F5                             ld      hl,(temp)                       ;               .
1210+ FBC1                                      ClearCarryFlag                          ;               .
1210+ FBC1 B7          >                        or a
1211+ FBC2 ED 52                                sbc     hl,de                           ;               .
1212+ FBC4 7C                                   ld      a,h                             ;               .
1213+ FBC5 B5                                   or      l                               ;               .
1214+ FBC6 C2 D0 FB                             jp      nz,.NotTheSame                  ;               .
1215+ FBC9 2A F9 F5     .IsTheSame:             ld      hl,(y_pos_end)                  ;                   --x_pos_end
1216+ FBCC 2B                                   dec     hl                              ;                   .
1217+ FBCD 22 F9 F5                             ld      (y_pos_end),hl                  ;                   .
1218+ FBD0              .NotTheSame:
1219+ FBD0 2A F9 F5     .x2LTEclipxmax:         ld      hl,(y_pos_end)                  ;           y_pos_end = min(y_pos_end, clip_ymax) + 1
1220+ FBD3 11 7F 00                             ld      de,127                          ;           .
1221+ FBD6 CD 27 99                             call    CompareHLDESgn                  ;           .
1222+ FBD9 D2 E6 FB                             jp      nc,.yposgteymax                 ;           .
1223+ FBDC 2A F9 F5     .yposltymax:            ld      hl,(y_pos_end)                  ;           .
1224+ FBDF 23                                   inc     hl                              ;           .
1225+ FBE0 22 F9 F5                             ld      (y_pos_end),hl                  ;           .
1226+ FBE3 C3 EB FB                             jp      .DoneYposAdjust                 ;           .
1227+ FBE6 13           .yposgteymax:           inc     de                              ;           .
1228+ FBE7 ED 53 F9 F5                          ld      (y_pos_end),de                  ;           .
1229+ FBEB 3A FF F5     .DoneYposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
1230+ FBEE 3C                                   inc     a
1231+ FBEF C2 0A FC                             jp      nz,.SignNotMinus1
1232+ FBF2 2A F3 F5     .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
1233+ FBF5                                      macronegate16hl
1233+ FBF5 AF          >					xor 	a
1233+ FBF6 95          >					sub 	l
1233+ FBF7 6F          >					ld 		l,a
1233+ FBF8 9F          >					sbc 	a,a
1233+ FBF9 94          >					sub 	h
1233+ FBFA 67          >					ld 		h,a
1234+ FBFB 22 F3 F5                             ld      (x_pos),hl
1235+ FBFE 2A F7 F5                             ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
1236+ FC01                                      macronegate16hl
1236+ FC01 AF          >					xor 	a
1236+ FC02 95          >					sub 	l
1236+ FC03 6F          >					ld 		l,a
1236+ FC04 9F          >					sbc 	a,a
1236+ FC05 94          >					sub 	h
1236+ FC06 67          >					ld 		h,a
1237+ FC07 22 F7 F5                             ld      (x_pos_end),hl
1238+ FC0A ED 5B 08 F6  .SignNotMinus1:         ld      de,(delta_x_step)               ;        delta_y_step -= delta_x_step;
1239+ FC0E 2A 0A F6                             ld      hl,(delta_y_step)               ;        .
1240+ FC11                                      ClearCarryFlag                          ;        .
1240+ FC11 B7          >                        or a
1241+ FC12 ED 52                                sbc     hl,de                           ;        .
1242+ FC14 22 0A F6                             ld      (delta_y_step),hl               ;        .
1243+ FC17 2A F5 F5     .PlottingLoop:          ld      hl,(y_pos)                      ;        while (y_pos != y_pos_end)
1244+ FC1A ED 5B F9 F5                          ld      de,(y_pos_end)
1245+ FC1E CD 3E 99                             call    CompareHLDESame
1246+ FC21 C8                                   ret     z
1247+ FC22 2A F3 F5     .PlotPixel:             ld      hl,(x_pos)
1248+ FC25 4D                                   ld      c,l
1249+ FC26 2A F5 F5                             ld      hl,(y_pos)
1250+ FC29 45                                   ld      b,l
1251+ FC2A 3E BF                                ld      a,$BF
1252+ FC2C CD B6 E2                             call    l2_plot_pixel                   ;               drawpixel at xpos, ypos, Colour
1253+ FC2F 2A 14 F6                             ld      hl,(error)                      ;               if (error >= 0)
1254+ FC32 CB 7C                                bit     7,h
1255+ FC34 C2 54 FC                             jp      nz,.errorLT0
1256+ FC37 2A F3 F5     .errorGTE0:             ld	    hl,(x_pos)                      ;                   ++x_pos
1257+ FC3A ED 5B FF F5                          ld      de,(sign_x)
1258+ FC3E                                      ClearCarryFlag
1258+ FC3E B7          >                        or a
1259+ FC3F ED 5A                                adc     hl,de
1260+ FC41 22 F3 F5                             ld	    (x_pos),hl
1261+ FC44 2A 14 F6                             ld	    hl,(error)                      ;                   error -= delta_y_step;
1262+ FC47 ED 5B 0A F6                          ld	    de,(delta_y_step)
1263+ FC4B                                      ClearCarryFlag
1263+ FC4B B7          >                        or a
1264+ FC4C ED 52                                sbc	    hl,de
1265+ FC4E 22 14 F6                             ld	    (error),hl
1266+ FC51 C3 61 FC                             jp      .DoneErrorAdjust
1267+ FC54 2A 14 F6     .errorLT0:              ld	    hl,(error)                      ;                   error += delta_x_step;
1268+ FC57 ED 5B 08 F6                          ld	    de,(delta_x_step)
1269+ FC5B                                      ClearCarryFlag
1269+ FC5B B7          >                        or a
1270+ FC5C ED 5A                                adc	    hl,de
1271+ FC5E 22 14 F6                             ld	    (error),hl
1272+ FC61 2A F5 F5     .DoneErrorAdjust:       ld      hl,(y_pos)
1273+ FC64 23                                   inc     hl
1274+ FC65 22 F5 F5                             ld      (y_pos),hl
1275+ FC68 C3 17 FC                             jp      .PlottingLoop
1276+ FC6B                      ENDIF
1277+ FC6B
1278+ FC6B
1279+ FC6B 21 D8 F5     l2_draw_6502_line:      ld      hl,x1                           ; copy from currnet position to 6502 variables
1280+ FC6E 11 A9 F1                             ld      de,XX1510
1281+ FC71 01 08 00                             ld      bc,4*2
1282+ FC74 ED B0                                ldir
1283+ FC76 CD 99 F3                             call    LL145_6502                      ; perform 6502 version
1284+ FC79 D8                                   ret     c                               ; returns if carry is set as its a no draw
1285+ FC7A 21 00 00     .CopyBackResults:       ld      hl,0
1286+ FC7D 22 D8 F5                             ld      (x1),hl
1287+ FC80 22 DA F5                             ld      (y1),hl
1288+ FC83 22 DC F5                             ld      (x2),hl
1289+ FC86 22 DE F5                             ld      (y2),hl
1290+ FC89 3A A9 F1                             ld      a,(XX1510)
1291+ FC8C 32 D8 F5                             ld      (x1),a
1292+ FC8F 4F                                   ld      c,a
1293+ FC90 3A AA F1                             ld      a,(XX1510+1)
1294+ FC93 32 DA F5                             ld      (y1),a
1295+ FC96 47                                   ld      b,a
1296+ FC97 3A AB F1                             ld      a,(XX1510+2)
1297+ FC9A 32 DC F5                             ld      (x2),a
1298+ FC9D 5F                                   ld      e,a
1299+ FC9E 3A AC F1                             ld      a,(XX1510+3)
1300+ FCA1 32 DE F5                             ld      (y2),a
1301+ FCA4 57                                   ld      d,a
1302+ FCA5 3E FF                                ld      a,$FF
1303+ FCA7                                      ClearCarryFlag
1303+ FCA7 B7          >                        or a
1304+ FCA8 C9                                   ret
1305+ FCA9                                 ;     call    l2_draw_clipped_line
1306+ FCA9              ;                        call    l2_draw_diagonal                ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
1307+ FCA9              ;................................................................
1308+ FCA9 00 00        result                  dw      0
1309+ FCAB              ;    swap = 0;
1310+ FCAB              ;    if (y1 > y2)
1311+ FCAB 2A DA F5     l2_draw_elite_line:     ld      hl,(y1)                         ; if (y1 > y2)
1312+ FCAE ED 5B DE F5                          ld      de,(y2)                         ; .
1313+ FCB2 CD 27 99                             call    CompareHLDESgn                  ; .
1314+ FCB5 DA BB FC                             jp      c,.NoSwapCoords                 ;
1315+ FCB8              ;        swapp1p2();
1316+ FCB8 CD 19 F6     .SwapCoords:            call    SwapCoords                      ;       swap them so y1 <= y2
1317+ FCBB 2A D8 F5     .NoSwapCoords:          ld      hl,(x1)                         ; hl = x1
1318+ FCBE ED 5B DC F5                          ld      de,(x2)                         ; de = x2
1319+ FCC2 ED 4B DA F5                          ld      bc,(y1)                         ; bc = y1
1320+ FCC6 DD 2A DE F5                          ld      ix,(y2)                         ; ix = y2
1321+ FCCA              .CheckForVertical:
1322+ FCCA              .CheckForHorizontal:
1323+ FCCA FD 26 80                             ld      iyh,128                         ; iyh = xx13 = 128
1324+ FCCD              ;    xx13 = 128;
1325+ FCCD              ;    if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
1326+ FCCD 7A                                   ld      a,d                             ; if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
1327+ FCCE DD B4                                or      ixh                             ; .  [if x2 and y2 > 255 goto point2clip]
1328+ FCD0 20 09                                jr      nz,.Point2Clip                  ; .  .
1329+ FCD2 DD 7D                                ld      a,ixl                           ; .  [if y2 low > 127 goto point2clip]
1330+ FCD4 CB 7F                                bit     7,a                             ; .  .
1331+ FCD6 20 03                                jr      nz,.Point2Clip                  ; .  .
1332+ FCD8              ;        xx13 = 0;
1333+ FCD8 FD 26 00     .Point2NoClip:          ld      iyh,0                           ;       iyh = xx13 = 0
1334+ FCDB              ;    if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
1335+ FCDB 7C           .Point2Clip:            ld      a,h                             ; if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
1336+ FCDC B0                                   or      b                               ; . [ if x1 or y1 > 255 goto clip needed]
1337+ FCDD C2 EE FC                             jp      nz,.ClipNeeded                  ; .
1338+ FCE0 CB 79                                bit     7,c                             ; . [ if y1 low > 127 goto clip needed]
1339+ FCE2 C2 EE FC                             jp      nz,.ClipNeeded                  ; .
1340+ FCE5              ;        if (xx13 != 0)
1341+ FCE5 FD 7C        .ClipPoint1:            ld      a,iyh                           ;       if (xx13 = 0)
1342+ FCE7 A7                                   and     a                               ;       .
1343+ FCE8 CA E5 FD                             jp      z,.ClipComplete                 ;               clipping not needed so treat as done an ddraw the line
1344+ FCEB FD 26 40                             ld      iyh,64                          ;       else xx13 = 64 (xx13 /2 but if xx13 is 0 it never hits here so can just set to 64)
1345+ FCEE              ;.......................LL138
1346+ FCEE FD 7C        .ClipNeeded:            ld      a,iyh                           ; if (xx13 == 128)
1347+ FCF0 CB 7F                                bit     7,a                             ; . [ jump if bit 7 is not set so <> 128]
1348+ FCF2 CA 2B FD                             jp      z,.xx13Not128                   ; .
1349+ FCF5 7C           .xx13Is128:             ld      a,h                             ;       if (x1 < 0 && x2 < 0)
1350+ FCF6 A2                                   and     d                               ;       . [ x1 and x2 high bits 7 are both set then its off to the left]
1351+ FCF7 F8                                   ret     m                               ;               return
1352+ FCF8 78                                   ld      a,b                             ;       if (y1 < 0 && y2 < 0)
1353+ FCF9 DD A4                                and     ixh                             ;       . [ y1 and y2 high bits 7 are both set then its off the top]
1354+ FCFB F8                                   ret     m                               ;               return
1355+ FCFC 7C                                   ld      a,h                             ;       if (x1 > 255  && x2 > 255)
1356+ FCFD CB 7F                                bit     7,a                             ;       . [test if x1 is negative and if so skip]
1357+ FCFF C2 0E FD                             jp      nz,.x1x2LessThan256             ;       .
1358+ FD02 A7                                   and     a                               ;       . [ if x1 is not negative then if high has any value its > 256]
1359+ FD03 CA 0E FD                             jp      z,.x1x2LessThan256              ;       .
1360+ FD06 7A                                   ld      a,d                             ;       . [test if x2 is negative]
1361+ FD07 CB 7F                                bit     7,a                             ;       .
1362+ FD09 C2 0E FD                             jp      nz,.x1x2LessThan256             ;       . < can simplify with with an xor test to detect if opposite signs first >
1363+ FD0C A7                                   and     a                               ;       . [ if x2 is not negative then if high has any value its > 256]
1364+ FD0D C0                                   ret     nz                              ;               return
1365+ FD0E 78           .x1x2LessThan256:       ld      a,b                             ;       if (y1 > 127  && y2 > 127)
1366+ FD0F CB 7F                                bit     7,a                             ;       . [test if y1 is negative]
1367+ FD11 C2 2B FD                             jp      nz,.y1y2LessThan128             ;       .
1368+ FD14 A7                                   and     a                               ;       . [ if y1 is not negative then if high has any value its > 256]
1369+ FD15 CA 2B FD                             jp      z,.y1y2LessThan128              ;       .
1370+ FD18 CB 79                                bit     7,c                             ;       . [ if y1 low bit 7 is set then its > 127]
1371+ FD1A CA 2B FD                             jp      z,.y1y2LessThan128              ;       .
1372+ FD1D DD 7C                                ld      a,ixh                           ;       . [test if y2 is negative]
1373+ FD1F A7                                   and     a                               ;       .
1374+ FD20 FA 2B FD                             jp      m,.y1y2LessThan128              ;       .
1375+ FD23 A7                                   and     a                               ;       . [ if y2 is not negative then if high has any value its > 256]
1376+ FD24 CA 2B FD                             jp      z,.y1y2LessThan128              ;       .
1377+ FD27 DD 7D                                ld      a,ixl                           ;       .
1378+ FD29 A7                                   and     a                               ;       . [ if y2 low bit 7 is set then its > 127]
1379+ FD2A F8                                   ret     m                               ;               return
1380+ FD2B              ;.......................LL115
1381+ FD2B              .xx13Not128:                        // check right point
1382+ FD2B EB           .y1y2LessThan128:       ex      de,hl                           ; delta_x = x2 - x1;
1383+ FD2C                                      ClearCarryFlag                          ; .
1383+ FD2C B7          >                        or a
1384+ FD2D ED 52                                sbc     hl,de                           ; .
1385+ FD2F 22 02 F6                             ld      (delta_x),hl                    ; redundant as its in DE TODO OPTIMISE
1386+ FD32 EB                                   ex      de,hl                           ; de = delta_x for next bit
1387+ FD33 DD E5 E1     .DyEquY2MinusY1:        ld      hl,ix                           ; delta_y = y2 - y1;
1388+ FD36                                      ClearCarryFlag                          ; .
1388+ FD36 B7          >                        or a
1389+ FD37 ED 42                                sbc     hl,bc                           ; .
1390+ FD39 22 04 F6                             ld      (delta_y),hl                    ; . [ so now de = dx and hl = dy]
1391+ FD3C FD 2E 80                             ld      iyl,128                         ; assuming sign is iyl is positive dx dy
1392+ FD3F CB 7A        .SignDeltaXY:           bit     7,d                             ; if delta x is negative (delta y will always be positive)
1393+ FD41 CA 4D FD                             jp      z,.DeltaXPositive               ; .
1394+ FD44 FD 2E 00     .DeltaXNegative:        ld      iyl,0                           ;       so we set sign to 0
1395+ FD47                                      macronegate16de                         ;       and set delta x to |delta x|
1395+ FD47 AF          >					xor 	a
1395+ FD48 93          >                    sub 	e
1395+ FD49 5F          >                    ld 		e,a
1395+ FD4A 9F          >                    sbc 	a,a
1395+ FD4B 92          >                    sub 	d
1395+ FD4C 57          >                    ld 		d,a
1396+ FD4D ED 53 02 F6  .DeltaXPositive:        ld      (delta_x),de                    ;       .
1397+ FD51              ;.......................Scale down DY and DY to 7 bit
1398+ FD51 7C           .ScaleDXDY:             ld      a,h                             ; scale down so that dx and dx are < 256
1399+ FD52 B2                                   or      d                               ; .
1400+ FD53 CA 61 FD                             jp      z,.ScaleDXDYHighDone            ; .
1401+ FD56                                      ShiftDERight1                           ; .
1401+ FD56 CB 3A       >			   srl d
1401+ FD58 CB 1B       >			   rr  e
1402+ FD5A                                      ShiftHLRight1                           ; .
1402+ FD5A CB 3C       >			   srl h
1402+ FD5C CB 1D       >			   rr  l
1403+ FD5E C3 51 FD                             jp      .ScaleDXDY                      ; .
1404+ FD61 7B           .ScaleDXDYHighDone:     ld      a,e                             ; because of signed maths we will scale down to 7 bits to be safe
1405+ FD62 B5                                   or      l                               ; .
1406+ FD63 F2 6E FD                             jp      p,.LowScaleDone                 ; .
1407+ FD66                                      ShiftDERight1                           ; .
1407+ FD66 CB 3A       >			   srl d
1407+ FD68 CB 1B       >			   rr  e
1408+ FD6A                                      ShiftHLRight1                           ; .
1408+ FD6A CB 3C       >			   srl h
1408+ FD6C CB 1D       >			   rr  l
1409+ FD6E              ;.......................Work out slope and gradient - later on we will work with deltax beign abs
1410+ FD6E ED 53 02 F6  .LowScaleDone:          ld      (delta_x),de                    ; save adjusted dx and dy back
1411+ FD72 22 04 F6                             ld      (delta_y),hl                    ; .
1412+ FD75 55                                   ld      d,l                             ; now d = dy e = dx
1413+ FD76 ED 53 06 F6                          ld      (delta_y_x),de                  ; save for diagnostics
1414+ FD7A              .SetUpTSlope:           ZeroA                                   ; Initialise tSlope to 0
1414+ FD7A AF          >                        xor a
1415+ FD7B 32 10 F6                             ld      (tSlope),a                      ; .
1416+ FD7E 7B                                   ld      a,e                             ; a = dx
1417+ FD7F                                      JumpIfAGTENusng d, .deltaxGTEdeltaY     ; if dx < dy
1417+ FD7F BA          >                        cp     d
1417+ FD80 D2 93 FD    >                        jp		nc,.deltaxGTEdeltaY
1418+ FD83 43           .deltaXLTdeltaY:        ld      b,e                             ;       bc = dx $00
1419+ FD84 0E 00                                ld      c,0                             ;       .
1420+ FD86 5A                                   ld      e,d                             ;       de = $00 dy
1421+ FD87 16 00                                ld      d,0                             ;       .
1422+ FD89 CD FA 96                             call    Floor_DivQ                      ;       bc = bc / de  (dx * 256 / dy)
1423+ FD8C ED 43 0E F6                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
1424+ FD90 C3 A4 FD                             jp      .donedxdycheck                  ;       .
1425+ FD93                                                                              ; else
1426+ FD93 42           .deltaxGTEdeltaY:       ld      b,d                             ;       bc = dy << 0
1427+ FD94 0E 00                                ld      c,0                             ;       .
1428+ FD96 16 00                                ld      d,0                             ;       de = 0dx
1429+ FD98 CD FA 96                             call    Floor_DivQ                      ;       bc = bc / de (dy * 256 / dx)
1430+ FD9B ED 43 0E F6                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
1431+ FD9F 3E FF                                ld      a,255                           ;       set tslope to -1
1432+ FDA1 32 10 F6                             ld      (tSlope),a                      ;       .
1433+ FDA4              .donedxdycheck:                 // CHECK CORRECT POINT
1434+ FDA4              ;.......................Clipping point 1
1435+ FDA4                                      ;break
1436+ FDA4 FD 7C                                ld      a,iyh                           ; if xx13 = 0 or xx13 = 128 (values can be 0, 128, 64 later we can optimise to see if its <> 64)
1437+ FDA6 A7                                   and     a                               ; . [xx13 = 0  enter the block]
1438+ FDA7 CA AD FD                             jp      z,.xx13is0or128                 ; .
1439+ FDAA F2 CE FD                             jp      p,.xx13not0or128                ; . [xx13 <> 128 then skip block]
1440+ FDAD CD EB FD     .xx13is0or128:          call    ClipLL118Elite                  ;       clip point 1
1441+ FDB0 FD 7C                                ld      a,iyh                           ;       if xx13 <> 0
1442+ FDB2 A7                                   and     a                               ;       .
1443+ FDB3 CA CA FD                             jp      z,.ImmediateDraw                ;       .
1444+ FDB6 3A D9 F5                             ld      a,(x1+1)                        ;               if (if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127)) return
1445+ FDB9 A7                                   and     a                               ;               .
1446+ FDBA F8                                   ret     m                               ;               . [x1 high is negative then return]
1447+ FDBB C0                                   ret     nz                              ;               . [if x1 high is not zero, x1 > 255 return (above will have sorted negative test on bit 7)]
1448+ FDBC 3A DB F5                             ld      a,(y1+1)                        ;               . [a = x1 high]
1449+ FDBF A7                                   and     a                               ;               .
1450+ FDC0 F8                                   ret     m                               ;               . [if y1 negative return]
1451+ FDC1 C0                                   ret     nz                              ;               . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1452+ FDC2 3A DA F5                             ld      a,(y1)                          ;               . [a = y1 low]
1453+ FDC5 A7                                   and     a                               ;               .
1454+ FDC6 F8                                   ret     m                               ;               . [if y1 > 127 then low byte would appear as negative in bit 7]
1455+ FDC7 C3 CE FD                             jp      .SkipCheckP1OnScreen            ;               else goto SkipCheckP1OnScreen
1456+ FDCA              .ImmediateDraw:         IFDEF SPLITORLINEX
1457+ FDCA CD E6 F6                             call    l2_draw_clipped_line            ;        else if we get here we only needed to clip one point so draw the line
1458+ FDCD                                      ENDIF
1459+ FDCD C9                                   ret                                     ;             and we are done
1460+ FDCE              .xx13not0or128:
1461+ FDCE CD 19 F6     .SkipCheckP1OnScreen:   call    SwapCoords                      ; swap point 1 and point 2 so we can now process P2
1462+ FDD1 CD EB FD                             call    ClipLL118Elite                  ; clip P2
1463+ FDD4 3A D9 F5                             ld      a,(x1+1)                        ; if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127) return
1464+ FDD7 A7                                   and     a                               ; .
1465+ FDD8 F8                                   ret     m                               ; . [if x1 negative return]
1466+ FDD9 C0                                   ret     nz                              ; . [if x1 > 255 return (above will have sorted negative test on bit 7)]
1467+ FDDA 3A DB F5                             ld      a,(y1+1)                        ; . [a = y1 high]
1468+ FDDD A7                                   and     a                               ;
1469+ FDDE F8                                   ret     m                               ; . [if y1 negative return]
1470+ FDDF C0                                   ret     nz                              ; . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1471+ FDE0 3A DA F5                             ld      a,(y1)                          ; . [a = y1 low]
1472+ FDE3 A7                                   and     a                               ; .
1473+ FDE4 F8                                   ret     m                               ; . [if y1 low > 127 then low byte would appear as negative in bit 7]
1474+ FDE5              .ClipComplete:
1475+ FDE5              .xx13is0or128Draw:      IFDEF SPLITORLINEX
1476+ FDE5 CD E6 F6                             call    l2_draw_clipped_line            ; if we get here we only needed to clip one point/have done all slipping needed
1477+ FDE8                                      ENDIF
1478+ FDE8 C9                                   ret
1479+ FDE9              ;................................................................
1480+ FDE9 00 00        ClipSign                dw      0
1481+ FDEB              ClipLL118Elite:        ;break
1482+ FDEB 2A D8 F5     .checkX1IsNegative      ld      hl,(x1)                         ; if x1 is negative
1483+ FDEE CB 7C                                bit     7,h                             ; .
1484+ FDF0 CA 0F FE                             jp      z,.x1GTE0                       ; .
1485+ FDF3 3E FF        .x1LT0:                 ld      a,255                           ;       clip sign = -1
1486+ FDF5 32 E9 FD                             ld      (ClipSign),a                    ;       .
1487+ FDF8 CD 77 FE                             call    CalcLL120                       ;       calc ll120
1488+ FDFB 21 00 00                             ld      hl,0                            ;       x1 = 0
1489+ FDFE 22 D8 F5                             ld      (x1),hl                         ;       .
1490+ FE01 2A DA F5                             ld      hl,(y1)                         ;       y1 = y1 + result
1491+ FE04 ED 5B A9 FC                          ld      de,(result)                     ;       . [and save in hl for optimisation processing y1]
1492+ FE08 19                                   add     hl,de                           ;       .
1493+ FE09 22 DA F5                             ld      (y1),hl                         ;       .
1494+ FE0C C3 2C FE                             jp      .checkY1IsNegative              ;       .
1495+ FE0F 7C           .x1GTE0:                ld      a,h                             ; else
1496+ FE10 A7                                   and     a                               ;       if x1 > 255
1497+ FE11 CA 2C FE                             jp      z,.checkY1IsNegative            ;       .
1498+ FE14                                      ZeroA                                   ;               sign must be 0 for postive adjustment
1498+ FE14 AF          >                        xor a
1499+ FE15 32 E9 FD                             ld      (ClipSign),a                    ;               .
1500+ FE18 CD 77 FE                             call    CalcLL120                       ;               Calc LL120
1501+ FE1B 21 FF 00                             ld      hl,255                          ;               x1 = 255
1502+ FE1E 22 D8 F5                             ld      (x1),hl                         ;               .
1503+ FE21 2A DA F5                             ld      hl,(y1)                         ;               y1 = y1 + result
1504+ FE24 ED 5B A9 FC                          ld      de,(result)                     ;               . [and save in hl for optimisation processing y1]
1505+ FE28 19                                   add     hl,de                           ;               .
1506+ FE29 22 DA F5                             ld      (y1),hl                         ;               .
1507+ FE2C                                                                              ; end if
1508+ FE2C 2A DA F5     .checkY1IsNegative:     ld      hl,(y1)                         ; if (y1 <0) [if we don;t need to clip x1 then we need to load hl with y1 as it never got loaded]
1509+ FE2F CB 7C                                bit     7,h                             ; .
1510+ FE31 CA 4D FE                             jp      z,.checkY1LT128                 ; .
1511+ FE34 3E FF                                ld      a,255                           ;       set sign to -1 for calc
1512+ FE36 32 E9 FD                             ld      (ClipSign),a                    ;       .
1513+ FE39 CD C4 FE                             call    CalcLL123                       ;       calc LL123
1514+ FE3C 2A D8 F5                             ld      hl,(x1)                         ;       x1 = x1 + result
1515+ FE3F ED 5B A9 FC                          ld      de,(result)                     ;       .
1516+ FE43 19                                   add     hl,de                           ;       .
1517+ FE44 22 D8 F5                             ld      (x1),hl                         ;       .
1518+ FE47 21 00 00                             ld      hl,0                            ;       y1 = 0
1519+ FE4A 22 DA F5                             ld      (y1),hl                         ;       .
1520+ FE4D 7C           .checkY1LT128:          ld      a,h                             ; finished if y < 128
1521+ FE4E A7                                   and     a                               ; .
1522+ FE4F C2 55 FE                             jp      nz,.mopUpY1                     ; . [jump to mop up if y1 high <> 0, wehave already dealt with negatvies so don't need to consider that]
1523+ FE52 7D                                   ld      a,l                             ; . [now check y1 low and return if y1 low > 127]
1524+ FE53 A7                                   and     a                               ; .
1525+ FE54 F0                                   ret     p                               ; . [ if y1 low was positive then we are done as it means y1 < 128]
1526+ FE55 11 80 00     .mopUpY1:               ld      de,128                          ; y1 = y1 - 128
1527+ FE58                                      ClearCarryFlag                          ; .
1527+ FE58 B7          >                        or a
1528+ FE59 ED 52                                sbc     hl,de                           ; .
1529+ FE5B 22 DA F5                             ld      (y1),hl                         ; .
1530+ FE5E                                      ZeroA                                   ; set clip sign to 0
1530+ FE5E AF          >                        xor a
1531+ FE5F 32 E9 FD                             ld      (ClipSign),a                    ; to get to here if y1 < 0, y is set to 0, if its < 128 then it never reaches here, so y1 must be > 128 to get here
1532+ FE62 CD C4 FE                             call    CalcLL123                       ; calc LL123
1533+ FE65 2A D8 F5                             ld      hl,(x1)                         ; x1 = x1 + result
1534+ FE68 ED 5B A9 FC                          ld      de,(result)                     ; .
1535+ FE6C 19                                   add     hl,de                           ; .
1536+ FE6D 22 D8 F5                             ld      (x1),hl                         ; .
1537+ FE70 21 7F 00                             ld      hl,127                          ; y1 = 127
1538+ FE73 22 DA F5                             ld      (y1),hl                         ; .
1539+ FE76 C9                                   ret
1540+ FE77
1541+ FE77 2A D8 F5     CalcLL120:              ld      hl,(x1)                         ; x1= |x1|
1542+ FE7A                                      macroAbsHL                              ; .
1542+ FE7A CB 7C       >                    bit     7,h
1542+ FE7C CA 85 FE    >                    jp      z,.alreadyABS
1542+ FE7F AF          >					xor 	a
1542+ FE80 95          >					sub 	l
1542+ FE81 6F          >					ld 		l,a
1542+ FE82 9F          >					sbc 	a,a
1542+ FE83 94          >					sub 	h
1542+ FE84 67          >					ld 		h,a
1542+ FE85             >.alreadyABS:
1543+ FE85 3A 10 F6                             ld      a,(tSlope)                      ; if (tslope == 0)
1544+ FE88 A7                                   and     a                               ; .
1545+ FE89 C2 A8 FE                             jp      nz,.tSlopeNonZero               ; .
1546+ FE8C 55           .tSlopeZero:            ld      d,l                             ;       d = x1 & 255
1547+ FE8D 3A 0E F6                             ld      a,(gradient)                    ;       e = gradient
1548+ FE90 5F                                   ld      e,a                             ;
1549+ FE91 ED 30                                mul     de                              ;       de = x1 & 255 * gradient
1550+ FE93 5A                                   ld      e,d                             ;       de = x1 * gradient /256
1551+ FE94 16 00                                ld      d,0                             ;       .
1552+ FE96 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1553+ FE99 A7                                   and     a                               ;       .
1554+ FE9A CA A3 FE                             jp      z,.tSlopeZeroDone               ;       .
1555+ FE9D              .tSlopeZeroNegate:      macronegate16de                         ;               result = - result
1555+ FE9D AF          >					xor 	a
1555+ FE9E 93          >                    sub 	e
1555+ FE9F 5F          >                    ld 		e,a
1555+ FEA0 9F          >                    sbc 	a,a
1555+ FEA1 92          >                    sub 	d
1555+ FEA2 57          >                    ld 		d,a
1556+ FEA3 ED 53 A9 FC  .tSlopeZeroDone:        ld      (result),de                     ;
1557+ FEA7 C9                                   ret                                     ;
1558+ FEA8              .tSlopeNonZero:         ;ld      a,(gradient)                    ; else  c = gradient
1559+ FEA8                                      ;ld      c,a                             ;       .
1560+ FEA8                                      ;ld      a,l                             ;       a = x1 & 255
1561+ FEA8                                      ;call    DIV16Amul256dCUNDOC             ;       bc = a * 256/c
1562+ FEA8
1563+ FEA8 ED 5B 0E F6                          ld      de,(gradient)                   ; BC = BC / DE
1564+ FEAC 45                                   ld      b,l
1565+ FEAD 0E 00                                ld      c,0
1566+ FEAF                                      ;; CORRECTED TO LADO INTO B ld      bc,hl                           ; HL = BC % DE
1567+ FEAF CD FA 96                             call    Floor_DivQ
1568+ FEB2
1569+ FEB2 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1570+ FEB5 A7                                   and     a                               ;       .
1571+ FEB6 CA BF FE                             jp      z,.tSlopeNonZeroDone            ;       .
1572+ FEB9              .tSlopeNonZeroNegate:   macronegate16bc                         ;               result = - result
1572+ FEB9 AF          >					xor 	a
1572+ FEBA 91          >                    sub 	c
1572+ FEBB 4F          >                    ld 		c,a
1572+ FEBC 9F          >                    sbc 	a,a
1572+ FEBD 90          >                    sub 	b
1572+ FEBE 47          >                    ld 		b,a
1573+ FEBF ED 43 A9 FC  .tSlopeNonZeroDone:     ld      (result),bc
1574+ FEC3 C9                                   ret
1575+ FEC4              ;.......................LL123
1576+ FEC4              CalcLL123:              ;break
1577+ FEC4 2A DA F5                             ld      hl,(y1)                         ; hl = |y1|
1578+ FEC7                                      macroAbsHL                              ; .
1578+ FEC7 CB 7C       >                    bit     7,h
1578+ FEC9 CA D2 FE    >                    jp      z,.alreadyABS
1578+ FECC AF          >					xor 	a
1578+ FECD 95          >					sub 	l
1578+ FECE 6F          >					ld 		l,a
1578+ FECF 9F          >					sbc 	a,a
1578+ FED0 94          >					sub 	h
1578+ FED1 67          >					ld 		h,a
1578+ FED2             >.alreadyABS:
1579+ FED2 3A 10 F6                             ld      a,(tSlope)                      ; if tSlope = 0
1580+ FED5 A7                                   and     a                               ; .
1581+ FED6 C2 F4 FE                             jp      nz,.tSlopeNonZero               ; .
1582+ FED9              .tSlopeZero:           ; ld      a,(gradient)                    ;       c = gradient
1583+ FED9              ;                        ld      c,a                             ;       .
1584+ FED9              ;                        ld      a,l                             ;       hl = y1 (which is now abs and < 256)
1585+ FED9              ;                        call    DIV16Amul256dCUNDOC             ;       bc = A * 256 / c
1586+ FED9 ED 5B 0E F6                          ld      de,(gradient)                   ; BC = BC / DE
1587+ FEDD 44 4D                                ld      bc,hl                           ; HL = BC % DE
1588+ FEDF CD FA 96                             call    Floor_DivQ
1589+ FEE2 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1590+ FEE5 A7                                   and     a                               ;       .
1591+ FEE6 CA EF FE                             jp      z, .tSlopeZeroDone              ;       .
1592+ FEE9              .tSlopeZeroNegate:      macronegate16bc                         ;               result = -result
1592+ FEE9 AF          >					xor 	a
1592+ FEEA 91          >                    sub 	c
1592+ FEEB 4F          >                    ld 		c,a
1592+ FEEC 9F          >                    sbc 	a,a
1592+ FEED 90          >                    sub 	b
1592+ FEEE 47          >                    ld 		b,a
1593+ FEEF ED 43 A9 FC  .tSlopeZeroDone:        ld      (result),bc                     ;       . save result in either case
1594+ FEF3 C9                                   ret                                     ;       .
1595+ FEF4 55           .tSlopeNonZero:         ld      d,l                             ; else  d = |y1| low
1596+ FEF5 3A 0E F6                             ld      a,(gradient)                    ;       e = gradient
1597+ FEF8 5F                                   ld      e,a                             ;       .
1598+ FEF9 ED 30                                mul     de                              ;       de = l * gradient
1599+ FEFB 5A                                   ld      e,d                             ;       de = l * gradient /256
1600+ FEFC 16 00                                ld      d,0                             ;       .
1601+ FEFE 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1602+ FF01 A7                                   and     a                               ;
1603+ FF02 CA 0B FF                             jp      z,.tSlopeNonZeroDone            ;
1604+ FF05              .tSlopeNonZeroNegate:   macronegate16de                         ;               result = -result
1604+ FF05 AF          >					xor 	a
1604+ FF06 93          >                    sub 	e
1604+ FF07 5F          >                    ld 		e,a
1604+ FF08 9F          >                    sbc 	a,a
1604+ FF09 92          >                    sub 	d
1604+ FF0A 57          >                    ld 		d,a
1605+ FF0B ED 53 A9 FC  .tSlopeNonZeroDone:     ld      (result),de                     ;       . save result in either case
1606+ FF0F C9                                   ret                                     ;       .
1607+ FF10
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1408  FF10              ;    INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
1409  FF10                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ FF10              ; ******************************************************************************
   2+ FF10              ;
   3+ FF10              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ FF10              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ FF10              ;
   6+ FF10              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ FF10              ;
   8+ FF10              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ FF10              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ FF10              ;	before using line drawing.
  11+ FF10              ;
  12+ FF10              ;	The routine checks the range of specified coordinates which is the
  13+ FF10              ;	boundaries of the graphics area (256x64	pixels).
  14+ FF10              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ FF10              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ FF10              ;	visible part will be drawn.
  17+ FF10              ;
  18+ FF10              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ FF10              ;
  20+ FF10              ;	The plot routine is	defined by an address pointer	in IX.
  21+ FF10              ;
  22+ FF10              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ FF10              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ FF10              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ FF10              ;
  26+ FF10              ;	OUT:	None.
  27+ FF10              ;
  28+ FF10              ;	Registers	used	by routine:
  29+ FF10              ;		   N	:	B, loop counter
  30+ FF10              ;		   i	:	line	balance variable
  31+ FF10              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ FF10              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ FF10              ;	  (x0,y0)	:	(h,l)
  34+ FF10              ;	  direc_x	:	d, horisontal step increment
  35+ FF10              ;	  direc_y	:	e, vertical step increment
  36+ FF10              ;		 ddx	:	b, horisontal step increment
  37+ FF10              ;		 ddy	:	c, vertical step increment
  38+ FF10              ;
  39+ FF10              ;		DE, A work registers.
  40+ FF10              ;
  41+ FF10              ; The algorithm in pseudo-code:
  42+ FF10              ;
  43+ FF10              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ FF10              ;	x = ABS x: y =	ABS y
  45+ FF10              ;
  46+ FF10              ;	if x	>= y
  47+ FF10              ;		if x+y=0 then return
  48+ FF10              ;		H = x
  49+ FF10              ;		L = y
  50+ FF10              ;		ddx = direc_x
  51+ FF10              ;		ddy = 0
  52+ FF10              ;	else
  53+ FF10              ;		H = y
  54+ FF10              ;		L = x
  55+ FF10              ;		ddx = 0
  56+ FF10              ;		ddy = direc_y
  57+ FF10              ;	endif
  58+ FF10              ;
  59+ FF10              ;	B = H
  60+ FF10              ;	i = INT(B/2)
  61+ FF10              ;	FOR N=B TO 1 STEP -1
  62+ FF10              ;		i = i + L
  63+ FF10              ;		if i	< H
  64+ FF10              ;			ix =	ddx
  65+ FF10              ;			iy =	ddy
  66+ FF10              ;		else
  67+ FF10              ;			i = i - H
  68+ FF10              ;			ix =	direc_x
  69+ FF10              ;			iy =	direc_y
  70+ FF10              ;		endif
  71+ FF10              ;		x0 =	x0 +	ix
  72+ FF10              ;		y0 =	y0 +	iy
  73+ FF10              ;		plot	(x0,y0)
  74+ FF10              ;	NEXT	N
  75+ FF10              ;
  76+ FF10              ;
  77+ FF10              ;	Registers	changed after return:
  78+ FF10              ;		..BCDEHL/IXIY/af......	same
  79+ FF10              ;		AF....../..../..bcdehl	different
  80+ FF10              ;
  81+ FF10 00 00        line_gfx_coords         dw  0
  82+ FF12
  83+ FF12              LineHLtoDE:
  84+ FF12 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ FF13 FE C0                                cp	192
  86+ FF15 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ FF17 7A                                   ld	a,d
  88+ FF18 FE C0                                cp	192
  89+ FF1A 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ FF1C 22 10 FF                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ FF1F E5                                   push	hl
  92+ FF20 D5                                   push	de
  93+ FF21 6C                                   ld	l,h				; L = x0
  94+ FF22 62                                   ld	h,d				; H = x1
  95+ FF23 7C           distanceX:		        ld	a,h
  96+ FF24 95                                   sub	l
  97+ FF25 6F                                   ld	l,a
  98+ FF26 26 00                                ld	h,0
  99+ FF28 30 02                                jr	nc, distanceXDone
 100+ FF2A 26 FF                                ld	h,-1
 101+ FF2C D1           distanceXDone:          pop	de
 102+ FF2D E3                                   ex	(sp),hl			; L = y0
 103+ FF2E 63                                   ld	h,e				; H = y1
 104+ FF2F 7C           distanceY:		        ld	a,h
 105+ FF30 95                                   sub	l
 106+ FF31 6F                                   ld	l,a
 107+ FF32 26 00                                ld	h,0
 108+ FF34 30 02                                jr	nc, distanceYDone
 109+ FF36 26 FF                                ld	h,-1
 110+ FF38 D1           distanceYDone:          pop	de
 111+ FF39 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ FF3A CD 3E FF                             call	DrawLineRelative			; draw line...
 113+ FF3D C9           exit_line:              ret
 114+ FF3E
 115+ FF3E              ; ***************************************************************************
 116+ FF3E              ;
 117+ FF3E              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ FF3E              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ FF3E              ;
 120+ FF3E              ; OUT: h - l distance in	HL
 121+ FF3E              ;
 122+ FF3E
 123+ FF3E D5           DrawLineRelative:       push	de
 124+ FF3F E5                                   push	hl
 125+ FF40 D9                                   exx
 126+ FF41 E1                                   pop	hl					; get relative	horisontal movement
 127+ FF42 CD B9 FF                             call	sgn
 128+ FF45 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ FF46 CD C6 FF                             call	absValue
 130+ FF49 45                                   ld	b,l					; x = ABS(x)
 131+ FF4A E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ FF4B CD B9 FF                             call	sgn
 133+ FF4E 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ FF4F CD C6 FF                             call	absValue
 135+ FF52 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ FF53              ; so by here BC = dx dy HL in increment/decrement x y
 137+ FF53 C5                                   push	bc
 138+ FF54 D9                                   exx
 139+ FF55 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ FF56 7C                                   ld	a,h
 141+ FF57 BD                                   cp	l
 142+ FF58 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ FF5A B4           areXandYZero:           or	h					;	if x+y = 0
 144+ FF5B 28 5B                                jr	z, exit_draw		;		return
 145+ FF5D D9           y_lessorequal_x:        exx						;	else
 146+ FF5E 42                                   ld	b,d					;		ddx = direc_x
 147+ FF5F 0E 00                                ld	c,0					;		ddy = 0
 148+ FF61 D9                                   exx
 149+ FF62 18 08                                jr	init_drawloop		; else
 150+ FF64 7C           x_smaller_y:	        ld	a,h
 151+ FF65 65                                   ld	h,l					;	H = y
 152+ FF66 6F                                   ld	l,a					;	L = x
 153+ FF67 D9                                   exx
 154+ FF68 06 00                                ld	b,0					;	ddx = 0
 155+ FF6A 4B                                   ld	c,e					;	ddy = direc_y
 156+ FF6B D9                                   exx
 157+ FF6C 44           init_drawloop:	        ld	b,h
 158+ FF6D 4C                                   ld	c,h					; B = H
 159+ FF6E CB 39                                srl	c					; i = INT(B/2)
 160+ FF70              										; FOR N=B	TO 1	STEP	-1
 161+ FF70 79           drawloop:		        ld	a,c
 162+ FF71 85                                   add	a,l
 163+ FF72 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ FF74 BC                                   cp	h
 165+ FF75 30 06                                jr	nc, i_greater		;	if i	< H
 166+ FF77 4F                                   ld	c,a					;		i = i + L
 167+ FF78 D9                                   exx
 168+ FF79 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ FF7A D9                                   exx
 170+ FF7B 18 05                                jr	check_plot			;	else
 171+ FF7D 94           i_greater:		        sub	h					;		i = i - H
 172+ FF7E 4F                                   ld	c,a
 173+ FF7F D9                                   exx
 174+ FF80 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ FF81 D9                                   exx						;	endif
 176+ FF82 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ FF83 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ FF84 2A 10 FF                             ld	hl,(line_gfx_coords)
 179+ FF87 7D                                   ld	a,l
 180+ FF88 83                                   add	a,e					;
 181+ FF89 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ FF8A 7A                                   ld	a,d
 183+ FF8B 3C                                   inc	a
 184+ FF8C 84                                   add	a,h
 185+ FF8D 38 04                                jr	c, check_range		;	check out	of range
 186+ FF8F 28 26                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ FF91 18 02                                jr	plot_point
 188+ FF93 20 22        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ FF95
 190+ FF95 3D           plot_point:             dec	a
 191+ FF96 C5                                   push	bc
 192+ FF97 F5                                   push	af
 193+ FF98 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ FF99 4D                                   ld		c,l
 195+ FF9A 3A B5 E2                             ld		a,(line_gfx_colour)
 196+ FF9D ED 43 10 FF                          ld      (line_gfx_coords),bc
 197+ FFA1                                      l2_plot_macro; call	l2_plot_pixel:
 197+ FFA1 78          >                        ld      a,b
 197+ FFA2             >                        JumpIfAGTENusng 192 ,.NoPlot
 197+ FFA2 FE C0       >                        cp     192
 197+ FFA4 D2 B0 FF    >                        jp		nc,.NoPlot
 197+ FFA7 69          >                        ld      l,c
 197+ FFA8 CD 68 E0    >                        call    asm_l2_row_bank_select
 197+ FFAB 67          >                        ld      h,a
 197+ FFAC 3A B5 E2    >                        ld      a,(line_gfx_colour)
 197+ FFAF 77          >                        ld      (hl),a
 197+ FFB0             >.NoPlot:
 198+ FFB0 F1                                   pop		af
 199+ FFB1 C1                                   pop		bc
 200+ FFB2 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ FFB3 10 BB                                djnz	drawloop		; NEXT N
 202+ FFB5 18 01                                jr	exit_draw
 203+ FFB7
 204+ FFB7 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ FFB8 C9           exit_draw:		        ret
 206+ FFB9
 207+ FFB9
 208+ FFB9              ; ******************************************************************************
 209+ FFB9              ;
 210+ FFB9              ;	SGN (Signum value) of 16	bit signed integer.
 211+ FFB9              ;
 212+ FFB9              ;	IN:		HL =	integer
 213+ FFB9              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ FFB9              ;
 215+ FFB9              ;	Registers	changed after return:
 216+ FFB9              ;	..BCDEHL/IXIY	same
 217+ FFB9              ;	AF....../....	different
 218+ FFB9              ;
 219+ FFB9 7C           sgn:				    ld	a,h
 220+ FFBA B5                                   or	l
 221+ FFBB C8                                   ret	z				; integer	is zero, return 0...
 222+ FFBC CB 7C                                bit	7,h
 223+ FFBE 20 03                                jr	nz, negative_int
 224+ FFC0 3E 01                                ld	a,1
 225+ FFC2 C9                                   ret
 226+ FFC3 3E FF        negative_int:		    ld	a,-1
 227+ FFC5 C9                                   ret
 228+ FFC6
 229+ FFC6
 230+ FFC6              ; ******************************************************************************
 231+ FFC6              ;
 232+ FFC6              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ FFC6              ;
 234+ FFC6              ;	IN:		HL =	integer
 235+ FFC6              ;	OUT:		HL =	converted	integer
 236+ FFC6              ;
 237+ FFC6              ;	Registers	changed after return:
 238+ FFC6              ;	A.BCDE../IXIY	same
 239+ FFC6              ;	.F....HL/....	different
 240+ FFC6              ;
 241+ FFC6 CB 7C        absValue:			    bit	7,h
 242+ FFC8 C8                                   ret	z				; integer	is positive...
 243+ FFC9 D5                                   push	de
 244+ FFCA EB                                   ex	de,hl
 245+ FFCB 21 00 00                             ld	hl,0
 246+ FFCE BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ FFCF ED 52                                sbc	hl,de			; convert	negative integer
 248+ FFD1 D1                                   pop	de
 249+ FFD2 C9                                   ret
 250+ FFD3
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1410  FFD3                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
1411  FFD3              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1412  FFD3                  SLOT    LAYER1Addr
1413  FFD3                  PAGE    BankLAYER1
1414  FFD3                  ORG     LAYER1Addr, BankLAYER1
1415  E000 42 61 6E 6B  Layer1Header:  DB "Bank L1 Utils--"
1415  E004 20 4C 31 20
1415  E008 55 74 69 6C
1415  E00C 73 2D 2D
1416  E00F
1417  E00F                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E00F
   2+ E00F 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E011 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E013 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E015 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E017 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E019 A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E01B C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E01D E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E01F 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E021 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E023 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E025 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E027 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E029 A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E02B C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E02D E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E02F 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E031 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E033 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E035 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E037 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E039 A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E03B C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E03D E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E03F
  27+ E03F              ; "l2_hilight_row, d = row, e = colour"
  28+ E03F 21 0F E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E042 4B                                   ld      c,e
  30+ E043 7A                                   ld      a,d
  31+ E044 CB 27                                sla     a
  32+ E046 ED 31                                add     hl,a
  33+ E048 7E                                   ld      a,(hl)
  34+ E049 5F                                   ld      e,a
  35+ E04A 23                                   inc     hl
  36+ E04B 7E                                   ld      a,(hl)
  37+ E04C 57                                   ld      d,a
  38+ E04D EB                                   ex      hl,de
  39+ E04E 79                                   ld		a,c
  40+ E04F 11 20 00                             ld		de, 32
  41+ E052 CD 26 7D                             call	memfill_dma
  42+ E055 C9                                   ret
  43+ E056
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1418  E056                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E056 AF           l1_cls_top:             xor     a
   2+ E057 21 00 40                             ld      hl, $4000
   3+ E05A 11 00 08                             ld      de, $0800
   4+ E05D CD 26 7D                             call    memfill_dma
   5+ E060 C9                                   ret
   6+ E061
   7+ E061 AF           l1_cls_mid:             xor     a
   8+ E062 21 00 48                             ld      hl, $4800
   9+ E065 11 00 08                             ld      de, $0800
  10+ E068 CD 26 7D                             call    memfill_dma
  11+ E06B C9                                   ret
  12+ E06C
  13+ E06C AF           l1_cls_bottom:          xor     a
  14+ E06D 21 00 50                             ld      hl, $5000
  15+ E070 11 00 08                             ld      de, $0800
  16+ E073 CD 26 7D                             call    memfill_dma
  17+ E076 C9                                   ret
  18+ E077
  19+ E077              ; Designed specifically to clear a whole character aligned line
  20+ E077 1E 00        l1_cls_line_d:          ld      e,0
  21+ E079 ED 94                                pixelad
  22+ E07B 11 00 01                             ld      de,32 * 8
  23+ E07E AF                                   xor     a
  24+ E07F CD 26 7D                             call    memfill_dma
  25+ E082 C9                                   ret
  26+ E083
  27+ E083              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E083 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E085 ED 94                                pixelad
  30+ E087 11 00 02                             ld      de,32 * 16
  31+ E08A AF                                   xor     a
  32+ E08B CD 26 7D                             call    memfill_dma
  33+ E08E C9                                   ret
  34+ E08F
  35+ E08F AF           l1_cls:                 xor		a
  36+ E090 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E093 11 00 18                             ld		de, $1800
  38+ E096 CD 26 7D                             call	memfill_dma
  39+ E099 C9                                   ret
  40+ E09A
  41+ E09A 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E09D 1E 20                                ld      e,32
  43+ E09F ED 30                                mul
  44+ E0A1 19                                   add     hl,de
  45+ E0A2 11 40 00                             ld		de, 32 * 2
  46+ E0A5 CD 26 7D                             call	memfill_dma
  47+ E0A8 C9                                   ret
  48+ E0A9
  49+ E0A9
  50+ E0A9 AF           l1_attr_cls:            xor		a
  51+ E0AA 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E0AD 11 00 03                             ld		de, $0300
  53+ E0B0 CD 26 7D                             call	memfill_dma
  54+ E0B3 C9                                   ret
  55+ E0B4
  56+ E0B4 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0B7 ED 79                                out		(c),a
  58+ E0B9 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1419  E0BA                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0BA              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0BA D5 E5        l1_print_char:          push	de,,hl
   3+ E0BC ED 94                                pixelad								; hl = address of de
   4+ E0BE E5                                   push	hl							; save hl for loop
   5+ E0BF 26 00                                ld		h,0
   6+ E0C1 6F                                   ld		l,a
   7+ E0C2 29                                   add		hl,hl						; * 2
   8+ E0C3 29                                   add		hl,hl						; * 4
   9+ E0C4 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0C5 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0C9 EB                                   ex		de,hl						; save address into de
  12+ E0CA E1                                   pop		hl							; get back hl for loop
  13+ E0CB 06 08                                ld		b,8							; do 8 rows
  14+ E0CD 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0CE 13                                   inc		de							; next byte
  16+ E0CF 77                                   ld		(hl),a						; poke to screen
  17+ E0D0 ED 93                                pixeldn								; Down 1 row
  18+ E0D2 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0D4 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0D6 C9                                   ret
  21+ E0D7
  22+ E0D7              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0D7              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0D7              l1_print_at:
  25+ E0D7 7E           .PrintLoop:             ld		a,(hl)
  26+ E0D8 FE 00                                cp		0
  27+ E0DA C8                                   ret		z
  28+ E0DB                                      CallIfAGTENusng " ", l1_print_char
  28+ E0DB FE 20       >                        cp      " "
  28+ E0DD D4 BA E0    >                        call	nc,l1_print_char
  29+ E0E0 23                                   inc		hl							; move 1 message character right
  30+ E0E1 7B                                   ld		a,e
  31+ E0E2 C6 08                                add		a,8
  32+ E0E4 5F                                   ld		e,a							; move 1 screen character right
  33+ E0E5 18 F0                                jr		.PrintLoop
  34+ E0E7                                                      DISPLAY "TODO: looks liek rogue popde"
  35+ E0E7              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  36+ E0E7 C9                                   ret
  37+ E0E8
  38+ E0E8              ;l1_print_at_wrap:
  39+ E0E8              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  40+ E0E8              ;	ld      iyh,e
  41+ E0E8              ;.PrintLoop:
  42+ E0E8              ;	ld		a,(hl)
  43+ E0E8              ;	cp		0
  44+ E0E8              ;	ret		z
  45+ E0E8              ;.CountWordCharLen
  46+ E0E8              ;; Need to change to word wrap, so it will loop through string as before
  47+ E0E8              ;; but read up until a null or space, take the character count * 8 for pixels
  48+ E0E8              ;; if that is > 238 then force a premature line wrap
  49+ E0E8              ;
  50+ E0E8              ;
  51+ E0E8              ;    push    iy
  52+ E0E8              ;    call	l1_print_char
  53+ E0E8              ;    pop     iy
  54+ E0E8              ;	inc		hl							; move 1 message character right
  55+ E0E8              ;	ld		a,e
  56+ E0E8              ;    cp      238
  57+ E0E8              ;    jr      nc,.NextLine
  58+ E0E8              ;	add		a,8
  59+ E0E8              ;	ld		e,a							; move 1 screen character right
  60+ E0E8              ;	jr		.PrintLoop
  61+ E0E8              ;.Clearstackandfinish:
  62+ E0E8              ;	pop		de
  63+ E0E8              ;	ret
  64+ E0E8              ;.NextLine:
  65+ E0E8              ;    ld      a,(hl)
  66+ E0E8              ;    cp      " "
  67+ E0E8              ;    ld      e,iyh
  68+ E0E8              ;    ld      a,d
  69+ E0E8              ;    add     a,8
  70+ E0E8              ;    ld      d,a
  71+ E0E8              ;    jr		.PrintLoop
  72+ E0E8
  73+ E0E8              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  74+ E0E8 E5           L1LenWordAtHL:          push    hl
  75+ E0E9 D5                                   push    de
  76+ E0EA 7E           .CountLoop:             ld      a,(hl)
  77+ E0EB FE 00                                cp      0
  78+ E0ED 28 0F                                jr      z,.CountDone
  79+ E0EF FE 20                                cp      32
  80+ E0F1 28 0B                                jr      z,.CountDone
  81+ E0F3 7B                                   ld      a,e
  82+ E0F4 C6 08                                add     a,8
  83+ E0F6 5F                                   ld      e,a
  84+ E0F7 FE EE                                cp      238
  85+ E0F9 30 07                                jr      nc,.TooLong
  86+ E0FB 23                                   inc     hl
  87+ E0FC 18 EC                                jr      .CountLoop
  88+ E0FE D1           .CountDone:             pop     de
  89+ E0FF E1                                   pop     hl
  90+ E100 AF                                   xor     a
  91+ E101 C9                                   ret
  92+ E102 D1           .TooLong                pop     de
  93+ E103 E1                                   pop     hl
  94+ E104 3E FF                                ld      a,$FF
  95+ E106 C9                                   ret
  96+ E107
  97+ E107 7E           L1PrintWordAtHL:        ld      a,(hl)
  98+ E108 FE 00                                cp      0
  99+ E10A C8                                   ret     z
 100+ E10B FE 20                                cp      32
 101+ E10D 28 0F                                jr      z,.ItsASpace
 102+ E10F FD E5                                push    iy
 103+ E111 CD BA E0                             call	l1_print_char
 104+ E114 FD E1                                pop     iy
 105+ E116 7B                                   ld      a,e
 106+ E117 C6 08                                add     a,8
 107+ E119 5F                                   ld      e,a
 108+ E11A 23                                   inc     hl
 109+ E11B C3 07 E1                             jp      L1PrintWordAtHL
 110+ E11E 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 111+ E11F 7B                                   ld      a,e
 112+ E120 C6 08                                add     a,8
 113+ E122 5F                                   ld      e,a
 114+ E123 C9                                   ret
 115+ E124
 116+ E124
 117+ E124              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 118+ E124              ; Now has full word level wrapping
 119+ E124 FD 63        l1_print_at_wrap:       ld      iyh,e
 120+ E126 7E           .PrintLoop:             ld		a,(hl)
 121+ E127 FE 00                                cp		0
 122+ E129 C8                                   ret		z
 123+ E12A CD E8 E0     .CountWordCharLen:      call    L1LenWordAtHL
 124+ E12D FE FF                                cp      $FF
 125+ E12F 28 06                                jr      z,.WrapNextLine
 126+ E131 CD 07 E1     .NotTooLong:            call    L1PrintWordAtHL
 127+ E134              ; Need to change to word wrap, so it will loop through string as before
 128+ E134              ; but read up until a null or space, take the character count * 8 for pixels
 129+ E134              ; if that is > 238 then force a premature line wrap
 130+ E134 18 F0                                jr		.PrintLoop
 131+ E136              .Clearstackandfinish:   ;op		de
 132+ E136 C9                                   ret
 133+ E137              .WrapNextLine:
 134+ E137 FD 5C        .NextLine:              ld      e,iyh
 135+ E139 7A                                   ld      a,d
 136+ E13A C6 08                                add     a,8
 137+ E13C 57                                   ld      d,a
 138+ E13D 18 E7                                jr		.PrintLoop
 139+ E13F
 140+ E13F
# file closed: ./Layer1Graphics/layer1_print_at.asm
1420  E13F                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
1421  E13F              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1422  E13F              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1423  E13F              ; as the is aligned and data tables are after that
1424  E13F              ; need to make the ship index tables same size in each to simplify further
1425  E13F                  SLOT    ShipModelsAddr
1426  E13F                  PAGE    BankShipModels1
1427  E13F              	ORG     ShipModelsAddr, BankShipModels1
1428  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    push        af
  73+ E000 ~                                    ld          a,iyl
  74+ E000 ~                                    ld          (UBnKShipModelId),a
  75+ E000 ~                                    pop         af
  76+ E000 ~                                    ld          (UBnKShipModelNbr),a
  77+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  78+ E000 ~                                    add         hl,a
  79+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  80+ E000 ~                                    ld          c,(hl)
  81+ E000 ~                                    inc         hl
  82+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  83+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  84+ E000 ~                                    add         hl,a
  85+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  86+ E000 ~                                    ld          a,(hl)
  87+ E000 ~                                    inc         hl
  88+ E000 ~                                    ld          h,(hl)
  89+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  90+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  91+ E000 ~                                    ld          bc,ShipDataLength
  92+ E000 ~                                    ldir
  93+ E000 ~                                    call        CopyVertsToUniv
  94+ E000 ~                                    call        CopyEdgesToUniv
  95+ E000 ~                                    call        CopyNormsToUniv
  96+ E000 ~            .ClearName:             ld          hl,StartOfUnivName
  97+ E000 ~                                    ld          a," "
  98+ E000 ~                                    ld          b,16
  99+ E000 ~            .fillLoop:              ld          (hl),a
 100+ E000 ~                                    inc         hl
 101+ E000 ~                                    djnz        .fillLoop
 102+ E000 ~            .SetName:               ld          a,(UBnKShipModelId)
 103+ E000 ~                                    call        ShipIndexToAddress
 104+ E000 ~                                    ld          de,StartOfUnivName
 105+ E000 ~                                    ld          b,16
 106+ E000 ~            .CopyLoop:              ld          a,(hl)
 107+ E000 ~                                    cp          0
 108+ E000 ~                                    jr          z,.CopyDone
 109+ E000 ~                                    ld          (de),a
 110+ E000 ~                                    inc         hl
 111+ E000 ~                                    inc         de
 112+ E000 ~                                    djnz        .CopyLoop
 113+ E000 ~            .CopyDone:              ret
 114+ E000                                      ENDM
 115+ E000
 116+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
 117+ E000 ~                                    ld          a,13
 118+ E000 ~                                    call        copyRoutine
 119+ E000 ~                                    ret
 120+ E000                                      ENDM
 121+ E000
 122+ E000
 123+ E000              MCopyShipIdToUniverse:  MACRO
 124+ E000 ~                                    call        GetShipModelId
 125+ E000 ~                                    MMUSelectShipBankA
 126+ E000 ~                                    ld          a,b
 127+ E000 ~                                    jp          CopyShipToUniverse
 128+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1429  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1430  E00F              GetShipBankId:
1431  E00F              GetShipBank1Id:         MGetShipBankId ShipBankTable
1431  E00F 06 00       >                        ld      b,0
1431  E011 4F          >                        ld      c,a                                 ; c= original ship id
1431  E012 CB 3F       >.ShiftLoop:             srl     a
1431  E014 CB 3F       >                        srl     a
1431  E016 CB 3F       >                        srl     a
1431  E018 CB 3F       >                        srl     a                                   ; divide by 16
1431  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1431  E01B 79          >                        ld      a,c
1431  E01C 50          >                        ld      d,b
1431  E01D 1E 10       >                        ld      e,16
1431  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1431  E021 93          >                        sub     e                                   ; a= actual model id now
1431  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1431  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1431  E024 7A          >                        ld      a,d                                 ; a = bank number
1431  E025             >;.. Now b = bank and a = adjusted ship nbr
1431  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1431  E028 ED 31       >                        add     hl,a
1431  E02A ED 31       >                        add     hl,a
1431  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1431  E02D             >                        ClearCarryFlag
1431  E02D B7          >                        or a
1431  E02E C9          >                        ret
1432  E02F              CopyVertsToUniv:
1433  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1433  E02F 2A 0B C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1433  E032 11 11 C4    >                        ld          de,UBnkHullVerticies
1433  E035 06 00       >                        ld          b,0
1433  E037 3A FF C3    >                        ld			a,(VertexCtX6Addr)
1433  E03A 4F          >                        ld          c,a
1433  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1433  E03C CD 4C 7D    >                        call        memcopy_dma
1433  E03F C9          >                        ret
1434  E040              CopyEdgesToUniv:
1435  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1435  E040 2A F9 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1435  E043 11 01 C5    >                        ld          de,UBnkHullEdges
1435  E046 06 00       >                        ld          b,0
1435  E048 3A FB C3    >                        ld			a,(LineX4Addr)
1435  E04B 4F          >                        ld          c,a
1435  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1435  E04D CD 4C 7D    >                        call        memcopy_dma
1435  E050 C9          >                        ret
1436  E051              CopyNormsToUniv:
1437  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1437  E051 2A 07 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1437  E054 11 C9 C5    >                        ld          de,UBnkHullNormals
1437  E057 06 00       >                        ld          b,0
1437  E059 3A 03 C4    >                        ld          a,(FaceCtX4Addr)
1437  E05C 4F          >                        ld          c,a
1437  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1437  E05E CD 4C 7D    >                        call        memcopy_dma
1437  E061 C9          >                        ret
1438  E062              ShipBankTable:
1439  E062              ShipBankTable1:         MShipBankTable
1439  E062 3B 00       >                        DW      BankShipModels1
1439  E064 43 00       >                        DW      BankShipModels2
1439  E066 44 00       >                        DW      BankShipModels3
1439  E068 45 00       >                        DW      BankShipModels4
1440  E06A              CopyShipToUniverse:
1441  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1441  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
1441  E06D 36 3B       >                        ld          (hl),BankShipModels1
1441  E06F F5          >                        push        af
1441  E070 FD 7D       >                        ld          a,iyl
1441  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
1441  E075 F1          >                        pop         af
1441  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
1441  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1441  E07C ED 31       >                        add         hl,a
1441  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1441  E080 4E          >                        ld          c,(hl)
1441  E081 23          >                        inc         hl
1441  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1441  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1441  E086 ED 31       >                        add         hl,a
1441  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1441  E08A 7E          >                        ld          a,(hl)
1441  E08B 23          >                        inc         hl
1441  E08C 66          >                        ld          h,(hl)
1441  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1441  E08E 11 F6 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1441  E091 01 1B 00    >                        ld          bc,ShipDataLength
1441  E094 ED B0       >                        ldir
1441  E096 CD 2F E0    >                        call        CopyVertsToUniv
1441  E099 CD 40 E0    >                        call        CopyEdgesToUniv
1441  E09C CD 51 E0    >                        call        CopyNormsToUniv
1441  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
1441  E0A2 3E 20       >                        ld          a," "
1441  E0A4 06 10       >                        ld          b,16
1441  E0A6 77          >.fillLoop:              ld          (hl),a
1441  E0A7 23          >                        inc         hl
1441  E0A8 10 FC       >                        djnz        .fillLoop
1441  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
1441  E0AD CD F5 8D    >                        call        ShipIndexToAddress
1441  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
1441  E0B3 06 10       >                        ld          b,16
1441  E0B5 7E          >.CopyLoop:              ld          a,(hl)
1441  E0B6 FE 00       >                        cp          0
1441  E0B8 28 05       >                        jr          z,.CopyDone
1441  E0BA 12          >                        ld          (de),a
1441  E0BB 23          >                        inc         hl
1441  E0BC 13          >                        inc         de
1441  E0BD 10 F6       >                        djnz        .CopyLoop
1441  E0BF C9          >.CopyDone:              ret
1442  E0C0              CopyBodyToUniverse:
1443  E0C0              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1443  E0C0 3E 0D       >                        ld          a,13
1443  E0C2 CD 6A E0    >                        call        CopyShipToUniverse1
1443  E0C5 C9          >                        ret
1444  E0C6                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E0C6              ShipModelTable:
   2+ E0C6 66 E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0C8 A1 E2                                 DW Anaconda                                ;01 $01
   4+ E0CA AE E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0CC DF E4                                 DW Boa                                     ;03 $03
   6+ E0CE DC E5                                 DW CargoType5                              ;04 $04
   7+ E0D0 B0 E6                                 DW Boulder                                 ;05 $05
   8+ E0D2 5D E7                                 DW Asteroid                                ;06 $06
   9+ E0D4 3E E8                                 DW Bushmaster                              ;07 $07
  10+ E0D6 15 E9                                 DW Chameleon                               ;08 $08
  11+ E0D8 47 EA                                 DW CobraMk3                                ;09 $09
  12+ E0DA DA EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0DC AB EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0DE 3E EE                                 DW Constrictor                             ;12 $0C
  15+ E0E0 4B EF                                 DW Coriolis                                ;13 $0D
  16+ E0E2 72 F0                                 DW Cougar                                  ;14 $0E
  17+ E0E4 7F F1                                 DW Dodo                                    ;15 $0F
  18+ E0E6              ShipVertexTable:
  19+ E0E6 85 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0E8 C0 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0EA CD E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0EC FE E4                                 DW BoaVertices                             ;03 $03
  23+ E0EE FB E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0F0 CF E6                                 DW BoulderVertices                         ;05 $05
  25+ E0F2 7C E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0F4 5D E8                                 DW BushmasterVertices                      ;07 $07
  27+ E0F6 33 E9                                 DW ChameleonVertices                       ;08 $08
  28+ E0F8 66 EA                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0FA F9 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0FC CA EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0FE 5D EE                                 DW ConstrictorVertices                     ;12 $0C
  32+ E100 6A EF                                 DW CoriolisVertices                        ;13 $0D
  33+ E102 91 F0                                 DW CougarVertices                          ;14 $0E
  34+ E104 9E F1                                 DW DodoVertices                            ;15 $0F
  35+ E106              ShipEdgeTable:
  36+ E106 F1 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E108 1A E3                                 DW AnacondaEdges                           ;01 $01
  38+ E10A 3F E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E10C 4C E5                                 DW BoaEdges                                ;03 $03
  40+ E10E 37 E6                                 DW CargoType5Edges                         ;04 $04
  41+ E110 F9 E6                                 DW BoulderEdges                            ;05 $05
  42+ E112 B2 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E114 A5 E8                                 DW BushmasterEdges                         ;07 $07
  44+ E116 9F E9                                 DW ChameleonEdges                          ;08 $08
  45+ E118 0E EB                                 DW CobraMk3Edges                           ;09 $09
  46+ E11A 3B EC                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E11C 72 ED                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E11E C3 EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E120 CA EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E122 03 F1                                 DW CougarEdges                             ;14 $0E
  51+ E124 2E F2                                 DW DodoEdges                               ;15 $0F
  52+ E126              ShipNormalTable:
  53+ E126 65 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E128 7E E3                                 DW AnacondaNormals                         ;01 $01
  55+ E12A AF E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E12C AC E5                                 DW BoaNormals                              ;03 $03
  57+ E12E 73 E6                                 DW CargoType5Normals                       ;04 $04
  58+ E130 35 E7                                 DW BoulderNormals                          ;05 $05
  59+ E132 06 E8                                 DW AsteroidNormals                         ;06 $06
  60+ E134 F1 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E136 13 EA                                 DW ChameleonNormals                        ;08 $08
  62+ E138 A6 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E13A 83 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E13C 0A EE                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E13E 23 EF                                 DW ConstrictorNormals                      ;12 $0C
  66+ E140 3A F0                                 DW CoriolisNormals                         ;13 $0D
  67+ E142 67 F1                                 DW CougarNormals                           ;14 $0E
  68+ E144 B6 F2                                 DW DodoNormals                             ;15 $0F
  69+ E146              ShipModelSizeTable:
  70+ E146 3B 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E148 0D 01                                 DW AnacondaLen                             ;01 $01
  72+ E14A 31 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E14C FD 00                                 DW BoaLen                                  ;03 $03
  74+ E14E B3 00                                 DW CargoType5Len                           ;04 $04
  75+ E150 AD 00                                 DW BoulderLen                              ;05 $05
  76+ E152 E1 00                                 DW AsteroidLen                             ;06 $06
  77+ E154 D7 00                                 DW BushmasterLen                           ;07 $07
  78+ E156 32 01                                 DW ChameleonLen                            ;08 $08
  79+ E158 93 01                                 DW CobraMk3Len                             ;09 $09
  80+ E15A D1 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E15C 93 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E15E 0D 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E160 27 01                                 DW CoriolisLen                             ;13 $0D
  84+ E162 0D 01                                 DW CougarLen                               ;14 $0E
  85+ E164 67 01                                 DW DodoLen                                 ;15 $0F
  86+ E166
  87+ E166                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E166 00           Adder:	                DB $00                              ; Number of cargo canisters released when destroyed
   2++E167 C4 09                                DW 50 * 50                          ; Ship's targetable area LoHi
   3++E169 F1 E1                                DW AdderEdges                       ; Edge Data
   4++E16B 74                                   DB AdderEdgesSize                   ; Size of Edge Data
   5++E16C 00                                   DB $00                              ; Gun Vertex Byte offset
   6++E16D 16                                   DB $16                              ; Explosion Count
   7++E16E 12                                   DB AdderVertSize / 6                ; Vertex Count /6
   8++E16F 6C                                   DB AdderVertSize                    ; Vertex Count
   9++E170 1D                                   DB AdderEdgesCnt                    ; Edges Count
  10++E171 28 00                                DW $0028                            ; Bounty LoHi
  11++E173 3C                                   DB AdderNormalsSize                 ; Face (Normal) Count
  12++E174 17                                   DB $17                              ; Range when it turns to a dot
  13++E175 48                                   DB $48                              ; Energy Max
  14++E176 18                                   DB $18                              ; Speed Max
  15++E177 65 E2                                DW AdderNormals                     ; Normals
  16++E179 12                                   DB $12                              ; Q scaling
  17++E17A 21                                   DB $21                              ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW AdderVertices                    ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                   ; Ship Type
  20++E17E 00                                   DB 0                                ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                     ; AI Flags
  22++E180 80                                   DB $80                              ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185                                                     ; chance of ECM module
  28++E185 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  28++E189 01 BC
  29++E18B 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  29++E18F 01 23
  30++E191 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  30++E195 23 45
  31++E197 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  31++E19B 45 66
  32++E19D 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  32++E1A1 56 7E
  33++E1A3 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  33++E1A7 78 AE
  34++E1A9 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  34++E1AD 89 AA
  35++E1AF 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  35++E1B3 9A BC
  36++E1B5 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  36++E1B9 78 9D
  37++E1BB 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  37++E1BF 46 7D
  38++E1C1 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  38++E1C5 09 BD
  39++E1C7 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  39++E1CB 02 4D
  40++E1CD 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  40++E1D1 1A CE
  41++E1D3 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  41++E1D7 13 5E
  42++E1D9 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  42++E1DD 00 00
  43++E1DF 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  43++E1E3 00 00
  44++E1E5 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  44++E1E9 00 00
  45++E1EB 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  45++E1EF 00 00
  46++E1F1              AdderVertSize:          equ $ - AdderVertices
  47++E1F1 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  48++E1F5 07 23 04 08                          DB $07, $23, $04, $08               ;02
  49++E1F9 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  50++E1FD 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  51++E201 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  52++E205 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  53++E209 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  54++E20D 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  55++E211 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  56++E215 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  57++E219 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  58++E21D 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  59++E221 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  60++E225 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  61++E229 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  62++E22D 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  63++E231 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  64++E235 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  65++E239 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  66++E23D 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  67++E241 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  68++E245 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  69++E249 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  70++E24D 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  71++E251 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  72++E255 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  73++E259 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  74++E25D 04 00 40 44                          DB $04, $00, $40, $44               ;28
  75++E261 03 00 44 38                          DB $03, $00, $44, $38               ;29
  76++E265              AdderEdgesSize:         equ $ - AdderEdges
  77++E265              AdderEdgesCnt:          equ AdderEdgesSize/4
  78++E265 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  79++E269 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  80++E26D 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  81++E271 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  82++E275 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  83++E279 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  84++E27D 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  85++E281 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  86++E285 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  87++E289 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  88++E28D DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  89++E291 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  90++E295 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  91++E299 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  92++E29D 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  93++E2A1
  94++E2A1              AdderNormalsSize:       equ $ - AdderNormals
  95++E2A1              AdderLen:                equ $ - Adder
  96++E2A1
  97++E2A1
  98++E2A1
  99++E2A1
 100++E2A1
 101++E2A1
 102++E2A1
 103++E2A1
 104++E2A1
 105++E2A1
 106++E2A1
# file closed: ./Data/ships/Adder.asm
  88+ E2A1                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E2A1 07           Anaconda:	            DB $07                                                        ; Number of cargo canisters released when destroyed
   2++E2A2 10 27                                DW 100 * 100                                                  ; Ship's targetable area LoHi
   3++E2A4 1A E3                                DW AnacondaEdges                                              ; Edge Data
   4++E2A6 64                                   DB AnacondaEdgesSize                                          ; Size of Edge Data
   5++E2A7 30                                   DB $30                                                        ; Gun Vertex Byte offset
   6++E2A8 2E                                   DB $2E                                                        ; Explosion Count
   7++E2A9 0F                                   DB AnacondaVertSize / 6                                       ; Vertex Count /6
   8++E2AA 5A                                   DB AnacondaVertSize                                           ; Vertex Count
   9++E2AB 19                                   DB AnacondaEdgesCnt                                           ; Edges Count
  10++E2AC 00 00                                DW $0000                                                      ; Bounty LoHi
  11++E2AE 30                                   DB AnacondaNormalsSize                                        ; Face (Normal) Count
  12++E2AF 24                                   DB $24                                                        ; Range when it turns to a dot
  13++E2B0 FC                                   DB $FC                                                        ; Energy Max
  14++E2B1 0E                                   DB $0E                                                        ; Speed Max
  15++E2B2 7E E3                                DW AnacondaNormals                                            ; Normals
  16++E2B4 11                                   DB $11                                                        ; Q scaling
  17++E2B5 3F                                   DB $3F                                                        ; Laser power and Nbr Missiles
  18++E2B6 C0 E2                                DW AnacondaVertices                                           ; Verticles Address
  19++E2B8 00                                   DB ShipTypeNormal                                             ; Ship Type
  20++E2B9 00                                   DB 0                                                          ; NewB Tactics
  21++E2BA A4                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterSidewinder ; AI Flags
  22++E2BB D0                                   DB $D0                                                        ; chance of ECM module
  23++E2BC FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2BD 00 00                                DW $0000                            ; no solid data
  25++E2BF 00                                   DB $00                              ; no solid data
  26++E2C0
  27++E2C0 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  27++E2C4 01 55
  28++E2C6 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  28++E2CA 01 22
  29++E2CC 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  29++E2D0 02 33
  30++E2D2 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  30++E2D6 03 44
  31++E2D8 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  31++E2DC 04 55
  32++E2DE 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  32++E2E2 15 66
  33++E2E4 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  33++E2E8 12 77
  34++E2EA 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  34++E2EE 23 88
  35++E2F0 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  35++E2F4 34 99
  36++E2F6 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  36++E2FA 45 AA
  37++E2FC 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  37++E300 FF FF
  38++E302 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  38++E306 27 88
  39++E308 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  39++E30C FF FF
  40++E30E 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  40++E312 49 AA
  41++E314 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  41++E318 FF FF
  42++E31A              AnacondaVertSize:       equ $ - AnacondaVertices
  43++E31A 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  44++E31E 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  45++E322 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  46++E326 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  47++E32A 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  48++E32E 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  49++E332 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  50++E336 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  51++E33A 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  52++E33E 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  53++E342 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  54++E346 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  55++E34A 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  56++E34E 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  57++E352 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  58++E356 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  59++E35A 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  60++E35E 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  61++E362 1E 5A 24 38                          DB $1E, $5A, $24, $38
  62++E366 1E 56 14 38                          DB $1E, $56, $14, $38
  63++E36A 1E 6B 28 38                          DB $1E, $6B, $28, $38
  64++E36E 1F 7B 28 30                          DB $1F, $7B, $28, $30
  65++E372 1F 78 2C 30                          DB $1F, $78, $2C, $30
  66++E376 1F 9A 30 34                          DB $1F, $9A, $30, $34
  67++E37A 1F AB 30 38                          DB $1F, $AB, $30, $38
  68++E37E              AnacondaEdgesSize:      equ $ - AnacondaEdges
  69++E37E              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  70++E37E 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  71++E382 BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  72++E386 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  73++E38A 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  74++E38E 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  75++E392 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  76++E396 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  77++E39A 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  78++E39E DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  79++E3A2 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  80++E3A6 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  81++E3AA 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  82++E3AE              AnacondaNormalsSize:    equ $ - AnacondaNormals
  83++E3AE              AnacondaLen:            equ $ - Anaconda
  84++E3AE
  85++E3AE
  86++E3AE
  87++E3AE
# file closed: ./Data/ships/Anaconda.asm
  89+ E3AE                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E3AE 00           Asp_Mk_2:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E3AF 10 0E                                DW 60 * 60                      ; Ship's targetable area LoHi
   3++E3B1 3F E4                                DW Asp_Mk_2Edges                ; Edge Data
   4++E3B3 70                                   DB Asp_Mk_2EdgesSize            ; Size of Edge Data
   5++E3B4 20                                   DB $20                          ; Gun Vertex Byte offset
   6++E3B5 1A                                   DB $1A                          ; Explosion Count
   7++E3B6 13                                   DB Asp_Mk_2VertSize /6          ; Vertex Count /6
   8++E3B7 72                                   DB Asp_Mk_2VertSize             ; Vertex Count
   9++E3B8 1C                                   DB Asp_Mk_2EdgesCnt             ; Edges Count
  10++E3B9 C8 00                                DW $00C8                        ; Bounty LoHi
  11++E3BB 30                                   DB Asp_Mk_2NormalsSize          ; Face (Normal) Count
  12++E3BC 28                                   DB $28                          ; Range when it turns to a dot
  13++E3BD 96                                   DB $96                          ; Energy Max
  14++E3BE 28                                   DB $28                          ; Speed Max
  15++E3BF AF E4                                DW Asp_Mk_2Normals              ; Normals
  16++E3C1 01                                   DB $01                          ; Q scaling
  17++E3C2 29                                   DB $29                          ; Laser power and Nbr Missiles
  18++E3C3 CD E3                                DW Asp_Mk_2Vertices             ; Verticles Address
  19++E3C5 00                                   DB ShipTypeNormal               ; Ship Type
  20++E3C6 00                                   DB 0                            ; NewB Tactics
  21++E3C7 80                                   DB ShipCanAnger                 ; AI Flags
  22++E3C8 80                                   DB $80                          ; chance of ECM module
  23++E3C9 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3CA 00 00                                DW $0000                            ; no solid data
  25++E3CC 00                                   DB $00                              ; no solid data
  26++E3CD
  27++E3CD 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  27++E3D1 01 22
  28++E3D3 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  28++E3D7 12 BB
  29++E3D9 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  29++E3DD 16 BB
  30++E3DF 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  30++E3E3 16 79
  31++E3E5 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  31++E3E9 01 77
  32++E3EB 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  32++E3EF 25 BB
  33++E3F1 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  33++E3F5 25 8A
  34++E3F7 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  34++E3FB 02 88
  35++E3FD 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  35++E401 04 79
  36++E403 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  36++E407 04 8A
  37++E409 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  37++E40D 34 69
  38++E40F 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  38++E413 34 5A
  39++E415 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  39++E419 35 6B
  40++E41B 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  40++E41F BB BB
  41++E421 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  41++E425 BB BB
  42++E427 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  42++E42B BB BB
  43++E42D 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  43++E431 BB BB
  44++E433 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  44++E437 04 04
  45++E439 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  45++E43D 04 04
  46++E43F              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  47++E43F 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  48++E443 16 01 00 10                          DB $16, $01, $00, $10           ;02
  49++E447 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  50++E44B 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  51++E44F 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  52++E453 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  53++E457 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  54++E45B 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  55++E45F 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  56++E463 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  57++E467 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  58++E46B 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  59++E46F 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  60++E473 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  61++E477 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  62++E47B 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  63++E47F 16 36 28 30                          DB $16, $36, $28, $30           ;17
  64++E483 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  65++E487 16 34 28 2C                          DB $16, $34, $28, $2C
  66++E48B 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  67++E48F 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  68++E493 1F 69 0C 28                          DB $1F, $69, $0C, $28
  69++E497 1F 49 20 28                          DB $1F, $49, $20, $28
  70++E49B 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  71++E49F 09 BB 3C 38                          DB $09, $BB, $3C, $38
  72++E4A3 08 BB 38 40                          DB $08, $BB, $38, $40
  73++E4A7 08 BB 40 34                          DB $08, $BB, $40, $34
  74++E4AB 0A 04 48 44                          DB $0A, $04, $48, $44
  75++E4AF              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  76++E4AF              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  77++E4AF 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  78++E4B3 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  79++E4B7 FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  80++E4BB 36 00 18 01                          DB $36, $00, $18, $01           ;04
  81++E4BF 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  82++E4C3 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  83++E4C7 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  84++E4CB 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  85++E4CF DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  86++E4D3 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  87++E4D7 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  88++E4DB 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  89++E4DF              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  90++E4DF              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  91++E4DF
  92++E4DF
  93++E4DF
  94++E4DF
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4DF                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4DF 05           Boa:	                DB $05                          ; Number of cargo canisters released when destroyed
   2++E4E0 24 13                                DW 70 * 70                      ; Ship's targetable area LoHi
   3++E4E2 4C E5                                DW BoaEdges                     ; Edge Data
   4++E4E4 60                                   DB BoaEdgesSize                 ; Size of Edge Data
   5++E4E5 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E4E6 26                                   DB $26                          ; Explosion Count
   7++E4E7 0D                                   DB BoaVertSize /6               ; Vertex Count /6
   8++E4E8 4E                                   DB BoaVertSize                  ; Vertex Count
   9++E4E9 18                                   DB BoaEdgesCnt                  ; Edges Count
  10++E4EA 00 00                                DW $0000                        ; Bounty LoHi
  11++E4EC 30                                   DB BoaNormalsSize               ; Face (Normal) Count
  12++E4ED 28                                   DB $28                          ; Range when it turns to a dot
  13++E4EE FA                                   DB $FA                          ; Energy Max
  14++E4EF 18                                   DB $18                          ; Speed Max
  15++E4F0 AC E5                                DW BoaNormals                   ; Normals
  16++E4F2 00                                   DB $00                          ; Q scaling
  17++E4F3 1C                                   DB $1C                          ; Laser power and Nbr Missiles
  18++E4F4 FE E4                                DW BoaVertices                  ; Verticles Address
  19++E4F6 00                                   DB ShipTypeNormal               ; Ship Type
  20++E4F7 00                                   DB 0                            ; NewB Tactics
  21++E4F8 80                                   DB ShipCanAnger                 ; AI Flags
  22++E4F9 A0                                   DB $A0                          ; chance of ECM module
  23++E4FA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4FB 00 00                                DW $0000                            ; no solid data
  25++E4FD 00                                   DB $00                              ; no solid data
  26++E4FE
  27++E4FE 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  27++E502 FF FF
  28++E504 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  28++E508 02 33
  29++E50A 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  29++E50E 01 44
  30++E510 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  30++E514 12 55
  31++E516 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  31++E51A 23 69
  32++E51C 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  32++E520 03 6B
  33++E522 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  33++E526 04 8B
  34++E528 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  34++E52C 14 8A
  35++E52E 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  35++E532 15 7A
  36++E534 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  36++E538 25 79
  37++E53A 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  37++E53E 02 AA
  38++E540 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  38++E544 01 AA
  39++E546 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  39++E54A 12 CC
  40++E54C              BoaVertSize:            equ $ - BoaVertices
  41++E54C 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  42++E550 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  43++E554 1F 79 00 24                          DB $1F, $79, $00, $24
  44++E558 1D 69 00 10                          DB $1D, $69, $00, $10
  45++E55C 1D 8B 00 18                          DB $1D, $8B, $00, $18
  46++E560 1D 7A 00 20                          DB $1D, $7A, $00, $20
  47++E564 1F 36 10 14                          DB $1F, $36, $10, $14
  48++E568 1F 0B 14 18                          DB $1F, $0B, $14, $18
  49++E56C 1F 48 18 1C                          DB $1F, $48, $18, $1C
  50++E570 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  51++E574 1F 57 20 24                          DB $1F, $57, $20, $24
  52++E578 1F 29 10 24                          DB $1F, $29, $10, $24
  53++E57C 18 23 04 10                          DB $18, $23, $04, $10
  54++E580 18 03 04 14                          DB $18, $03, $04, $14
  55++E584 18 25 0C 24                          DB $18, $25, $0C, $24
  56++E588 18 15 0C 20                          DB $18, $15, $0C, $20
  57++E58C 18 04 08 18                          DB $18, $04, $08, $18
  58++E590 18 14 08 1C                          DB $18, $14, $08, $1C
  59++E594 16 02 04 28                          DB $16, $02, $04, $28
  60++E598 16 01 08 2C                          DB $16, $01, $08, $2C
  61++E59C 16 12 0C 30                          DB $16, $12, $0C, $30
  62++E5A0 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  63++E5A4 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  64++E5A8 0E 2C 30 28                          DB $0E, $2C, $30, $28
  65++E5AC              BoaEdgesSize:           equ $ - BoaEdges
  66++E5AC              BoaEdgesCnt:            equ BoaEdgesSize/4
  67++E5AC 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  68++E5B0 7F 00 2D 59                          DB $7F, $00, $2D, $59
  69++E5B4 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  70++E5B8 1F 00 28 00                          DB $1F, $00, $28, $00
  71++E5BC 7F 3E 20 14                          DB $7F, $3E, $20, $14
  72++E5C0 FF 3E 20 14                          DB $FF, $3E, $20, $14
  73++E5C4 1F 00 17 06                          DB $1F, $00, $17, $06
  74++E5C8 DF 17 0F 09                          DB $DF, $17, $0F, $09
  75++E5CC 5F 17 0F 09                          DB $5F, $17, $0F, $09
  76++E5D0 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  77++E5D4 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  78++E5D8 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  79++E5DC              BoaNormalsSize:         equ $ - BoaNormals
  80++E5DC              BoaLen:                 equ $ - Boa
  81++E5DC
# file closed: ./Data/ships/Boa.asm
  91+ E5DC
  92+ E5DC                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5DC 00           CargoType5              DB $00                                     ; Number of cargo canisters released when destroyed
   2++E5DD 90 01                                DW 20 * 20                                 ; Ship's targetable area LoHi
   3++E5DF 37 E6                                DW CargoType5Edges                         ; Edge Data
   4++E5E1 3C                                   DB CargoType5EdgesSize                     ; Size of Edge Data
   5++E5E2 00                                   DB $00                                     ; Gun Vertex Byte offset
   6++E5E3 12                                   DB $12                                     ; Explosion Count
   7++E5E4 0A                                   DB CargoType5VertSize /6                   ; Vertex Count /6
   8++E5E5 3C                                   DB CargoType5VertSize                      ; Vertex Count
   9++E5E6 0F                                   DB CargoType5EdgesCnt                      ; Edges Count
  10++E5E7 00 00                                DW $0000                                   ; Bounty LoHi
  11++E5E9 1C                                   DB CargoType5NormalsSize                   ; Face (Normal) Count
  12++E5EA 0C                                   DB $0C                                     ; Range when it turns to a dot
  13++E5EB 11                                   DB $11                                     ; Energy Max
  14++E5EC 0F                                   DB $0F                                     ; Speed Max
  15++E5ED 73 E6                                DW CargoType5Normals                       ; Normals
  16++E5EF 02                                   DB $02                                     ; Q scaling
  17++E5F0 00                                   DB $00                                     ; Laser power and Nbr Missiles
  18++E5F1 FB E5                                DW CargoType5Vertices                      ; Verticles Address
  19++E5F3 04                                   DB ShipTypeScoopable                       ; Ship Type
  20++E5F4 00                                   DB 0                                       ; NewB Tactics
  21++E5F5 00                                   DB 0                                       ; AI Flags
  22++E5F6 00                                   DB $0                                      ; chance of ECM module
  23++E5F7 00                                   DB $00                                     ; Supports Solid Fill
  24++E5F8 8F E6                                DW CargoType5Traingles                  ;
  25++E5FA 21                                   DB CargoType5TrainglesSize
  26++E5FB              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  27++E5FB              ;                                       Faces
  28++E5FB              ;                            X  Y    Z  12 34  Vis
  29++E5FB 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	               ;00  Top Right
  29++E5FF 10 55
  30++E601 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22                 ;01  Mid Right Near
  30++E605 10 22
  31++E607 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33                 ;02  Bottom right Near
  31++E60B 20 33
  32++E60D 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44                 ;03  Bottom Right Rear
  32++E611 30 44
  33++E613 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55                 ;04  Mid Right Rear
  33++E617 40 55
  34++E619 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66                 ;05  Left versions
  34++E61D 51 66
  35++E61F 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66                 ;06
  35++E623 21 66
  36++E625 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66                 ;07
  36++E629 32 66
  37++E62B 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66                 ;08
  37++E62F 43 66
  38++E631 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66                 ;09
  38++E635 54 66
  39++E637              CargoType5VertSize      equ $  - CargoType5Vertices
  40++E637              ;                          Vis  FacVert Offset (4 bytexVertnbr)
  41++E637              ;                               12  01 02
  42++E637 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04 	       ;00 Face  0,1
  43++E63B 1F 20 04 08                          DB $1F,$20,$04,$08         ;01
  44++E63F 1F 30 08 0C                          DB $1F,$30,$08,$0C         ;02
  45++E643 1F 40 0C 10                          DB $1F,$40,$0C,$10         ;03
  46++E647 1F 50 00 10                          DB $1F,$50,$00,$10         ;04
  47++E64B 1F 51 00 14                          DB $1F,$51,$00,$14         ;05
  48++E64F 1F 21 04 18                          DB $1F,$21,$04,$18         ;06
  49++E653 1F 32 08 1C                          DB $1F,$32,$08,$1C         ;07
  50++E657 1F 43 0C 20                          DB $1F,$43,$0C,$20         ;08
  51++E65B 1F 54 10 24                          DB $1F,$54,$10,$24         ;19
  52++E65F 1F 61 14 18                          DB $1F,$61,$14,$18         ;10
  53++E663 1F 62 18 1C                          DB $1F,$62,$18,$1C         ;11
  54++E667 1F 63 1C 20                          DB $1F,$63,$1C,$20         ;12
  55++E66B 1F 64 20 24                          DB $1F,$64,$20,$24         ;13
  56++E66F 1F 65 24 14                          DB $1F,$65,$24,$14         ;14
  57++E673              CargoType5EdgesSize     equ $  - CargoType5Edges
  58++E673              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  59++E673              ;                           x  y    z   vis
  60++E673 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00 			               ;00 Right side
  61++E677 1F 00 29 1E                          DB $1F,$00,$29,$1E                         ;01
  62++E67B 5F 00 12 30                          DB $5F,$00,$12,$30                         ;02
  63++E67F 5F 00 33 00                          DB $5F,$00,$33,$00                         ;03
  64++E683 7F 00 12 30                          DB $7F,$00,$12,$30                         ;04
  65++E687 3F 00 29 1E                          DB $3F,$00,$29,$1E                         ;05 Left
  66++E68B 9F 60 00 00                          DB $9F,$60,$00,$00   ; end Cargo cannister ;06 right side
  67++E68F              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E68F              CargoType5Len           equ $  - CargoType5
  69++E68F                                      ; Triangles is made of a list of edges
  70++E68F              ; Ideal is pointers have a DW at the end to the list of triangles and count
  71++E68F              ; for testing we will do a simple search
  72++E68F              ;                          Nrm NodeOffset X 1
  73++E68F              ;                                0    1    2
  74++E68F 00 00 04 10  CargoType5Traingles     DB $00,$00*4, $01*4, $04*4
  75++E693 00 04 08 10                          DB $00,$01*4, $02*4, $04*4
  76++E697 00 08 0C 10                          DB $00,$02*4, $03*4, $04*4
  77++E69B 01 00 10 14                          DB $01,$00*4, $04*4, $05*4
  78++E69F 01 10 14 18                          DB $01,$04*4, $05*4, $06*4
  79++E6A3                                  ;   DB $02,
  80++E6A3                                  ;   DB $03,
  81++E6A3                                  ;   DB $03,
  82++E6A3                                  ;   DB $04,
  83++E6A3                                  ;   DB $04,
  84++E6A3                                  ;   DB $01,
  85++E6A3                                  ;   DB $01,
  86++E6A3                                  ;   DB $01,
  87++E6A3                                  ;   DB $01,
  88++E6A3 06 14 18 24                          DB $06,$05*4, $06*4, $09*4 ; its we store UBNkNodeArray + this offset it will save one memroy ready
  89++E6A7 06 18 1C 24                          DB $06,$06*4, $07*4, $09*4
  90++E6AB 06 1C 20 24                          DB $06,$07*4, $08*4, $09*4
  91++E6AF FF                                   DB $FF ; Very important end of traingle list marker
  92++E6B0              CargoType5TrainglesSize:equ $  -  CargoType5Traingles
  93++E6B0
  94++E6B0
  95++E6B0
# file closed: ./Data/ships/CargoType5.asm
  93+ E6B0                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E6B0 00           Boulder:	            DB $00                               ; Number of cargo canisters released when destroyed
   2++E6B1 84 03                                DW 30 * 30                           ; Ship's targetable area LoHi
   3++E6B3 F9 E6                                DW BoulderEdges                      ; Edge Data
   4++E6B5 3C                                   DB BoulderEdgesSize                  ; Size of Edge Data
   5++E6B6 00                                   DB $00                               ; Gun Vertex Byte offset
   6++E6B7 0E                                   DB $0E                               ; Explosion Count
   7++E6B8 07                                   DB BoulderVertSize /6                ; Vertex Count /6
   8++E6B9 2A                                   DB BoulderVertSize                   ; Vertex Count
   9++E6BA 0F                                   DB BoulderEdgesCnt                   ; Edges Count
  10++E6BB 01 00                                DW $0001                             ; Bounty LoHi
  11++E6BD 28                                   DB BoulderNormalsSize                ; Face (Normal) Count
  12++E6BE 14                                   DB $14                               ; Range when it turns to a dot
  13++E6BF 14                                   DB $14                               ; Energy Max
  14++E6C0 1E                                   DB $1E                               ; Speed Max
  15++E6C1 35 E7                                DW BoulderNormals                    ; Normals
  16++E6C3 02                                   DB $02                               ; Q scaling
  17++E6C4 00                                   DB $00                               ; Laser power and Nbr Missiles
  18++E6C5 CF E6                                DW BoulderVertices                   ; Verticles Address
  19++E6C7 03                                   DB ShipTypeJunk                      ; Ship Type
  20++E6C8 00                                   DB 0                                 ; NewB Tactics
  21++E6C9 00                                   DB 0                                 ; AI Flags
  22++E6CA A0                                   DB $A0                               ; chance of ECM module
  23++E6CB FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E6CC 00 00                                DW $0000                            ; no solid data
  25++E6CE 00                                   DB $00                              ; no solid data
  26++E6CF
  27++E6CF 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  27++E6D3 01 59
  28++E6D5 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  28++E6D9 12 56
  29++E6DB 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  29++E6DF 23 67
  30++E6E1 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  30++E6E5 34 78
  31++E6E7 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  31++E6EB 04 89
  32++E6ED 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  32++E6F1 FF FF
  33++E6F3 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  33++E6F7 FF FF
  34++E6F9              BoulderVertSize:        equ $ - BoulderVertices
  35++E6F9 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  36++E6FD 1F 26 04 08                          DB $1F, $26, $04, $08
  37++E701 1F 37 08 0C                          DB $1F, $37, $08, $0C
  38++E705 1F 48 0C 10                          DB $1F, $48, $0C, $10
  39++E709 1F 09 10 00                          DB $1F, $09, $10, $00
  40++E70D 1F 01 00 14                          DB $1F, $01, $00, $14
  41++E711 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E715 1F 23 08 14                          DB $1F, $23, $08, $14
  43++E719 1F 34 0C 14                          DB $1F, $34, $0C, $14
  44++E71D 1F 04 10 14                          DB $1F, $04, $10, $14
  45++E721 1F 59 00 18                          DB $1F, $59, $00, $18
  46++E725 1F 56 04 18                          DB $1F, $56, $04, $18
  47++E729 1F 67 08 18                          DB $1F, $67, $08, $18
  48++E72D 1F 78 0C 18                          DB $1F, $78, $0C, $18
  49++E731 1F 89 10 18                          DB $1F, $89, $10, $18
  50++E735              BoulderEdgesSize:       equ $ - BoulderEdges
  51++E735              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  52++E735 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  53++E739 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  54++E73D 5F 20 2F 18                          DB $5F, $20, $2F, $18
  55++E741 FF 03 27 07                          DB $FF, $03, $27, $07
  56++E745 FF 05 04 01                          DB $FF, $05, $04, $01
  57++E749 1F 31 54 08                          DB $1F, $31, $54, $08
  58++E74D 3F 70 15 15                          DB $3F, $70, $15, $15
  59++E751 7F 4C 23 52                          DB $7F, $4C, $23, $52
  60++E755 3F 16 38 89                          DB $3F, $16, $38, $89
  61++E759 3F 28 6E 26                          DB $3F, $28, $6E, $26
  62++E75D              BoulderNormalsSize:     equ $ - BoulderNormals
  63++E75D              BoulderLen:             equ $ - Boulder
  64++E75D
# file closed: ./Data/ships/Boulder.asm
  94+ E75D                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E75D 00           Asteroid:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E75E 00 19                                DW 80 * 80                      ; Ship's targetable area LoHi
   3++E760 B2 E7                                DW AsteroidEdges                ; Edge Data
   4++E762 54                                   DB AsteroidEdgesSize            ; Size of Edge Data
   5++E763 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E764 22                                   DB $22                          ; Explosion Count
   7++E765 09                                   DB AsteroidVertSize /6          ; Vertex Count /6
   8++E766 36                                   DB AsteroidVertSize             ; Vertex Count
   9++E767 15                                   DB AsteroidEdgesCnt             ; Edges Count
  10++E768 05 00                                DW $0005                        ; Bounty LoHi
  11++E76A 38                                   DB AsteroidNormalsSize          ; Face (Normal) Count
  12++E76B 32                                   DB $32                          ; Range when it turns to a dot
  13++E76C 3C                                   DB $3C                          ; Energy Max
  14++E76D 1E                                   DB $1E                          ; Speed Max
  15++E76E 06 E8                                DW AsteroidNormals              ; Normals
  16++E770 01                                   DB $01                          ; Q scaling
  17++E771 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E772 7C E7                                DW AsteroidVertices             ; Verticles Address
  19++E774 03                                   DB ShipTypeJunk                 ; Ship Type
  20++E775 00                                   DB 0                            ; NewB Tactics
  21++E776 00                                   DB 0                            ; AI Flags
  22++E777 00                                   DB $00                          ; chance of ECM module
  23++E778 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E779 00 00                                DW $0000                            ; no solid data
  25++E77B 00                                   DB $00                              ; no solid data
  26++E77C
  27++E77C 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  27++E780 FF FF
  28++E782 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  28++E786 FF FF
  29++E788 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  29++E78C FF FF
  30++E78E 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  30++E792 FF FF
  31++E794 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  31++E798 65 DC
  32++E79A 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  32++E79E FF FF
  33++E7A0 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  33++E7A4 10 32
  34++E7A6 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  34++E7AA FF FF
  35++E7AC 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  35++E7B0 98 BA
  36++E7B2              AsteroidVertSize:       equ $ - AsteroidVertices
  37++E7B2 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  38++E7B6 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  39++E7BA 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  40++E7BE 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  41++E7C2 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  42++E7C6 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  43++E7CA 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  44++E7CE 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  45++E7D2 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  46++E7D6 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  47++E7DA 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  48++E7DE 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  49++E7E2 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  50++E7E6 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  51++E7EA 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  52++E7EE 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  53++E7F2 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  54++E7F6 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  55++E7FA 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  56++E7FE 1F BA 08 20                          DB $1F, $BA, $08, $20
  57++E802 1F 98 1C 20                          DB $1F, $98, $1C, $20
  58++E806
  59++E806              AsteroidEdgesSize:      equ $ - AsteroidEdges
  60++E806              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  61++E806 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  62++E80A 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  63++E80E 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  64++E812 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  65++E816 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  66++E81A 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  67++E81E 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  68++E822 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  69++E826 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  70++E82A 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  71++E82E FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  72++E832 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  73++E836 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  74++E83A 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  75++E83E              AsteroidNormalsSize:    equ $ - AsteroidNormals
  76++E83E              AsteroidLen:            equ $ - Asteroid
  77++E83E
  78++E83E
# file closed: ./Data/ships/Asteroid.asm
  95+ E83E
  96+ E83E                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E83E 00           Bushmaster:	            DB $00                           ; Number of cargo canisters released when destroyed
   2++E83F 9A 10                                DW $109A                         ; Ship's targetable area LoHi
   3++E841 A5 E8                                DW BushmasterEdges               ; Edge Data
   4++E843 4C                                   DB BushmasterEdgesSize           ; Size of Edge Data
   5++E844 00                                   DB $00                           ; Gun Vertex Byte offset
   6++E845 1E                                   DB $1E                           ; Explosion Count
   7++E846 0C                                   DB BushmasterVertSize /6         ; Vertex Count /6
   8++E847 48                                   DB BushmasterVertSize            ; Vertex Count
   9++E848 13                                   DB BushmasterEdgesCnt            ; Edges Count
  10++E849 96 00                                DW $0096                         ; Bounty LoHi
  11++E84B 24                                   DB BushmasterNormalsSize         ; Face (Normal) Count
  12++E84C 14                                   DB $14                           ; Range when it turns to a dot
  13++E84D 4A                                   DB $4A                           ; Energy Max
  14++E84E 23                                   DB $23                           ; Speed Max
  15++E84F F1 E8                                DW BushmasterNormals             ; Normals
  16++E851 02                                   DB $02                           ; Q scaling
  17++E852 21                                   DB $20 | ShipMissiles1           ; Laser power and Nbr Missiles
  18++E853 5D E8                                DW BushmasterVertices            ; Verticles Address
  19++E855 00                                   DB ShipTypeNormal                ; Ship Type
  20++E856 00                                   DB 0                             ; NewB Tactics
  21++E857 80                                   DB ShipCanAnger                  ; AI Flags
  22++E858 70                                   DB $70                           ; chance of ECM module
  23++E859 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E85A 00 00                                DW $0000                            ; no solid data
  25++E85C 00                                   DB $00                              ; no solid data
  26++E85D
  27++E85D 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  27++E861 23 01
  28++E863 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  28++E867 57 13
  29++E869 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  29++E86D 46 02
  30++E86F 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  30++E873 45 01
  31++E875 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  31++E879 FF FF
  32++E87B 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  32++E87F 88 45
  33++E881 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  33++E885 88 57
  34++E887 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  34++E88B 88 46
  35++E88D 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  35++E891 88 88
  36++E893 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  36++E897 88 88
  37++E899 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  37++E89D 88 88
  38++E89F 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  38++E8A3 88 88
  39++E8A5              BushmasterVertSize:     equ $ - BushmasterVertices
  40++E8A5 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  41++E8A9 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  42++E8AD 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  43++E8B1 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  44++E8B5 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  45++E8B9 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  46++E8BD 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  47++E8C1 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  48++E8C5 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  49++E8C9 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  50++E8CD 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  51++E8D1 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  52++E8D5 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  53++E8D9 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  54++E8DD 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  55++E8E1 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  56++E8E5 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  57++E8E9 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  58++E8ED 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  59++E8F1              BushmasterEdgesSize:    equ $ - BushmasterEdges
  60++E8F1              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  61++E8F1 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  62++E8F5 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  63++E8F9 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  64++E8FD 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  65++E901 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  66++E905 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  67++E909 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  68++E90D 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  69++E911 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  70++E915              BushmasterNormalsSize:  equ $ - BushmasterNormals
  71++E915              BushmasterLen:          equ $ - Bushmaster
  72++E915
# file closed: ./Data/ships/Bushmaster.asm
  97+ E915                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E915 03           Chameleon:	            DB $03                          ; Number of cargo canisters released when destroyed
   2++E916 A0 0F                                DW $0FA0                        ; Ship's targetable area LoHi
   3++E918 9F E9                                DW ChameleonEdges               ; Edge Data
   4++E91A 74                                   DB ChameleonEdgesSize           ; Size of Edge Data
   5++E91B 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E91C 1A                                   DB $1A                          ; Explosion Count
   7++E91D 12                                   DB ChameleonVertSize /6         ; Vertex Count /6
   8++E91E 6C                                   DB ChameleonVertSize            ; Vertex Count
   9++E91F 1D                                   DB ChameleonEdgesCnt            ; Edges Count
  10++E920 C8                                   DB $00C8                        ; Bounty LoHi
  11++E921 34                                   DB ChameleonNormalsSize         ; Face (Normal) Count
  12++E922 0A                                   DB $0A                          ; Range when it turns to a dot
  13++E923 64                                   DB $64                          ; Energy Max
  14++E924 1D                                   DB $1D                          ; Speed Max
  15++E925 13 EA                                DW ChameleonNormals             ; Normals
  16++E927 01                                   DB $01                          ; Q scaling
  17++E928 23                                   DB $23                          ; Laser power and Nbr Missiles
  18++E929 33 E9                                DW ChameleonVertices            ; Verticles Address
  19++E92B 00                                   DB ShipTypeNormal               ; Ship Type
  20++E92C 00                                   DB 0                            ; NewB Tactics
  21++E92D 80                                   DB ShipCanAnger                 ; AI Flags
  22++E92E 40                                   DB $40                          ; chance of ECM module
  23++E92F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E930 00 00                                DW $0000                            ; no solid data
  25++E932 00                                   DB $00                              ; no solid data
  26++E933
  27++E933 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  27++E937 25 01
  28++E939 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  28++E93D 34 01
  29++E93F 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  29++E943 8B 25
  30++E945 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  30++E949 68 22
  31++E94B 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  31++E94F 69 33
  32++E951 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  32++E955 9A 34
  33++E957 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  33++E95B 7A 44
  34++E95D 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  34++E961 7B 55
  35++E963 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  35++E967 36 02
  36++E969 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  36++E96D 57 14
  37++E96F 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  37++E973 BC 88
  38++E975 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  38++E979 9C 68
  39++E97B 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  39++E97F AC 99
  40++E981 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  40++E985 BC 7A
  41++E987 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  41++E98B CC CC
  42++E98D 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  42++E991 CC CC
  43++E993 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  43++E997 CC CC
  44++E999 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  44++E99D CC CC
  45++E99F              ChameleonVertSize:      equ $ - ChameleonVertices
  46++E99F 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  47++E9A3 1F 02 00 20                          DB $1F, $02, $00, $20
  48++E9A7 1F 15 00 24                          DB $1F, $15, $00, $24
  49++E9AB 1F 03 04 20                          DB $1F, $03, $04, $20
  50++E9AF 1F 14 04 24                          DB $1F, $14, $04, $24
  51++E9B3 1F 34 04 14                          DB $1F, $34, $04, $14
  52++E9B7 1F 25 00 08                          DB $1F, $25, $00, $08
  53++E9BB 1F 26 0C 20                          DB $1F, $26, $0C, $20
  54++E9BF 1F 36 10 20                          DB $1F, $36, $10, $20
  55++E9C3 1F 75 1C 24                          DB $1F, $75, $1C, $24
  56++E9C7 1F 74 18 24                          DB $1F, $74, $18, $24
  57++E9CB 1F 39 10 14                          DB $1F, $39, $10, $14
  58++E9CF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  59++E9D3 1F 28 08 0C                          DB $1F, $28, $08, $0C
  60++E9D7 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  61++E9DB 1F 8B 08 28                          DB $1F, $8B, $08, $28
  62++E9DF 1F 9A 14 30                          DB $1F, $9A, $14, $30
  63++E9E3 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  64++E9E7 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  65++E9EB 1F 69 10 2C                          DB $1F, $69, $10, $2C
  66++E9EF 1F 7A 18 34                          DB $1F, $7A, $18, $34
  67++E9F3 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  68++E9F7 1F BC 28 34                          DB $1F, $BC, $28, $34
  69++E9FB 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  70++E9FF 1F AC 30 34                          DB $1F, $AC, $30, $34
  71++EA03 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  72++EA07 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  73++EA0B 0A CC 40 44                          DB $0A, $CC, $40, $44
  74++EA0F 0A CC 44 38                          DB $0A, $CC, $44, $38
  75++EA13              ChameleonEdgesSize:     equ $ - ChameleonEdges
  76++EA13              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  77++EA13 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  78++EA17 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  79++EA1B 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  80++EA1F 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  81++EA23 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  82++EA27 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  83++EA2B 1F 00 60 00                          DB $1F, $00, $60, $00
  84++EA2F 5F 00 60 00                          DB $5F, $00, $60, $00
  85++EA33 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  86++EA37 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  87++EA3B 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  88++EA3F FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  89++EA43 3F 00 00 60                          DB $3F, $00, $00, $60
  90++EA47              ChameleonNormalsSize:   equ $ - ChameleonNormals
  91++EA47              ChameleonLen:           equ $ - Chameleon
  92++EA47
# file closed: ./Data/ships/Chameleon.asm
  98+ EA47                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++EA47              ; Corrected pointers
   2++EA47              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++EA47              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++EA47              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++EA47 03           CobraMk3    		    DB $03                            ; Number of cargo canisters released when destroyed
   6++EA48 41 23                                DW $2341                          ; Ship's targetable area LoHi
   7++EA4A 0E EB                                DW CobraMk3Edges                  ; Edge Data
   8++EA4C 98                                   DB CobraMkEdgesSize               ; Size of Edge Data
   9++EA4D 54                                   DB $54                            ; Gun Vertex Byte offset
  10++EA4E 2A                                   DB $2A                            ; Explosion Count
  11++EA4F 1C                                   DB CobraMkVertSize /6             ; Vertex Count /6
  12++EA50 A8                                   DB CobraMkVertSize                ; Vertex Count
  13++EA51 26                                   DB CobraMkEdgesCnt                ; Edges Count
  14++EA52 00 00                                DW $0000                          ; Bounty LoHi
  15++EA54 34                                   DB CobraMk3NormalsSize            ; Face (Normal) Count
  16++EA55 32                                   DB $32                            ; Range when it turns to a dot
  17++EA56 96                                   DB $96                            ; Energy Max
  18++EA57 1C                                   DB $1C                            ; Speed Max
  19++EA58 A6 EB                                DW CobraMk3Normals                ; Normals
  20++EA5A 01                                   DB $01                            ; Q scaling
  21++EA5B 34                                   DB $30 | ShipMissiles4            ; Laser power and Nbr Missiles
  22++EA5C 66 EA                                DW CobraMk3Vertices               ; Verticles Address
  23++EA5E 00                                   DB ShipTypeNormal                 ; Ship Type
  24++EA5F 00                                   DB 0                              ; NewB Tactics
  25++EA60 80                                   DB ShipCanAnger                   ; AI Flags
  26++EA61 70                                   DB $70                            ; chance of ECM module
  27++EA62 FF                                   DB $FF                              ; Supports Solid Fill = false
  28++EA63 00 00                                DW $0000                            ; no solid data
  29++EA65 00                                   DB $00                              ; no solid data
  30++EA66
  31++EA66 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  31++EA6A FF FF
  32++EA6C 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  32++EA70 FF FF
  33++EA72 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  33++EA76 FF FF
  34++EA78 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  34++EA7C 73 AA
  35++EA7E 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  35++EA82 84 CC
  36++EA84 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  36++EA88 FF FF
  37++EA8A 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  37++EA8E FF FF
  38++EA90 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  38++EA94 98 CC
  39++EA96 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  39++EA9A 97 AA
  40++EA9C 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  40++EAA0 65 99
  41++EAA2 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  41++EAA6 A9 BB
  42++EAA8 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  42++EAAC B9 CC
  43++EAAE 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  43++EAB2 99 99
  44++EAB4 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  44++EAB8 99 99
  45++EABA 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  45++EABE 99 99
  46++EAC0 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  46++EAC4 99 99
  47++EAC6 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  47++EACA 99 99
  48++EACC 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  48++EAD0 99 99
  49++EAD2 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  49++EAD6 99 99
  50++EAD8 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  50++EADC 99 99
  51++EADE 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  51++EAE2 B0 BB
  52++EAE4 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  52++EAE8 B0 BB
  53++EAEA 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  53++EAEE 99 99
  54++EAF0 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  54++EAF4 99 99
  55++EAF6 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  55++EAFA 99 99
  56++EAFC 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  56++EB00 99 99
  57++EB02 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  57++EB06 99 99
  58++EB08 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  58++EB0C 99 99
  59++EB0E              CobraMkVertSize         equ $  - CobraMk3Vertices
  60++EB0E 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04
  61++EB12 1F C4 00 10                          DB $1F,$C4,$00,$10
  62++EB16 1F A3 04 0C                          DB $1F,$A3,$04,$0C
  63++EB1A 1F A7 0C 20                          DB $1F,$A7,$0C,$20
  64++EB1E 1F C8 10 1C                          DB $1F,$C8,$10,$1C
  65++EB22 1F 98 18 1C                          DB $1F,$98,$18,$1C
  66++EB26 1F 96 18 24                          DB $1F,$96,$18,$24
  67++EB2A 1F 95 14 24                          DB $1F,$95,$14,$24
  68++EB2E 1F 97 14 20                          DB $1F,$97,$14,$20
  69++EB32 1F 51 08 14                          DB $1F,$51,$08,$14
  70++EB36 1F 62 08 18                          DB $1F,$62,$08,$18
  71++EB3A 1F 73 0C 14                          DB $1F,$73,$0C,$14
  72++EB3E 1F 84 10 18                          DB $1F,$84,$10,$18
  73++EB42 1F 10 04 08                          DB $1F,$10,$04,$08
  74++EB46 1F 20 00 08                          DB $1F,$20,$00,$08
  75++EB4A 1F A9 20 28                          DB $1F,$A9,$20,$28
  76++EB4E 1F B9 28 2C                          DB $1F,$B9,$28,$2C
  77++EB52 1F C9 1C 2C                          DB $1F,$C9,$1C,$2C
  78++EB56 1F BA 04 28                          DB $1F,$BA,$04,$28
  79++EB5A 1F CB 00 2C                          DB $1F,$CB,$00,$2C
  80++EB5E 1D 31 04 14                          DB $1D,$31,$04,$14
  81++EB62 1D 42 00 18                          DB $1D,$42,$00,$18
  82++EB66 06 B0 50 54                          DB $06,$B0,$50,$54
  83++EB6A 14 99 30 34                          DB $14,$99,$30,$34
  84++EB6E 14 99 48 4C                          DB $14,$99,$48,$4C
  85++EB72 14 99 38 3C                          DB $14,$99,$38,$3C
  86++EB76 14 99 40 44                          DB $14,$99,$40,$44
  87++EB7A 13 99 3C 40                          DB $13,$99,$3C,$40
  88++EB7E 11 99 38 44                          DB $11,$99,$38,$44
  89++EB82 13 99 34 48                          DB $13,$99,$34,$48
  90++EB86 13 99 30 4C                          DB $13,$99,$30,$4C
  91++EB8A 1E 65 08 24                          DB $1E,$65,$08,$24
  92++EB8E 06 99 58 60                          DB $06,$99,$58,$60
  93++EB92 06 99 5C 60                          DB $06,$99,$5C,$60
  94++EB96 08 99 58 5C                          DB $08,$99,$58,$5C
  95++EB9A 06 99 64 68                          DB $06,$99,$64,$68
  96++EB9E 06 99 68 6C                          DB $06,$99,$68,$6C
  97++EBA2 08 99 64 6C                          DB $08,$99,$64,$6C
  98++EBA6              CobraMkEdgesSize        equ $  - CobraMk3Edges
  99++EBA6              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
 100++EBA6              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
 101++EBA6 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
 102++EBAA 9F 12 37 10                          DB $9F,$12,$37,$10
 103++EBAE 1F 12 37 10                          DB $1F,$12,$37,$10
 104++EBB2 9F 10 34 0E                          DB $9F,$10,$34,$0E
 105++EBB6 1F 10 34 0E                          DB $1F,$10,$34,$0E
 106++EBBA 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
 107++EBBE 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
 108++EBC2 9F 3D 66 00                          DB $9F,$3D,$66,$00
 109++EBC6 1F 3D 66 00                          DB $1F,$3D,$66,$00
 110++EBCA 3F 00 00 50                          DB $3F,$00,$00,$50
 111++EBCE DF 07 2A 09                          DB $DF,$07,$2A,$09
 112++EBD2 5F 00 1E 06                          DB $5F,$00,$1E,$06
 113++EBD6 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
 114++EBDA              CobraMk3NormalsSize     equ $  - CobraMk3Normals
 115++EBDA              CobraMk3Len             equ $  - CobraMk3
 116++EBDA
# file closed: ./Data/ships/CobraMk3.asm
  99+ EBDA                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EBDA 03           Cobra_Mk_1:	            DB $03                              ; Number of cargo canisters released when destroyed
   2++EBDB 49 26                                DW $2649                            ; Ship's targetable area LoHi
   3++EBDD 3B EC                                DW Cobra_Mk_1Edges                  ; Edge Data
   4++EBDF 48                                   DB Cobra_Mk_1EdgesSize              ; Size of Edge Data
   5++EBE0 28                                   DB $28                              ; Gun Vertex Byte offset
   6++EBE1 1A                                   DB $1A                              ; Explosion Count
   7++EBE2 0B                                   DB Cobra_Mk_1VertSize /6            ; Vertex Count /6
   8++EBE3 42                                   DB Cobra_Mk_1VertSize               ; Vertex Count
   9++EBE4 12                                   DB Cobra_Mk_1EdgesCnt               ; Edges Count
  10++EBE5 00 4B                                DW $4B00                            ; Bounty LoHi
  11++EBE7 28                                   DB Cobra_Mk_1NormalsSize            ; Face (Normal) Count
  12++EBE8 13                                   DB $13                              ; Range when it turns to a dot
  13++EBE9 51                                   DB $51                              ; Energy Max
  14++EBEA 1A                                   DB $1A                              ; Speed Max
  15++EBEB 83 EC                                DW Cobra_Mk_1Normals                ; Normals
  16++EBED 02                                   DB $02                              ; Q scaling
  17++EBEE 23                                   DB $20 | ShipMissiles3              ; Laser power and Nbr Missiles
  18++EBEF F9 EB                                DW Cobra_Mk_1Vertices               ; Verticles Address
  19++EBF1 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EBF2 00                                   DB 0                                ; NewB Tactics
  21++EBF3 80                                   DB ShipCanAnger                     ; AI Flags
  22++EBF4 30                                   DB $30                              ; chance of ECM module
  23++EBF5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBF6 00 00                                DW $0000                            ; no solid data
  25++EBF8 00                                   DB $00                              ; no solid data
  26++EBF9
  27++EBF9 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  27++EBFD 01 23
  28++EBFF 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  28++EC03 01 45
  29++EC05 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  29++EC09 23 88
  30++EC0B 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  30++EC0F 45 99
  31++EC11 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  31++EC15 26 78
  32++EC17 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  32++EC1B 46 79
  33++EC1D 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  33++EC21 13 78
  34++EC23 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  34++EC27 15 79
  35++EC29 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  35++EC2D 02 46
  36++EC2F 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  36++EC33 01 11
  37++EC35 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  37++EC39 01 11
  38++EC3B              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  39++EC3B 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  40++EC3F 1F 23 00 08                          DB $1F, $23, $00, $08
  41++EC43 1F 38 08 18                          DB $1F, $38, $08, $18
  42++EC47 1F 17 18 1C                          DB $1F, $17, $18, $1C
  43++EC4B 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  44++EC4F 1F 45 0C 04                          DB $1F, $45, $0C, $04
  45++EC53 1F 28 08 10                          DB $1F, $28, $08, $10
  46++EC57 1F 67 10 14                          DB $1F, $67, $10, $14
  47++EC5B 1F 49 14 0C                          DB $1F, $49, $14, $0C
  48++EC5F 14 02 00 20                          DB $14, $02, $00, $20
  49++EC63 14 04 20 04                          DB $14, $04, $20, $04
  50++EC67 10 26 10 20                          DB $10, $26, $10, $20
  51++EC6B 10 46 20 14                          DB $10, $46, $20, $14
  52++EC6F 1F 78 10 18                          DB $1F, $78, $10, $18
  53++EC73 1F 79 14 1C                          DB $1F, $79, $14, $1C
  54++EC77 14 13 00 18                          DB $14, $13, $00, $18
  55++EC7B 14 15 04 1C                          DB $14, $15, $04, $1C
  56++EC7F 02 01 28 24                          DB $02, $01, $28, $24
  57++EC83              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  58++EC83              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  59++EC83 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  60++EC87 5F 00 1B 03                          DB $5F, $00, $1B, $03
  61++EC8B 9F 08 2E 08                          DB $9F, $08, $2E, $08
  62++EC8F DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  63++EC93 1F 08 2E 08                          DB $1F, $08, $2E, $08
  64++EC97 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  65++EC9B 1F 00 31 00                          DB $1F, $00, $31, $00
  66++EC9F 3F 00 00 9A                          DB $3F, $00, $00, $9A
  67++ECA3 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  68++ECA7 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  69++ECAB              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  70++ECAB              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  71++ECAB
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ ECAB                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++ECAB 01           Cobra_Mk_3_P:	        DB $01                              ; Number of cargo canisters released when destroyed
   2++ECAC 41 23                                DW $2341                            ; Ship's targetable area LoHi
   3++ECAE 72 ED                                DW Cobra_Mk_3_PEdges                ; Edge Data
   4++ECB0 98                                   DB Cobra_Mk_3_PEdgesSize            ; Size of Edge Data
   5++ECB1 54                                   DB $54                              ; Gun Vertex Byte offset
   6++ECB2 2A                                   DB $2A                              ; Explosion Count
   7++ECB3 1C                                   DB Cobra_Mk_3_PVertSize /6          ; Vertex Count /6
   8++ECB4 A8                                   DB Cobra_Mk_3_PVertSize             ; Vertex Count
   9++ECB5 26                                   DB Cobra_Mk_3_PEdgesCnt             ; Edges Count
  10++ECB6 00 AF                                DW $AF00                            ; Bounty LoHi
  11++ECB8 34                                   DB Cobra_Mk_3_PNormalsSize          ; Face (Normal) Count
  12++ECB9                                      ; Add in a new byte for range for LoD, if this is zero then no LoD Data
  13++ECB9 32                                   DB $32                              ; Range when it turns to a dot
  14++ECBA 96                                   DB $96                              ; Energy Max
  15++ECBB 1C                                   DB $1C                              ; Speed Max
  16++ECBC 0A EE                                DW Cobra_Mk_3_PNormals              ; Normals
  17++ECBE 01                                   DB $01                              ; Q scaling
  18++ECBF 14                                   DB $10 | ShipMissiles4              ; Laser power and Nbr Missiles
  19++ECC0 CA EC                                DW Cobra_Mk_3_PVertices             ; Verticles Address
  20++ECC2 00                                   DB ShipTypeNormal                   ; Ship Type
  21++ECC3 00                                   DB 0                                ; NewB Tactics
  22++ECC4 80                                   DB ShipCanAnger                     ; AI Flags
  23++ECC5 90                                   DB $90                              ; chance of ECM module
  24++ECC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++ECC7 00 00                                DW $0000                            ; no solid data
  26++ECC9 00                                   DB $00                              ; no solid data
  27++ECCA
  28++ECCA 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  28++ECCE FF FF
  29++ECD0 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  29++ECD4 FF FF
  30++ECD6 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  30++ECDA FF FF
  31++ECDC 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  31++ECE0 73 AA
  32++ECE2 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  32++ECE6 84 CC
  33++ECE8 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  33++ECEC FF FF
  34++ECEE 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  34++ECF2 FF FF
  35++ECF4 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  35++ECF8 98 CC
  36++ECFA 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  36++ECFE 97 AA
  37++ED00 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  37++ED04 65 99
  38++ED06 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  38++ED0A A9 BB
  39++ED0C 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  39++ED10 B9 CC
  40++ED12 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  40++ED16 99 99
  41++ED18 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  41++ED1C 99 99
  42++ED1E 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  42++ED22 99 99
  43++ED24 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  43++ED28 99 99
  44++ED2A 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  44++ED2E 99 99
  45++ED30 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  45++ED34 99 99
  46++ED36 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  46++ED3A 99 99
  47++ED3C 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  47++ED40 99 99
  48++ED42 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  48++ED46 B0 BB
  49++ED48 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  49++ED4C B0 BB
  50++ED4E 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  50++ED52 99 99
  51++ED54 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  51++ED58 99 99
  52++ED5A 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  52++ED5E 99 99
  53++ED60 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  53++ED64 99 99
  54++ED66 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  54++ED6A 99 99
  55++ED6C 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  55++ED70 99 99
  56++ED72              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  57++ED72 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  58++ED76 1F C4 00 10                          DB $1F, $C4, $00, $10
  59++ED7A 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  60++ED7E 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  61++ED82 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  62++ED86 1F 98 18 1C                          DB $1F, $98, $18, $1C
  63++ED8A 1F 96 18 24                          DB $1F, $96, $18, $24
  64++ED8E 1F 95 14 24                          DB $1F, $95, $14, $24
  65++ED92 1F 97 14 20                          DB $1F, $97, $14, $20
  66++ED96 1F 51 08 14                          DB $1F, $51, $08, $14
  67++ED9A 1F 62 08 18                          DB $1F, $62, $08, $18
  68++ED9E 1F 73 0C 14                          DB $1F, $73, $0C, $14
  69++EDA2 1F 84 10 18                          DB $1F, $84, $10, $18
  70++EDA6 1F 10 04 08                          DB $1F, $10, $04, $08
  71++EDAA 1F 20 00 08                          DB $1F, $20, $00, $08
  72++EDAE 1F A9 20 28                          DB $1F, $A9, $20, $28
  73++EDB2 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  74++EDB6 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  75++EDBA 1F BA 04 28                          DB $1F, $BA, $04, $28
  76++EDBE 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  77++EDC2 1D 31 04 14                          DB $1D, $31, $04, $14
  78++EDC6 1D 42 00 18                          DB $1D, $42, $00, $18
  79++EDCA 06 B0 50 54                          DB $06, $B0, $50, $54
  80++EDCE 14 99 30 34                          DB $14, $99, $30, $34
  81++EDD2 14 99 48 4C                          DB $14, $99, $48, $4C
  82++EDD6 14 99 38 3C                          DB $14, $99, $38, $3C
  83++EDDA 14 99 40 44                          DB $14, $99, $40, $44
  84++EDDE 13 99 3C 40                          DB $13, $99, $3C, $40
  85++EDE2 11 99 38 44                          DB $11, $99, $38, $44
  86++EDE6 13 99 34 48                          DB $13, $99, $34, $48
  87++EDEA 13 99 30 4C                          DB $13, $99, $30, $4C
  88++EDEE 1E 65 08 24                          DB $1E, $65, $08, $24
  89++EDF2 06 99 58 60                          DB $06, $99, $58, $60
  90++EDF6 06 99 5C 60                          DB $06, $99, $5C, $60
  91++EDFA 08 99 58 5C                          DB $08, $99, $58, $5C
  92++EDFE 06 99 64 68                          DB $06, $99, $64, $68
  93++EE02 06 99 68 6C                          DB $06, $99, $68, $6C
  94++EE06 08 99 64 6C                          DB $08, $99, $64, $6C
  95++EE0A              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  96++EE0A              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  97++EE0A 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  98++EE0E 9F 12 37 10                          DB $9F, $12, $37, $10
  99++EE12 1F 12 37 10                          DB $1F, $12, $37, $10
 100++EE16 9F 10 34 0E                          DB $9F, $10, $34, $0E
 101++EE1A 1F 10 34 0E                          DB $1F, $10, $34, $0E
 102++EE1E 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
 103++EE22 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
 104++EE26 9F 3D 66 00                          DB $9F, $3D, $66, $00
 105++EE2A 1F 3D 66 00                          DB $1F, $3D, $66, $00
 106++EE2E 3F 00 00 50                          DB $3F, $00, $00, $50
 107++EE32 DF 07 2A 09                          DB $DF, $07, $2A, $09
 108++EE36 5F 00 1E 06                          DB $5F, $00, $1E, $06
 109++EE3A 5F 07 2A 09                          DB $5F, $07, $2A, $09
 110++EE3E              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 111++EE3E              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 112++EE3E
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EE3E                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EE3E F3           Constrictor:    	    DB $F3                         ; Number of cargo canisters released when destroyed
   2++EE3F 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++EE41 C3 EE                                DW ConstrictorEdges            ; Edge Data
   4++EE43 60                                   DB ConstrictorEdgesSize        ; Size of Edge Data
   5++EE44 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EE45 2E                                   DB $2E                         ; Explosion Count
   7++EE46 11                                   DB ConstrictorVertSize /6      ; Vertex Count /6
   8++EE47 66                                   DB ConstrictorVertSize         ; Vertex Count
   9++EE48 18                                   DB ConstrictorEdgesCnt         ; Edges Count
  10++EE49 18 00                                DW $0018                       ; Bounty LoHi
  11++EE4B 28                                   DB ConstrictorNormalsSize      ; Face (Normal) Count
  12++EE4C 2D                                   DB $2D                         ; Range when it turns to a dot
  13++EE4D C8                                   DB $C8                         ; Energy Max
  14++EE4E 37                                   DB $37                         ; Speed Max
  15++EE4F 23 EF                                DW ConstrictorNormals          ; Normals
  16++EE51 02                                   DB $02                         ; Q scaling
  17++EE52 2F                                   DB $20 | ShipMissiles15        ; Laser power and Nbr Missiles
  18++EE53 5D EE                                DW ConstrictorVertices         ; Verticles Address
  19++EE55 00                                   DB ShipTypeNormal              ; Ship Type
  20++EE56 00                                   DB 0                           ; NewB Tactics
  21++EE57 80                                   DB ShipCanAnger                ; AI Flags
  22++EE58 FF                                   DB $FF                         ; chance of ECM module
  23++EE59 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EE5A 00 00                                DW $0000                            ; no solid data
  25++EE5C 00                                   DB $00                              ; no solid data
  26++EE5D
  27++EE5D 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  27++EE61 02 99
  28++EE63 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  28++EE67 01 99
  29++EE69 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  29++EE6D 14 99
  30++EE6F 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  30++EE73 45 89
  31++EE75 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  31++EE79 56 88
  32++EE7B 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  32++EE7F 67 88
  33++EE81 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  33++EE85 37 89
  34++EE87 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  34++EE8B 23 99
  35++EE8D 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  35++EE91 FF FF
  36++EE93 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  36++EE97 FF FF
  37++EE99 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  37++EE9D 99 99
  38++EE9F 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  38++EEA3 99 99
  39++EEA5 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  39++EEA9 99 99
  40++EEAB 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  40++EEAF 99 99
  41++EEB1 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  41++EEB5 99 99
  42++EEB7 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  42++EEBB 99 99
  43++EEBD 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  43++EEC1 9F 01
  44++EEC3              ConstrictorVertSize     equ $  - ConstrictorVertices
  45++EEC3 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04
  46++EEC7 1F 19 04 08                          DB $1F, $19, $04, $08
  47++EECB 1F 01 04 24                          DB $1F, $01, $04, $24
  48++EECF 1F 02 00 20                          DB $1F, $02, $00, $20
  49++EED3 1F 29 00 1C                          DB $1F, $29, $00, $1C
  50++EED7 1F 23 1C 20                          DB $1F, $23, $1C, $20
  51++EEDB 1F 14 08 24                          DB $1F, $14, $08, $24
  52++EEDF 1F 49 08 0C                          DB $1F, $49, $08, $0C
  53++EEE3 1F 39 18 1C                          DB $1F, $39, $18, $1C
  54++EEE7 1F 37 18 20                          DB $1F, $37, $18, $20
  55++EEEB 1F 67 14 20                          DB $1F, $67, $14, $20
  56++EEEF 1F 56 10 24                          DB $1F, $56, $10, $24
  57++EEF3 1F 45 0C 24                          DB $1F, $45, $0C, $24
  58++EEF7 1F 58 0C 10                          DB $1F, $58, $0C, $10
  59++EEFB 1F 68 10 14                          DB $1F, $68, $10, $14
  60++EEFF 1F 78 14 18                          DB $1F, $78, $14, $18
  61++EF03 1F 89 0C 18                          DB $1F, $89, $0C, $18
  62++EF07 1F 06 20 24                          DB $1F, $06, $20, $24
  63++EF0B 12 99 28 30                          DB $12, $99, $28, $30
  64++EF0F 05 99 30 38                          DB $05, $99, $30, $38
  65++EF13 0A 99 38 28                          DB $0A, $99, $38, $28
  66++EF17 0A 99 2C 3C                          DB $0A, $99, $2C, $3C
  67++EF1B 05 99 34 3C                          DB $05, $99, $34, $3C
  68++EF1F 12 99 2C 34                          DB $12, $99, $2C, $34
  69++EF23              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  70++EF23              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  71++EF23 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  71++EF27 9F 18 4B 14
  72++EF2B 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  72++EF2F 1F 2C 4B 00
  73++EF33 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  73++EF37 9F 2C 4B 00
  74++EF3B 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  74++EF3F 1F 2C 4B 00
  75++EF43 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  75++EF47 5F 00 1B 00
  76++EF4B              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  77++EF4B              ConstrictorLen          equ $  - Constrictor
  78++EF4B
# file closed: ./Data/ships/Constrictor.asm
 102+ EF4B                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EF4B 00           Coriolis:	            DB $00                                      ; Number of cargo canisters released when destroyed
   2++EF4C 00 64                                DW $6400                                    ; Ship's targetable area LoHi
   3++EF4E CA EF                                DW CoriolisEdges                            ; Edge Data
   4++EF50 70                                   DB CoriolisEdgesSize                        ; Size of Edge Data
   5++EF51 00                                   DB $00                                      ; Gun Vertex Byte offset
   6++EF52 36                                   DB $36                                      ; Explosion Count
   7++EF53 10                                   DB CoriolisVertSize /6                      ; Vertex Count /6
   8++EF54 60                                   DB CoriolisVertSize                         ; Vertex Count
   9++EF55 1C                                   DB CoriolisEdgesCnt                         ; Edges Count
  10++EF56 00 00                                DW $0000                                    ; Bounty LoHi
  11++EF58 38                                   DB CoriolisNormalsSize                      ; Face (Normal) Count
  12++EF59 78                                   DB $78                                      ; Range when it turns to a dot
  13++EF5A F0                                   DB $F0                                      ; Energy Max
  14++EF5B 00                                   DB $00                                      ; Speed Max
  15++EF5C 3A F0                                DW CoriolisNormals                          ; Normals
  16++EF5E 00                                   DB $00                                      ; Q scaling
  17++EF5F 06                                   DB $06                                      ; Laser power and Nbr Missiles
  18++EF60 6A EF                                DW CoriolisVertices                         ; Verticles Address
  19++EF62 02                                   DB ShipTypeStation                          ; Ship Type
  20++EF63 00                                   DB 0                                        ; NewB Tactics
  21++EF64 78                                   DB ShipFighterBaySize | ShipFighterViper    ; AI Flags
  22++EF65 FF                                   DB $FF                                      ; chance of ECM module
  23++EF66 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EF67 00 00                                DW $0000                            ; no solid data
  25++EF69 00                                   DB $00                              ; no solid data
  26++EF6A              ;Need to do a debug cube and test that, even better a debug square only
  27++EF6A              ; a debug cube would be -160, 160, 160  to -160,160,-160    top left forward     to top left rear         TLF   $A0, $A0, $A0, $9F, $14, $50
  28++EF6A              ;                       -160, 160, 160  to -160,-160,160    top left forward     to bottom left forward   TLR   $A0, $A0, $A0, $BF, $45, $60
  29++EF6A              ;                       -160, 160,-160  to  160,160,-160    top left rear        to top right rear        BLF   $A0, $A0, $A0, $DF, $12, $40
  30++EF6A              ;                       -160, 160,-160  to -160,-160,-160   top left rear        to bottom left rear      TRR   $A0, $A0, $A0, $3F, $35, $60
  31++EF6A              ;                       -160,-160,-160  to -160,-160,-160   bottom left forward  to bottom left rear      BLR   $A0, $A0, $A0, $FF, $24, $60
  32++EF6A              ;                       -160, 160, 160  to  160, 160, 160   top left forward     to top right forward     TRF   $A0, $A0, $A0, $1F, $13, $60
  33++EF6A              ;                       -160,-160, 160  to  160,-160, 160   bottom left forward  to bottom right forward  BRF   $A0, $A0, $A0, $5F, $12, $30
  34++EF6A              ;                       -160,-160,-160  to  160,-160,-160   bottom left rear     to bottom right rear     BRR   $A0, $A0, $A0, $7F, $23, $50
  35++EF6A              ;                        160, 160, 160  to  160, 160,-160   top right forward    to top right rear
  36++EF6A              ;                        160,-160, 160  to  160,-160,-160   bottom right forward to bottom right rear
  37++EF6A              ;                        160, 160, 160  to  160,-160, 160   top right forward    to bottom right forward
  38++EF6A              ;                        160, 160,-160  to  160,-160,-160   top right rear       to bottom right rear
  39++EF6A              CoriolisVertices:	    ; DB $A0, $A0, $A0, $9F, $14, $50    ; TLF 1
  40++EF6A                                      ; DB $A0, $A0, $A0, $BF, $45, $60    ; TLR 2
  41++EF6A                                      ; DB $A0, $A0, $A0, $DF, $12, $40    ; BLF 3
  42++EF6A                                      ; DB $A0, $A0, $A0, $3F, $35, $60    ; TRR 4
  43++EF6A                                      ; DB $A0, $A0, $A0, $FF, $24, $60    ; BLR 5
  44++EF6A                                      ; DB $A0, $A0, $A0, $1F, $13, $60    ; TRF 6
  45++EF6A                                      ; DB $A0, $A0, $A0, $5F, $12, $30    ; BRF 7
  46++EF6A                                      ; DB $A0, $A0, $A0, $7F, $23, $50    ; BRR 8
  47++EF6A A0 00 A0 1F                           DB $A0, $00, $A0, $1F, $10, $62     ; 160,   0 , 160
  47++EF6E 10 62
  48++EF70 00 A0 A0 1F                           DB $00, $A0, $A0, $1F, $20, $83     ;   0, 160 , 160
  48++EF74 20 83
  49++EF76 A0 00 A0 9F                           DB $A0, $00, $A0, $9F, $30, $74     ;-160,   0 , 160
  49++EF7A 30 74
  50++EF7C 00 A0 A0 5F                           DB $00, $A0, $A0, $5F, $10, $54     ;   0,-160 , 160
  50++EF80 10 54
  51++EF82 A0 A0 00 5F                           DB $A0, $A0, $00, $5F, $51, $A6     ; 160,-160 ,   0
  51++EF86 51 A6
  52++EF88 A0 A0 00 1F                           DB $A0, $A0, $00, $1F, $62, $B8     ; 160, 160 ,   0
  52++EF8C 62 B8
  53++EF8E A0 A0 00 9F                           DB $A0, $A0, $00, $9F, $73, $C8     ;-160, 160 ,   0
  53++EF92 73 C8
  54++EF94 A0 A0 00 DF                           DB $A0, $A0, $00, $DF, $54, $97     ;-160,-160 ,   0
  54++EF98 54 97
  55++EF9A A0 00 A0 3F                           DB $A0, $00, $A0, $3F, $A6, $DB     ; 160,   0 ,-160
  55++EF9E A6 DB
  56++EFA0 00 A0 A0 3F                           DB $00, $A0, $A0, $3F, $B8, $DC     ;   0, 160 ,-160
  56++EFA4 B8 DC
  57++EFA6 A0 00 A0 BF                           DB $A0, $00, $A0, $BF, $97, $DC     ;-160,   0 ,-160
  57++EFAA 97 DC
  58++EFAC 00 A0 A0 7F                           DB $00, $A0, $A0, $7F, $95, $DA     ;   0,-160 ,-160
  58++EFB0 95 DA
  59++EFB2 0A 1E A0 5E                           DB $0A, $1E, $A0, $5E, $00, $00     ; 160, -30 , 160
  59++EFB6 00 00
  60++EFB8 0A 1E A0 1E                           DB $0A, $1E, $A0, $1E, $00, $00     ; 160,  30 , 160
  60++EFBC 00 00
  61++EFBE 0A 1E A0 9E                           DB $0A, $1E, $A0, $9E, $00, $00     ;-160,  30 , 160
  61++EFC2 00 00
  62++EFC4 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00     ;-160, -30 , 160
  62++EFC8 00 00
  63++EFCA              CoriolisVertSize:       equ $ - CoriolisVertices
  64++EFCA              CoriolisEdges:	        ; DB $1F, $46, $01, $02
  65++EFCA                                      ; DB $1F, $56, $02, $04
  66++EFCA                                      ; DB $1F, $36, $06, $04
  67++EFCA                                      ; DB $1F, $16, $01, $06
  68++EFCA                                      ; DB $1F, $14, $01, $03
  69++EFCA                                      ; DB $1F, $46, $02, $05
  70++EFCA                                      ; DB $1F, $35, $04, $08
  71++EFCA                                      ; DB $1F, $23, $06, $07
  72++EFCA                                      ; DB $1F, $24, $03, $05
  73++EFCA                                      ; DB $1F, $25, $05, $08
  74++EFCA                                      ; DB $1F, $23, $07, $08
  75++EFCA                                      ; DB $1F, $12, $03, $07
  76++EFCA
  77++EFCA 1F 10 00 0C                          DB $1F, $10, $00, $0C
  78++EFCE 1F 20 00 04                          DB $1F, $20, $00, $04
  79++EFD2 1F 30 04 08                          DB $1F, $30, $04, $08
  80++EFD6 1F 40 08 0C                          DB $1F, $40, $08, $0C
  81++EFDA 1F 51 0C 10                          DB $1F, $51, $0C, $10
  82++EFDE 1F 61 00 10                          DB $1F, $61, $00, $10
  83++EFE2 1F 62 00 14                          DB $1F, $62, $00, $14
  84++EFE6 1F 82 14 04                          DB $1F, $82, $14, $04
  85++EFEA 1F 83 04 18                          DB $1F, $83, $04, $18
  86++EFEE 1F 73 08 18                          DB $1F, $73, $08, $18
  87++EFF2 1F 74 08 1C                          DB $1F, $74, $08, $1C
  88++EFF6 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  89++EFFA 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  90++EFFE 1F DB 20 24                          DB $1F, $DB, $20, $24
  91++F002 1F DC 24 28                          DB $1F, $DC, $24, $28
  92++F006 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  93++F00A 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  94++F00E 1F A6 10 20                          DB $1F, $A6, $10, $20
  95++F012 1F B6 14 20                          DB $1F, $B6, $14, $20
  96++F016 1F B8 14 24                          DB $1F, $B8, $14, $24
  97++F01A 1F C8 18 24                          DB $1F, $C8, $18, $24
  98++F01E 1F C7 18 28                          DB $1F, $C7, $18, $28
  99++F022 1F 97 1C 28                          DB $1F, $97, $1C, $28
 100++F026 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
 101++F02A 1E 00 30 34                          DB $1E, $00, $30, $34
 102++F02E 1E 00 34 38                          DB $1E, $00, $34, $38
 103++F032 1E 00 38 3C                          DB $1E, $00, $38, $3C
 104++F036 1E 00 3C 30                          DB $1E, $00, $3C, $30
 105++F03A              CoriolisEdgesSize:      equ $ - CoriolisEdges
 106++F03A              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
 107++F03A              CoriolisNormals:	    ; DB $1F, $6B, $00, $00
 108++F03A                                      ; DB $5F, $00, $6B, $00
 109++F03A                                      ; DB $1F, $6B, $00, $00
 110++F03A                                      ; DB $9F, $6B, $00, $00
 111++F03A                                      ; DB $3F, $00, $00, $6B
 112++F03A                                      ; DB $1F, $00, $6B, $00
 113++F03A
 114++F03A 1F 00 00 A0                          DB $1F, $00, $00, $A0
 115++F03E 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
 116++F042 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
 117++F046 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
 118++F04A DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
 119++F04E 5F 00 A0 00                          DB $5F, $00, $A0, $00
 120++F052 1F A0 00 00                          DB $1F, $A0, $00, $00
 121++F056 9F A0 00 00                          DB $9F, $A0, $00, $00
 122++F05A 1F 00 A0 00                          DB $1F, $00, $A0, $00
 123++F05E FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
 124++F062 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
 125++F066 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
 126++F06A BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
 127++F06E 3F 00 00 A0                          DB $3F, $00, $00, $A0
 128++F072              CoriolisNormalsSize:    equ $ - CoriolisNormals
 129++F072              CoriolisLen:            equ $ - Coriolis
 130++F072
# file closed: ./Data/ships/Coriolis.asm
 103+ F072                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++F072 03           Cougar:	                DB $03                         ; Number of cargo canisters released when destroyed
   2++F073 24 13                                DW $1324                       ; Ship's targetable area LoHi
   3++F075 03 F1                                DW CougarEdges                 ; Edge Data
   4++F077 64                                   DB CougarEdgesSize             ; Size of Edge Data
   5++F078 00                                   DB $00                         ; Gun Vertex Byte offset
   6++F079 2A                                   DB $2A                         ; Explosion Count
   7++F07A 13                                   DB CougarVertSize /6           ; Vertex Count /6
   8++F07B 72                                   DB CougarVertSize              ; Vertex Count
   9++F07C 19                                   DB CougarEdgesCnt              ; Edges Count
  10++F07D 00 00                                DW $0000                       ; Bounty LoHi
  11++F07F 18                                   DB CougarNormalsSize           ; Face (Normal) Count
  12++F080 22                                   DB $22                         ; Range when it turns to a dot
  13++F081 FC                                   DB $FC                         ; Energy Max
  14++F082 28                                   DB $28                         ; Speed Max
  15++F083 67 F1                                DW CougarNormals               ; Normals
  16++F085 02                                   DB $02                         ; Q scaling
  17++F086 34                                   DB $30 | ShipMissiles4         ; Laser power and Nbr Missiles
  18++F087 91 F0                                DW CougarVertices              ; Verticles Address
  19++F089 00                                   DB ShipTypeNormal              ; Ship Type
  20++F08A 00                                   DB 0                           ; NewB Tactics
  21++F08B 80                                   DB ShipCanAnger                ; AI Flags
  22++F08C B0                                   DB $B0                         ; chance of ECM module
  23++F08D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F08E 00 00                                DW $0000                            ; no solid data
  25++F090 00                                   DB $00                              ; no solid data
  26++F091
  27++F091 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  27++F095 02 44
  28++F097 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  28++F09B 01 22
  29++F09D 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  29++F0A1 01 55
  30++F0A3 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  30++F0A7 04 55
  31++F0A9 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  31++F0AD 12 35
  32++F0AF 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  32++F0B3 23 44
  33++F0B5 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  33++F0B9 34 55
  34++F0BB 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  34++F0BF 01 11
  35++F0C1 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  35++F0C5 01 11
  36++F0C7 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  36++F0CB 34 44
  37++F0CD 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  37++F0D1 34 44
  38++F0D3 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  38++F0D7 00 44
  39++F0D9 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  39++F0DD 00 44
  40++F0DF 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  40++F0E3 00 00
  41++F0E5 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  41++F0E9 44 44
  42++F0EB 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  42++F0EF 55 55
  43++F0F1 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  43++F0F5 55 55
  44++F0F7 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  44++F0FB 55 55
  45++F0FD 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  45++F101 55 55
  46++F103              CougarVertSize:         equ $ - CougarVertices
  47++F103 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  48++F107 1F 01 04 1C                          DB $1F, $01, $04, $1C
  49++F10B 1F 01 1C 20                          DB $1F, $01, $1C, $20
  50++F10F 1F 01 20 08                          DB $1F, $01, $20, $08
  51++F113 1E 05 08 0C                          DB $1E, $05, $08, $0C
  52++F117 1E 45 0C 18                          DB $1E, $45, $0C, $18
  53++F11B 1E 15 08 10                          DB $1E, $15, $08, $10
  54++F11F 1E 35 10 18                          DB $1E, $35, $10, $18
  55++F123 1F 34 18 28                          DB $1F, $34, $18, $28
  56++F127 1F 34 28 24                          DB $1F, $34, $28, $24
  57++F12B 1F 34 24 14                          DB $1F, $34, $24, $14
  58++F12F 1F 24 14 00                          DB $1F, $24, $14, $00
  59++F133 1B 04 00 0C                          DB $1B, $04, $00, $0C
  60++F137 1B 12 04 10                          DB $1B, $12, $04, $10
  61++F13B 1B 23 14 10                          DB $1B, $23, $14, $10
  62++F13F 1A 01 04 08                          DB $1A, $01, $04, $08
  63++F143 1A 34 14 18                          DB $1A, $34, $14, $18
  64++F147 14 00 30 34                          DB $14, $00, $30, $34
  65++F14B 12 00 34 2C                          DB $12, $00, $34, $2C
  66++F14F 12 44 2C 38                          DB $12, $44, $2C, $38
  67++F153 14 44 38 30                          DB $14, $44, $38, $30
  68++F157 12 55 3C 40                          DB $12, $55, $3C, $40
  69++F15B 14 55 40 48                          DB $14, $55, $40, $48
  70++F15F 12 55 48 44                          DB $12, $55, $48, $44
  71++F163 14 55 44 3C                          DB $14, $55, $44, $3C
  72++F167              CougarEdgesSize:        equ $ - CougarEdges
  73++F167              CougarEdgesCnt:         equ CougarEdgesSize/4
  74++F167 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  75++F16B DF 10 2E 04                          DB $DF, $10, $2E, $04
  76++F16F 5F 00 1B 05                          DB $5F, $00, $1B, $05
  77++F173 5F 10 2E 04                          DB $5F, $10, $2E, $04
  78++F177 1F 10 2E 04                          DB $1F, $10, $2E, $04
  79++F17B 3E 00 00 A0                          DB $3E, $00, $00, $A0
  80++F17F              CougarNormalsSize:      equ $ - CougarNormals
  81++F17F              CougarLen:              equ $ - Cougar
  82++F17F
# file closed: ./Data/ships/Cougar.asm
 104+ F17F                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F17F 00           Dodo:	                DB $00                        ; Number of cargo canisters released when destroyed
   2++F180 90 7E                                DW $7E90                      ; Ship's targetable area LoHi
   3++F182 2E F2                                DW DodoEdges                  ; Edge Data
   4++F184 88                                   DB DodoEdgesSize              ; Size of Edge Data
   5++F185 00                                   DB $00                        ; Gun Vertex Byte offset
   6++F186 36                                   DB $36                        ; Explosion Count
   7++F187 18                                   DB DodoVertSize /6            ; Vertex Count /6
   8++F188 90                                   DB DodoVertSize               ; Vertex Count
   9++F189 22                                   DB DodoEdgesCnt               ; Edges Count
  10++F18A 00 00                                DW $0000                      ; Bounty LoHi
  11++F18C 30                                   DB DodoNormalsSize            ; Face (Normal) Count
  12++F18D 7D                                   DB $7D                        ; Range when it turns to a dot
  13++F18E F0                                   DB $F0                        ; Energy Max
  14++F18F 00                                   DB $00                        ; Speed Max
  15++F190 B6 F2                                DW DodoNormals                ; Normals
  16++F192 00                                   DB $00                        ; Q scaling
  17++F193 00                                   DB $00                        ; Laser power and Nbr Missiles
  18++F194 9E F1                                DW DodoVertices               ; Verticles Address
  19++F196 02                                   DB ShipTypeStation            ; Ship Type
  20++F197 00                                   DB 0                          ; NewB Tactics
  21++F198 00                                   DB 0                          ; AI Flags
  22++F199 FF                                   DB $FF                        ; chance of ECM module
  23++F19A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F19B 00 00                                DW $0000                            ; no solid data
  25++F19D 00                                   DB $00                              ; no solid data
  26++F19E
  27++F19E 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  27++F1A2 01 55
  28++F1A4 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  28++F1A8 01 22
  29++F1AA 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  29++F1AE 02 33
  30++F1B0 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  30++F1B4 03 44
  31++F1B6 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  31++F1BA 04 55
  32++F1BC 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  32++F1C0 15 66
  33++F1C2 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  33++F1C6 12 77
  34++F1C8 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  34++F1CC 23 88
  35++F1CE 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  35++F1D2 34 99
  36++F1D4 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  36++F1D8 45 AA
  37++F1DA 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  37++F1DE 16 77
  38++F1E0 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  38++F1E4 27 88
  39++F1E6 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  39++F1EA 38 99
  40++F1EC E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  40++F1F0 49 AA
  41++F1F2 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  41++F1F6 56 AA
  42++F1F8 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  42++F1FC 67 BB
  43++F1FE 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  43++F202 78 BB
  44++F204 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  44++F208 89 BB
  45++F20A 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  45++F20E 9A BB
  46++F210 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  46++F214 6A BB
  47++F216 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  47++F21A 00 00
  48++F21C 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  48++F220 00 00
  49++F222 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  49++F226 00 00
  50++F228 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  50++F22C 00 00
  51++F22E              DodoVertSize:           equ $ - DodoVertices
  52++F22E 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  53++F232 1F 02 04 08                          DB $1F, $02, $04, $08
  54++F236 1F 03 08 0C                          DB $1F, $03, $08, $0C
  55++F23A 1F 04 0C 10                          DB $1F, $04, $0C, $10
  56++F23E 1F 05 10 00                          DB $1F, $05, $10, $00
  57++F242 1F 16 14 28                          DB $1F, $16, $14, $28
  58++F246 1F 17 28 18                          DB $1F, $17, $28, $18
  59++F24A 1F 27 18 2C                          DB $1F, $27, $18, $2C
  60++F24E 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  61++F252 1F 38 1C 30                          DB $1F, $38, $1C, $30
  62++F256 1F 39 30 20                          DB $1F, $39, $30, $20
  63++F25A 1F 49 20 34                          DB $1F, $49, $20, $34
  64++F25E 1F 4A 34 24                          DB $1F, $4A, $34, $24
  65++F262 1F 5A 24 38                          DB $1F, $5A, $24, $38
  66++F266 1F 56 38 14                          DB $1F, $56, $38, $14
  67++F26A 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  68++F26E 1F 8B 40 44                          DB $1F, $8B, $40, $44
  69++F272 1F 9B 44 48                          DB $1F, $9B, $44, $48
  70++F276 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  71++F27A 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  72++F27E 1F 15 00 14                          DB $1F, $15, $00, $14
  73++F282 1F 12 04 18                          DB $1F, $12, $04, $18
  74++F286 1F 23 08 1C                          DB $1F, $23, $08, $1C
  75++F28A 1F 34 0C 20                          DB $1F, $34, $0C, $20
  76++F28E 1F 45 10 24                          DB $1F, $45, $10, $24
  77++F292 1F 67 28 3C                          DB $1F, $67, $28, $3C
  78++F296 1F 78 2C 40                          DB $1F, $78, $2C, $40
  79++F29A 1F 89 30 44                          DB $1F, $89, $30, $44
  80++F29E 1F 9A 34 48                          DB $1F, $9A, $34, $48
  81++F2A2 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  82++F2A6 1E 00 50 54                          DB $1E, $00, $50, $54
  83++F2AA 14 00 54 5C                          DB $14, $00, $54, $5C
  84++F2AE 17 00 5C 58                          DB $17, $00, $5C, $58
  85++F2B2 14 00 58 50                          DB $14, $00, $58, $50
  86++F2B6              DodoEdgesSize:          equ $ - DodoEdges
  87++F2B6              DodoEdgesCnt:           equ DodoEdgesSize/4
  88++F2B6 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  89++F2BA 1F 67 8E 58                          DB $1F, $67, $8E, $58
  90++F2BE 5F A9 37 59                          DB $5F, $A9, $37, $59
  91++F2C2 5F 00 B0 58                          DB $5F, $00, $B0, $58
  92++F2C6 DF A9 37 59                          DB $DF, $A9, $37, $59
  93++F2CA 9F 67 8E 58                          DB $9F, $67, $8E, $58
  94++F2CE 3F 00 B0 58                          DB $3F, $00, $B0, $58
  95++F2D2 3F A9 37 59                          DB $3F, $A9, $37, $59
  96++F2D6 7F 67 8E 58                          DB $7F, $67, $8E, $58
  97++F2DA FF 67 8E 58                          DB $FF, $67, $8E, $58
  98++F2DE BF A9 37 59                          DB $BF, $A9, $37, $59
  99++F2E2 3F 00 00 C4                          DB $3F, $00, $00, $C4
 100++F2E6              DodoNormalsSize:        equ $ - DodoNormals
 101++F2E6              DodoLen:                equ $ - Dodo
 102++F2E6
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1445  F2E6                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
1446  F2E6              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
1447  F2E6                  SLOT    DispMarketAddr
1448  F2E6                  PAGE    BankDispMarket
1449  F2E6                  ORG     DispMarketAddr
1450  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 C2 8D  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 8E 8E  						DW $0220,name_expanded
   4+ C018 80 0B 10 88  						DW $0B80,WordUnit
   5+ C01C B0 0B 59 8A  						DW $0BB0,WordQuantity
   6+ C020 08 13 37 8A  						DW $1308,WordProduct
   7+ C024 60 13 3F 8A  						DW $1360,WordUoM
   8+ C028 80 13 43 8A  						DW $1380,WordPrice
   9+ C02C B0 13 67 8A  						DW $13B0,WordStock
  10+ C030 E0 13 63 8A  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D                                                  DISPLAY "TODO: optimse"
 135+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 136+ C19E 13                                   inc		de						; with just an inc De
 137+ C19F 0E FF                                ld	c,-1
 138+ C1A1 18 D9                                jr		MPD_Num1
 139+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 140+ C1A5 3C           .NumLeadBlank2:	        inc	a
 141+ C1A6 09                                   add	hl,bc
 142+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 143+ C1A9 FE 30                                cp	'0'
 144+ C1AB 20 02                                jr	nz,.DontBlank
 145+ C1AD 3E 20        .Blank:                 ld	a,' '
 146+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 147+ C1B1 12                                   ld	(de),a
 148+ C1B2 13                                   inc	de
 149+ C1B3 C9                                   ret
 150+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 152+ C1B6 28 30                                jr	z,.NoStock
 153+ C1B8 26 00                                ld h,0
 154+ C1BA 6F                                   ld l,a
 155+ C1BB 01 9C FF                             ld	bc,-100
 156+ C1BE CD D7 C1                             call	.NumLeadBlank1
 157+ C1C1 FE 20        .WasLead0:              cp      ' '
 158+ C1C3 20 09                                jr      nz,.NotHundredsZero
 159+ C1C5 0E F6                                ld	c,-10
 160+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 161+ C1CA 0E FF                                ld	c,-1
 162+ C1CC 18 AE                                jr		MPD_Num1
 163+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 164+ C1D0 CD 7C C1                             call	MPD_Num1
 165+ C1D3 0E FF                                ld	c,-1
 166+ C1D5 18 A5                                jr		MPD_Num1
 167+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 168+ C1D9 3C           .NumLeadBlank2:	        inc	a
 169+ C1DA 09                                   add	hl,bc
 170+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 171+ C1DD FE 30                                cp	'0'
 172+ C1DF 20 02                                jr	nz,.DontBlank
 173+ C1E1 3E 20        .Blank:                 ld	a,' '
 174+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 175+ C1E5 12                                   ld	(de),a
 176+ C1E6 13                                   inc	de
 177+ C1E7 C9                                   ret
 178+ C1E8 3E 20        .NoStock:               ld	a,' '
 179+ C1EA 12                                   ld	(de),a
 180+ C1EB 13                                   inc	de
 181+ C1EC 12                                   ld	(de),a
 182+ C1ED 13                                   inc	de
 183+ C1EE 3E 2D                                ld	a,'-'
 184+ C1F0 12                                   ld	(de),a
 185+ C1F1 13                                   inc de
 186+ C1F2 C9                                   ret
 187+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 188+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C1F4 4E                                   ld			c,(hl)		; Get Row into b
   5++C1F5 23                                   inc			hl
   6++C1F6 46                                   ld			b,(hl)		; Get Col into b
   7++C1F7 23                                   inc			hl
   8++C1F8 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C1F9 23                                   inc			hl
  10++C1FA 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C1FB 23                                   inc			hl
  12++C1FC E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C1FD EB                                   ex			de,hl		; now hl = address of text data
  14++C1FE 1E FF                                ld			e,txt_status_colour
  15++C200 C5                                   push		bc
  16++C201 D1                                   pop			de
  17++C202                                      MMUSelectLayer1
  17++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C206 CD D7 E0                             call		l1_print_at
  19++C209 E1                                   pop			hl
  20++C20A C1                                   pop			bc
  21++C20B 10 E6                                djnz		.BoilerTextLoop
  22++C20D C9                                   ret
  23++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 189+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 190+ C20E 2A E3 83     mktdisp_GetCash:            ld		hl,(Cash+2)
 191+ C211 EB                                   ex      de,hl
 192+ C212 DD 2A E1 83                          ld      ix,(Cash)
 193+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 194+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 195+ C21D FD E5                                push    IY
 196+ C21F D1                                   pop     de
 197+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 198+ C223 01 0B 00                             ld      bc,11
 199+ C226 ED B0                                ldir
 200+ C228 C9                                   ret
 201+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 202+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 203+ C22C DD 21 00 00                          ld      ix,0
 204+ C230 3A E7 83                             ld      a,(CargoRunningLoad)
 205+ C233 DD 6F                                ld      ixl,a
 206+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 207+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 208+ C23C FD E5                                push    IY
 209+ C23E D1                                   pop     de
 210+ C23F 13                                   inc     de
 211+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 212+ C243 01 0B 00                             ld      bc,11
 213+ C246 ED B0                                ldir
 214+ C248 C9                                   ret
 215+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 217+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 218+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 219+ C252                                      MMUSelectLayer1
 219+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 220+ C256 CD D7 E0                             call	l1_print_at
 221+ C259 C9                                   ret
 222+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 223+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 224+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 225+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 226+ C263                                      MMUSelectLayer1
 226+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 227+ C267 CD D7 E0                             call	l1_print_at
 228+ C26A C9                                   ret
 229+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 230+ C26B              ; "A = stock item number"
 231+ C26B F5           PrintMktDispItem:       push     af
 232+ C26C 21 08 20                             ld      hl,mktdisp_position
 233+ C26F 57                                   ld      d,a
 234+ C270 1E 08                                ld      e,8
 235+ C272 ED 30                                mul
 236+ C274 53                                   ld      d,e
 237+ C275 1E 00                                ld      e,0
 238+ C277 19                                   add     hl,de
 239+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 240+ C27B EB                                   ex      hl,de
 241+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 242+ C27F                                      MMUSelectLayer1
 242+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C283 CD D7 E0                             call	l1_print_at
 244+ C286 F1                                   pop     af
 245+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 246+ C28B FD 21 E8 83                          ld      iy,CargoTonnes
 247+ C28F 1E 08                                ld		e,8
 248+ C291 57                                   ld		d,a
 249+ C292 ED 30                                mul
 250+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 251+ C296 16 00                                ld      d,0
 252+ C298 5F                                   ld      e,a
 253+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 254+ C29B              .GetName:               MMUSelectStockTable
 254+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 255+ C29F DD 7E 00                             ld		a,(ix+0)
 256+ C2A2 21 0E 8C                             ld		hl,WordIdx
 257+ C2A5 CD 69 87                             call	getTableText
 258+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 259+ C2AC                                      MMUSelectLayer1
 259+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 260+ C2B0 CD D7 E0                             call	l1_print_at
 261+ C2B3              .GetUom                 MMUSelectStockTable
 261+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 262+ C2B7 DD 7E 07                             ld		a,(ix+7)
 263+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 264+ C2BC 21 0E 8C                             ld		hl,WordIdx
 265+ C2BF CD 69 87                             call	getTableText
 266+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 267+ C2C6 1E 68                                ld		e,mktdisp_uom
 268+ C2C8                                      MMUSelectLayer1
 268+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 269+ C2CC CD D7 E0                             call	l1_print_at
 270+ C2CF              .GetPrice:              MMUSelectStockTable
 270+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2D3 DD 7E 02                             ld		a,(ix+2)
 272+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 273+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 274+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 275+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 276+ C2E3 1E 88                                ld		e,mktdisp_price
 277+ C2E5                                      MMUSelectLayer1
 277+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 278+ C2E9 CD D7 E0                             call	l1_print_at
 279+ C2EC              .GetQty:                MMUSelectStockTable
 279+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 280+ C2F0 DD 7E 01                             ld		a,(ix+1)
 281+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 282+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 283+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 284+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 285+ C300 1E B0                                ld		e,mktdisp_Quantity
 286+ C302                                      MMUSelectLayer1
 286+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 287+ C306 CD D7 E0                             call	l1_print_at
 288+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 289+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 290+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 291+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 292+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 293+ C319 1E E0                                ld      e,mktdisp_Cargo
 294+ C31B                                      MMUSelectLayer1
 294+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 295+ C31F CD D7 E0                             call	l1_print_at
 296+ C322 C9                                   ret
 297+ C323
 298+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 298+ C323             >                            MMUSelectLayer1
 298+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 298+ C327 CD 8F E0    >                            call	l1_cls
 298+ C32A 3E 07       >                            ld		a,7
 298+ C32C CD AA E0    >                            call	l1_attr_cls_to_a
 298+ C32F             >                            MMUSelectLayer2
 298+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 298+ C333 CD 0A E0    >                            call    asm_l2_double_buffer_off
 298+ C336 CD 0E E2    >                            call	l2_cls	; Get some space
 298+ C339             >                            MMUSelectSpriteBank
 298+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 298+ C33D CD 6E E5    >                            call    sprite_cls_cursors
 299+ C340 3E 20                                ld      a,$20
 300+ C342 32 97 7E                             ld      (MenuIdMax),a
 301+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 302+ C348 11 FD BE                             ld		de,$BEFD
 303+ C34B 3E C0                                ld		a,$C0
 304+ C34D                                      MMUSelectLayer2
 304+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ C351 CD F9 E3                             call	l2_draw_box
 306+ C354 01 01 0A                             ld		bc,$0A01
 307+ C357 11 C0 FE                             ld		de,$FEC0
 308+ C35A CD 84 E4                             call	l2_draw_horz_line
 309+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 310+ C360 11 C0 50                             ld		de,$50C0
 311+ C363 CD 84 E4                             call	l2_draw_horz_line
 312+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 313+ C369 11 C0 18                             ld		de,$18C0
 314+ C36C CD 84 E4                             call	l2_draw_horz_line
 315+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 316+ C372 11 C0 28                             ld		de,$28C0
 317+ C375 CD 84 E4                             call	l2_draw_horz_line
 318+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 319+ C37B 11 C0 28                             ld		de,$28C0
 320+ C37E CD 84 E4                             call	l2_draw_horz_line
 321+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 322+ C384 11 C0 18                             ld		de,$18C0
 323+ C387 CD 84 E4                             call	l2_draw_horz_line
 324+ C38A 3A 19 7F     .StaticText:	        ld      a,(Galaxy)
 325+ C38D                                      MMUSelectGalaxyA
 325+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 326+ C390 3E 19                                ld		a,25
 327+ C392 CD 09 8E                             call	expandTokenToString
 328+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 329+ C398 06 09                                ld		b,9
 330+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 331+ C39D CD F3 C1                             call	MPD_print_boiler_text
 332+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 333+ C3A2 21 08 20                             ld		hl,mktdisp_position
 334+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 335+ C3A8 F5           .MarketLoop:	        push	af
 336+ C3A9 CD 6B C2                             call	PrintMktDispItem
 337+ C3AC F1                                   pop		af
 338+ C3AD 3C                                   inc		a
 339+ C3AE FE 11                                cp		17
 340+ C3B0 20 F6                                jr		nz,.MarketLoop
 341+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 342+ C3B5 11 10 A8                             ld      de,$A810
 343+ C3B8                                      MMUSelectLayer1
 343+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 344+ C3BC CD D7 E0                             call	l1_print_at
 345+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 346+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 347+ C3C5 11 10 B0                             ld      de,$B010
 348+ C3C8                                      MMUSelectLayer1
 348+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 349+ C3CC CD D7 E0                             call	l1_print_at
 350+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 351+ C3D2 C9                                   ret
 352+ C3D3
 353+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1451  C3D3                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
1452  C3D3              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1453  C3D3                  SLOT    ShipModelsAddr
1454  C3D3                  PAGE    BankShipModels2
1455  C3D3              	ORG     ShipModelsAddr, BankShipModels2
1456  E000
1457  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1458  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1458  E00F 06 00       >                        ld      b,0
1458  E011 4F          >                        ld      c,a                                 ; c= original ship id
1458  E012 CB 3F       >.ShiftLoop:             srl     a
1458  E014 CB 3F       >                        srl     a
1458  E016 CB 3F       >                        srl     a
1458  E018 CB 3F       >                        srl     a                                   ; divide by 16
1458  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1458  E01B 79          >                        ld      a,c
1458  E01C 50          >                        ld      d,b
1458  E01D 1E 10       >                        ld      e,16
1458  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1458  E021 93          >                        sub     e                                   ; a= actual model id now
1458  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1458  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1458  E024 7A          >                        ld      a,d                                 ; a = bank number
1458  E025             >;.. Now b = bank and a = adjusted ship nbr
1458  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1458  E028 ED 31       >                        add     hl,a
1458  E02A ED 31       >                        add     hl,a
1458  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1458  E02D             >                        ClearCarryFlag
1458  E02D B7          >                        or a
1458  E02E C9          >                        ret
1459  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1459  E02F 2A 0B C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1459  E032 11 11 C4    >                        ld          de,UBnkHullVerticies
1459  E035 06 00       >                        ld          b,0
1459  E037 3A FF C3    >                        ld			a,(VertexCtX6Addr)
1459  E03A 4F          >                        ld          c,a
1459  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1459  E03C CD 4C 7D    >                        call        memcopy_dma
1459  E03F C9          >                        ret
1460  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1460  E040 2A F9 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1460  E043 11 01 C5    >                        ld          de,UBnkHullEdges
1460  E046 06 00       >                        ld          b,0
1460  E048 3A FB C3    >                        ld			a,(LineX4Addr)
1460  E04B 4F          >                        ld          c,a
1460  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1460  E04D CD 4C 7D    >                        call        memcopy_dma
1460  E050 C9          >                        ret
1461  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1461  E051 2A 07 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1461  E054 11 C9 C5    >                        ld          de,UBnkHullNormals
1461  E057 06 00       >                        ld          b,0
1461  E059 3A 03 C4    >                        ld          a,(FaceCtX4Addr)
1461  E05C 4F          >                        ld          c,a
1461  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1461  E05E CD 4C 7D    >                        call        memcopy_dma
1461  E061 C9          >                        ret
1462  E062              ShipBankTable2:         MShipBankTable
1462  E062 3B 00       >                        DW      BankShipModels1
1462  E064 43 00       >                        DW      BankShipModels2
1462  E066 44 00       >                        DW      BankShipModels3
1462  E068 45 00       >                        DW      BankShipModels4
1463  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1463  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
1463  E06D 36 43       >                        ld          (hl),BankShipModels2
1463  E06F F5          >                        push        af
1463  E070 FD 7D       >                        ld          a,iyl
1463  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
1463  E075 F1          >                        pop         af
1463  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
1463  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1463  E07C ED 31       >                        add         hl,a
1463  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1463  E080 4E          >                        ld          c,(hl)
1463  E081 23          >                        inc         hl
1463  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1463  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1463  E086 ED 31       >                        add         hl,a
1463  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1463  E08A 7E          >                        ld          a,(hl)
1463  E08B 23          >                        inc         hl
1463  E08C 66          >                        ld          h,(hl)
1463  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1463  E08E 11 F6 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1463  E091 01 1B 00    >                        ld          bc,ShipDataLength
1463  E094 ED B0       >                        ldir
1463  E096 CD 2F E0    >                        call        CopyVertsToUniv
1463  E099 CD 40 E0    >                        call        CopyEdgesToUniv
1463  E09C CD 51 E0    >                        call        CopyNormsToUniv
1463  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
1463  E0A2 3E 20       >                        ld          a," "
1463  E0A4 06 10       >                        ld          b,16
1463  E0A6 77          >.fillLoop:              ld          (hl),a
1463  E0A7 23          >                        inc         hl
1463  E0A8 10 FC       >                        djnz        .fillLoop
1463  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
1463  E0AD CD F5 8D    >                        call        ShipIndexToAddress
1463  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
1463  E0B3 06 10       >                        ld          b,16
1463  E0B5 7E          >.CopyLoop:              ld          a,(hl)
1463  E0B6 FE 00       >                        cp          0
1463  E0B8 28 05       >                        jr          z,.CopyDone
1463  E0BA 12          >                        ld          (de),a
1463  E0BB 23          >                        inc         hl
1463  E0BC 13          >                        inc         de
1463  E0BD 10 F6       >                        djnz        .CopyLoop
1463  E0BF C9          >.CopyDone:              ret
1464  E0C0              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1464  E0C0 3E 0D       >                        ld          a,13
1464  E0C2 CD 6A E0    >                        call        CopyShipToUniverse2
1464  E0C5 C9          >                        ret
1465  E0C6
1466  E0C6                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E0C6 66 E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0C8 47 E2                                 DW Escape_Pod                              ;17  $11
   3+ E0CA A6 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0CC CB E3                                 DW Gecko                                   ;19  $13
   5+ E0CE 9A E4                                 DW Ghavial                                 ;20  $14
   6+ E0D0 89 E5                                 DW Iguana                                  ;21  $15
   7+ E0D2 86 E6                                 DW Krait                                   ;22  $16
   8+ E0D4 77 E7                                 DW Logo                                    ;23  $17
   9+ E0D6 3A E9                                 DW Mamba                                   ;24  $18
  10+ E0D8 73 EA                                 DW Missile                                 ;25  $19
  11+ E0DA 7C EB                                 DW Monitor                                 ;26  $1A
  12+ E0DC 89 EC                                 DW Moray                                   ;27  $1B
  13+ E0DE 6C ED                                 DW Ophidian                                ;28  $1C
  14+ E0E0 AB EE                                 DW Plate                                   ;29  $1D
  15+ E0E2 F0 EE                                 DW Python                                  ;30  $1E
  16+ E0E4 ED EF                                 DW Python_P                                ;31  $1F
  17+ E0E6 85 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0E8 66 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0EA C5 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0EC EA E3                                 DW GeckoVertices                           ;19  $13
  21+ E0EE B9 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0F0 A8 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0F2 A5 E6                                 DW KraitVertices                           ;22  $16
  24+ E0F4 96 E7                                 DW LogoVertices                            ;23  $17
  25+ E0F6 59 E9                                 DW MambaVertices                           ;24  $18
  26+ E0F8 92 EA                                 DW MissileVertices                         ;25  $19
  27+ E0FA 9B EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0FC A8 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0FE 8B ED                                 DW OphidianVertices                        ;28  $1C
  30+ E100 CA EE                                 DW PlateVertices                           ;29  $1D
  31+ E102 0F EF                                 DW PythonVertices                          ;30  $1E
  32+ E104 0C F0                                 DW Python_PVertices                        ;31  $1F
  33+ E106 BB E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E108 7E E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E10A 37 E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E10C 32 E4                                 DW GeckoEdges                              ;19  $13
  37+ E10E 01 E5                                 DW GhavialEdges                            ;20  $14
  38+ E110 02 E6                                 DW IguanaEdges                             ;21  $15
  39+ E112 0B E7                                 DW KraitEdges                              ;22  $16
  40+ E114 92 E8                                 DW LogoEdges                               ;23  $17
  41+ E116 EF E9                                 DW MambaEdges                              ;24  $18
  42+ E118 F8 EA                                 DW MissileEdges                            ;25  $19
  43+ E11A 01 EC                                 DW MonitorEdges                            ;26  $1A
  44+ E11C FC EC                                 DW MorayEdges                              ;27  $1B
  45+ E11E 03 EE                                 DW OphidianEdges                           ;28  $1C
  46+ E120 DC EE                                 DW PlateEdges                              ;29  $1D
  47+ E122 51 EF                                 DW PythonEdges                             ;30  $1E
  48+ E124 4E F0                                 DW Python_PEdges                           ;31  $1F
  49+ E126 0F E2        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E128 96 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E12A A3 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E12C 76 E4                                 DW GeckoNormals                            ;19  $13
  53+ E12E 59 E5                                 DW GhavialNormals                          ;20  $14
  54+ E130 5E E6                                 DW IguanaNormals                           ;21  $15
  55+ E132 5F E7                                 DW KraitNormals                            ;22  $16
  56+ E134 26 E9                                 DW LogoNormals                             ;23  $17
  57+ E136 5F EA                                 DW MambaNormals                            ;24  $18
  58+ E138 58 EB                                 DW MissileNormals                          ;25  $19
  59+ E13A 5D EC                                 DW MonitorNormals                          ;26  $1A
  60+ E13C 48 ED                                 DW MorayNormals                            ;27  $1B
  61+ E13E 7B EE                                 DW OphidianNormals                         ;28  $1C
  62+ E140 EC EE                                 DW PlateNormals                            ;29  $1D
  63+ E142 B9 EF                                 DW PythonNormals                           ;30  $1E
  64+ E144 B6 F0                                 DW Python_PNormals                         ;31  $1F
  65+ E146 E1 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E148 5F 00                                 DW Escape_PodLen                           ;17  $11
  67+ E14A 25 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E14C CF 00                                 DW GeckoLen                                ;19  $13
  69+ E14E EF 00                                 DW GhavialLen                              ;20  $14
  70+ E150 FD 00                                 DW IguanaLen                               ;21  $15
  71+ E152 F1 00                                 DW KraitLen                                ;22  $16
  72+ E154 C3 01                                 DW LogoLen                                 ;23  $17
  73+ E156 39 01                                 DW MambaLen                                ;24  $18
  74+ E158 09 01                                 DW MissileLen                              ;25  $19
  75+ E15A 0D 01                                 DW MonitorLen                              ;26  $1A
  76+ E15C E3 00                                 DW MorayLen                                ;27  $1B
  77+ E15E 3F 01                                 DW OphidianLen                             ;28  $1C
  78+ E160 45 00                                 DW PlateLen                                ;29  $1D
  79+ E162 FD 00                                 DW PythonLen                               ;30  $1E
  80+ E164 FD 00                                 DW Python_PLen                             ;31  $1F
  81+ E166
  82+ E166                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E166 00           Dragon:	                DB $00                                                    ; Number of cargo canisters released when destroyed
   2++E167 66 50                                DW $5066                                                  ; Ship's targetable area LoHi
   3++E169 BB E1                                DW DragonEdges                                            ; Edge Data
   4++E16B 54                                   DB DragonEdgesSize                                        ; Size of Edge Data
   5++E16C 00                                   DB $00                                                    ; Gun Vertex Byte offset
   6++E16D 3C                                   db $3C                                                    ; Explosion Count
   7++E16E 09                                   DB DragonVertSize /6                                      ; Vertex Count /6
   8++E16F 36                                   DB DragonVertSize                                         ; Vertex Count
   9++E170 15                                   DB DragonEdgesCnt                                         ; Edges Count
  10++E171 00 00                                DW $0000                                                  ; Bounty LoHi
  11++E173 38                                   DB DragonNormalsSize                                      ; Face (Normal) Count
  12++E174 20                                   DB $20                                                    ; Range when it turns to a dot
  13++E175 F7                                   DB $F7                                                    ; Energy Max
  14++E176 14                                   DB $14                                                    ; Speed Max
  15++E177 0F E2                                DW DragonNormals                                          ; Normals
  16++E179 00                                   DB $00                                                    ; Q scaling
  17++E17A 47                                   DB $40 | ShipMissiles7                                    ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW DragonVertices                                         ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                                         ; Ship Type
  20++E17E 00                                   DB 0                                                      ; NewB Tactics
  21++E17F A0                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterWorm   ; AI Flags
  22++E180 B0                                   DB $B0                                                    ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  27++E189 6B 05
  28++E18B D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  28++E18F 67 01
  29++E191 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  29++E195 78 12
  30++E197 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  30++E19B CD 23
  31++E19D 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  31++E1A1 CD 89
  32++E1A3 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  32++E1A7 9A 34
  33++E1A9 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  33++E1AD AB 45
  34++E1AF 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  34++E1B3 FF FF
  35++E1B5 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  35++E1B9 FF FF
  36++E1BB              DragonVertSize:         equ $ - DragonVertices
  37++E1BB 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  38++E1BF 1F 12 08 1C                          DB $1F, $12, $08, $1C
  39++E1C3 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  40++E1C7 1F 34 14 1C                          DB $1F, $34, $14, $1C
  41++E1CB 1F 45 18 1C                          DB $1F, $45, $18, $1C
  42++E1CF 1F 50 00 1C                          DB $1F, $50, $00, $1C
  43++E1D3 1F 67 04 20                          DB $1F, $67, $04, $20
  44++E1D7 1F 78 08 20                          DB $1F, $78, $08, $20
  45++E1DB 1F 89 10 20                          DB $1F, $89, $10, $20
  46++E1DF 1F 9A 14 20                          DB $1F, $9A, $14, $20
  47++E1E3 1F AB 18 20                          DB $1F, $AB, $18, $20
  48++E1E7 1F B6 00 20                          DB $1F, $B6, $00, $20
  49++E1EB 1F 06 00 04                          DB $1F, $06, $00, $04
  50++E1EF 1F 17 04 08                          DB $1F, $17, $04, $08
  51++E1F3 1F 4A 14 18                          DB $1F, $4A, $14, $18
  52++E1F7 1F 5B 00 18                          DB $1F, $5B, $00, $18
  53++E1FB 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  54++E1FF 1F 8C 08 10                          DB $1F, $8C, $08, $10
  55++E203 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  56++E207 1F 9D 10 14                          DB $1F, $9D, $10, $14
  57++E20B 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  58++E20F              DragonEdgesSize:        equ $ - DragonEdges
  59++E20F              DragonEdgesCnt:         equ DragonEdgesSize/4
  60++E20F 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  61++E213 1F 21 5A 00                          DB $1F, $21, $5A, $00
  62++E217 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  63++E21B BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  64++E21F 9F 21 5A 00                          DB $9F, $21, $5A, $00
  65++E223 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  66++E227 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  67++E22B 5F 21 5A 00                          DB $5F, $21, $5A, $00
  68++E22F 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  69++E233 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  70++E237 DF 21 5A 00                          DB $DF, $21, $5A, $00
  71++E23B DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  72++E23F 3F 30 00 52                          DB $3F, $30, $00, $52
  73++E243 BF 30 00 52                          DB $BF, $30, $00, $52
  74++E247              DragonNormalsSize:      equ $ - DragonNormals
  75++E247              DragonLen:              equ $ - Dragon
  76++E247
# file closed: ./Data/ships/Dragon.asm
  83+ E247                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E247 20           Escape_Pod:             DB $20                          ; Number of cargo canisters released when destroyed
   2++E248 00 01                                DW $0100                        ; Ship's targetable area LoHi
   3++E24A 7E E2                                DW Escape_PodEdges              ; Edge Data
   4++E24C 18                                   DB Escape_PodEdgesSize          ; Size of Edge Data
   5++E24D 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E24E 16                                   DB $16                          ; Explosion Count
   7++E24F 04                                   DB Escape_PodVertSize /6        ; Vertex Count /6
   8++E250 18                                   DB Escape_PodVertSize           ; Vertex Count
   9++E251 06                                   DB Escape_PodEdgesCnt           ; Edges Count
  10++E252 00 00                                DW $0000                        ; Bounty LoHi
  11++E254 10                                   DB Escape_PodNormalsSize        ; Face (Normal) Count
  12++E255 08                                   DB $08                          ; Range when it turns to a dot
  13++E256 11                                   DB $11                          ; Energy Max
  14++E257 08                                   DB $08                          ; Speed Max
  15++E258 96 E2                                DW Escape_PodNormals            ; Normals
  16++E25A 04                                   DB $04                          ; Q scaling
  17++E25B 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E25C 66 E2                                DW Escape_PodVertices           ; Verticles Address
  19++E25E 00                                   DB 0                            ; Ship Type
  20++E25F 00                                   DB 0                            ; NewB Tactics
  21++E260 00                                   DB 0                            ; AI Flags
  22++E261 FF                                   DB $FF                          ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  27++E26A 12 33
  28++E26C 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  28++E270 02 33
  29++E272 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  29++E276 01 33
  30++E278 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  30++E27C 01 22
  31++E27E              Escape_PodVertSize:     equ $ - Escape_PodVertices
  32++E27E 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  33++E282 1F 03 04 08                          DB $1F, $03, $04, $08
  34++E286 1F 01 08 0C                          DB $1F, $01, $08, $0C
  35++E28A 1F 12 0C 00                          DB $1F, $12, $0C, $00
  36++E28E 1F 13 00 08                          DB $1F, $13, $00, $08
  37++E292 1F 02 0C 04                          DB $1F, $02, $0C, $04
  38++E296              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  39++E296              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  40++E296 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  41++E29A 1F 27 67 1E                          DB $1F, $27, $67, $1E
  42++E29E 5F 27 67 1E                          DB $5F, $27, $67, $1E
  43++E2A2 9F 70 00 00                          DB $9F, $70, $00, $00
  44++E2A6              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  45++E2A6              Escape_PodLen:          equ $ - Escape_Pod
  46++E2A6
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E2A6                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E2A6 00           Fer_De_Lance:	        DB $00                          ; Number of cargo canisters released when destroyed
   2++E2A7 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E2A9 37 E3                                DW Fer_De_LanceEdges            ; Edge Data
   4++E2AB 6C                                   DB Fer_De_LanceEdgesSize        ; Size of Edge Data
   5++E2AC 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E2AD 1A                                   DB $1A                          ; Explosion Count
   7++E2AE 13                                   DB Fer_De_LanceVertSize /6      ; Vertex Count /6
   8++E2AF 72                                   DB Fer_De_LanceVertSize         ; Vertex Count
   9++E2B0 1B                                   DB Fer_De_LanceEdgesCnt         ; Edges Count
  10++E2B1 00 00                                DW $0000                        ; Bounty LoHi
  11++E2B3 28                                   DB Fer_De_LanceNormalsSize      ; Face (Normal) Count
  12++E2B4 28                                   DB $28                          ; Range when it turns to a dot
  13++E2B5 A0                                   DB $A0                          ; Energy Max
  14++E2B6 1E                                   DB $1E                          ; Speed Max
  15++E2B7 A3 E3                                DW Fer_De_LanceNormals          ; Normals
  16++E2B9 01                                   DB $01                          ; Q scaling
  17++E2BA 17                                   DB $10 | ShipMissiles7          ; Laser power and Nbr Missiles
  18++E2BB C5 E2                                DW Fer_De_LanceVertices         ; Verticles Address
  19++E2BD 00                                   DB ShipTypeNormal               ; Ship Type
  20++E2BE 00                                   DB 0                            ; NewB Tactics
  21++E2BF 80                                   DB ShipCanAnger                 ; AI Flags
  22++E2C0 FF                                   DB $FF                          ; chance of ECM module
  23++E2C1 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2C2 00 00                                DW $0000                            ; no solid data
  25++E2C4 00                                   DB $00                              ; no solid data
  26++E2C5
  27++E2C5 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  27++E2C9 01 59
  28++E2CB 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  28++E2CF 12 99
  29++E2D1 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  29++E2D5 23 99
  30++E2D7 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  30++E2DB 34 99
  31++E2DD 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  31++E2E1 45 99
  32++E2E3 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  32++E2E7 01 26
  33++E2E9 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  33++E2ED 23 67
  34++E2EF 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  34++E2F3 34 78
  35++E2F5 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  35++E2F9 04 58
  36++E2FB 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  36++E2FF 06 78
  37++E301 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  37++E305 00 00
  38++E307 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  38++E30B 00 00
  39++E30D 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  39++E311 00 00
  40++E313 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  40++E317 00 00
  41++E319 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  41++E31D 00 00
  42++E31F 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  42++E323 00 00
  43++E325 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  43++E329 99 99
  44++E32B 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  44++E32F 99 99
  45++E331 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  45++E335 99 99
  46++E337              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  47++E337 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  48++E33B 1F 29 04 08                          DB $1F, $29, $04, $08
  49++E33F 1F 39 08 0C                          DB $1F, $39, $08, $0C
  50++E343 1F 49 0C 10                          DB $1F, $49, $0C, $10
  51++E347 1F 59 00 10                          DB $1F, $59, $00, $10
  52++E34B 1C 01 00 14                          DB $1C, $01, $00, $14
  53++E34F 1C 26 14 18                          DB $1C, $26, $14, $18
  54++E353 1C 37 18 1C                          DB $1C, $37, $18, $1C
  55++E357 1C 48 1C 20                          DB $1C, $48, $1C, $20
  56++E35B 1C 05 00 20                          DB $1C, $05, $00, $20
  57++E35F 0F 06 14 24                          DB $0F, $06, $14, $24
  58++E363 0B 67 18 24                          DB $0B, $67, $18, $24
  59++E367 0B 78 1C 24                          DB $0B, $78, $1C, $24
  60++E36B 0F 08 20 24                          DB $0F, $08, $20, $24
  61++E36F 0E 12 04 14                          DB $0E, $12, $04, $14
  62++E373 0E 23 08 18                          DB $0E, $23, $08, $18
  63++E377 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  64++E37B 0E 45 10 20                          DB $0E, $45, $10, $20
  65++E37F 08 00 28 2C                          DB $08, $00, $28, $2C
  66++E383 09 00 2C 30                          DB $09, $00, $2C, $30
  67++E387 0B 00 28 30                          DB $0B, $00, $28, $30
  68++E38B 08 00 34 38                          DB $08, $00, $34, $38
  69++E38F 09 00 38 3C                          DB $09, $00, $38, $3C
  70++E393 0B 00 34 3C                          DB $0B, $00, $34, $3C
  71++E397 0C 99 40 44                          DB $0C, $99, $40, $44
  72++E39B 0C 99 40 48                          DB $0C, $99, $40, $48
  73++E39F 08 99 44 48                          DB $08, $99, $44, $48
  74++E3A3              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  75++E3A3              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  76++E3A3 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  77++E3A7 9F 44 00 18                          DB $9F, $44, $00, $18
  78++E3AB BF 3F 00 25                          DB $BF, $3F, $00, $25
  79++E3AF 3F 00 00 68                          DB $3F, $00, $00, $68
  80++E3B3 3F 3F 00 25                          DB $3F, $3F, $00, $25
  81++E3B7 1F 44 00 18                          DB $1F, $44, $00, $18
  82++E3BB BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  83++E3BF 3C 00 2D 16                          DB $3C, $00, $2D, $16
  84++E3C3 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  85++E3C7 5F 00 1C 00                          DB $5F, $00, $1C, $00
  86++E3CB              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  87++E3CB              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  88++E3CB
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E3CB                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E3CB 00           Gecko:	                DB $00                         ; Number of cargo canisters released when destroyed
   2++E3CC 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++E3CE 32 E4                                DW GeckoEdges                  ; Edge Data
   4++E3D0 44                                   DB GeckoEdgesSize              ; Size of Edge Data
   5++E3D1 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E3D2 1A                                   DB $1A                         ; Explosion Count
   7++E3D3 0C                                   DB GeckoVertSize /6            ; Vertex Count /6
   8++E3D4 48                                   DB GeckoVertSize               ; Vertex Count
   9++E3D5 11                                   DB GeckoEdgesCnt               ; Edges Count
  10++E3D6 37 00                                DW $0037                       ; Bounty LoHi
  11++E3D8 24                                   DB GeckoNormalsSize            ; Face (Normal) Count
  12++E3D9 12                                   DB $12                         ; Range when it turns to a dot
  13++E3DA 46                                   DB $46                         ; Energy Max
  14++E3DB 1E                                   DB $1E                         ; Speed Max
  15++E3DC 76 E4                                DW GeckoNormals                ; Normals
  16++E3DE 03                                   DB $03                         ; Q scaling
  17++E3DF 10                                   DB $10                         ; Laser power and Nbr Missiles
  18++E3E0 EA E3                                DW GeckoVertices               ; Verticles Address
  19++E3E2 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3E3 00                                   DB 0                           ; NewB Tactics
  21++E3E4 80                                   DB ShipCanAnger                ; AI Flags
  22++E3E5 60                                   DB $60                         ; chance of ECM module
  23++E3E6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3E7 00 00                                DW $0000                            ; no solid data
  25++E3E9 00                                   DB $00                              ; no solid data
  26++E3EA
  27++E3EA 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  27++E3EE 03 45
  28++E3F0 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  28++E3F4 01 23
  29++E3F6 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  29++E3FA 05 67
  30++E3FC 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  30++E400 01 78
  31++E402 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  31++E406 45 66
  32++E408 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  32++E40C 12 88
  33++E40E 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  33++E412 34 67
  34++E414 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  34++E418 23 78
  35++E41A 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  35++E41E 33 33
  36++E420 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  36++E424 33 33
  37++E426 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  37++E42A 33 33
  38++E42C 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  38++E430 33 33
  39++E432              GeckoVertSize:          equ $ - GeckoVertices
  40++E432 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  41++E436 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E43A 1F 18 14 0C                          DB $1F, $18, $14, $0C
  43++E43E 1F 07 0C 08                          DB $1F, $07, $0C, $08
  44++E442 1F 56 08 10                          DB $1F, $56, $08, $10
  45++E446 1F 45 10 00                          DB $1F, $45, $10, $00
  46++E44A 1F 28 14 1C                          DB $1F, $28, $14, $1C
  47++E44E 1F 37 1C 18                          DB $1F, $37, $1C, $18
  48++E452 1F 46 18 10                          DB $1F, $46, $18, $10
  49++E456 1D 05 00 08                          DB $1D, $05, $00, $08
  50++E45A 1E 01 04 0C                          DB $1E, $01, $04, $0C
  51++E45E 1D 34 00 18                          DB $1D, $34, $00, $18
  52++E462 1E 23 04 1C                          DB $1E, $23, $04, $1C
  53++E466 14 67 08 18                          DB $14, $67, $08, $18
  54++E46A 14 78 0C 1C                          DB $14, $78, $0C, $1C
  55++E46E 10 33 20 28                          DB $10, $33, $20, $28
  56++E472 11 33 24 2C                          DB $11, $33, $24, $2C
  57++E476              GeckoEdgesSize:             equ $ - GeckoEdges
  58++E476              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  59++E476 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  60++E47A 1F 04 2D 08                          DB $1F, $04, $2D, $08
  61++E47E 5F 19 6C 13                          DB $5F, $19, $6C, $13
  62++E482 5F 00 54 0C                          DB $5F, $00, $54, $0C
  63++E486 DF 19 6C 13                          DB $DF, $19, $6C, $13
  64++E48A 9F 04 2D 08                          DB $9F, $04, $2D, $08
  65++E48E BF 58 10 D6                          DB $BF, $58, $10, $D6
  66++E492 3F 00 00 BB                          DB $3F, $00, $00, $BB
  67++E496 3F 58 10 D6                          DB $3F, $58, $10, $D6
  68++E49A              GeckoNormalsSize:       equ $ - GeckoNormals
  69++E49A              GeckoLen:               equ $ - Gecko
  70++E49A
# file closed: ./Data/ships/Gecko.asm
  86+ E49A                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E49A 03           Ghavial:	            DB $03                      ; Number of cargo canisters released when destroyed
   2++E49B 00 26                                DW $2600                    ; Ship's targetable area LoHi
   3++E49D 01 E5                                DW GhavialEdges             ; Edge Data
   4++E49F 58                                   DB GhavialEdgesSize         ; Size of Edge Data
   5++E4A0 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4A1 22                                   DB $22                      ; Explosion Count
   7++E4A2 0C                                   DB GhavialVertSize /6       ; Vertex Count /6
   8++E4A3 48                                   DB GhavialVertSize          ; Vertex Count
   9++E4A4 16                                   DB GhavialEdgesCnt          ; Edges Count
  10++E4A5 64 00                                DW $0064                    ; Bounty LoHi
  11++E4A7 30                                   DB GhavialNormalsSize       ; Face (Normal) Count
  12++E4A8 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E4A9 72                                   DB $72                      ; Energy Max
  14++E4AA 10                                   DB $10                      ; Speed Max
  15++E4AB 59 E5                                DW GhavialNormals           ; Normals
  16++E4AD 00                                   DB $00                      ; Q scaling
  17++E4AE 27                                   DB $27                      ; Laser power and Nbr Missiles
  18++E4AF B9 E4                                DW GhavialVertices          ; Verticles Address
  19++E4B1 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4B2 00                                   DB 0                        ; NewB Tactics
  21++E4B3 80                                   DB ShipCanAnger             ; AI Flags
  22++E4B4 60                                   DB $60                      ; chance of ECM module
  23++E4B5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4B6 00 00                                DW $0000                            ; no solid data
  25++E4B8 00                                   DB $00                              ; no solid data
  26++E4B9
  27++E4B9 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  27++E4BD 67 01
  28++E4BF 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  28++E4C3 6B 05
  29++E4C5 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  29++E4C9 23 01
  30++E4CB 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  30++E4CF 45 03
  31++E4D1 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  31++E4D5 78 12
  32++E4D7 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  32++E4DB 89 23
  33++E4DD 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  33++E4E1 AB 45
  34++E4E3 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  34++E4E7 9A 34
  35++E4E9 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  35++E4ED FF FF
  36++E4EF 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  36++E4F3 00 00
  37++E4F5 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  37++E4F9 00 00
  38++E4FB 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  38++E4FF 00 00
  39++E501
  40++E501              GhavialVertSize: equ $ - GhavialVertices
  41++E501
  42++E501
  43++E501 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  44++E505 1F 12 10 08                  DB $1F, $12, $10, $08
  45++E509 1F 23 14 08                  DB $1F, $23, $14, $08
  46++E50D 1F 30 0C 08                  DB $1F, $30, $0C, $08
  47++E511 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  48++E515 1F 45 18 0C                  DB $1F, $45, $18, $0C
  49++E519 1F 50 0C 04                  DB $1F, $50, $0C, $04
  50++E51D 1F 67 00 20                  DB $1F, $67, $00, $20
  51++E521 1F 78 10 20                  DB $1F, $78, $10, $20
  52++E525 1F 89 14 20                  DB $1F, $89, $14, $20
  53++E529 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  54++E52D 1F AB 18 20                  DB $1F, $AB, $18, $20
  55++E531 1F B6 04 20                  DB $1F, $B6, $04, $20
  56++E535 1F 06 04 00                  DB $1F, $06, $04, $00
  57++E539 1F 17 00 10                  DB $1F, $17, $00, $10
  58++E53D 1F 28 10 14                  DB $1F, $28, $10, $14
  59++E541 1F 39 14 1C                  DB $1F, $39, $14, $1C
  60++E545 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  61++E549 1F 5B 18 04                  DB $1F, $5B, $18, $04
  62++E54D 09 00 24 28                  DB $09, $00, $24, $28
  63++E551 09 00 28 2C                  DB $09, $00, $28, $2C
  64++E555 09 00 2C 24                  DB $09, $00, $2C, $24
  65++E559
  66++E559              GhavialEdgesSize: equ $ - GhavialEdges
  67++E559
  68++E559
  69++E559              GhavialEdgesCnt: equ GhavialEdgesSize/4
  70++E559
  71++E559
  72++E559 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  73++E55D 1F 33 24 0C                  DB $1F, $33, $24, $0C
  74++E561 3F 33 1C 19                  DB $3F, $33, $1C, $19
  75++E565 3F 00 30 2A                  DB $3F, $00, $30, $2A
  76++E569 BF 33 1C 19                  DB $BF, $33, $1C, $19
  77++E56D 9F 33 24 0C                  DB $9F, $33, $24, $0C
  78++E571 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  79++E575 5F 1C 38 07                  DB $5F, $1C, $38, $07
  80++E579 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  81++E57D 7F 00 33 26                  DB $7F, $00, $33, $26
  82++E581 FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  83++E585 DF 1C 38 07                  DB $DF, $1C, $38, $07
  84++E589
  85++E589              GhavialNormalsSize: equ $ - GhavialNormals
  86++E589              GhavialLen: equ $ - Ghavial
  87++E589
# file closed: ./Data/ships/Ghavial.asm
  87+ E589                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E589 01           Iguana:	                DB $01                      ; Number of cargo canisters released when destroyed
   2++E58A AC 0D                                DW $0DAC                    ; Ship's targetable area LoHi
   3++E58C 02 E6                                DW IguanaEdges              ; Edge Data
   4++E58E 5C                                   DB IguanaEdgesSize          ; Size of Edge Data
   5++E58F 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E590 1A                                   DB $1A                      ; Explosion Count
   7++E591 0F                                   DB IguanaVertSize /6        ; Vertex Count /6
   8++E592 5A                                   DB IguanaVertSize           ; Vertex Count
   9++E593 17                                   DB IguanaEdgesCnt           ; Edges Count
  10++E594 96 00                                DW $0096                    ; Bounty LoHi
  11++E596 28                                   DB IguanaNormalsSize        ; Face (Normal) Count
  12++E597 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E598 5A                                   DB $5A                      ; Energy Max
  14++E599 21                                   DB $21                      ; Speed Max
  15++E59A 5E E6                                DW IguanaNormals            ; Normals
  16++E59C 01                                   DB $01                      ; Q scaling
  17++E59D 23                                   DB $20 | ShipMissiles3      ; Laser power and Nbr Missiles
  18++E59E A8 E5                                DW IguanaVertices           ; Verticles Address
  19++E5A0 00                                   DB ShipTypeNormal           ; Ship Type
  20++E5A1 00                                   DB 0                        ; NewB Tactics
  21++E5A2 80                                   DB ShipCanAnger             ; AI Flags
  22++E5A3 80                                   DB $80                      ; chance of ECM module
  23++E5A4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5A5 00 00                                DW $0000                            ; no solid data
  25++E5A7 00                                   DB $00                              ; no solid data
  26++E5A8
  27++E5A8
  28++E5A8 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  28++E5AC 23 01
  29++E5AE 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  29++E5B2 46 02
  30++E5B4 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  30++E5B8 45 01
  31++E5BA 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  31++E5BE 57 13
  32++E5C0 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  32++E5C4 67 23
  33++E5C6 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  33++E5CA 89 46
  34++E5CC 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  34++E5D0 88 45
  35++E5D2 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  35++E5D6 89 57
  36++E5D8 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  36++E5DC 99 67
  37++E5DE 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  37++E5E2 11 00
  38++E5E4 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  38++E5E8 33 22
  39++E5EA 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  39++E5EE 99 88
  40++E5F0 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  40++E5F4 88 88
  41++E5F6 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  41++E5FA 99 88
  42++E5FC 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  42++E600 99 99
  43++E602
  44++E602              IguanaVertSize: equ $ - IguanaVertices
  45++E602
  46++E602
  47++E602
  48++E602 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  49++E606 1F 01 00 08                  DB $1F, $01, $00, $08
  50++E60A 1F 13 00 0C                  DB $1F, $13, $00, $0C
  51++E60E 1F 23 00 10                  DB $1F, $23, $00, $10
  52++E612 1F 46 04 14                  DB $1F, $46, $04, $14
  53++E616 1F 45 08 18                  DB $1F, $45, $08, $18
  54++E61A 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  55++E61E 1F 67 10 20                  DB $1F, $67, $10, $20
  56++E622 1F 48 14 18                  DB $1F, $48, $14, $18
  57++E626 1F 58 18 1C                  DB $1F, $58, $18, $1C
  58++E62A 1F 69 14 20                  DB $1F, $69, $14, $20
  59++E62E 1F 79 1C 20                  DB $1F, $79, $1C, $20
  60++E632 1F 04 04 08                  DB $1F, $04, $04, $08
  61++E636 1F 15 08 0C                  DB $1F, $15, $08, $0C
  62++E63A 1F 26 04 10                  DB $1F, $26, $04, $10
  63++E63E 1F 37 0C 10                  DB $1F, $37, $0C, $10
  64++E642 1F 89 14 1C                  DB $1F, $89, $14, $1C
  65++E646 1E 01 08 24                  DB $1E, $01, $08, $24
  66++E64A 1E 23 10 28                  DB $1E, $23, $10, $28
  67++E64E 0A 88 2C 30                  DB $0A, $88, $2C, $30
  68++E652 0A 88 34 30                  DB $0A, $88, $34, $30
  69++E656 0A 99 2C 38                  DB $0A, $99, $2C, $38
  70++E65A 0A 99 34 38                  DB $0A, $99, $34, $38
  71++E65E
  72++E65E              IguanaEdgesSize: equ $ - IguanaEdges
  73++E65E
  74++E65E
  75++E65E              IguanaEdgesCnt: equ IguanaEdgesSize/4
  76++E65E
  77++E65E
  78++E65E 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  79++E662 DF 33 4D 19  	DB $DF, $33, $4D, $19
  80++E666 1F 33 4D 19  	DB $1F, $33, $4D, $19
  81++E66A 5F 33 4D 19  	DB $5F, $33, $4D, $19
  82++E66E 9F 2A 55 00  	DB $9F, $2A, $55, $00
  83++E672 DF 2A 55 00  	DB $DF, $2A, $55, $00
  84++E676 1F 2A 55 00  	DB $1F, $2A, $55, $00
  85++E67A 5F 2A 55 00  	DB $5F, $2A, $55, $00
  86++E67E BF 17 00 5D  	DB $BF, $17, $00, $5D
  87++E682 3F 17 00 5D  	DB $3F, $17, $00, $5D
  88++E686
  89++E686
  90++E686              IguanaNormalsSize: equ $ - IguanaNormals
  91++E686              IguanaLen: equ $ - Iguana
  92++E686
# file closed: ./Data/ships/Iguana.asm
  88+ E686                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E686
   2++E686 01           Krait:                  DB $01                         ; Number of cargo canisters released when destroyed
   3++E687 0E 10                                DW $100E                       ; Ship's targetable area LoHi
   4++E689 0B E7                                DW KraitEdges                  ; Edge Data
   5++E68B 54                                   DB KraitEdgesSize              ; Size of Edge Data
   6++E68C 00                                   DB $00                         ; Gun Vertex Byte offset
   7++E68D 12                                   DB $12                         ; Explosion Count
   8++E68E 11                                   DB KraitVertSize /6            ; Vertex Count /6
   9++E68F 66                                   DB KraitVertSize               ; Vertex Count
  10++E690 15                                   DB KraitEdgesCnt               ; Edges Count
  11++E691 64 00                                DW $0064                       ; Bounty LoHi
  12++E693 18                                   DB KraitNormalsSize            ; Face (Normal) Count
  13++E694 14                                   DB $14                         ; Range when it turns to a dot
  14++E695 50                                   DB $50                         ; Energy Max
  15++E696 1E                                   DB $1E                         ; Speed Max
  16++E697 5F E7                                DW KraitNormals                ; Normals
  17++E699 02                                   DB $02                         ; Q scaling
  18++E69A 14                                   DB $10 | ShipMissiles4         ; Laser power and Nbr Missiles
  19++E69B A5 E6                                DW KraitVertices               ; Verticles Address
  20++E69D 00                                   DB ShipTypeNormal              ; Ship Type
  21++E69E 00                                   DB 0                           ; NewB Tactics
  22++E69F 80                                   DB ShipCanAnger                ; AI Flags
  23++E6A0 D0                                   DB $D0                         ; chance of ECM module
  24++E6A1 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++E6A2 00 00                                DW $0000                            ; no solid data
  26++E6A4 00                                   DB $00                              ; no solid data
  27++E6A5
  28++E6A5 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  28++E6A9 01 23
  29++E6AB 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  29++E6AF 03 45
  30++E6B1 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  30++E6B5 12 45
  31++E6B7 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  31++E6BB 01 44
  32++E6BD 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  32++E6C1 23 55
  33++E6C3 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  33++E6C7 01 11
  34++E6C9 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  34++E6CD 23 33
  35++E6CF 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  35++E6D3 00 33
  36++E6D5 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  36++E6D9 00 33
  37++E6DB 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  37++E6DF 33 33
  38++E6E1 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  38++E6E5 00 00
  39++E6E7 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  39++E6EB 44 44
  40++E6ED 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  40++E6F1 44 44
  41++E6F3 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  41++E6F7 44 44
  42++E6F9 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  42++E6FD 55 55
  43++E6FF 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  43++E703 55 55
  44++E705 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  44++E709 55 55
  45++E70B              KraitVertSize           equ $  - KraitVertices
  46++E70B 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  46++E70F 1F 12 00 08
  47++E713 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  47++E717 1F 23 00 10
  48++E71B 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  48++E71F 1F 25 10 08
  49++E723 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  49++E727 1F 04 0C 04
  50++E72B 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  50++E72F 1C 23 10 18
  51++E733 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  51++E737 09 00 1C 28
  52++E73B 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  52++E73F 09 33 1C 24
  53++E743 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  53++E747 08 44 2C 34
  54++E74B 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  54++E74F 07 44 30 2C
  55++E753 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  55++E757 08 55 3C 40
  56++E75B 08 55 40 38                          DB $08, $55, $40, $38
  57++E75F              KraitEdgesSize          equ $  - KraitEdges
  58++E75F              KraitEdgesCnt           equ KraitEdgesSize/4
  59++E75F 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  60++E763 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  60++E767 DF 07 30 06
  61++E76B 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  61++E76F 3F 4D 00 9A
  62++E773 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  63++E777              KraitNormalsSize        equ $  - KraitNormals
  64++E777              KraitLen                equ $  - Krait
  65++E777
# file closed: ./Data/ships/Krait.asm
  89+ E777                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E777 00           Logo:	                DB $00                    ; Number of cargo canisters released when destroyed
   2++E778 49 26                                DW $2649                  ; Ship's targetable area LoHi
   3++E77A 92 E8                                DW LogoEdges              ; Edge Data
   4++E77C 94                                   DB LogoEdgesSize          ; Size of Edge Data
   5++E77D 00                                   DB $00                    ; Gun Vertex Byte offset
   6++E77E 36                                   DB $36                    ; Explosion Count
   7++E77F 2A                                   DB LogoVertSize /6        ; Vertex Count /6
   8++E780 FC                                   DB LogoVertSize           ; Vertex Count
   9++E781 25                                   DB LogoEdgesCnt           ; Edges Count
  10++E782 00 00                                DW $0000                  ; Bounty LoHi
  11++E784 14                                   DB LogoNormalsSize        ; Face (Normal) Count
  12++E785 63                                   DB $63                    ; Range when it turns to a dot
  13++E786 FC                                   DB $FC                    ; Energy Max
  14++E787 24                                   DB $24                    ; Speed Max
  15++E788 26 E9                                DW LogoNormals            ; Normals
  16++E78A 01                                   DB $01                    ; Q scaling
  17++E78B 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++E78C 96 E7                                DW LogoVertices           ; Verticles Address
  19++E78E FD                                   DB ShipTypeText           ; Ship Type
  20++E78F 00                                   DB 0                      ; NewB Tactics
  21++E790 00                                   DB 0                      ; AI Flags
  22++E791 FF                                   DB $FF                    ; chance of ECM module
  23++E792 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E793 00 00                                DW $0000                            ; no solid data
  25++E795 00                                   DB $00                              ; no solid data
  26++E796
  27++E796
  28++E796 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  28++E79A 00 00
  29++E79C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  29++E7A0 00 00
  30++E7A2 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  30++E7A6 00 00
  31++E7A8 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  31++E7AC 00 00
  32++E7AE 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  32++E7B2 00 00
  33++E7B4 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  33++E7B8 00 00
  34++E7BA 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  34++E7BE 00 00
  35++E7C0 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  35++E7C4 00 00
  36++E7C6 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  36++E7CA 00 00
  37++E7CC 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  37++E7D0 00 00
  38++E7D2 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  38++E7D6 00 00
  39++E7D8 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  39++E7DC 00 00
  40++E7DE 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  40++E7E2 02 33
  41++E7E4 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  41++E7E8 02 44
  42++E7EA 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  42++E7EE 01 33
  43++E7F0 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  43++E7F4 02 33
  44++E7F6 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  44++E7FA 02 44
  45++E7FC 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  45++E800 01 44
  46++E802 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  46++E806 00 00
  47++E808 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  47++E80C 00 00
  48++E80E 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  48++E812 00 00
  49++E814 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  49++E818 00 00
  50++E81A 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  50++E81E 00 00
  51++E820 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  51++E824 00 00
  52++E826 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  52++E82A 00 00
  53++E82C 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  53++E830 00 00
  54++E832 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  54++E836 00 00
  55++E838 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  55++E83C 00 00
  56++E83E 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  56++E842 00 00
  57++E844 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  57++E848 00 00
  58++E84A 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  58++E84E 00 00
  59++E850 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  59++E854 00 00
  60++E856 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  60++E85A 00 00
  61++E85C 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  61++E860 00 00
  62++E862 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  62++E866 00 00
  63++E868 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  63++E86C 00 00
  64++E86E 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  64++E872 00 00
  65++E874 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  65++E878 00 00
  66++E87A 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  66++E87E 00 00
  67++E880 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  67++E884 00 00
  68++E886 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  68++E88A 00 00
  69++E88C 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  69++E890 00 00
  70++E892
  71++E892              LogoVertSize: equ $ - LogoVertices
  72++E892
  73++E892
  74++E892
  75++E892 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  76++E896 1F 00 04 08  	DB $1F, $00, $04, $08
  77++E89A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  78++E89E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  79++E8A2 1F 00 10 14  	DB $1F, $00, $10, $14
  80++E8A6 1F 00 14 18  	DB $1F, $00, $14, $18
  81++E8AA 1F 00 18 1C  	DB $1F, $00, $18, $1C
  82++E8AE 1F 00 1C 20  	DB $1F, $00, $1C, $20
  83++E8B2 1F 00 20 24  	DB $1F, $00, $20, $24
  84++E8B6 1F 00 24 28  	DB $1F, $00, $24, $28
  85++E8BA 1F 00 28 2C  	DB $1F, $00, $28, $2C
  86++E8BE 1F 00 2C 00  	DB $1F, $00, $2C, $00
  87++E8C2 1E 03 38 3C  	DB $1E, $03, $38, $3C
  88++E8C6 1E 01 3C 40  	DB $1E, $01, $3C, $40
  89++E8CA 1E 04 40 44  	DB $1E, $04, $40, $44
  90++E8CE 1E 01 44 38  	DB $1E, $01, $44, $38
  91++E8D2 1E 03 10 30  	DB $1E, $03, $10, $30
  92++E8D6 1E 22 30 34  	DB $1E, $22, $30, $34
  93++E8DA 1E 04 34 20  	DB $1E, $04, $34, $20
  94++E8DE 1E 11 20 10  	DB $1E, $11, $20, $10
  95++E8E2 1E 13 10 38  	DB $1E, $13, $10, $38
  96++E8E6 1E 13 30 3C  	DB $1E, $13, $30, $3C
  97++E8EA 1E 24 34 40  	DB $1E, $24, $34, $40
  98++E8EE 1E 14 20 44  	DB $1E, $14, $20, $44
  99++E8F2 1E 00 54 58  	DB $1E, $00, $54, $58
 100++E8F6 1E 00 58 60  	DB $1E, $00, $58, $60
 101++E8FA 1E 00 60 64  	DB $1E, $00, $60, $64
 102++E8FE 1E 00 5C 68  	DB $1E, $00, $5C, $68
 103++E902 1E 00 6C 70  	DB $1E, $00, $6C, $70
 104++E906 1E 00 70 74  	DB $1E, $00, $70, $74
 105++E90A 1E 00 78 7C  	DB $1E, $00, $78, $7C
 106++E90E 1E 00 80 84  	DB $1E, $00, $80, $84
 107++E912 1E 00 88 8C  	DB $1E, $00, $88, $8C
 108++E916 1E 00 90 94  	DB $1E, $00, $90, $94
 109++E91A 1E 00 94 9C  	DB $1E, $00, $94, $9C
 110++E91E 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 111++E922 1E 00 A4 98  	DB $1E, $00, $A4, $98
 112++E926
 113++E926              LogoEdgesSize: equ $ - LogoEdges
 114++E926
 115++E926
 116++E926              LogoEdgesCnt: equ LogoEdgesSize/4
 117++E926
 118++E926
 119++E926 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 120++E92A 1F 00 04 0F  	DB $1F, $00, $04, $0F
 121++E92E 3F 00 0D 34  	DB $3F, $00, $0D, $34
 122++E932 9F 51 51 00  	DB $9F, $51, $51, $00
 123++E936 1F 51 51 00  	DB $1F, $51, $51, $00
 124++E93A
 125++E93A
 126++E93A              LogoNormalsSize: equ $ - LogoNormals
 127++E93A              LogoLen: equ $ - Logo
 128++E93A
# file closed: ./Data/ships/Logo.asm
  90+ E93A                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E93A 01           Mamba:	                DB $01                     ; Number of cargo canisters released when destroyed
   2++E93B 24 13                                DW $1324                   ; Ship's targetable area LoHi
   3++E93D EF E9                                DW MambaEdges              ; Edge Data
   4++E93F 70                                   DB MambaEdgesSize          ; Size of Edge Data
   5++E940 00                                   DB $00                     ; Gun Vertex Byte offset
   6++E941 22                                   DB $22                     ; Explosion Count
   7++E942 19                                   DB MambaVertSize /6        ; Vertex Count /6
   8++E943 96                                   DB MambaVertSize           ; Vertex Count
   9++E944 1C                                   DB MambaEdgesCnt           ; Edges Count
  10++E945 96 00                                DW $0096                   ; Bounty LoHi
  11++E947 14                                   DB MambaNormalsSize        ; Face (Normal) Count
  12++E948 19                                   DB $19                     ; Range when it turns to a dot
  13++E949 5A                                   DB $5A                     ; Energy Max
  14++E94A 1E                                   DB $1E                     ; Speed Max
  15++E94B 5F EA                                DW MambaNormals            ; Normals
  16++E94D 02                                   DB $02                     ; Q scaling
  17++E94E 12                                   DB $12 | ShipMissiles2     ; Laser power and Nbr Missiles
  18++E94F 59 E9                                DW MambaVertices           ; Verticles Address
  19++E951 00                                   DB ShipTypeNormal          ; Ship Type
  20++E952 00                                   DB 0                       ; NewB Tactics
  21++E953 80                                   DB ShipCanAnger            ; AI Flags
  22++E954 E0                                   DB $E0                     ; chance of ECM module
  23++E955 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E956 00 00                                DW $0000                            ; no solid data
  25++E958 00                                   DB $00                              ; no solid data
  26++E959
  27++E959
  28++E959 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  28++E95D 10 32
  29++E95F 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  29++E963 20 44
  30++E965 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  30++E969 21 44
  31++E96B 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  31++E96F 31 44
  32++E971 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  32++E975 30 44
  33++E977 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  33++E97B 11 11
  34++E97D 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  34++E981 11 11
  35++E983 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  35++E987 11 11
  36++E989 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  36++E98D 11 11
  37++E98F 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  37++E993 00 00
  38++E995 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  38++E999 00 00
  39++E99B 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  39++E99F 00 00
  40++E9A1 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  40++E9A5 00 00
  41++E9A7 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  41++E9AB 00 00
  42++E9AD 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  42++E9B1 00 00
  43++E9B3 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  43++E9B7 44 44
  44++E9B9 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  44++E9BD 44 44
  45++E9BF 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  45++E9C3 44 44
  46++E9C5 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  46++E9C9 44 44
  47++E9CB 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  47++E9CF 44 44
  48++E9D1 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  48++E9D5 44 44
  49++E9D7 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  49++E9DB 44 44
  50++E9DD 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  50++E9E1 44 44
  51++E9E3 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  51++E9E7 44 44
  52++E9E9 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  52++E9ED 44 44
  53++E9EF
  54++E9EF              MambaVertSize: equ $ - MambaVertices
  55++E9EF
  56++E9EF
  57++E9EF
  58++E9EF 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  59++E9F3 1F 30 00 10  	DB $1F, $30, $00, $10
  60++E9F7 1F 40 04 10  	DB $1F, $40, $04, $10
  61++E9FB 1E 42 04 08  	DB $1E, $42, $04, $08
  62++E9FF 1E 41 08 0C  	DB $1E, $41, $08, $0C
  63++EA03 1E 43 0C 10  	DB $1E, $43, $0C, $10
  64++EA07 0E 11 14 18  	DB $0E, $11, $14, $18
  65++EA0B 0C 11 18 1C  	DB $0C, $11, $18, $1C
  66++EA0F 0D 11 1C 20  	DB $0D, $11, $1C, $20
  67++EA13 0C 11 14 20  	DB $0C, $11, $14, $20
  68++EA17 14 00 24 2C  	DB $14, $00, $24, $2C
  69++EA1B 10 00 24 30  	DB $10, $00, $24, $30
  70++EA1F 10 00 28 34  	DB $10, $00, $28, $34
  71++EA23 14 00 28 38  	DB $14, $00, $28, $38
  72++EA27 0E 00 34 38  	DB $0E, $00, $34, $38
  73++EA2B 0E 00 2C 30  	DB $0E, $00, $2C, $30
  74++EA2F 0D 44 3C 40  	DB $0D, $44, $3C, $40
  75++EA33 0E 44 44 48  	DB $0E, $44, $44, $48
  76++EA37 0C 44 3C 48  	DB $0C, $44, $3C, $48
  77++EA3B 0C 44 40 44  	DB $0C, $44, $40, $44
  78++EA3F 07 44 50 54  	DB $07, $44, $50, $54
  79++EA43 05 44 50 60  	DB $05, $44, $50, $60
  80++EA47 05 44 54 60  	DB $05, $44, $54, $60
  81++EA4B 07 44 4C 58  	DB $07, $44, $4C, $58
  82++EA4F 05 44 4C 5C  	DB $05, $44, $4C, $5C
  83++EA53 05 44 58 5C  	DB $05, $44, $58, $5C
  84++EA57 1E 21 00 08  	DB $1E, $21, $00, $08
  85++EA5B 1E 31 00 0C  	DB $1E, $31, $00, $0C
  86++EA5F
  87++EA5F              MambaEdgesSize: equ $ - MambaEdges
  88++EA5F
  89++EA5F
  90++EA5F              MambaEdgesCnt: equ MambaEdgesSize/4
  91++EA5F
  92++EA5F
  93++EA5F 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  94++EA63 1E 00 18 02  	DB $1E, $00, $18, $02
  95++EA67 9E 20 40 10  	DB $9E, $20, $40, $10
  96++EA6B 1E 20 40 10  	DB $1E, $20, $40, $10
  97++EA6F 3E 00 00 7F  	DB $3E, $00, $00, $7F
  98++EA73
  99++EA73              MambaNormalsSize: equ $ - MambaNormals
 100++EA73              MambaLen: equ $ - Mamba
 101++EA73
# file closed: ./Data/ships/Mamba.asm
  91+ EA73                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA73              ;    DEFINE DEBUGMODEL 1
   2++EA73 00           Missile:	            DB $00                     ; Number of cargo canisters released when destroyed
   3++EA74 40 06                                DW $0640                   ; Ship's targetable area LoHi
   4++EA76 F8 EA                                DW MissileEdges            ; Edge Data
   5++EA78 60                                   DB MissileEdgesSize        ; Size of Edge Data
   6++EA79 00                                   DB $00                     ; Gun Vertex Byte offset
   7++EA7A 0A                                   DB $0A                     ; Explosion Count
   8++EA7B 11                                   DB MissileVertSize /6      ; Vertex Count /6
   9++EA7C 66                                   DB MissileVertSize         ; Vertex Count
  10++EA7D 18                                   DB MissileEdgesCnt         ; Edges Count
  11++EA7E 00 00                                DW $0000                   ; Bounty LoHi
  12++EA80 24                                   DB MissileNormalsSize      ; Face (Normal) Count
  13++EA81 0E                                   DB $0E                     ; Range when it turns to a dot
  14++EA82 02                                   DB $02                     ; Energy Max
  15++EA83 2C                                   DB $2C                     ; Speed Max
  16++EA84 58 EB                                DW MissileNormals          ; Normals
  17++EA86 02                                   DB $02                     ; Q scaling
  18++EA87 00                                   DB $00                     ; Laser power and Nbr Missiles
  19++EA88 92 EA                                DW MissileVertices         ; Verticles Address
  20++EA8A 01                                   DB ShipTypeMissile         ; Ship Type
  21++EA8B 00                                   DB 0                       ; NewB Tactics
  22++EA8C 00                                   DB 0                       ; AI Flags
  23++EA8D 00                                   DB $00                     ; chance of ECM module
  24++EA8E FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EA8F 00 00                                DW $0000                            ; no solid data
  26++EA91 00                                   DB $00                              ; no solid data
  27++EA92
  28++EA92
  29++EA92              ;;;     Byte 0 = X magnitide with origin at middle of ship
  30++EA92              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  31++EA92              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  32++EA92              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  33++EA92              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  34++EA92              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  35++EA92              MissileVertices:    IFDEF DEBUGMODEL
  36++EA92 ~                                    DB $00,$50,$00,$1F,$00,$00  ; 00 00 Y Tip (Roof)
  37++EA92 ~                                    DB $00,$00,$00,$1F,$00,$00  ; 01 04 Y base for all nodes
  38++EA92 ~                                    DB $50,$00,$00,$1F,$01,$01  ; 02 08 X Tip (Side)
  39++EA92 ~                                    DB $00,$00,$00,$1F,$01,$01  ; 03 0C X Base
  40++EA92 ~                                    DB $00,$00,$30,$1F,$02,$02  ; 04 10 Z Tip (Nose1)
  41++EA92 ~                                    DB $00,$00,$00,$1F,$02,$03  ; 05 14 Z base
  42++EA92 ~                                    DB $04,$00,$25,$9F,$03,$03  ; 06 18 Z Trangle point 1
  43++EA92 ~                                    DB $04,$00,$25,$1F,$03,$03  ; 07 1C Z Trangle point 2
  44++EA92 ~                                    DB $05,$10,$00,$9F,$00,$00  ; 08 20 Y Cross Member 1
  45++EA92 ~                                    DB $05,$10,$00,$1F,$00,$00  ; 09 24 Y Cross Member 2
  46++EA92 ~                                    DB $10,$05,$00,$1F,$00,$00  ; 10 28 X Cross Member 1
  47++EA92 ~                                    DB $20,$00,$00,$1F,$00,$00  ; 11 2C X Cross Member 2
  48++EA92 ~                                    DB $10,$05,$00,$5F,$00,$00  ; 12 30 X Cross Member 3
  49++EA92                                  ELSE
  50++EA92 00 00 44 1F                          DB $00, $00, $44, $1F, $10, $32
  50++EA96 10 32
  51++EA98 08 08 24 5F                          DB $08, $08, $24, $5F, $21, $54
  51++EA9C 21 54
  52++EA9E 08 08 24 1F                          DB $08, $08, $24, $1F, $32, $74
  52++EAA2 32 74
  53++EAA4 08 08 24 9F                          DB $08, $08, $24, $9F, $30, $76
  53++EAA8 30 76
  54++EAAA 08 08 24 DF                          DB $08, $08, $24, $DF, $10, $65
  54++EAAE 10 65
  55++EAB0 08 08 2C 3F                          DB $08, $08, $2C, $3F, $74, $88
  55++EAB4 74 88
  56++EAB6 08 08 2C 7F                          DB $08, $08, $2C, $7F, $54, $88
  56++EABA 54 88
  57++EABC 08 08 2C FF                          DB $08, $08, $2C, $FF, $65, $88
  57++EAC0 65 88
  58++EAC2 08 08 2C BF                          DB $08, $08, $2C, $BF, $76, $88
  58++EAC6 76 88
  59++EAC8 0C 0C 2C 28                          DB $0C, $0C, $2C, $28, $74, $88
  59++EACC 74 88
  60++EACE 0C 0C 2C 68                          DB $0C, $0C, $2C, $68, $54, $88
  60++EAD2 54 88
  61++EAD4 0C 0C 2C E8                          DB $0C, $0C, $2C, $E8, $65, $88
  61++EAD8 65 88
  62++EADA 0C 0C 2C A8                          DB $0C, $0C, $2C, $A8, $76, $88
  62++EADE 76 88
  63++EAE0 08 08 0C A8                          DB $08, $08, $0C, $A8, $76, $77
  63++EAE4 76 77
  64++EAE6 08 08 0C E8                          DB $08, $08, $0C, $E8, $65, $66
  64++EAEA 65 66
  65++EAEC 08 08 0C 28                          DB $08, $08, $0C, $28, $74, $77
  65++EAF0 74 77
  66++EAF2 08 08 0C 68                          DB $08, $08, $0C, $68, $54, $55
  66++EAF6 54 55
  67++EAF8                                  ENDIF
  68++EAF8              MissileVertSize: equ $ - MissileVertices
  69++EAF8
  70++EAF8              ;;;     Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  71++EAF8              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  72++EAF8              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  73++EAF8              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  74++EAF8
  75++EAF8              MissileEdges:	    IFDEF DEBUGMODEL
  76++EAF8 ~                                    DB $1F,$00,$00,$04 ; Y
  77++EAF8 ~                                    DB $1F,$00,$08,$0C ; X
  78++EAF8 ~                                    DB $1F,$00,$10,$14 ; Z
  79++EAF8 ~                                    DB $1F,$00,$10,$18 ; Z Tip Traingle 1
  80++EAF8 ~                                    DB $1F,$00,$10,$1C ; Z Tip Traingle 2
  81++EAF8 ~                                    DB $1F,$00,$1C,$18 ; Z Tip Traingle 2
  82++EAF8 ~                                    DB $1F,$00,$20,$24 ; Y Cross memeber
  83++EAF8 ~                                    DB $1F,$00,$28,$2C ; X Triangle
  84++EAF8 ~                                    DB $1F,$00,$2C,$30 ; X Triangle
  85++EAF8 ~                                    ;DB $1F,$00,$18,$1C
  86++EAF8                                  ELSE
  87++EAF8 1F 21 00 04                          DB $1F, $21, $00, $04
  88++EAFC 1F 32 00 08                          DB $1F, $32, $00, $08
  89++EB00 1F 30 00 0C                          DB $1F, $30, $00, $0C
  90++EB04 1F 10 00 10                          DB $1F, $10, $00, $10
  91++EB08 1F 24 04 08                          DB $1F, $24, $04, $08
  92++EB0C 1F 51 04 10                          DB $1F, $51, $04, $10
  93++EB10 1F 60 0C 10                          DB $1F, $60, $0C, $10
  94++EB14 1F 73 08 0C                          DB $1F, $73, $08, $0C
  95++EB18 1F 74 08 14                          DB $1F, $74, $08, $14
  96++EB1C 1F 54 04 18                          DB $1F, $54, $04, $18
  97++EB20 1F 65 10 1C                          DB $1F, $65, $10, $1C
  98++EB24 1F 76 0C 20                          DB $1F, $76, $0C, $20
  99++EB28 1F 86 1C 20                          DB $1F, $86, $1C, $20
 100++EB2C 1F 87 14 20                          DB $1F, $87, $14, $20
 101++EB30 1F 84 14 18                          DB $1F, $84, $14, $18
 102++EB34 1F 85 18 1C                          DB $1F, $85, $18, $1C
 103++EB38 08 85 18 28                          DB $08, $85, $18, $28
 104++EB3C 08 87 14 24                          DB $08, $87, $14, $24
 105++EB40 08 87 20 30                          DB $08, $87, $20, $30
 106++EB44 08 85 1C 2C                          DB $08, $85, $1C, $2C
 107++EB48 08 74 24 3C                          DB $08, $74, $24, $3C
 108++EB4C 08 54 28 40                          DB $08, $54, $28, $40
 109++EB50 08 76 30 34                          DB $08, $76, $30, $34
 110++EB54 08 65 2C 38                          DB $08, $65, $2C, $38
 111++EB58                                  ENDIF
 112++EB58              MissileEdgesSize: equ $ - MissileEdges
 113++EB58
 114++EB58
 115++EB58              MissileEdgesCnt: equ MissileEdgesSize/4
 116++EB58
 117++EB58              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 118++EB58              ;;;		Byte 1 = X Lo
 119++EB58              ;;;		Byte 2 = Y Lo
 120++EB58              ;;;		Byte 3 = Z Lo
 121++EB58              MissileNormals:	    IFDEF DEBUGMODEL
 122++EB58 ~                                    DB $1F,$00,$10,$00
 123++EB58 ~                                    DB $1F,$10,$00,$00
 124++EB58 ~                                    DB $1F,$00,$00,$10
 125++EB58 ~                                    DB $1F,$00,$00,$10
 126++EB58                                  ELSE
 127++EB58 9F 40 00 10                          DB $9F, $40, $00, $10
 128++EB5C 5F 00 40 10                          DB $5F, $00, $40, $10
 129++EB60 1F 40 00 10                          DB $1F, $40, $00, $10
 130++EB64 1F 00 40 10                          DB $1F, $00, $40, $10
 131++EB68 1F 20 00 00                          DB $1F, $20, $00, $00
 132++EB6C 5F 00 20 00                          DB $5F, $00, $20, $00
 133++EB70 9F 20 00 00                          DB $9F, $20, $00, $00
 134++EB74 1F 00 20 00                          DB $1F, $00, $20, $00
 135++EB78 3F 00 00 B0                          DB $3F, $00, $00, $B0
 136++EB7C                                  ENDIF
 137++EB7C
 138++EB7C              MissileNormalsSize: equ $ - MissileNormals
 139++EB7C              MissileLen: equ $ - Missile
 140++EB7C
# file closed: ./Data/ships/Missile.asm
  92+ EB7C                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB7C 04           Monitor:	            DB $04                     ; Number of cargo canisters released when destroyed
   2++EB7D 00 36                                DW $3600                   ; Ship's targetable area LoHi
   3++EB7F 01 EC                                DW MonitorEdges            ; Edge Data
   4++EB81 5C                                   DB MonitorEdgesSize        ; Size of Edge Data
   5++EB82 00                                   DB $00                     ; Gun Vertex Byte offset
   6++EB83 2A                                   DB $2A                     ; Explosion Count
   7++EB84 11                                   DB MonitorVertSize /6      ; Vertex Count /6
   8++EB85 66                                   DB MonitorVertSize         ; Vertex Count
   9++EB86 17                                   DB MonitorEdgesCnt         ; Edges Count
  10++EB87 90 01                                DW $0190                   ; Bounty LoHi
  11++EB89 2C                                   DB MonitorNormalsSize      ; Face (Normal) Count
  12++EB8A 28                                   DB $28                     ; Range when it turns to a dot
  13++EB8B 84                                   DB $84                     ; Energy Max
  14++EB8C 10                                   DB $10                     ; Speed Max
  15++EB8D 5D EC                                DW MonitorNormals          ; Normals
  16++EB8F 00                                   DB $00                     ; Q scaling
  17++EB90 37                                   DB $37                     ; Laser power and Nbr Missiles
  18++EB91 9B EB                                DW MonitorVertices         ; Verticles Address
  19++EB93 00                                   DB ShipTypeNormal          ; Ship Type
  20++EB94 00                                   DB 0                       ; NewB Tactics
  21++EB95 80                                   DB ShipCanAnger            ; AI Flags
  22++EB96 40                                   DB $40                     ; chance of ECM module
  23++EB97 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EB98 00 00                                DW $0000                            ; no solid data
  25++EB9A 00                                   DB $00                              ; no solid data
  26++EB9B
  27++EB9B
  28++EB9B 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  28++EB9F FF FF
  29++EBA1 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  29++EBA5 23 01
  30++EBA7 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  30++EBAB 50 34
  31++EBAD 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  31++EBB1 78 12
  32++EBB3 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  32++EBB7 96 45
  33++EBB9 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  33++EBBD AA 28
  34++EBBF 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  34++EBC3 AA 49
  35++EBC5 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  35++EBC9 AA 23
  36++EBCB 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  36++EBCF AA 34
  37++EBD1 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  37++EBD5 AA 89
  38++EBD7 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  38++EBDB 89 67
  39++EBDD 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  39++EBE1 00 00
  40++EBE3 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  40++EBE7 00 00
  41++EBE9 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  41++EBED 77 77
  42++EBEF 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  42++EBF3 77 77
  43++EBF5 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  43++EBF9 66 66
  44++EBFB 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  44++EBFF 66 66
  45++EC01              MonitorVertSize:        equ $ - MonitorVertices
  46++EC01 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  47++EC05 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  48++EC09 1F 23 04 1C                          DB $1F, $23, $04, $1C
  49++EC0D 1F 34 08 20                          DB $1F, $34, $08, $20
  50++EC11 1F 45 08 10                          DB $1F, $45, $08, $10
  51++EC15 1F 50 00 08                          DB $1F, $50, $00, $08
  52++EC19 1F 03 04 08                          DB $1F, $03, $04, $08
  53++EC1D 1F 67 00 28                          DB $1F, $67, $00, $28
  54++EC21 1F 78 0C 28                          DB $1F, $78, $0C, $28
  55++EC25 1F 89 24 28                          DB $1F, $89, $24, $28
  56++EC29 1F 96 10 28                          DB $1F, $96, $10, $28
  57++EC2D 1F 17 00 0C                          DB $1F, $17, $00, $0C
  58++EC31 1F 28 0C 14                          DB $1F, $28, $0C, $14
  59++EC35 1F 49 18 10                          DB $1F, $49, $18, $10
  60++EC39 1F 56 10 00                          DB $1F, $56, $10, $00
  61++EC3D 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  62++EC41 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  63++EC45 1F 4A 20 18                          DB $1F, $4A, $20, $18
  64++EC49 1F 8A 14 24                          DB $1F, $8A, $14, $24
  65++EC4D 1F 9A 18 24                          DB $1F, $9A, $18, $24
  66++EC51 0A 00 2C 30                          DB $0A, $00, $2C, $30
  67++EC55 0A 77 34 38                          DB $0A, $77, $34, $38
  68++EC59 0A 66 3C 40                          DB $0A, $66, $3C, $40
  69++EC5D              MonitorEdgesSize:       equ $ - MonitorEdges
  70++EC5D              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  71++EC5D 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  72++EC61 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  73++EC65 3F 36 1C 10                          DB $3F, $36, $1C, $10
  74++EC69 3F 00 39 1C                          DB $3F, $00, $39, $1C
  75++EC6D BF 36 1C 10                          DB $BF, $36, $1C, $10
  76++EC71 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  77++EC75 DF 26 2F 12                          DB $DF, $26, $2F, $12
  78++EC79 5F 26 2F 12                          DB $5F, $26, $2F, $12
  79++EC7D 7F 27 30 0D                          DB $7F, $27, $30, $0D
  80++EC81 FF 27 30 0D                          DB $FF, $27, $30, $0D
  81++EC85 3F 00 00 40                          DB $3F, $00, $00, $40
  82++EC89              MonitorNormalsSize:     equ $ - MonitorNormals
  83++EC89              MonitorLen:             equ $ - Monitor
  84++EC89
# file closed: ./Data/ships/Monitor.asm
  93+ EC89                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC89 01           Moray:	                DB $01                    ; Number of cargo canisters released when destroyed
   2++EC8A 84 03                                DW $0384                  ; Ship's targetable area LoHi
   3++EC8C FC EC                                DW MorayEdges             ; Edge Data
   4++EC8E 4C                                   DB MorayEdgesSize         ; Size of Edge Data
   5++EC8F 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EC90 1A                                   DB $1A                    ; Explosion Count
   7++EC91 0E                                   DB MorayVertSize /6       ; Vertex Count /6
   8++EC92 54                                   DB MorayVertSize          ; Vertex Count
   9++EC93 13                                   DB MorayEdgesCnt          ; Edges Count
  10++EC94 32 00                                DW $0032                  ; Bounty LoHi
  11++EC96 24                                   DB MorayNormalsSize       ; Face (Normal) Count
  12++EC97 28                                   DB $28                    ; Range when it turns to a dot
  13++EC98 59                                   DB $59                    ; Energy Max
  14++EC99 19                                   DB $19                    ; Speed Max
  15++EC9A 48 ED                                DW MorayNormals           ; Normals
  16++EC9C 02                                   DB $02                    ; Q scaling
  17++EC9D 2A                                   DB $2A                    ; Laser power and Nbr Missiles
  18++EC9E A8 EC                                DW MorayVertices          ; Verticles Address
  19++ECA0 00                                   DB ShipTypeNormal         ; Ship Type
  20++ECA1 00                                   DB 0                      ; NewB Tactics
  21++ECA2 80                                   DB ShipCanAnger           ; AI Flags
  22++ECA3 C0                                   DB $C0                    ; chance of ECM module
  23++ECA4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ECA5 00 00                                DW $0000                            ; no solid data
  25++ECA7 00                                   DB $00                              ; no solid data
  26++ECA8
  27++ECA8
  28++ECA8 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  28++ECAC 02 78
  29++ECAE 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  29++ECB2 01 67
  30++ECB4 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  30++ECB8 FF FF
  31++ECBA 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  31++ECBE 13 66
  32++ECC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  32++ECC4 25 88
  33++ECC6 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  33++ECCA 45 78
  34++ECCC 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  34++ECD0 34 67
  35++ECD2 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  35++ECD6 44 44
  36++ECD8 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  36++ECDC 44 44
  37++ECDE 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  37++ECE2 44 44
  38++ECE4 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  38++ECE8 00 00
  39++ECEA 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  39++ECEE 00 00
  40++ECF0 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  40++ECF4 00 00
  41++ECF6 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  41++ECFA 00 00
  42++ECFC              MorayVertSize:          equ $ - MorayVertices
  43++ECFC 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  44++ED00 1F 16 04 0C                          DB $1F, $16, $04, $0C
  45++ED04 18 36 0C 18                          DB $18, $36, $0C, $18
  46++ED08 18 47 14 18                          DB $18, $47, $14, $18
  47++ED0C 18 58 10 14                          DB $18, $58, $10, $14
  48++ED10 1F 28 00 10                          DB $1F, $28, $00, $10
  49++ED14 0F 67 04 18                          DB $0F, $67, $04, $18
  50++ED18 0F 78 00 14                          DB $0F, $78, $00, $14
  51++ED1C 0F 02 00 08                          DB $0F, $02, $00, $08
  52++ED20 0F 01 04 08                          DB $0F, $01, $04, $08
  53++ED24 11 13 08 0C                          DB $11, $13, $08, $0C
  54++ED28 11 25 08 10                          DB $11, $25, $08, $10
  55++ED2C 0D 45 08 14                          DB $0D, $45, $08, $14
  56++ED30 0D 34 08 18                          DB $0D, $34, $08, $18
  57++ED34 05 44 1C 20                          DB $05, $44, $1C, $20
  58++ED38 07 44 1C 24                          DB $07, $44, $1C, $24
  59++ED3C 07 44 20 24                          DB $07, $44, $20, $24
  60++ED40 05 00 28 2C                          DB $05, $00, $28, $2C
  61++ED44 05 00 30 34                          DB $05, $00, $30, $34
  62++ED48              MorayEdgesSize:         equ $ - MorayEdges
  63++ED48              MorayEdgesCnt:          equ MorayEdgesSize/4
  64++ED48 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  65++ED4C 9F 0A 31 07                          DB $9F, $0A, $31, $07
  66++ED50 1F 0A 31 07                          DB $1F, $0A, $31, $07
  67++ED54 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  68++ED58 78 00 34 4E                          DB $78, $00, $34, $4E
  69++ED5C 78 3B 1C 65                          DB $78, $3B, $1C, $65
  70++ED60 DF 48 63 32                          DB $DF, $48, $63, $32
  71++ED64 5F 00 53 1E                          DB $5F, $00, $53, $1E
  72++ED68 5F 48 63 32                          DB $5F, $48, $63, $32
  73++ED6C
  74++ED6C              MorayNormalsSize:       equ $ - MorayNormals
  75++ED6C              MorayLen:               equ $ - Moray
  76++ED6C
# file closed: ./Data/ships/Moray.asm
  94+ ED6C                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED6C 02           Ophidian:	            DB $02                     ; Number of cargo canisters released when destroyed
   2++ED6D 88 0E                                DW $0E88                   ; Ship's targetable area LoHi
   3++ED6F 03 EE                                DW OphidianEdges           ; Edge Data
   4++ED71 78                                   DB OphidianEdgesSize       ; Size of Edge Data
   5++ED72 00                                   DB $00                     ; Gun Vertex Byte offset
   6++ED73 3C                                   DB $3C                     ; Explosion Count
   7++ED74 14                                   DB OphidianVertSize /6     ; Vertex Count /6
   8++ED75 78                                   DB OphidianVertSize        ; Vertex Count
   9++ED76 1E                                   DB OphidianEdgesCnt        ; Edges Count
  10++ED77 32 00                                DW $0032                   ; Bounty LoHi
  11++ED79 30                                   DB OphidianNormalsSize     ; Face (Normal) Count
  12++ED7A 14                                   DB $14                     ; Range when it turns to a dot
  13++ED7B 40                                   DB $40                     ; Energy Max
  14++ED7C 22                                   DB $22                     ; Speed Max
  15++ED7D 7B EE                                DW OphidianNormals         ; Normals
  16++ED7F 01                                   DB $01                     ; Q scaling
  17++ED80 1A                                   DB $1A                     ; Laser power and Nbr Missiles
  18++ED81 8B ED                                DW OphidianVertices        ; Verticles Address
  19++ED83 00                                   DB ShipTypeNormal          ; Ship Type
  20++ED84 00                                   DB 0                       ; NewB Tactics
  21++ED85 80                                   DB ShipCanAnger            ; AI Flags
  22++ED86 C0                                   DB $C0                     ; chance of ECM module
  23++ED87 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ED88 00 00                                DW $0000                            ; no solid data
  25++ED8A 00                                   DB $00                              ; no solid data
  26++ED8B
  27++ED8B
  28++ED8B 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  28++ED8F 68 02
  29++ED91 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  29++ED95 67 01
  30++ED97 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  30++ED9B 22 01
  31++ED9D 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  31++EDA1 8A 24
  32++EDA3 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  32++EDA7 79 13
  33++EDA9 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  33++EDAD FF FF
  34++EDAF 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  34++EDB3 9B 35
  35++EDB5 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  35++EDB9 AB 45
  36++EDBB 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  36++EDBF BB 4A
  37++EDC1 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  37++EDC5 FF FF
  38++EDC7 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  38++EDCB FF FF
  39++EDCD 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  39++EDD1 BB 39
  40++EDD3 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  40++EDD7 FF FF
  41++EDD9 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  41++EDDD FF FF
  42++EDDF 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  42++EDE3 BB 9A
  43++EDE5 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  43++EDE9 FF FF
  44++EDEB 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  44++EDEF BB BB
  45++EDF1 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  45++EDF5 BB BB
  46++EDF7 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  46++EDFB BB BB
  47++EDFD 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  47++EE01 BB BB
  48++EE03
  49++EE03              OphidianVertSize:       equ $ - OphidianVertices
  50++EE03 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  51++EE07 1F 01 04 08                          DB $1F, $01, $04, $08
  52++EE0B 1F 02 00 08                          DB $1F, $02, $00, $08
  53++EE0F 1F 12 08 14                          DB $1F, $12, $08, $14
  54++EE13 1F 13 10 14                          DB $1F, $13, $10, $14
  55++EE17 1F 24 0C 14                          DB $1F, $24, $0C, $14
  56++EE1B 1F 35 14 18                          DB $1F, $35, $14, $18
  57++EE1F 1F 45 14 1C                          DB $1F, $45, $14, $1C
  58++EE23 1F 28 00 0C                          DB $1F, $28, $00, $0C
  59++EE27 1F 17 04 10                          DB $1F, $17, $04, $10
  60++EE2B 1F 39 10 2C                          DB $1F, $39, $10, $2C
  61++EE2F 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  62++EE33 1F 67 04 3C                          DB $1F, $67, $04, $3C
  63++EE37 1F 68 00 3C                          DB $1F, $68, $00, $3C
  64++EE3B 1F 79 10 3C                          DB $1F, $79, $10, $3C
  65++EE3F 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  66++EE43 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  67++EE47 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  68++EE4B 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  69++EE4F 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  70++EE53 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  71++EE57 1F AB 20 38                          DB $1F, $AB, $20, $38
  72++EE5B 10 BB 40 44                          DB $10, $BB, $40, $44
  73++EE5F 10 BB 44 48                          DB $10, $BB, $44, $48
  74++EE63 10 BB 48 4C                          DB $10, $BB, $48, $4C
  75++EE67 10 BB 4C 40                          DB $10, $BB, $4C, $40
  76++EE6B 10 39 30 34                          DB $10, $39, $30, $34
  77++EE6F 10 39 2C 30                          DB $10, $39, $2C, $30
  78++EE73 10 4A 28 24                          DB $10, $4A, $28, $24
  79++EE77 10 4A 24 20                          DB $10, $4A, $24, $20
  80++EE7B              OphidianEdgesSize:      equ $ - OphidianEdges
  81++EE7B              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  82++EE7B
  83++EE7B 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  84++EE7F 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  85++EE83 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  86++EE87 1F 10 22 02                          DB $1F, $10, $22, $02
  87++EE8B 9F 10 22 02                          DB $9F, $10, $22, $02
  88++EE8F 3F 00 25 03                          DB $3F, $00, $25, $03
  89++EE93 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  90++EE97 5F 0A 14 02                          DB $5F, $0A, $14, $02
  91++EE9B DF 0A 14 02                          DB $DF, $0A, $14, $02
  92++EE9F 7F 12 20 02                          DB $7F, $12, $20, $02
  93++EEA3 FF 12 20 02                          DB $FF, $12, $20, $02
  94++EEA7 3F 00 00 25                          DB $3F, $00, $00, $25
  95++EEAB
  96++EEAB              OphidianNormalsSize:    equ $ - OphidianNormals
  97++EEAB              OphidianLen:            equ $ - Ophidian
  98++EEAB
# file closed: ./Data/ships/Ophidian.asm
  95+ EEAB                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EEAB 80           Plate:	                DB $80                    ; Number of cargo canisters released when destroyed
   2++EEAC 64 00                                DW $0064                  ; Ship's targetable area LoHi
   3++EEAE DC EE                                DW PlateEdges             ; Edge Data
   4++EEB0 10                                   DB PlateEdgesSize         ; Size of Edge Data
   5++EEB1 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EEB2 0A                                   DB $0A                    ; Explosion Count
   7++EEB3 03                                   DB PlateVertSize /6       ; Vertex Count /6
   8++EEB4 12                                   DB PlateVertSize          ; Vertex Count
   9++EEB5 04                                   DB PlateEdgesCnt          ; Edges Count
  10++EEB6 00 00                                DW $0000                  ; Bounty LoHi
  11++EEB8 04                                   DB PlateNormalsSize       ; Face (Normal) Count
  12++EEB9 05                                   DB $05                    ; Range when it turns to a dot
  13++EEBA 10                                   DB $10                    ; Energy Max
  14++EEBB 10                                   DB $10                    ; Speed Max
  15++EEBC EC EE                                DW PlateNormals           ; Normals
  16++EEBE 03                                   DB $03                    ; Q scaling
  17++EEBF 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++EEC0 CA EE                                DW PlateVertices          ; Verticles Address
  19++EEC2 04                                   DB ShipTypeScoopable      ; Ship Type
  20++EEC3 00                                   DB 0                      ; NewB Tactics
  21++EEC4 80                                   DB ShipCanAnger           ; AI Flags
  22++EEC5 00                                   DB $00                    ; chance of ECM module
  23++EEC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EEC7 00 00                                DW $0000                            ; no solid data
  25++EEC9 00                                   DB $00                              ; no solid data
  26++EECA
  27++EECA
  28++EECA
  29++EECA 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  29++EECE FF FF
  30++EED0 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  30++EED4 FF FF
  31++EED6 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  31++EEDA FF FF
  32++EEDC
  33++EEDC              PlateVertSize: equ $ - PlateVertices
  34++EEDC
  35++EEDC
  36++EEDC
  37++EEDC 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  38++EEE0 10 FF 04 08  	DB $10, $FF, $04, $08
  39++EEE4 14 FF 08 0C  	DB $14, $FF, $08, $0C
  40++EEE8 10 FF 0C 00  	DB $10, $FF, $0C, $00
  41++EEEC
  42++EEEC              PlateEdgesSize: equ $ - PlateEdges
  43++EEEC
  44++EEEC
  45++EEEC              PlateEdgesCnt: equ PlateEdgesSize/4
  46++EEEC
  47++EEEC
  48++EEEC 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  49++EEF0
  50++EEF0
  51++EEF0              PlateNormalsSize: equ $ - PlateNormals
  52++EEF0              PlateLen: equ $ - Plate
  53++EEF0
# file closed: ./Data/ships/Plate.asm
  96+ EEF0                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EEF0              ;\ -> &5BA1 \ Python = Type 12                                                   ; Number of cargo canisters released when destroyed
   2++EEF0 05           Python:                 DB $05                                                   ; Ship's targetable area LoHi
   3++EEF1 00 19                                DW $1900                                                 ; Edge Data
   4++EEF3 51 EF                                DW PythonEdges                                           ; Size of Edge Data
   5++EEF5 68                                   DB PythonEdgesSize                                       ; Gun Vertex Byte offset
   6++EEF6 00                                   DB $00                                                   ; Explosion Count
   7++EEF7 2A                                   DB $2A                                                   ; Vertex Count /6
   8++EEF8 0B                                   DB PythonVertSize /6                                     ; Vertex Count
   9++EEF9 42                                   DB PythonVertSize                                        ; Edges Count
  10++EEFA 1A                                   DB PythonEdgesCnt                                        ; Bounty LoHi
  11++EEFB 00 00                                DW $0000                                                 ; Face (Normal) Count
  12++EEFD 34                                   DB PythonNormalsSize                                     ; Range when it turns to a dot
  13++EEFE 28                                   DB $28                                                   ; Energy Max
  14++EEFF FA                                   DB $FA                                                   ; Speed Max
  15++EF00 14                                   DB $14                                                   ; Normals
  16++EF01 B9 EF                                DW PythonNormals                                         ; Q scaling
  17++EF03 00                                   DB $00                                                   ; Laser power and Nbr Missiles
  18++EF04 56                                   DB $50 | ShipMissiles6                                   ; Verticles Address
  19++EF05 0F EF                                DW PythonVertices                                        ; Ship Type
  20++EF07 00                                   DB ShipTypeNormal                                        ; NewB Tactics
  21++EF08 00                                   DB 0                                                     ; AI Flags
  22++EF09 90                                   DB ShipCanAnger | ShipFighterBaySize1 | ShipFighterWorm  ; chance of ECM module
  23++EF0A E0                                   DB $E0
  24++EF0B FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EF0C 00 00                                DW $0000                            ; no solid data
  26++EF0E 00                                   DB $00                              ; no solid data
  27++EF0F
  28++EF0F 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  28++EF13 10 32
  29++EF15 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  29++EF19 10 54
  30++EF1B 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++EF1F FF FF
  31++EF21 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++EF25 FF FF
  32++EF27 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  32++EF2B 54 98
  33++EF2D 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++EF31 89 CC
  34++EF33 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++EF37 B8 CC
  35++EF39 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++EF3D A9 CC
  36++EF3F 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  36++EF43 32 76
  37++EF45 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  37++EF49 76 BA
  38++EF4B 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  38++EF4F BA CC
  39++EF51              PythonVertSize          equ $  - PythonVertices
  40++EF51 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  40++EF55 1F 20 00 0C
  41++EF59 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  41++EF5D 1E 10 00 04
  42++EF61 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  42++EF65 1D 51 04 08
  43++EF69 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  43++EF6D 1D 40 04 0C
  44++EF71 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  44++EF75 1D A7 08 24
  45++EF79 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  45++EF7D 1D B6 0C 24
  46++EF81 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  46++EF85 05 BB 0C 28
  47++EF89 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  47++EF8D 05 AA 08 28
  48++EF91 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  48++EF95 1F B8 0C 18
  49++EF99 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  49++EF9D 1F C9 14 1C
  50++EFA1 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  50++EFA5 1D CB 18 28
  51++EFA9 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  51++EFAD 1D BA 24 28
  52++EFB1 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  52++EFB5 1D 76 20 24
  53++EFB9              PythonEdgesSize         equ $  - PythonEdges
  54++EFB9              PythonEdgesCnt          equ PythonEdgesSize/4
  55++EFB9 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  55++EFBD 1E 1B 28 0B
  56++EFC1 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  56++EFC5 5E 1B 28 0B
  57++EFC9 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  57++EFCD 1E 13 26 00
  58++EFD1 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  58++EFD5 5E 13 26 00
  59++EFD9 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  59++EFDD 3E 19 25 0B
  60++EFE1 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  60++EFE5 FE 19 25 0B
  61++EFE9 3E 00 00 70                          DB $3E, $00, $00, $70
  62++EFED              PythonNormalsSize       equ $  - PythonNormals
  63++EFED              PythonLen               equ $  - Python
  64++EFED
# file closed: ./Data/ships/Python.asm
  97+ EFED                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EFED 02           Python_P:	            DB $02                           ; Number of cargo canisters released when destroyed
   2++EFEE 00 19                                DW $1900                         ; Ship's targetable area LoHi
   3++EFF0 4E F0                                DW Python_PEdges                 ; Edge Data
   4++EFF2 68                                   DB Python_PEdgesSize             ; Size of Edge Data
   5++EFF3 00                                   DB $00                           ; Gun Vertex Byte offset
   6++EFF4 2A                                   DB $2A                           ; Explosion Count
   7++EFF5 0B                                   DB Python_PVertSize /6           ; Vertex Count /6
   8++EFF6 42                                   DB Python_PVertSize              ; Vertex Count
   9++EFF7 1A                                   DB Python_PEdgesCnt              ; Edges Count
  10++EFF8 C8 00                                DW $00C8                         ; Bounty LoHi
  11++EFFA 34                                   DB Python_PNormalsSize           ; Face (Normal) Count
  12++EFFB 28                                   DB $28                           ; Range when it turns to a dot
  13++EFFC FA                                   DB $FA                           ; Energy Max
  14++EFFD 14                                   DB $14                           ; Speed Max
  15++EFFE B6 F0                                DW Python_PNormals               ; Normals
  16++F000 00                                   DB $00                           ; Q scaling
  17++F001 66                                   DB $60 | ShipMissiles6           ; Laser power and Nbr Missiles
  18++F002 0C F0                                DW Python_PVertices              ; Verticles Address
  19++F004 00                                   DB ShipTypeNormal                ; Ship Type
  20++F005 00                                   DB 0                             ; NewB Tactics
  21++F006 80                                   DB ShipCanAnger                  ; AI Flags
  22++F007 F0                                   DB $F0                           ; chance of ECM module
  23++F008 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F009 00 00                                DW $0000                            ; no solid data
  25++F00B 00                                   DB $00                              ; no solid data
  26++F00C
  27++F00C
  28++F00C 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  28++F010 10 32
  29++F012 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  29++F016 10 54
  30++F018 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++F01C FF FF
  31++F01E 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++F022 FF FF
  32++F024 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  32++F028 54 98
  33++F02A 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++F02E 89 CC
  34++F030 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++F034 B8 CC
  35++F036 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++F03A A9 CC
  36++F03C 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  36++F040 32 76
  37++F042 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  37++F046 76 BA
  38++F048 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  38++F04C BA CC
  39++F04E
  40++F04E              Python_PVertSize: equ $ - Python_PVertices
  41++F04E
  42++F04E
  43++F04E
  44++F04E 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  45++F052 1F 20 00 0C  	DB $1F, $20, $00, $0C
  46++F056 1F 31 00 08  	DB $1F, $31, $00, $08
  47++F05A 1F 10 00 04  	DB $1F, $10, $00, $04
  48++F05E 1F 59 08 10  	DB $1F, $59, $08, $10
  49++F062 1F 51 04 08  	DB $1F, $51, $04, $08
  50++F066 1F 37 08 20  	DB $1F, $37, $08, $20
  51++F06A 1F 40 04 0C  	DB $1F, $40, $04, $0C
  52++F06E 1F 62 0C 20  	DB $1F, $62, $0C, $20
  53++F072 1F A7 08 24  	DB $1F, $A7, $08, $24
  54++F076 1F 84 0C 10  	DB $1F, $84, $0C, $10
  55++F07A 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  56++F07E 07 88 0C 14  	DB $07, $88, $0C, $14
  57++F082 07 BB 0C 28  	DB $07, $BB, $0C, $28
  58++F086 07 99 08 14  	DB $07, $99, $08, $14
  59++F08A 07 AA 08 28  	DB $07, $AA, $08, $28
  60++F08E 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  61++F092 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  62++F096 1F C8 14 18  	DB $1F, $C8, $14, $18
  63++F09A 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  64++F09E 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  65++F0A2 1F CB 18 28  	DB $1F, $CB, $18, $28
  66++F0A6 1F 98 10 14  	DB $1F, $98, $10, $14
  67++F0AA 1F BA 24 28  	DB $1F, $BA, $24, $28
  68++F0AE 1F 54 04 10  	DB $1F, $54, $04, $10
  69++F0B2 1F 76 20 24  	DB $1F, $76, $20, $24
  70++F0B6
  71++F0B6              Python_PEdgesSize: equ $ - Python_PEdges
  72++F0B6
  73++F0B6
  74++F0B6              Python_PEdgesCnt: equ Python_PEdgesSize/4
  75++F0B6
  76++F0B6
  77++F0B6 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  78++F0BA 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  79++F0BE DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  80++F0C2 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  81++F0C6 9F 13 26 00  	DB $9F, $13, $26, $00
  82++F0CA 1F 13 26 00  	DB $1F, $13, $26, $00
  83++F0CE DF 13 26 00  	DB $DF, $13, $26, $00
  84++F0D2 5F 13 26 00  	DB $5F, $13, $26, $00
  85++F0D6 BF 19 25 0B  	DB $BF, $19, $25, $0B
  86++F0DA 3F 19 25 0B  	DB $3F, $19, $25, $0B
  87++F0DE 7F 19 25 0B  	DB $7F, $19, $25, $0B
  88++F0E2 FF 19 25 0B  	DB $FF, $19, $25, $0B
  89++F0E6 3F 00 00 70  	DB $3F, $00, $00, $70
  90++F0EA
  91++F0EA
  92++F0EA              Python_PNormalsSize: equ $ - Python_PNormals
  93++F0EA              Python_PLen: equ $ - Python_P
  94++F0EA
# file closed: ./Data/ships/Python_P.asm
  98+ F0EA
# file closed: ./Data/ShipModelMetaData2.asm
1467  F0EA                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
1468  F0EA              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1469  F0EA                  SLOT    ShipModelsAddr
1470  F0EA                  PAGE    BankShipModels3
1471  F0EA              	ORG     ShipModelsAddr, BankShipModels3
1472  E000
1473  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1474  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1474  E00F 06 00       >                        ld      b,0
1474  E011 4F          >                        ld      c,a                                 ; c= original ship id
1474  E012 CB 3F       >.ShiftLoop:             srl     a
1474  E014 CB 3F       >                        srl     a
1474  E016 CB 3F       >                        srl     a
1474  E018 CB 3F       >                        srl     a                                   ; divide by 16
1474  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1474  E01B 79          >                        ld      a,c
1474  E01C 50          >                        ld      d,b
1474  E01D 1E 10       >                        ld      e,16
1474  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1474  E021 93          >                        sub     e                                   ; a= actual model id now
1474  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1474  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1474  E024 7A          >                        ld      a,d                                 ; a = bank number
1474  E025             >;.. Now b = bank and a = adjusted ship nbr
1474  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1474  E028 ED 31       >                        add     hl,a
1474  E02A ED 31       >                        add     hl,a
1474  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1474  E02D             >                        ClearCarryFlag
1474  E02D B7          >                        or a
1474  E02E C9          >                        ret
1475  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1475  E02F 2A 0B C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1475  E032 11 11 C4    >                        ld          de,UBnkHullVerticies
1475  E035 06 00       >                        ld          b,0
1475  E037 3A FF C3    >                        ld			a,(VertexCtX6Addr)
1475  E03A 4F          >                        ld          c,a
1475  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1475  E03C CD 4C 7D    >                        call        memcopy_dma
1475  E03F C9          >                        ret
1476  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1476  E040 2A F9 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1476  E043 11 01 C5    >                        ld          de,UBnkHullEdges
1476  E046 06 00       >                        ld          b,0
1476  E048 3A FB C3    >                        ld			a,(LineX4Addr)
1476  E04B 4F          >                        ld          c,a
1476  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1476  E04D CD 4C 7D    >                        call        memcopy_dma
1476  E050 C9          >                        ret
1477  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1477  E051 2A 07 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1477  E054 11 C9 C5    >                        ld          de,UBnkHullNormals
1477  E057 06 00       >                        ld          b,0
1477  E059 3A 03 C4    >                        ld          a,(FaceCtX4Addr)
1477  E05C 4F          >                        ld          c,a
1477  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1477  E05E CD 4C 7D    >                        call        memcopy_dma
1477  E061 C9          >                        ret
1478  E062              ShipBankTable3:         MShipBankTable
1478  E062 3B 00       >                        DW      BankShipModels1
1478  E064 43 00       >                        DW      BankShipModels2
1478  E066 44 00       >                        DW      BankShipModels3
1478  E068 45 00       >                        DW      BankShipModels4
1479  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1479  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
1479  E06D 36 44       >                        ld          (hl),BankShipModels3
1479  E06F F5          >                        push        af
1479  E070 FD 7D       >                        ld          a,iyl
1479  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
1479  E075 F1          >                        pop         af
1479  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
1479  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1479  E07C ED 31       >                        add         hl,a
1479  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1479  E080 4E          >                        ld          c,(hl)
1479  E081 23          >                        inc         hl
1479  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1479  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1479  E086 ED 31       >                        add         hl,a
1479  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1479  E08A 7E          >                        ld          a,(hl)
1479  E08B 23          >                        inc         hl
1479  E08C 66          >                        ld          h,(hl)
1479  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1479  E08E 11 F6 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1479  E091 01 1B 00    >                        ld          bc,ShipDataLength
1479  E094 ED B0       >                        ldir
1479  E096 CD 2F E0    >                        call        CopyVertsToUniv
1479  E099 CD 40 E0    >                        call        CopyEdgesToUniv
1479  E09C CD 51 E0    >                        call        CopyNormsToUniv
1479  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
1479  E0A2 3E 20       >                        ld          a," "
1479  E0A4 06 10       >                        ld          b,16
1479  E0A6 77          >.fillLoop:              ld          (hl),a
1479  E0A7 23          >                        inc         hl
1479  E0A8 10 FC       >                        djnz        .fillLoop
1479  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
1479  E0AD CD F5 8D    >                        call        ShipIndexToAddress
1479  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
1479  E0B3 06 10       >                        ld          b,16
1479  E0B5 7E          >.CopyLoop:              ld          a,(hl)
1479  E0B6 FE 00       >                        cp          0
1479  E0B8 28 05       >                        jr          z,.CopyDone
1479  E0BA 12          >                        ld          (de),a
1479  E0BB 23          >                        inc         hl
1479  E0BC 13          >                        inc         de
1479  E0BD 10 F6       >                        djnz        .CopyLoop
1479  E0BF C9          >.CopyDone:              ret
1480  E0C0              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1480  E0C0 3E 0D       >                        ld          a,13
1480  E0C2 CD 6A E0    >                        call        CopyShipToUniverse3
1480  E0C5 C9          >                        ret
1481  E0C6                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E0C6 66 E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0C8 47 E2                                 DW ShuttleType9                            ;33  $31
   3+ E0CA 84 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0CC AD E4                                 DW Sidewinder                              ;35  $33
   5+ E0CE 60 E5                                 DW Splinter                                ;36  $34
   6+ E0D0 BF E5                                 DW TestVector                              ;37  $35
   7+ E0D2 28 E6                                 DW Thargoid                                ;38  $36
   8+ E0D4 4F E7                                 DW Thargon                                 ;39  $37
   9+ E0D6 02 E8                                 DW TransportType10                         ;40  $38
  10+ E0D8 EF E9                                 DW Viper                                   ;41  $39
  11+ E0DA D4 EA                                 DW Worm                                    ;42  $3A
  12+ E0DC 8F EB                                 DW Rattler                                 ;43  $3B
  13+ E0DE 00 00                                 DW 0                                       ;44  $3C
  14+ E0E0 00 00                                 DW 0                                       ;45  $3D
  15+ E0E2 00 00                                 DW 0                                       ;46  $3E
  16+ E0E4 00 00                                 DW 0                                       ;47  $3F
  17+ E0E6 85 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0E8 66 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0EA A3 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0EC CC E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0EE 7F E5                                 DW SplinterVertices                        ;36  $34
  22+ E0F0 DE E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0F2 47 E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0F4 6E E7                                 DW ThargonVertices                         ;39  $37
  25+ E0F6 21 E8                                 DW TransportType10Vertices                 ;40  $38
  26+ E0F8 0E EA                                 DW ViperVertices                           ;41  $39
  27+ E0FA F3 EA                                 DW WormVertices                            ;42  $3A
  28+ E0FC AE EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0FE 00 00                                 DW 0                                       ;44  $3C
  30+ E100 00 00                                 DW 0                                       ;45  $3D
  31+ E102 00 00                                 DW 0                                       ;46  $3E
  32+ E104 00 00                                 DW 0                                       ;47  $3F
  33+ E106
  34+ E106 BB E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E108 D8 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E10A 09 E4                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E10C 08 E5                                 DW SidewinderEdges                         ;35  $33
  38+ E10E 97 E5                                 DW SplinterEdges                           ;36  $34
  39+ E110 08 E6                                 DW TestVectorEdges                         ;37  $35
  40+ E112 BF E6                                 DW ThargoidEdges                           ;38  $36
  41+ E114 AA E7                                 DW ThargonEdges                            ;39  $37
  42+ E116 FF E8                                 DW TransportType10Edges                    ;40  $38
  43+ E118 68 EA                                 DW ViperEdges                              ;41  $39
  44+ E11A 2F EB                                 DW WormEdges                               ;42  $3A
  45+ E11C 08 EC                                 DW RattlerEdges                            ;43  $3B
  46+ E11E 00 00                                 DW 0                                       ;44  $3C
  47+ E120 00 00                                 DW 0                                       ;45  $3D
  48+ E122 00 00                                 DW 0                                       ;46  $3E
  49+ E124 00 00                                 DW 0                                       ;47  $3F
  50+ E126
  51+ E126 0F E2        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E128 50 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E12A 79 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E12C 44 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E12E AF E5                                 DW SplinterNormals                         ;36  $34
  56+ E130 18 E6                                 DW TestVectorNormals                       ;37  $35
  57+ E132 27 E7                                 DW ThargoidNormals                         ;38  $36
  58+ E134 E6 E7                                 DW ThargonNormals                          ;39  $37
  59+ E136 B7 E9                                 DW TransportType10Normals                  ;40  $38
  60+ E138 B8 EA                                 DW ViperNormals                            ;41  $39
  61+ E13A 6F EB                                 DW WormNormals                             ;42  $3A
  62+ E13C 08 EC                                 DW RattlerEdges                            ;43  $3B
  63+ E13E 00 00                                 DW 0                                       ;44  $3C
  64+ E140 00 00                                 DW 0                                       ;45  $3D
  65+ E142 00 00                                 DW 0                                       ;46  $3E
  66+ E144 00 00                                 DW 0                                       ;47  $3F
  67+ E146
  68+ E146 E1 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E148 3D 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E14A 29 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E14C B3 00                                 DW SidewinderLen                           ;35  $33
  72+ E14E 5F 00                                 DW SplinterLen                             ;36  $34
  73+ E150 69 00                                 DW TestVectorLen                           ;37  $35
  74+ E152 27 01                                 DW ThargoidLen                             ;38  $36
  75+ E154 B3 00                                 DW ThargonLen                              ;39  $37
  76+ E156 ED 01                                 DW TransportType10Len                      ;40  $38
  77+ E158 E5 00                                 DW ViperLen                                ;41  $39
  78+ E15A BB 00                                 DW WormLen                                 ;42  $3A
  79+ E15C 15 01                                 DW RattlerLen                              ;43  $3B
  80+ E15E 00 00                                 DW 0                                       ;44  $3C
  81+ E160 00 00                                 DW 0                                       ;45  $3D
  82+ E162 00 00                                 DW 0                                       ;46  $3E
  83+ E164 00 00                                 DW 0                                       ;47  $3F
  84+ E166
  85+ E166                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E166 07           Rock_Hermit:	        DB $07                            ; Number of cargo canisters released when destroyed
   2++E167 00 19                                DW $1900                          ; Ship's targetable area LoHi
   3++E169 BB E1                                DW Rock_HermitEdges               ; Edge Data
   4++E16B 54                                   DB Rock_HermitEdgesSize           ; Size of Edge Data
   5++E16C 00                                   DB $00                            ; Gun Vertex Byte offset
   6++E16D 32                                   DB $32                            ; Explosion Count
   7++E16E 09                                   DB Rock_HermitVertSize /6         ; Vertex Count /6
   8++E16F 36                                   DB Rock_HermitVertSize            ; Vertex Count
   9++E170 15                                   DB Rock_HermitEdgesCnt            ; Edges Count
  10++E171 00 00                                DW $0000                          ; Bounty LoHi
  11++E173 38                                   DB Rock_HermitNormalsSize         ; Face (Normal) Count
  12++E174 32                                   DB $32                            ; Range when it turns to a dot
  13++E175 B4                                   DB $B4                            ; Energy Max
  14++E176 1E                                   DB $1E                            ; Speed Max
  15++E177 0F E2                                DW Rock_HermitNormals             ; Normals
  16++E179 01                                   DB $01                            ; Q scaling
  17++E17A 02                                   DB $02                            ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW Rock_HermitVertices            ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                 ; Ship Type
  20++E17E 00                                   DB 0                              ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                   ; AI Flags
  22++E180 30                                   DB $30                            ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185
  28++E185
  29++E185 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  29++E189 FF FF
  30++E18B 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  30++E18F FF FF
  31++E191 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  31++E195 FF FF
  32++E197 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  32++E19B FF FF
  33++E19D 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  33++E1A1 65 DC
  34++E1A3 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  34++E1A7 FF FF
  35++E1A9 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  35++E1AD 10 32
  36++E1AF 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  36++E1B3 FF FF
  37++E1B5 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  37++E1B9 98 BA
  38++E1BB
  39++E1BB
  40++E1BB              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  41++E1BB
  42++E1BB
  43++E1BB
  44++E1BB 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  45++E1BF 1F D6 00 10  	DB $1F, $D6, $00, $10
  46++E1C3 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  47++E1C7 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  48++E1CB 1F A3 04 08  	DB $1F, $A3, $04, $08
  49++E1CF 1F 32 04 18  	DB $1F, $32, $04, $18
  50++E1D3 1F 31 08 18  	DB $1F, $31, $08, $18
  51++E1D7 1F 41 08 14  	DB $1F, $41, $08, $14
  52++E1DB 1F 10 14 18  	DB $1F, $10, $14, $18
  53++E1DF 1F 60 00 14  	DB $1F, $60, $00, $14
  54++E1E3 1F 54 0C 14  	DB $1F, $54, $0C, $14
  55++E1E7 1F 20 00 18  	DB $1F, $20, $00, $18
  56++E1EB 1F 65 10 14  	DB $1F, $65, $10, $14
  57++E1EF 1F A8 04 20  	DB $1F, $A8, $04, $20
  58++E1F3 1F 87 04 1C  	DB $1F, $87, $04, $1C
  59++E1F7 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  60++E1FB 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  61++E1FF 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  62++E203 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  63++E207 1F BA 08 20  	DB $1F, $BA, $08, $20
  64++E20B 1F 98 1C 20  	DB $1F, $98, $1C, $20
  65++E20F
  66++E20F              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  67++E20F
  68++E20F
  69++E20F              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  70++E20F
  71++E20F
  72++E20F 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  73++E213 5F 09 42 51  	DB $5F, $09, $42, $51
  74++E217 9F 48 40 1F  	DB $9F, $48, $40, $1F
  75++E21B DF 40 49 2F  	DB $DF, $40, $49, $2F
  76++E21F 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  77++E223 1F 87 0F 23  	DB $1F, $87, $0F, $23
  78++E227 1F 26 4C 46  	DB $1F, $26, $4C, $46
  79++E22B BF 42 3B 27  	DB $BF, $42, $3B, $27
  80++E22F FF 43 0F 50  	DB $FF, $43, $0F, $50
  81++E233 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  82++E237 FF 46 50 28  	DB $FF, $46, $50, $28
  83++E23B 7F 3A 66 33  	DB $7F, $3A, $66, $33
  84++E23F 3F 51 09 43  	DB $3F, $51, $09, $43
  85++E243 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  86++E247
  87++E247
  88++E247              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  89++E247              Rock_HermitLen: equ $ - Rock_Hermit
  90++E247
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E247                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E247 0F           ShuttleType9:	            DB $0F                       ; Number of cargo canisters released when destroyed
   2++E248 C4 09                                    DW $09C4                     ; Ship's targetable area LoHi
   3++E24A D8 E2                                    DW ShuttleType9Edges         ; Edge Data
   4++E24C 78                                       DB ShuttleType9EdgesSize     ; Size of Edge Data
   5++E24D 00                                       DB $00                       ; Gun Vertex Byte offset
   6++E24E 26                                       DB $26                       ; Explosion Count
   7++E24F 13                                       DB ShuttleType9VertSize /6   ; Vertex Count /6
   8++E250 72                                       DB ShuttleType9VertSize      ; Vertex Count
   9++E251 1E                                       DB ShuttleType9EdgesCnt      ; Edges Count
  10++E252 00 00                                    DW $0000                     ; Bounty LoHi
  11++E254 34                                       DB ShuttleType9NormalsSize   ; Face (Normal) Count
  12++E255 16                                       DB $16                       ; Range when it turns to a dot
  13++E256 20                                       DB $20                       ; Energy Max
  14++E257 08                                       DB $08                       ; Speed Max
  15++E258 50 E3                                    DW ShuttleType9Normals       ; Normals
  16++E25A 02                                       DB $02                       ; Q scaling
  17++E25B 00                                       DB $00                       ; Laser power and Nbr Missiles
  18++E25C 66 E2                                    DW ShuttleType9Vertices      ; Verticles Address
  19++E25E 00           	                        DB ShipTypeNormal            ; Ship Type
  20++E25F 00                                       DB 0                         ; NewB Tactics
  21++E260 00                                       DB 0                         ; AI Flags
  22++E261 80                                       DB $80                       ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266
  28++E266
  29++E266 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  29++E26A FF FF
  30++E26C 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  30++E270 FF FF
  31++E272 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  31++E276 FF FF
  32++E278 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  32++E27C FF FF
  33++E27E 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  33++E282 12 39
  34++E284 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  34++E288 34 59
  35++E28A 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  35++E28E 56 79
  36++E290 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  36++E294 17 89
  37++E296 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  37++E29A 99 99
  38++E29C 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  38++E2A0 99 99
  39++E2A2 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  39++E2A6 99 99
  40++E2A8 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  40++E2AC 99 99
  41++E2AE 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  41++E2B2 0A BC
  42++E2B4 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  42++E2B8 FF 02
  43++E2BA 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  43++E2BE 01 F4
  44++E2C0 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  44++E2C4 A1 3F
  45++E2C6 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  45++E2CA 6B 23
  46++E2CC 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  46++E2D0 F8 C0
  47++E2D2 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  47++E2D6 4F 18
  48++E2D8
  49++E2D8              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  50++E2D8
  51++E2D8
  52++E2D8
  53++E2D8 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  54++E2DC 1F 4A 04 08  	DB $1F, $4A, $04, $08
  55++E2E0 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  56++E2E4 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  57++E2E8 1F 18 00 1C  	DB $1F, $18, $00, $1C
  58++E2EC 18 12 00 10  	DB $18, $12, $00, $10
  59++E2F0 1F 23 04 10  	DB $1F, $23, $04, $10
  60++E2F4 18 34 04 14  	DB $18, $34, $04, $14
  61++E2F8 1F 45 08 14  	DB $1F, $45, $08, $14
  62++E2FC 0C 56 08 18  	DB $0C, $56, $08, $18
  63++E300 1F 67 0C 18  	DB $1F, $67, $0C, $18
  64++E304 18 78 0C 1C  	DB $18, $78, $0C, $1C
  65++E308 1F 39 10 14  	DB $1F, $39, $10, $14
  66++E30C 1F 59 14 18  	DB $1F, $59, $14, $18
  67++E310 1F 79 18 1C  	DB $1F, $79, $18, $1C
  68++E314 1F 19 10 1C  	DB $1F, $19, $10, $1C
  69++E318 10 0C 00 30  	DB $10, $0C, $00, $30
  70++E31C 10 0A 04 30  	DB $10, $0A, $04, $30
  71++E320 10 AB 08 30  	DB $10, $AB, $08, $30
  72++E324 10 BC 0C 30  	DB $10, $BC, $0C, $30
  73++E328 10 99 20 24  	DB $10, $99, $20, $24
  74++E32C 07 99 24 28  	DB $07, $99, $24, $28
  75++E330 09 99 28 2C  	DB $09, $99, $28, $2C
  76++E334 07 99 20 2C  	DB $07, $99, $20, $2C
  77++E338 05 BB 34 38  	DB $05, $BB, $34, $38
  78++E33C 08 BB 38 3C  	DB $08, $BB, $38, $3C
  79++E340 07 BB 34 3C  	DB $07, $BB, $34, $3C
  80++E344 05 AA 40 44  	DB $05, $AA, $40, $44
  81++E348 08 AA 44 48  	DB $08, $AA, $44, $48
  82++E34C 07 AA 40 48  	DB $07, $AA, $40, $48
  83++E350              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  84++E350              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  85++E350
  86++E350 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  87++E354 5F 00 4A 04  	DB $5F, $00, $4A, $04
  88++E358 DF 33 33 17  	DB $DF, $33, $33, $17
  89++E35C 9F 4A 00 04  	DB $9F, $4A, $00, $04
  90++E360 9F 33 33 17  	DB $9F, $33, $33, $17
  91++E364 1F 00 4A 04  	DB $1F, $00, $4A, $04
  92++E368 1F 33 33 17  	DB $1F, $33, $33, $17
  93++E36C 1F 4A 00 04  	DB $1F, $4A, $00, $04
  94++E370 5F 33 33 17  	DB $5F, $33, $33, $17
  95++E374 3F 00 00 6B  	DB $3F, $00, $00, $6B
  96++E378 9F 29 29 5A  	DB $9F, $29, $29, $5A
  97++E37C 1F 29 29 5A  	DB $1F, $29, $29, $5A
  98++E380 5F 37 37 28  	DB $5F, $37, $37, $28
  99++E384
 100++E384
 101++E384              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
 102++E384              ShuttleType9Len: equ $ - ShuttleType9
 103++E384
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E384                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E384 0F           Shuttle_Mk_2:	        DB $0F                         ; Number of cargo canisters released when destroyed
   2++E385 C4 09                                DW $09C4                       ; Ship's targetable area LoHi
   3++E387 09 E4                                DW Shuttle_Mk_2Edges           ; Edge Data
   4++E389 70                                   DB Shuttle_Mk_2EdgesSize       ; Size of Edge Data
   5++E38A 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E38B 26                                   DB $26                         ; Explosion Count
   7++E38C 11                                   DB Shuttle_Mk_2VertSize /6     ; Vertex Count /6
   8++E38D 66                                   DB Shuttle_Mk_2VertSize        ; Vertex Count
   9++E38E 1C                                   DB Shuttle_Mk_2EdgesCnt        ; Edges Count
  10++E38F 00 00                                DW $0000                       ; Bounty LoHi
  11++E391 34                                   DB Shuttle_Mk_2NormalsSize     ; Face (Normal) Count
  12++E392 0A                                   DB $0A                         ; Range when it turns to a dot
  13++E393 20                                   DB $20                         ; Energy Max
  14++E394 09                                   DB $09                         ; Speed Max
  15++E395 79 E4                                DW Shuttle_Mk_2Normals         ; Normals
  16++E397 02                                   DB $02                         ; Q scaling
  17++E398 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E399 A3 E3                                DW Shuttle_Mk_2Vertices        ; Verticles Address
  19++E39B 00                                   DB ShipTypeNormal              ; Ship Type
  20++E39C 00                                   DB 0                           ; NewB Tactics
  21++E39D 00                                   DB 0                           ; AI Flags
  22++E39E 80                                   DB $80                         ; chance of ECM module
  23++E39F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3A0 00 00                                DW $0000                            ; no solid data
  25++E3A2 00                                   DB $00                              ; no solid data
  26++E3A3
  27++E3A3
  28++E3A3
  29++E3A3 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  29++E3A7 23 01
  30++E3A9 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  30++E3AD 34 00
  31++E3AF 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  31++E3B3 15 00
  32++E3B5 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  32++E3B9 26 11
  33++E3BB 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  33++E3BF 37 22
  34++E3C1 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  34++E3C5 58 04
  35++E3C7 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  35++E3CB 69 15
  36++E3CD 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  36++E3D1 7A 26
  37++E3D3 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  37++E3D7 7B 34
  38++E3D9 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  38++E3DD BC 48
  39++E3DF 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  39++E3E3 9C 58
  40++E3E5 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  40++E3E9 AC 69
  41++E3EB 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  41++E3EF BC 7A
  42++E3F1 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  42++E3F5 CC CC
  43++E3F7 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  43++E3FB CC CC
  44++E3FD 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  44++E401 CC CC
  45++E403 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  45++E407 CC CC
  46++E409
  47++E409              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  48++E409
  49++E409
  50++E409
  51++E409 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  52++E40D 1F 12 00 0C  	DB $1F, $12, $00, $0C
  53++E411 1F 23 00 10  	DB $1F, $23, $00, $10
  54++E415 1F 30 00 04  	DB $1F, $30, $00, $04
  55++E419 1F 04 04 14  	DB $1F, $04, $04, $14
  56++E41D 1F 05 08 14  	DB $1F, $05, $08, $14
  57++E421 1F 15 08 18  	DB $1F, $15, $08, $18
  58++E425 1F 16 0C 18  	DB $1F, $16, $0C, $18
  59++E429 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  60++E42D 1F 27 10 1C  	DB $1F, $27, $10, $1C
  61++E431 1F 37 10 20  	DB $1F, $37, $10, $20
  62++E435 1F 34 04 20  	DB $1F, $34, $04, $20
  63++E439 1F 48 14 24  	DB $1F, $48, $14, $24
  64++E43D 1F 58 14 28  	DB $1F, $58, $14, $28
  65++E441 1F 59 18 28  	DB $1F, $59, $18, $28
  66++E445 1F 69 18 2C  	DB $1F, $69, $18, $2C
  67++E449 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  68++E44D 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  69++E451 1F 7B 20 30  	DB $1F, $7B, $20, $30
  70++E455 1F 4B 20 24  	DB $1F, $4B, $20, $24
  71++E459 1F 8C 24 28  	DB $1F, $8C, $24, $28
  72++E45D 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  73++E461 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  74++E465 1F BC 30 24  	DB $1F, $BC, $30, $24
  75++E469 0A CC 34 38  	DB $0A, $CC, $34, $38
  76++E46D 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  77++E471 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  78++E475 0A CC 40 34  	DB $0A, $CC, $40, $34
  79++E479
  80++E479              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  81++E479
  82++E479
  83++E479              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  84++E479
  85++E479
  86++E479 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  87++E47D DF 27 27 4E  	DB $DF, $27, $27, $4E
  88++E481 5F 27 27 4E  	DB $5F, $27, $27, $4E
  89++E485 1F 27 27 4E  	DB $1F, $27, $27, $4E
  90++E489 1F 00 60 00  	DB $1F, $00, $60, $00
  91++E48D 9F 60 00 00  	DB $9F, $60, $00, $00
  92++E491 5F 00 60 00  	DB $5F, $00, $60, $00
  93++E495 1F 60 00 00  	DB $1F, $60, $00, $00
  94++E499 BF 42 42 16  	DB $BF, $42, $42, $16
  95++E49D FF 42 42 16  	DB $FF, $42, $42, $16
  96++E4A1 7F 42 42 16  	DB $7F, $42, $42, $16
  97++E4A5 3F 42 42 16  	DB $3F, $42, $42, $16
  98++E4A9 3F 00 00 60  	DB $3F, $00, $00, $60
  99++E4AD
 100++E4AD
 101++E4AD              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
 102++E4AD              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
 103++E4AD
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E4AD                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E4AD 00           Sidewinder:	            DB $00                      ; Number of cargo canisters released when destroyed
   2++E4AE 81 10                                DW $1081                    ; Ship's targetable area LoHi
   3++E4B0 08 E5                                DW SidewinderEdges          ; Edge Data
   4++E4B2 3C                                   DB SidewinderEdgesSize      ; Size of Edge Data
   5++E4B3 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4B4 1E                                   DB $1E                      ; Explosion Count
   7++E4B5 0A                                   DB SidewinderVertSize /6    ; Vertex Count /6
   8++E4B6 3C                                   DB SidewinderVertSize       ; Vertex Count
   9++E4B7 0F                                   DB SidewinderEdgesCnt       ; Edges Count
  10++E4B8 32 00                                DW $0032                    ; Bounty LoHi
  11++E4BA 1C                                   DB SidewinderNormalsSize    ; Face (Normal) Count
  12++E4BB 14                                   DB $14                      ; Range when it turns to a dot
  13++E4BC 46                                   DB $46                      ; Energy Max
  14++E4BD 25                                   DB $25                      ; Speed Max
  15++E4BE 44 E5                                DW SidewinderNormals        ; Normals
  16++E4C0 02                                   DB $02                      ; Q scaling
  17++E4C1 11                                   DB $10 | ShipMissiles1      ; Laser power and Nbr Missiles
  18++E4C2 CC E4                                DW SidewinderVertices       ; Verticles Address
  19++E4C4 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4C5 00                                   DB 0                        ; NewB Tactics
  21++E4C6 80                                   DB ShipCanAnger             ; AI Flags
  22++E4C7 30                                   DB $30                      ; chance of ECM module
  23++E4C8 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4C9 00 00                                DW $0000                            ; no solid data
  25++E4CB 00                                   DB $00                              ; no solid data
  26++E4CC
  27++E4CC
  28++E4CC 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  28++E4D0 10 54
  29++E4D2 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  29++E4D6 20 65
  30++E4D8 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  30++E4DC 32 66
  31++E4DE 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  31++E4E2 31 44
  32++E4E4 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  32++E4E8 10 32
  33++E4EA 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  33++E4EE 43 65
  34++E4F0 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  34++E4F4 33 33
  35++E4F6 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  35++E4FA 33 33
  36++E4FC 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  36++E500 33 33
  37++E502 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  37++E506 33 33
  38++E508
  39++E508
  40++E508              SidewinderVertSize: equ $ - SidewinderVertices
  41++E508
  42++E508
  43++E508
  44++E508 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  45++E50C 1F 62 04 08  	DB $1F, $62, $04, $08
  46++E510 1F 20 04 10  	DB $1F, $20, $04, $10
  47++E514 1F 10 00 10  	DB $1F, $10, $00, $10
  48++E518 1F 41 00 0C  	DB $1F, $41, $00, $0C
  49++E51C 1F 31 0C 10  	DB $1F, $31, $0C, $10
  50++E520 1F 32 08 10  	DB $1F, $32, $08, $10
  51++E524 1F 43 0C 14  	DB $1F, $43, $0C, $14
  52++E528 1F 63 08 14  	DB $1F, $63, $08, $14
  53++E52C 1F 65 04 14  	DB $1F, $65, $04, $14
  54++E530 1F 54 00 14  	DB $1F, $54, $00, $14
  55++E534 0F 33 18 1C  	DB $0F, $33, $18, $1C
  56++E538 0C 33 1C 20  	DB $0C, $33, $1C, $20
  57++E53C 0C 33 18 24  	DB $0C, $33, $18, $24
  58++E540 0C 33 20 24  	DB $0C, $33, $20, $24
  59++E544
  60++E544              SidewinderEdgesSize: equ $ - SidewinderEdges
  61++E544
  62++E544
  63++E544              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  64++E544
  65++E544
  66++E544 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  67++E548 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  68++E54C 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  69++E550 3F 00 00 70  	DB $3F, $00, $00, $70
  70++E554 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  71++E558 5F 00 20 08  	DB $5F, $00, $20, $08
  72++E55C 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  73++E560
  74++E560
  75++E560              SidewinderNormalsSize: equ $ - SidewinderNormals
  76++E560              SidewinderLen: equ $ - Sidewinder
  77++E560
# file closed: ./Data/ships/Sidewinder.asm
  89+ E560                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E560 B0           Splinter:	            DB $B0                      ; Number of cargo canisters released when destroyed
   2++E561 00 01                                DW $0100                    ; Ship's targetable area LoHi
   3++E563 97 E5                                DW SplinterEdges            ; Edge Data
   4++E565 18                                   DB SplinterEdgesSize        ; Size of Edge Data
   5++E566 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E567 16                                   DB $16                      ; Explosion Count
   7++E568 04                                   DB SplinterVertSize /6      ; Vertex Count /6
   8++E569 18                                   DB SplinterVertSize         ; Vertex Count
   9++E56A 06                                   DB SplinterEdgesCnt         ; Edges Count
  10++E56B 00 00                                DW $0000                    ; Bounty LoHi
  11++E56D 10                                   DB SplinterNormalsSize      ; Face (Normal) Count
  12++E56E 08                                   DB $08                      ; Range when it turns to a dot
  13++E56F 14                                   DB $14                      ; Energy Max
  14++E570 0A                                   DB $0A                      ; Speed Max
  15++E571 AF E5                                DW SplinterNormals          ; Normals
  16++E573 05                                   DB $05                      ; Q scaling
  17++E574 00                                   DB $00                      ; Laser power and Nbr Missiles
  18++E575 7F E5                                DW SplinterVertices         ; Verticles Address
  19++E577 00                                   DB ShipTypeNormal           ; Ship Type
  20++E578 00                                   DB 0                        ; NewB Tactics
  21++E579 00                                   DB 0                        ; AI Flags
  22++E57A 00                                   DB $00                      ; chance of ECM module
  23++E57B FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E57C 00 00                                DW $0000                            ; no solid data
  25++E57E 00                                   DB $00                              ; no solid data
  26++E57F
  27++E57F
  28++E57F 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  28++E583 12 33
  29++E585 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  29++E589 02 33
  30++E58B 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  30++E58F 01 33
  31++E591 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  31++E595 01 22
  32++E597              SplinterVertSize:       equ $ - SplinterVertices
  33++E597 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  34++E59B 1F 03 04 08                          DB $1F, $03, $04, $08
  35++E59F 1F 01 08 0C                          DB $1F, $01, $08, $0C
  36++E5A3 1F 12 0C 00                          DB $1F, $12, $0C, $00
  37++E5A7 1F 13 00 08                          DB $1F, $13, $00, $08
  38++E5AB 1F 02 0C 04                          DB $1F, $02, $0C, $04
  39++E5AF              SplinterEdgesSize:      equ $ - SplinterEdges
  40++E5AF              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  41++E5AF 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  42++E5B3 1F 03 04 08                          DB $1F, $03, $04, $08
  43++E5B7 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++E5BB 1F 12 0C 00                          DB $1F, $12, $0C, $00
  45++E5BF              SplinterNormalsSize:    equ $ - SplinterNormals
  46++E5BF              SplinterLen:            equ $ - Splinter
  47++E5BF
# file closed: ./Data/ships/Splinter.asm
  90+ E5BF                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E5BF 03           TestVector:             DB $03                      ; Number of cargo canisters released when destroyed
   2++E5C0 23 41                                DW $4123                    ; Ship's targetable area LoHi
   3++E5C2 08 E6                                DW TestVectorEdges          ; Edge Data
   4++E5C4 10                                   DB TestVectorEdgesSize      ; Size of Edge Data
   5++E5C5 54                                   DB $54                      ; Gun Vertex Byte offset
   6++E5C6 2A                                   DB $2A                      ; Explosion Count
   7++E5C7 07                                   DB TestVectorVertSize /6    ; Vertex Count /6
   8++E5C8 2A                                   DB TestVectorVertSize       ; Vertex Count
   9++E5C9 04                                   DB TestVectorEdgesCnt       ; Edges Count
  10++E5CA 00 00                                DW $0000                    ; Bounty LoHi
  11++E5CC 10                                   DB TestVectorNormalsSize    ; Face (Normal) Count
  12++E5CD 32                                   DB $32                      ; Range when it turns to a dot
  13++E5CE 96                                   DB $96                      ; Energy Max
  14++E5CF 1C                                   DB $1C                      ; Speed Max
  15++E5D0 18 E6                                DW TestVectorNormals        ; Normals
  16++E5D2 04                                   DB $04                      ; Q scaling
  17++E5D3 01                                   DB $01                      ; Laser power and Nbr Missiles
  18++E5D4 DE E5                                DW TestVectorVertices       ; Verticles Address
  19++E5D6 FE                                   DB ShipTypeDebug            ; Ship Type
  20++E5D7 00                                   DB 0                        ; NewB Tactics
  21++E5D8 00                                   DB 0                        ; AI Flags
  22++E5D9 00                                   DB $00                      ; chance of ECM module
  23++E5DA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5DB 00 00                                DW $0000                            ; no solid data
  25++E5DD 00                                   DB $00                              ; no solid data
  26++E5DE
  27++E5DE
  28++E5DE 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  28++E5E2 00 00
  29++E5E4 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  29++E5E8 00 00
  30++E5EA 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  30++E5EE 01 01
  31++E5F0 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  31++E5F4 01 01
  32++E5F6 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  32++E5FA 02 02
  33++E5FC 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  33++E600 02 02
  34++E602 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  34++E606 03 03
  35++E608              TestVectorVertSize      equ $  - TestVectorVertices
  36++E608 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  37++E60C 1F 00 08 0C                          DB $1F,$00,$08,$0C
  38++E610 1F 00 10 14                          DB $1F,$00,$10,$14
  39++E614 1F 00 18 18                          DB $1F,$00,$18,$18
  40++E618              TestVectorEdgesSize     equ $  - TestVectorEdges
  41++E618              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  42++E618              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  43++E618 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  44++E61C 1F 10 00 00                          DB $1F,$10,$00,$00
  45++E620 1F 00 00 10                          DB $1F,$00,$00,$10
  46++E624 1F 00 00 10                          DB $1F,$00,$00,$10
  47++E628              TestVectorNormalsSize   equ $  - TestVectorNormals
  48++E628              TestVectorLen           equ $  - TestVector
  49++E628
# file closed: ./Data/ships/TestVector.asm
  91+ E628                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E628 00           Thargoid:	            DB $00                                                      ; Number of cargo canisters released when destroyed
   2++E629 49 26                                DW $2649                                                    ; Ship's targetable area LoHi
   3++E62B BF E6                                DW ThargoidEdges                                            ; Edge Data
   4++E62D 68                                   DB ThargoidEdgesSize                                        ; Size of Edge Data
   5++E62E 3C                                   DB $3C                                                      ; Gun Vertex Byte offset
   6++E62F 26                                   DB $26                                                      ; Explosion Count
   7++E630 14                                   DB ThargoidVertSize /6                                      ; Vertex Count /6
   8++E631 78                                   DB ThargoidVertSize                                         ; Vertex Count
   9++E632 1A                                   DB ThargoidEdgesCnt                                         ; Edges Count
  10++E633 F4 01                                DW $01F4                                                    ; Bounty LoHi
  11++E635 28                                   DB ThargoidNormalsSize                                      ; Face (Normal) Count
  12++E636 37                                   DB $37                                                      ; Range when it turns to a dot
  13++E637 F0                                   DB $F0                                                      ; Energy Max
  14++E638 27                                   DB $27                                                      ; Speed Max
  15++E639 27 E7                                DW ThargoidNormals                                          ; Normals
  16++E63B 02                                   DB $02                                                      ; Q scaling
  17++E63C 16                                   DB $16                                                      ; Laser power and Nbr Missiles
  18++E63D 47 E6                                DW ThargoidVertices                                         ; Verticles Address
  19++E63F 00                                   DB 0                                                        ; Ship Type
  20++E640 00                                   DB 0                                                        ; NewB Tactics
  21++E641 FC                                   DB ShipCanAnger | ShipFighterBaySize  | ShipFighterThargon  ; AI Flags
  22++E642 FF                                   DB $FF                                                      ; chance of ECM module
  23++E643 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E644 00 00                                DW $0000                            ; no solid data
  25++E646 00                                   DB $00                              ; no solid data
  26++E647
  27++E647
  28++E647 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  28++E64B 40 88
  29++E64D 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  29++E651 10 44
  30++E653 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  30++E657 21 44
  31++E659 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  31++E65D 32 44
  32++E65F 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  32++E663 43 55
  33++E665 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  33++E669 54 66
  34++E66B 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  34++E66F 64 77
  35++E671 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  35++E675 74 88
  36++E677 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  36++E67B 80 99
  37++E67D 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  37++E681 10 99
  38++E683 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  38++E687 21 99
  39++E689 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  39++E68D 32 99
  40++E68F 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  40++E693 53 99
  41++E695 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  41++E699 65 99
  42++E69B 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  42++E69F 76 99
  43++E6A1 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  43++E6A5 87 99
  44++E6A7 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  44++E6AB 99 99
  45++E6AD 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  45++E6B1 99 99
  46++E6B3 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  46++E6B7 99 99
  47++E6B9 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  47++E6BD 99 99
  48++E6BF
  49++E6BF              ThargoidVertSize: equ $ - ThargoidVertices
  50++E6BF
  51++E6BF
  52++E6BF
  53++E6BF 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  54++E6C3 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  55++E6C7 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  56++E6CB 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  57++E6CF 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  58++E6D3 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  59++E6D7 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  60++E6DB 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  61++E6DF 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  62++E6E3 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  63++E6E7 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  64++E6EB 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  65++E6EF 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  66++E6F3 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  67++E6F7 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  68++E6FB 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  69++E6FF 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  70++E703 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  71++E707 1F 91 24 28                  DB $1F, $91, $24, $28
  72++E70B 1F 92 28 2C                  DB $1F, $92, $28, $2C
  73++E70F 1F 93 2C 30                  DB $1F, $93, $2C, $30
  74++E713 1F 95 30 34                  DB $1F, $95, $30, $34
  75++E717 1F 96 34 38                  DB $1F, $96, $34, $38
  76++E71B 1F 97 38 3C                  DB $1F, $97, $38, $3C
  77++E71F 1E 99 40 44                  DB $1E, $99, $40, $44
  78++E723 1E 99 48 4C                  DB $1E, $99, $48, $4C
  79++E727
  80++E727              ThargoidEdgesSize: equ $ - ThargoidEdges
  81++E727
  82++E727              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  83++E727
  84++E727 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  85++E72B 7F 67 3C 19  	DB $7F, $67, $3C, $19
  86++E72F 7F 67 19 3C  	DB $7F, $67, $19, $3C
  87++E733 3F 67 19 3C  	DB $3F, $67, $19, $3C
  88++E737 1F 40 00 00  	DB $1F, $40, $00, $00
  89++E73B 3F 67 3C 19  	DB $3F, $67, $3C, $19
  90++E73F 1F 67 3C 19  	DB $1F, $67, $3C, $19
  91++E743 1F 67 19 3C  	DB $1F, $67, $19, $3C
  92++E747 5F 67 19 3C  	DB $5F, $67, $19, $3C
  93++E74B 9F 30 00 00  	DB $9F, $30, $00, $00
  94++E74F
  95++E74F
  96++E74F              ThargoidNormalsSize: equ $ - ThargoidNormals
  97++E74F              ThargoidLen: equ $ - Thargoid
  98++E74F
# file closed: ./Data/ships/Thargoid.asm
  92+ E74F                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E74F F0           Thargon:	            DB $F0                          ; Number of cargo canisters released when destroyed
   2++E750 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E752 AA E7                                DW ThargonEdges                 ; Edge Data
   4++E754 3C                                   DB ThargonEdgesSize             ; Size of Edge Data
   5++E755 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E756 12                                   DB $12                          ; Explosion Count
   7++E757 0A                                   DB ThargonVertSize /6           ; Vertex Count /6
   8++E758 3C                                   DB ThargonVertSize              ; Vertex Count
   9++E759 0F                                   DB ThargonEdgesCnt              ; Edges Count
  10++E75A 32 00                                DW $0032                        ; Bounty LoHi
  11++E75C 1C                                   DB ThargonNormalsSize           ; Face (Normal) Count
  12++E75D 14                                   DB $14                          ; Range when it turns to a dot
  13++E75E 14                                   DB $14                          ; Energy Max
  14++E75F 1E                                   DB $1E                          ; Speed Max
  15++E760 E6 E7                                DW ThargonNormals               ; Normals
  16++E762 02                                   DB $02                          ; Q scaling
  17++E763 10                                   DB $10                          ; Laser power and Nbr Missiles
  18++E764 6E E7                                DW ThargonVertices              ; Verticles Address
  19++E766 00                                   DB 0                            ; Ship Type
  20++E767 00                                   DB 0                            ; NewB Tactics
  21++E768 80                                   DB ShipCanAnger                 ; AI Flags
  22++E769 00                                   DB $00                          ; chance of ECM module
  23++E76A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E76B 00 00                                DW $0000                            ; no solid data
  25++E76D 00                                   DB $00                              ; no solid data
  26++E76E
  27++E76E
  28++E76E
  29++E76E 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  29++E772 01 55
  30++E774 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  30++E778 01 22
  31++E77A 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  31++E77E 02 33
  32++E780 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  32++E784 03 44
  33++E786 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  33++E78A 04 55
  34++E78C 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  34++E790 15 66
  35++E792 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  35++E796 12 66
  36++E798 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  36++E79C 23 66
  37++E79E 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  37++E7A2 34 66
  38++E7A4 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  38++E7A8 45 66
  39++E7AA
  40++E7AA              ThargonVertSize:        equ $ - ThargonVertices
  41++E7AA
  42++E7AA
  43++E7AA 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  44++E7AE 1F 20 04 08                          DB $1F, $20, $04, $08
  45++E7B2 1F 30 08 0C                          DB $1F, $30, $08, $0C
  46++E7B6 1F 40 0C 10                          DB $1F, $40, $0C, $10
  47++E7BA 1F 50 00 10                          DB $1F, $50, $00, $10
  48++E7BE 1F 51 00 14                          DB $1F, $51, $00, $14
  49++E7C2 1F 21 04 18                          DB $1F, $21, $04, $18
  50++E7C6 1F 32 08 1C                          DB $1F, $32, $08, $1C
  51++E7CA 1F 43 0C 20                          DB $1F, $43, $0C, $20
  52++E7CE 1F 54 10 24                          DB $1F, $54, $10, $24
  53++E7D2 1F 61 14 18                          DB $1F, $61, $14, $18
  54++E7D6 1F 62 18 1C                          DB $1F, $62, $18, $1C
  55++E7DA 1F 63 1C 20                          DB $1F, $63, $1C, $20
  56++E7DE 1F 64 20 24                          DB $1F, $64, $20, $24
  57++E7E2 1F 65 24 14                          DB $1F, $65, $24, $14
  58++E7E6
  59++E7E6              ThargonEdgesSize:       equ $ - ThargonEdges
  60++E7E6
  61++E7E6
  62++E7E6              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  63++E7E6
  64++E7E6
  65++E7E6 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  66++E7EA 5F 14 05 07                          DB $5F, $14, $05, $07
  67++E7EE 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  68++E7F2 3F 24 00 68                          DB $3F, $24, $00, $68
  69++E7F6 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  70++E7FA 1F 14 05 07                          DB $1F, $14, $05, $07
  71++E7FE 1F 24 00 00                          DB $1F, $24, $00, $00
  72++E802
  73++E802
  74++E802              ThargonNormalsSize:     equ $ - ThargonNormals
  75++E802              ThargonLen:             equ $ - Thargon
  76++E802
# file closed: ./Data/ships/Thargon.asm
  93+ E802                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E802 00           TransportType10:	    DB $00                             ; Number of cargo canisters released when destroyed
   2++E803 C4 09                                DW $09C4                           ; Ship's targetable area LoHi
   3++E805 FF E8                                DW TransportType10Edges            ; Edge Data
   4++E807 B8                                   DB TransportType10EdgesSize        ; Size of Edge Data
   5++E808 30                                   DB $30                             ; Gun Vertex Byte offset
   6++E809 1A                                   DB $1A                             ; Explosion Count
   7++E80A 25                                   DB TransportType10VertSize /6      ; Vertex Count /6
   8++E80B DE                                   DB TransportType10VertSize         ; Vertex Count
   9++E80C 2E                                   DB TransportType10EdgesCnt         ; Edges Count
  10++E80D 00 00                                DW $0000                           ; Bounty LoHi
  11++E80F 38                                   DB TransportType10NormalsSize      ; Face (Normal) Count
  12++E810 10                                   DB $10                             ; Range when it turns to a dot
  13++E811 20                                   DB $20                             ; Energy Max
  14++E812 0A                                   DB $0A                             ; Speed Max
  15++E813 B7 E9                                DW TransportType10Normals          ; Normals
  16++E815 02                                   DB $02                             ; Q scaling
  17++E816 00                                   DB $00                             ; Laser power and Nbr Missiles
  18++E817 21 E8                                DW TransportType10Vertices         ; Verticles Address
  19++E819 00                                   DB ShipTypeNormal                  ; Ship Type
  20++E81A 00                                   DB 0                               ; NewB Tactics
  21++E81B 00                                   DB 0                               ; AI Flags
  22++E81C FF                                   DB $FF                             ; chance of ECM module
  23++E81D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E81E 00 00                                DW $0000                            ; no solid data
  25++E820 00                                   DB $00                              ; no solid data
  26++E821
  27++E821
  28++E821 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  28++E825 06 77
  29++E827 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  29++E82B 01 77
  30++E82D 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  30++E831 01 22
  31++E833 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  31++E837 02 33
  32++E839 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  32++E83D 03 44
  33++E83F 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  33++E843 04 55
  34++E845 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  34++E849 05 66
  35++E84B 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  35++E84F FF FF
  36++E851 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  36++E855 17 89
  37++E857 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  37++E85B 12 39
  38++E85D 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  38++E861 34 5A
  39++E863 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  39++E867 56 AB
  40++E869 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  40++E86D 89 CD
  41++E86F 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  41++E873 39 DD
  42++E875 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  42++E879 3A DD
  43++E87B 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  43++E87F AB CD
  44++E881 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  44++E885 77 77
  45++E887 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  45++E88B 77 77
  46++E88D 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  46++E891 77 77
  47++E893 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  47++E897 77 77
  48++E899 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  48++E89D 77 77
  49++E89F 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  49++E8A3 77 77
  50++E8A5 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  50++E8A9 66 66
  51++E8AB 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  51++E8AF 66 66
  52++E8B1 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  52++E8B5 66 66
  53++E8B7 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  53++E8BB 66 66
  54++E8BD 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  54++E8C1 66 66
  55++E8C3 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  55++E8C7 66 66
  56++E8C9 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  56++E8CD 66 66
  57++E8CF 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  57++E8D3 33 33
  58++E8D5 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  58++E8D9 33 33
  59++E8DB 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  59++E8DF 33 33
  60++E8E1 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  60++E8E5 33 33
  61++E8E7 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  61++E8EB 00 00
  62++E8ED 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  62++E8F1 00 00
  63++E8F3 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  63++E8F7 00 00
  64++E8F9 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  64++E8FD 00 00
  65++E8FF
  66++E8FF              TransportType10VertSize: equ $ - TransportType10Vertices
  67++E8FF
  68++E8FF
  69++E8FF
  70++E8FF 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  71++E903 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  72++E907 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  73++E90B 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  74++E90F 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  75++E913 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  76++E917 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  77++E91B 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  78++E91F 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  79++E923 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  80++E927 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  81++E92B 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  82++E92F 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  83++E933 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  84++E937 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  85++E93B 11 19 20 24                          DB $11, $19, $20, $24               ;16
  86++E93F 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  87++E943 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  88++E947 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  89++E94B 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  90++E94F 10 89 20 30                          DB $10, $89, $20, $30               ;21
  91++E953 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  92++E957 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  93++E95B 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  94++E95F 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  95++E963 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  96++E967 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  97++E96B 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  98++E96F 07 77 40 44                          DB $07, $77, $40, $44               ;29
  99++E973 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
 100++E977 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
 101++E97B 07 77 48 50                          DB $07, $77, $48, $50               ;32
 102++E97F 07 77 50 54                          DB $07, $77, $50, $54               ;33
 103++E983 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
 104++E987 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
 105++E98B 07 66 60 58                          DB $07, $66, $60, $58               ;36
 106++E98F 07 66 64 68                          DB $07, $66, $64, $68               ;37
 107++E993 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
 108++E997 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 109++E99B 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 110++E99F 06 33 74 78                          DB $06, $33, $74, $78               ;41
 111++E9A3 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 112++E9A7 08 00 84 88                          DB $08, $00, $84, $88               ;43
 113++E9AB 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 114++E9AF 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 115++E9B3 05 00 90 84                          DB $05, $00, $90, $84               ;46
 116++E9B7
 117++E9B7              TransportType10EdgesSize: equ $ - TransportType10Edges
 118++E9B7
 119++E9B7
 120++E9B7              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 121++E9B7
 122++E9B7
 123++E9B7 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 124++E9BB BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 125++E9BF FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 126++E9C3 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 127++E9C7 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 128++E9CB 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 129++E9CF 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 130++E9D3 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 131++E9D7 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 132++E9DB 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 133++E9DF 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 134++E9E3 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 135++E9E7 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 136++E9EB 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 137++E9EF
 138++E9EF
 139++E9EF              TransportType10NormalsSize: equ $ - TransportType10Normals
 140++E9EF              TransportType10Len: equ $ - TransportType10
 141++E9EF
# file closed: ./Data/ships/TransportType10.asm
  94+ E9EF                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9EF 00           Viper:                  DB $00                         ; Number of cargo canisters released when destroyed
   2++E9F0 F9 15                                DW $15F9                       ; Ship's targetable area LoHi
   3++E9F2 68 EA                                DW ViperEdges                  ; Edge Data
   4++E9F4 50                                   DB ViperEdgesSize              ; Size of Edge Data
   5++E9F5 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E9F6 2A                                   DB $2A                         ; Explosion Count
   7++E9F7 0F                                   DB ViperVertSize /6            ; Vertex Count /6
   8++E9F8 5A                                   DB ViperVertSize               ; Vertex Count
   9++E9F9 14                                   DB ViperEdgesCnt               ; Edges Count
  10++E9FA 00 00                                DW $0000                       ; Bounty LoHi
  11++E9FC 1C                                   DB ViperNormalsSize            ; Face (Normal) Count
  12++E9FD 17                                   DB $17 ;$17 before                        ; Range when it turns to a dot
  13++E9FE 64                                   DB $64                         ; Energy Max
  14++E9FF 20                                   DB $20                         ; Speed Max
  15++EA00 B8 EA                                DW ViperNormals                ; Normals
  16++EA02 01                                   DB $01                         ; Q scaling
  17++EA03 11                                   DB $11                         ; Laser power and Nbr Missiles
  18++EA04 0E EA                                DW ViperVertices               ; Verticles Address
  19++EA06 00                                   DB ShipTypeNormal              ; Ship Type
  20++EA07 00                                   DB 0                           ; NewB Tactics
  21++EA08 80                                   DB ShipCanAnger                ; AI Flags
  22++EA09 FF                                   DB $FF                         ; chance of ECM module
  23++EA0A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EA0B 00 00                                DW $0000                            ; no solid data
  25++EA0D 00                                   DB $00                              ; no solid data
  26++EA0E
  27++EA0E
  28++EA0E 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  28++EA12 21 43
  29++EA14 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  29++EA18 10 22
  30++EA1A 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  30++EA1E 43 55
  31++EA20 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  31++EA24 42 66
  32++EA26 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  32++EA2A 31 66
  33++EA2C 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  33++EA30 54 66
  34++EA32 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  34++EA36 35 66
  35++EA38 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  35++EA3C 20 66
  36++EA3E 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  36++EA42 10 66
  37++EA44 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  37++EA48 66 66
  38++EA4A 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  38++EA4E 66 66
  39++EA50 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  39++EA54 66 66
  40++EA56 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  40++EA5A 66 66
  41++EA5C 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  41++EA60 66 66
  42++EA62 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  42++EA66 66 66
  43++EA68              ViperVertSize           equ $  - ViperVertices
  44++EA68 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  44++EA6C 1E 21 00 04
  45++EA70 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  45++EA74 1F 31 00 10
  46++EA78 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  46++EA7C 1E 10 04 20
  47++EA80 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  47++EA84 1E 53 08 18
  48++EA88 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  48++EA8C 1E 65 14 18
  49++EA90 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  49++EA94 1E 63 10 18
  50++EA98 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  50++EA9C 1E 46 0C 14
  51++EAA0 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  51++EAA4 12 66 24 34
  52++EAA8 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  52++EAAC 12 66 28 38
  53++EAB0 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  53++EAB4 10 66 30 34
  54++EAB8              ViperEdgesSize          equ $  - ViperEdges
  55++EAB8              ViperEdgesCnt           equ ViperEdgesSize/4
  56++EAB8 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  56++EABC 9F 16 21 0B
  57++EAC0 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  57++EAC4 DF 16 21 0B
  58++EAC8 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  58++EACC 5F 00 20 00
  59++EAD0 3F 00 00 30                          DB $3F, $00, $00, $30
  60++EAD4              ViperNormalsSize        equ $  - ViperNormals
  61++EAD4              ViperLen                equ $  - Viper
  62++EAD4
# file closed: ./Data/ships/Viper.asm
  95+ EAD4                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EAD4 00           Worm:	                DB $00                      ; Number of cargo canisters released when destroyed
   2++EAD5 49 26                                DW $2649                    ; Ship's targetable area LoHi
   3++EAD7 2F EB                                DW WormEdges                ; Edge Data
   4++EAD9 40                                   DB WormEdgesSize            ; Size of Edge Data
   5++EADA 00                                   DB $00                      ; Gun Vertex Byte offset
   6++EADB 12                                   DB $12                      ; Explosion Count
   7++EADC 0A                                   DB WormVertSize /6          ; Vertex Count /6
   8++EADD 3C                                   DB WormVertSize             ; Vertex Count
   9++EADE 10                                   DB WormEdgesCnt             ; Edges Count
  10++EADF 00 00                                DW $0000                    ; Bounty LoHi
  11++EAE1 20                                   DB WormNormalsSize          ; Face (Normal) Count
  12++EAE2 13                                   DB $13                      ; Range when it turns to a dot
  13++EAE3 1E                                   DB $1E                      ; Energy Max
  14++EAE4 17                                   DB $17                      ; Speed Max
  15++EAE5 6F EB                                DW WormNormals              ; Normals
  16++EAE7 03                                   DB $03                      ; Q scaling
  17++EAE8 30                                   DB $30                      ; Laser power and Nbr Missiles
  18++EAE9 F3 EA                                DW WormVertices             ; Verticles Address
  19++EAEB 00                                   DB ShipTypeNormal           ; Ship Type
  20++EAEC 00                                   DB 0                        ; NewB Tactics
  21++EAED 80                                   DB ShipCanAnger             ; AI Flags
  22++EAEE B0                                   DB $B0                      ; chance of ECM module
  23++EAEF FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EAF0 00 00                                DW $0000                            ; no solid data
  25++EAF2 00                                   DB $00                              ; no solid data
  26++EAF3
  27++EAF3 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  27++EAF7 02 77
  28++EAF9 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  28++EAFD 03 77
  29++EAFF 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  29++EB03 01 24
  30++EB05 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  30++EB09 01 35
  31++EB0B 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  31++EB0F 24 77
  32++EB11 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  32++EB15 35 77
  33++EB17 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  33++EB1B 46 77
  34++EB1D 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  34++EB21 56 77
  35++EB23 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  35++EB27 14 66
  36++EB29 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  36++EB2D 15 66
  37++EB2F
  38++EB2F              WormVertSize: equ $ - WormVertices
  39++EB2F
  40++EB2F
  41++EB2F 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  42++EB33 1F 37 04 14                          DB $1F, $37, $04, $14
  43++EB37 1F 57 14 1C                          DB $1F, $57, $14, $1C
  44++EB3B 1F 67 1C 18                          DB $1F, $67, $1C, $18
  45++EB3F 1F 47 18 10                          DB $1F, $47, $18, $10
  46++EB43 1F 27 10 00                          DB $1F, $27, $10, $00
  47++EB47 1F 02 00 08                          DB $1F, $02, $00, $08
  48++EB4B 1F 03 04 0C                          DB $1F, $03, $04, $0C
  49++EB4F 1F 24 10 08                          DB $1F, $24, $10, $08
  50++EB53 1F 35 14 0C                          DB $1F, $35, $14, $0C
  51++EB57 1F 14 08 20                          DB $1F, $14, $08, $20
  52++EB5B 1F 46 20 18                          DB $1F, $46, $20, $18
  53++EB5F 1F 15 0C 24                          DB $1F, $15, $0C, $24
  54++EB63 1F 56 24 1C                          DB $1F, $56, $24, $1C
  55++EB67 1F 01 08 0C                          DB $1F, $01, $08, $0C
  56++EB6B 1F 16 20 24                          DB $1F, $16, $20, $24
  57++EB6F
  58++EB6F              WormEdgesSize: equ $ - WormEdges
  59++EB6F
  60++EB6F
  61++EB6F              WormEdgesCnt: equ WormEdgesSize/4
  62++EB6F
  63++EB6F
  64++EB6F 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  65++EB73 1F 00 45 0E                          DB $1F, $00, $45, $0E
  66++EB77 1F 46 42 23                          DB $1F, $46, $42, $23
  67++EB7B 9F 46 42 23                          DB $9F, $46, $42, $23
  68++EB7F 1F 40 31 0E                          DB $1F, $40, $31, $0E
  69++EB83 9F 40 31 0E                          DB $9F, $40, $31, $0E
  70++EB87 3F 00 00 C8                          DB $3F, $00, $00, $C8
  71++EB8B 5F 00 50 00                          DB $5F, $00, $50, $00
  72++EB8F
  73++EB8F
  74++EB8F              WormNormalsSize: equ $ - WormNormals
  75++EB8F              WormLen: equ $ - Worm
  76++EB8F
# file closed: ./Data/ships/Worm.asm
  96+ EB8F                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB8F 02           Rattler:	            DB $02                       ; Number of cargo canisters released when destroyed
   2++EB90 70 17                                DW $1770                     ; Ship's targetable area LoHi
   3++EB92 08 EC                                DW RattlerEdges              ; Edge Data
   4++EB94 68                                   DB RattlerEdgesSize          ; Size of Edge Data
   5++EB95 00                                   DB $00                       ; Gun Vertex Byte offset
   6++EB96 2A                                   DB $2A                       ; Explosion Count
   7++EB97 0F                                   DB RattlerVertSize /6        ; Vertex Count /6
   8++EB98 5A                                   DB RattlerVertSize           ; Vertex Count
   9++EB99 1A                                   DB RattlerEdgesCnt           ; Edges Count
  10++EB9A 96 00                                DW $0096                     ; Bounty LoHi
  11++EB9C 34                                   DB RattlerNormalsSize        ; Face (Normal) Count
  12++EB9D 0A                                   DB $0A                       ; Range when it turns to a dot
  13++EB9E 71                                   DB $71                       ; Energy Max
  14++EB9F 1F                                   DB $1F                       ; Speed Max
  15++EBA0 70 EC                                DW RattlerNormals            ; Normals
  16++EBA2 01                                   DB $01                       ; Q scaling
  17++EBA3 22                                   DB $20 | ShipMissiles2       ; Laser power and Nbr Missiles
  18++EBA4 AE EB                                DW RattlerVertices           ; Verticles Address
  19++EBA6 00                                   DB ShipTypeNormal            ; Ship Type
  20++EBA7 00                                   DB 0                         ; NewB Tactics
  21++EBA8 80                                   DB ShipCanAnger              ; AI Flags
  22++EBA9 90                                   DB $90                       ; chance of ECM module
  23++EBAA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBAB 00 00                                DW $0000                            ; no solid data
  25++EBAD 00                                   DB $00                              ; no solid data
  26++EBAE
  27++EBAE
  28++EBAE
  29++EBAE 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  29++EBB2 89 23
  30++EBB4 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  30++EBB8 9A 34
  31++EBBA 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  31++EBBE 78 12
  32++EBC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  32++EBC4 AB 45
  33++EBC6 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  33++EBCA 67 01
  34++EBCC 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  34++EBD0 CC 5B
  35++EBD2 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  35++EBD6 CC 06
  36++EBD8 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  36++EBDC FF FF
  37++EBDE 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  37++EBE2 FF FF
  38++EBE4 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  38++EBE8 CC CC
  39++EBEA 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  39++EBEE CC CC
  40++EBF0 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  40++EBF4 CC CC
  41++EBF6 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  41++EBFA CC CC
  42++EBFC 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  42++EC00 CC CC
  43++EC02 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  43++EC06 CC CC
  44++EC08
  45++EC08              RattlerVertSize: equ $ - RattlerVertices
  46++EC08
  47++EC08
  48++EC08 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  49++EC0C 1F 17 08 10  	DB $1F, $17, $08, $10
  50++EC10 1F 28 00 08  	DB $1F, $28, $00, $08
  51++EC14 1F 39 00 04  	DB $1F, $39, $00, $04
  52++EC18 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  53++EC1C 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  54++EC20 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  55++EC24 1F 6C 18 20  	DB $1F, $6C, $18, $20
  56++EC28 1F 01 10 1C  	DB $1F, $01, $10, $1C
  57++EC2C 1F 67 10 20  	DB $1F, $67, $10, $20
  58++EC30 1F 12 08 1C  	DB $1F, $12, $08, $1C
  59++EC34 1F 78 08 20  	DB $1F, $78, $08, $20
  60++EC38 1F 23 00 1C  	DB $1F, $23, $00, $1C
  61++EC3C 1F 89 00 20  	DB $1F, $89, $00, $20
  62++EC40 1F 34 04 1C  	DB $1F, $34, $04, $1C
  63++EC44 1F 9A 04 20  	DB $1F, $9A, $04, $20
  64++EC48 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  65++EC4C 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  66++EC50 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  67++EC54 1F BC 14 20  	DB $1F, $BC, $14, $20
  68++EC58 0A CC 24 28  	DB $0A, $CC, $24, $28
  69++EC5C 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  70++EC60 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  71++EC64 0A CC 30 34  	DB $0A, $CC, $30, $34
  72++EC68 0A CC 34 38  	DB $0A, $CC, $34, $38
  73++EC6C 0A CC 38 30  	DB $0A, $CC, $38, $30
  74++EC70
  75++EC70              RattlerEdgesSize: equ $ - RattlerEdges
  76++EC70
  77++EC70
  78++EC70              RattlerEdgesCnt: equ RattlerEdgesSize/4
  79++EC70
  80++EC70
  81++EC70 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  82++EC74 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  83++EC78 9F 09 5D 12  	DB $9F, $09, $5D, $12
  84++EC7C 1F 09 5D 12  	DB $1F, $09, $5D, $12
  85++EC80 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  86++EC84 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  87++EC88 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  88++EC8C DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  89++EC90 DF 09 5D 12  	DB $DF, $09, $5D, $12
  90++EC94 5F 09 5D 12  	DB $5F, $09, $5D, $12
  91++EC98 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  92++EC9C 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  93++ECA0 3F 00 00 60  	DB $3F, $00, $00, $60
  94++ECA4
  95++ECA4              RattlerNormalsSize: equ $ - RattlerNormals
  96++ECA4              RattlerLen: equ $ - Rattler
  97++ECA4
# file closed: ./Data/ships/Rattler.asm
  97+ ECA4
# file closed: ./Data/ShipModelMetaData3.asm
1482  ECA4              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1483  ECA4              ;;Privisioned for more models     SLOT    ShipModelsAddr
1484  ECA4              ;;Privisioned for more models     PAGE    BankShipModels4
1485  ECA4              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1486  ECA4                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
1487  ECA4              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1488  ECA4                                  SLOT    SpritemembankAddr
1489  ECA4                                  PAGE    BankSPRITE
1490  ECA4                                  ORG     SpritemembankAddr, BankSPRITE
1491  E000                                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_station                     equ compass_sun      +1          ; 31
  41+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  43+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  44+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  45+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  46+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  47+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  48+ E000
  49+ E000              glactic_pattern_1					equ 0
  50+ E000              glactic_hyper_pattern_1             equ 2
  51+ E000              local_present_cursor                equ 4
  52+ E000              local_hyper_pattern                 equ 7
  53+ E000              reticule_pattern_1                  equ 10
  54+ E000              reticule_pattern_2                  equ 11
  55+ E000              laser_pattern_1                     equ 12
  56+ E000              laser_pattern_2                     equ 13
  57+ E000              laser_pattern_3                     equ 14
  58+ E000              laser_pattern_4                     equ 15
  59+ E000              laser_pattern_5                     equ 16
  60+ E000              targetting_pattern                  equ 23
  61+ E000              lock_pattern                        equ 24
  62+ E000              ecm_pattern                         equ 25
  63+ E000              missile_ready_pattern               equ 26
  64+ E000              missile_armed_pattern               equ 27
  65+ E000              missile_locked_pattern              equ 28
  66+ E000
  67+ E000              compass_sun_infront                 equ 17
  68+ E000              compass_sun_behind                  equ 18
  69+ E000              compass_station_infront             equ 19
  70+ E000              compass_station_behind              equ 20
  71+ E000              spritecursoroffset					equ 17
  72+ E000              spriteborderoffset                  equ 32
  73+ E000
  74+ E000              HideSprite:                 MACRO   spritenbr
  75+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  76+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  77+ E000                                          ENDM
  78+ E000
  79+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  80+ E000              sprite_big:
  81+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  82+ E001 F5                                       push	af									; save id for next few
  83+ E002 D5                                       push	de
  84+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  85+ E006              ; write out X position bits 1 to 8
  86+ E006 79                                       ld		a,c
  87+ E007 21 11 00                                 ld      hl,spritecursoroffset
  88+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  89+ E00C 7D                                       ld		a,l
  90+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  91+ E010              ; write out Y position bits 1 to 8
  92+ E010 EB                                       ex		de,hl								; de = full x position
  93+ E011 78                                       ld		a,b
  94+ E012 21 11 00                                 ld      hl,spritecursoroffset
  95+ E015 ED 31                                    add		hl,a
  96+ E017 7D                                       ld		a,l                                 ; hl = full y position
  97+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  98+ E01B              ; write out MSB of X as its an anchor
  99+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 100+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 101+ E01F              ; write out sprite pattern
 102+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
 103+ E020 7B                                       ld		a,e
 104+ E021 F6 C0                                    or		%11000000							;
 105+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 106+ E026              ; write out msb of y in h must be bit 0 only
 107+ E026 3E 00                                    ld		a,%00000000							; big unified composite
 108+ E028 B4                                       or		h									; MSB Y
 109+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 110+ E02C F1           .BigSprite1:                pop		af
 111+ E02D 3C                                       inc		a
 112+ E02E F5                                       push	af
 113+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E032 3E 10                                    ld		a,16
 115+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E037 AF                                       xor 	a
 117+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 119+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 120+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 121+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 122+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 123+ E048 F1           .BigSprite2:                pop		af
 124+ E049 3C                                       inc		a
 125+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 126+ E04D AF                                       xor		a
 127+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 128+ E051 3E 10                                    ld		a,16
 129+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 130+ E056 AF                                       xor		a
 131+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 132+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 133+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 134+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 135+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E064 C9                                       ret
 137+ E065
 138+ E065              ; for a sinle sprite within 256x192 area
 139+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 140+ E066 D5                                   push    de
 141+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 142+ E06A              ; write out X position bits 1 to 8
 143+ E06A 79                                   ld		a,c                                 ; a = column (c)
 144+ E06B 21 20 00                             ld      hl,spriteborderoffset
 145+ E06E ED 31                                add		hl,a                                ; hl = full x position
 146+ E070 EB                                   ex		de,hl								; de = full x position
 147+ E071 7B                                   ld		a,e
 148+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E075              ; write out Y position bits 1 to 8
 150+ E075 78                                   ld		a,b                                 ; a = row
 151+ E076 21 20 00                             ld      hl,spriteborderoffset
 152+ E079 ED 31                                add		hl,a
 153+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 154+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 155+ E07F              ; write out MSB of X as its an anchor
 156+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 157+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 158+ E083              ; write out sprite pattern
 159+ E083 D1                                   pop     de
 160+ E084 7B                                   ld		a,e
 161+ E085 F6 80                                or		%10000000							;
 162+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 163+ E08A              ; write out extended attribute
 164+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 165+ E08C B4                                   or      h
 166+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 167+ E090 C9                                   ret
 168+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 169+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 170+ E093 1E 00                                    ld		e,0
 171+ E095 78                                       ld		a,b
 172+ E096 C6 18                                    add		a,galactic_chart_y_offset
 173+ E098 47                                       ld		b,a
 174+ E099 CD 00 E0                                 call	sprite_big
 175+ E09C C9                                       ret
 176+ E09D
 177+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 178+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 179+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 180+ E0A0 47                                       ld		b,a
 181+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 182+ E0A3 1E 03                                    ld		e,3
 183+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 184+ E0A8 C9                                       ret
 185+ E0A9
 186+ E0A9
 187+ E0A9              ; moves hyperspace cursor to target system x position
 188+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 189+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 190+ E0AE              ; write out X position bits 1 to 8
 191+ E0AE 79                                       ld		a,c
 192+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 193+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 194+ E0B4 7D                                       ld		a,l
 195+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 196+ E0B8              ; write out Y position bits 1 to 8
 197+ E0B8 EB                                       ex		de,hl								; de = full x position
 198+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 199+ E0BB 78                                       ld      a,b
 200+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 201+ E0BF ED 31                                    add		hl,a
 202+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 203+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 204+ E0C5              ; write out MSB of X as its an anchor
 205+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 206+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 207+ E0C9              ; write out msb of y in h must be bit 0 only
 208+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 209+ E0CB B2                                       or		d									; MSB Y
 210+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 211+ E0CF C9                                       ret
 212+ E0D0
 213+ E0D0
 214+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 215+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 216+ E0D5              ; write out X position bits 1 to 8
 217+ E0D5 79                                       ld		a,c
 218+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 219+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 220+ E0DB 7D                                       ld		a,l
 221+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 222+ E0DF              ; write out Y position bits 1 to 8
 223+ E0DF EB                                       ex		de,hl								; de = full x position
 224+ E0E0 78                                       ld		a,b
 225+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 226+ E0E4 ED 31                                    add		hl,a
 227+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 228+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 229+ E0EA              ; write out MSB of X as its an anchor
 230+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 231+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 232+ E0EE              ; write out msb of y in h must be bit 0 only
 233+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 234+ E0F0 B2                                       or		d									; MSB Y
 235+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 236+ E0F4 C9                                       ret
 237+ E0F5
 238+ E0F5              ; "sprite_local_cursor BC = rowcol"
 239+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 240+ E0F7 1E 04                                    ld		e,local_present_cursor
 241+ E0F9 CD 00 E0                                 call	sprite_big
 242+ E0FC C9                                       ret
 243+ E0FD
 244+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 245+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 246+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 247+ E101 CD 00 E0                                 call	sprite_big
 248+ E104 C9                                       ret
 249+ E105
 250+ E105              compass_offset              equ 2
 251+ E105              ScannerX                    equ 128
 252+ E105              ScannerY                    equ 171
 253+ E105              SunScanCenterX              equ 92
 254+ E105              SunScanCenterY              equ 171
 255+ E105              PlanetScanCenterX           equ 229
 256+ E105              PlanetScanCenterY           equ 171
 257+ E105
 258+ E105
 259+ E105              ; Put on compas based on bc = Y X position offset from compass center
 260+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 261+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 262+ E10A              ; write out X position bits 1 to 8
 263+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 264+ E10C 81                                   add     a,c
 265+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 266+ E110              ; write out Y position bits 1 to 8
 267+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 268+ E112 90                                   sub     b
 269+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 270+ E116 C9                                   ret
 271+ E117
 272+ E117              ; Put on compas based on bc = Y X position offset from compass center
 273+ E117 3E 21        compass_station_move:   ld		a,compass_station
 274+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 275+ E11C              ; write out X position bits 1 to 8
 276+ E11C 3E E3                                ld      a, PlanetScanCenterX-compass_offset
 277+ E11E 81                                   add     a,c
 278+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 279+ E122              ; write out Y position bits 1 to 8
 280+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 281+ E124 90                                   sub     b
 282+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 283+ E128 C9                                   ret
 284+ E129
 285+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 286+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 287+ E129              ReticuleOffset          EQU 8
 288+ E129
 289+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 290+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 291+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 292+ E129
 293+ E129              sprite_missile_x        EQU 2+32
 294+ E129              sprite_missile_y        EQU 192-8+32
 295+ E129
 296+ E129              sprite_ecm_x            EQU (6*8) +2 +32
 297+ E129              sprite_ecm_y            EQU 192-15+32
 298+ E129
 299+ E129 3E 24        sprite_ECM:             ld      a,ECM_sprite
 300+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 301+ E12E 3E 52                                ld      a,sprite_ecm_x
 302+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 303+ E133 3E D1                                ld		a,sprite_ecm_y
 304+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 305+ E138 3E 99                                ld      a,ecm_pattern | %10000000
 306+ E13A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 307+ E13D C9                                   ret
 308+ E13E
 309+ E13E ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 310+ E141 79                                   ld      a,c
 311+ E142 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 312+ E145 3E D8                                ld		a,sprite_missile_y
 313+ E147 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 314+ E14A 3E 9A                                ld      a,missile_ready_pattern | %10000000
 315+ E14C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 316+ E14F C9                                   ret
 317+ E150
 318+ E150 3E 25        sprite_missile_1:       ld      a,missile_sprite1
 319+ E152 0E 22                                ld      c,sprite_missile_x
 320+ E154 C3 3E E1                             jp      sprite_missile_ready
 321+ E157
 322+ E157 3E 26        sprite_missile_2:       ld      a,missile_sprite2
 323+ E159 0E 31                                ld      c,sprite_missile_x+15
 324+ E15B C3 3E E1                             jp      sprite_missile_ready
 325+ E15E
 326+ E15E 3E 27        sprite_missile_3:       ld      a,missile_sprite3
 327+ E160 0E 3B                                ld      c,sprite_missile_x+25
 328+ E162 C3 3E E1                             jp      sprite_missile_ready
 329+ E165
 330+ E165 3E 28        sprite_missile_4:       ld      a,missile_sprite4
 331+ E167 0E 45                                ld      c,sprite_missile_x +35
 332+ E169 C3 3E E1                             jp      sprite_missile_ready
 333+ E16C
 334+ E16C
 335+ E16C
 336+ E16C 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 337+ E16E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 338+ E171 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 339+ E173 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 340+ E176 3E 7F                                ld		a,ReticuleCentreY
 341+ E178 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 342+ E17B AF                                   xor     a
 343+ E17C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 344+ E17F 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 345+ E181 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 346+ E184 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 347+ E186 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 348+ E189 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 349+ E18B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 350+ E18E 3E 7F                                ld		a,ReticuleCentreY
 351+ E190 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 352+ E193 3E 08                                ld      a,%00001000
 353+ E195 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 354+ E198 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 355+ E19A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 356+ E19D 3E 0E        .topReticule            ld      a,reticlule_sprite3
 357+ E19F ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 358+ E1A2 3E 9F                                ld      a,ReticuleCentreX
 359+ E1A4 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 360+ E1A7 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 361+ E1A9 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 362+ E1AC AF                                   xor     a
 363+ E1AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 364+ E1B0 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 365+ E1B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 366+ E1B5 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 367+ E1B7 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 368+ E1BA 3E 9F                                ld      a,ReticuleCentreX
 369+ E1BC ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 370+ E1BF 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 371+ E1C1 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E1C4 3E 04                                ld      a,%00000100
 373+ E1C6 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 374+ E1C9 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 375+ E1CB ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 376+ E1CE C9                                   ret
 377+ E1CF
 378+ E1CF              laserbasex              equ 6
 379+ E1CF              laserbasey              equ 14
 380+ E1CF
 381+ E1CF              ShowSprite              MACRO   spritenbr, patternnbr
 382+ E1CF ~                                    ld      a, spritenbr
 383+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 384+ E1CF ~                                    ld      a,patternnbr | %10000000
 385+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 386+ E1CF                                      ENDM
 387+ E1CF
 388+ E1CF              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 389+ E1CF ~                                    ld      a, spriteL
 390+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 391+ E1CF ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 392+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 393+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 394+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 395+ E1CF ~                                    xor     a
 396+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 397+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 398+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 399+ E1CF                                      ENDM
 400+ E1CF
 401+ E1CF              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 402+ E1CF ~                                    ld      a, spriteL
 403+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 404+ E1CF ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 405+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 406+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 407+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 408+ E1CF ~                                    ld      a,%00001000
 409+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 410+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 411+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 412+ E1CF                                      ENDM
 413+ E1CF
 414+ E1CF              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 414+ E1CF 3E 24       >                        ld      a, ECM_sprite
 414+ E1D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 414+ E1D4 3E 99       >                        ld      a,ecm_pattern | %10000000
 414+ E1D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 415+ E1D9 C9                                   ret
 416+ E1DA
 417+ E1DA              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 417+ E1DA 3E 25       >                        ld      a, missile_sprite1
 417+ E1DC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 417+ E1DF 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 417+ E1E1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 418+ E1E4 C9                                   ret
 419+ E1E5
 420+ E1E5              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 420+ E1E5 3E 26       >                        ld      a, missile_sprite2
 420+ E1E7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 420+ E1EA 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 420+ E1EC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 421+ E1EF C9                                   ret
 422+ E1F0
 423+ E1F0              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 423+ E1F0 3E 27       >                        ld      a, missile_sprite3
 423+ E1F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 423+ E1F5 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 423+ E1F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 424+ E1FA C9                                   ret
 425+ E1FB
 426+ E1FB              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 426+ E1FB 3E 28       >                        ld      a, missile_sprite4
 426+ E1FD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 426+ E200 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 426+ E202 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 427+ E205 C9                                   ret
 428+ E206
 429+ E206              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 429+ E206 3E 25       >                        ld      a, missile_sprite1
 429+ E208 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 429+ E20B 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 429+ E20D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 430+ E210 C9                                   ret
 431+ E211
 432+ E211              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 432+ E211 3E 25       >                        ld      a, missile_sprite1
 432+ E213 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 432+ E216 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 432+ E218 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 433+ E21B C9                                   ret
 434+ E21C
 435+ E21C
 436+ E21C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 436+ E21C 3E 20       >                        ld      a, compass_sun
 436+ E21E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 436+ E221 3E 91       >                        ld      a,compass_sun_infront | %10000000
 436+ E223 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 437+ E226 C9                                    ret
 438+ E227
 439+ E227              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 439+ E227 3E 20       >                        ld      a, compass_sun
 439+ E229 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 439+ E22C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 439+ E22E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 440+ E231 C9                                    ret
 441+ E232
 442+ E232              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 442+ E232 3E 21       >                        ld      a, compass_station
 442+ E234 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 442+ E237 3E 93       >                        ld      a,compass_station_infront | %10000000
 442+ E239 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 443+ E23C C9                                    ret
 444+ E23D
 445+ E23D              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 445+ E23D 3E 21       >                        ld      a, compass_station
 445+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 445+ E242 3E 94       >                        ld      a,compass_station_behind | %10000000
 445+ E244 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 446+ E247 C9                                    ret
 447+ E248
 448+ E248              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 448+ E248 3E 10       >                        ld      a, laser_sprite1
 448+ E24A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 448+ E24D 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 448+ E24F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 448+ E252 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 448+ E254 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 448+ E257 AF          >                        xor     a
 448+ E258 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 448+ E25B 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 448+ E25D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 449+ E260                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 449+ E260 3E 11       >                        ld      a, laser_sprite2
 449+ E262 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 449+ E265 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 449+ E267 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 449+ E26A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 449+ E26C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 449+ E26F AF          >                        xor     a
 449+ E270 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 449+ E273 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 449+ E275 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 450+ E278                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 450+ E278 3E 12       >                        ld      a, laser_sprite3
 450+ E27A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E27D 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 450+ E27F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 450+ E282 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 450+ E284 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 450+ E287 AF          >                        xor     a
 450+ E288 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 450+ E28B 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 450+ E28D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 451+ E290                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 451+ E290 3E 13       >                        ld      a, laser_sprite4
 451+ E292 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 451+ E295 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 451+ E297 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 451+ E29A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 451+ E29C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 451+ E29F AF          >                        xor     a
 451+ E2A0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 451+ E2A3 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 451+ E2A5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 452+ E2A8                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 452+ E2A8 3E 14       >                        ld      a, laser_sprite5
 452+ E2AA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 452+ E2AD 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 452+ E2AF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E2B2 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 452+ E2B4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 452+ E2B7 AF          >                        xor     a
 452+ E2B8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 452+ E2BB 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 452+ E2BD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 453+ E2C0                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 453+ E2C0 3E 18       >                        ld      a, laser_sprite9
 453+ E2C2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 453+ E2C5 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 453+ E2C7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 453+ E2CA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 453+ E2CC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 453+ E2CF 3E 08       >                        ld      a,%00001000
 453+ E2D1 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 453+ E2D4 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 453+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 454+ E2D9                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 454+ E2D9 3E 19       >                        ld      a, laser_sprite10
 454+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 454+ E2DE 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 454+ E2E0 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 454+ E2E3 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 454+ E2E5 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E2E8 3E 08       >                        ld      a,%00001000
 454+ E2EA ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 454+ E2ED 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 454+ E2EF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 455+ E2F2                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 455+ E2F2 3E 1A       >                        ld      a, laser_sprite11
 455+ E2F4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 455+ E2F7 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 455+ E2F9 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 455+ E2FC 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 455+ E2FE ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 455+ E301 3E 08       >                        ld      a,%00001000
 455+ E303 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 455+ E306 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 455+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 456+ E30B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 456+ E30B 3E 1B       >                        ld      a, laser_sprite12
 456+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 456+ E310 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 456+ E312 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 456+ E315 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 456+ E317 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 456+ E31A 3E 08       >                        ld      a,%00001000
 456+ E31C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 456+ E31F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 456+ E321 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 457+ E324                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 457+ E324 3E 1C       >                        ld      a, laser_sprite13
 457+ E326 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 457+ E329 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 457+ E32B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 457+ E32E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 457+ E330 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 457+ E333 3E 08       >                        ld      a,%00001000
 457+ E335 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 457+ E338 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 457+ E33A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 458+ E33D C9                                   ret
 459+ E33E                                      ; Need simple show updates just to update the show attribute
 460+ E33E
 461+ E33E              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 461+ E33E 3E 10       >                        ld      a, laser_sprite1
 461+ E340 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 461+ E343 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 461+ E345 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 462+ E348                                      ShowSprite laser_sprite2 ,laser_pattern_2
 462+ E348 3E 11       >                        ld      a, laser_sprite2
 462+ E34A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 462+ E34D 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 462+ E34F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 463+ E352                                      ShowSprite laser_sprite3 ,laser_pattern_3
 463+ E352 3E 12       >                        ld      a, laser_sprite3
 463+ E354 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 463+ E357 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 463+ E359 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 464+ E35C                                      ShowSprite laser_sprite4 ,laser_pattern_4
 464+ E35C 3E 13       >                        ld      a, laser_sprite4
 464+ E35E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 464+ E361 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 464+ E363 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 465+ E366                                      ShowSprite laser_sprite5 ,laser_pattern_5
 465+ E366 3E 14       >                        ld      a, laser_sprite5
 465+ E368 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 465+ E36B 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 465+ E36D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 466+ E370                                      ShowSprite laser_sprite9 ,laser_pattern_1
 466+ E370 3E 18       >                        ld      a, laser_sprite9
 466+ E372 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 466+ E375 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 466+ E377 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 467+ E37A                                      ShowSprite laser_sprite10,laser_pattern_2
 467+ E37A 3E 19       >                        ld      a, laser_sprite10
 467+ E37C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 467+ E37F 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 467+ E381 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 468+ E384                                      ShowSprite laser_sprite11,laser_pattern_3
 468+ E384 3E 1A       >                        ld      a, laser_sprite11
 468+ E386 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 468+ E389 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 468+ E38B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 469+ E38E                                      ShowSprite laser_sprite12,laser_pattern_4
 469+ E38E 3E 1B       >                        ld      a, laser_sprite12
 469+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 469+ E393 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 469+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 470+ E398                                      ShowSprite laser_sprite13,laser_pattern_5
 470+ E398 3E 1C       >                        ld      a, laser_sprite13
 470+ E39A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 470+ E39D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 470+ E39F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 471+ E3A2 C9                                   ret
 472+ E3A3
 473+ E3A3              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 473+ E3A3 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 473+ E3A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3AB                                      HideSprite galactic_cursor_sprite1
 474+ E3AB ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 474+ E3AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 475+ E3B3                                      HideSprite galactic_cursor_sprite2
 475+ E3B3 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 475+ E3B7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 476+ E3BB C9                                   ret
 477+ E3BC
 478+ E3BC              sprite_galactic_hyper_hide:
 479+ E3BC                                      HideSprite galactic_hyper_sprite
 479+ E3BC ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 479+ E3C0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E3C4                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 481+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E3C4              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 483+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 484+ E3C4 C9                                   ret
 485+ E3C5
 486+ E3C5              sprite_local_hide:      HideSprite local_cursor_sprite
 486+ E3C5 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 486+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E3CD                                      HideSprite local_cursor_sprite1
 487+ E3CD ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 487+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 488+ E3D5                                      HideSprite local_cursor_sprite2
 488+ E3D5 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 488+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 489+ E3DD C9                                   ret
 490+ E3DE
 491+ E3DE              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 491+ E3DE ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 491+ E3E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E3E6                                      HideSprite local_hyper_sprite1
 492+ E3E6 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 492+ E3EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 493+ E3EE                                      HideSprite local_hyper_sprite2
 493+ E3EE ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 493+ E3F2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 494+ E3F6 C9                                   ret
 495+ E3F7
 496+ E3F7              sprite_reticule_hide:   HideSprite reticlule_sprite1
 496+ E3F7 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 496+ E3FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E3FF                                      HideSprite reticlule_sprite2
 497+ E3FF ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 497+ E403 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E407                                      HideSprite reticlule_sprite3
 498+ E407 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 498+ E40B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 499+ E40F                                      HideSprite reticlule_sprite4
 499+ E40F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 499+ E413 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 500+ E417 C9                                   ret
 501+ E418
 502+ E418              sprite_ecm_hide:        HideSprite ECM_sprite
 502+ E418 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 502+ E41C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 503+ E420 C9                                   ret
 504+ E421
 505+ E421              sprite_missile_1_hide:  HideSprite missile_sprite1
 505+ E421 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 505+ E425 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 506+ E429 C9                                   ret
 507+ E42A
 508+ E42A              sprite_missile_2_hide:  HideSprite missile_sprite2
 508+ E42A ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 508+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 509+ E432 C9                                   ret
 510+ E433
 511+ E433              sprite_missile_3_hide:  HideSprite missile_sprite3
 511+ E433 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 511+ E437 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 512+ E43B C9                                   ret
 513+ E43C
 514+ E43C              sprite_missile_4_hide:  HideSprite missile_sprite4
 514+ E43C ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 514+ E440 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 515+ E444 C9                                   ret
 516+ E445
 517+ E445 CD 21 E4     sprite_missile_all_hide:call  sprite_missile_1_hide
 518+ E448 CD 2A E4                             call  sprite_missile_2_hide
 519+ E44B CD 33 E4                             call  sprite_missile_3_hide
 520+ E44E CD 3C E4                             call  sprite_missile_4_hide
 521+ E451 C9                                   ret
 522+ E452
 523+ E452 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 524+ E454 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 525+ E457 3E 7F                                ld      a,TargetetingCentreX1
 526+ E459 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 527+ E45C 3E 78                                ld		a,TargetetingCentreY
 528+ E45E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 529+ E461 AF                                   xor     a
 530+ E462 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 531+ E465 3E 97                                ld      a,targetting_pattern | %10000000
 532+ E467 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 533+ E46A 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 534+ E46C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 535+ E46F 3E AF                                ld      a,TargetetingCentreX2
 536+ E471 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 537+ E474 3E 78                                ld		a,TargetetingCentreY
 538+ E476 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 539+ E479 3E 08                                ld      a,%00001000
 540+ E47B ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 541+ E47E 3E 97                                ld      a,targetting_pattern | %10000000
 542+ E480 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 543+ E483 C9                                   ret
 544+ E484
 545+ E484 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 546+ E486 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 547+ E489 3E 7F                                ld      a,TargetetingCentreX1
 548+ E48B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 549+ E48E 3E 78                                ld		a,TargetetingCentreY
 550+ E490 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 551+ E493 AF                                   xor     a
 552+ E494 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 553+ E497 3E 98                                ld      a,lock_pattern | %10000000
 554+ E499 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 555+ E49C 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 556+ E49E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 557+ E4A1 3E AF                                ld      a,TargetetingCentreX2
 558+ E4A3 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 559+ E4A6 3E 78                                ld		a,TargetetingCentreY
 560+ E4A8 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 561+ E4AB 3E 08                                ld      a,%00001000
 562+ E4AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 563+ E4B0 3E 98                                ld      a,lock_pattern | %10000000
 564+ E4B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 565+ E4B5 C9                                   ret
 566+ E4B6
 567+ E4B6
 568+ E4B6
 569+ E4B6              sprite_targetting_hide: HideSprite targetting_sprite1
 569+ E4B6 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 569+ E4BA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 570+ E4BE                                      HideSprite targetting_sprite2
 570+ E4BE ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 570+ E4C2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 571+ E4C6 C9                                   ret
 572+ E4C7
 573+ E4C7              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 573+ E4C7 3E 22       >                        ld      a, targetting_sprite1
 573+ E4C9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 573+ E4CC 3E 97       >                        ld      a,targetting_pattern | %10000000
 573+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 574+ E4D1                                      ShowSprite targetting_sprite2, targetting_pattern
 574+ E4D1 3E 23       >                        ld      a, targetting_sprite2
 574+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 574+ E4D6 3E 97       >                        ld      a,targetting_pattern | %10000000
 574+ E4D8 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 575+ E4DB C9                                   ret
 576+ E4DC
 577+ E4DC              sprite_laser_hide:      HideSprite laser_sprite1
 577+ E4DC ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 577+ E4E0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 578+ E4E4                                      HideSprite laser_sprite2
 578+ E4E4 ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 578+ E4E8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 579+ E4EC                                      HideSprite laser_sprite3
 579+ E4EC ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 579+ E4F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 580+ E4F4                                      HideSprite laser_sprite4
 580+ E4F4 ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 580+ E4F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 581+ E4FC                                      HideSprite laser_sprite5
 581+ E4FC ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 581+ E500 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 582+ E504                                      HideSprite laser_sprite6
 582+ E504 ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 582+ E508 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 583+ E50C                                      HideSprite laser_sprite7
 583+ E50C ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 583+ E510 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 584+ E514                                      HideSprite laser_sprite8
 584+ E514 ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 584+ E518 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 585+ E51C                                      HideSprite laser_sprite9
 585+ E51C ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 585+ E520 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 586+ E524                                      HideSprite laser_sprite10
 586+ E524 ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 586+ E528 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 587+ E52C                                      HideSprite laser_sprite11
 587+ E52C ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 587+ E530 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 588+ E534                                      HideSprite laser_sprite12
 588+ E534 ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 588+ E538 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 589+ E53C                                      HideSprite laser_sprite13
 589+ E53C ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 589+ E540 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 590+ E544                                      HideSprite laser_sprite14
 590+ E544 ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 590+ E548 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 591+ E54C                                      HideSprite laser_sprite15
 591+ E54C ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 591+ E550 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 592+ E554                                      HideSprite laser_sprite16
 592+ E554 ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 592+ E558 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 593+ E55C C9                                   ret
 594+ E55D
 595+ E55D              sprite_compass_hide:    HideSprite compass_sun
 595+ E55D ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 595+ E561 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 596+ E565                                      HideSprite compass_station
 596+ E565 ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 596+ E569 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 597+ E56D C9                                   ret
 598+ E56E
 599+ E56E CD A3 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 600+ E571 CD BC E3                             call	sprite_galactic_hyper_hide
 601+ E574 CD C5 E3                             call	sprite_local_hide
 602+ E577 CD DE E3                             call	sprite_local_hyper_hide
 603+ E57A CD F7 E3                             call    sprite_reticule_hide
 604+ E57D CD DC E4                             call    sprite_laser_hide
 605+ E580 CD 5D E5                             call    sprite_compass_hide
 606+ E583 CD B6 E4                             call    sprite_targetting_hide
 607+ E586 CD 45 E4                             call    sprite_missile_all_hide
 608+ E589 C9                                   ret
 609+ E58A
 610+ E58A CD 6E E5     sprite_cls_all:         call    sprite_cls_cursors
 611+ E58D CD 18 E4                             call    sprite_ecm_hide
 612+ E590 CD 45 E4                             call    sprite_missile_all_hide
 613+ E593 C9                                   ret
 614+ E594
 615+ E594 CD 6E E5     init_sprites:           call		sprite_cls_cursors
 616+ E597 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 617+ E59B C9                                   ret
 618+ E59C
 619+ E59C
 620+ E59C              select_sprite_a:        MACRO
 621+ E59C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 622+ E59C                                      ENDM
 623+ E59C
 624+ E59C              set_sprite_x_low_a:     MACRO
 625+ E59C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 626+ E59C                                      ENDM
 627+ E59C
 628+ E59C              set_sprite_y_low_a:     MACRO
 629+ E59C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 630+ E59C                                      ENDM
 631+ E59C
 632+ E59C              set_sprite_x_msb_anc:   MACRO
 633+ E59C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 634+ E59C                                      ENDM
 635+ E59C
 636+ E59C              set_sprite_pat_a:       MACRO
 637+ E59C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 638+ E59C                                      ENDM
 639+ E59C
 640+ E59C              set_sprite_pat_a_nx:    MACRO
 641+ E59C ~                                    and     %10111111
 642+ E59C ~                                    set_sprite_pat_a
 643+ E59C                                      ENDM
 644+ E59C
 645+ E59C              set_sprite_pat_a_vis:   MACRO
 646+ E59C ~                                    or      %10000000
 647+ E59C ~                                    set_sprite_pat_a
 648+ E59C                                      ENDM
 649+ E59C
 650+ E59C              set_sprite_hidden:      MACRO
 651+ E59C ~                                    xor     a
 652+ E59C ~                                    set_sprite_pat_a
 653+ E59C                                      ENDM
 654+ E59C
 655+ E59C              set_sprite_pas_a_vis_nx:MACRO
 656+ E59C ~                                    or      %10000000
 657+ E59C ~                                    set_sprite_pat_a_nx
 658+ E59C                                      ENDM
 659+ E59C
 660+ E59C              set_sprite_extended_a:  MACRO
 661+ E59C ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 662+ E59C                                      ENDM
 663+ E59C
 664+ E59C 20           diag_x_pos:             DB 32
 665+ E59D 40           diag_y_pos:             DB 64
 666+ E59E 00           diag_sprite_nbr:        DB 0
 667+ E59F
 668+ E59F 06 40        sprite_diagnostic_clear:ld      b,64
 669+ E5A1 0E 00                                ld      c,0
 670+ E5A3 79           .HideLoop:              ld      a,c
 671+ E5A4                                      HideSprite a
 671+ E5A4 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 671+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 672+ E5AB 0C                                   inc     c
 673+ E5AC 10 F5                                djnz    .HideLoop
 674+ E5AE C9                                   ret
 675+ E5AF
 676+ E5AF AF           sprite_diagnostic:      xor a
 677+ E5B0 32 9E E5                             ld      (diag_sprite_nbr),a
 678+ E5B3 01 3B 30                             ld      bc,$303B
 679+ E5B6 ED 79                                out     (c),a
 680+ E5B8 01 57 00     .sprite_loop:           ld      bc,SPRITE_INFO_PORT
 681+ E5BB 3A 9C E5                             ld      a,(diag_x_pos)
 682+ E5BE ED 79                                out     (c),a
 683+ E5C0 C6 10                                add     16
 684+ E5C2 32 9C E5                             ld      (diag_x_pos),a
 685+ E5C5 3A 9D E5                             ld      a,(diag_y_pos)
 686+ E5C8 ED 79                                out     (c),a
 687+ E5CA AF                                   xor     a
 688+ E5CB ED 79                                out     (c),a
 689+ E5CD 3A 9E E5                             ld      a,(diag_sprite_nbr)
 690+ E5D0 F6 80                                or      %10000000
 691+ E5D2 E6 BF                                and     %10111111
 692+ E5D4 ED 79                                out     (c),a
 693+ E5D6 3A 9E E5                             ld      a,(diag_sprite_nbr)
 694+ E5D9 3C                                   inc     a
 695+ E5DA 32 9E E5                             ld      (diag_sprite_nbr),a
 696+ E5DD                                      JumpIfALTNusng 14,.sprite_loop
 696+ E5DD FE 0E       >                        cp      14
 696+ E5DF DA B8 E5    >                        jp		c, .sprite_loop
 697+ E5E2 3E 40                                ld      a,64
 698+ E5E4                                      JumpIfALTNusng  25,.cont
 698+ E5E4 FE 19       >                        cp      25
 698+ E5E6 DA EA E5    >                        jp		c, .cont
 699+ E5E9 C9                                   ret
 700+ E5EA 3E 40        .cont:                  ld      a,64
 701+ E5EC 32 9D E5                             ld      (diag_y_pos),a
 702+ E5EF 18 C7                                jr      .sprite_loop
 703+ E5F1 C9                                   ret
 704+ E5F2
 705+ E5F2
 706+ E5F2
# file closed: ./Layer3Sprites/sprite_routines.asm
1492  E5F2                                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E5F2
   2+ E5F2
   3+ E5F2
   4+ E5F2 00 00 00...  FileWork                DS 10
   5+ E5FC 00           FileNumber:             DB  0
   6+ E5FD
   7+ E5FD 4E 45 53 70  Filename                DB "NESpr"
   7+ E601 72
   8+ E602 30 30        FileNbr                 DB "00"
   9+ E604 2E 64 61 74  Extension:              DB ".dat",0
   9+ E608 00
  10+ E609
  11+ E609
  12+ E609 3A FC E5     FileNbrA:               ld      a,(FileNumber)
  13+ E60C ED 23                                swapnib
  14+ E60E E6 0F                                and     %00001111
  15+ E610 06 30                                ld      b,"0"
  16+ E612 80                                   add     b
  17+ E613 32 02 E6                             ld      (FileNbr),a
  18+ E616 3A FC E5                             ld      a,(FileNumber)
  19+ E619 E6 0F                                and     %00001111
  20+ E61B 80                                   add     b
  21+ E61C 32 03 E6                             ld      (FileNbr+1),a
  22+ E61F C9                                   ret
  23+ E620
  24+ E620 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  25+ E623                                      ZeroA                                       ;
  25+ E623 AF          >                        xor a
  26+ E624 ED 79                                out         (c),a
  27+ E626 3E 01                                ld          a,$01
  28+ E628 32 FC E5                             ld          (FileNumber),a
  29+ E62B 06 1D                                ld          b,29
  30+ E62D C5           .ReadLoop:              push        bc
  31+ E62E CD 09 E6                             call        FileNbrA
  32+ E631 CD 40 E6                             call        load_a_pattern
  33+ E634 3A FC E5                             ld          a,(FileNumber)
  34+ E637 3C                                   inc         a
  35+ E638 27                                   daa
  36+ E639 32 FC E5                             ld          (FileNumber),a
  37+ E63C C1                                   pop         bc
  38+ E63D 10 EE                                djnz        .ReadLoop
  39+ E63F C9                                   ret
  40+ E640                                                   ; write byte 256
  41+ E640
  42+ E640 21 FD E5     load_a_pattern:         ld          hl,Filename
  43+ E643 DD 21 5D E6                          ld          ix,SpriteDatabuffer
  44+ E647 01 00 01                             ld          bc,256
  45+ E64A CD 08 AC                             call        FileLoad
  46+ E64D 1E FF                                ld          e,255
  47+ E64F 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  48+ E652 21 5D E6                             ld          hl, SpriteDatabuffer
  49+ E655 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  50+ E657 1D                                   dec         e
  51+ E658 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  52+ E65A ED 90                                outinb
  53+ E65C C9                                   ret
  54+ E65D
  55+ E65D 00 00 00...  SpriteDatabuffer:       DS  256
  56+ E75D
  57+ E75D
# file closed: ./Layer3Sprites/sprite_load.asm
1493  E75D              ;;;***    INCLUDE " A./Layer3Sprites/SpriteSheet.asm"
1494  E75D                                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
1495  E75D                                  ASSERT $-SpritemembankAddr <8912 , Bank code leaks over 8K boundary
1496  E75D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1497  E75D                                  SLOT    ConsoleImageAddr
1498  E75D                                  PAGE    BankConsole
1499  E75D                                  ORG     ConsoleImageAddr, BankConsole
1500  E000                                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
1501  E900                                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
1502  E900                                  ASSERT $-ConsoleImageAddr <8912 , Bank code leaks over 8K boundary
1503  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1504  E900                                  SLOT    ViewFrontAddr
1505  E900                                  PAGE    BankFrontView
1506  E900                                  ORG     ViewFrontAddr
1507  C000                                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000
   2+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   2+ C004 74 56 69 65
   2+ C008 77 20 20 20
   2+ C00C 50 47 36 32
   3+ C010
   4+ C010 47           draw_front_calc_alpha:  ld      b,a
   5+ C011 E6 80                                and     $80
   6+ C013 32 A5 7D                             ld      (ALP2),a                            ; set sign
   7+ C016 4F                                   ld      c,a                                 ; save sign
   8+ C017 EE 80                                xor     $80
   9+ C019 32 A6 7D                             ld      (ALP2FLIP),a                        ; and oppsite sign
  10+ C01C 3A A1 7D                             ld      a,(JSTX)
  11+ C01F ED 27 80                             test    $80
  12+ C022 28 02                                jr      z,  .PositiveRoll
  13+ C024 ED 44        .NegativeRoll:          neg
  14+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  15+ C028 CB 3F                                srl     a
  16+ C02A FE 08                                cp      8
  17+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  18+ C02E CB 3F        .IncreasedDamp          srl     a
  19+ C030 32 A4 7D     .NotIncreasedDamp:      ld      (ALP1),a
  20+ C033 B1                                   or      c
  21+ C034 32 A3 7D                             ld      (ALPHA),a                           ; a = signed bit alph1
  22+ C037 21 F4 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  23+ C03A 36 04                                ld      (hl),dampenRate
  24+ C03C C9                                   ret
  25+ C03D
  26+ C03D              ; Do the same for pitch
  27+ C03D 47           draw_front_calc_beta:   ld      b,a
  28+ C03E E6 80                                and     $80
  29+ C040 32 99 7D                             ld      (BET2),a                            ; set sign
  30+ C043 4F                                   ld      c,a                                 ; save sign
  31+ C044 EE 80                                xor     $80
  32+ C046 32 9A 7D                             ld      (BET2FLIP),a                        ; and oppsite sign
  33+ C049 3A 97 7D                             ld      a,(JSTY)
  34+ C04C ED 27 80                             test    $80
  35+ C04F 28 02                                jr      z,  .PositivePitch
  36+ C051 ED 44        .NegativePitch:         neg
  37+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  38+ C055 CB 3F                                srl     a
  39+ C057 FE 08                                cp      8
  40+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  41+ C05B CB 3F        .IncreasedDamp          srl     a
  42+ C05D 32 98 7D     .NotIncreasedDamp:      ld      (BET1),a
  43+ C060 B1                                   or      c
  44+ C061 32 96 7D                             ld      (BETA),a                            ; a = signed bit bet1
  45+ C064 21 F5 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  46+ C067 36 04                                ld      (hl),dampenRate
  47+ C069 C9                                   ret
  48+ C06A
  49+ C06A              initialise_front_view:
  50+ C06A
  51+ C06A              draw_front_view:        MMUSelectLayer1
  51+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  52+ C06E CD 8F E0                             call    l1_cls
  53+ C071 CD A9 E0                             call    l1_attr_cls
  54+ C074                                      MMUSelectLayer2
  54+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  55+ C078 CD 04 E0                             call     asm_l2_double_buffer_on
  56+ C07B                                      MMUSelectSpriteBank
  56+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  57+ C07F CD 6E E5                             call    sprite_cls_cursors
  58+ C082 CD 6C E1                             call    sprite_reticule
  59+ C085 CD 48 E2                             call    sprite_laser
  60+ C088 CD 52 E4                             call    sprite_targetting
  61+ C08B CD 84 E4                             call    sprite_lock
  62+ C08E CD B6 E4                             call    sprite_targetting_hide      ; do not show targeting initially
  63+ C091 CD 29 E1                             call    sprite_ECM
  64+ C094 CD 50 E1                             call    sprite_missile_1
  65+ C097 CD 57 E1                             call    sprite_missile_2
  66+ C09A CD 5E E1                             call    sprite_missile_3
  67+ C09D CD 65 E1                             call    sprite_missile_4
  68+ C0A0 CD 18 E4                             call    sprite_ecm_hide
  69+ C0A3 CD 45 E4                             call    sprite_missile_all_hide
  70+ C0A6                                     ; call    sprite_laser_show
  71+ C0A6                                      MMUSelectConsoleBank
  71+ C0A6 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  72+ C0AA 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  73+ C0AD 11 00 E0                             ld          de,ConsoleImageData
  74+ C0B0 01 00 08                             ld          bc, ScreenL1BottomLen
  75+ C0B3 CD 4C 7D                             call        memcopy_dma
  76+ C0B6 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  77+ C0B9 11 00 E8                             ld          de,ConsoleAttributes
  78+ C0BC 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  79+ C0BF CD 4C 7D                             call        memcopy_dma
  80+ C0C2 CD CE 7A                             call        InitialiseStars
  81+ C0C5 AF                                   xor         a
  82+ C0C6 32 43 80                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  83+ C0C9 32 D0 C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  84+ C0CC 32 D1 C0                             ld          (ShowingLock),a
  85+ C0CF C9                                   ret
  86+ C0D0
  87+ C0D0 00           CurrentLock             DB      0
  88+ C0D1 00           ShowingLock             DB      0
  89+ C0D2 3A 07 81     update_front_view:      ld      a,(MissileTargettingFlag)
  90+ C0D5                                      JumpIfANEquNusng StageMissileNotTargeting,  .NoTarget
  90+ C0D5 FE FF       >                        cp     StageMissileNotTargeting
  90+ C0D7 CA E7 C0    >                        jp     z,.NoTarget
  91+ C0DA                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  91+ C0DA FE FE       >                        cp     StageMissileTargeting
  91+ C0DC CA F4 C0    >                        jp     z,.Targetting
  92+ C0DF CB 7F                                bit     7,a
  93+ C0E1 20 26                                jr      nz, .Locked
  94+ C0E3 CD B6 E4                             call    sprite_targetting_hide
  95+ C0E6 C9                                   ret
  96+ C0E7 3A D1 C0     .NoTarget:              ld      a,(ShowingLock)
  97+ C0EA                                      ReturnIfAIsZero
  97+ C0EA A7          >                        and     a
  97+ C0EB C8          >                        ret     z
  98+ C0EC                                      MMUSelectSpriteBank
  98+ C0EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  99+ C0F0 CD B6 E4                             call     sprite_targetting_hide
 100+ C0F3 C9                                   ret
 101+ C0F4              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 101+ C0F4 3A D0 C0    >                        ld      a,(CurrentLock)
 101+ C0F7 A7          >                        and     a
 101+ C0F8 CC 52 E4    >                        call    z, sprite_targetting
 102+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
 102+ C0FB 3A D1 C0    >                        ld      a,(ShowingLock)
 102+ C0FE A7          >                        and     a
 102+ C0FF CC C7 E4    >                        call    z, sprite_targetting_show
 103+ C102 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 104+ C105 22 D0 C0                             ld      (CurrentLock),hl
 105+ C108 C9                                   ret
 106+ C109              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 106+ C109 3A D0 C0    >                        ld      a,(CurrentLock)
 106+ C10C A7          >                        and     a
 106+ C10D C4 84 E4    >                        call    nz, sprite_lock
 107+ C110                                      CallIfMemZero ShowingLock, sprite_targetting_show
 107+ C110 3A D1 C0    >                        ld      a,(ShowingLock)
 107+ C113 A7          >                        and     a
 107+ C114 CC C7 E4    >                        call    z, sprite_targetting_show
 108+ C117 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 109+ C11A 22 D0 C0                             ld      (CurrentLock),hl
 110+ C11D C9                                   ret
 111+ C11E
 112+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 113+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 114+ C11E 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 114+ C122 FF 61 2A 4C
 114+ C126 23 1F 52 27
 114+ C12A 4F 14 1A 4F
 114+ C12E 1A 3A 12 16
 114+ C132 40 15 20 1A
 114+ C136 12 26 19 1E
 114+ C13A 09 1A 23 14
 114+ C13E 05 10 12 25
 114+ C142 15 00 00 12
 115+ C146 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 115+ C14A FF 89 2D A0
 115+ C14E 23 1F 96 28
 115+ C152 9D 38 1A A0
 115+ C156 24 AF 0A 16
 115+ C15A 9C 25 C4 28
 115+ C15E 12 C5 29 DF
 115+ C162 21 1A DF 21
 115+ C166 F5 1E 12 DF
 115+ C16A 20 FE 2F 12
 116+ C16E 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 116+ C172 FF 59 59 40
 116+ C176 62 1F 4F 5C
 116+ C17A 40 48 19 41
 116+ C17E 4B 1E 46 16
 116+ C182 23 47 26 40
 116+ C186 12 43 5F 15
 116+ C18A 63 1A 1F 61
 116+ C18E 00 50 12 1F
 116+ C192 61 15 6E 12
 117+ C196 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 117+ C19A FF 62 6E 40
 117+ C19E 73 1F 46 73
 117+ C1A2 49 7F 19 47
 117+ C1A6 72 3C 70 16
 117+ C1AA 1E 78 14 7E
 117+ C1AE 12 46 72 32
 117+ C1B2 78 1A 32 78
 117+ C1B6 1B 77 12 14
 117+ C1BA 7D 0A 78 12
 118+ C1BE 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 118+ C1C2 FF 83 51 91
 118+ C1C6 62 1F 91 61
 118+ C1CA 85 67 19 91
 118+ C1CE 62 96 6E 16
 118+ C1D2 96 6D 9A 69
 118+ C1D6 12 96 6E 92
 118+ C1DA 78 1A 91 78
 118+ C1DE 8C 7E 12 93
 118+ C1E2 78 9F 7E 12
 119+ C1E6 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 119+ C1EA FF A1 66 AB
 119+ C1EE 6C 1F A0 66
 119+ C1F2 AF 7F 19 AF
 119+ C1F6 7C C8 7A 16
 119+ C1FA C8 79 DF 78
 119+ C1FE 12 E0 78 E1
 119+ C202 7F 1A E0 77
 119+ C206 F5 74 12 F6
 119+ C20A 75 FE 7B 12
 120+ C20E 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 120+ C212 FF 91 49 9E
 120+ C216 48 1F 9F 48
 120+ C21A B3 40 19 9F
 120+ C21E 49 B9 55 16
 120+ C222 B6 54 C5 4C
 120+ C226 12 C3 4B CF
 120+ C22A 4F 1A CE 4F
 120+ C22E F5 3F 12 CE
 120+ C232 50 F5 69 12
 121+ C236
 122+ C236              ; Draw line at hl for b lines
 123+ C236 E5 C5        DrawLighningLine:       push    hl,,bc
 124+ C238 4E                                   ld      c,(hl)
 125+ C239 23                                   inc     hl
 126+ C23A 46                                   ld      b,(hl)
 127+ C23B 23                                   inc     hl
 128+ C23C 5E                                   ld      e,(hl)
 129+ C23D 23                                   inc     hl
 130+ C23E 56                                   ld      d,(hl)
 131+ C23F 23                                   inc     hl
 132+ C240 7E                                   ld      a,(hl)          ; colour
 133+ C241 CD D6 E9                             call    l2_draw_diagonal
 134+ C244 C1 E1                                pop     hl,,bc
 135+ C246 3E 05                                ld      a,5
 136+ C248 ED 31                                add     hl,a
 137+ C24A 10 EA                                djnz    DrawLighningLine
 138+ C24C C9                                   ret
 139+ C24D
 140+ C24D              ;Loop though all lines
 141+ C24D              ;   60$% chance of drawing a line, call draw line
 142+ C24D              ;   go to next line
 143+ C24D              ;repeat
 144+ C24D 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 145+ C24F 21 1E C1                             ld      hl,LightningLines
 146+ C252                                      MMUSelectLayer2
 146+ C252 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 147+ C256                                      ;break
 148+ C256              ; above here select which lines table we will use
 149+ C256 C5 E5        .LineLoop:              push    bc,,hl
 150+ C258 CD 1C 84                             call    doRandom
 151+ C25B FE 1E                                cp      30
 152+ C25D 30 0C                                jr      nc,.NextLine
 153+ C25F CD 1C 84                             call    doRandom
 154+ C262 E6 07                                and     $07
 155+ C264 3C                                   inc     a
 156+ C265 47                                   ld      b,a
 157+ C266 E1                                   pop     hl
 158+ C267 E5                                   push    hl
 159+ C268 CD 36 C2                             call    DrawLighningLine
 160+ C26B E1 C1        .NextLine:              pop     bc,,hl
 161+ C26D 16 08                                ld      d,8
 162+ C26F 1E 05                                ld      e,5
 163+ C271 ED 30                                mul
 164+ C273 19                                   add     hl,de
 165+ C274 10 E0                                djnz    .LineLoop
 166+ C276 3A 4D 80                             ld      a,(HyperCircle)
 167+ C279 57                                   ld      d,a
 168+ C27A 01 80 40                             ld      bc, $4080
 169+ C27D                                      ;break
 170+ C27D 1E 00                                ld      e,$00
 171+ C27F CD F4 ED                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 172+ C282 01 80 40                             ld      bc, $4080
 173+ C285 3A 4D 80                             ld      a,(HyperCircle)
 174+ C288 3C                                   inc     a
 175+ C289 57                                   ld      d,a
 176+ C28A 1E FF                                ld      e,$FF
 177+ C28C CD CA EB                             call    l2_draw_circle
 178+ C28F 3A 4D 80                             ld      a,(HyperCircle)
 179+ C292 3C                                   inc     a
 180+ C293 3C                                   inc     a
 181+ C294 FE 40                                cp      64
 182+ C296 D0                                   ret     nc
 183+ C297 32 4D 80                             ld      (HyperCircle),a
 184+ C29A                                      SetCarryFlag
 184+ C29A 37          >                        scf
 185+ C29B C9                                   ret
 186+ C29C
 187+ C29C
 188+ C29C              draw_hyperspace:        MMUSelectLayer1
 188+ C29C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 189+ C2A0 CD 8F E0                             call    l1_cls
 190+ C2A3 CD A9 E0                             call    l1_attr_cls
 191+ C2A6                                      MMUSelectLayer2
 191+ C2A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 192+ C2AA CD 04 E0                             call     asm_l2_double_buffer_on
 193+ C2AD                                      MMUSelectSpriteBank
 193+ C2AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 194+ C2B1 CD 6E E5                             call    sprite_cls_cursors
 195+ C2B4                                      MMUSelectConsoleBank
 195+ C2B4 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 196+ C2B8 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 197+ C2BB 11 00 E0                             ld          de,ConsoleImageData
 198+ C2BE 01 00 08                             ld          bc, ScreenL1BottomLen
 199+ C2C1 CD 4C 7D                             call        memcopy_dma
 200+ C2C4 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 201+ C2C7 11 00 E8                             ld          de,ConsoleAttributes
 202+ C2CA 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 203+ C2CD CD 4C 7D                             call        memcopy_dma
 204+ C2D0 CD D9 7A                             call        InitialiseHyperStars
 205+ C2D3 AF                                   xor         a
 206+ C2D4 32 43 80                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 207+ C2D7 3E 02                                ld          a,2
 208+ C2D9 32 4D 80                             ld          (HyperCircle),a
 209+ C2DC 3E FC                                ld          a,$FC
 210+ C2DE 32 43 80                             ld          (DockedFlag),a
 211+ C2E1 C9                                   ret
 212+ C2E2
 213+ C2E2              ;----------------------------------------------------------------------------------------------------------------------------------
 214+ C2E2              front_warp:             ;call        SaveCurrentDust                         ; save current dust positions
 215+ C2E2 06 AF                                ld          b,175                                    ; loop for x iterations
 216+ C2E4 C5           .warploop:              push        bc
 217+ C2E5 CD 31 7B                             call        DustForward
 218+ C2E8                                      MMUSelectLayer2
 218+ C2E8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ C2EC CD 97 E2                             call        l2_flip_buffers
 220+ C2EF C1                                   pop         bc
 221+ C2F0 10 F2                                djnz        .warploop
 222+ C2F2 C9                                   ret
 223+ C2F3
 224+ C2F3              ;----------------------------------------------------------------------------------------------------------------------------------
 225+ C2F3 C9           loop_hyperspace         ret
 226+ C2F4              ;----------------------------------------------------------------------------------------------------------------------------------
 227+ C2F4              dampenRate:             equ     $04
 228+ C2F4 04           dampenRcounter:         DB      dampenRate
 229+ C2F5 04           dampenPcounter:         DB      dampenRate
 230+ C2F6              ;----------------------------------------------------------------------------------------------------------------------------------
 231+ C2F6              input_front_view:       ;DEFUNCT ClearEngineSoundChanged
 232+ C2F6 2A 59 E0                             ld      hl,(addr_Pressed_Accellerate)
 233+ C2F9 7E                                   ld      a,(hl)
 234+ C2FA                                      JumpIfAIsZero     .TestDecellerate
 234+ C2FA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 234+ C2FB CA 17 C3    >                        jp	    z, .TestDecellerate
 235+ C2FE 3A 83 7E                             ld      a,(SHIPMAXSPEED)
 236+ C301 57                                   ld      d,a
 237+ C302 3A 84 7E                             ld      a,(DELTA)
 238+ C305                                      JumpIfAGTENusng d,.TestDecellerate
 238+ C305 BA          >                        cp     d
 238+ C306 D2 17 C3    >                        jp		nc,.TestDecellerate
 239+ C309 3C                                   inc     a
 240+ C30A 32 84 7E                             ld      (DELTA),a
 241+ C30D 2A 85 7E                             ld      hl,(DELT4Lo)
 242+ C310 ED 34 04 00                          add     hl,4
 243+ C314 22 85 7E                             ld      (DELT4Lo),hl
 244+ C317                                      ;DEFUNCT SetEngineSoundChanged
 245+ C317 2A 5B E0     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 246+ C31A 7E                                   ld      a,(hl)
 247+ C31B                                      JumpIfAIsZero   .TestLeftPressed
 247+ C31B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 247+ C31C CA 34 C3    >                        jp	    z, .TestLeftPressed
 248+ C31F 3A 84 7E                             ld      a,(DELTA)
 249+ C322                                      JumpIfAIsZero   .TestLeftPressed
 249+ C322 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C323 CA 34 C3    >                        jp	    z, .TestLeftPressed
 250+ C326 3D                                   dec     a
 251+ C327 32 84 7E                             ld      (DELTA),a
 252+ C32A 2A 85 7E                             ld      hl,(DELT4Lo)
 253+ C32D 2B                                   dec     hl
 254+ C32E 2B                                   dec     hl
 255+ C32F 2B                                   dec     hl
 256+ C330 2B                                   dec     hl
 257+ C331 22 85 7E                             ld      (DELT4Lo),hl
 258+ C334                                      ;DEFUNCT SetEngineSoundChanged
 259+ C334 2A 51 E0     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 260+ C337 7E                                   ld      a,(hl)
 261+ C338                                      JumpIfAIsZero   .TestRightPressed
 261+ C338 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C339 CA 4F C3    >                        jp	    z, .TestRightPressed
 262+ C33C 3A A1 7D                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 263+ C33F 21 A8 7D                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 264+ C342 BE                                   cp      (hl)
 265+ C343 28 0A                                jr      z,.TestRightPressed
 266+ C345                                      ;break
 267+ C345 3D                                   dec     a                                   ; increase joystick roll
 268+ C346 32 A1 7D                             ld      (JSTX),a
 269+ C349 CD 10 C0                             call    draw_front_calc_alpha
 270+ C34C C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 271+ C34F 2A 53 E0     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 272+ C352 7E                                   ld      a,(hl)
 273+ C353                                      JumpIfAIsZero   .DampenRoll
 273+ C353 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 273+ C354 CA 6A C3    >                        jp	    z, .DampenRoll
 274+ C357 3A A1 7D                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 275+ C35A 21 A7 7D                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 276+ C35D BE                                   cp      (hl)
 277+ C35E 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 278+ C360                                      ;break
 279+ C360 3C                                   inc     a                                   ; increase joystick roll
 280+ C361 32 A1 7D     .UpdateAlphRoll:        ld      (JSTX),a
 281+ C364 CD 10 C0                             call    draw_front_calc_alpha
 282+ C367 C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 283+ C36A 21 F4 C2     .DampenRoll:            ld      hl,dampenRcounter
 284+ C36D 35                                   dec     (hl)
 285+ C36E 20 14                                jr      nz,.TestDivePressed
 286+ C370 3E 04                                ld      a,dampenRate
 287+ C372 77                                   ld      (hl),a
 288+ C373 3A A1 7D                             ld      a,(JSTX)
 289+ C376 FE 00                                cp      0
 290+ C378 28 0A                                jr      z, .TestDivePressed
 291+ C37A CB 7F                                bit     7,a
 292+ C37C 28 03                                jr      z,.PosRollDampen
 293+ C37E 3C           .NegRollDampen:         inc     a
 294+ C37F 18 01                                jr      .ApplyRollDampen
 295+ C381 3D           .PosRollDampen:         dec     a
 296+ C382 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 297+ C384              ; Dive and Climb input
 298+ C384 2A 55 E0     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 299+ C387 7E                                   ld      a,(hl)
 300+ C388                                      JumpIfAIsZero   .TestClimbPressed
 300+ C388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ C389 CA 9F C3    >                        jp	    z, .TestClimbPressed
 301+ C38C 3A 97 7D                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 302+ C38F 21 9C 7D                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 303+ C392 BE                                   cp      (hl)
 304+ C393 28 0A                                jr      z,.TestClimbPressed
 305+ C395                                      ;break
 306+ C395 3D                                   dec     a                                   ; increase joystick roll
 307+ C396 32 97 7D                             ld      (JSTY),a
 308+ C399 CD 3D C0                             call    draw_front_calc_beta
 309+ C39C C3 D4 C3                             jp      .ForwardCursorKeysDone
 310+ C39F 2A 57 E0     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 311+ C3A2 7E                                   ld      a,(hl)
 312+ C3A3                                      JumpIfAIsZero   .DampenPitch
 312+ C3A3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 312+ C3A4 CA BA C3    >                        jp	    z, .DampenPitch
 313+ C3A7 3A 97 7D                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 314+ C3AA 21 9B 7D                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 315+ C3AD BE                                   cp      (hl)
 316+ C3AE 28 24                                jr      z,.ForwardCursorKeysDone
 317+ C3B0 3C                                   inc     a                                   ; increase joystick roll
 318+ C3B1 32 97 7D     .UpdateBetaPitch:       ld      (JSTY),a
 319+ C3B4 CD 3D C0                             call    draw_front_calc_beta
 320+ C3B7 C3 D4 C3                             jp      .ForwardCursorKeysDone
 321+ C3BA 21 F5 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 322+ C3BD 35                                   dec     (hl)
 323+ C3BE 20 14                                jr      nz,.ForwardCursorKeysDone
 324+ C3C0 3E 04                                ld      a,dampenRate
 325+ C3C2 77                                   ld      (hl),a
 326+ C3C3 3A 97 7D                             ld      a,(JSTY)
 327+ C3C6 FE 00                                cp      0
 328+ C3C8 28 0A                                jr      z,.ForwardCursorKeysDone
 329+ C3CA CB 7F                                bit     7,a
 330+ C3CC 28 03                                jr      z,.PosPitchDampen
 331+ C3CE 3C           .NegPitchDampen:        inc     a
 332+ C3CF 18 01                                jr      .ApplyPitchDampen
 333+ C3D1 3D           .PosPitchDampen:        dec     a
 334+ C3D2 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 335+ C3D4              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 336+ C3D4              ; be in flight and they have to force a forward view when hyperspace is pressed
 337+ C3D4              ; We won't do galatic here, but for other views force to forward view
 338+ C3D4              .ForwardCursorKeysDone: MacroIsKeyPressed c_Pressed_Hyperspace              ; Check for hyperspace
 338+ C3D4 3E 24       >                        ld      a,c_Pressed_Hyperspace
 338+ C3D6             >                        MMUSelectKeyboard
 338+ C3D6 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 338+ C3DA CD A2 E1    >                        call    is_key_pressed
 339+ C3DD 20 48                                jr      nz,.NotHyperspace
 340+ C3DF              ; If we are in hyperspace countdown then test for hyperspace
 341+ C3DF 2A 49 80                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 342+ C3E2 7C                                   ld      a,h                                 ; hyperspace
 343+ C3E3 B5                                   or      l                                   ; .
 344+ C3E4 20 41                                jr      nz,.CancelHyperspace                ; .
 345+ C3E6              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 346+ C3E6 ED 5B 2C 7F                          ld      de,(PresentSystemX)
 347+ C3EA 2A 2E 7F                             ld      hl,(TargetSystemX)
 348+ C3ED CD 55 99                             call    compare16HLDE
 349+ C3F0 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 350+ C3F2 3A 19 7F                             ld      a,(Galaxy)
 351+ C3F5                                      MMUSelectGalaxyA
 351+ C3F5 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 352+ C3F8 ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 353+ C3FC CD BB FA                             call    galaxy_name_at_bc
 354+ C3FF FE 00                                cp      0
 355+ C401 28 24                                jr      z,.NotHyperspace
 356+ C403              ; check fuel is sufficient
 357+ C403 ED 4B 2C 7F                          ld      bc,(PresentSystemX)
 358+ C407 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 359+ C40B ED 4B 2E 7F                          ld      bc,(TargetSystemX)
 360+ C40F ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 361+ C413 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 362+ C416 7C                                   ld      a,h
 363+ C417 A7                                   and     a
 364+ C418 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 365+ C41A 3A E5 83                             ld      a,(Fuel)
 366+ C41D                                      JumpIfALTNusng    l, .InsufficientFuel
 366+ C41D BD          >                        cp      l
 366+ C41E DA 27 C4    >                        jp		c, .InsufficientFuel
 367+ C421              ; set up timer countdown
 368+ C421 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 369+ C424 22 49 80                             ld      (InnerHyperCount),hl                ; .
 370+ C427              .CancelHyperspace
 371+ C427              .NoTargetSelected
 372+ C427              .InsufficientFuel
 373+ C427              .NotHyperspace:
 374+ C427              ;--- Check for in system Jump---------------------------------------
 375+ C427 2A 49 80     .CheckForWarpPressd:    ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 376+ C42A 7C                                   ld      a,h                                 ; hyperspace
 377+ C42B B5                                   or      l                                   ; .
 378+ C42C 20 0F                                jr      nz,.WarpNotPressed
 379+ C42E 3E 54                                ld      a,c_Pressed_Warp
 380+ C430                                      MMUSelectKeyboard
 380+ C430 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 381+ C434 CD 95 E1                             call    is_key_up_state
 382+ C437 28 04                                jr      z, .WarpNotPressed
 383+ C439                                      SetMemTrue  WarpPressed                     ; This signals the event , teh main loop will cancel this as an acknowlege
 383+ C439 AF          >                        xor     a
 383+ C43A 32 72 80    >                        ld      (WarpPressed),a
 384+ C43D              .WarpNotPressed:
 385+ C43D                              IFDEF   LASER_V2
 386+ C43D CD 40 82                             call    IsLaserUseable                      ; no laser or destroyed?
 387+ C440 28 3A                                jr      z,          .FireNotPressed
 388+ C442 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 389+ C444                                      MMUSelectKeyboard
 389+ C444 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 390+ C448 CD 95 E1                             call    is_key_up_state
 391+ C44B 28 2F                                jr      z,.FireNotPressed
 392+ C44D              .FirePressed:           ;break
 393+ C44D                                      JumpIfMemNotZero    CurrentCooldown,     .LaserDone
 393+ C44D 3A 22 81    >                        ld  a,(CurrentCooldown)
 393+ C450 A7          >                        and a
 393+ C451 C2 A0 C4    >                        jp  nz,.LaserDone
 394+ C454                                      JumpIfMemNotZero    CurrentBurstPause,   .LaserDone
 394+ C454 3A 21 81    >                        ld  a,(CurrentBurstPause)
 394+ C457 A7          >                        and a
 394+ C458 C2 A0 C4    >                        jp  nz,.LaserDone
 395+ C45B                                      JumpIfMemNotZero    CurrLaserBurstCount, .LaserDone
 395+ C45B 3A 24 81    >                        ld  a,(CurrLaserBurstCount)
 395+ C45E A7          >                        and a
 395+ C45F C2 A0 C4    >                        jp  nz,.LaserDone
 396+ C462                                      JumpIfMemTrue       LaserBeamOn,         .LaserDone
 396+ C462 3A 1F 81    >                        ld      a,(LaserBeamOn)
 396+ C465 A7          >                        and     a
 396+ C466 CA A0 C4    >                        jp      z, .LaserDone
 397+ C469                                      ldCopyByte          CurrLaserPulseRate,   CurrLaserBurstCount
 397+ C469 3A 1B 81    >                        ld       a,(CurrLaserPulseRate)
 397+ C46C 32 24 81    >                        ld       (CurrLaserBurstCount),a
 398+ C46F                                      ldCopyByte          CurrLaserPulseOnTime, CurrLaserDuration
 398+ C46F 3A 1C 81    >                        ld       a,(CurrLaserPulseOnTime)
 398+ C472 32 20 81    >                        ld       (CurrLaserDuration),a
 399+ C475                                      SetMemTrue          LaserBeamOn
 399+ C475 AF          >                        xor     a
 399+ C476 32 1F 81    >                        ld      (LaserBeamOn),a
 400+ C479                                      ;call               TriggerLaserSound
 401+ C479 C3 A0 C4                             jp                  .LaserDone
 402+ C47C              .FireNotPressed:        ReturnIfMemNotZero  CurrLaserBurstCount
 402+ C47C 3A 24 81    >                        ld     a,(CurrLaserBurstCount)
 402+ C47F A7          >                        and     a
 402+ C480 C0          >                        ret    nz
 403+ C481                                      ReturnIfMemNotZero  CurrLaserDuration
 403+ C481 3A 20 81    >                        ld     a,(CurrLaserDuration)
 403+ C484 A7          >                        and     a
 403+ C485 C0          >                        ret    nz
 404+ C486                                      ReturnIfMemFalse    LaserBeamOn
 404+ C486 3A 1F 81    >                        ld      a,(LaserBeamOn)
 404+ C489 A7          >                        and     a
 404+ C48A C0          >                        ret     nz
 405+ C48B DD 01                                break
 406+ C48D                                      ldCopyByte          CurrLaserPulseRest, CurrentCooldown
 406+ C48D 3A 1E 81    >                        ld       a,(CurrLaserPulseRest)
 406+ C490 32 22 81    >                        ld       (CurrentCooldown),a
 407+ C493                                      SetMemFalse         LaserBeamOn
 407+ C493 3E FF       >                        ld      a,$FF
 407+ C495 32 1F 81    >                        ld      (LaserBeamOn),a
 408+ C498                                      SetMemZero          CurrLaserBurstCount
 408+ C498 AF          >                        xor     a
 408+ C499 32 24 81    >                        ld      (CurrLaserBurstCount),a
 409+ C49C                                      SetMemZero          CurrentBurstPause
 409+ C49C AF          >                        xor     a
 409+ C49D 32 21 81    >                        ld      (CurrentBurstPause),a
 410+ C4A0              .LaserDone:
 411+ C4A0                              ELSE
 412+ C4A0 ~            .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 413+ C4A0 ~                                    jr      z,.CheckTargetting
 414+ C4A0 ~            .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 415+ C4A0 ~                                    ld      a,(CurrLaserPulseRate)              ; if not beam type
 416+ C4A0 ~                                    JumpIfAIsZero .BeamType                     ; .
 417+ C4A0 ~                                    ld      b,a                                 ; and not run out of pulses
 418+ C4A0 ~                                    ld      a,(CurrLaserPulseRateCount)         ;
 419+ C4A0 ~                                    ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 420+ C4A0 ~                                    JumpIfAEqNusng  b, .PulseLimitReached       ;
 421+ C4A0 ~                                    ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 422+ C4A0 ~                                    or      (hl)                                ;
 423+ C4A0 ~                                    inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 424+ C4A0 ~                                    or      (hl)                                ;    .
 425+ C4A0 ~                                    jr      nz, .CheckTargetting                ;    .
 426+ C4A0 ~            .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 427+ C4A0 ~                                    MMUSelectKeyboard
 428+ C4A0 ~                                    call    is_key_up_state                     ;       .
 429+ C4A0 ~                                    jr      z,.CheckTargetting                  ;       .
 430+ C4A0 ~            .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 431+ C4A0 ~                                    inc     a                                   ;            .
 432+ C4A0 ~            .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 433+ C4A0 ~                                    ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 434+ C4A0 ~                                 ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 435+ C4A0 ~                                 ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 436+ C4A0 ~                                    jp      .CheckTargetting
 437+ C4A0 ~            .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 438+ C4A0 ~                                    MMUSelectKeyboard
 439+ C4A0 ~                                    call    is_key_up_state                     ;                   .
 440+ C4A0 ~                                    jr      z,.CheckTargetting                  ;                   .
 441+ C4A0 ~                                    SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 442+ C4A0 ~                                    ld      a,0
 443+ C4A0 ~                                    ld      (SoundFxToEnqueue),a
 444+ C4A0 ~                                    jp      .CheckTargetting
 445+ C4A0 ~            .PulseLimitReached:     ;ZeroA                                       ;
 446+ C4A0 ~                                    ;ld      (CurrLaserPulseRateCount),a         ;
 447+ C4A0 ~                                    ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 448+ C4A0                              ENDIF
 449+ C4A0              ; . Here we check to see if the target lock has been pressed
 450+ C4A0              .CheckTargetting:       MMUSelectKeyboard
 450+ C4A0 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 451+ C4A4 CD 2C E3                             call    TargetMissileTest
 452+ C4A7              .CheckForMissile:       MacroIsKeyPressed c_Pressed_FireMissile             ; launch pressed?
 452+ C4A7 3E 18       >                        ld      a,c_Pressed_FireMissile
 452+ C4A9             >                        MMUSelectKeyboard
 452+ C4A9 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 452+ C4AD CD A2 E1    >                        call    is_key_pressed
 453+ C4B0 20 13                                jr      nz,.NotMissileLaunch
 454+ C4B2                                      AnyMissilesLeft
 454+ C4B2 3A 39 7F    >                        ld      a,(NbrMissiles)
 454+ C4B5 A7          >                        and     a
 455+ C4B6 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 456+ C4B8 CD E5 82                             call    IsMissileLockedOn
 457+ C4BB 28 08                                jr      z,.MissileNotLocked
 458+ C4BD              .MissileLaunch:         SetMissileLaunch
 458+ C4BD 3A 07 81    >                        ld      a,(MissileTargettingFlag)
 458+ C4C0 E6 0F       >                        and     $0F
 458+ C4C2 32 07 81    >                        ld      (MissileTargettingFlag),a
 459+ C4C5              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 460+ C4C5              .NotMissileLaunch:
 461+ C4C5 3A 03 84     .CheckForECM:           ld      a,(ECMPresent)
 462+ C4C8                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 462+ C4C8 FE 00       >                        cp     EquipmentItemNotFitted
 462+ C4CA CA F1 C4    >                        jp      z,.NoECM
 463+ C4CD 3A 3A 7F     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 464+ C4D0                                      JumpIfAIsNotZero .NoECM
 464+ C4D0 A7          >                        and     a
 464+ C4D1 C2 F1 C4    >                        jp	    nz,.NoECM
 465+ C4D4              .CheckForKeyPress:      MacroIsKeyPressed c_Pressed_ECM
 465+ C4D4 3E 1C       >                        ld      a,c_Pressed_ECM
 465+ C4D6             >                        MMUSelectKeyboard
 465+ C4D6 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 465+ C4DA CD A2 E1    >                        call    is_key_pressed
 466+ C4DD 20 12                                jr      nz, .NoECM
 467+ C4DF              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 467+ C4DF 3E 80       >                        ld      a,ECMCounterMax
 467+ C4E1 32 3A 7F    >                        ld      (PlayerECMActiveCount),a
 468+ C4E4 3A 9F 7D                             ld      a,(ECMCountDown)
 469+ C4E7                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 469+ C4E7 FE 80       >                        cp     ECMCounterMax
 469+ C4E9 D2 F1 C4    >                        jp		nc,.NoECM
 470+ C4EC                                      SetMemToN      ECMCountDown, ECMCounterMax
 470+ C4EC 3E 80       >                        ld      a,ECMCounterMax
 470+ C4EE 32 9F 7D    >                        ld      (ECMCountDown),a
 471+ C4F1 C9           .NoECM:                 ret
 472+ C4F2
 473+ C4F2
 474+ C4F2
 475+ C4F2
 476+ C4F2
 477+ C4F2
 478+ C4F2
# file closed: ./Views/Front_View.asm
1508  C4F2                                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
1509  C4F2                                  ASSERT $-ViewFrontAddr <8912 , Bank code leaks over 8K boundary
1510  C4F2              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1511  C4F2                                  SLOT    MenuStatusAddr
1512  C4F2                                  PAGE    BankMenuStatus
1513  C4F2                                  ORG     MenuStatusAddr
1514  C000                                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 43 4F 4D 4D  txt_stat_commander 			DB "COMMANDER",0
   3+ C014 41 4E 44 45
   3+ C018 52 00
   4+ C01A 49 4E 56 45  txt_stat_inventory 			DB "INVENTORY",0
   4+ C01E 4E 54 4F 52
   4+ C022 59 00
   5+ C024 50 72 65 73  txt_stat_present_system		DB "Present System   :",0
   5+ C028 65 6E 74 20
   5+ C02C 53 79 73 74
   5+ C030 65 6D 20 20
   5+ C034 20 3A 00
   6+ C037 48 79 70 65  txt_stat_hyperspace_system	DB "Hyperspace System:",0
   6+ C03B 72 73 70 61
   6+ C03F 63 65 20 53
   6+ C043 79 73 74 65
   6+ C047 6D 3A 00
   7+ C04A 43 6F 6E 64  txt_stat_condition			DB "Condition   :",0
   7+ C04E 69 74 69 6F
   7+ C052 6E 20 20 20
   7+ C056 3A 00
   8+ C058 46 75 65 6C  txt_stat_fuel				DB "Fuel        :",0
   8+ C05C 20 20 20 20
   8+ C060 20 20 20 20
   8+ C064 3A 00
   9+ C066 43 61 73 68  txt_stat_cash				DB "Cash        :",0
   9+ C06A 20 20 20 20
   9+ C06E 20 20 20 20
   9+ C072 3A 00
  10+ C074 4C 65 67 61  txt_stat_legal_status		DB "Legal Status:",0
  10+ C078 6C 20 53 74
  10+ C07C 61 74 75 73
  10+ C080 3A 00
  11+ C082 52 61 74 69  txt_stat_rating				DB "Rating      :",0
  11+ C086 6E 67 20 20
  11+ C08A 20 20 20 20
  11+ C08E 3A 00
  12+ C090 45 51 55 49  txt_stat_equipment			DB "EQUIPMENT:",0
  12+ C094 50 4D 45 4E
  12+ C098 54 3A 00
  13+ C09B
  14+ C09B 30 30 2E 30  txt_stat_fuel_level			DB "00.0 Light Years",0
  14+ C09F 20 4C 69 67
  14+ C0A3 68 74 20 59
  14+ C0A7 65 61 72 73
  14+ C0AB 00
  15+ C0AC 58 58 58 58  txt_stat_cash_amount		DB "XXXXXXXXXX",0
  15+ C0B0 58 58 58 58
  15+ C0B4 58 58 00
  16+ C0B7 2E           txt_stat_cash_decimal       DB "."
  17+ C0B8 58 20 43 72  txt_stat_cash_fraction      DB "X Cr",0
  17+ C0BC 00
  18+ C0BD
  19+ C0BD 40 02 10 C0  status_boiler_text		DW $0240,txt_stat_commander
  20+ C0C1 90 02 08 81  						DW $0290,CommanderName
  21+ C0C5 08 0B 24 C0  						DW $0B08,txt_stat_present_system
  22+ C0C9 08 13 37 C0  						DW $1308,txt_stat_hyperspace_system
  23+ C0CD 08 1B 4A C0  						DW $1B08,txt_stat_condition
  24+ C0D1 08 23 58 C0  						DW $2308,txt_stat_fuel
  25+ C0D5 08 2B 66 C0  						DW $2B08,txt_stat_cash
  26+ C0D9 08 33 74 C0  						DW $3308,txt_stat_legal_status
  27+ C0DD 08 3B 82 C0  						DW $3B08,txt_stat_rating
  28+ C0E1 08 4B 90 C0  						DW $4B08,txt_stat_equipment
  29+ C0E5
  30+ C0E5 00 00        equipment_cursor		DW  $0000
  31+ C0E7              present_position		equ	$0B98
  32+ C0E7              hyperspace_position		equ	$1398
  33+ C0E7              condition_position		equ	$1B70
  34+ C0E7              fuel_position			equ	$2370
  35+ C0E7              cash_position			equ	$2B70
  36+ C0E7              legal_status_position	equ $3370
  37+ C0E7              rank_position			equ $3B70
  38+ C0E7              equipment_position		equ $5340
  39+ C0E7              equipment_position2		equ $5378
  40+ C0E7              equipmax_row			equ $FF
  41+ C0E7
  42+ C0E7 00           STAT_selected_row       DB 0
  43+ C0E8 00           STAT_current_topItem    DB 0
  44+ C0E9 00           STAT_current_end        DB 0
  45+ C0EA              STAT_buffer_rows         EQU     128
  46+ C0EA              STAT_buffer_row_len      EQU     24
  47+ C0EA              STAT_eqip_window_len    EQU 10
  48+ C0EA              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  49+ C0EA 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  50+ CCEA              STAT_position			equ $5840
  51+ CCEA 00 00 00...  STAT_cash_amount    	DS 10
  52+ CCF4 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  53+ CCF8
  54+ CCF8 00 00 00...  stat_present_name       DS  30
  55+ CD16 00                                   DB  0
  56+ CD17 00 00 00...  stat_target_name        DS  30
  57+ CD35 00                                   DB  0
  58+ CD36
  59+ CD36 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  60+ CD39 01 1E 00                             ld      bc,30
  61+ CD3C ED B0                                ldir
  62+ CD3E C9                                   ret
  63+ CD3F
  64+ CD3F              ;----------------------------------------------------------------------------------------------------------------------------------
  65+ CD3F              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CD3F
   2++CD3F              ;">print_boilder_text hl = text structure, b = message count"
   3++CD3F C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++CD40 4E                                   ld			c,(hl)		; Get Row into b
   5++CD41 23                                   inc			hl
   6++CD42 46                                   ld			b,(hl)		; Get Col into b
   7++CD43 23                                   inc			hl
   8++CD44 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++CD45 23                                   inc			hl
  10++CD46 56                                   ld			d,(hl)		; Get text address Hi into E
  11++CD47 23                                   inc			hl
  12++CD48 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++CD49 EB                                   ex			de,hl		; now hl = address of text data
  14++CD4A 1E FF                                ld			e,txt_status_colour
  15++CD4C C5                                   push		bc
  16++CD4D D1                                   pop			de
  17++CD4E                                      MMUSelectLayer1
  17++CD4E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++CD52 CD D7 E0                             call		l1_print_at
  19++CD55 E1                                   pop			hl
  20++CD56 C1                                   pop			bc
  21++CD57 10 E6                                djnz		.BoilerTextLoop
  22++CD59 C9                                   ret
  23++CD5A
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  66+ CD5A              ;----------------------------------------------------------------------------------------------------------------------------------
  67+ CD5A DD 22 FE CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  68+ CD5E ED 53 00 CE                          ld (.STATclcn32zIX),de
  69+ CD62 DD 21 FA CD                          ld ix,.STATclcn32t+36
  70+ CD66 06 09                                ld b,9
  71+ CD68 0E 00                                ld c,0
  72+ CD6A 3E 30        .STATclcn321:           ld a,'0'
  73+ CD6C B7                                   or a
  74+ CD6D DD 5E 00     .STATclcn322:           ld e,(ix+0)
  75+ CD70 DD 56 01                             ld d,(ix+1)
  76+ CD73 2A FE CD                             ld hl,(.STATclcn32z)
  77+ CD76 ED 52                                sbc hl,de
  78+ CD78 22 FE CD                             ld (.STATclcn32z),hl
  79+ CD7B DD 5E 02                             ld e,(ix+2)
  80+ CD7E DD 56 03                             ld d,(ix+3)
  81+ CD81 2A 00 CE                             ld hl,(.STATclcn32zIX)
  82+ CD84 ED 52                                sbc hl,de
  83+ CD86 22 00 CE                             ld (.STATclcn32zIX),hl
  84+ CD89 38 04                                jr c,.STATclcn325
  85+ CD8B 0C                                   inc c
  86+ CD8C 3C                                   inc a
  87+ CD8D 18 DE                                jr .STATclcn322
  88+ CD8F DD 5E 00     .STATclcn325:           ld e,(ix+0)
  89+ CD92 DD 56 01                             ld d,(ix+1)
  90+ CD95 2A FE CD                             ld hl,(.STATclcn32z)
  91+ CD98 19                                   add hl,de
  92+ CD99 22 FE CD                             ld (.STATclcn32z),hl
  93+ CD9C DD 5E 02                             ld e,(ix+2)
  94+ CD9F DD 56 03                             ld d,(ix+3)
  95+ CDA2 2A 00 CE                             ld hl,(.STATclcn32zIX)
  96+ CDA5 ED 5A                                adc hl,de
  97+ CDA7 22 00 CE                             ld (.STATclcn32zIX),hl
  98+ CDAA 11 FC FF                             ld de,-4
  99+ CDAD DD 19                                add ix,de
 100+ CDAF 0C                                   inc c
 101+ CDB0 0D                                   dec c
 102+ CDB1 28 05                                jr z,.STATclcn323
 103+ CDB3 FD 77 00                             ld (iy+0),a
 104+ CDB6 FD 23                                inc iy
 105+ CDB8 10 B0        .STATclcn323:           djnz .STATclcn321
 106+ CDBA 3A FE CD                             ld a,(.STATclcn32z)
 107+ CDBD C6 30                                add A,'0'
 108+ CDBF FD 77 00                             ld (iy+0),a
 109+ CDC2 FD 36 02 00                          ld (iy+2),0
 110+ CDC6 FD 7E 00                             ld      a,(IY+0)
 111+ CDC9 FD 77 01                             ld      (IY+1),a
 112+ CDCC 3E 2E                                ld      a,"."
 113+ CDCE FD 77 00                             ld      (IY+0),a
 114+ CDD1 FD 23                                inc     IY
 115+ CDD3 FD 23                                inc     IY
 116+ CDD5 C9                                   ret
 117+ CDD6 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 117+ CDDA 0A 00 00 00
 117+ CDDE 64 00 00 00
 117+ CDE2 E8 03 00 00
 117+ CDE6 10 27 00 00
 118+ CDEA A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 118+ CDEE 40 42 0F 00
 118+ CDF2 80 96 98 00
 118+ CDF6 00 E1 F5 05
 118+ CDFA 00 CA 9A 3B
 119+ CDFE 00 00        .STATclcn32z            ds 2
 120+ CE00 00 00        .STATclcn32zIX          ds 2
 121+ CE02              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ CE02 2A E3 83     STAT_GetCash:           ld		hl,(Cash+2)
 123+ CE05 EB                                   ex      de,hl
 124+ CE06 DD 2A E1 83                          ld      ix,(Cash)
 125+ CE0A FD 21 EA CC                          ld		iy,STAT_cash_amount
 126+ CE0E CD 5A CD                             call 	STAT_DispDEIXtoIY
 127+ CE11 FD E5                                push    iy
 128+ CE13 D1                                   pop     de
 129+ CE14 21 F4 CC                             ld      hl,STAT_cash_UoM
 130+ CE17 01 04 00                             ld      bc,4
 131+ CE1A ED B0                                ldir
 132+ CE1C C9                                   ret
 133+ CE1D              ;----------------------------------------------------------------------------------------------------------------------------------
 134+ CE1D 7E           STAT_expand_word:       ld      a,(hl)
 135+ CE1E FE 00                                cp      0
 136+ CE20 C8                                   ret     z
 137+ CE21 12                                   ld      (de),a
 138+ CE22 23                                   inc     hl
 139+ CE23 13                                   inc     de
 140+ CE24 18 F7                                jr      STAT_expand_word
 141+ CE26
 142+ CE26              ; hl = list of words
 143+ CE26              ; de = adress to expand to
 144+ CE26 7E           STAT_expand_name:       ld      a,(hl)
 145+ CE27 47                                   ld      b,a
 146+ CE28 23                                   inc     hl
 147+ CE29 7E                                   ld      a,(hl)              ; its a 16 bit
 148+ CE2A 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 149+ CE2B B0                                   or      b
 150+ CE2C 20 01                                jr      nz,.MoreToDo
 151+ CE2E              ;                        ld      (de),a we dont want the null marker now
 152+ CE2E C9                                   ret
 153+ CE2F E5 D5        .MoreToDo:              push    hl,,de
 154+ CE31 7E                                   ld      a,(hl)              ; bodge for now no optimise
 155+ CE32 5F                                   ld      e,a
 156+ CE33 23                                   inc     hl
 157+ CE34 7E                                   ld      a,(hl)
 158+ CE35 57                                   ld      d,a
 159+ CE36 EB                                   ex      hl,de               ; hl is now Word... address
 160+ CE37 D1                                   pop     de                  ; de back to pointer to buffer
 161+ CE38 CD 1D CE     .ProcessWord:           call    STAT_expand_word
 162+ CE3B 3E 20                                ld      a," "               ; speculative space
 163+ CE3D 12                                   ld      (de),a
 164+ CE3E 13                                   inc     de
 165+ CE3F E1                                   pop     hl                  ; get string pointer back
 166+ CE40 23                                   inc     hl
 167+ CE41 23                                   inc     hl                  ; on to next word
 168+ CE42 18 E2                                jr      STAT_expand_name
 169+ CE44
 170+ CE44              STAT_First_Item         EQU     EQ_CARGO_BAY
 171+ CE44 3A 19 7F     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 172+ CE47                                      MMUSelectGalaxyA
 172+ CE47 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 173+ CE4A 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 174+ CE4D 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 175+ CE4F 11 00 0C                             ld      de, STAT_display_buff_len
 176+ CE52 CD 26 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 177+ CE55 21 01 C1                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 178+ CE58 11 18 00                             ld      de,STAT_buffer_row_len
 179+ CE5B 06 80                                ld      b,STAT_buffer_rows
 180+ CE5D                                      ZeroA
 180+ CE5D AF          >                        xor a
 181+ CE5E 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 182+ CE5F 19                                   add     hl,de
 183+ CE60 10 FC                                djnz    .EoLLoop
 184+ CE62 DD 21 02 84                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 185+ CE66 FD 21 EA C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 186+ CE6A 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 187+ CE6C 0E 00                                ld      c,0                                         ; Current Row
 188+ CE6E 1E 02                                ld      e,STAT_First_Item
 189+ CE70 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 190+ CE73                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 190+ CE73 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 190+ CE74 CA 98 CE    >                        jp	    z, .NotFitted
 191+ CE77 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 191+ CE7B E5 C5
 192+ CE7D 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 193+ CE80 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 194+ CE82 ED 30                                mul
 195+ CE84 19                                   add     hl,de                                       ; hl = dword list of work pointers
 196+ CE85 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 197+ CE89 CD 26 CE                             call    STAT_expand_name                           ; expand name
 198+ CE8C C1 DD E1 FD                          pop     iy,,ix,,bc
 198+ CE90 E1
 199+ CE91 11 18 00                             ld      de,STAT_buffer_row_len
 200+ CE94 FD 19                                add     iy,de                                       ; now iy = start of next column
 201+ CE96 D1                                   pop     de
 202+ CE97 0C                                   inc     c
 203+ CE98              .NotFitted:
 204+ CE98 DD 23        .DoneFittedCheck:       inc     ix
 205+ CE9A 1C                                   inc     e
 206+ CE9B 10 D3                                djnz    .ProcessRow
 207+ CE9D 79           .DoneProcess:           ld      a,c
 208+ CE9E 32 E9 C0                             ld      (STAT_current_end),a
 209+ CEA1 C9                                   ret
 210+ CEA2
 211+ CEA2 06 0A        draw_STAT_boilertext:   ld		b,10
 212+ CEA4 21 BD C0                             ld		hl,status_boiler_text
 213+ CEA7 CD 3F CD                             call	STAT_print_boiler_text
 214+ CEAA C9                                   ret
 215+ CEAB
 216+ CEAB              GetStatFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++CEAB
   2++CEAB
   3++CEAB 3A E5 83     	ld		a,(Fuel)
   4++CEAE 11 B8 AF     	ld		de,txt_fuel_level
   5++CEB1 0E 9C        	ld	c, -100
   6++CEB3 CD BD CE     	call	.Num1
   7++CEB6 0E F6        	ld	c,-10
   8++CEB8 CD BD CE     	call	.Num1
   9++CEBB 0E FF        	ld	c,-1
  10++CEBD              .Num1:
  11++CEBD 06 2F        	ld	b,'0'-1
  12++CEBF              .Num2:
  13++CEBF 04           	inc		b
  14++CEC0 81           	add		a,c
  15++CEC1 38 FC        	jr		c,.Num2
  16++CEC3 91           	sub 	c
  17++CEC4 C5           	push	bc
  18++CEC5 F5           	push	af
  19++CEC6 79           	ld		a,c
  20++CEC7 FE FF        	cp		-1
  21++CEC9 CC D2 CE     	call	z,.InsertDot
  22++CECC 78           	ld		a,b
  23++CECD 12           	ld		(de),a
  24++CECE 13           	inc		de
  25++CECF F1           	pop		af
  26++CED0 C1           	pop		bc
  27++CED1 C9           	ret
  28++CED2              .InsertDot:
  29++CED2 3E 2E        	ld		a,'.'
  30++CED4 12           	ld		(de),a
  31++CED5 13           	inc		de
  32++CED6 C9           	ret
  33++CED7
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 217+ CED7
 218+ CED7              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ CED7 01 01 01     draw_STAT_maintext:    	ld		bc,$0101
 220+ CEDA 11 FD BE                             ld		de,$BEFD
 221+ CEDD 3E C0                                ld		a,$C0
 222+ CEDF                                      MMUSelectLayer2
 222+ CEDF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 223+ CEE3 CD F9 E3                             call	l2_draw_box
 224+ CEE6 CD A2 CE                             call    draw_STAT_boilertext
 225+ CEE9 3A 19 7F     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 226+ CEEC                                      MMUSelectGalaxyA
 226+ CEEC ED 92 57    >                     nextreg GalaxyDataMMU,     a
 227+ CEEF ED 4B 2C 7F                          ld      bc, (PresentSystemX)
 228+ CEF3 CD BB FA                             call    galaxy_name_at_bc
 229+ CEF6 11 F8 CC                             ld      de,stat_present_name
 230+ CEF9 CD 36 CD                             call    stat_copy_to_name
 230+ CEFC
 231+ CEFC 01 98 0B                             ld      bc,present_position
 232+ CEFF 21 F8 CC                             ld      hl,stat_present_name
 233+ CF02                                      MMUSelectLayer2
 233+ CF02 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 234+ CF06 1E FF                                ld      e,txt_status_colour
 235+ CF08 CD 5E E3                             call    l2_print_at
 236+ CF0B 3A 19 7F     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 237+ CF0E                                      MMUSelectGalaxyA
 237+ CF0E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 238+ CF11 ED 4B 2E 7F                          ld      bc, (TargetSystemX)
 239+ CF15 CD BB FA                             call    galaxy_name_at_bc
 240+ CF18 11 17 CD                             ld      de,stat_target_name
 241+ CF1B CD 36 CD                             call    stat_copy_to_name
 241+ CF1E
 242+ CF1E 01 98 13                             ld      bc,hyperspace_position
 243+ CF21 21 17 CD                             ld      hl,stat_target_name
 244+ CF24                                      MMUSelectLayer2
 244+ CF24 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 245+ CF28 1E FF                                ld      e,txt_status_colour
 246+ CF2A CD 5E E3                             call    l2_print_at
 247+ CF2D CD E2 CF     .StatusText:	        call	get_cmdr_condition
 248+ CF30 21 51 86                             ld		hl, ConditionNameIdx
 249+ CF33 CD 69 87                             call	getTableText
 250+ CF36 01 70 1B                             ld		bc,condition_position
 251+ CF39                                      MMUSelectLayer2
 251+ CF39 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 252+ CF3D 1E FF                                ld      e,txt_status_colour
 253+ CF3F CD 5E E3                             call    l2_print_at
 254+ CF42 CD AB CE     .DisplayFuel:           call	GetStatFuelLevel
 255+ CF45 21 B8 AF                             ld		hl, txt_fuel_level
 256+ CF48 7E                                   ld		a,(hl)
 257+ CF49 FE 30                                cp		'0'
 258+ CF4B 20 01                                jr		nz,.PrintFuel
 259+ CF4D 23           .SkipLeadingZero:	    inc		hl
 260+ CF4E 01 70 23     .PrintFuel:             ld		bc,fuel_position
 261+ CF51                                      MMUSelectLayer2
 261+ CF51 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 262+ CF55 1E FF                                ld      e,txt_status_colour
 263+ CF57 CD 5E E3                             call    l2_print_at
 264+ CF5A CD 02 CE     .DisplayCash:           call	STAT_GetCash
 265+ CF5D 01 70 2B                             ld		bc,cash_position
 266+ CF60 21 EA CC                             ld		hl,STAT_cash_amount
 267+ CF63                                      MMUSelectLayer2
 267+ CF63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 268+ CF67 1E FF                                ld      e,txt_status_colour
 269+ CF69 CD 5E E3                             call    l2_print_at
 270+ CF6C 3A 3B 7F     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 271+ CF6F FE 00                                cp		0
 272+ CF71 20 05                                jr		nz,.Naughty
 273+ CF73 21 48 88                             ld		hl,WordClean
 274+ CF76 18 0C                                jr		.DisplayLegalStatus
 275+ CF78 FE 32        .Naughty:               cp		50
 276+ CF7A 38 05                                jr		c,.JustOffender
 277+ CF7C 21 57 88     .VeryNaughty:           ld		hl,WordFugitive
 278+ CF7F 18 03                                jr		.DisplayLegalStatus
 279+ CF81 21 4E 88     .JustOffender:          ld		hl,WordOffender
 280+ CF84 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 281+ CF87                                      MMUSelectLayer2
 281+ CF87 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 282+ CF8B 1E FF                                ld      e,txt_status_colour
 283+ CF8D CD 5E E3                             call    l2_print_at
 284+ CF90 3A 3E 7F     .DisplayRating:         ld      a,(CurrentRank)
 285+ CF93                                      ; now cached ld		de,(KillTally)
 286+ CF93                                      ; now cached call	getRankIndex
 287+ CF93 21 53 87                             ld		hl, RankingNameIdx
 288+ CF96 CD 69 87                             call	getTableText
 289+ CF99 01 70 3B                             ld		bc,rank_position
 290+ CF9C                                      MMUSelectLayer2
 290+ CF9C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 291+ CFA0 1E FF                                ld      e,txt_status_colour
 292+ CFA2 CD 5E E3                             call    l2_print_at
 293+ CFA5                                      ;break
 294+ CFA5
 295+ CFA5 C9                                   ret
 296+ CFA6
 297+ CFA6
 298+ CFA6              draw_STAT_items:        MMUSelectLayer1
 298+ CFA6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 299+ CFAA CD 8F E0                             call    l1_cls
 300+ CFAD                                      ; add in all the status stuff later
 301+ CFAD 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; Move to correct top of stat list item
 302+ CFB0 16 18                                ld      d,STAT_buffer_row_len                       ; so de = offset to first item in display
 303+ CFB2 5F                                   ld      e,a
 304+ CFB3 ED 30                                mul
 305+ CFB5 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 306+ CFB8 19                                   add     hl,de                                       ;
 307+ CFB9 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; set a to number of lines to display
 308+ CFBC 47                                   ld      b,a                                         ;
 309+ CFBD 3A E9 C0                             ld      a,(STAT_current_end)                        ;
 310+ CFC0 90                                   sub     b                                           ;
 311+ CFC1                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen   ; if there are enough then just do a screen fill
 311+ CFC1 FE 0A       >                        cp      STAT_eqip_window_len
 311+ CFC3 DA CA CF    >                        jp		c, .FillScreen
 312+ CFC6 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len                      ; if its more than a screen then window
 313+ CFC8 18 01                                jr      .ReadyToPrint
 314+ CFCA 47           .FillScreen:            ld      b,a                                         ; b = the mumber of rows to display
 315+ CFCB 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 316+ CFCE D5 E5 C5     .DrawARow:              push    de,, hl,, bc                                ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 317+ CFD1 CD D7 E0                             call    l1_print_at
 317+ CFD4
 318+ CFD4 C1 E1                                pop     hl,,bc                                      ; get mesage addr back and move down one line
 319+ CFD6 11 18 00                             ld      de,STAT_buffer_row_len
 320+ CFD9 19                                   add     hl,de
 321+ CFDA D1                                   pop     de                                           ; get output row back
 322+ CFDB 3E 08                                ld      a,8
 323+ CFDD 82                                   add     a,d
 324+ CFDE 57                                   ld      d,a
 325+ CFDF 10 ED                                djnz    .DrawARow
 326+ CFE1 C9                                   ret
 327+ CFE2
 328+ CFE2              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ CFE2
 330+ CFE2 3A 43 80     get_cmdr_condition:     ld			a,(DockedFlag)
 331+ CFE5 FE FF                                cp			StatePlayerDocked
 332+ CFE7 28 17                                jr			z,.PlayerIsDocked
 333+ CFE9              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 333+ CFE9 3A 32 7F    >                        ld      a,(SpaceStationSafeZone)
 333+ CFEC A7          >                        and     a
 333+ CFED C8          >                        ret     z
 334+ CFEE CD 9E 83                             call        AreShipsPresent
 335+ CFF1 38 03                                jr          c,.NoShipsAround
 336+ CFF3 3E 01                                ld          a,1
 337+ CFF5 C9                                   ret
 338+ CFF6 3A 04 81     .NoShipsAround:         ld			a,(PlayerEnergy)
 339+ CFF9 FE 80                                cp			$80
 340+ CFFB 3E 01                                ld          a,1
 341+ CFFD CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 342+ CFFF C9                                   ret
 343+ D000 AF           .PlayerIsDocked:        xor			a
 344+ D001 C9                                   ret
 345+ D002
 346+ D002              draw_status_menu:       InitNoDoubleBuffer
 346+ D002             >                            MMUSelectLayer1
 346+ D002 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 346+ D006 CD 8F E0    >                            call	l1_cls
 346+ D009 3E 07       >                            ld		a,7
 346+ D00B CD AA E0    >                            call	l1_attr_cls_to_a
 346+ D00E             >                            MMUSelectLayer2
 346+ D00E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 346+ D012 CD 0A E0    >                            call    asm_l2_double_buffer_off
 346+ D015 CD 0E E2    >                            call	l2_cls	; Get some space
 346+ D018             >                            MMUSelectSpriteBank
 346+ D018 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 346+ D01C CD 6E E5    >                            call    sprite_cls_cursors
 347+ D01F 3E 08                                ld		a,8
 348+ D021 32 97 7E                             ld		(MenuIdMax),a
 349+ D024 01 01 01     .Drawbox:               ld		bc,$0101
 350+ D027 11 FD BE                             ld		de,$BEFD
 351+ D02A 3E C0                                ld		a,$C0
 352+ D02C                                      MMUSelectLayer2
 352+ D02C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 353+ D030 CD F9 E3                             call	l2_draw_box
 354+ D033 01 01 0A                             ld		bc,$0A01
 355+ D036 11 C0 FE                             ld		de,$FEC0
 356+ D039                                      SetMemToN STAT_current_topItem, 0
 356+ D039 3E 00       >                        ld      a,0
 356+ D03B 32 E8 C0    >                        ld      (STAT_current_topItem),a
 357+ D03E CD 84 E4                             call	l2_draw_horz_line
 358+ D041 CD 44 CE     .equipment              call    STAT_buffer_list
 359+ D044 CD A6 CF                             call    draw_STAT_items
 360+ D047 CD D7 CE                             call    draw_STAT_maintext
 361+ D04A C9                                   ret
 362+ D04B
 363+ D04B              ;----------------------------------------------------------------------------------------------------------------------------------
 364+ D04B              ; Handles all the input whilst in the market menu
 365+ D04B              loop_STAT_menu:         MacroIsKeyPressed c_Pressed_CursorUp
 365+ D04B 3E 4A       >                        ld      a,c_Pressed_CursorUp
 365+ D04D             >                        MMUSelectKeyboard
 365+ D04D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 365+ D051 CD A2 E1    >                        call    is_key_pressed
 366+ D054 CC 64 D0                             call    z,STAT_UpPressed
 367+ D057                                      MacroIsKeyPressed c_Pressed_CursorDown
 367+ D057 3E 4C       >                        ld      a,c_Pressed_CursorDown
 367+ D059             >                        MMUSelectKeyboard
 367+ D059 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 367+ D05D CD A2 E1    >                        call    is_key_pressed
 368+ D060 CC 79 D0                             call    z,STAT_DownPressed
 369+ D063 C9                                   ret
 370+ D064
 371+ D064              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ D064 AF           STAT_UpPressed:         xor     a
 373+ D065 32 E7 C0                             ld      (STAT_selected_row),a
 374+ D068 3A E8 C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ D06B FE 00                                cp      0
 376+ D06D C8                                   ret     z
 377+ D06E 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ D06F 32 E8 C0                             ld      (STAT_current_topItem),a
 379+ D072 CD A6 CF                             call    draw_STAT_items
 380+ D075 CD A2 CE                             call    draw_STAT_boilertext
 381+ D078 C9                                   ret
 382+ D079              ;----------------------------------------------------------------------------------------------------------------------------------
 383+ D079 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 384+ D07B 32 E7 C0                             ld      (STAT_selected_row),a
 385+ D07E 3A E9 C0                             ld      a,(STAT_current_end)
 386+ D081 47                                   ld      b,a                             ; This check is if the current list is < one screen
 387+ D082 05                                   dec     b
 388+ D083 3A E7 C0                             ld      a,(STAT_selected_row)
 389+ D086 B8                                   cp      b
 390+ D087 C8                                   ret     z
 391+ D088 FE 09                                cp      STAT_eqip_window_len-1
 392+ D08A 28 05                                jr      z, .check_scroll_down
 393+ D08C 21 E7 C0                             ld      hl,STAT_selected_row
 394+ D08F 34                                   inc     (hl)
 395+ D090 C9                                   ret
 396+ D091 47           .check_scroll_down:     ld      b,a
 397+ D092 3A E8 C0                             ld      a,(STAT_current_topItem)
 398+ D095 80                                   add     b
 399+ D096 3C                                   inc     a
 400+ D097 21 E9 C0                             ld      hl,STAT_current_end
 401+ D09A                                      ReturnIfAGTEusng      (hl)
 401+ D09A BE          >                        cp    (hl)
 401+ D09B D0          >                        ret	 nc
 402+ D09C 21 E8 C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 403+ D09F 34                                   inc     (hl)
 404+ D0A0 CD A6 CF                             call    draw_STAT_items
 405+ D0A3 CD A2 CE                             call    draw_STAT_boilertext
 406+ D0A6 C9                                   ret
 407+ D0A7
# file closed: ./Menus/status_menu.asm
1515  D0A7                                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
1516  D0A7                                  ASSERT $-MenuStatusAddr <8912 , Bank code leaks over 8K boundary
1517  D0A7              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1518  D0A7                                  SLOT    MenuEquipSAddr
1519  D0A7                                  PAGE    BankMenuEquipS
1520  D0A7                                  ORG     MenuEquipSAddr
1521  C000                                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 8E 8E  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 3F E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 3F E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218                                                  DISPLAY "TODO: optimise"
 143+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 144+ D219 13                                   inc		de						; with just an inc De
 145+ D21A 0E FF                                ld	c,-1
 146+ D21C 18 D9                                jr		EQSHP_Num1
 147+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 148+ D220 3C           .NumLeadBlank2:	        inc	a
 149+ D221 09                                   add	hl,bc
 150+ D222 38 FC                                jr	c,.NumLeadBlank2
 151+ D224 FE 30                                cp	'0'
 152+ D226 20 02                                jr	nz,.DontBlank
 153+ D228 3E 20        .Blank:                 ld	a,' '
 154+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 155+ D22C 12                                   ld	(de),a
 156+ D22D 13                                   inc	de
 157+ D22E C9                                   ret
 158+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 159+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 160+ D231 28 30                                jr	z,.NoStock
 161+ D233 26 00                                ld h,0
 162+ D235 6F                                   ld l,a
 163+ D236 01 9C FF                             ld	bc,-100
 164+ D239 CD 52 D2                             call	.NumLeadBlank1
 165+ D23C FE 20        .WasLead0:              cp      ' '
 166+ D23E 20 09                                jr      nz,.NotHundredsZero
 167+ D240 0E F6                                ld	c,-10
 168+ D242 CD 52 D2                             call	.NumLeadBlank1
 169+ D245 0E FF                                ld	c,-1
 170+ D247 18 AE                                jr		EQSHP_Num1
 171+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 172+ D24B CD F7 D1                             call	EQSHP_Num1
 173+ D24E 0E FF                                ld	c,-1
 174+ D250 18 A5                                jr		EQSHP_Num1
 175+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 176+ D254 3C           .NumLeadBlank2:	        inc	a
 177+ D255 09                                   add	hl,bc
 178+ D256 38 FC                                jr	c,.NumLeadBlank2
 179+ D258 FE 30                                cp	'0'
 180+ D25A 20 02                                jr	nz,.DontBlank
 181+ D25C 3E 20        .Blank:                 ld	a,' '
 182+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 183+ D260 12                                   ld	(de),a
 184+ D261 13                                   inc	de
 185+ D262 C9                                   ret
 186+ D263 3E 20        .NoStock:               ld	a,' '
 187+ D265 12                                   ld	(de),a
 188+ D266 13                                   inc	de
 189+ D267 12                                   ld	(de),a
 190+ D268 13                                   inc	de
 191+ D269 3E 2D                                ld	a,'-'
 192+ D26B 12                                   ld	(de),a
 193+ D26C 13                                   inc de
 194+ D26D C9                                   ret
 195+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++D26F 4E                                   ld			c,(hl)		; Get Row into b
   5++D270 23                                   inc			hl
   6++D271 46                                   ld			b,(hl)		; Get Col into b
   7++D272 23                                   inc			hl
   8++D273 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++D274 23                                   inc			hl
  10++D275 56                                   ld			d,(hl)		; Get text address Hi into E
  11++D276 23                                   inc			hl
  12++D277 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++D278 EB                                   ex			de,hl		; now hl = address of text data
  14++D279 1E FF                                ld			e,txt_status_colour
  15++D27B C5                                   push		bc
  16++D27C D1                                   pop			de
  17++D27D                                      MMUSelectLayer1
  17++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++D281 CD D7 E0                             call		l1_print_at
  19++D284 E1                                   pop			hl
  20++D285 C1                                   pop			bc
  21++D286 10 E6                                djnz		.BoilerTextLoop
  22++D288 C9                                   ret
  23++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 197+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ D289 2A E3 83     eqshp_GetCash:          ld		hl,(Cash+2)
 199+ D28C EB                                   ex      de,hl
 200+ D28D DD 2A E1 83                          ld      ix,(Cash)
 201+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 202+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 203+ D298 FD E5                                push    IY
 204+ D29A D1                                   pop     de
 205+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 206+ D29E 01 0B 00                             ld      bc,11
 207+ D2A1 ED B0                                ldir
 208+ D2A3 C9                                   ret
 209+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 210+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 211+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 212+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 213+ D2AD                                      MMUSelectLayer1
 213+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 214+ D2B1 CD D7 E0                             call	l1_print_at
 215+ D2B4 C9                                   ret
 216+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 217+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 218+ D2B6 FE 00                                cp      0
 219+ D2B8 C8                                   ret     z
 220+ D2B9 12                                   ld      (de),a
 221+ D2BA 23                                   inc     hl
 222+ D2BB 13                                   inc     de
 223+ D2BC 18 F7                                jr      eqshp_expand_word
 224+ D2BE
 225+ D2BE              ; hl = list of words
 226+ D2BE              ; de = adress to expand to
 227+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 228+ D2BF 47                                   ld      b,a
 229+ D2C0 23                                   inc     hl
 230+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 231+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 232+ D2C3 B0                                   or      b
 233+ D2C4 20 01                                jr      nz,.MoreToDo
 234+ D2C6              ;                        ld      (de),a we dont want the null marker now
 235+ D2C6 C9                                   ret
 236+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 237+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 238+ D2CA 5F                                   ld      e,a
 239+ D2CB 23                                   inc     hl
 240+ D2CC 7E                                   ld      a,(hl)
 241+ D2CD 57                                   ld      d,a
 242+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 243+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 244+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 245+ D2D3 3E 20                                ld      a," "               ; speculative space
 246+ D2D5 12                                   ld      (de),a
 247+ D2D6 13                                   inc     de
 248+ D2D7 E1                                   pop     hl                  ; get string pointer back
 249+ D2D8 23                                   inc     hl
 250+ D2D9 23                                   inc     hl                  ; on to next word
 251+ D2DA 18 E2                                jr      eqshp_expand_name
 252+ D2DC
 253+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 254+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 255+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 256+ D2E4 CD 26 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 257+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 258+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 259+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 260+ D2EF AF                                   xor     a
 261+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 262+ D2F1 19                                   add     hl,de
 263+ D2F2 10 FC                                djnz    .EoLLoop
 264+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 265+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 266+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 267+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 268+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 269+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 270+ D305 C2 12 D3                             jp      nz,.BufferItem
 271+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 272+ D30B DD 19                                add     ix,de
 273+ D30D 10 F1                                djnz    .ProcessRow
 274+ D30F C3 75 D3                             jp      .DoneProcess
 275+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 275+ D316 C5
 276+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 277+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 278+ D31D 59                                   ld      e,c
 279+ D31E 16 00                                ld      d,0                                         ;
 280+ D320 19                                   add     hl,de                                       ;
 281+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 282+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 283+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 284+ D327 59                                   ld      e,c
 285+ D328 ED 30                                mul
 286+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 287+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 288+ D32F C5                                   push    bc
 289+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 290+ D333 C1                                   pop     bc
 291+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 292+ D337 FD 19                                add     iy,de
 293+ D339 FD E5                                push    iy
 294+ D33B DD 7E 04                             ld      a,(ix+4)
 295+ D33E 5F                                   ld      e,a
 296+ D33F DD 7E 05                             ld      a,(ix+5)
 297+ D342 57                                   ld      d,a                                         ; de = price
 298+ D343 DD 62 DD 6B                          ld      ix,de
 299+ D347                                      ;push    de
 300+ D347                                      ;pop     ix
 301+ D347 11 00 00                             ld      de,0                                        ; deix = price
 302+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 303+ D34D 3E 20                                ld      a," "
 304+ D34F FD 77 00                             ld      (IY+0),a
 305+ D352 FD 77 01                             ld      (IY+1),a
 306+ D355 FD 77 02                             ld      (IY+2),a
 307+ D358 FD E1                                pop     iy
 308+ D35A CD 7A D3                             call    .RightJustify
 309+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 309+ D361 E1
 310+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 311+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 312+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 313+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 314+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 315+ D370 DD 19                                add     ix,de
 316+ D372 0C                                   inc     c
 317+ D373 10 8B                                djnz    .ProcessRow
 318+ D375 79           .DoneProcess:           ld      a,c
 319+ D376 32 91 C0                             ld      (eqshp_current_end),a
 320+ D379 C9                                   ret
 321+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 322+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 323+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 324+ D383 FE 20                                cp      " "
 325+ D385 CC 89 D3                             call    z,.ShuffleRight
 326+ D388 C9                                   ret
 327+ D389 FD E5        .ShuffleRight:          push    iy
 328+ D38B E1                                   pop     hl
 329+ D38C 3E 03                                ld      a,3
 330+ D38E ED 31                                add     hl,a
 331+ D390 FD 7E 02                             ld      a,(iy+2)
 332+ D393 77                                   ld      (hl),a
 333+ D394 2B                                   dec     hl
 334+ D395 FD 7E 01                             ld      a,(iy+1)
 335+ D398 77                                   ld      (hl),a
 336+ D399 2B                                   dec     hl
 337+ D39A FD 7E 00                             ld      a,(iy+0)
 338+ D39D 77                                   ld      (hl),a
 339+ D39E 2B                                   dec     hl
 340+ D39F 3E 20                                ld      a," "
 341+ D3A1 77                                   ld      (hl),a
 342+ D3A2 C9                                   ret
 343+ D3A3
 344+ D3A3
 345+ D3A3              draw_eqship_items:      MMUSelectLayer1
 345+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 346+ D3A7 CD 8F E0                             call    l1_cls
 347+ D3AA 06 03                                ld		b,3
 348+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 349+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 350+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 351+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 352+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 353+ D3BA 5F                                   ld      e,a
 354+ D3BB ED 30                                mul
 355+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 356+ D3C0 19                                   add     hl,de
 357+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 358+ D3C4 47                                   ld      b,a
 359+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 360+ D3C8 90                                   sub     b
 361+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 361+ D3C9 FE 12       >                        cp      18
 361+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 362+ D3CE 06 12        .JustWindowing:         ld      b,18
 363+ D3D0 18 01                                jr      .ReadyToPrint
 364+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 365+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 366+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 367+ D3D9 CD D7 E0                             call    l1_print_at
 367+ D3DC
 368+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 369+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 370+ D3E1 19                                   add     hl,de
 371+ D3E2 D1                                   pop     de                          ; get output row back
 372+ D3E3 3E 08                                ld      a,8
 373+ D3E5 82                                   add     a,d
 374+ D3E6 57                                   ld      d,a
 375+ D3E7 10 ED                                djnz    .DrawARow
 376+ D3E9 C9                                   ret
 377+ D3EA
 378+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 378+ D3EA             >                            MMUSelectLayer1
 378+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 378+ D3EE CD 8F E0    >                            call	l1_cls
 378+ D3F1 3E 07       >                            ld		a,7
 378+ D3F3 CD AA E0    >                            call	l1_attr_cls_to_a
 378+ D3F6             >                            MMUSelectLayer2
 378+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 378+ D3FA CD 0A E0    >                            call    asm_l2_double_buffer_off
 378+ D3FD CD 0E E2    >                            call	l2_cls	; Get some space
 378+ D400             >                            MMUSelectSpriteBank
 378+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 378+ D404 CD 6E E5    >                            call    sprite_cls_cursors
 379+ D407 3E 20                                ld      a,$20
 380+ D409 32 97 7E                             ld      (MenuIdMax),a
 381+ D40C 3A 19 7F     .SetData:               ld      a,(Galaxy)
 382+ D40F                                      MMUSelectGalaxyA
 382+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 383+ D412 CD 6D F9                             call    galaxy_planet_data
 384+ D415 CD F5 F8                             call    galaxy_equip_market
 385+ D418 ED 4B 2C 7F                          ld      bc,(PresentSystemX)
 386+ D41C CD BB FA                             call    galaxy_name_at_bc
 387+ D41F CD 6D F9                             call    galaxy_planet_data
 388+ D422 AF                                   xor     a
 389+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 390+ D426 CD DC D2                             call    eqshp_buffer_list
 391+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 392+ D42C 11 FD BE                             ld		de,$BEFD
 393+ D42F 3E C0                                ld		a,$C0
 394+ D431                                      MMUSelectLayer2
 394+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 395+ D435 CD F9 E3                             call	l2_draw_box
 396+ D438 01 01 0A                             ld		bc,$0A01
 397+ D43B 11 C0 FE                             ld		de,$FEC0
 398+ D43E CD 84 E4                             call	l2_draw_horz_line
 399+ D441 3A 19 7F     .StaticText:	        ld      a,(Galaxy)
 400+ D444                                      MMUSelectGalaxyA
 400+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 401+ D447 3E 19                                ld		a,25
 402+ D449 CD 09 8E                             call	expandTokenToString
 403+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 404+ D44F CD A3 D3                             call    draw_eqship_items
 405+ D452 AF           .InitialHighlight:      xor     a
 406+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 407+ D456 CD 12 D1                             call    eqshp_highlight_row
 408+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 409+ D45C C9                                   ret
 410+ D45D
 411+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 412+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 413+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 414+ D463 47                                   ld      b,a
 415+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 416+ D467 4F                                   ld      c,a
 417+ D468 80                                   add     b                                   ; a = top + selected row
 418+ D469 21 91 C0                             ld      hl,eqshp_current_end
 419+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 419+ D46C BE          >                        cp      (hl)
 419+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 420+ D470 C3 7F D4                             jp      .RedrawList
 421+ D473 C5           .NewListShorter:        push    bc
 422+ D474 CD 22 D1                             call    eqshp_lowlight_row
 423+ D477 C1                                   pop     bc
 424+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 425+ D47B 91                                   sub     c                                   ; minus current top
 426+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 427+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 428+ D482 CD A3 D3                             call    draw_eqship_items
 429+ D485 C9                                   ret
 430+ D486
 431+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 432+ D486              ; Handles all the input whilst in the market menu
 433+ D486              loop_eqshp_menu:        MacroIsKeyPressed c_Pressed_CursorUp
 433+ D486 3E 4A       >                        ld      a,c_Pressed_CursorUp
 433+ D488             >                        MMUSelectKeyboard
 433+ D488 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 433+ D48C CD A2 E1    >                        call    is_key_pressed
 434+ D48F CC B7 D4                             call    z,eqshp_UpPressed
 435+ D492                                      MacroIsKeyPressed c_Pressed_CursorDown
 435+ D492 3E 4C       >                        ld      a,c_Pressed_CursorDown
 435+ D494             >                        MMUSelectKeyboard
 435+ D494 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 435+ D498 CD A2 E1    >                        call    is_key_pressed
 436+ D49B CC D7 D4                             call    z,eqshp_DownPressed
 437+ D49E                                      MacroIsKeyPressed c_Pressed_RollLeft
 437+ D49E 3E 08       >                        ld      a,c_Pressed_RollLeft
 437+ D4A0             >                        MMUSelectKeyboard
 437+ D4A0 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 437+ D4A4 CD A2 E1    >                        call    is_key_pressed
 438+ D4A7 CC 03 D5                             call    z,eqshp_LeftPressed
 439+ D4AA                                      MacroIsKeyPressed c_Pressed_RollRight
 439+ D4AA 3E 0A       >                        ld      a,c_Pressed_RollRight
 439+ D4AC             >                        MMUSelectKeyboard
 439+ D4AC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 439+ D4B0 CD A2 E1    >                        call    is_key_pressed
 440+ D4B3 CC 78 D5                             call    z,eqshp_RightPressed
 441+ D4B6 C9                                   ret
 442+ D4B7
 443+ D4B7              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ D4B7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 445+ D4BA FE 00                                cp      0
 446+ D4BC 28 0B                                jr      z,.check_scroll_up
 447+ D4BE CD 22 D1                             call    eqshp_lowlight_row
 448+ D4C1 21 8F C0                             ld      hl,eqshp_selected_row
 449+ D4C4 35                                   dec     (hl)
 450+ D4C5 CD 12 D1                             call    eqshp_highlight_row
 451+ D4C8 C9                                   ret
 452+ D4C9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 453+ D4CC FE 00                                cp      0
 454+ D4CE C8                                   ret     z
 455+ D4CF 3D                                   dec     a           ; chjange later to buffering step back 1
 456+ D4D0 32 90 C0                             ld      (eqshp_current_topItem),a
 457+ D4D3 CD A3 D3                             call    draw_eqship_items
 458+ D4D6 C9                                   ret
 459+ D4D7              ;----------------------------------------------------------------------------------------------------------------------------------
 460+ D4D7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 461+ D4DA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 462+ D4DB 05                                   dec     b
 463+ D4DC 3A 8F C0                             ld      a,(eqshp_selected_row)
 464+ D4DF B8                                   cp      b
 465+ D4E0 C8                                   ret     z
 466+ D4E1 FE 11                                cp      17
 467+ D4E3 28 0B                                jr      z, .check_scroll_down
 468+ D4E5 CD 22 D1                             call    eqshp_lowlight_row
 469+ D4E8 21 8F C0                             ld      hl,eqshp_selected_row
 470+ D4EB 34                                   inc     (hl)
 471+ D4EC CD 12 D1                             call    eqshp_highlight_row
 472+ D4EF C9                                   ret
 473+ D4F0 47           .check_scroll_down:     ld      b,a
 474+ D4F1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 475+ D4F4 80                                   add     b
 476+ D4F5 3C                                   inc     a
 477+ D4F6 21 91 C0                             ld      hl,eqshp_current_end
 478+ D4F9                                      ReturnIfAGTEusng      (hl)
 478+ D4F9 BE          >                        cp    (hl)
 478+ D4FA D0          >                        ret	 nc
 479+ D4FB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 480+ D4FE 34                                   inc     (hl)
 481+ D4FF CD A3 D3                             call    draw_eqship_items
 482+ D502 C9                                   ret
 483+ D503              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ D503 3A 19 7F     eqshp_LeftPressed:      ld      a,(Galaxy)
 485+ D506                                      MMUSelectGalaxyA
 485+ D506 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 486+ D509 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 487+ D50D 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 488+ D510 47                                   ld      b,a
 489+ D511 3A 8F C0                             ld      a,(eqshp_selected_row)
 490+ D514 80                                   add     b
 491+ D515 FE 00                                cp      0
 492+ D517 C8                                   ret     z
 493+ D518 4F           .FuelNotSelected:       ld      c,a
 494+ D519 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 495+ D51B 5F                                   ld      e,a
 496+ D51C ED 30                                mul
 497+ D51E DD 19                                add     ix,de
 498+ D520 DD 7E 07                             ld      a,(ix+7)
 499+ D523 FE 2D                                cp      "-"
 500+ D525 C8                                   ret     z
 501+ D526 79           .CheckIfMissle:         ld      a,c
 502+ D527 FE 01                                cp      EQ_MISSILE
 503+ D529 28 2F                                jr      z,.RefundMissle
 504+ D52B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 505+ D52E DD 56 05                             ld      d,(ix+5)
 506+ D531 E5 C5                                push    hl,,bc
 507+ D533 CD FE 8F                             call    addDEtoCash         ; refund laser value
 508+ D536 C1 E1                                pop     hl,,bc
 509+ D538 3E 2D                                ld      a,"-"
 510+ D53A DD 77 07                             ld      (ix+7),a
 511+ D53D 21 00 84                             ld      hl,EquipmentFitted
 512+ D540 79                                   ld      a,c                 ; get back current laser ref
 513+ D541 ED 31                                add     hl,a
 514+ D543 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 515+ D545 CD 5D D4                             call    eqip_refesh_buffer
 516+ D548 DD 7E 08                             ld      a,(ix+8)
 517+ D54B FE FF                                cp      $FF
 518+ D54D C8                                   ret     z
 519+ D54E 21 F8 83     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 520+ D551 47                                   ld      b,a
 521+ D552 DD 7E 09                             ld      a,(ix+9)
 522+ D555 ED 31                                add     hl,a
 523+ D557 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 524+ D559 C9                                   ret
 525+ D55A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 526+ D55D DD 56 05                             ld      d,(ix+5)
 527+ D560 E5 C5                                push    hl,,bc
 528+ D562 CD FE 8F                             call    addDEtoCash         ; refund laser value
 529+ D565 C1 E1                                pop     hl,,bc
 530+ D567 DD 7E 07                             ld      a,(ix+7)
 531+ D56A 3D                                   dec     a
 532+ D56B FE 30                                cp      "0"
 533+ D56D 20 02                                jr      nz,.NotAllSold
 534+ D56F 3E 2D        .AllSold:               ld      a,"-"
 535+ D571 DD 77 07     .NotAllSold:            ld      (ix+7),a
 536+ D574 CD 5D D4                             call    eqip_refesh_buffer
 537+ D577 C9                                   ret
 538+ D578              ;----------------------------------------------------------------------------------------------------------------------------------
 539+ D578 3A 19 7F     eqshp_RightPressed:     ld      a,(Galaxy)
 540+ D57B                                      MMUSelectGalaxyA
 540+ D57B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 541+ D57E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 542+ D582 3A 90 C0                             ld      a,(eqshp_current_topItem)
 543+ D585 47                                   ld      b,a
 544+ D586 3A 8F C0                             ld      a,(eqshp_selected_row)
 545+ D589 80                                   add     a,b
 546+ D58A FE 01                                cp      EQ_MISSILE
 547+ D58C 20 0A                                jr      nz,.NotAMissileBuy
 548+ D58E 08           .ItsAMissile:           ex      af,af'
 549+ D58F 3E 34                                ld      a,"4"
 550+ D591 32 AA D5                             ld      (.CompareCheck+1),a
 551+ D594 08                                   ex      af,af'
 552+ D595 C3 9F D5                             jp      .FindInTable
 553+ D598 08           .NotAMissileBuy:        ex      af,af'
 554+ D599 3E 2A                                ld      a,"*"
 555+ D59B 32 AA D5                             ld      (.CompareCheck+1),a
 556+ D59E 08                                   ex      af,af'
 557+ D59F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 558+ D5A1 5F                                   ld      e,a
 559+ D5A2 ED 30                                mul
 560+ D5A4 DD 19                                add     ix,de
 561+ D5A6 DD 7E 07                             ld      a,(ix+7)
 562+ D5A9 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 563+ D5AB C8                                   ret     z
 564+ D5AC 47           .Purchasable:           ld      b,a
 565+ D5AD DD 7E 06                             ld      a,(ix+6)
 566+ D5B0 FE 01                                cp      EQ_MISSILE
 567+ D5B2 20 06                                jr      nz,.NotMissleMax
 568+ D5B4 21 39 7F     .MissleQuanity:         ld      hl,NbrMissiles
 569+ D5B7 78                                   ld      a,b
 570+ D5B8 BE                                   cp      (hl)
 571+ D5B9 C8                                   ret     z
 572+ D5BA 4F           .NotMissleMax:          ld      c,a
 573+ D5BB DD 7E 01                             ld      a,(ix+1)
 574+ D5BE FE FF                                cp      $FF
 575+ D5C0 C8                                   ret     z
 576+ D5C1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 576+ D5C1 3A E3 83    >                        ld      a,(Cash+2)
 576+ D5C4 A7          >                        and     a
 576+ D5C5 C2 D5 D5    >                        jp	    nz,.MoreThanRequired
 577+ D5C8 2A E1 83                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 578+ D5CB DD 5E 04                             ld      e,(ix+4)
 579+ D5CE DD 56 05                             ld      d,(ix+5)
 580+ D5D1 CD 55 99                             call	compare16HLDE
 581+ D5D4 D8                                   ret     c                                           ; Insufficient Funds
 582+ D5D5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 583+ D5D8 FE 00                                cp      0
 584+ D5DA 28 15                                jr      z,.MaxFuelOut
 585+ D5DC FE 01                                cp      1
 586+ D5DE 28 1B                                jr      z,.AddMissle
 587+ D5E0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 587+ D5E0 FE 0A       >                        cp     EQ_FRONT_PULSE
 587+ D5E2 D2 05 D6    >                        jp		nc,.AddLaser
 588+ D5E5 21 00 84     .AddNormalItem:         ld      hl,EquipmentFitted
 589+ D5E8 ED 31                                add     hl,a
 590+ D5EA 36 FF                                ld      (hl),EquipmentItemFitted
 591+ D5EC 3E 2A                                ld      a,"*"
 592+ D5EE C3 4D D6                             jp      .AddedItem
 593+ D5F1              .MaxFuelOut:            MaxFuelMacro
 593+ D5F1 3E 46       >						ld		a,MaxFuelLevel
 593+ D5F3 32 E5 83    >						ld		(Fuel),a
 594+ D5F6 3E 2A                                ld      a,"*"
 595+ D5F8 C3 4D D6                             jp      .AddedItem
 596+ D5FB 21 39 7F     .AddMissle:             ld      hl,NbrMissiles
 597+ D5FE 34                                   inc     (hl)
 598+ D5FF 7E                                   ld      a,(hl)
 599+ D600 C6 30                                add     "0"
 600+ D602 C3 4D D6                             jp      .AddedItem
 601+ D605 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 602+ D608 FE FF                                cp      $FF
 603+ D60A 20 29                                jr      nz,.BuyLaser
 604+ D60C              .LargeCargoBay: ;TODO
 605+ D60C 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 606+ D60D 21 D6 F4                             ld      hl,ShipEquipmentList
 607+ D610 16 10                                ld      d,ShipEquipTableRowLen
 608+ D612 5F                                   ld      e,a
 609+ D613 ED 30                                mul
 610+ D615 19                                   add     hl,de               ; now we have the row for the current laser
 611+ D616 3E 04                                ld      a,4
 612+ D618 ED 31                                add     hl,a
 613+ D61A 7E                                   ld      a,(hl)
 614+ D61B 5F                                   ld      e,a
 615+ D61C 23                                   inc     hl
 616+ D61D 7E                                   ld      a,(hl)
 617+ D61E 57                                   ld      d,a
 618+ D61F E5 C5                                push    hl,,bc
 619+ D621 CD FE 8F                             call    addDEtoCash         ; refund laser value
 620+ D624 C1 E1                                pop     hl,,bc
 621+ D626 3E 02                                ld      a,2
 622+ D628 ED 31                                add     hl,a
 623+ D62A 3E 2D                                ld      a,"-"
 624+ D62C 77                                   ld      (hl),a              ; clear on ship equipment
 625+ D62D 21 00 84                             ld      hl,EquipmentFitted
 626+ D630 79                                   ld      a,c                 ; get back current laser ref
 627+ D631 ED 31                                add     hl,a
 628+ D633 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 629+ D635 21 00 84     .BuyLaser:              ld      hl,EquipmentFitted
 630+ D638 DD 7E 06                             ld      a,(ix+6)
 631+ D63B ED 31                                add     hl,a
 632+ D63D 36 FF                                ld      (hl),EquipmentItemFitted
 633+ D63F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 634+ D642 21 F8 83                             ld      hl,LaserType
 635+ D645 ED 31                                add     hl,a
 636+ D647 DD 7E 08                             ld      a,(ix+8)            ; get type
 637+ D64A 77                                   ld      (hl),a
 638+ D64B 3E 2A                                ld      a,"*"
 639+ D64D DD 77 07     .AddedItem              ld      (ix+7),a
 640+ D650 DD 5E 04                             ld      e,(ix+4)
 641+ D653 DD 56 05                             ld      d,(ix+5)
 642+ D656 CD 11 90                             call    subDEfromCash
 643+ D659 CD 5D D4                             call    eqip_refesh_buffer
 644+ D65C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1522  D65D                                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
1523  D65D                                  ASSERT $-MenuEquipSAddr <8912 , Bank code leaks over 8K boundary
1524  D65D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
1525  D65D                                  SLOT    LaunchShipAddr
1526  D65D                                  PAGE    BankLaunchShip
1527  D65D                                  ORG     LaunchShipAddr
1528  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 77 E4                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 77 E4                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD D6 E9                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD D6 E9                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 4C 7D                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 4C 7D                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 8F E0                             call    l1_cls
 129+ C180 CD A9 E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E5                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 04 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 38 E1                             ld      (l2_cls_byte),a
 136+ C196 CD 77 E1                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 38 E1                             ld      (l2_cls_byte),a
 139+ C19E CD DE E1                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 97 E2                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 38 E1                             ld      (l2_cls_byte),a
 146+ C1B3 CD 77 E1                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 38 E1                             ld      (l2_cls_byte),a
 149+ C1BB CD DE E1                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 83 7E    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 84 7E    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 85 7E >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 84 7E    >                        ld      (DELTA),a
 160+ C1E9 32 85 7E    >                        ld      (DELT4Lo),a
 160+ C1EC 32 86 7E    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 43 80                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5 DD 01        draw_docking_ship:      break
 168+ C1F7                                      MMUSelectLayer1
 168+ C1F7 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 169+ C1FB CD 8F E0                             call    l1_cls
 170+ C1FE CD A9 E0                             call    l1_attr_cls
 171+ C201                                      MMUSelectSpriteBank
 171+ C201 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 172+ C205 CD 6E E5                             call    sprite_cls_cursors
 173+ C208                                      MMUSelectLayer2
 173+ C208 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 174+ C20C CD 04 E0                             call    asm_l2_double_buffer_on
 175+ C20F 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 176+ C211 32 38 E1                             ld      (l2_cls_byte),a
 177+ C214 CD 77 E1                             call    l2_set_color_upper2
 178+ C217 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 179+ C219 32 38 E1                             ld      (l2_cls_byte),a
 180+ C21C CD DE E1                             call    l2_cls_lower_third
 181+ C21F CD 07 C1                             call    LaunchTubeEdges
 182+ C222 CD 5C C1                             call    LaunchConsole
 183+ C225              .NextBuffer:            MMUSelectLayer2
 183+ C225 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 184+ C229 CD 97 E2                             call    l2_flip_buffers
 185+ C22C 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 186+ C22E 32 38 E1                             ld      (l2_cls_byte),a
 187+ C231 CD 77 E1                             call    l2_set_color_upper2
 188+ C234 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 189+ C236 32 38 E1                             ld      (l2_cls_byte),a
 190+ C239 CD DE E1                             call    l2_cls_lower_third
 191+ C23C CD 07 C1                             call    LaunchTubeEdges
 192+ C23F CD 5C C1                             call    LaunchConsole
 193+ C242 3E FF        .SetUpTimers:           ld      a,init_countdown
 194+ C244 32 00 C1                             ld      (launch_countdown),a
 195+ C247 21 87 C0                             ld      hl,dockingdraw_table
 196+ C24A 22 03 C1                             ld      (docking_table_idx),hl
 197+ C24D AF                                   xor     a
 198+ C24E 32 05 C1                             ld      (current_offsetX),a
 199+ C251 32 06 C1                             ld      (current_offsetY),a
 200+ C254 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 201+ C255                                      ZeroThrottle
 201+ C255 AF          >                        xor     a
 201+ C256 32 84 7E    >                        ld      (DELTA),a
 201+ C259 32 85 7E    >                        ld      (DELT4Lo),a
 201+ C25C 32 86 7E    >                        ld      (DELT4Lo+1),a
 202+ C25F 3E FF                                ld      a,StatePlayerDocked
 203+ C261 32 43 80                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 204+ C264 C9                                   ret
 205+ C265
 206+ C265 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 207+ C268 3E FF                                ld      a,init_countdown
 208+ C26A 32 00 C1                             ld      (launch_countdown),a
 209+ C26D 2A 01 C1                             ld      hl,(launch_table_idx)
 210+ C270 4E                                   ld      c,(hl)
 211+ C271 79                                   ld      a,c
 212+ C272 FE FF                                cp      $FF
 213+ C274 28 1E                                jr      z,.FinishedLaunch
 214+ C276 23                                   inc     hl
 215+ C277 46                                   ld      b,(hl)                 ; bc = top left
 216+ C278 23                                   inc     hl
 217+ C279 5E                                   ld      e,(hl)
 218+ C27A 23                                   inc     hl
 219+ C27B 56                                   ld      d,(hl)                 ;de = width and height
 220+ C27C 23                                   inc     hl
 221+ C27D 7E                                   ld      a,(hl)                 ; a = colour
 222+ C27E 23                                   inc     hl
 223+ C27F 22 01 C1                             ld      (launch_table_idx),hl
 224+ C282 67                                   ld      h,a
 225+ C283 C5 D5                                push    bc,,de
 226+ C285                                      MMUSelectLayer2
 226+ C285 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 227+ C289 CD E9 E3                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 228+ C28C D1 C1                                pop     bc,,de
 229+ C28E 3E 80                                ld      a,$80
 230+ C290 CD F9 E3                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 231+ C293 C9                                   ret
 232+ C294 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 233+ C296 32 43 80                             ld      (DockedFlag),a
 234+ C299 C9                                   ret
 235+ C29A
 236+ C29A CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 237+ C29D 3E FF                                ld      a,init_countdown
 238+ C29F 32 00 C1                             ld      (launch_countdown),a
 239+ C2A2 2A 03 C1                             ld      hl,(docking_table_idx)
 240+ C2A5 4E                                   ld      c,(hl)
 241+ C2A6 79                                   ld      a,c
 242+ C2A7 FE FF                                cp      $FF
 243+ C2A9 28 1E                                jr      z,.FinishedDocking
 244+ C2AB 23                                   inc     hl
 245+ C2AC 46                                   ld      b,(hl)                 ; bc = top left
 246+ C2AD 23                                   inc     hl
 247+ C2AE 5E                                   ld      e,(hl)
 248+ C2AF 23                                   inc     hl
 249+ C2B0 56                                   ld      d,(hl)                 ;de = width and height
 250+ C2B1 23                                   inc     hl
 251+ C2B2 7E                                   ld      a,(hl)
 252+ C2B3 23                                   inc     hl
 253+ C2B4 22 03 C1                             ld      (docking_table_idx),hl
 254+ C2B7 67                                   ld      h,a
 255+ C2B8 C5 D5                                push    bc,,de
 256+ C2BA                                      MMUSelectLayer2
 256+ C2BA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 257+ C2BE CD E9 E3                             call    l2_draw_fill_box
 258+ C2C1 D1 C1                                pop     bc,,de
 259+ C2C3 3E 80                                ld      a,$80
 260+ C2C5 CD F9 E3                             call    l2_draw_box
 261+ C2C8 C9                                   ret
 262+ C2C9              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 262+ C2C9 3E 04       >                        ld      a,ScreenStatus
 262+ C2CB 32 99 69    >                        ld      (ScreenTransitionForced), a
 263+ C2CE C9                                   ret
 264+ C2CF
 265+ C2CF
 266+ C2CF
# file closed: ./Transitions/launch_ship.asm
1529  C2CF                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
1530  C2CF                                  ASSERT $-LaunchShipAddr <8912 , Bank code leaks over 8K boundary
1531  C2CF              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1532  C2CF                                  SLOT    UniverseBankAddr
1533  C2CF                                  PAGE    BankUNIVDATA0
1534  C2CF                                  ORG	    UniverseBankAddr,BankUNIVDATA0
1535  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ;    DEFINE PLOTPOINTSONLY 1
   3+ C000              ;   DEFINE OVERLAYNODES 1
   4+ C000              ; In  flight ship data tables
   5+ C000              ; In  flight ship data tables
   6+ C000              ; There can be upto &12 objects in flight.
   7+ C000              ; To avoid hassle of memory heap managment, the free list
   8+ C000              ; will correspond to a memory bank offset so data will be held in
   9+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  10+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  11+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  12+ C000              ; This means each gets its own line list, inwork etc
  13+ C000
  14+ C000              ; "Runtime Ship Data paged into in Bank 7"
  15+ C000              ;                       1234567890123456
  16+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  16+ C004 65 72 73 65
  16+ C008 20 50 47
  17+ C00B 58           StartOfUnivN:       DB "X"
  18+ C00C 00 00        StartOfUnivPad:     DS 2
  19+ C00E 00           StartOfUnivM:       DB 0
  20+ C00F 00           StartOfUnivT        DB 0
  21+ C010 00 00 00...  StartOfUnivName     DS 16
  22+ C020              ; NOTE we can cheat and pre allocate segs just using a DS for now
  23+ C020
  24+ C020              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  25+ C020              ; Universe map substibute for INWK
  26+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  27+ C020                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  17++C02B              UBnkrotmatSidev             equ UBnkrotmatSidevX
  18++C02B 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  19++C02D 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  20++C02F 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  21++C031              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  22++C031 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  23++C033 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  24++C035 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  25++C037              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  26++C037 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  27++C039 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  28++C03B              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  29++C03B              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  30++C03B 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  31++C03C 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  33++C03E 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  34++C03F              ; -- Metadata for ship to help with bank managment
  35++C03F              UBnKStartOfRuntimeData:
  36++C03F 00           UBnKSlotNumber              DB  0
  37++C040 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  38++C041 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  39++C042 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  40++C043 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  41++C044              ; -- Ship AI data
  42++C044 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  43++C045 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  44++C046 00           UBnKSpeed                   DB  0                       ; INWK +27
  45++C047 00           UBnKAccel                   DB  0                       ; INWK +28
  46++C048 00           UBnKRotXCounter             DB  0                       ; INWK +29
  47++C049 00           UBnKRotZCounter             DB  0                       ; INWK +30
  48++C04A 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  49++C04B 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  50++C04C 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  51++C04D 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  52++C04E 00           univRAT                     DB  0               ; 99
  53++C04F 00           univRAT2                    DB  0               ; 9A
  54++C050 00           univRAT2Val                 DB  0               ; 9A
  55++C051 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  56++C052 00           UBnkDrawAllFaces            DB  0
  57++C053 00           UBnKShipAggression          DB  0                       ; calculated agression factor
  58++C054 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  59++C055 00           UBnKSpawnObject             DB  0
  60++C056 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  61++C057 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  62++C058 00           UBnKEnergy                  DB  0                       ; INWK +35
  63++C059 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  64++C05A 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  65++C05B 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
  66++C05C 00           UBnKMissilesLeft            DB  0
  67++C05D 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
  68++C05E 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  69++C05F 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  70++C060 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  71++C061              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  72++C061              ; Flags work as follows:
  73++C061              ; UBnKSpawnObject - signals on death to spawn cargo items
  74++C061              ; 0 -                   Spawn Cargo 1
  75++C061              ; 1 -                   Spawn Cargo 2
  76++C061              ; 2 -                   Spawn Cargo 3
  77++C061              ; 3 -                   Spawn Cargo 4
  78++C061              ; 4 -                   Spawn Alloy 1
  79++C061              ; 5 -                   Spawn Alloy 2
  80++C061              ; 6 -                   Spawn Alloy 3
  81++C061              ; 7 -                   Spawn Alloy 4
  82++C061
  83++C061              ; UBnkaiatkecm
  84++C061              ; Bit	                Description
  85++C061              ; 7 -                   AI Enabled Flag
  86++C061              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  87++C061              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  88++C061              ;                       linger can be done by not erasing ship unit missile equeue handled
  89++C061              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
  90++C061              ; 3 -                   Display state - Plot as a Dot
  91++C061              ; 2 -                   Nbr of Missiles bit 2
  92++C061              ; 1 -                   Nbr of Missiles bit 1
  93++C061              ; 0 -                   ECM present flag
  94++C061              ; ShipNewBitsAddr (in blueprint)
  95++C061              ;Bit	                Description
  96++C061              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  97++C061              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  98++C061              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  99++C061              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 100++C061              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 101++C061              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 102++C061              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 103++C061              ;                       Hostile ships will attack us on sight; there are quite a few of them
 104++C061              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 105++C061              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 106++C061              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 107++C061              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 108++C061              ;#4	Docking flag        * 0 = not docking * 1 = docking
 109++C061              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 110++C061              ;                       This flag is randomly set for traders when they are spawned
 111++C061              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 112++C061              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 113++C061              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 114++C061              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 115++C061              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 116++C061              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 117++C061              ;                       Ships that are cops: Viper, Transporter
 118++C061              ;#7	Scooped, docked, escape pod flag
 119++C061              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 120++C061              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 121++C061              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 122++C061
# file closed: ././Universe/Ships/AIRuntimeData.asm
  28+ C061              ; moved to runtime asm
  29+ C061              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  30+ C061              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  31+ C061
  32+ C061              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  33+ C061              ;                    [roofv x y z ] roof vector (up)
  34+ C061              ;                    [sidev x y z ] side vector (right)
  35+ C061              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  36+ C061              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  37+ C061
  38+ C061
  39+ C061                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C061              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C061 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C063              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C063 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C065 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C067 00 00        UBnkTransmatRoofvX          DW 0
   7++C069              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C069 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C06B 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C06D 00 00        UBnkTransmatNosevX          DW 0
  11++C06F              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C06F 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C071 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C073 00 00        UbnkTransmatTransX          DW 0
  15++C075 00 00        UbnkTransmatTransY          DW 0
  16++C077 00 00        UbnkTransmatTransZ          DW 0
  17++C079              XX16                        equ UBnkTransmatSidev
  18++C079              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C079 00 00        UbnkTransInvRow0x0          DW 0
  20++C07B 00 00        UbnkTransInvRow0x1          DW 0
  21++C07D 00 00        UbnkTransInvRow0x2          DW 0
  22++C07F 00 00        UbnkTransInvRow0x3          DW 0
  23++C081 00 00        UbnkTransInvRow1y0          DW 0
  24++C083 00 00        UbnkTransInvRow1y1          DW 0
  25++C085 00 00        UbnkTransInvRow1y2          DW 0
  26++C087 00 00        UbnkTransInvRow1y3          DW 0
  27++C089 00 00        UbnkTransInvRow2z0          DW 0
  28++C08B 00 00        UbnkTransInvRow2z1          DW 0
  29++C08D 00 00        UbnkTransInvRow2z2          DW 0
  30++C08F 00 00        UbnkTransInvRow2z3          DW 0
  31++C091
  32++C091              XX16Inv             equ UbnkTransInvRow0x0
  33++C091
# file closed: ././Universe/Ships/XX16Vars.asm
  40+ C091                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C091              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C091 00           UbnkProjxLo                 DB  0
   3++C092 00           UbnkProjxHi                 DB  0
   4++C093 00           UbnkProjxSgn                DB  0
   5++C094              UbnkProjx                   EQU UbnkProjxLo
   6++C094 00           UbnkProjyLo                 DB  0
   7++C095 00           UbnkProjyHi                 DB  0
   8++C096 00           UbnkProjySgn                DB  0
   9++C097              UbnkProjy                   EQU UbnkProjyLo
  10++C097 00           UbnkProjzLo                 DB  0
  11++C098 00           UbnkProjzHi                 DB  0
  12++C099 00           UbnkProjzSgn                DB  0
  13++C09A              UbnkProjz                   EQU UbnkProjzLo
  14++C09A              XX25                        EQU UbnkProjxLo
  15++C09A
# file closed: ././Universe/Ships/XX25Vars.asm
  41+ C09A                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C09A              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C09A 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C09B 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C09C 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C09D              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C09D 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C09E 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C09F 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0A0              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0A0 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0A1 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0A2 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0A3              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0A3              XX18                        equ UBnkDrawCam0xLo
  15++C0A3
# file closed: ././Universe/Ships/XX18Vars.asm
  42+ C0A3
  43+ C0A3              ; Used to make 16 bit reads a little cleaner in source code
  44+ C0A3 00 00 00     UbnkZPoint                  DS  3
  45+ C0A6              UbnkZPointLo                equ UbnkZPoint
  46+ C0A6              UbnkZPointHi                equ UbnkZPoint+1
  47+ C0A6              UbnkZPointSign              equ UbnkZPoint+2
  48+ C0A6                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C0A6              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0A6 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0A7 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0A8 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0A9 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0AA 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0AB 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0AC
   9++C0AC              XX15                        equ UBnkXScaled
  10++C0AC              XX15VecX                    equ XX15
  11++C0AC              XX15VecY                    equ XX15+1
  12++C0AC              XX15VecZ                    equ XX15+2
  13++C0AC              UbnkXPoint                  equ XX15
  14++C0AC              UbnkXPointLo                equ XX15+0
  15++C0AC              UbnkXPointHi                equ XX15+1
  16++C0AC              UbnkXPointSign              equ XX15+2
  17++C0AC              UbnkYPoint                  equ XX15+3
  18++C0AC              UbnkYPointLo                equ XX15+3
  19++C0AC              UbnkYPointHi                equ XX15+4
  20++C0AC              UbnkYPointSign              equ XX15+5
  21++C0AC              ; Repurposed XX15 pre clip plines
  22++C0AC              UbnkPreClipX1               equ XX15+0
  23++C0AC              UbnkPreClipY1               equ XX15+2
  24++C0AC              UbnkPreClipX2               equ XX15+4
  25++C0AC              UbnkPreClipY2               equ XX15+6
  26++C0AC              ; Repurposed XX15 post clip lines
  27++C0AC              UBnkNewX1                   equ XX15+0
  28++C0AC              UBnkNewY1                   equ XX15+1
  29++C0AC              UBnkNewX2                   equ XX15+2
  30++C0AC              UBnkNewY2                   equ XX15+3
  31++C0AC              ; Repurposed XX15
  32++C0AC              regXX15fx                   equ UBnkXScaled
  33++C0AC              regXX15fxSgn                equ UBnkXScaledSign
  34++C0AC              regXX15fy                   equ UBnkYScaled
  35++C0AC              regXX15fySgn                equ UBnkYScaledSign
  36++C0AC              regXX15fz                   equ UBnkZScaled
  37++C0AC              regXX15fzSgn                equ UBnkZScaledSign
  38++C0AC              ; Repurposed XX15
  39++C0AC              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0AC              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0AC              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0AC              ; After clipping the coords are two 8 bit pairs
  43++C0AC              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0AC              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0AC              ; Repurposed XX15 when plotting lines
  46++C0AC              ; Repurposed XX15 before calling clip routine
  47++C0AC              UBnkX1                      equ XX15
  48++C0AC              UBnKx1Lo                    equ XX15
  49++C0AC              UBnKx1Hi                    equ XX15+1
  50++C0AC              UBnkY1                      equ XX15+2
  51++C0AC              UbnKy1Lo                    equ XX15+2
  52++C0AC              UBnkY1Hi                    equ XX15+3
  53++C0AC              UBnkX2                      equ XX15+4
  54++C0AC              UBnkX2Lo                    equ XX15+4
  55++C0AC              UBnkX2Hi                    equ XX15+5
  56++C0AC
# file closed: ././Universe/Ships/XX15Vars.asm
  49+ C0AC                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C0AC              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0AC              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0AC 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0AD 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0AE 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0AF 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0B0 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0B1 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0B2 00 00 00...  XX12Save                    DS  6
  10++C0B8 00 00 00...  XX12Save2                   DS  6
  11++C0BE              XX12                        equ UBnkXX12xLo
  12++C0BE              varXX12                     equ UBnkXX12xLo
  13++C0BE              ; Repurposed XX12 when plotting lines
  14++C0BE              UBnkY2                      equ XX12+0
  15++C0BE              UbnKy2Lo                    equ XX12+0
  16++C0BE              UBnkY2Hi                    equ XX12+1
  17++C0BE              UBnkDeltaXLo                equ XX12+2
  18++C0BE              UBnkDeltaXHi                equ XX12+3
  19++C0BE              UBnkDeltaYLo                equ XX12+4
  20++C0BE              UBnkDeltaYHi                equ XX12+5
  21++C0BE              UbnkGradient                equ XX12+2
  22++C0BE              UBnkTemp1                   equ XX12+2
  23++C0BE              UBnkTemp1Lo                 equ XX12+2
  24++C0BE              UBnkTemp1Hi                 equ XX12+3
  25++C0BE              UBnkTemp2                   equ XX12+3
  26++C0BE              UBnkTemp2Lo                 equ XX12+3
  27++C0BE              UBnkTemp2Hi                 equ XX12+4
  28++C0BE
# file closed: ././Universe/Ships/XX12Vars.asm
  50+ C0BE
  51+ C0BE
  52+ C0BE              ; Post clipping the results are now 8 bit
  53+ C0BE 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  54+ C0BF 00           UBnkProjectedY              DB  0
  55+ C0C0 00           UBnkProjectedX              DB  0
  56+ C0C1              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  57+ C0C1 00 00 00...  XX15Save                    DS  8
  58+ C0C9 00 00 00...  XX15Save2                   DS  8
  59+ C0D1 00           VarBackface                 DB 0
  60+ C0D2              ; Heap (or array) information for lines and normals
  61+ C0D2              ; Coords are stored XY,XY,XY,XY
  62+ C0D2              ; Normals
  63+ C0D2              ; This needs re-oprganising now.
  64+ C0D2              ; Runtime Calculation Store
  65+ C0D2
  66+ C0D2              FaceArraySize               equ 30
  67+ C0D2              EdgeHeapSize                equ 40
  68+ C0D2              NodeArraySize               equ 40
  69+ C0D2              LineArraySize               equ 50; incerased for max of 28 lines, of 4 points of 16 bits each
  70+ C0D2              ; ONLY IF TESTING SOLID FILL TraingleArraySize           equ 25
  71+ C0D2              ; Storage arrays for data
  72+ C0D2              ; Structure of arrays
  73+ C0D2              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  74+ C0D2              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  75+ C0D2              ; NodeArray         -  4 bytes per element      0           1            2          3
  76+ C0D2              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  77+ C0D2              ; Line Array        -  4 bytes per eleement     0           1            2          3
  78+ C0D2              ;                                               X1          Y1           X2         Y2
  79+ C0D2 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  80+ C0F0              ; Node array holds the projected to screen position regardless of if its clipped or not
  81+ C0F0              ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
  82+ C0F0 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  83+ C190 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  84+ C230 00 00 00...  UbnkLineArray               DS LineArraySize * 8        ; XX19 Holds the clipped line details
  85+ C3C0              ; ONLY IF TESTING SOLID FILL UBnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
  86+ C3C0              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  87+ C3C0              UBnkTraingleArray           EQU UbnkLineArray           ; We can use the line array as we draw lines or traingles
  88+ C3C0 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  89+ C3E8              ; Array current Lengths
  90+ C3E8 00           UbnkFaceVisArrayLen         DS 1
  91+ C3E9 00           UBnkNodeArrayLen            DS 1
  92+ C3EA 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  93+ C3EB 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  94+ C3EC              XX20                        equ UbnkLineArrayLen
  95+ C3EC              varXX20                     equ UbnkLineArrayLen
  96+ C3EC
  97+ C3EC 00           UbnkEdgeHeapSize            DS 1
  98+ C3ED 00           UbnkEdgeHeapBytes           DS 1
  99+ C3EE 00           UBnkLinesHeapLen            DS 1
 100+ C3EF 00           UbnKEdgeHeapCounter         DS 1
 101+ C3F0 00           UbnKEdgeRadius              DS 1
 102+ C3F1 00           UbnKEdgeShipType            DS 1
 103+ C3F2 00           UbnKEdgeExplosionType       DS 1
 104+ C3F3
 105+ C3F3              ; Node heap is used to write out transformed Vertexs
 106+ C3F3
 107+ C3F3              ; Lines
 108+ C3F3 00 00 00     UBnkXX19                    DS  3
 109+ C3F6
 110+ C3F6 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 111+ C411              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 112+ C411              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 113+ C411              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 114+ C411              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 115+ C411              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 116+ C411              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 117+ C411              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 118+ C411              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 119+ C411              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 120+ C411              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 121+ C411              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 122+ C411              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 123+ C411              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 124+ C411              DotAddr                     equ UBnkHullCopy + DotOffset
 125+ C411              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 126+ C411              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 127+ C411              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 128+ C411              QAddr                       equ UBnkHullCopy + QOffset
 129+ C411              LaserAddr                   equ UBnkHullCopy + LaserOffset
 130+ C411              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 131+ C411              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 132+ C411              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 133+ C411              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 134+ C411              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 135+ C411              ShipSolidFlagAddr           equ UBnkHullCopy + ShipSolidFlagOffset
 136+ C411              ShipSolidFillAddr           equ UBnkHullCopy + ShipSolidFillOffset
 137+ C411              ShipSolidLenAddr            equ UBnkHullCopy + ShipSolidLenOffset
 138+ C411              ; Static Ship Data. This is copied in when creating the universe object
 139+ C411              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 140+ C411
 141+ C411 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 142+ C501 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 143+ C5C9 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 144+ C619                  IFDEF SOLIDHULLTEST
 145+ C619 ~            UBnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 146+ C619                  ENDIF
 147+ C619 0C           OrthagCountdown             DB  12
 148+ C61A
 149+ C61A              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 150+ C61A              UBnk_Data_len               EQU $ - StartOfUniv
 151+ C61A
 152+ C61A              ZeroUnivPitchAndRoll:   MACRO
 153+ C61A ~                                    xor     a
 154+ C61A ~                                    ld      (UBnKRotXCounter),a
 155+ C61A ~                                    ld      (UBnKRotZCounter),a
 156+ C61A                                      ENDM
 157+ C61A
 158+ C61A              MaxUnivPitchAndRoll:    MACRO
 159+ C61A ~                                    ld      a,127
 160+ C61A ~                                    ld      (UBnKRotXCounter),a
 161+ C61A ~                                    ld      (UBnKRotZCounter),a
 162+ C61A                                      ENDM
 163+ C61A
 164+ C61A              RandomUnivPitchAndRoll: MACRO
 165+ C61A ~                                    call    doRandom
 166+ C61A ~                                    or      %01101111
 167+ C61A ~                                    ld      (UBnKRotXCounter),a
 168+ C61A ~                                    call    doRandom
 169+ C61A ~                                    or      %01101111
 170+ C61A ~                                    ld      (UBnKRotZCounter),a
 171+ C61A                                      ENDM
 172+ C61A
 173+ C61A              RandomUnivSpeed:        MACRO
 174+ C61A ~                                    call    doRandom
 175+ C61A ~                                    and     31
 176+ C61A ~                                    ld      (UBnKSpeed),a
 177+ C61A                                      ENDM
 178+ C61A
 179+ C61A              MaxUnivSpeed:           MACRO
 180+ C61A ~                                    ld      a,31
 181+ C61A ~                                    ld      (UBnKSpeed),a
 182+ C61A                                      ENDM
 183+ C61A
 184+ C61A              ZeroUnivAccelleration:  MACRO
 185+ C61A ~                                    xor     a
 186+ C61A ~                                    ld      (UBnKAccel),a
 187+ C61A                                      ENDM
 188+ C61A
 189+ C61A 3A 0E C4     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 190+ C61D F6 04                                or      ShipIsHostile
 191+ C61F 32 0E C4                             ld      (ShipNewBitsAddr),a
 192+ C622 C9                                   ret
 193+ C623
 194+ C623 3A 0E C4     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 195+ C626 E6 FB                                and     ShipNotHostile
 196+ C628 32 0E C4                             ld      (ShipNewBitsAddr),a
 197+ C62B C9                                   ret
 198+ C62C
 199+ C62C
 200+ C62C              ; --------------------------------------------------------------
 201+ C62C 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 202+ C62F 11 1A 06                             ld      de,UBnk_Data_len
 203+ C632 AF                                   xor     a
 204+ C633 CD 26 7D                             call    memfill_dma
 205+ C636 C9                                   ret
 206+ C637              ; --------------------------------------------------------------
 207+ C637 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 208+ C63A 06 09                                ld      b, 3*3
 209+ C63C AF                                   xor     a
 210+ C63D 77           .zeroLoop:              ld      (hl),a
 211+ C63E 23                                   inc     hl
 212+ C63F 10 FC                                djnz    .zeroLoop
 213+ C641 C9                                   ret
 214+ C642
 215+ C642 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 216+ C644 32 59 C0                             ld      (UBnKECMCountDown),a            ;
 217+ C647 3A 9F 7D                             ld      a,(ECMCountDown)
 218+ C64A                                      ReturnIfALTNusng ECMCounterMax
 218+ C64A FE 80       >                        cp    ECMCounterMax
 218+ C64C D8          >                        ret	 c
 219+ C64D 3E 80                                ld      a,ECMCounterMax
 220+ C64F 32 9F 7D                             ld      (ECMCountDown),a
 221+ C652 C9                                   ret
 222+ C653
 223+ C653 3A 58 C0     RechargeEnergy:         ld      a,(UBnKEnergy)
 224+ C656                                      ReturnIfAGTEMemusng EnergyAddr
 224+ C656 21 05 C4    >                        ld      hl,EnergyAddr
 224+ C659 BE          >                        cp      (hl)
 224+ C65A D0          >                        ret	    nc
 225+ C65B 3C                                   inc     a
 226+ C65C 32 58 C0                             ld      (UBnKEnergy),a
 227+ C65F C9                                   ret
 228+ C660              ; A ship normally needs enough energy to fire ECM but if its shot then
 229+ C660              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 230+ C660              ; plus a 50% chance it will blow the ECM up
 231+ C660 3A 59 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 232+ C663                                      ReturnIfAIsZero
 232+ C663 A7          >                        and     a
 232+ C664 C8          >                        ret     z
 233+ C665 3D                                   dec     a
 234+ C666 32 59 C0                             ld      (UBnKECMCountDown),a
 235+ C669 21 58 C0                             ld      hl,UBnKEnergy
 236+ C66C 35                                   dec     (hl)
 237+ C66D F0                                   ret     p
 238+ C66E CD 45 C7     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 239+ C671 C9                                   ret
 240+ C672
 241+ C672              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 242+ C672              JumpOffSet:             MACRO   Axis
 243+ C672 ~                                    ld      hl,(Axis)
 244+ C672 ~                                    ld      a,h
 245+ C672 ~                                    and     SignOnly8Bit
 246+ C672 ~                                    jr      nz,.NegativeAxis
 247+ C672 ~            .PositiveAxis:          dec     l
 248+ C672 ~                                    jp      m,.MovingNegative
 249+ C672 ~                                    jp      .Done
 250+ C672 ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 251+ C672 ~                                    jp      .Done
 252+ C672 ~            .MovingNegative:        ld      hl,$8001                        ; -1
 253+ C672 ~            .Done                   ld      (Axis),hl
 254+ C672                                      ENDM
 255+ C672
 256+ C672
 257+ C672              WarpOffset:             JumpOffSet  UBnKzhi                     ; we will simplify on just moving Z
 257+ C672 2A 27 C0    >                        ld      hl,(UBnKzhi)
 257+ C675 7C          >                        ld      a,h
 257+ C676 E6 80       >                        and     SignOnly8Bit
 257+ C678 20 07       >                        jr      nz,.NegativeAxis
 257+ C67A 2D          >.PositiveAxis:          dec     l
 257+ C67B FA 85 C6    >                        jp      m,.MovingNegative
 257+ C67E C3 88 C6    >                        jp      .Done
 257+ C681 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 257+ C682 C3 88 C6    >                        jp      .Done
 257+ C685 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 257+ C688 22 27 C0    >.Done                   ld      (UBnKzhi),hl
 258+ C68B C9                                   ret
 259+ C68C
 260+ C68C
 261+ C68C              ; --------------------------------------------------------------
 262+ C68C              ; update ship speed and pitch based on adjustments from AI Tactics
 263+ C68C 3A 47 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 264+ C68F                                      JumpIfAIsZero .SkipAccelleration
 264+ C68F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 264+ C690 CA AE C6    >                        jp	    z, .SkipAccelleration
 265+ C693 47                                   ld      b,a                             ; b = accelleration in 2's c
 266+ C694 3A 46 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 267+ C697                                      ClearCarryFlag
 267+ C697 B7          >                        or a
 268+ C698 88                                   adc     a,b
 269+ C699                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 269+ C699 F2 9D C6    >                        jp		p, .DoneAccelleration
 270+ C69C              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 270+ C69C AF          >                        xor a
 271+ C69D 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 272+ C69E 3A 06 C4                             ld      a,(SpeedAddr)                   ;    speed = limit
 273+ C6A1                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 273+ C6A1 B8          >                        cp     b
 273+ C6A2 D2 A6 C6    >                        jp		nc,.SpeedInLimits
 274+ C6A5 47                                   ld      b,a                             ; .
 275+ C6A6 78           .SpeedInLimits:         ld      a,b                             ; .
 276+ C6A7 32 46 C0                             ld      (UBnKSpeed),a                   ; .
 277+ C6AA                                      ZeroA                                   ; acclleration = 0
 277+ C6AA AF          >                        xor a
 278+ C6AB 32 47 C0                             ld      (UBnKAccel),a                   ; for next AI update
 279+ C6AE              .SkipAccelleration:     ; handle roll and pitch rates
 280+ C6AE C9                                   ret
 281+ C6AF
 282+ C6AF 21 AE A6     UnivSetEnemyMissile:    ld      hl,NewLaunchUBnKX               ; Copy launch ship matrix
 283+ C6B2 11 20 C0                             ld      de,UBnKxlo                      ;
 284+ C6B5 01 1B 00                             ld      bc,NewLaunchDataBlockSize       ; positon + 3 rows of 3 bytes
 285+ C6B8 ED B0                                ldir                                    ;
 286+ C6BA 3E 03        .SetUpSpeed:            ld      a,3                             ; set accelleration
 287+ C6BC 32 47 C0                             ld      (UBnKAccel),a                   ;
 288+ C6BF                                      ZeroA
 288+ C6BF AF          >                        xor a
 289+ C6C0 32 48 C0                             ld      (UBnKRotXCounter),a
 290+ C6C3 32 49 C0                             ld      (UBnKRotZCounter),a
 291+ C6C6 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 292+ C6C8 32 4A C0                             ld      (UBnKRAT),a
 293+ C6CB 3C                                   inc     a
 294+ C6CC 32 4B C0                             ld      (UBnKRAT2),a
 295+ C6CF 3E 16                                ld      a,22
 296+ C6D1 32 4D C0                             ld      (UBnKCNT2),a
 297+ C6D4                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 297+ C6D4 3E 1F       >                        ld      a,31
 297+ C6D6 32 46 C0    >                        ld      (UBnKSpeed),a
 298+ C6D9                                      SetMemFalse UBnKMissleHitToProcess
 298+ C6D9 3E FF       >                        ld      a,$FF
 298+ C6DB 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 299+ C6DE 3E 80                                ld      a,ShipAIEnabled
 300+ C6E0 32 54 C0                             ld      (UBnkaiatkecm),a
 301+ C6E3 CD 1A C6                             call    SetShipHostile
 302+ C6E6 3E 96        .SetupPayload:          ld      a,150
 303+ C6E8 32 3C C0                             ld      (UBnKMissileBlastDamage),a
 304+ C6EB 32 3E C0                             ld      (UBnKMissileDetonateDamage),a
 305+ C6EE 3E 05                                ld      a,5
 306+ C6F0 32 3B C0                             ld      (UBnKMissileBlastRange),a
 307+ C6F3 32 3D C0                             ld      (UBnKMissileDetonateRange),a
 308+ C6F6 C9                                   ret
 309+ C6F7
 310+ C6F7              ; --------------------------------------------------------------
 311+ C6F7              ; This sets the position of the current ship if its a player launched missile
 312+ C6F7 CD E9 C8     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 313+ C6FA CD 37 C6                             call    ResetUbnkPosition               ; home position
 314+ C6FD 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 315+ C6FF 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 316+ C702                                      IFDEF DEBUGMISSILELAUNCH
 317+ C702 ~                                        ld      a,$20       ; DEBUG
 318+ C702 ~                                        ld      (UBnKzlo),a
 319+ C702                                      ENDIF
 320+ C702 3E 80                                ld      a,$80                           ;
 321+ C704 32 25 C0                             ld      (UBnKysgn),a                    ;
 322+ C707 3E 03                                ld      a,3                             ; set accelleration
 323+ C709 32 47 C0                             ld      (UBnKAccel),a                   ;
 324+ C70C                                      ZeroA
 324+ C70C AF          >                        xor a
 325+ C70D 32 48 C0                             ld      (UBnKRotXCounter),a
 326+ C710 32 49 C0                             ld      (UBnKRotZCounter),a
 327+ C713 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 328+ C715 32 4A C0                             ld      (UBnKRAT),a
 329+ C718 3C                                   inc     a
 330+ C719 32 4B C0                             ld      (UBnKRAT2),a
 331+ C71C 3E 16                                ld      a,22
 332+ C71E 32 4D C0                             ld      (UBnKCNT2),a
 333+ C721                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 333+ C721 3E 1F       >                        ld      a,31
 333+ C723 32 46 C0    >                        ld      (UBnKSpeed),a
 334+ C726                                      SetMemFalse UBnKMissleHitToProcess
 334+ C726 3E FF       >                        ld      a,$FF
 334+ C728 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 335+ C72B 3E 80                                ld      a,ShipAIEnabled
 336+ C72D 32 54 C0                             ld      (UBnkaiatkecm),a
 337+ C730                                      ;break
 338+ C730 CD 23 C6                             call    ClearShipHostile                ; its a player missile
 339+ C733
 340+ C733 C9                                   ret
 341+ C734              ; --------------------------------------------------------------
 342+ C734              ; this applies blast damage to ship
 343+ C734 3A 7C 7F     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 344+ C737 47                                   ld      b,a
 345+ C738 3A 58 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 346+ C73B 90                                   sub     b
 347+ C73C C3 45 C7                             jp      UnivExplodeShip
 348+ C73F 18 04                                jr      UnivExplodeShip
 349+ C741 32 58 C0                             ld      (UBnKEnergy),a
 350+ C744 C9                                   ret
 351+ C745              ; --------------------------------------------------------------
 352+ C745              ; This sets the ship as a shower of explosiondwd
 353+ C745 DD 01        UnivExplodeShip:        break
 354+ C747 3A 54 C0                             ld      a,(UBnkaiatkecm)
 355+ C74A F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 356+ C74C E6 7F                                and     Bit7Clear                       ; Remove AI
 357+ C74E 32 54 C0                             ld      (UBnkaiatkecm),a
 358+ C751 AF                                   xor     a
 359+ C752 32 58 C0                             ld      (UBnKEnergy),a
 360+ C755                                      ;TODO
 361+ C755 C9                                   ret
 362+ C756
 363+ C756 CD 8F C7     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 364+ C759 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 365+ C75B 32 54 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 366+ C75E 32 0E C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 367+ C761 3E FF                                ld      a,$FF
 368+ C763 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 369+ C766 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 370+ C769                                      ZeroA
 370+ C769 AF          >                        xor a
 371+ C76A 32 22 C0                             ld      (UBnKxsgn),a
 372+ C76D 32 25 C0                             ld      (UBnKysgn),a
 373+ C770 32 28 C0                             ld      (UBnKzsgn),a
 374+ C773 21 00 00                             ld      hl,0
 375+ C776 22 20 C0                             ld      (UBnKxlo),hl
 376+ C779 22 23 C0                             ld      (UBnKylo),hl
 377+ C77C 3A 0D C4                             ld      a,(ShipTypeAddr)
 378+ C77F 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 379+ C782                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 379+ C782 FE 02       >                        cp     ShipTypeStation
 379+ C784 C2 8B C7    >                        jp      nz,.SkipFurther
 380+ C787 3E 05                                ld      a,5
 381+ C789 84                                   add     h
 382+ C78A 67                                   ld      h,a
 383+ C78B 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 384+ C78E C9                                   ret
 385+ C78F                  DISPLAY "Tracing 1", $
 386+ C78F              ; --------------------------------------------------------------
 387+ C78F              ; This sets the position of the current ship randomly, called after spawing
 388+ C78F CD C6 C8     UnivSetSpawnPosition:   call    InitialiseOrientation
 389+ C792                                      RandomUnivPitchAndRoll
 389+ C792 CD 1C 84    >                        call    doRandom
 389+ C795 F6 6F       >                        or      %01101111
 389+ C797 32 48 C0    >                        ld      (UBnKRotXCounter),a
 389+ C79A CD 1C 84    >                        call    doRandom
 389+ C79D F6 6F       >                        or      %01101111
 389+ C79F 32 49 C0    >                        ld      (UBnKRotZCounter),a
 390+ C7A2 CD 1C 84                             call    doRandom                        ; set x lo and y lo to random
 391+ C7A5 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 392+ C7A8 32 23 C0     .setYlo:                ld      (UBnKylo),a
 393+ C7AB 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 394+ C7AC 47                                   ld      b,a
 395+ C7AD E6 80                                and     SignOnly8Bit
 396+ C7AF 32 22 C0                             ld      (UBnKxsgn),a
 397+ C7B2 78           .setYSign:              ld      a,b                             ; get random back again
 398+ C7B3 0F                                   rrca                                    ; rotate by 1 bit right
 399+ C7B4 47                                   ld      b,a
 400+ C7B5 E6 80                                and     SignOnly8Bit                    ; and set y sign
 401+ C7B7 32 25 C0                             ld      (UBnKysgn),a
 402+ C7BA CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 403+ C7BC 78                                   ld      a,b                             ;
 404+ C7BD E6 1F                                and     31                              ; set y hi to random 0 to 31
 405+ C7BF 32 24 C0                             ld      (UBnKyhi),a                     ;
 406+ C7C2 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 407+ C7C4 78                                   ld      a,b
 408+ C7C5 E6 1F                                and     31                              ; set x hi to random 0 to 31
 409+ C7C7 4F                                   ld      c,a                             ; save shifted into c as well
 410+ C7C8 32 21 C0                             ld      (UBnKxhi),a
 411+ C7CB 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 412+ C7CD 98                                   sbc     b
 413+ C7CE 99                                   sbc     c
 414+ C7CF 32 27 C0                             ld      (UBnKzhi),a
 415+ C7D2 3A 0D C4     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 416+ C7D5                                      ReturnIfAEqNusng ShipTypeJunk
 416+ C7D5 FE 03       >                        cp      ShipTypeJunk
 416+ C7D7 C8          >                        ret     z
 417+ C7D8                                      ReturnIfAEqNusng ShipTypeScoopable
 417+ C7D8 FE 04       >                        cp      ShipTypeScoopable
 417+ C7DA C8          >                        ret     z
 418+ C7DB 78                                   ld      a,b                             ; its not junk to set z sign
 419+ C7DC 0F                                   rrca                                    ; as it can jump in
 420+ C7DD E6 80                                and     SignOnly8Bit
 421+ C7DF 32 28 C0                             ld      (UBnKzsgn),a
 422+ C7E2 C9                                   ret
 423+ C7E3
 424+ C7E3              ; --------------------------------------------------------------
 425+ C7E3              ; This sets the cargo type or carryflag set for not cargo
 426+ C7E3              ; Later this will be done via a loadable lookup table
 427+ C7E3 3A 0D C4     ShipCargoType:          ld      a,(ShipTypeAddr)
 428+ C7E6                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 428+ C7E6 FE 04       >                        cp     ShipID_CargoType5
 428+ C7E8 CA FF C7    >                        jp      z,.CargoCanister
 429+ C7EB              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 429+ C7EB FE 27       >                        cp     ShipID_Thargon
 429+ C7ED CA 05 C8    >                        jp      z,.Thargon
 430+ C7F0              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 430+ C7F0 FE 1D       >                        cp     ShipID_Plate
 430+ C7F2 CA 08 C8    >                        jp      z,.Plate
 431+ C7F5              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 431+ C7F5 FE 24       >                        cp     ShipID_Splinter
 431+ C7F7 CA 0B C8    >                        jp      z,.Splinter
 432+ C7FA              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 432+ C7FA FE 11       >                        cp     ShipID_Escape_Pod
 432+ C7FC CA 0E C8    >                        jp      z,.EscapePod
 433+ C7FF CD 1C 84     .CargoCanister:         call    doRandom
 434+ C802 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 435+ C804 C9                                   ret
 436+ C805 3E 11        .Thargon:               ld      a,AlienItemsIndex
 437+ C807 C9                                   ret
 438+ C808 3E 0A        .Plate:                 ld      a,AlloysIndex
 439+ C80A C9                                   ret
 440+ C80B 3E 0D        .Splinter:              ld      a,MineralsIndex
 441+ C80D C9                                   ret
 442+ C80E 3E 04        .EscapePod:             ld      a,SlavesIndex
 443+ C810 C9                                   ret
 444+ C811                      IFDEF DEBUG_SHIP_MOVEMENT
 445+ C811 ~            FixStationPos:          ld      hl, DebugPos
 446+ C811 ~                                    ld      de, UBnKxlo
 447+ C811 ~                                    ld      bc,9
 448+ C811 ~                                    ldir
 449+ C811 ~                                    ld      hl,DebugRotMat
 450+ C811 ~                                    ld      de, UBnkrotmatSidevX
 451+ C811 ~                                    ld      bc,6*3
 452+ C811 ~                                    ldir
 453+ C811 ~                                    ret
 454+ C811                      ENDIF
 455+ C811                      IFDEF DEBUG_SHIP_MOVEMENT
 456+ C811 ~            DebugPos:               DB $00,$00,$00,$92,$01,$00,$7E,$04,$00
 457+ C811 ~            DebugRotMat:            DB $37,$88,$9A,$DC,$1B,$F7
 458+ C811 ~            DebugRotMat1:           DB $DF,$6D,$2A,$07,$C1,$83
 459+ C811 ~            DebugRotMat2:           DB $00,$80,$4A,$9B,$AA,$D8
 460+ C811                      ENDIF
 461+ C811
 462+ C811              ; --------------------------------------------------------------
 463+ C811              ; This sets current univrse object to space station
 464+ C811 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 465+ C813 32 54 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 466+ C816 AF                                   xor a
 467+ C817 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 468+ C81A 32 0E C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 469+ C81D 3E FF                                ld      a,$FF
 470+ C81F 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 471+ C822 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 472+ C825 22 20 C0                             ld      (UBnKxlo),hl
 473+ C828 21 00 00                             ld      hl,$0000
 474+ C82B 22 23 C0                             ld      (UBnKylo),hl
 475+ C82E 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 476+ C831 22 26 C0                             ld      (UBnKzlo),hl
 477+ C834 AF                                   xor     a
 478+ C835 32 22 C0                             ld      (UBnKxsgn),a
 479+ C838 32 25 C0                             ld      (UBnKysgn),a
 480+ C83B 3E 80                                ld      a,$80
 481+ C83D 32 28 C0                             ld      (UBnKzsgn),a
 482+ C840 CD F3 C8     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 483+ C843 C9                                   ret
 484+ C844                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 485+ C844              ;Output: BC = Quotient, HL = Remainder
 486+ C844
 487+ C844
 488+ C844
 489+ C844 2A 23 29 27  FighterTypeMapping:     DB ShipID_Worm, ShipID_Sidewinder, ShipID_Viper, ShipID_Thargon
 490+ C848
 491+ C848              ; Initialiase data, iyh must equal slot number
 492+ C848              ;                   iyl must be ship type
 493+ C848              ;                   a  = current bank number
 494+ C848 01 22 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 495+ C84B 21 3F C0                             ld      hl,UBnKStartOfRuntimeData
 496+ C84E                                      ZeroA
 496+ C84E AF          >                        xor a
 497+ C84F 32 59 C0                             ld      (UBnKECMCountDown),a
 498+ C852 77           .InitLoop:              ld      (hl),a
 499+ C853 23                                   inc     hl
 500+ C854 10 FC                                djnz    .InitLoop
 501+ C856              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 501+ C856 3A 05 C4    >                        ld       a,(EnergyAddr)
 501+ C859 32 58 C0    >                        ld       (UBnKEnergy),a
 502+ C85C FD 7C        .SetBankData:           ld      a,iyh
 503+ C85E 32 3F C0                             ld      (UBnKSlotNumber),a
 504+ C861 C6 46                                add     a,BankUNIVDATA0
 505+ C863 32 40 C0                             ld      (UbnKShipUnivBankNbr),a
 506+ C866 FD 7D                                ld      a,iyl
 507+ C868 32 43 C0                             ld      (UBnKShipModelId),a
 508+ C86B CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 509+ C86E 32 41 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 510+ C871 78                                   ld      a,b                          ; this will mostly be debugging info
 511+ C872 32 42 C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 512+ C875 3A 0A C4     .SetUpMissileCount:     ld      a,(LaserAddr)                ; get laser and missile details
 513+ C878 E6 0F                                and     ShipMissileCount
 514+ C87A 4F                                   ld      c,a
 515+ C87B 3A 81 7D                             ld      a,(RandomSeed1)              ; missile flag limit
 516+ C87E A1                                   and     c                            ; .
 517+ C87F 32 5C C0                             ld      (UBnKMissilesLeft),a
 518+ C882 3A 0A C4     .SetupLaserType         ld      a,(LaserAddr)
 519+ C885 E6 F0                                and     ShipLaserPower
 520+ C887 ED 23                                swapnib
 521+ C889 32 5B C0                             ld      (UBnKLaserPower),a
 522+ C88C 3A 0F C4     .SetUpFighterBays:      ld      a,(ShipAIFlagsAddr)
 523+ C88F 4F                                   ld      c,a
 524+ C890 E6 70                                and     ShipFighterBaySize
 525+ C892                                      JumpIfANENusng ShipFighterBaySizeInf, .LimitedBay
 525+ C892 FE 70       >                        cp     ShipFighterBaySizeInf
 525+ C894 C2 99 C8    >                        jp      nz,.LimitedBay
 526+ C897 3E FF                                ld      a,$FF                       ; force unlimited ships
 527+ C899 ED 23        .LimitedBay:            swapnib                             ; as its bits 6 to 4 and we have removed bit 7 we can cheat with a swapnib
 528+ C89B 32 5E C0                             ld      (UBnKFightersLeft),a
 529+ C89E 79           .SetUpFighterType:      ld      a,c                         ; get back AI flags
 530+ C89F E6 0C                                and     ShipFighterType             ; fighter type is bits 2 and 3
 531+ C8A1 CB 1F                                rr      a                           ; so get them down to 0 and 1
 532+ C8A3 CB 1F                                rr      a                           ;
 533+ C8A5 21 44 C8                             ld      hl,FighterTypeMapping       ; then use the lookup table
 534+ C8A8 ED 31                                add     hl,a                        ; for the respective ship id
 535+ C8AA 7E                                   ld      a,(hl)                      ; we work on this for optimisation
 536+ C8AB 32 5D C0                             ld      (UBnKFighterShipId),a       ; ship data holds index to this table
 537+ C8AE 3A 10 C4     .SetUpECM:              ld      a,(ShipECMFittedChanceAddr) ; Now handle ECM
 538+ C8B1 47                                   ld      b,a
 539+ C8B2 3A 83 7D     .FetchLatestRandom:     ld      a,(RandomSeed3)
 540+ C8B5                                      JumpIfALTNusng b, .ECMFitted
 540+ C8B5 B8          >                        cp      b
 540+ C8B6 DA C1 C8    >                        jp		c, .ECMFitted
 541+ C8B9              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 541+ C8B9 3E FF       >                        ld      a,$FF
 541+ C8BB 32 5A C0    >                        ld      (UBnKECMFitted),a
 542+ C8BE C3 C5 C8                             jp      .DoneECM
 543+ C8C1              .ECMFitted:             SetMemTrue  UBnKECMFitted
 543+ C8C1 AF          >                        xor     a
 543+ C8C2 32 5A C0    >                        ld      (UBnKECMFitted),a
 544+ C8C5              .DoneECM:               ; TODO set up laser power
 545+ C8C5 C9                                   ret
 546+ C8C6                  DISPLAY "Tracing 2", $
 547+ C8C6
 548+ C8C6                                      include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C8C6              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C8C6              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C8C6              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C8C6              InitialiseOrientation:
   5++C8C6 21 00 00     ZI1:                    ld      hl, 0
   6++C8C9 22 2B C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C8CC 22 2D C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C8CF 22 2F C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C8D2 22 33 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C8D5 22 35 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C8D8 22 37 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C8DB              ; Optimised as already have 0 in l
  13++C8DB 26 60                                ld      h, $60	             				; 96 in hi byte
  14++C8DD                                      ;ld      hl,1
  15++C8DD 22 29 C0                             ld      (UBnkrotmatSidevX),hl
  16++C8E0 22 31 C0                             ld      (UBnkrotmatRoofvY),hl
  17++C8E3              ; Optimised as already have 0 in l
  18++C8E3 26 E0                                ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
  19++C8E5 22 39 C0                             ld      (UBnkrotmatNosevZ),hl
  20++C8E8 C9                                   ret
  21++C8E9
  22++C8E9              InitialisePlayerMissileOrientation:
  23++C8E9 CD C6 C8                             call    InitialiseOrientation
  24++C8EC 21 00 60                             ld      hl,$6000
  25++C8EF 22 39 C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  26++C8F2 C9                                   ret
  27++C8F3
  28++C8F3
  29++C8F3              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  30++C8F3              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  31++C8F3              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  32++C8F3 CD C6 C8     LaunchedOrientation:    call    InitialiseOrientation
  33++C8F6                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  33++C8F6 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  33++C8F9 EE 80       >                        xor SignOnly8Bit
  33++C8FB 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
  34++C8FE                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  34++C8FE 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  34++C901 EE 80       >                        xor SignOnly8Bit
  34++C903 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
  35++C906                                      FlipSignMem UBnkrotmatNosevZ+1
  35++C906 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  35++C909 EE 80       >                        xor SignOnly8Bit
  35++C90B 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
  36++C90E C9                                   ret
  37++C90F
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 549+ C90F
 550+ C90F              ;----------------------------------------------------------------------------------------------------------------------------------
 551+ C90F              ;OrientateVertex:
 552+ C90F              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 553+ C90F              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 554+ C90F              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 555+ C90F              ;
 556+ C90F
 557+ C90F              ;----------------------------------------------------------------------------------------------------------------------------------
 558+ C90F              ;TransposeVertex:
 559+ C90F              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 560+ C90F              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 561+ C90F              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 562+ C90F              ; VectorToVertex:
 563+ C90F              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 564+ C90F              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 565+ C90F              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 566+ C90F              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 567+ C90F              ;OUTPUTS:   cahl = quotient cde = divisor
 568+ C90F              ;--------------------------------------------------------------------------------------------------------
 569+ C90F                                      ;include "./ModelRender/EraseOldLines-EE51.asm"
 570+ C90F               ; OBSOLETE                       include "./ModelRender/TrimToScreenGrad-LL118.asm"
 571+ C90F                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++C90F              ;--------------------------------------------------------------------------------------------------------------------
   2++C90F
   3++C90F 00           clipDx                  DB      0           ; also XX12+2
   4++C910 00           clipDxHigh              DB      0           ; also XX12+3
   5++C911 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C912 00           clipDy                  DB      0           ; also XX12+4
   7++C913 00           clipDyHigh              DB      0           ; also XX12+5
   8++C914 00           clipGradient            DB      0
   9++C915 00           clipDxySign             DB      0
  10++C916              varX12p3                equ     clipDxySign
  11++C916 00           clipXGTY                DB      0
  12++C917 00           clipFlags               DB      0
  13++C918 00           SWAP                    DB      0
  14++C919 00 00        varYX                   DW      0
  15++C91B              ;varRegX                 DB      0
  16++C91B              ;varXX12p2               DB      0
  17++C91B 00           clipXX13                 DB      0
  18++C91C 00           Gradient                DB      0
  19++C91D              ; for start and end y. bit7 of lower determines its not been setup yet
  20++C91D
  21++C91D              ;--------------------------------------------------------------------------------------
  22++C91D                      IFNDEF       CLIPVersion3
  23++C91D ED 4B A8 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3) Y1
  24++C921 DD 2A AC C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1) Y2
  25++C925 2A A6 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1) X1
  26++C928 ED 5B AA C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5) X2
  27++C92C AF                                   xor     a
  28++C92D 32 18 C9                             ld      (SWAP),a                    ; SWAP = 0
  29++C930 7A                                   ld      a,d                         ; A = X2Hi
  30++C931 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX (128 will actually do)
  31++C934 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  32++C936 20 0A                                jr      nz, .LL107
  33++C938 DD 7D                                ld      a,ixl
  34++C93A ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  35++C93D 20 03                                jr      nz,.LL107
  36++C93F FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  37++C942              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  38++C942              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  39++C942 FD 7C        .LL107                  ld      a,iyh
  40++C944 32 1B C9                             ld      (clipXX13),a                ; debug copy iyh to xx13
  41++C947 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  42++C948 B0                                   or      b                           ;
  43++C949 20 27                                jr      nz,.LL83                    ;
  44++C94B 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  45++C94C ED 27 80                             test    $80                         ; i.e  screen height < y1)
  46++C94F 20 21                                jr      nz,.LL83
  47++C951              ; If we get here, (x1, y1) is on-screen
  48++C951 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  49++C953 FE 00                                cp      0
  50++C955 20 15                                jr      nz, .LL108
  51++C957              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  52++C957 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  53++C958 32 A7 C0                             ld      (UBnkNewY1),a
  54++C95B DD 7D                                ld      a,ixl
  55++C95D 32 A9 C0                             ld      (UBnkNewY2),a
  56++C960 7D                                   ld      a,l
  57++C961 32 A6 C0                             ld      (UBnkNewX1),a
  58++C964 7B                                   ld      a,e
  59++C965 32 A8 C0                             ld      (UBnkNewX2),a
  60++C968                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  60++C968 B7          >                        or a
  61++C969 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  62++C96A              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  63++C96A              .PointsOutofBounds:     SetCarryFlag                        ; LL109 (ClipFailed) carry flag set as not visible
  63++C96A 37          >                        scf
  64++C96B C9                                   ret
  65++C96C FD 7C        .LL108:                 ld      a,iyh
  66++C96E B7                                   or      a
  67++C96F 1F                                   rra
  68++C970 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  69++C972 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  70++C974 ED 27 80                             test    $80                         ;
  71++C977 28 28                                jr      z, .LL115                   ;
  72++C979              ;                       Check for X1 and X2 negative
  73++C979 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++C97A A2                                   and     d
  75++C97B                                      JumpIfNegative  .PointsOutofBounds
  75++C97B FA 6A C9    >                        jp		m, .PointsOutofBounds
  76++C97E              ;                       Check for Y1 and Y2 negative
  77++C97E 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  78++C97F DD A4                                and     ixh
  79++C981                                      JumpIfNegative  .PointsOutofBounds
  79++C981 FA 6A C9    >                        jp		m, .PointsOutofBounds
  80++C984              ;                       Check for X1 and X2 both > 255
  81++C984 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  82++C985 3D                                   dec     a
  83++C986 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  84++C988 7A                                   ld      a,d                         ; a = x2 hi
  85++C989 3D                                   dec     a
  86++C98A FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  87++C98C                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  87++C98C F2 6A C9    >                        jp		p, .PointsOutofBounds
  88++C98F              ; by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  89++C98F DD 7C                                ld      a,ixh
  90++C991 3D                                   dec     a
  91++C992 FD 6F                                ld      iyl,a
  92++C994 78                                   ld      a,b
  93++C995 3D                                   dec     a
  94++C996 FD B5                                or      iyl
  95++C998                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  95++C998 F2 6A C9    >                        jp		p, .PointsOutofBounds
  96++C99B 79                                   ld      a,c
  97++C99C DD A5                                and     ixl
  98++C99E                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  98++C99E FA 6A C9    >                        jp		m, .PointsOutofBounds
  99++C9A1              ; Clip line: calulate the line's gradient
 100++C9A1              ; here as an optimisation we make sure X1 is always < X2  later on
 101++C9A1              .LL115:                 ClearCarryFlag
 101++C9A1 B7          >                        or a
 102++C9A2 E5 D5        .CalcDX:                push    hl,,de
 103++C9A4 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 104++C9A5 ED 52                                sbc     hl,de
 105++C9A7 22 0F C9                             ld      (clipDx),hl
 106++C9AA 7C                                   ld      a,h
 107++C9AB 32 11 C9                             ld      (clipDxHighNonABS),a
 108++C9AE              .CalcDy:                ClearCarryFlag
 108++C9AE B7          >                        or a
 109++C9AF DD E5 E1                             ld      hl,ix
 110++C9B2 ED 42                                sbc     hl,bc
 111++C9B4 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 112++C9B6 22 12 C9                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 113++C9B9 7C           .CalcQuadrant:          ld      a,h
 114++C9BA 32 13 C9                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 115++C9BD              ; So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 116++C9BD 21 10 C9                             ld      hl,clipDxHigh
 117++C9C0 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 118++C9C1 32 8C 7E                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 119++C9C4 32 15 C9                             ld      (clipDxySign),a
 120++C9C7 3A 13 C9     .AbsDy:                 ld      a,(clipDyHigh)
 121++C9CA ED 27 80                             test    $80
 122++C9CD 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 123++C9CF ED 5B 12 C9                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 124++C9D3                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 124++C9D3 AF          >					xor 	a
 124++C9D4 93          >                    sub 	e
 124++C9D5 5F          >                    ld 		e,a
 124++C9D6 9F          >                    sbc 	a,a
 124++C9D7 92          >                    sub 	d
 124++C9D8 57          >                    ld 		d,a
 125++C9D9 ED 53 12 C9                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 126++C9DD 2A 0F C9     .LL110:                 ld      hl,(clipDx)
 127++C9E0 3A 10 C9                             ld      a,(clipDxHigh)
 128++C9E3 ED 27 80                             test    $80                         ; is it a negative X
 129++C9E6 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 130++C9E8                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 131++C9E8                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 131++C9E8 AF          >					xor 	a
 131++C9E9 95          >					sub 	l
 131++C9EA 6F          >					ld 		l,a
 131++C9EB 9F          >					sbc 	a,a
 131++C9EC 94          >					sub 	h
 131++C9ED 67          >					ld 		h,a
 132++C9EE              .LL111:
 133++C9EE 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 134++C9EF B2                                   or      d
 135++C9F0 28 0A                                jr      z,.CalculateDelta
 136++C9F2                                      ShiftDERight1
 136++C9F2 CB 3A       >			   srl d
 136++C9F4 CB 1B       >			   rr  e
 137++C9F6                                      ShiftHLRight1
 137++C9F6 CB 3C       >			   srl h
 137++C9F8 CB 1D       >			   rr  l
 138++C9FA 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 139++C9FC              .CalculateDelta:
 140++C9FC              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 141++C9FC AF           .LL113:                 xor     a
 142++C9FD 32 A6 7E                             ld      (varT),a                    ; t = 0
 143++CA00 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 144++CA01                                      JumpIfALTNusng  e, .LL114           ;
 144++CA01 BB          >                        cp      e
 144++CA02 DA 12 CA    >                        jp		c, .LL114
 145++CA05              ; Here Dx >= Dy sp calculate Delta Y / delta X
 146++CA05 32 8A 7E     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 147++CA08 57                                   ld      d,a                         ; d = also Q for calc
 148++CA09 7B                                   ld      a,e                         ; Set A = delta_y_lo
 149++CA0A CD 2D 95                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 150++CA0D 32 8B 7E                             ld      (varR),a                    ;
 151++CA10 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 152++CA12              ; Here Delta Y > Delta X so calulate delta X / delta Y
 153++CA12 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 154++CA13 57                                   ld      d,a
 155++CA14 32 8A 7E                             ld      (varQ),a
 156++CA17 7D                                   ld      a,l                         ; Set A = delta_x_lo
 157++CA18 CD 2D 95                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 158++CA1B 32 8B 7E                             ld      (varR),a                    ;
 159++CA1E 21 A6 7E                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 160++CA21 35                                   dec     (hl)
 161++CA22 D1           .LL116:                 pop     de                          ; get back X2
 162++CA23 E1                                   pop     hl                          ; get back X1 into hl,
 163++CA24 3A 8B 7E                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 164++CA27 32 14 C9                             ld      (clipGradient),a
 165++CA2A FD 6F                                ld      iyl,a
 166++CA2C 3A 8C 7E                             ld      a,(varS)
 167++CA2F 32 15 C9                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 168++CA32                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 169++CA32 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 170++CA34 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 171++CA36 28 05                                jr      z,.LL138                    ;
 172++CA38 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 173++CA3B 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 174++CA3D              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 175++CA3D CD 64 CA     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 176++CA40 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 177++CA42 ED 27 80                             test    $80
 178++CA45 28 1A                                jr      z,.LL124
 179++CA47              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 180++CA47 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 181++CA48 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 182++CA49 C2 6A C9                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 183++CA4C B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 184++CA4D FA 6A C9                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 185++CA50              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 186++CA50              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 187++CA50 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 188++CA51 DD E5                                push    ix                          ;  swap Y1 and Y2
 189++CA53 C5                                   push    bc
 190++CA54 DD E1                                pop     ix
 191++CA56 C1                                   pop     bc
 192++CA57 CD 64 CA                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 193++CA5A 3A 18 C9                             ld      a,(SWAP)
 194++CA5D 3D                                   dec     a
 195++CA5E 32 18 C9                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 196++CA61 C3 57 C9     .LL124:                 jp      .ClipDone                    ; now put points in place
 197++CA64              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 198++CA64              ; iyh still holds XX13 iyl still holds gradient
 199++CA64 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 200++CA65 ED 27 80                             test    $80
 201++CA68 28 17                                jr      z,.LL119
 202++CA6A 32 8C 7E     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 203++CA6D E5 D5 C5                             push    hl,,de,,bc
 204++CA70 CD E6 CA                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 205++CA73                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 206++CA73                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 207++CA73 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 208++CA76 2A 19 C9                             ld      hl,(varYX)
 209++CA79 09                                   add     hl,bc                       ; y1 = y1 + varYX
 210++CA7A 44 4D                                ld      bc,hl
 211++CA7C 21 00 00                             ld      hl,0                        ; Set x1 = 0
 212++CA7F 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 213++CA81 FE 00        .LL119:                 cp      0
 214++CA83 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 215++CA85 3D                                   dec     a
 216++CA86 32 8C 7E                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 217++CA89 E5 D5 C5                             push    hl,,de,,bc
 218++CA8C CD E6 CA                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 219++CA8F                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 220++CA8F                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 221++CA8F C1 D1 E1                             pop     hl,,de,,bc
 222++CA92 2A 19 C9                             ld      hl,(varYX)
 223++CA95 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++CA96 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 225++CA98 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 226++CA9B              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 227++CA9B 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 228++CA9C ED 27 80                             test    $80                         ;
 229++CA9F 28 1A                                jr      z,.LL135                    ;
 230++CAA1 32 8C 7E                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 231++CAA4 79                                   ld      a,c                         ; Set R = y1_lo
 232++CAA5 32 8B 7E                             ld      (varR),a                    ;
 233++CAA8 E5 D5 C5                             push    hl,,de,,bc
 234++CAAB CD 47 CB                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 235++CAAE                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 236++CAAE                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 237++CAAE C1 D1 E1                             pop     hl,,de,,bc
 238++CAB1 D5                                   push    de
 239++CAB2 EB                                   ex      hl,de                       ; de = x1
 240++CAB3 2A 19 C9                             ld      hl,(varYX)                  ; hl = varYX
 241++CAB6 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 242++CAB7 D1                                   pop     de                          ; de = x2 again
 243++CAB8 01 00 00                             ld      bc,0                        ; Set y1 = 0
 244++CABB 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 245++CABC E6 80                                and     $80
 246++CABE B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 247++CABF C8                                   ret     z
 248++CAC0 E5                                   push    hl
 249++CAC1 60 69                                ld      hl,bc
 250++CAC3 01 80 00                             ld      bc,128
 251++CAC6 B7                                   or      a
 252++CAC7 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 253++CAC9 22 8B 7E                             ld      (varRS), hl                 ; and now RS (or SR)
 254++CACC 7C                                   ld      a,h
 255++CACD E1                                   pop     hl
 256++CACE ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 257++CAD1 C0                                   ret     nz
 258++CAD2              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 259++CAD2 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 260++CAD5 CD 47 CB                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 261++CAD8                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 262++CAD8                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 263++CAD8 C1 D1 E1                             pop     hl,,de,,bc
 264++CADB D5                                   push    de
 265++CADC EB                                   ex      hl,de
 266++CADD 2A 19 C9                             ld      hl,(varYX)
 267++CAE0 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 268++CAE1 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 269++CAE4 D1                                   pop     de
 270++CAE5 C9           .LL136:                 ret                                 ;  Return from the subroutine
 271++CAE6                      ENDIF
 272++CAE6
 273++CAE6              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 274++CAE6              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 275++CAE6              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 276++CAE6              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 277++CAE6 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 278++CAE7 32 8B 7E                             ld      (varR),a
 279++CAEA CD A4 CB                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 280++CAED F5                                   push    af                           ;  Store A on the stack so we can use it later
 281++CAEE C5                                   push    bc
 282++CAEF 47                                   ld      b,a
 283++CAF0 3A A6 7E                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 284++CAF3 FE 00                                cp      0
 285++CAF5 78                                   ld      a,b
 286++CAF6 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 287++CAF7 C2 0E CB                             jp      nz, .LL121
 288++CAFA              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 289++CAFA 3A 14 C9     .LL122:                  ld      a,(clipGradient)
 290++CAFD 32 8A 7E                             ld      (varQ),a; optimise
 291++CB00 CD B9 90                             call    HLequSRmulQdiv256
 292++CB03 22 19 C9                             ld      (varYX),hl
 293++CB06 F1                                   pop     af
 294++CB07 ED 27 80                             test    $80
 295++CB0A CA 3A CB                             jp      z,.LL133
 296++CB0D C9                                   ret
 297++CB0E 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 298++CB11 2A 8B 7E                             ld      hl,(varRS)                  ; hl = RS
 299++CB14 3A 8A 7E                             ld      a,(varQ)
 300++CB17 47                                   ld      b,a                         ; b = q
 301++CB18              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 301++CB18 CB 25       >			   sla l
 301++CB1A CB 14       >			   rl  h
 302++CB1C 7C                                   ld      a,h
 303++CB1D 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 304++CB1F                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 304++CB1F B8          >                        cp      b
 304++CB20 DA 2B CB    >                        jp		c, .LL132
 305++CB23 3F           .LL131:                 ccf                                 ; compliment carry
 306++CB24 98                                   sbc     a,b                         ; q
 307++CB25 67                                   ld      h,a                         ; h (s)
 308++CB26 7D                                   ld      a,l                         ; r
 309++CB27 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 310++CB29 37                                   scf                                 ; set carry for next rolls
 311++CB2A 3F                                   ccf
 312++CB2B              .LL132:                 RollDELeft1                         ; Rotate de bits left
 312++CB2B CB 13       >               rl  e
 312++CB2D CB 12       >               rl  d
 313++CB2F 38 E7                                jr      c,.LL130                    ;
 314++CB31 ED 53 19 C9                          ld      (varYX),de
 315++CB35 F1                                   pop     af              ; get back sign
 316++CB36 ED 27 80                             test    $80
 317++CB39 C8                                   ret     z               ; if negative then return with value as is reversed sign
 318++CB3A 2A 19 C9     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 319++CB3D                                      NegHL
 319++CB3D AF          >                    xor a
 319++CB3E 95          >                    sub l
 319++CB3F 6F          >                    ld l,a
 319++CB40 9F          >                    sbc a,a
 319++CB41 94          >                    sub h
 319++CB42 67          >                    ld h,a
 320++CB43 22 19 C9                             ld      (varYX),hl
 321++CB46 C9           .LL128:                 ret
 322++CB47
 323++CB47
 324++CB47
 325++CB47
 326++CB47              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 327++CB47              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 328++CB47              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 329++CB47              ;
 330++CB47              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 331++CB47              ;                          LL133                Negate (Y X) and return from the subroutine
 332++CB47              ;                          LL128                Contains an RTS
 333++CB47 CD A4 CB     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 334++CB4A F5                                   push    af                          ; Store A on the stack so we can use it later
 335++CB4B C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 336++CB4C 47                                   ld      b,a
 337++CB4D 3A A6 7E                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 338++CB50 FE 00                                cp      0
 339++CB52 78                                   ld      a,b
 340++CB53 C1                                   pop     bc
 341++CB54 C2 90 CB                             jp      nz, .LL122
 342++CB57              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 343++CB57 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 344++CB5A 2A 8B 7E                             ld      hl,(varRS)                  ; hl = RS
 345++CB5D 3A 8A 7E                             ld      a,(varQ)
 346++CB60 47                                   ld      b,a                         ; b = q
 347++CB61              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 347++CB61 CB 25       >			   sla l
 347++CB63 CB 14       >			   rl  h
 348++CB65 7C                                   ld      a,h
 349++CB66 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 350++CB68                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 350++CB68 B8          >                        cp      b
 350++CB69 DA 74 CB    >                        jp		c, .LL132
 351++CB6C 3F           .LL131:                 ccf                                 ; compliment carry
 352++CB6D 98                                   sbc     a,b                         ; q
 353++CB6E 67                                   ld      h,a                         ; h (s)
 354++CB6F 7D                                   ld      a,l                         ; r
 355++CB70 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 356++CB72 37                                   scf                                 ; set carry for next rolls
 357++CB73 3F                                   ccf
 358++CB74              .LL132:                 RollDELeft1                         ; Rotate de bits left
 358++CB74 CB 13       >               rl  e
 358++CB76 CB 12       >               rl  d
 359++CB78 38 E7                                jr      c,.LL130                    ;
 360++CB7A ED 53 19 C9                          ld      (varYX),de
 361++CB7E F1                                   pop     af              ; get back sign
 362++CB7F ED 27 80                             test    $80
 363++CB82 C8                                   ret     z               ; if negative then return with value as is reversed sign
 364++CB83 2A 19 C9     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 365++CB86                                      NegHL
 365++CB86 AF          >                    xor a
 365++CB87 95          >                    sub l
 365++CB88 6F          >                    ld l,a
 365++CB89 9F          >                    sbc a,a
 365++CB8A 94          >                    sub h
 365++CB8B 67          >                    ld h,a
 366++CB8C 22 19 C9                             ld      (varYX),hl
 367++CB8F C9           .LL128:                 ret
 368++CB90              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 369++CB90 3A 14 C9     .LL122:                 ld      a,(clipGradient)
 370++CB93 32 8A 7E                             ld      (varQ),a; optimise
 371++CB96 CD B9 90                             call    HLequSRmulQdiv256
 372++CB99 22 19 C9                             ld      (varYX),hl
 373++CB9C F1                                   pop     af
 374++CB9D ED 27 80                             test    $80
 375++CBA0 CA 83 CB                             jp      z,.LL133
 376++CBA3 C9                                   ret
 377++CBA4
 378++CBA4              ; Do the following, in this order:  Q = XX12+2
 379++CBA4              ;                                   A = S EOR XX12+3
 380++CBA4              ;                                   (S R) = |S R|
 381++CBA4              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 382++CBA4 3A 14 C9     LL129:                  ld      a,(clipGradient)
 383++CBA7 32 8A 7E                             ld      (varQ),a                    ; Set Q = XX12+2
 384++CBAA 3A 8C 7E                             ld      a,(varS)                    ; If S is positive, jump to LL127
 385++CBAD E5 F5                                push    hl,,af                      ; else
 386++CBAF ED 27 80                             test    $80                         ;   if bit 7 is clear
 387++CBB2 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 388++CBB4 2A 8B 7E                             ld      hl,(varRS)                  ;      .
 389++CBB7                                      NegHL                               ;      .
 389++CBB7 AF          >                    xor a
 389++CBB8 95          >                    sub l
 389++CBB9 6F          >                    ld l,a
 389++CBBA 9F          >                    sbc a,a
 389++CBBB 94          >                    sub h
 389++CBBC 67          >                    ld h,a
 390++CBBD 22 8B 7E                             ld      (varRS),hl                  ;      .
 391++CBC0 21 15 C9     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 392++CBC3 F1                                   pop     af                          ;
 393++CBC4 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 394++CBC5 E1                                   pop     hl
 395++CBC6 C9                                   ret
 396++CBC7
 397++CBC7              ;--------------------------------------------------------------------------------------
 398++CBC7              ; Thow away out of bounds by more than 250
 399++CBC7              ClipLineV3:             ;break
 400++CBC7                      IFDEF       CLIPVersion3
 401++CBC7 ~            ;My logic version
 402++CBC7 ~            .CheckYorder:
 403++CBC7 ~                                    ld      hl,(UbnkPreClipY1)
 404++CBC7 ~                                    ld      de,(UbnkPreClipY2)
 405++CBC7 ~                                    call    CompareHLDESgn
 406++CBC7 ~                                    jr      c,.LineP1toP2                          ; if Y1 < Y2 then we can use the points as is else we have to swap
 407++CBC7 ~            .LineP2toP1:            ld      bc,(UbnkPreClipY2)                      ; fetch and write out in reverse
 408++CBC7 ~                                    ld      ix,(UbnkPreClipY1)
 409++CBC7 ~                                    ld      de,(UbnkPreClipX1)
 410++CBC7 ~                                    ld      hl,(UbnkPreClipX2)
 411++CBC7 ~                                    ld      (UbnkPreClipY1),bc                      ; bc - XX15(2,3) Y1
 412++CBC7 ~                                    ld      (UbnkPreClipY2),ix                      ; ix - XX12(0,1) Y2
 413++CBC7 ~                                    ld      (UbnkPreClipX1),hl                      ; hl - XX15(0,1) X1
 414++CBC7 ~                                    ld      (UbnkPreClipX2),de                      ;  de - XX15(4,5) X2
 415++CBC7 ~                                    jp      .CheckNoClip
 416++CBC7 ~            .LineP1toP2             ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3) Y1
 417++CBC7 ~                                    ld      ix,(UbnkPreClipY2)                      ; ix - XX12(0,1) Y2
 418++CBC7 ~                                    ld      hl,(UbnkPreClipX1)                      ; hl - XX15(0,1) X1
 419++CBC7 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5) X2
 420++CBC7 ~            .CheckNoClip:           ld      a,b
 421++CBC7 ~                                    or      d
 422++CBC7 ~                                    or      h
 423++CBC7 ~                                    or      ixh
 424++CBC7 ~                                    jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 425++CBC7 ~                                    ld      a,c                                 ; then we clip
 426++CBC7 ~                                    and     ixl
 427++CBC7 ~                                    test    $80
 428++CBC7 ~                                    jp      z, .ClipComplete
 429++CBC7 ~            ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 430++CBC7 ~            .CheckXOffScreen:       ld      a,h
 431++CBC7 ~                                    xor     d
 432++CBC7 ~                                    test    $80                                 ; non descructive test of bit 7 is set
 433++CBC7 ~                                    jp      nz,.X1X2OppositeSign                ; if bit 7 was set then x1 and x2 must be opposite signs so its on screen
 434++CBC7 ~            .X1X2SameSigns:         ld      a,h                                 ; so to get there h and d must be the same sign
 435++CBC7 ~                                    test    $80                                 ; if they are the same sign and at x1 is negative then x2 must be negative so off screen
 436++CBC7 ~                                    JumpIfAIsZero .X1X2CheckIfBothRight
 437++CBC7 ~            .X1X2BothNegative:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 438++CBC7 ~                                    ret
 439++CBC7 ~            .X1X2CheckIfBothRight:  and     a                                   ; we have h in a already
 440++CBC7 ~                                    jr      z,.X1OnScreen
 441++CBC7 ~                                    ld      a,d
 442++CBC7 ~                                    and     a
 443++CBC7 ~                                    jr      z,.X2OnScreen
 444++CBC7 ~            .X1X2OffRightSide:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 445++CBC7 ~                                    ret
 446++CBC7 ~            ;                       to get to here x1 and x2 either span -ve to +ve or from on screen to off screen
 447++CBC7 ~            .X1OnScreen:
 448++CBC7 ~            .X2OnScreen:
 449++CBC7 ~            .X1X2OppositeSign:
 450++CBC7 ~            ;                       Now check to see if Y is off screen
 451++CBC7 ~            .CheckYOffScreen:       ld      a,b                                     ; Check if y1 and y2 are opposite signs, fi so it spans screen so we are good
 452++CBC7 ~            .CheckBothYNegative:    xor     ixh
 453++CBC7 ~                                    test    $80                                     ; if bit 7 is set then opposite signs
 454++CBC7 ~                                    jp      nz,.Y1Y2OppositeSign                    ; if y1 and y2 are opposite signs its on screen and spans at least one side
 455++CBC7 ~            .Y1Y2SameSign:          ld      a,b                                     ; if they are the same sign then if one is negative, so is the other so off screen
 456++CBC7 ~                                    test    $80
 457++CBC7 ~                                    jp      z,.Y1Y2Positive
 458++CBC7 ~            .Y1Y2Negative:          SetCarryFlag
 459++CBC7 ~                                    ret
 460++CBC7 ~            .Y1Y2Positive:          ld      a,c                                     ; if its the same sign y1 or y2 could be 0 and if they are
 461++CBC7 ~                                    and     $80                                     ; this will test to see if b >0 or c > 127
 462++CBC7 ~                                    or      b                                       ;
 463++CBC7 ~                                    jp      z,.Y1OnScreen
 464++CBC7 ~                                    ld      a,ixl
 465++CBC7 ~                                    and     $80
 466++CBC7 ~                                    or      ixh
 467++CBC7 ~                                    jp      z,.Y2OnScreen
 468++CBC7 ~            .Y1Y2OffBottomSide:     SetCarryFlag
 469++CBC7 ~                                    ret
 470++CBC7 ~            .Y1OnScreen:
 471++CBC7 ~            .Y2OnScreen:
 472++CBC7 ~            .Y1Y2OppositeSign:
 473++CBC7 ~            .StartProcessing:       ld      hl,(UbnkPreClipX1)                      ; Now we can test and Clip
 474++CBC7 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5)
 475++CBC7 ~                                    ld      iyh,0                                   ; set iyh flags to 0
 476++CBC7 ~            ; if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord       ; we can optimise this later
 477++CBC7 ~                                    ld      a,h
 478++CBC7 ~                                    or      b
 479++CBC7 ~                                    jr      z,.CheckP1Ylo
 480++CBC7 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 481++CBC7 ~            ;                               bit 1 - P2 Needs Clipping
 482++CBC7 ~            ;                               bit 2 - x1 >= x2 (left to right)
 483++CBC7 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 484++CBC7 ~            ;                               bit 4 -  DY/DX (steep)
 485++CBC7 ~            .P1OffScreen:           ld      iyh,1                                   ; if either p1 x or y was off screen set bit 0 to 1
 486++CBC7 ~                                    jp      .CheckP2OffScreen                       ; .
 487++CBC7 ~            .CheckP1Ylo:            ld      a,c                                     ; .
 488++CBC7 ~                                    and     $80                                     ; .
 489++CBC7 ~                                    jr      z,.CheckP2OffScreen                     ; .
 490++CBC7 ~                                    ld      iyh,1                                   ; .
 491++CBC7 ~            .CheckP2OffScreen:      ld      a,d                                     ; if x2hi or y2 off screen then set bit 2 of clipcoord to 1
 492++CBC7 ~                                    or      ixh                                     ; .
 493++CBC7 ~                                    jr      z,.CheckP2Ylo                           ; .
 494++CBC7 ~            .P2OffScreen:           ld      a,iyh                                   ; .
 495++CBC7 ~                                    or      2                                       ; .
 496++CBC7 ~                                    ld      iyh,a                                   ; .
 497++CBC7 ~                                    jp      .CheckXDirection                        ; .
 498++CBC7 ~            .CheckP2Ylo:            ld      a,ixl                                   ; .
 499++CBC7 ~                                    and     $80                                     ; .
 500++CBC7 ~                                    jr      z,.CheckXDirection                      ; .
 501++CBC7 ~                                    ld      a,iyh                                   ; .
 502++CBC7 ~                                    or      2                                       ; .
 503++CBC7 ~                                    ld      iyh,a                                   ; .
 504++CBC7 ~            .CheckXDirection:       push    de,,hl
 505++CBC7 ~                                    call    CompareHLDESgn                          ; IF HL equals DE, Z=1,C=0, IF HL is less than DE, Z=0,C=1, IF HL is more than DE, Z=0,C=0
 506++CBC7 ~                                    pop     de,,hl
 507++CBC7 ~                                    jp      c,.CalculateDx                          ;
 508++CBC7 ~            .X1gteX2:               ld      a,iyh                                   ; if x1 >= x2 then set bit 3 to denote -ve x direction, note we will eliminate horziontal / vertical early as an optimisation
 509++CBC7 ~                                    or      4                                       ; .
 510++CBC7 ~                                    ld      iyh,a                                   ; .
 511++CBC7 ~                                    ; Y Direction is now always top to bottom
 512++CBC7 ~            .CalculateDx:           ClearCarryFlag                                  ;                       calculate DX
 513++CBC7 ~                                    sbc     hl,de                                   ; .
 514++CBC7 ~            .ABSDX:                 ld      a,h                                     ; HL = | HL - DE |
 515++CBC7 ~                                    test    $80                                     ; .
 516++CBC7 ~                                    jr      z,.DXPositive                           ; .
 517++CBC7 ~                                    macronegate16hl                                 ; .
 518++CBC7 ~            .DXPositive:            ex      de,hl                                   ; de = abs delta x
 519++CBC7 ~            .CalculateDy:           ClearCarryFlag                                  ; hl = Y2 -Y1 as its pre sorted its always positive if on screen
 520++CBC7 ~                                    ld      hl,ix                                   ; iy = hl = Y2 - Y1
 521++CBC7 ~                                    sbc     hl,bc                                   ; .
 522++CBC7 ~            .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 523++CBC7 ~            ;calculate DY
 524++CBC7 ~            .ScaleLoop:             ld      a,h                                     ; At this point DX and DY are ABS values
 525++CBC7 ~                                    or      d                                       ; .
 526++CBC7 ~                                    jr      z,.ScaleDone                            ; .
 527++CBC7 ~                                    ShiftDERight1                                   ; .
 528++CBC7 ~                                    ShiftHLRight1                                   ; .
 529++CBC7 ~                                    jr      .ScaleLoop                              ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 530++CBC7 ~            .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 531++CBC7 ~            ; if Dx = 0 then horizontal line and clip X1 & X2 only then exit
 532++CBC7 ~            ; if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 533++CBC7 ~
 534++CBC7 ~            ; if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 535++CBC7 ~            ;        else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 536++CBC7 ~            .CalculateDelta:        ld      a,e                                     ; if DX < DY goto DX/DY
 537++CBC7 ~                                    JumpIfALTNusng l,.DXdivDY                       ; else do DY/DX
 538++CBC7 ~            .DYdivDX:               ld      a,l                                     ;    A = DY
 539++CBC7 ~                                    ld      d,e                                     ;    D = DX
 540++CBC7 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DY / DX
 541++CBC7 ~            .SaveGradientDYDX:      ld      (Gradient),a
 542++CBC7 ~                                    ld      a,iyh                                   ;    bit 5 of iyh denotes that its a DX/DY (steep), if its clear its DY/DX (shallow)
 543++CBC7 ~                                    or      16                                      ;    .
 544++CBC7 ~                                    ld      iyh,a                                   ;    .
 545++CBC7 ~                                    jp      .ClipP1                                 ;    .
 546++CBC7 ~            .DXdivDY:               ld      a,e                                     ;    A = DX
 547++CBC7 ~                                    ld      d,l                                     ;    D = DY
 548++CBC7 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DX / DY
 549++CBC7 ~            .SaveGradientDXDY:      ld      (Gradient),a
 550++CBC7 ~            ; if bit 1 of clipccord is set call    LL118
 551++CBC7 ~            .ClipP1:                ld      a,iyh                                   ; if bit 1 is clear to say no need to clip pont 1 we just jump to point 2
 552++CBC7 ~                                    test    1                                       ; .
 553++CBC7 ~                                    jp      z,.ClipP2                               ; .
 554++CBC7 ~                                    call    LL118v3                                 ; else clip P1 first
 555++CBC7 ~                                    ld      a,b                                     ;      and if b or h have a value its failed to totally clip  as it may be only in bounds on just x or y
 556++CBC7 ~                                    or      h                                       ;      .
 557++CBC7 ~                                    jr      z, .P1Ygt127Check                       ;      .
 558++CBC7 ~            .P1HighOutofBounds:     SetCarryFlag                                    ;      .
 559++CBC7 ~                                    ret                                             ;      .
 560++CBC7 ~            .P1Ygt127Check:         ld      a,c                                     ;      or if y > 127 its failed to totally clip
 561++CBC7 ~                                    test    $80                                     ;      .
 562++CBC7 ~                                    SetCarryFlag                                    ;      .
 563++CBC7 ~                                    ret     nz                                      ;      .
 564++CBC7 ~                                    ld      (UbnkPreClipY1), bc                     ;      else its valid and clipped point 1 so save ti back
 565++CBC7 ~                                    ld      (UbnkPreClipX1), hl
 566++CBC7 ~            ; if bit 2 of clipcoord is set
 567++CBC7 ~            ;        swap x1y1 with x2y2
 568++CBC7 ~            ;        call    LL118
 569++CBC7 ~            .ClipP2:                ld      a,iyh                                   ; so now repeat all that for point 2
 570++CBC7 ~                                    and     2
 571++CBC7 ~                                    jp      z,.ClipComplete
 572++CBC7 ~                                    call    LL118v3PreSwap                          ; now clip p2
 573++CBC7 ~                                    ld      a,b                                     ; if either high is set then it failed to properly clip
 574++CBC7 ~                                    or      h                                       ; .
 575++CBC7 ~                                    jr      z, .P2Ygt127Check                       ; .
 576++CBC7 ~            .P2HighOutofBounds:     SetCarryFlag                                    ; .
 577++CBC7 ~                                    ret                                             ; .
 578++CBC7 ~            .P2Ygt127Check:         ld      a,c                                     ; if c > 127 then it also failed to clip
 579++CBC7 ~                                    test    $80                                     ; .
 580++CBC7 ~                                    SetCarryFlag                                    ; .
 581++CBC7 ~                                    ret     nz                                      ; .
 582++CBC7 ~                                    ld      (UbnkPreClipY2), bc                     ; bc - XX15(2,3);;
 583++CBC7 ~                                    ld      (UbnkPreClipX2), hl
 584++CBC7 ~            ;clip compelte exit
 585++CBC7 ~            .ClipComplete:          ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3);;
 586++CBC7 ~                                    ld      hl,(UbnkPreClipX1)
 587++CBC7 ~                                    ld      ix,(UbnkPreClipY2)                      ; bc - XX15(2,3);;
 588++CBC7 ~                                    ld      de,(UbnkPreClipX2)
 589++CBC7 ~            .SaveClippedLine:       ld      a,c                                     ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 590++CBC7 ~                                    ld      (UBnkNewY1),a
 591++CBC7 ~                                    ld      a,ixl
 592++CBC7 ~                                    ld      (UBnkNewY2),a
 593++CBC7 ~                                    ld      a,l
 594++CBC7 ~                                    ld      (UBnkNewX1),a
 595++CBC7 ~                                    ld      a,e
 596++CBC7 ~                                    ld      (UBnkNewX2),a
 597++CBC7 ~                                    ClearCarryFlag                              ; we have a success so not carry
 598++CBC7 ~                                    ret
 599++CBC7 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 600++CBC7 ~            LL118v3PreSwap:         ld      bc,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 601++CBC7 ~                                    ld      hl,(UbnkPreClipX2)
 602++CBC7 ~                                    jp      LL118v3Fetched
 603++CBC7 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 604++CBC7 ~            LL118v3:                ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 605++CBC7 ~                                    ld      hl,(UbnkPreClipX1)
 606++CBC7 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 607++CBC7 ~            LL118v3Fetched:
 608++CBC7 ~            ;                       At this point bc = y position, hl = x position both 16 bit
 609++CBC7 ~            ;                       if x < 0 then x = 0
 610++CBC7 ~            ;                                     adjust = -x */ gradient depending on if its steep or shallow
 611++CBC7 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 612++CBC7 ~            ;                       if x > 255 then x = 255
 613++CBC7 ~            ;                                     adjust = x-255 */ gradient
 614++CBC7 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 615++CBC7 ~            ;                       if y < 0 then y = 0
 616++CBC7 ~            ;                                     adjust = -y */ gradient
 617++CBC7 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 618++CBC7 ~            ;                       if y >127 then y = 127
 619++CBC7 ~            ;                                     adjust = y-127 */ gradient
 620++CBC7 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 621++CBC7 ~            ;
 622++CBC7 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 623++CBC7 ~            ;                               bit 1 - P2 Needs Clipping
 624++CBC7 ~            ;                               bit 2 - x1 >= x2 (left to right)
 625++CBC7 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 626++CBC7 ~            ;                               bit 4 -  DY/DX (steep)
 627++CBC7 ~            ; if X1 hi <> 0
 628++CBC7 ~            LL118:                  ;break
 629++CBC7 ~                                    ld      a,h                                     ; if x1 high is 0 then we don't need to clip x at all
 630++CBC7 ~                                    and     a
 631++CBC7 ~                                    jp      z,.X1NoClipNeeded
 632++CBC7 ~            ;                       if x1 hi bit 7 is set (so negative)
 633++CBC7 ~            .CalcBlockX:            test    $80                                     ; if h is postiive then jump to the XPositive Calc block
 634++CBC7 ~                                    jr      z,.CalcBlockXPositive
 635++CBC7 ~            ;                       if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 636++CBC7 ~            .CalcBlockXNegative:    ld      a,iyh                                   ;
 637++CBC7 ~                                    test    16                                      ; bit 5 of iyh denotes that its a DY/DX, if its clear its DX/DY
 638++CBC7 ~                                    jr      nz,.CalcBlockXNegMulGrad
 639++CBC7 ~            .CaclBlockXNegDivGrad:  macronegate16hl
 640++CBC7 ~                                    ld      a,(Gradient)
 641++CBC7 ~                                    push    bc                                      ; abs(X1) / Gradient
 642++CBC7 ~                                    ld      h,c                     ; move offset into high byte of h
 643++CBC7 ~                                    ld      l,0
 644++CBC7 ~                                    ld      c,a
 645++CBC7 ~                                    call    div_hl_c
 646++CBC7 ~                                    pop     bc
 647++CBC7 ~                                    jp      .DoneXNegCalc
 648++CBC7 ~            ;                       else set Adjust = abs(X1) * Gradient
 649++CBC7 ~            .CalcBlockXNegMulGrad:  push    bc                                      ; abs(X1) * Gradient
 650++CBC7 ~                                    macronegate16hl
 651++CBC7 ~                                    ld      a,(Gradient)
 652++CBC7 ~                                    call    HLeqyHLmulAdiv256
 653++CBC7 ~                                    pop     bc
 654++CBC7 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 655++CBC7 ~            ;                       x1 = 0 then call into DonrX1Calc
 656++CBC7 ~            ;                       we can skip the test for negative Y direection
 657++CBC7 ~            .DoneXNegCalc:          macronegate16hl
 658++CBC7 ~            .XNegSkipNegate:        ld      de,bc
 659++CBC7 ~                                    ex      hl,de
 660++CBC7 ~                                    add     hl,de
 661++CBC7 ~                                    ld      bc,hl
 662++CBC7 ~                                    ld      hl,0
 663++CBC7 ~                                    jp      .DoneXCalc
 664++CBC7 ~            ;                       else x1 hi is positive
 665++CBC7 ~            ;                       if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 666++CBC7 ~            .CalcBlockXPositive:    ld      a,iyh
 667++CBC7 ~                                    test    16
 668++CBC7 ~                                    jr      nz,.CalcBlockXPosMulGrad
 669++CBC7 ~            .CalcBlockXPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 670++CBC7 ~                                    push    bc
 671++CBC7 ~                                    ld      c,a
 672++CBC7 ~                                    ld      de,255
 673++CBC7 ~                                    sub     hl,de
 674++CBC7 ~                                    ld      h,l
 675++CBC7 ~                                    ld      l,0
 676++CBC7 ~                                    call    div_hl_c
 677++CBC7 ~                                    pop     bc
 678++CBC7 ~                                    jp      .DoneX2Calc
 679++CBC7 ~            ;                                 else set Adjust = X1 lo * Gradient
 680++CBC7 ~            .CalcBlockXPosMulGrad:  push    bc
 681++CBC7 ~                                    ld      a,(Gradient)            ;Q = gradient
 682++CBC7 ~                                    ld      de,255
 683++CBC7 ~                                    sub     hl,de
 684++CBC7 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 685++CBC7 ~                                    pop     bc
 686++CBC7 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 687++CBC7 ~            ;                       x1 = 255
 688++CBC7 ~            ;                       we can skip the test for negative Y direection
 689++CBC7 ~            .DoneX2Calc:            macronegate16hl
 690++CBC7 ~            .X2SkipNegate:          ex      de,hl
 691++CBC7 ~                                    ld      hl,bc
 692++CBC7 ~                                    add     hl,de
 693++CBC7 ~                                    ld      bc,hl
 694++CBC7 ~                                    ld      hl,255
 695++CBC7 ~            ;                       if Y1 hi <> 0 or Y1 low >= 128 then y coordinate is good
 696++CBC7 ~            .DoneXCalc:             ld      a,b
 697++CBC7 ~                                    and     a
 698++CBC7 ~                                    jr      nz,.CalcBlockY1Test
 699++CBC7 ~                                    ld      a,c
 700++CBC7 ~                                    and     $80
 701++CBC7 ~                                    ClearCarryFlag                  ; speculative clear of carry in case its good
 702++CBC7 ~                                    ret     z
 703++CBC7 ~            ;                       if Y1 hi bit 7 is set
 704++CBC7 ~            .X1NoClipNeeded:
 705++CBC7 ~            .CalcBlockY1Test:       ld      a,b
 706++CBC7 ~                                    test    $80
 707++CBC7 ~                                    jr      z,.CalcBlockYPos       ; if Y is positive jump forward
 708++CBC7 ~            ;                       if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 709++CBC7 ~                                    break
 710++CBC7 ~            .CalcBlockY1:           ld      a,iyh
 711++CBC7 ~                                    test    16
 712++CBC7 ~                                    jr      nz,.CalcBlockYNegMulGrad
 713++CBC7 ~            .CalcBlockYNegDivGrad:  macronegate16bc
 714++CBC7 ~                                    ld      a,(Gradient)            ;Q = gradient
 715++CBC7 ~                                    push    hl
 716++CBC7 ~                                    ld      h,c                     ; move offset into high byte of h
 717++CBC7 ~                                    ld      l,0
 718++CBC7 ~                                    ld      c,a
 719++CBC7 ~                                    call    div_hl_c;LLHLdivC;div_hl_c
 720++CBC7 ~                                    pop     de
 721++CBC7 ~                                    ex      de,hl
 722++CBC7 ~                                    jp      .DoneBlockY1
 723++CBC7 ~            ;                                 else set Adjust = abs(Y1) * Gradient
 724++CBC7 ~            .CalcBlockYNegMulGrad:  macronegate16bc
 725++CBC7 ~                                    push    hl
 726++CBC7 ~                                    ld      hl,bc
 727++CBC7 ~                                    ld      a,(Gradient)            ;Q = gradient
 728++CBC7 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 729++CBC7 ~                                    pop     de
 730++CBC7 ~                                    ex      de,hl
 731++CBC7 ~            ;                       x1 += adjust * (-1 if bit 3 of clipcoord is set)
 732++CBC7 ~            ;                       y1 = 0
 733++CBC7 ~            ;                       ret
 734++CBC7 ~            ;                       now we have done the adjustment, if y or x are off screen then the line spans screen in only 1 dimension so doesn't get drawn
 735++CBC7 ~            .DoneBlockY1:           ld      a,iyh
 736++CBC7 ~                                    test    4
 737++CBC7 ~                                    jr      z,.Y1SkipNegate
 738++CBC7 ~                                    macronegate16de
 739++CBC7 ~            .Y1SkipNegate:          add     hl,de
 740++CBC7 ~                                    ld      bc,0
 741++CBC7 ~                                    ret
 742++CBC7 ~            ;                       if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 743++CBC7 ~            .CalcBlockYPos:         ld      a,iyh
 744++CBC7 ~                                    test    16
 745++CBC7 ~                                    jr      z,.CalcBlockYPosMulGrad
 746++CBC7 ~            .CalcBlockYPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 747++CBC7 ~                                    push    hl
 748++CBC7 ~                                    ld      hl,bc
 749++CBC7 ~                                    ld      de,127
 750++CBC7 ~                                    sub     hl,de
 751++CBC7 ~                                    ld      h,l
 752++CBC7 ~                                    ld      l,0
 753++CBC7 ~                                    ld      c,a
 754++CBC7 ~                                    call    div_hl_c;LLHLdivC
 755++CBC7 ~                                    pop     de
 756++CBC7 ~                                    ex      de,hl
 757++CBC7 ~                                    jp      .DoneBlockY2
 758++CBC7 ~            ;                                 else set Adjust = Y1 lo * Gradient
 759++CBC7 ~            .CalcBlockYPosMulGrad:  push    hl
 760++CBC7 ~                                    ld      hl,bc
 761++CBC7 ~                                    ld      de,127
 762++CBC7 ~                                    sub     hl,de
 763++CBC7 ~                                    ld      a,(Gradient)
 764++CBC7 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 765++CBC7 ~                                    pop     de
 766++CBC7 ~                                    ex      de,hl
 767++CBC7 ~            ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 768++CBC7 ~            ;                y1 = 127
 769++CBC7 ~            .DoneBlockY2:           ld      a,iyh
 770++CBC7 ~                                    test    4
 771++CBC7 ~                                    jr      nz,.Y2SkipNegate
 772++CBC7 ~                                    macronegate16de
 773++CBC7 ~            .Y2SkipNegate:          add     hl,de
 774++CBC7 ~                                    ld      bc,127
 775++CBC7 ~                                    ret
 776++CBC7                      ELSE
 777++CBC7 C9                       ret
 778++CBC8                      ENDIF
 779++CBC8              ; old code for on screen test
 780++CBC8              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 781++CBC8              ;;;;;;
 782++CBC8              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 783++CBC8              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 784++CBC8              ;;;;;;                        and     ixh
 785++CBC8              ;;;;;;                        jp      .CheckYLow
 786++CBC8              ;;;;;;                        ld
 787++CBC8              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 788++CBC8              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 789++CBC8              ;;;;;;                        ld      a,ixh                               ;
 790++CBC8              ;;;;;;                        and     a                                   ;
 791++CBC8              ;;;;;;                        ret     nz                                  ;
 792++CBC8              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 793++CBC8              ;;;;;;                        ld      a,b                                 ;
 794++CBC8              ;;;;;;                        and     ixh                                 ;
 795++CBC8              ;;;;;;                        and     $80                                 ;
 796++CBC8              ;;;;;;                        ret     z                                   ;
 797++CBC8              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 798++CBC8              ;;;;;;                        ld      a,b                                 ;
 799++CBC8              ;;;;;;                        and     ixh                                 ;
 800++CBC8              ;;;;;;                        ret     nz                                  ;
 801++CBC8              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 802++CBC8              ;;;;;;                        ld      a,b
 803++CBC8              ;;;;;;                        or      ixh
 804++CBC8              ;;;;;;                        jr      nz,.StartProcessing
 805++CBC8              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 806++CBC8              ;;;;;;                        ld      a,c
 807++CBC8              ;;;;;;                        or      ixl
 808++CBC8              ;;;;;;                        and     $80
 809++CBC8              ;;;;;;                        jr      z,.StartProcessing
 810++CBC8              ;;;;;;
 811++CBC8              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 812++CBC8              ;;;;;;                        cp      0                                   ;
 813++CBC8              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 814++CBC8              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 815++CBC8              ;;;;;;                        cp      0                                   ;
 816++CBC8              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 817++CBC8              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 818++CBC8              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 819++CBC8              ;;;;;;                        and     $80                                 ;
 820++CBC8              ;;;;;;                        ret     z                                   ;
 821++CBC8              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 822++CBC8              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 823++CBC8              ;;;;;;                        cp      0                                   ;
 824++CBC8              ;;;;;;                        jr      nz,.Startprocessing                 ;
 825++CBC8              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 826++CBC8              ;;;;;;                        and     ixl
 827++CBC8              ;;;;;;
 828++CBC8              ;;;;;;                        .CheckY2Lo                        ;
 829++CBC8              ;;;;;;.CheckY1Lo:             ld      a,c
 830++CBC8              ;;;;;;                        and     $80
 831++CBC8              ;;;;;;                        jr      z,.StartProcessing
 832++CBC8              ;;;;;;.CheckY2Lo:             ld      a,ixl
 833++CBC8              ;;;;;;                        and     $80
 834++CBC8              ;;;;;;                        ret     nz
 835++CBC8              ;;;;;;;clip = 0
# file closed: ././ModelRender/CLIP-LL145.asm
 572+ CBC8              ;--------------------------------------------------------------------------------------------------------
 573+ CBC8                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CBC8              ; Set TransMatTo
   2++CBC8              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CBC8              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CBC8              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CBC8              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CBC8              ; 18 byte fast copy
   7++CBC8
   8++CBC8              ; Fast copy using the stack                                                         ; T states
   9++CBC8 DD 21 00 00  CopyRotmatToTransMat:   ld      ix,0                                                ; 14
  10++CBCC DD 39                                add     ix,sp                                               ; 15
  11++CBCE 31 29 C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  12++CBD1 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  13++CBD2 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  14++CBD3 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  15++CBD4 D9                                   exx                                                         ; 4
  16++CBD5 E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  17++CBD6 D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  18++CBD7 C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  19++CBD8 31 6D C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  20++CBDB C5                                   push    bc                                                  ; 10
  21++CBDC D5                                   push    de                                                  ; 10
  22++CBDD E5                                   push    hl                                                  ; 10
  23++CBDE D9                                   exx                                                         ; 4
  24++CBDF C5                                   push    bc                                                  ; 10
  25++CBE0 D5                                   push    de                                                  ; 10
  26++CBE1 E5                                   push    hl                                                  ; 10
  27++CBE2 31 35 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  28++CBE5 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  29++CBE6 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  30++CBE7 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  31++CBE8 31 73 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  32++CBEB C5                                   push    bc                                                  ; 10
  33++CBEC D5                                   push    de                                                  ; 10
  34++CBED E5                                   push    hl                                                  ; 10
  35++CBEE DD F9                                ld      sp,ix               ; restore stack                 ; 10
  36++CBF0 C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  37++CBF1
  38++CBF1
  39++CBF1
  40++CBF1              ;CopyRotmatToTransMat:
  41++CBF1              ;                        ld      hl,UBnkrotmatSidevX
  42++CBF1              ;                        ld      de,UBnkTransmatSidevX
  43++CBF1              ;                        SixLDIInstrunctions
  44++CBF1              ;                        ld      hl,UBnkrotmatRoofvX
  45++CBF1              ;                        ld      de, UBnkTransmatRoofvX
  46++CBF1              ;                        SixLDIInstrunctions
  47++CBF1              ;                        ld      hl,UBnkrotmatNosevX
  48++CBF1              ;                        ld      de, UBnkTransmatNosevX
  49++CBF1              ;                        SixLDIInstrunctions
  50++CBF1              ;                        ret
  51++CBF1
  52++CBF1              CopyRotToTransMacro:    MACRO
  53++CBF1 ~                                    ld      hl,UBnkrotmatSidevX
  54++CBF1 ~                                    ld      de,UBnkTransmatSidevX
  55++CBF1 ~                                    SixLDIInstrunctions
  56++CBF1 ~                                    SixLDIInstrunctions
  57++CBF1 ~                                    SixLDIInstrunctions
  58++CBF1                                      ENDM
  59++CBF1
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 574+ CBF1                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CBF1              TransposeXX12ByShipToXX15:
   2++CBF1 2A AC C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CBF4 7C           		ld		a,h			                        ; get XX12 Sign
   4++CBF5 E6 80        		and		$80									; check sign bit on high byte
   5++CBF7 47           		ld		b,a									; and put it in of 12xlo in b
   6++CBF8                      ;110921 debugld      h,0
   7++CBF8 7C                   ld      a,h
   8++CBF9 E6 7F                and     $7F
   9++CBFB 67                   ld      h,a
  10++CBFC                      ;110921 debugld      h,0
  11++CBFC ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CC00 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CC03 E6 80        		and		$80									; make sure we only have bit 7
  14++CC05 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CC06 CD FF 8E     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CC09 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CC0A 67           		ld		h,a
  18++CC0B 22 A6 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CC0E              ; ..................................
  20++CC0E 2A AE C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CC11 7C           		ld		a,h
  22++CC12 E6 80        		and		$80
  23++CC14 47           		ld		b,a
  24++CC15                      ;110921 debugld      h,0
  25++CC15 7C                   ld      a,h
  26++CC16 E6 7F                and     $7F
  27++CC18 67                   ld      h,a
  28++CC19                      ;110921 debugld      h,0
  29++CC19 ED 5B 23 C0  		ld		de,(UBnKylo)
  30++CC1D 3A 25 C0     		ld		a,(UBnKysgn)
  31++CC20 E6 80        		and		$80									; make sure we only have bit 7
  32++CC22 4F           		ld		c,a
  33++CC23 CD FF 8E     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CC26 B4           		or		h									; combine sign in A with H
  35++CC27 67           		ld		h,a
  36++CC28 22 A8 C0     		ld		(UBnkYScaled),hl
  37++CC2B              ; ..................................
  38++CC2B 2A B0 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CC2E 7C           		ld		a,h
  40++CC2F E6 80        		and		$80
  41++CC31 47           		ld		b,a
  42++CC32                      ;110921 debugld      h,0
  43++CC32 7C                   ld      a,h
  44++CC33 E6 7F                and     $7F
  45++CC35 67                   ld      h,a
  46++CC36                      ;110921 debugld      h,0
  47++CC36 ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++CC3A 3A 28 C0     		ld		a,(UBnKzsgn)
  49++CC3D E6 80        		and		$80									; make sure we only have bit 7
  50++CC3F 4F           		ld		c,a
  51++CC40 CD FF 8E     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CC43 B4           		or		h									; combine sign in A with H
  53++CC44 67           		ld		h,a
  54++CC45 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CC47 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CC49 E6 7F                and     $7F                                 ; a = value unsigned
  57++CC4B 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CC4D 7D                   ld      a,l                                 ; get low byte now
  59++CC4E              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CC4E FE 04       >                        cp      4
  59++CC50 DA 5F CC    >                        jp		c, ClampZto4
  60++CC53              NoClampZto4:
  61++CC53 22 AA C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CC56 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CC57 32 A6 7E             ld      (varT),a
  64++CC5A 7C           		ld		a,h
  65++CC5B 32 89 7E             ld      (varU),a
  66++CC5E C9           		ret
  67++CC5F              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CC5F 21 04 00     		ld		hl,4
  69++CC62 22 AA C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CC65 7D           		ld		a,l
  71++CC66 32 A6 7E             ld      (varT),a                            ;                                                                           ;;;
  72++CC69 7C           		ld		a,h
  73++CC6A 32 89 7E             ld      (varU),a 						; compatibility for now
  74++CC6D C9           		ret
  75++CC6E
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 575+ CC6E                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CC6E              ScaleNodeTo8Bit:								; TODO make signed
   2++CC6E ED 4B AA C0  	ld			bc,(UBnkZScaled)
   3++CC72 2A A6 C0     	ld			hl,(UBnkXScaled)
   4++CC75 ED 5B A8 C0  	ld			de,(UBnkYScaled)
   5++CC79              SetABSbc:
   6++CC79 78           	ld			a,b
   7++CC7A DD 67        	ld			ixh,a
   8++CC7C E6 7F        	and			SignMask8Bit
   9++CC7E 47           	ld			b,a									; bc = ABS bc
  10++CC7F              SetABShl:
  11++CC7F 7C           	ld			a,h
  12++CC80 DD 6F        	ld			ixl,a
  13++CC82 E6 7F        	and			SignMask8Bit
  14++CC84 67           	ld			h,a									; hl = ABS hl
  15++CC85              SetABSde:
  16++CC85 7A           	ld			a,d
  17++CC86 FD 67        	ld			iyh,a
  18++CC88 E6 7F        	and			SignMask8Bit
  19++CC8A 57           	ld			d,a									; de = ABS de
  20++CC8B              ScaleNodeTo8BitLoop:
  21++CC8B 78               ld          a,b		                            ; U	\ z hi
  22++CC8C B4           	or			h                                   ; XX15+1	\ x hi
  23++CC8D B2           	or			d                                   ; XX15+4	\ y hi
  24++CC8E 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CC90                  ShiftHLRight1
  25++CC90 CB 3C       >			   srl h
  25++CC92 CB 1D       >			   rr  l
  26++CC94                  ShiftDERight1
  26++CC94 CB 3A       >			   srl d
  26++CC96 CB 1B       >			   rr  e
  27++CC98              	ShiftBCRight1
  27++CC98 CB 38       >			   srl b
  27++CC9A CB 19       >			   rr  c
  28++CC9C C3 8B CC         jp          ScaleNodeTo8BitLoop
  29++CC9F              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CC9F DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CCA1 E6 80        	and			SignOnly8Bit
  32++CCA3 B0           	or			b
  33++CCA4 47           	ld			b,a
  34++CCA5              SignforHL:
  35++CCA5 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CCA7 E6 80        	and			SignOnly8Bit
  37++CCA9 B4           	or			h
  38++CCAA 67           	ld			h,a
  39++CCAB              SignforDE:
  40++CCAB FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CCAD E6 80        	and			SignOnly8Bit
  42++CCAF B2           	or			d
  43++CCB0 57           	ld			d,a
  44++CCB1              SignsDoneSaveResult:
  45++CCB1 ED 43 AA C0  	ld			(UBnkZScaled),bc
  46++CCB5 22 A6 C0     	ld			(UBnkXScaled),hl
  47++CCB8 ED 53 A8 C0  	ld			(UBnkYScaled),de
  48++CCBC 78           	ld			a,b
  49++CCBD 32 89 7E     	ld			(varU),a
  50++CCC0 79           	ld			a,c
  51++CCC1 32 A6 7E     	ld			(varT),a
  52++CCC4 C9           	ret
  53++CCC5
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 576+ CCC5
 577+ CCC5              ;--------------------------------------------------------------------------------------------------------
 578+ CCC5 21 D2 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 579+ CCC8 ED 31                                add     hl,a
 580+ CCCA 3E FF                                ld      a,$FF
 581+ CCCC 77                                   ld      (hl),a
 582+ CCCD C9                                   ret
 583+ CCCE              ;--------------------------------------------------------------------------------------------------------
 584+ CCCE 21 D2 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 585+ CCD1 ED 31                                add     hl,a
 586+ CCD3 AF                                   xor     a
 587+ CCD4 77                                   ld      (hl),a
 588+ CCD5 C9                                   ret
 589+ CCD6              ;--------------------------------------------------------------------------------------------------------
 590+ CCD6 3A 03 C4     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 591+ CCD9 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 592+ CCDB CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 593+ CCDD 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 594+ CCDE 21 D2 C0                             ld      hl,UbnkFaceVisArray
 595+ CCE1 3E FF                                ld      a,$FF
 596+ CCE3              SetAllFacesVisibleLoop:
 597+ CCE3 77           EE30:                   ld      (hl),a
 598+ CCE4 23                                   inc     hl
 599+ CCE5 10 FC                                djnz    SetAllFacesVisibleLoop
 600+ CCE7 C9                                   ret
 601+ CCE8              ;--------------------------------------------------------------------------------------------------------
 602+ CCE8 3A 03 C4     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 603+ CCEB CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 604+ CCED CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 605+ CCEF 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 606+ CCF0 06 10                                ld      b,16
 607+ CCF2 21 D2 C0                             ld      hl,UbnkFaceVisArray
 608+ CCF5 3E 00                                ld      a,$00
 609+ CCF7 77           SetAllFacesHiddenLoop:  ld      (hl),a
 610+ CCF8 23                                   inc     hl
 611+ CCF9 10 FC                                djnz    SetAllFacesHiddenLoop
 612+ CCFB C9                                   ret
 613+ CCFC
 614+ CCFC              ;;;;X = normal scale
 615+ CCFC              ;;;;ZtempHi = zhi
 616+ CCFC              ;;;;......................................................
 617+ CCFC              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 618+ CCFC              ;;;;  Loop                                              ::LL90
 619+ CCFC              ;;;;     inc X
 620+ CCFC              ;;;;     divide X, Y & ZtempHiLo by 2
 621+ CCFC              ;;;;  Until ZtempHi = 0
 622+ CCFC              ;;;;......................................................
 623+ CCFC              ;-LL21---------------------------------------------------------------------------------------------------
 624+ CCFC                  DISPLAY "Tracing 3", $
 625+ CCFC
 626+ CCFC                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CCFC              ;divdide by 16 using undocumented instrunctions
   2++CCFC 47           Norm256mulAdivQ:        ld      b,a
   3++CCFD 0E 00                                ld      c,0
   4++CCFF 16 00                                ld      d,0
   5++CD01 3A 8A 7E                             ld      a,(varQ)
   6++CD04 5F                                   ld      e,a
   7++CD05              ;Input: BC = Dividend, DE = Divisor, HL = 0
   8++CD05              ;Output: BC = Quotient, HL = Remainder
   9++CD05 21 00 00     NormDIV16UNDOC:         ld      hl,0
  10++CD08 78                                   ld      a,b
  11++CD09 06 10                                ld      b,16
  12++CD0B CB 31        NormDIV16UNDOCLOOP:     sll	    c		; unroll 16 times
  13++CD0D 17                                   rla	    		; ...
  14++CD0E ED 6A                                adc	    hl,hl		; ...
  15++CD10 ED 52                                sbc	    hl,de		; ...
  16++CD12 30 02                                jr	    nc,NormDIV16UNDOCSKIP		; ...
  17++CD14 19                                   add	    hl,de		; ...
  18++CD15 0D                                   dec	    c		; ...
  19++CD16 10 F3        NormDIV16UNDOCSKIP:     djnz    NormDIV16UNDOCLOOP
  20++CD18 79                                   ld      a,c
  21++CD19 32 8B 7E                             ld      (varR),a
  22++CD1C C9                                   ret
  23++CD1D
  24++CD1D FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  25++CD1F                                      ClearSignBitA
  25++CD1F E6 7F       >                        and     SignMask8Bit
  26++CD21 CD FC CC                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  27++CD24 FD 7C                                ld      a,iyh                       ; now correct R reg
  28++CD26                                      SignBitOnlyA
  28++CD26 E6 80       >                        and     SignOnly8Bit
  29++CD28 B1                                   or      c
  30++CD29 32 8B 7E                             ld      (varR),a
  31++CD2C C9                                   ret
  32++CD2D
  33++CD2D              ; Tested OK
  34++CD2D              ;LL21
  35++CD2D              NormaliseTransMat:
  36++CD2D                      IFDEF LOGMATHS
  37++CD2D ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  38++CD2D ~                            ld      b,9                         ; total of 9 elements to transform
  39++CD2D ~                            MMUSelectMathsTables
  40++CD2D ~            .LL21Loop:      ld      d,(hl)
  41++CD2D ~                            dec     hl
  42++CD2D ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  43++CD2D ~                            ShiftDELeft1                        ; De = DE * 2
  44++CD2D ~                            ld      a,d                         ; a = hi byte after shifting
  45++CD2D ~                            push	hl
  46++CD2D ~                            push	bc
  47++CD2D ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  48++CD2D ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  49++CD2D ~                            pop		bc
  50++CD2D ~                            pop		hl							; bc gets wrecked by BFRDIV
  51++CD2D ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  52++CD2D ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  53++CD2D ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  54++CD2D ~                            MMUSelectROM0
  55++CD2D ~                            ret
  56++CD2D                      ELSE
  57++CD2D 21 72 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  58++CD30 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  59++CD32 79                           ld      a,c
  60++CD33 32 8A 7E                     ld      (varQ),a                    ; set up varQ
  61++CD36 06 09                        ld      b,9                         ; total of 9 elements to transform
  62++CD38 56           LL21Loop:       ld      d,(hl)
  63++CD39 2B                           dec     hl
  64++CD3A 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  65++CD3B                              ShiftDELeft1                        ; De = DE * 2
  65++CD3B CB 23       >			   sla e
  65++CD3D CB 12       >			   rl  d
  66++CD3F 7A                           ld      a,d                         ; a = hi byte after shifting
  67++CD40 E5                           push	hl
  68++CD41 C5                           push	bc
  69++CD42 CD FC CC                     call    Norm256mulAdivQ
  70++CD45                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  71++CD45 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  72++CD46 C1                           pop		bc
  73++CD47 E1                           pop		hl							; bc gets wrecked by BFRDIV
  74++CD48 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  75++CD49 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  76++CD4A 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  77++CD4C C9                           ret
  78++CD4D                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 627+ CD4D              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 628+ CD4D              ;-LL91---------------------------------------------------------------------------------------------------
 629+ CD4D
 630+ CD4D              ; Now we have
 631+ CD4D              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 632+ CD4D              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 633+ CD4D              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 634+ CD4D              ;
 635+ CD4D              ;--------------------------------------------------------------------------------------------------------
 636+ CD4D                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CD4D              ; TESTEDOK
   2++CD4D
   3++CD4D              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CD4D              ;        ld      a,(XX17)
   5++CD4D              ;        ld      ixl,a
   6++CD4D              ;        ld      ixh,9
   7++CD4D              ;        ld      hl,UBnkTransInv0x
   8++CD4D              ;        ld      a,(hl)
   9++CD4D              ;ScaleNode:
  10++CD4D              ;        ld      b,ixl
  11++CD4D              ;ScaleNodeLoop:
  12++CD4D              ;        sla      a
  13++CD4D              ;        djnz    ScaleNodeLoop
  14++CD4D              ;        ld      (hl),a
  15++CD4D              ;        inc     hl
  16++CD4D              ;        inc     hl
  17++CD4D              ;        dec     ixh
  18++CD4D              ;        jr      nz,ScaleNode
  19++CD4D              ;        ret
  20++CD4D
  21++CD4D
  22++CD4D              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CD4D              ; we coudl combine this with move to transmat later as an optimisation
  24++CD4D              ; INPUT - All Scaled
  25++CD4D              ;  They transmat has already been put into side, roof nose order
  26++CD4D              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CD4D              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CD4D              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CD4D              ; OUTPUT
  30++CD4D              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CD4D              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CD4D              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CD4D              ; First all side values become compoment 0 of each vector
  34++CD4D 2A 61 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CD50 ED 5B 67 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CD54 ED 4B 6D C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CD58 22 79 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CD5B ED 53 7B C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CD5F ED 43 7D C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CD63 2A 63 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CD66 ED 5B 69 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CD6A ED 4B 6F C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CD6E 22 81 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CD71 ED 53 83 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CD75 ED 43 85 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CD79 2A 65 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CD7C ED 5B 6B C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CD80 ED 4B 71 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CD84 22 89 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CD87 ED 53 8B C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CD8B ED 43 8D C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CD8F C9                   ret
  53++CD90
  54++CD90
# file closed: ./Universe/Ships/InverseXX16.asm
 637+ CD90              ;--------------------------------------------------------------------------------------------------------
 638+ CD90              ;--------------------------------------------------------------------------------------------------------
 639+ CD90              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 640+ CD90              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 641+ CD90              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 642+ CD90              ; Returns
 643+ CD90              ;
 644+ CD90              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 645+ CD90              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 646+ CD90              ;
 647+ CD90              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 648+ CD90              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 649+ CD90              ;
 650+ CD90              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 651+ CD90              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 652+ CD90              ; TESTEDOK
 653+ CD90              XX12DotOneRow:
 654+ CD90              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 654+ CD90 3A A6 C0    >                        ld      a,(UBnkXScaled)                        ;
 654+ CD93 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 654+ CD94 7E          >                        ld      a,(hl)                        ; A = XX16 element
 654+ CD95 57          >                        ld      d,a
 654+ CD96 ED 30       >                        mul
 654+ CD98 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 654+ CD99 32 A6 7E    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 655+ CD9C 23                                   inc     hl                                  ; move to sign byte
 656+ CD9D              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 656+ CD9D 3A A7 C0    >                        ld      a,(UBnkXScaledSign)
 656+ CDA0 AE          >                        xor     (hl)
 657+ CDA1 32 8C 7E                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 658+ CDA4 23                                   inc     hl
 659+ CDA5              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 659+ CDA5 3A A8 C0    >                        ld      a,(UBnkYScaled)                        ;
 659+ CDA8 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 659+ CDA9 7E          >                        ld      a,(hl)                        ; A = XX16 element
 659+ CDAA 57          >                        ld      d,a
 659+ CDAB ED 30       >                        mul
 659+ CDAD 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 659+ CDAE 32 8A 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 660+ CDB1                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 660+ CDB1 3A A6 7E    >                        ld       a,(varT)
 660+ CDB4 32 8B 7E    >                        ld       (varR),a
 661+ CDB7 23                                   inc     hl
 662+ CDB8                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 662+ CDB8 3A A9 C0    >                        ld      a,(UBnkYScaledSign)
 662+ CDBB AE          >                        xor     (hl)
 663+ CDBC              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 664+ CDBC E5           STequSRplusAQ           push    hl
 665+ CDBD CD 6C 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 666+ CDC0 E1                                   pop     hl
 667+ CDC1 32 A6 7E                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 668+ CDC4 23                                   inc     hl
 669+ CDC5              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 669+ CDC5 3A AA C0    >                        ld      a,(UBnkZScaled)                        ;
 669+ CDC8 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 669+ CDC9 7E          >                        ld      a,(hl)                        ; A = XX16 element
 669+ CDCA 57          >                        ld      d,a
 669+ CDCB ED 30       >                        mul
 669+ CDCD 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 669+ CDCE 32 8A 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 670+ CDD1                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 670+ CDD1 3A A6 7E    >                        ld       a,(varT)
 670+ CDD4 32 8B 7E    >                        ld       (varR),a
 671+ CDD7 23                                   inc     hl
 672+ CDD8                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 672+ CDD8 3A AB C0    >                        ld      a,(UBnkZScaledSign)
 672+ CDDB AE          >                        xor     (hl)
 673+ CDDC              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 674+ CDDC CD 6C 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 675+ CDDF              ; Now we exit with A = result S = Sign
 676+ CDDF C9                                   ret
 677+ CDE0
 678+ CDE0
 679+ CDE0                  DISPLAY "Tracing 4", $
 680+ CDE0
 681+ CDE0              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 682+ CDE0              ;TESTED OK
 683+ CDE0              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 684+ CDE0              XX12EquXX15DotProductXX16:
 685+ CDE0 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 686+ CDE3 21 61 C0                             ld      hl,UBnkTransmatSidevX
 687+ CDE6 CD 90 CD                             call    XX12DotOneRow
 688+ CDE9 32 AC C0                             ld      (UBnkXX12xLo),a
 689+ CDEC 3A 8C 7E                             ld      a,(varS)
 690+ CDEF 32 AD C0                             ld      (UBnkXX12xSign),a
 691+ CDF2 21 67 C0                             ld      hl,UBnkTransmatRoofvX
 692+ CDF5 CD 90 CD                             call    XX12DotOneRow
 693+ CDF8 32 AE C0                             ld      (UBnkXX12yLo),a
 694+ CDFB 3A 8C 7E                             ld      a,(varS)
 695+ CDFE 32 AF C0                             ld      (UBnkXX12ySign),a
 696+ CE01 21 6D C0                             ld      hl,UBnkTransmatNosevX
 697+ CE04 CD 90 CD                             call    XX12DotOneRow
 698+ CE07 32 B0 C0                             ld      (UBnkXX12zLo),a
 699+ CE0A 3A 8C 7E                             ld      a,(varS)
 700+ CE0D 32 B1 C0                             ld      (UBnkXX12zSign),a
 701+ CE10 C9                                   ret
 702+ CE11              ;--------------------------------------------------------------------------------------------------------
 703+ CE11                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CE11              CopyXX12ScaledToXX18:
   2++CE11              CopyResultToDrawCam:
   3++CE11                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CE11 3A AC C0    >                        ld       a,(XX12)
   3++CE14 32 9A C0    >                        ld       (XX18),a
   4++CE17                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CE17 3A AD C0    >                        ld       a,(XX12+1)
   4++CE1A 32 9C C0    >                        ld       (XX18+2),a
   5++CE1D                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CE1D 3A AE C0    >                        ld       a,(XX12+2)
   5++CE20 32 9D C0    >                        ld       (XX18+3),a
   6++CE23                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CE23 3A AF C0    >                        ld       a,(XX12+3)
   6++CE26 32 9F C0    >                        ld       (XX18+5),a
   7++CE29                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CE29 3A B0 C0    >                        ld       a,(XX12+4)
   7++CE2C 32 A0 C0    >                        ld       (XX18+6),a
   8++CE2F                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CE2F 3A B1 C0    >                        ld       a,(XX12+5)
   8++CE32 32 A2 C0    >                        ld       (XX18+8),a
   9++CE35 C9                   ret
  10++CE36
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 704+ CE36                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++CE36              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CE36 3A AC C0    >                        ld       a,(UBnkXX12xLo)
   1++CE39 32 A6 C0    >                        ld       (UBnkXScaled),a
   2++CE3C                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CE3C 3A AD C0    >                        ld       a,(UBnkXX12xSign)
   2++CE3F 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   3++CE42                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CE42 3A AE C0    >                        ld       a,(UBnkXX12yLo)
   3++CE45 32 A8 C0    >                        ld       (UBnkYScaled),a
   4++CE48                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CE48 3A AF C0    >                        ld       a,(UBnkXX12ySign)
   4++CE4B 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   5++CE4E                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CE4E 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
   5++CE51 32 AA C0    >                        ld       (UBnkZScaled),a
   6++CE54                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CE54 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
   6++CE57 32 AB C0    >                        ld       (UBnkZScaledSign),a
   7++CE5A C9                                   ret
   8++CE5B
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 705+ CE5B                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++CE5B              CopyXX18toXX15:
   2++CE5B              CopyDrawCamToScaled:
   3++CE5B                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CE5B 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CE5E 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++CE61                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CE61 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CE64 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   5++CE67                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CE67 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CE6A 32 A8 C0    >                        ld       (UBnkYScaled),a
   6++CE6D                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CE6D 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CE70 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   7++CE73                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CE73 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CE76 32 AA C0    >                        ld       (UBnkZScaled),a
   8++CE79                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CE79 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CE7C 32 AB C0    >                        ld       (UBnkZScaledSign),a
   9++CE7F C9                   ret
  10++CE80
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 706+ CE80                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CE80 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnKxlo)            ; UBnKxlo, UBnKxhi
   2++CE83 ED 5B 22 C0                          ld      de,(UBnKxsgn)           ; UBnKxsgn, UBnKylo
   3++CE87 ED 4B 24 C0                          ld      bc,(UBnKyhi)            ; UBnKyhi, UBnKysgn
   4++CE8B 22 9A C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++CE8E ED 53 9C C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++CE92 ED 43 9E C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++CE96
   8++CE96 2A 26 C0                             ld      hl,(UBnKzlo)            ; UBnKzlo, UBnKzhi
   9++CE99 3A 28 C0                             ld      a,(UBnKzsgn)             ; UBnKzlo
  10++CE9C 22 A0 C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++CE9F 32 A2 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++CEA2 C9                                   ret
  13++CEA3              ;                       ld      hl,UBnKxlo
  14++CEA3              ;                       ld      de,UBnkDrawCam0xLo
  15++CEA3              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++CEA3 C9                                   ret
  17++CEA4
  18++CEA4 2A 9A C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++CEA7 3A 9C C0                             ld  a,(UBnkDrawCam0xSgn)
  20++CEAA B4                                   or  h
  21++CEAB 67                                   ld  h,a
  22++CEAC 22 A6 C0                             ld  (UBnkXScaled),hl
  23++CEAF 2A 9D C0                             ld  hl,(UBnkDrawCam0yLo)
  24++CEB2 3A 9F C0                             ld  a,(UBnkDrawCam0ySgn)
  25++CEB5 B4                                   or  h
  26++CEB6 67                                   ld  h,a
  27++CEB7 22 A8 C0                             ld  (UBnkYScaled),hl
  28++CEBA 2A A0 C0                             ld  hl,(UBnkDrawCam0zLo)
  29++CEBD 3A A2 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++CEC0 B4                                   or  h
  31++CEC1 67                                   ld  h,a
  32++CEC2 22 AA C0                             ld  (UBnkZScaled),hl
  33++CEC5 C9                                   ret
  34++CEC6
  35++CEC6              ;;;CopyXX18ScaledToXX15:
  36++CEC6              ;;;CopyDrawCamToScaledMatrix:
  37++CEC6              ;;;        ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  38++CEC6              ;;;        ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  39++CEC6              ;;;        ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  40++CEC6              ;;;        ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  41++CEC6              ;;;        ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  42++CEC6              ;;;        ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  43++CEC6              ;;;        ret
  44++CEC6
  45++CEC6              ;;;CopyXX15ToXX18Scaled:
  46++CEC6              ;;;CopyScaledMatrixToDrawCam:
  47++CEC6              ;;;        ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  48++CEC6              ;;;        ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  49++CEC6              ;;;        ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  50++CEC6              ;;;        ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  51++CEC6              ;;;        ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  52++CEC6              ;;;        ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  53++CEC6              ;;;        ret
  54++CEC6
  55++CEC6
  56++CEC6              XX15EquXX15AddXX18:
  57++CEC6              LL94Z:
  58++CEC6 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++CEC8 16 00                ld      d,0                                                     ;
  60++CECA 3A AA C0             ld      a,(UBnkZScaled)                                         ;
  61++CECD 6F                   ld      l,a                                                     ;
  62++CECE 3A AB C0             ld      a,(UBnkZScaledSign)                                     ;
  63++CED1 47                   ld      b,a                                                     ;
  64++CED2 3A A0 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++CED5 5F                   ld      e,a                                                     ;
  66++CED6 3A A2 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++CED9 4F                   ld      c,a                                                     ;
  68++CEDA CD FF 8E             call    ADDHLDESignBC                                           ;
  69++CEDD 47                   ld      b,a                                                     ;
  70++CEDE 7C                   ld      a,h                                                     ;
  71++CEDF 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  72++CEE0 32 AB C0             ld      (UBnkZScaledSign),a                                     ;
  73++CEE3 7D                   ld      a,l                                                     ;
  74++CEE4 32 AA C0             ld      (UBnkZScaled),a                                         ;           endif
  75++CEE7              LL94X:
  76++CEE7 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  77++CEE9 16 00                ld      d,0                                                     ;
  78++CEEB 3A A6 C0             ld      a,(UBnkXScaled)                                         ;
  79++CEEE 6F                   ld      l,a                                                     ;
  80++CEEF 3A A7 C0             ld      a,(UBnkXScaledSign)                                     ;
  81++CEF2 47                   ld      b,a                                                     ;
  82++CEF3 3A 9A C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  83++CEF6 5F                   ld      e,a                                                     ;
  84++CEF7 3A 9C C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  85++CEFA 4F                   ld      c,a                                                     ;
  86++CEFB CD FF 8E             call    ADDHLDESignBC                                           ;
  87++CEFE 47                   ld      b,a                                                     ;
  88++CEFF 7C                   ld      a,h                                                     ;
  89++CF00 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  90++CF01 32 A7 C0             ld      (UBnkXScaledSign),a                                     ;
  91++CF04 7D                   ld      a,l                                                     ;
  92++CF05 32 A6 C0             ld      (UBnkXScaled),a                                         ;           endif
  93++CF08              LL94Y:
  94++CF08 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  95++CF0A 16 00                ld      d,0                                                     ;
  96++CF0C 3A A8 C0             ld      a,(UBnkYScaled)                                         ;
  97++CF0F 6F                   ld      l,a                                                     ;
  98++CF10 3A A9 C0             ld      a,(UBnkYScaledSign)                                     ;
  99++CF13 47                   ld      b,a                                                     ;
 100++CF14 3A 9D C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 101++CF17 5F                   ld      e,a                                                     ;
 102++CF18 3A 9F C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 103++CF1B 4F                   ld      c,a                                                     ;
 104++CF1C CD FF 8E             call    ADDHLDESignBC                                           ;
 105++CF1F 47                   ld      b,a                                                     ;
 106++CF20 7C                   ld      a,h                                                     ;
 107++CF21 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 108++CF22 32 A9 C0             ld      (UBnkYScaledSign),a                                     ;
 109++CF25 7D                   ld      a,l                                                     ;
 110++CF26 32 A8 C0             ld      (UBnkYScaled),a                                         ;
 111++CF29 C9                   ret
 112++CF2A
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 707+ CF2A                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++CF2A              CopyXX12ToScaled:
   2++CF2A              CopyResultToScaled:
   3++CF2A                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++CF2A 3A AC C0    >                        ld       a,(XX12+0)
   3++CF2D 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++CF30                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++CF30 3A AE C0    >                        ld       a,(XX12+2)
   4++CF33 32 A8 C0    >                        ld       (UBnkYScaled),a
   5++CF36                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++CF36 3A B0 C0    >                        ld       a,(XX12+4)
   5++CF39 32 AA C0    >                        ld       (UBnkZScaled),a
   6++CF3C C9                   ret
   7++CF3D
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 708+ CF3D              ;--------------------------------------------------------------------------------------------------------
 709+ CF3D                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++CF3D              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++CF3D              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++CF3D              ;;; S = XX12 XSign Xor XX15 XSign
   4++CF3D              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++CF3D              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++CF3D              ;;; R = T
   7++CF3D              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++CF3D              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++CF3D              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++CF3D              ;;; Q = A * Q /256 usigned (zdot)
  11++CF3D              ;;; R = T
  12++CF3D              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++CF3D
  14++CF3D
  15++CF3D
  16++CF3D
  17++CF3D
  18++CF3D              MacroAequDxEdiv256usgn:	MACRO
  19++CF3D ~            						mul
  20++CF3D ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++CF3D              						ENDM
  22++CF3D              DotProductXX12XX15:
  23++CF3D 3A AC C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++CF40                      JumpIfAIsZero dotxskipzero
  24++CF40 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++CF41 CA 5E CF    >                        jp	    z, dotxskipzero
  25++CF44 5F                   ld          e,a
  26++CF45 3A A6 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++CF48 57                   ld          d,a                     ; de = xx12 x signed
  28++CF49                      JumpIfAIsZero dotxskipzero
  28++CF49 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++CF4A CA 5E CF    >                        jp	    z, dotxskipzero
  29++CF4D ED 30        		mul
  30++CF4F 42                   ld          b,d                     ; b = result
  31++CF50 3A AD C0             ld          a,(UBnkXX12xSign)
  32++CF53 21 A7 C0             ld          hl,UBnkXScaledSign
  33++CF56 AE                   xor         (hl)
  34++CF57 E6 80                and         $80                     ; so sign bit only
  35++CF59 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++CF5B C3 62 CF             jp          dotmuly
  37++CF5E              dotxskipzero:
  38++CF5E AF                   xor         a
  39++CF5F 47                   ld          b,a
  40++CF60 FD 67                ld          iyh,a
  41++CF62              dotmuly:
  42++CF62              ; now we have b = XX12 x &d  norm x signed
  43++CF62 3A AE C0             ld          a,(UBnkXX12yLo)
  44++CF65                      JumpIfAIsZero dotyskipzero
  44++CF65 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++CF66 CA 85 CF    >                        jp	    z, dotyskipzero
  45++CF69 5F                   ld          e,a
  46++CF6A 3A A8 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++CF6D                      JumpIfAIsZero dotyskipzero
  47++CF6D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++CF6E CA 85 CF    >                        jp	    z, dotyskipzero
  48++CF71 57                   ld          d,a                     ; de = xx12 x signed
  49++CF72 ED 30                mul
  50++CF74 4A                   ld          c,d                     ; c = result
  51++CF75 DD 69                ld          ixl,c
  52++CF77 3A AF C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++CF7A 21 A9 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++CF7D AE                   xor         (hl)                    ; XX15+3
  55++CF7E E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++CF80 DD 67                ld          ixh,a
  57++CF82 C3 89 CF             jp          dotaddxy
  58++CF85              dotyskipzero:
  59++CF85 AF                   xor         a
  60++CF86 4F                   ld          c,a
  61++CF87 DD 67                ld          ixh,a
  62++CF89              dotaddxy:
  63++CF89              ; Optimise later as this is 16 bit
  64++CF89 26 00                ld          h,0                     ;
  65++CF8B 68                   ld          l,b                     ; hl = xlo + x scaled
  66++CF8C 16 00                ld          d,0                     ;
  67++CF8E 59                   ld          e,c                     ; de = ylo + yscaled
  68++CF8F FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++CF91 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++CF92 CD FF 8E             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++CF95 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++CF96 3A B0 C0             ld          a,(UBnkXX12zLo)         ;
  73++CF99                      JumpIfAIsZero dotzskipzero
  73++CF99 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++CF9A CA BF CF    >                        jp	    z, dotzskipzero
  74++CF9D 5F                   ld          e,a                     ;
  75++CF9E 3A AA C0             ld          a,(UBnkZScaled)         ;
  76++CFA1                      JumpIfAIsZero dotzskipzero
  76++CFA1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++CFA2 CA BF CF    >                        jp	    z, dotzskipzero
  77++CFA5 57                   ld          d,a
  78++CFA6 ED 30                mul
  79++CFA8 E5                   push        hl                      ; save prev result
  80++CFA9 3A AB C0             ld          a,(UBnkZScaledSign)
  81++CFAC 21 B1 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++CFAF AE                   xor         (hl)                    ; hi sign
  83++CFB0 E6 80                and         $80                     ; a = sign of multiply
  84++CFB2 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++CFB3 E1                   pop         hl
  86++CFB4 5A                   ld          e,d
  87++CFB5 16 00                ld          d,0
  88++CFB7 CD FF 8E             call ADDHLDESignBC
  89++CFBA 32 8C 7E             ld          (varS),a
  90++CFBD 7D                   ld          a,l
  91++CFBE C9                   ret                                 ; returns with A = value, varS = sign
  92++CFBF              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++CFBF 78                   ld          a,b
  94++CFC0 32 8C 7E             ld          (varS),a
  95++CFC3 7D                   ld          a,l
  96++CFC4 C9                   ret
  97++CFC5              ;;;;       DotProductXX12XX15:
  98++CFC5              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++CFC5              ;;;;       ld          e,a
 100++CFC5              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++CFC5              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++CFC5              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++CFC5              ;;;;		mul
 104++CFC5              ;;;;       ld          b,d                     ; b as var T
 105++CFC5              ;;;;       ld          a,(UBnkXX12xSign)
 106++CFC5              ;;;;       ld          hl,UBnkXScaledSign
 107++CFC5              ;;;;       xor         (hl)
 108++CFC5              ;;;;       and         $80                     ; so sign bit only
 109++CFC5              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++CFC5              ;;;; now we have b = XX12 x & norm x signed
 111++CFC5              ;;;; by here B = xlo & xscaled C = result sign
 112++CFC5              ;;;;       ld          a,(UBnkXX12yLo)
 113++CFC5              ;;;;       ld          e,a
 114++CFC5              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++CFC5              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++CFC5              ;;;;       mul
 117++CFC5              ;;;;       ld          a,d
 118++CFC5              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++CFC5              ;;;;       ld          a,b                     ; get back T from above held in b
 120++CFC5              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++CFC5              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++CFC5              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++CFC5              ;;;;       xor         (hl)                    ; XX15+3
 124++CFC5              ;;;;       and         $80
 125++CFC5              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++CFC5              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++CFC5              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++CFC5              ;;;;       ld          e,a                     ; use e as var Q
 129++CFC5              ;;;;       ld          a,(UBnkZScaled)         ;
 130++CFC5              ;;;;       ld          d,a
 131++CFC5              ;;;;       mul
 132++CFC5              ;;;;       ld          a,d
 133++CFC5              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++CFC5              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++CFC5              ;;;;       ld          a,(UBnkZScaledSign)
 136++CFC5              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++CFC5              ;;;;       xor         (hl)                    ; hi sign
 138++CFC5              ;;;;       and         $80
 139++CFC5              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++CFC5              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++CFC5
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 710+ CFC5              ;--------------------------------------------------------------------------------------------------------
 711+ CFC5              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 712+ CFC5              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 713+ CFC5              ;--------------------------------------------------------------------------------------------------------
 714+ CFC5                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++CFC5              ScaleObjectDistance:
   2++CFC5              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++CFC5 3A 09 C4             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++CFC8 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++CFC9              LL90:                                       ; scaling object distance
   6++CFC9 3A A1 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++CFCC 47                   ld      b,a                         ; z_hi (yReg)
   8++CFCD                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++CFCD A7          >                        and     a
   8++CFCE C8          >                        ret     z
   9++CFCF              LL90Loop:
  10++CFCF              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++CFCF 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++CFD0                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++CFD0 2A 9D C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++CFD3 CB 3C       >                    srl   h
  12++CFD5 CB 1D       >                    rr    l
  12++CFD7 22 9D C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++CFDA                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++CFDA 2A 9A C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++CFDD CB 3C       >                    srl   h
  13++CFDF CB 1D       >                    rr    l
  13++CFE1 22 9A C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++CFE4                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++CFE4 2A A0 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++CFE7 CB 3C       >                    srl   h
  14++CFE9 CB 1D       >                    rr    l
  14++CFEB 22 A0 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++CFEE 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++CFEF                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++CFEF A7          >                        and     a
  16++CFF0 C2 CF CF    >                        jp	    nz,LL90Loop
  17++CFF3 C9                   ret
  18++CFF4
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 715+ CFF4              ;--------------------------------------------------------------------------------------------------------
 716+ CFF4
 717+ CFF4              ; Backface cull
 718+ CFF4              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 719+ CFF4              ; normal vector = cross product of ship ccordinates
 720+ CFF4              ;
 721+ CFF4                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++CFF4 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CFF5 47                                   ld      b,a                                                    ;;;
   3++CFF6 E6 80                                and     SignOnly8Bit
   4++CFF8 32 A7 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CFFB 78                                   ld      a,b
   6++CFFC CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CFFE 47                                   ld      b,a
   8++CFFF E6 80                                and     SignOnly8Bit
   9++D001 32 A9 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D004 78                                   ld      a,b
  11++D005 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D007 E6 80                                and     SignOnly8Bit
  13++D009 32 AB C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D00C 23                                   inc     hl                          ; move to X ccord
  15++D00D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D00E 32 A6 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D011 23                                   inc     hl                                                                                                                 ;;;
  18++D012 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D013 32 A8 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D016 23                                   inc     hl                                                                                                                 ;;;
  21++D017 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D018 32 AA C0                             ld      (UBnkZScaled),a
  23++D01B C9                                   ret
  24++D01C
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 722+ D01C                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D01C 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D01D 47                                   ld      b,a                         ; save sign bits to b
   3++D01E E6 80                                and     SignOnly8Bit
   4++D020 32 AD C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D023 78                                   ld      a,b
   6++D024 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D026 47                                   ld      b,a
   8++D027 E6 80                                and     SignOnly8Bit
   9++D029 32 AF C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D02C 78                                   ld      a,b
  11++D02D CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D02F E6 80                                and     SignOnly8Bit
  13++D031 32 B1 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D034 23                                   inc     hl                          ; move to X ccord
  15++D035 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D036 32 AC C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D039 23                                   inc     hl                                                                                                                 ;;;
  18++D03A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D03B 32 AE C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D03E 23                                   inc     hl                                                                                                                 ;;;
  21++D03F 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D040 32 B0 C0                             ld      (UBnkXX12zLo),a
  23++D043 C9                                   ret
  24++D044
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 723+ D044              ;--------------------------------------------------------------
 724+ D044              ; Original loginc in EE29 (LL9 4 of 12)
 725+ D044              ; Enters with XX4 = z distnace scaled to 1 .. 31
 726+ D044              ; get number of faces * 4      FaceCntX4
 727+ D044              ; return if no faces
 728+ D044              ; get Face Normal scale factor FaceScale (XX17)
 729+ D044              ; get ship pos z hi     (XX18)
 730+ D044              ; While Z hi <> 0
 731+ D044              ;    FaceScale = FaceScale + 1           (XX17)
 732+ D044              ;    Ship pos y = ship pos y / 2         (XX18)
 733+ D044              ;    ship pos x = ship pos x / 2         (XX18)
 734+ D044              ;    ship pos z = ship pos z / 2         (XX18)
 735+ D044              ; Loop
 736+ D044              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 737+ D044              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 738+ D044              ; Copy XX12 into XX18
 739+ D044              ; For each face
 740+ D044              ;     Get Face sign and visibility distance byte
 741+ D044              ;     if normal visibility range  < XX4
 742+ D044              ;        Get Face data into XX12
 743+ D044              ;        if FaceScale (XX17) >= 4
 744+ D044              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 745+ D044              ;        else
 746+ D044              ;           Copy FaceScale scaled to X  (XX17)
 747+ D044              ;LabelOverflowLoop:
 748+ D044              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 749+ D044              ;           While X >= 0
 750+ D044              ;              X--                                                                                                  ::LL93
 751+ D044              ;              if  x >= 0
 752+ D044              ;                  XX15x = XX15x / 2
 753+ D044              ;                  XX15y = XX15y / 2
 754+ D044              ;                  XX15y = XX15y / 2
 755+ D044              ;           loop
 756+ D044              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 757+ D044              ;           if A > 256 (i.e. was overflow)
 758+ D044              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 759+ D044              ;               X = 1
 760+ D044              ;               Goto LabelOverflowLoop
 761+ D044              ;           else
 762+ D044              ;              Scaled (XX15) Z = AddZ
 763+ D044              ;           endif
 764+ D044              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 765+ D044              ;           if A > 256 (i.e. was overflow)
 766+ D044              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 767+ D044              ;               X = 1
 768+ D044              ;               Goto LabelOverflowLoop
 769+ D044              ;           else
 770+ D044              ;              Scaled (XX15) X = AddX
 771+ D044              ;           endif
 772+ D044              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 773+ D044              ;           if A > 256 (i.e. was overflow)
 774+ D044              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 775+ D044              ;               X = 1
 776+ D044              ;               Goto LabelOverflowLoop
 777+ D044              ;           else
 778+ D044              ;              Scaled (XX15) Y = AddY
 779+ D044              ;           endif
 780+ D044              ;        endif
 781+ D044              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 782+ D044              ;        if dot product < 0
 783+ D044              ;           set face visible
 784+ D044              ;        else
 785+ D044              ;           set face invisible
 786+ D044              ;        end if
 787+ D044              ;     else
 788+ D044              ;       Set FaceVisibility to true
 789+ D044              ;     end if
 790+ D044              ; Next Face
 791+ D044
 792+ D044              ;line of sight vector = [x y z] + face normal vector
 793+ D044
 794+ D044              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 795+ D044              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 796+ D044              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 797+ D044              ;
 798+ D044              ;--------------------------------------------------------------
 799+ D044              ; line of sight (eye outwards dot face normal vector < 0
 800+ D044              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 801+ D044              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 802+ D044              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 803+ D044                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D044              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++D044                  DEFINE CHECKDOTSHIPDATA  1
   3++D044               ;   DEFINE DEBUGFORCEFACEDRAW 1
   4++D044 00           CurrentNormIdx  DB 0
   5++D045              ; SomeFacesVisible:
   6++D045              ; EE29:
   7++D045
   8++D045              ;   Backface cull logic  line of sight vector . face normal vector
   9++D045              ;       line of sight vector . face normal vector
  10++D045              ;       => line of sight vector = [x y z] + face normal vector
  11++D045              ;       Where [x y z] =
  12++D045              ;                                               [ [x y z] . sidev ]
  13++D045              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++D045              ;                                               [ [x y z] . nosev ]
  15++D045              ;
  16++D045              ;   so project the [x y z] vector into the face's normal space
  17++D045              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++D045              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++D045              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++D045              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++D045              ;
  22++D045              ;                         [ [x y z] . sidev + normal_x ]
  23++D045              ;                       = [ [x y z] . roofv + normal_y ]
  24++D045              ;                         [ [x y z] . nosev + normal_z ]
  25++D045              ;
  26++D045              ; so
  27++D045              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++D045              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++D045              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++D045              ;
  31++D045              ; where face is visible if visibility < 0
  32++D045              ;
  33++D045              ;   so we set XX15 to [x y z] . sidev
  34++D045              ;                     [x y z] . roofv
  35++D045              ;                     [x y z] . nosev
  36++D045              ;
  37++D045
  38++D045
  39++D045
  40++D045 3A A1 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++D048                                      JumpIfAIsZero .ScaleDone            ;
  41++D048 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++D049 CA 75 D0    >                        jp	    z, .ScaleDone
  42++D04C 2A 9A C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++D04F ED 5B 9D C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++D053 ED 4B A0 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++D057 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++D059                                      ShiftHLRight1                       ; divide cam position by 2
  46++D059 CB 3C       >			   srl h
  46++D05B CB 1D       >			   rr  l
  47++D05D                                      ShiftDERight1                       ;
  47++D05D CB 3A       >			   srl d
  47++D05F CB 1B       >			   rr  e
  48++D061                                      ShiftBCRight1                       ;
  48++D061 CB 38       >			   srl b
  48++D063 CB 19       >			   rr  c
  49++D065 78                                   ld      a,b                         ; loop if not scaled down
  50++D066                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++D066 A7          >                        and     a
  50++D067 C2 57 D0    >                        jp	    nz,.ScaleNormalLoop
  51++D06A 22 9A C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++D06D ED 53 9D C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++D071 ED 43 A0 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++D075 FD 7D        .ScaleDone:             ld      a,iyl
  55++D077 32 91 7E                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++D07A C9                                   ret
  57++D07B
  58++D07B 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  59++D07E E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++D080 20 31                                jr      nz,.ShipNoDraw               ; .
  61++D082 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  62++D085 7C                                   ld      a,h
  63++D086                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++D086 FE C0       >                        cp     ShipMaxDistance
  63++D088 D2 B3 D0    >                        jp		nc,.ShipNoDraw
  64++D08B ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  65++D08F CD 55 99                             call    compare16HLDE
  66++D092 38 1F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++D094 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  68++D098 CD 55 99                             call    compare16HLDE
  69++D09B 38 16                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++D09D                                      IFDEF   CHECKDOTSHIPDATA
  71++D09D 3A 04 C4     .CheckDotV2:                ld      a,(DotAddr)
  72++D0A0                                          JumpIfAGTENusng h, .DrawFull
  72++D0A0 BC          >                        cp     h
  72++D0A1 D2 A7 D0    >                        jp		nc,.DrawFull
  73++D0A4 C3 B9 D0                                 jp      .ShipIsADot
  74++D0A7 3A 54 C0     .DrawFull:                  ld      a,(UBnkaiatkecm)            ; its visible but a dot
  75++D0AA F6 40                                    or      ShipIsVisible               ; Visible and not a dot
  76++D0AC E6 F7                                    and     ShipIsNotDot                ;
  77++D0AE 32 54 C0                                 ld      (UBnkaiatkecm),a            ;
  78++D0B1                                          ClearCarryFlag
  78++D0B1 B7          >                        or a
  79++D0B2 C9                                       ret
  80++D0B3                                      ELSE
  81++D0B3 ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  82++D0B3 ~                                        ShiftHLRight1                       ; .
  83++D0B3 ~                                        ShiftHLRight1                       ; .
  84++D0B3 ~                                        ld      a,h
  85++D0B3 ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  86++D0B3 ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  87++D0B3 ~                                        ; Check visbility distance
  88++D0B3 ~            .SetXX4Dist:                ;break
  89++D0B3 ~                                        ld      a,l
  90++D0B3 ~                                        rra                                 ; l may have had bit 0 of h carried in
  91++D0B3 ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  92++D0B3 ~                                        srl     a
  93++D0B3 ~                                        srl     a
  94++D0B3 ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  95++D0B3 ~                                        ld      a,(UBnkaiatkecm)            ; its visible but a dot
  96++D0B3 ~                                        or      ShipIsVisible               ; Visible and not a dot
  97++D0B3 ~                                        and     ShipIsNotDot                ;
  98++D0B3 ~                                        ld      (UBnkaiatkecm),a            ;
  99++D0B3 ~                                        ClearCarryFlag
 100++D0B3 ~                                        ret
 101++D0B3                                      ENDIF
 102++D0B3              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 102++D0B3 21 54 C0    >                        ld      hl,UBnkaiatkecm
 102++D0B6 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 103++D0B8 C9                                   ret
 104++D0B9 3A 54 C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
 105++D0BC                                      IFDEF DEBUGDRAWDISTANCE
 106++D0BC ~                                        or      ShipIsVisible   ;
 107++D0BC                                      ELSE
 108++D0BC F6 48                                    or      ShipIsVisible | ShipIsDot   ;
 109++D0BE                                      ENDIF
 110++D0BE 32 54 C0                             ld      (UBnkaiatkecm),a            ;
 111++D0C1 C9                                   ret
 112++D0C2
 113++D0C2                                                  DISPLAY "TODO:remove all teh processing of rotmat to load craft to camera as its already been done"
 114++D0C2              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 114++D0C2 3A 03 C4    >                        ld   a,(FaceCtX4Addr)
 114++D0C5 A7          >                        and a
 114++D0C6 C8          >                        ret    z
 115++D0C7                                     ; break
 116++D0C7 CD C8 CB                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 117++D0CA CD 24 7A                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 118++D0CD CD 80 CE                             call    LoadCraftToCamera           ; XX18 = camera
 119++D0D0                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 120++D0D0 3A 09 C4     .BackfaceLoop:          ld      a,(QAddr)                   ;
 121++D0D3 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 122++D0D5              ; By this point XX18 = scaled draw cam and iyl = scale factor
 123++D0D5 CD 45 D0                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 124++D0D8 CD A4 CE                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 125++D0DB CD B7 79     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 126++D0DE CD 11 CE                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 127++D0E1 21 C9 C5     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 128++D0E4 22 90 7D                             ld      (varV),hl
 129++D0E7 3A 03 C4                             ld      a,(FaceCtX4Addr)                                        ; For each face
 130++D0EA CB 3F                                srl     a                                              ;
 131++D0EC CB 3F                                srl     a                                              ;
 132++D0EE 47                                   ld      b,a                                            ;
 133++D0EF AF                                   xor     a
 134++D0F0 32 44 D0                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 135++D0F3 E5           .ProcessNormalsLoop:    push    hl
 136++D0F4 C5                                   push    bc
 137++D0F5 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 138++D0F6 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 139++D0F8 E5                                   push    hl
 140++D0F9 21 52 C0                             ld      hl,UBnkDrawAllFaces
 141++D0FC BE                                   cp      (hl)
 142++D0FD E1                                   pop     hl
 143++D0FE                                      IFDEF DEBUGFORCEFACEDRAW
 144++D0FE ~                                        jp      .FaceVisible
 145++D0FE                                      ELSE
 146++D0FE DA 43 D2                                 jp      c,.FaceVisible              ; then we always draw
 147++D101                                      ENDIF
 148++D101              ; This bit needs to be added to force face visible
 149++D101 CD 1C D0     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 150++D104 3A 91 7E                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 151++D107 47                                   ld      b,a
 152++D108                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 152++D108 FE 04       >                        cp      4
 152++D10A DA 45 D1    >                        jp		c, .ScaleNormByXX17
 153++D10D CD 5B CE     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 154++D110 C3 D4 D1                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 155++D113 3A 9A C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 156++D116 CB 3F                                srl     a                           ; which is held in XX18
 157++D118 32 9A C0                             ld      (UBnkDrawCam0xLo),a         ; .
 158++D11B 3A A0 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 159++D11E CB 3F                                srl     a                           ; .
 160++D120 32 A0 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 161++D123 3A 9D C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 162++D126 CB 3F                                srl     a                           ; .
 163++D128 32 9D C0                             ld      (UBnkDrawCam0yLo),a        ; .
 164++D12B 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 165++D12D                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 165++D12D 3A A6 C0    >                    ld      a,(UBnkXScaled)
 165++D130 CB 3F       >                    srl     a
 165++D132 32 A6 C0    >                    ld      (UBnkXScaled),a
 166++D135                                      ShiftMem8Right1 UBnkYScaled         ;
 166++D135 3A A8 C0    >                    ld      a,(UBnkYScaled)
 166++D138 CB 3F       >                    srl     a
 166++D13A 32 A8 C0    >                    ld      (UBnkYScaled),a
 167++D13D                                      ShiftMem8Right1 UBnkZScaled         ;
 167++D13D 3A AA C0    >                    ld      a,(UBnkZScaled)
 167++D140 CB 3F       >                    srl     a
 167++D142 32 AA C0    >                    ld      (UBnkZScaled),a
 168++D145              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 169++D145              .ScaleNormByXX17:       ;ld      b,a
 170++D145 CD 36 CE                             call    CopyXX12toXX15
 171++D148 05           .LL93                   dec     b
 172++D149 FA 68 D1                             jp      m, .ScaledNorm
 173++D14C              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 173++D14C 3A A6 C0    >                    ld      a,(UBnkXScaled)
 173++D14F CB 3F       >                    srl     a
 173++D151 32 A6 C0    >                    ld      (UBnkXScaled),a
 174++D154                                      ShiftMem8Right1 UBnkYScaled        ;
 174++D154 3A A8 C0    >                    ld      a,(UBnkYScaled)
 174++D157 CB 3F       >                    srl     a
 174++D159 32 A8 C0    >                    ld      (UBnkYScaled),a
 175++D15C                                      ShiftMem8Right1 UBnkZScaled        ;
 175++D15C 3A AA C0    >                    ld      a,(UBnkZScaled)
 175++D15F CB 3F       >                    srl     a
 175++D161 32 AA C0    >                    ld      (UBnkZScaled),a
 176++D164 05                                   dec     b                          ;
 177++D165 F2 4C D1                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 178++D168              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 179++D168              ; Add normal to XX15
 180++D168              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 181++D168              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 182++D168              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 183++D168              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 184++D168              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 184++D168 3A AA C0    >                        ld       a,(UBnkZScaled)
 184++D16B 32 8B 7E    >                        ld       (varR),a
 185++D16E                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 185++D16E 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
 185++D171 32 8C 7E    >                        ld       (varS),a
 186++D174                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 186++D174 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
 186++D177 32 8A 7E    >                        ld       (varQ),a
 187++D17A 3A A2 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 188++D17D CD 6C 9C                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 189++D180 DA 13 D1                             jp      c,.Ovflw
 190++D183 32 AA C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 191++D186                                      ldCopyByte  varS, UBnkZScaledSign   ;
 191++D186 3A 8C 7E    >                        ld       a,(varS)
 191++D189 32 AB C0    >                        ld       (UBnkZScaledSign),a
 192++D18C                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 192++D18C 3A A6 C0    >                        ld       a,(UBnkXScaled)
 192++D18F 32 8B 7E    >                        ld       (varR),a
 193++D192                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 193++D192 3A AD C0    >                        ld       a,(UBnkXX12xSign)
 193++D195 32 8C 7E    >                        ld       (varS),a
 194++D198                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 194++D198 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
 194++D19B 32 8A 7E    >                        ld       (varQ),a
 195++D19E 3A 9C C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 196++D1A1 CD 6C 9C                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 197++D1A4 DA 13 D1                             jp      c,.Ovflw
 198++D1A7 32 A6 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 199++D1AA                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 199++D1AA 3A 8C 7E    >                        ld       a,(varS)
 199++D1AD 32 A7 C0    >                        ld       (UBnkXScaledSign),a
 200++D1B0                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 200++D1B0 3A A8 C0    >                        ld       a,(UBnkYScaled)
 200++D1B3 32 8B 7E    >                        ld       (varR),a
 201++D1B6                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 201++D1B6 3A AF C0    >                        ld       a,(UBnkXX12ySign)
 201++D1B9 32 8C 7E    >                        ld       (varS),a
 202++D1BC                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 202++D1BC 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
 202++D1BF 32 8A 7E    >                        ld       (varQ),a
 203++D1C2 3A 9F C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 204++D1C5 CD 6C 9C                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 205++D1C8 DA 13 D1                             jp      c,.Ovflw                    ; .
 206++D1CB 32 A8 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 207++D1CE                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 207++D1CE 3A 8C 7E    >                        ld       a,(varS)
 207++D1D1 32 A9 C0    >                        ld       (UBnkYScaledSign),a
 208++D1D4              ; calculate dot product LL89
 209++D1D4              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 209++D1D4 3A AC C0    >                        ld       a,(UBnkXX12xLo)
 209++D1D7 32 8A 7E    >                        ld       (varQ),a
 210++D1DA 3A A6 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 211++D1DD CD D7 9B                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 212++D1E0 32 A6 7E                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 213++D1E3 3A AD C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 214++D1E6 21 A7 C0                             ld      hl,UBnkXScaledSign          ; .
 215++D1E9 AE                                   xor     (hl)                        ; .
 216++D1EA 32 8C 7E                             ld      (varS),a                    ; .
 217++D1ED                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 217++D1ED 3A AE C0    >                        ld       a,(UBnkXX12yLo)
 217++D1F0 32 8A 7E    >                        ld       (varQ),a
 218++D1F3 3A A8 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 219++D1F6 CD D7 9B                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 220++D1F9 32 8A 7E                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 221++D1FC                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 221++D1FC 3A A6 7E    >                        ld       a,(varT)
 221++D1FF 32 8B 7E    >                        ld       (varR),a
 222++D202 3A AF C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 223++D205 21 A9 C0                             ld      hl, UBnkYScaledSign         ; .
 224++D208 AE                                   xor     (hl)                        ; .
 225++D209 CD 6C 9C                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 226++D20C 32 A6 7E                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 227++D20F                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 227++D20F 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
 227++D212 32 8A 7E    >                        ld       (varQ),a
 228++D215 3A AA C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 229++D218 CD D7 9B                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 230++D21B 32 8A 7E                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 231++D21E                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 231++D21E 3A A6 7E    >                        ld       a,(varT)
 231++D221 32 8B 7E    >                        ld       (varR),a
 232++D224 3A AB C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 233++D227 21 B1 C0                             ld      hl, UBnkXX12zSign           ; .
 234++D22A AE                                   xor     (hl)                        ; .
 235++D22B CD 6C 9C                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 236++D22E FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 237++D230 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 238++D232 3A 8C 7E                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 239++D235 ED 27 80                             test    $80                         ; this should test S not A
 240++D238 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 241++D23A 3A 44 D0     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 242++D23D CD CE CC                             call        SetFaceAHidden                                      ;           set face invisible
 243++D240 C3 49 D2                             jp          .ProcessNormalLoopEnd                                ;        end if
 244++D243 3A 44 D0     .FaceVisible:            ld          a,(CurrentNormIdx)
 245++D246 CD C5 CC                             call        SetFaceAVisible
 246++D249 21 44 D0     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 247++D24C 34                                   inc         (hl)                    ; move index pointer up by one
 248++D24D C1                                   pop         bc
 249++D24E E1                                   pop         hl                      ; get normal data pointer back
 250++D24F 3E 04                                ld          a,4
 251++D251 ED 31                                add         hl,a                    ; move to next normal entry
 252++D253 22 90 7D                             ld          (varV),hl               ; save as we need it again
 253++D256 05                                   dec         b
 254++D257 C2 F3 D0                             jp          nz,.ProcessNormalsLoop
 255++D25A C9                                   ret
 256++D25B
# file closed: ././ModelRender/BackfaceCull.asm
 804+ D25B              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 805+ D25B
 806+ D25B              TransposeXX12NodeToXX15:
 807+ D25B                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 807+ D25B 3A 22 C0    >                        ld       a,(UBnKxsgn)
 807+ D25E 32 A8 C0    >                        ld       (UbnkXPointSign),a
 808+ D261 ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 809+ D265 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 810+ D266 FA 7C D2             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 811+ D269              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 812+ D269              NodeXPositiveX:
 813+ D269 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 814+ D26A 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 815+ D26C 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 816+ D26F 26 00                ld          h,0                                 ; but we don;t want the sign
 817+ D271 09                   add         hl,bc                               ; its a 16 bit add
 818+ D272 22 A6 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 819+ D275 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 820+ D276 32 A8 C0             ld          (UbnkXPointSign),a
 821+ D279 C3 98 D2             jp          FinishedThisNodeX
 822+ D27C              ; If we get here then _sign and vertv_ have different signs so do subtract
 823+ D27C              NodeNegativeX:
 824+ D27C              LL52X:                                                 ;
 825+ D27C 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
 826+ D27F ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 827+ D283 06 00                ld          b,0                                 ; XX12 lo byte only
 828+ D285 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 829+ D287 F2 95 D2             jp          p,SetAndMopX                       ; if result is positive skip to write back
 830+ D28A              NodeXNegSignChangeX:
 831+ D28A              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 832+ D28A CD 76 93             call        negate16hl                          ; Convert back to positive and flip sign
 833+ D28D 3A A8 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 834+ D290 EE 80                xor         $80                                 ; Flip bit 7
 835+ D292 32 A8 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 836+ D295              SetAndMopX:
 837+ D295 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
 838+ D298              FinishedThisNodeX:
 839+ D298
 840+ D298              LL53:
 841+ D298
 842+ D298                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 842+ D298 3A 25 C0    >                        ld       a,(UBnKysgn)
 842+ D29B 32 AB C0    >                        ld       (UbnkYPointSign),a
 843+ D29E ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 844+ D2A2 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 845+ D2A3 FA B9 D2             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 846+ D2A6              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 847+ D2A6              NodeXPositiveY:
 848+ D2A6 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 849+ D2A7 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 850+ D2A9 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 851+ D2AC 26 00                ld          h,0                                 ; but we don;t want the sign
 852+ D2AE 09                   add         hl,bc                               ; its a 16 bit add
 853+ D2AF 22 A9 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 854+ D2B2 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 855+ D2B3 32 A8 C0             ld          (UbnkXPointSign),a
 856+ D2B6 C3 D5 D2             jp          FinishedThisNodeY
 857+ D2B9              ; If we get here then _sign and vertv_ have different signs so do subtract
 858+ D2B9              NodeNegativeY:
 859+ D2B9              LL52Y:                                                 ;
 860+ D2B9 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
 861+ D2BC ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 862+ D2C0 06 00                ld          b,0                                 ; XX12 lo byte only
 863+ D2C2 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 864+ D2C4 F2 D2 D2             jp          p,SetAndMopY                       ; if result is positive skip to write back
 865+ D2C7              NodeXNegSignChangeY:
 866+ D2C7              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 867+ D2C7 CD 76 93             call        negate16hl                          ; Convert back to positive and flip sign
 868+ D2CA 3A AB C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 869+ D2CD EE 80                xor         $80                                 ; Flip bit 7
 870+ D2CF 32 AB C0             ld          (UbnkYPointSign),a                 ; XX15+2
 871+ D2D2              SetAndMopY:
 872+ D2D2 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
 873+ D2D5              FinishedThisNodeY:
 874+ D2D5
 875+ D2D5                  DISPLAY "Tracing 5", $
 876+ D2D5
 877+ D2D5              TransposeZ:
 878+ D2D5              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 879+ D2D5 3A B1 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 880+ D2D8                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 880+ D2D8 CB 7F       >                        bit 	7,a
 880+ D2DA C2 EE D2    >                        jp      nz,NegativeNodeZ
 881+ D2DD 3A B0 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 882+ D2E0 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 883+ D2E3 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 884+ D2E5 7D                   ld          a,l
 885+ D2E6 32 A6 7E             ld          (varT),a                            ;                                                                           ;;;
 886+ D2E9 7C                   ld          a,h
 887+ D2EA 32 89 7E             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 888+ D2ED C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 889+ D2EE              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 890+ D2EE              NegativeNodeZ:
 891+ D2EE              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 892+ D2EE 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 893+ D2F1 ED 4B B0 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 894+ D2F5 06 00                ld          b,0                                 ; upper byte will be garbage
 895+ D2F7                      ClearCarryFlag
 895+ D2F7 B7          >                        or a
 896+ D2F8 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 897+ D2FA 7D                   ld          a,l
 898+ D2FB 32 A6 7E             ld          (varT),a                            ; t = result low
 899+ D2FE 7C                   ld          a,h
 900+ D2FF 32 89 7E             ld          (varU),a                            ; u = result high
 901+ D302 E2 0F D3             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 902+ D305              LL56Overflow:
 903+ D305 FE 00                cp          0                                   ; is varU 0?
 904+ D307 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 905+ D309 3A A6 7E             ld          a,(varT)                            ; T \ restore z lo
 906+ D30C                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 906+ D30C FE 04       >                        cp    4
 906+ D30E D0          >                        ret	 nc
 907+ D30F              MakeNodeClose:
 908+ D30F              LL140:                                                  ; else make node close
 909+ D30F AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 910+ D310 32 89 7E             ld          (varU),a                            ; U
 911+ D313 3E 04                ld          a,4                                 ; lo
 912+ D315 32 A6 7E             ld          (varT),a                            ; T
 913+ D318 C9                   ret
 914+ D319              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 915+ D319              ProcessVisibleNode:
 916+ D319              RotateNode:                                                                                                                         ;;;
 917+ D319 CD E0 CD             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 918+ D31C              LL52LL53LL54LL55
 919+ D31C              TransposeNode:
 920+ D31C CD 5B D2             call        TransposeXX12NodeToXX15
 921+ D31F
 922+ D31F              ; ......................................................                                                         ;;;
 923+ D31F              NodeAdditionsDone:
 924+ D31F              Scale16BitTo8Bit:
 925+ D31F              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
 926+ D31F 3A 89 7E             ld          a,(varU)                            ; U \ z hi
 927+ D322 21 A7 C0             ld          hl,UbnkXPointHi
 928+ D325 B6                   or          (hl)                                ; XX15+1    \ x hi
 929+ D326 21 AA C0             ld          hl,UbnkYPointHi
 930+ D329 B6                   or          (hl)                                ; XX15+4    \ y hi
 931+ D32A              AreXYZHiAllZero:
 932+ D32A 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 933+ D32C              DivideXYZBy2:
 934+ D32C                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
 934+ D32C 2A A6 C0    >                    ld    hl,(UbnkXPoint)
 934+ D32F CB 3C       >                    srl   h
 934+ D331 CB 1D       >                    rr    l
 934+ D333 22 A6 C0    >                    ld    (UbnkXPoint),hl
 935+ D336                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
 935+ D336 2A A9 C0    >                    ld    hl,(UbnkYPoint)
 935+ D339 CB 3C       >                    srl   h
 935+ D33B CB 1D       >                    rr    l
 935+ D33D 22 A9 C0    >                    ld    (UbnkYPoint),hl
 936+ D340 3A 89 7E             ld          a,(varU)                            ; U \ z hi
 937+ D343 67                   ld          h,a
 938+ D344 3A A6 7E             ld          a,(varT)                            ; T \ z lo
 939+ D347 6F                   ld          l,a
 940+ D348                      ShiftHLRight1
 940+ D348 CB 3C       >			   srl h
 940+ D34A CB 1D       >			   rr  l
 941+ D34C 7C                   ld          a,h
 942+ D34D 32 89 7E             ld          (varU),a
 943+ D350 7D                   ld          a,l
 944+ D351 32 A6 7E             ld          (varT),a                            ; T \ z lo
 945+ D354 C3 1F D3             jp          Scale16BitTo8Bit                    ; loop U
 946+ D357              NodeScalingDone:
 947+ D357              LL60:                                                   ; hi U rolled to 0, exited loop above.
 948+ D357              ProjectNodeToScreen:
 949+ D357                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
 949+ D357 3A A6 7E    >                        ld       a,(varT)
 949+ D35A 32 8A 7E    >                        ld       (varQ),a
 950+ D35D 3A A6 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
 951+ D360 21 8A 7E             ld          hl,varQ
 952+ D363 BE                   cp          (hl)                                ; Q
 953+ D364                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
 953+ D364 DA 6D D3    >                        jp		c,DoSmallAngle
 954+ D367 CD E3 9C             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
 955+ D36A C3 75 D3             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
 956+ D36D              DoSmallAngle:                                           ; small x angle
 957+ D36D              LL69:
 958+ D36D              ; TODO check if we need to retain BC as this trashes it
 959+ D36D              ;Input: BC = Dividend, DE = Divisor, HL = 0
 960+ D36D              ;Output: BC = Quotient, HL = Remainder
 961+ D36D 47                   ld      b,a
 962+ D36E CD F6 95             call    DIV16UNDOC
 963+ D371 79                   ld      a,c
 964+ D372 32 8B 7E             ld      (varR),a
 965+ D375               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 966+ D375              SkipSmallAngle:
 967+ D375              ScaleX:
 968+ D375              LL65:                                                   ; both continue for scaling based on z
 969+ D375 3A A8 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
 970+ D378                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 970+ D378 CB 7F       >                        bit 	7,a
 970+ D37A C2 8D D3    >                        jp      nz,NegativeXPoint
 971+ D37D              ; ......................................................
 972+ D37D              PositiveXPoint:
 973+ D37D 3A 8B 7E             ld          a,(varR)
 974+ D380 6F                   ld          l,a
 975+ D381 3A 89 7E             ld          a,(varU)
 976+ D384 67                   ld          h,a
 977+ D385 3E 80                ld          a,ScreenCenterX
 978+ D387 ED 31                add         hl,a
 979+ D389 EB                   ex          de,hl
 980+ D38A C3 9D D3             jp          StoreXPoint
 981+ D38D              NegativeXPoint:
 982+ D38D              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 983+ D38D 3A 8B 7E             ld          a,(varR)
 984+ D390 6F                   ld          l,a
 985+ D391 3A 89 7E             ld          a,(varU)
 986+ D394 67                   ld          h,a
 987+ D395 0E 80                ld          c,ScreenCenterX
 988+ D397 06 00                ld          b,0
 989+ D399                      ClearCarryFlag
 989+ D399 B7          >                        or a
 990+ D39A ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 991+ D39C EB                   ex          de,hl
 992+ D39D              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
 993+ D39D FD 73 00             ld          (iy+0),e                            ; Update X Point
 994+ D3A0 FD 72 01             ld          (iy+1),d                            ; Update X Point
 995+ D3A3 FD 23                inc         iy
 996+ D3A5 FD 23                inc         iy
 997+ D3A7              ; ......................................................
 998+ D3A7              LL66:
 999+ D3A7              ProcessYPoint:
1000+ D3A7 AF                   xor         a                                   ; y hi = 0
1001+ D3A8 32 89 7E             ld          (varU),a                            ; U
1002+ D3AB                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1002+ D3AB 3A A6 7E    >                        ld       a,(varT)
1002+ D3AE 32 8A 7E    >                        ld       (varQ),a
1003+ D3B1 3A A9 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1004+ D3B4 21 8A 7E             ld          hl,varQ
1005+ D3B7 BE                   cp          (hl)                                ; Q
1006+ D3B8                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1006+ D3B8 DA C1 D3    >                        jp		c,SmallYHop
1007+ D3BB              SmallYPoint:
1008+ D3BB CD E3 9C             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1009+ D3BE C3 C4 D3             jp          SkipYScale                          ; LL68 hop over small y yangle
1010+ D3C1              SmallYHop:
1011+ D3C1              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1012+ D3C1 CD C0 9C             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1013+ D3C4              SkipYScale:
1014+ D3C4              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1015+ D3C4 3A AB C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1016+ D3C7 CB 7F                bit         7,a
1017+ D3C9 C2 DC D3             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1018+ D3CC              PositiveYPoint:
1019+ D3CC 3A 8B 7E             ld          a,(varR)
1020+ D3CF 6F                   ld          l,a
1021+ D3D0 3A 89 7E             ld          a,(varU)
1022+ D3D3 67                   ld          h,a
1023+ D3D4 3E 60                ld          a,ScreenHeightHalf
1024+ D3D6 ED 31                add         hl,a
1025+ D3D8 EB                   ex          de,hl
1026+ D3D9 C3 EC D3             jp          LL50
1027+ D3DC              NegativeYPoint:
1028+ D3DC              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1029+ D3DC 3A 8B 7E             ld          a,(varR)
1030+ D3DF 6F                   ld          l,a
1031+ D3E0 3A 89 7E             ld          a,(varU)
1032+ D3E3 67                   ld          h,a
1033+ D3E4 0E 60                ld          c,ScreenHeightHalf
1034+ D3E6 06 00                ld          b,0
1035+ D3E8                      ClearCarryFlag
1035+ D3E8 B7          >                        or a
1036+ D3E9 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1037+ D3EB EB                   ex          de,hl
1038+ D3EC              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1039+ D3EC FD 73 00             ld          (iy+0),e                            ; Update X Point
1040+ D3EF FD 72 01             ld          (iy+1),d                            ; Update X Point
1041+ D3F2 FD 23                inc         iy
1042+ D3F4 FD 23                inc         iy
1043+ D3F6 C9                   ret
1044+ D3F7              ;--------------------------------------------------------------------------------------------------------
1045+ D3F7              ;;;     Byte 0 = X magnitide with origin at middle of ship
1046+ D3F7              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1047+ D3F7              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1048+ D3F7              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1049+ D3F7              CopyNodeToXX15:
1050+ D3F7                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1050+ D3F7 7E          >                        ld       a,(hl)
1050+ D3F8 32 A6 C0    >                        ld       (UBnkXScaled),a
1051+ D3FB 23                   inc         hl
1052+ D3FC                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1052+ D3FC 7E          >                        ld       a,(hl)
1052+ D3FD 32 A8 C0    >                        ld       (UBnkYScaled),a
1053+ D400 23                   inc         hl
1054+ D401                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1054+ D401 7E          >                        ld       a,(hl)
1054+ D402 32 AA C0    >                        ld       (UBnkZScaled),a
1055+ D405 23                   inc         hl
1056+ D406              PopulateXX15SignBits:
1057+ D406              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1058+ D406 7E                   ld          a,(hl)
1059+ D407 4F                   ld          c,a                                 ; copy sign and visibility to c
1060+ D408 47                   ld          b,a
1061+ D409 E6 80                and         $80                                 ; keep high 3 bits
1062+ D40B 32 A7 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1063+ D40E 78                   ld          a,b
1064+ D40F E6 40                and         $40
1065+ D411 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1066+ D413 32 A9 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1067+ D416 78                   ld          a,b
1068+ D417 E6 20                and         $20
1069+ D419 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1070+ D41B CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1071+ D41D 32 AB C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1072+ D420 79                   ld          a,c                                 ; returns a with visibility sign byte
1073+ D421 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1074+ D423 32 A6 7E             ld          (varT),a                            ; and store in varT as its needed later
1075+ D426 C9                   ret
1076+ D427
1077+ D427              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1078+ D427              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1079+ D427              ;..............................................................................................................................
1080+ D427              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1081+ D427              LL48GetScale:
1082+ D427 3A 7C 7D             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1083+ D42A 5F                   ld          e,a
1084+ D42B CD F7 D3             call        CopyNodeToXX15
1085+ D42E              LL48GetVertices:
1086+ D42E              LL48GetVertSignAndVisDist:
1087+ D42E                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1087+ D42E BB          >                        cp      e
1087+ D42F DA 6C D4    >                        jp		c, NodeIsNotVisible
1088+ D432              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1089+ D432                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1089+ D432 23          >                    inc         hl                                  ; vertex byte#1
1089+ D433 7E          >                    ld          a,(hl)                              ;
1089+ D434 32 8B 7D    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1090+ D437 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1091+ D438 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1092+ D43A E5                   push        hl                                  ; we need to save HL                                                        ;;;
1093+ D43B                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1093+ D43B 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1093+ D43E ED 31       >                    add         hl,a
1093+ D440 7E          >                    ld          a,(hl)
1094+ D441 E1                   pop         hl                                  ;                                                                           ;;;
1095+ D442                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1095+ D442 A7          >                        and     a
1095+ D443 C2 72 D4    >                        jp	    nz,NodeIsVisible
1096+ D446              CheckFace2:                                                                                                                         ;;;
1097+ D446 7A                   ld          a,d                                                                                                             ;;;
1098+ D447 ED 23                swapnib                                                                                                                     ;;;
1099+ D449 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1100+ D44B                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1100+ D44B A7          >                        and     a
1100+ D44C C2 72 D4    >                        jp	    nz,NodeIsVisible
1101+ D44F              CheckFace3:                                                                                                                         ;;;
1102+ D44F                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1102+ D44F 23          >                    inc         hl                                  ; vertex byte#1
1102+ D450 7E          >                    ld          a,(hl)                              ;
1102+ D451 32 8B 7D    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1103+ D454 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1104+ D455 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1105+ D457 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1106+ D458                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1106+ D458 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1106+ D45B ED 31       >                    add         hl,a
1106+ D45D 7E          >                    ld          a,(hl)
1107+ D45E E1                   pop         hl                                  ;                                                                           ;;;
1108+ D45F                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1108+ D45F A7          >                        and     a
1108+ D460 C2 72 D4    >                        jp	    nz,NodeIsVisible
1109+ D463              CheckFace4:                                                                                                                         ;;;
1110+ D463 7A                   ld          a,d                                                                                                             ;;;
1111+ D464 ED 23                swapnib                                                                                                                     ;;;
1112+ D466 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1113+ D468                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1113+ D468 A7          >                        and     a
1113+ D469 C2 72 D4    >                        jp	    nz,NodeIsVisible
1114+ D46C              NodeIsNotVisible:                                                                                                                   ;;;
1115+ D46C 01 04 00             ld          bc,4
1116+ D46F FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1117+ D471                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1118+ D471 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1119+ D472              NodeIsVisible:
1120+ D472              LL49:
1121+ D472 CD 19 D3             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1122+ D475 C9                   ret
1123+ D476
1124+ D476                  DISPLAY "Tracing 6", $
1125+ D476
1126+ D476              ProjectNodeToEye:
1127+ D476 ED 4B AA C0      ld          bc,(UBnkZScaled)                    ; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1128+ D47A 79               ld          a,c                                 ;  so no need for a negative check
1129+ D47B 32 8A 7E         ld          (varQ),a                            ; VarQ = z
1130+ D47E 3A A6 C0         ld          a,(UBnkXScaled)                     ; XX15  \ rolled x lo which is signed
1131+ D481 CD DF 95         call        DIV16Amul256dCUNDOC                 ; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1132+ D484 3A A7 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1133+ D487                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1133+ D487 CB 7F       >                        bit 	7,a
1133+ D489 C2 94 D4    >                        jp      nz,EyeNegativeXPoint
1134+ D48C              EyePositiveXPoint:                                  ; x was positive result
1135+ D48C 2E 80            ld          l,ScreenCenterX                     ;
1136+ D48E 26 00            ld          h,0
1137+ D490 09               add         hl,bc                               ; hl = Screen Centre + X
1138+ D491 C3 9B D4         jp          EyeStoreXPoint
1139+ D494              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1140+ D494 2E 80            ld          l,ScreenCenterX
1141+ D496 26 00            ld          h,0
1142+ D498                  ClearCarryFlag
1142+ D498 B7          >                        or a
1143+ D499 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1144+ D49B              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1145+ D49B EB               ex          de,hl
1146+ D49C FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1147+ D49F FD 72 01         ld          (iy+1),d                            ; Update X Point
1148+ D4A2              EyeProcessYPoint:
1149+ D4A2 ED 4B AA C0      ld          bc,(UBnkZScaled)                    ; Now process Y co-ordinate
1150+ D4A6 79               ld          a,c
1151+ D4A7 32 8A 7E         ld          (varQ),a
1152+ D4AA 3A A8 C0         ld          a,(UBnkYScaled)                     ; XX15  \ rolled x lo
1153+ D4AD CD DF 95         call        DIV16Amul256dCUNDOC                 ; a = Y scaled * 256 / zscaled
1154+ D4B0 3A A9 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1155+ D4B3                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1155+ D4B3 CB 7F       >                        bit 	7,a
1155+ D4B5 C2 C0 D4    >                        jp      nz,EyeNegativeYPoint
1156+ D4B8              EyePositiveYPoint:                                  ; Y is positive so above the centre line
1157+ D4B8 2E 60            ld          l,ScreenCenterY
1158+ D4BA                  ClearCarryFlag
1158+ D4BA B7          >                        or a
1159+ D4BB ED 42            sbc         hl,bc                               ; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1160+ D4BD C3 C5 D4         jp          EyeStoreYPoint
1161+ D4C0              EyeNegativeYPoint:                                  ; this bit is only 8 bit aware TODO FIX
1162+ D4C0 2E 60            ld          l,ScreenCenterY
1163+ D4C2 26 00            ld          h,0
1164+ D4C4 09               add         hl,bc                               ; hl = ScreenCenterY + Y as negative is below the center of screen
1165+ D4C5              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1166+ D4C5 EB               ex          de,hl
1167+ D4C6 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1168+ D4C9 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1169+ D4CC C9               ret
1170+ D4CD
1171+ D4CD
1172+ D4CD
1173+ D4CD              ; Pitch and roll are 2 phases
1174+ D4CD              ; 1 - we apply our pitch and roll to the ship position
1175+ D4CD              ;       x -> x + alpha * (y - alpha * x)
1176+ D4CD              ;       y -> y - alpha * x - beta * z
1177+ D4CD              ;       z -> z + beta * (y - alpha * x - beta * z)
1178+ D4CD              ; which can be simplified as:
1179+ D4CD              ;       1. K2 = y - alpha * x
1180+ D4CD              ;       2. z = z + beta * K2
1181+ D4CD              ;       3. y = K2 - beta * z
1182+ D4CD              ;       4. x = x + alpha * y
1183+ D4CD              ; 2 - we apply our patch and roll to the ship orientation
1184+ D4CD              ;      Roll calculations:
1185+ D4CD              ;
1186+ D4CD              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1187+ D4CD              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1188+ D4CD              ;      Pitch calculations:
1189+ D4CD              ;
1190+ D4CD              ;        nosev_y = nosev_y - beta * nosev_z_hi
1191+ D4CD              ;        nosev_z = nosev_z + beta * nosev_y_hi
1192+ D4CD
1193+ D4CD
1194+ D4CD              ; ---------------------------------------------------------------------------------------------------------------------------------
1195+ D4CD                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D4CD
   2++D4CD              ; Full version
   3++D4CD              ; 1. K2 = y - alpha * x
   4++D4CD              ; 2. z = z + beta * K2
   5++D4CD              ; 3. y = K2 - beta * z
   6++D4CD              ; 4. x = x + alpha * y
   7++D4CD
   8++D4CD
   9++D4CD              APPequPosPlusAPP:       MACRO    Position, PositionSign
  10++D4CD ~                                    push    bc
  11++D4CD ~                                    ld      c,a                         ; save original value of a into c
  12++D4CD ~                                    ld      a,(PositionSign)
  13++D4CD ~                                    ld      b,a
  14++D4CD ~                                    ld      a,c
  15++D4CD ~                                    xor     b                           ; a = a xor x postition sign
  16++D4CD ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  17++D4CD ~            ; Signs are the same to we just add and take which ever sign
  18++D4CD ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  19++D4CD ~                                    ld      hl,(Position)
  20++D4CD ~                                    add     hl,de
  21++D4CD ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  22++D4CD ~                                    ld      a,c                         ; and a = original sign as they were both the same
  23++D4CD ~                                    pop     bc
  24++D4CD ~                                    ret
  25++D4CD ~            ; Signs are opposite so we subtract
  26++D4CD ~            .MV50:                  ld      de,(varPp1)
  27++D4CD ~                                    ld      hl,(Position)
  28++D4CD ~                                    or      a
  29++D4CD ~                                    sbc     hl,de
  30++D4CD ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  31++D4CD ~                                    ld      a,c                         ; get back the original sign
  32++D4CD ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  33++D4CD ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  34++D4CD ~                                    pop     bc
  35++D4CD ~                                    ret
  36++D4CD ~            .MV51:                  NegHL
  37++D4CD ~                                    ld      (varPp1),hl
  38++D4CD ~                                    ld      a,c                         ; the original sign will still be good
  39++D4CD ~                                    pop     bc
  40++D4CD ~                                    ret
  41++D4CD                                      ENDM
  42++D4CD
  43++D4CD
  44++D4CD              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  44++D4CD C5          >                        push    bc
  44++D4CE 4F          >                        ld      c,a                         ; save original value of a into c
  44++D4CF 3A 22 C0    >                        ld      a,(UBnKxsgn)
  44++D4D2 47          >                        ld      b,a
  44++D4D3 79          >                        ld      a,c
  44++D4D4 A8          >                        xor     b                           ; a = a xor x postition sign
  44++D4D5 FA E6 D4    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  44++D4D8             >; Signs are the same to we just add and take which ever sign
  44++D4D8 ED 5B 8C 7D >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  44++D4DC 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D4DF 19          >                        add     hl,de
  44++D4E0 22 8C 7D    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  44++D4E3 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  44++D4E4 C1          >                        pop     bc
  44++D4E5 C9          >                        ret
  44++D4E6             >; Signs are opposite so we subtract
  44++D4E6 ED 5B 8C 7D >.MV50:                  ld      de,(varPp1)
  44++D4EA 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D4ED B7          >                        or      a
  44++D4EE ED 52       >                        sbc     hl,de
  44++D4F0 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  44++D4F2 79          >                        ld      a,c                         ; get back the original sign
  44++D4F3 22 8C 7D    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  44++D4F6 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  44++D4F8 C1          >                        pop     bc
  44++D4F9 C9          >                        ret
  44++D4FA             >.MV51:                  NegHL
  44++D4FA AF          >                    xor a
  44++D4FB 95          >                    sub l
  44++D4FC 6F          >                    ld l,a
  44++D4FD 9F          >                    sbc a,a
  44++D4FE 94          >                    sub h
  44++D4FF 67          >                    ld h,a
  44++D500 22 8C 7D    >                        ld      (varPp1),hl
  44++D503 79          >                        ld      a,c                         ; the original sign will still be good
  44++D504 C1          >                        pop     bc
  44++D505 C9          >                        ret
  45++D506
  46++D506              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  46++D506 C5          >                        push    bc
  46++D507 4F          >                        ld      c,a                         ; save original value of a into c
  46++D508 3A 25 C0    >                        ld      a,(UBnKysgn)
  46++D50B 47          >                        ld      b,a
  46++D50C 79          >                        ld      a,c
  46++D50D A8          >                        xor     b                           ; a = a xor x postition sign
  46++D50E FA 1F D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  46++D511             >; Signs are the same to we just add and take which ever sign
  46++D511 ED 5B 8C 7D >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  46++D515 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D518 19          >                        add     hl,de
  46++D519 22 8C 7D    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  46++D51C 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  46++D51D C1          >                        pop     bc
  46++D51E C9          >                        ret
  46++D51F             >; Signs are opposite so we subtract
  46++D51F ED 5B 8C 7D >.MV50:                  ld      de,(varPp1)
  46++D523 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D526 B7          >                        or      a
  46++D527 ED 52       >                        sbc     hl,de
  46++D529 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  46++D52B 79          >                        ld      a,c                         ; get back the original sign
  46++D52C 22 8C 7D    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  46++D52F EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  46++D531 C1          >                        pop     bc
  46++D532 C9          >                        ret
  46++D533             >.MV51:                  NegHL
  46++D533 AF          >                    xor a
  46++D534 95          >                    sub l
  46++D535 6F          >                    ld l,a
  46++D536 9F          >                    sbc a,a
  46++D537 94          >                    sub h
  46++D538 67          >                    ld h,a
  46++D539 22 8C 7D    >                        ld      (varPp1),hl
  46++D53C 79          >                        ld      a,c                         ; the original sign will still be good
  46++D53D C1          >                        pop     bc
  46++D53E C9          >                        ret
  47++D53F
  48++D53F              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  48++D53F C5          >                        push    bc
  48++D540 4F          >                        ld      c,a                         ; save original value of a into c
  48++D541 3A 28 C0    >                        ld      a,(UBnKzsgn)
  48++D544 47          >                        ld      b,a
  48++D545 79          >                        ld      a,c
  48++D546 A8          >                        xor     b                           ; a = a xor x postition sign
  48++D547 FA 58 D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  48++D54A             >; Signs are the same to we just add and take which ever sign
  48++D54A ED 5B 8C 7D >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  48++D54E 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D551 19          >                        add     hl,de
  48++D552 22 8C 7D    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  48++D555 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  48++D556 C1          >                        pop     bc
  48++D557 C9          >                        ret
  48++D558             >; Signs are opposite so we subtract
  48++D558 ED 5B 8C 7D >.MV50:                  ld      de,(varPp1)
  48++D55C 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D55F B7          >                        or      a
  48++D560 ED 52       >                        sbc     hl,de
  48++D562 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  48++D564 79          >                        ld      a,c                         ; get back the original sign
  48++D565 22 8C 7D    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D568 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  48++D56A C1          >                        pop     bc
  48++D56B C9          >                        ret
  48++D56C             >.MV51:                  NegHL
  48++D56C AF          >                    xor a
  48++D56D 95          >                    sub l
  48++D56E 6F          >                    ld l,a
  48++D56F 9F          >                    sbc a,a
  48++D570 94          >                    sub h
  48++D571 67          >                    ld h,a
  48++D572 22 8C 7D    >                        ld      (varPp1),hl
  48++D575 79          >                        ld      a,c                         ; the original sign will still be good
  48++D576 C1          >                        pop     bc
  48++D577 C9          >                        ret
  49++D578
  50++D578              ; rollWork holds Alpha intermidate results
  51++D578 00 00 00     rollWork      DS 3
  52++D57B              rollWorkp1    equ rollWork
  53++D57B              rollWorkp2    equ rollWork+1
  54++D57B              rollWorkp3    equ rollWork+2
  55++D57B
  56++D57B              ;----------------------------------------------------------------------------------------------------------------------------------
  57++D57B              ; based on MVEIT part 4 of 9
  58++D57B 3A A4 7D     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  59++D57E 21 98 7D                             ld      hl,BET1                     ; and pitch
  60++D581 B6                                   or      (hl)
  61++D582 CA 3E D7                             jp      z,.NoRotation               ; if both zero then don't compute
  62++D585                                      ;break
  63++D585              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  64++D585 5F                                   ld      e,a                         ; e = roll magnitude
  65++D586 2A 20 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  66++D589 CD 62 91                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  67++D58C 32 8D 7D                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  68++D58F 22 8B 7D                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  69++D592              ; A = Flip sign
  70++D592 3A A5 7D                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
  71++D595 21 22 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  72++D598 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  73++D599              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  74++D599 CD 06 D5                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  75++D59C              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  76++D59C 32 7A D5                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  77++D59F 22 78 D5                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  78++D5A2              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  79++D5A2 3A 98 7D                             ld      a,(BET1)                    ; a = magnitude of pitch
  80++D5A5 5F                                   ld      e,a
  81++D5A6 CD 62 91                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  82++D5A9 32 8D 7D                             ld      (varPp2),a                   ; save highest byte in P2
  83++D5AC 22 8B 7D                             ld      (varP),hl
  84++D5AF              ; Fetch sign of previosu cal and xor with BETA inverted
  85++D5AF 3A 7A D5                             ld      a,(rollWorkp3)
  86++D5B2 5F                                   ld      e,a
  87++D5B3 3A 99 7D                             ld      a,(BET2)
  88++D5B6 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
  89++D5B7              ; Z = P[210] =Z + APP
  90++D5B7 CD 3F D5                             call    APPequZPosPlusAPP           ; MVT6
  91++D5BA 32 28 C0                             ld      (UBnKzsgn),a                ; save result back into z
  92++D5BD 22 26 C0                             ld      (UBnKzlo),hl
  93++D5C0              ; A[P1]P[0] = z * Beta
  94++D5C0 3A 98 7D                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
  95++D5C3 5F                                   ld      e,a
  96++D5C4 CD 62 91                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
  97++D5C7 32 8D 7D                             ld      (varPp2),a                  ; P2 = high byte of result
  98++D5CA 22 8B 7D                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
  99++D5CD              ; A xor BET2,Zsign
 100++D5CD 3A 7A D5                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 101++D5D0 32 25 C0                             ld      (UBnKysgn),a                ; save result back into y
 102++D5D3 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 103++D5D4 3A 99 7D                             ld      a,(BET2)                    ;
 104++D5D7 AB                                   xor     e                           ;
 105++D5D8 5F                                   ld      e,a                         ; now xor it with z sign too
 106++D5D9 3A 28 C0                             ld      a,(UBnKzsgn)                ;
 107++D5DC AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 108++D5DD F2 EC D5                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 109++D5E0 2A 8C 7D                             ld      hl,(varPp1)
 110++D5E3 ED 5B 78 D5                          ld      de,(rollWorkp1)
 111++D5E7 B7                                   or      a
 112++D5E8 19                                   add     hl,de
 113++D5E9 C3 06 D6                             jp      .MV44
 114++D5EC 2A 78 D5     .MV43:                  ld      hl,(rollWorkp1)
 115++D5EF ED 5B 8C 7D                          ld      de,(varPp1)
 116++D5F3 B7                                   or      a
 117++D5F4 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 118++D5F6 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 119++D5F8                                      NegHL
 119++D5F8 AF          >                    xor a
 119++D5F9 95          >                    sub l
 119++D5FA 6F          >                    ld l,a
 119++D5FB 9F          >                    sbc a,a
 119++D5FC 94          >                    sub h
 119++D5FD 67          >                    ld h,a
 120++D5FE 3A 25 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 121++D601 EE 80                                xor     SignOnly8Bit
 122++D603 32 25 C0                             ld      (UBnKysgn),a
 123++D606              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 124++D606 22 23 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 125++D609 3A A4 7D                             ld      a,(ALP1)                    ; get roll magnitude
 126++D60C 5F                                   ld      e,a
 127++D60D 2A 23 C0                             ld      hl,(UBnKylo)
 128++D610 CD 62 91                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 129++D613 32 8D 7D                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 130++D616 22 8B 7D                             ld      (varP),hl
 131++D619 3A A6 7D                             ld      a,(ALP2FLIP)
 132++D61C 5F                                   ld      e,a
 133++D61D 3A 25 C0                             ld      a,(UBnKysgn)
 134++D620 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 135++D621 CD CD D4                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 136++D624 32 22 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 137++D627 22 20 C0                             ld      (UBnKxlo),hl
 138++D62A                                      ;break
 139++D62A                                      ; if its not a sun then apply to local orientation
 140++D62A                                      ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY   ; ApplyMyRollToNosev:
 140++D62A             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 140++D62A 3A A3 7D    >                        ld       a,(ALPHA)
 140++D62D 32 8A 7E    >                        ld       (varQ),a
 140++D630             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 140++D630 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 140++D633 22 8B 7E    >                        ld       (varR),hl
 140++D636             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
 140++D636 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX)
 140++D639 32 8B 7D    >                        ld       (varP),a
 140++D63C 3A 36 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
 140++D63F EE 80       >                        xor $80                             ;
 140++D641 CD E7 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 140++D644 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 140++D648             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
 140++D648 2A 35 C0    >                        ld       hl,(UBnkrotmatNosevX)
 140++D64B 22 8B 7E    >                        ld       (varR),hl
 140++D64E 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 140++D651 CD E7 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 140++D654 ED 53 35 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 141++D658                                      ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY   ; ApplyMyRollToSidev:
 141++D658             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 141++D658 3A A3 7D    >                        ld       a,(ALPHA)
 141++D65B 32 8A 7E    >                        ld       (varQ),a
 141++D65E             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 141++D65E 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 141++D661 22 8B 7E    >                        ld       (varR),hl
 141++D664             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
 141++D664 3A 29 C0    >                        ld       a,(UBnkrotmatSidevX)
 141++D667 32 8B 7D    >                        ld       (varP),a
 141++D66A 3A 2A C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
 141++D66D EE 80       >                        xor $80                             ;
 141++D66F CD E7 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 141++D672 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 141++D676             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
 141++D676 2A 29 C0    >                        ld       hl,(UBnkrotmatSidevX)
 141++D679 22 8B 7E    >                        ld       (varR),hl
 141++D67C 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 141++D67F CD E7 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 141++D682 ED 53 29 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 142++D686                                      ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY   ; ApplyMyRollToRoofv:
 142++D686             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 142++D686 3A A3 7D    >                        ld       a,(ALPHA)
 142++D689 32 8A 7E    >                        ld       (varQ),a
 142++D68C             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 142++D68C 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 142++D68F 22 8B 7E    >                        ld       (varR),hl
 142++D692             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
 142++D692 3A 2F C0    >                        ld       a,(UBnkrotmatRoofvX)
 142++D695 32 8B 7D    >                        ld       (varP),a
 142++D698 3A 30 C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
 142++D69B EE 80       >                        xor $80                             ;
 142++D69D CD E7 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 142++D6A0 ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 142++D6A4             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
 142++D6A4 2A 2F C0    >                        ld       hl,(UBnkrotmatRoofvX)
 142++D6A7 22 8B 7E    >                        ld       (varR),hl
 142++D6AA 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 142++D6AD CD E7 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 142++D6B0 ED 53 2F C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 143++D6B4                                      ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY    ; ApplyMyPitchToNosev:
 143++D6B4             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 143++D6B4 3A 96 7D    >                        ld       a,(BETA)
 143++D6B7 32 8A 7E    >                        ld       (varQ),a
 143++D6BA             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 143++D6BA 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 143++D6BD 22 8B 7E    >                        ld       (varR),hl
 143++D6C0             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
 143++D6C0 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ)
 143++D6C3 32 8B 7D    >                        ld       (varP),a
 143++D6C6 3A 3A C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
 143++D6C9 EE 80       >                        xor $80                             ;
 143++D6CB CD E7 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 143++D6CE ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 143++D6D2             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
 143++D6D2 2A 39 C0    >                        ld       hl,(UBnkrotmatNosevZ)
 143++D6D5 22 8B 7E    >                        ld       (varR),hl
 143++D6D8 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 143++D6DB CD E7 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 143++D6DE ED 53 39 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 144++D6E2                                      ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY    ; ApplyMyPitchToSidev:
 144++D6E2             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 144++D6E2 3A 96 7D    >                        ld       a,(BETA)
 144++D6E5 32 8A 7E    >                        ld       (varQ),a
 144++D6E8             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 144++D6E8 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 144++D6EB 22 8B 7E    >                        ld       (varR),hl
 144++D6EE             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
 144++D6EE 3A 2D C0    >                        ld       a,(UBnkrotmatSidevZ)
 144++D6F1 32 8B 7D    >                        ld       (varP),a
 144++D6F4 3A 2E C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
 144++D6F7 EE 80       >                        xor $80                             ;
 144++D6F9 CD E7 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 144++D6FC ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 144++D700             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
 144++D700 2A 2D C0    >                        ld       hl,(UBnkrotmatSidevZ)
 144++D703 22 8B 7E    >                        ld       (varR),hl
 144++D706 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 144++D709 CD E7 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 144++D70C ED 53 2D C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 145++D710                                      ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY    ; ApplyMyPitchToRoofv:
 145++D710             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 145++D710 3A 96 7D    >                        ld       a,(BETA)
 145++D713 32 8A 7E    >                        ld       (varQ),a
 145++D716             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 145++D716 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 145++D719 22 8B 7E    >                        ld       (varR),hl
 145++D71C             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
 145++D71C 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvZ)
 145++D71F 32 8B 7D    >                        ld       (varP),a
 145++D722 3A 34 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
 145++D725 EE 80       >                        xor $80                             ;
 145++D727 CD E7 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 145++D72A ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 145++D72E             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
 145++D72E 2A 33 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
 145++D731 22 8B 7E    >                        ld       (varR),hl
 145++D734 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 145++D737 CD E7 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 145++D73A ED 53 33 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 146++D73E 3A 84 7E     .NoRotation:            ld      a,(DELTA)                   ; get speed
 147++D741 16 00                                ld      d,0
 148++D743 5F                                   ld      e,a                         ; de = speed in low byte
 149++D744 2A 26 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 150++D747 3A 28 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 151++D74A 47                                   ld      b,a                         ;
 152++D74B 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 153++D74D CD FF 8E                             call    ADDHLDESignBC               ; update speed
 154++D750 22 26 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 155++D753 32 28 C0                             ld      (UBnKzsgn),a                ;
 156++D756 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1196+ D757                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D757
   2++D757              ; A = value for rotation
   3++D757              ; HL = address of value for rotation
   4++D757              ; TODO logic for permanent spin, I thik this it -127??
   5++D757              SplitAndDampenZ:        MACRO
   6++D757 ~                                    ld      b,a
   7++D757 ~                                    and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
   8++D757 ~                                    jp      z,.ProcessRoll
   9++D757 ~                                    ld      a,b                     ; b = rotate counter S7
  10++D757 ~                                    and     SignOnly8Bit            ; a = sign rat2 = c = sign
  11++D757 ~                                    ld      c,a                     ; .
  12++D757 ~                                    ld      (univRAT2),a            ; .
  13++D757 ~                                    ld      a,b                     ; a = abs b
  14++D757 ~                                    and     SignMask8Bit            ; .
  15++D757 ~                                    dec     a                       ; dampen
  16++D757 ~                                    ld      (univRAT2Val),a
  17++D757 ~                                    or      c                       ; make S7 again after dampening
  18++D757 ~                                    ld      (UBnKRotZCounter),a
  19++D757                                      ENDM
  20++D757
  21++D757              SplitAndDampenX:        MACRO
  22++D757 ~                                    ld      b,a
  23++D757 ~                                    and     SignMask8Bit            ; exit early is ABS = 0
  24++D757 ~                                    and     a                       ; .
  25++D757 ~                                    ret     z                       ; .
  26++D757 ~                                    ld      a,b                     ; a = rotate counter S7
  27++D757 ~                                    and     SignOnly8Bit            ; rat2 = c = sign
  28++D757 ~                                    ld      c,a                     ; .
  29++D757 ~                                    ld      (univRAT2),a            ; .
  30++D757 ~                                    ld      a,b                     ; a = abs b
  31++D757 ~                                    and     SignMask8Bit            ; .
  32++D757 ~                                    dec     a                       ; dampen
  33++D757 ~                                    ld      (univRAT2Val),a
  34++D757 ~                                    or      c                       ; make S7 again after dampening
  35++D757 ~                                    ld      (UBnKRotXCounter),a
  36++D757                                      ENDM
  37++D757
  38++D757
  39++D757              ;----------------------------------------------------------------------------------------------------------------------------------
  40++D757              ; based on MVEIT part 4 of 9
  41++D757              ; x and z counters are proper 2's c values
  42++D757 3A 49 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)
  43++D75A FE FF                                cp      $FF
  44++D75C 28 18                                jr      z,.PitchSAxes
  45++D75E                                      SplitAndDampenZ
  45++D75E 47          >                        ld      b,a
  45++D75F E6 7F       >                        and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
  45++D761 CA A3 D7    >                        jp      z,.ProcessRoll
  45++D764 78          >                        ld      a,b                     ; b = rotate counter S7
  45++D765 E6 80       >                        and     SignOnly8Bit            ; a = sign rat2 = c = sign
  45++D767 4F          >                        ld      c,a                     ; .
  45++D768 32 4F C0    >                        ld      (univRAT2),a            ; .
  45++D76B 78          >                        ld      a,b                     ; a = abs b
  45++D76C E6 7F       >                        and     SignMask8Bit            ; .
  45++D76E 3D          >                        dec     a                       ; dampen
  45++D76F 32 50 C0    >                        ld      (univRAT2Val),a
  45++D772 B1          >                        or      c                       ; make S7 again after dampening
  45++D773 32 49 C0    >                        ld      (UBnKRotZCounter),a
  46++D776                                      ;ld      a,(UBnKRotZCounter)
  47++D776 21 2F C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  48++D779 22 70 7D                             ld	    (varAxis1),hl
  49++D77C 21 35 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  50++D77F 22 72 7D                             ld	    (varAxis2),hl
  51++D782 CD EF D7                             call    MVS5RotateAxis
  52++D785 21 31 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  53++D788 22 70 7D                             ld	    (varAxis1),hl
  54++D78B 21 37 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  55++D78E 22 72 7D                             ld	    (varAxis2),hl
  56++D791 CD EF D7                             call    MVS5RotateAxis
  57++D794 21 33 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  58++D797 22 70 7D                             ld	    (varAxis1),hl
  59++D79A 21 39 C0                             ld	    hl,UBnkrotmatNosevZ
  60++D79D 22 72 7D                             ld	    (varAxis2),hl
  61++D7A0 CD EF D7                             call    MVS5RotateAxis
  62++D7A3 3A 48 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  63++D7A6 FE FF                                cp      $FF
  64++D7A8 28 17                                jr      z,.RollSAxis
  65++D7AA                                      SplitAndDampenX
  65++D7AA 47          >                        ld      b,a
  65++D7AB E6 7F       >                        and     SignMask8Bit            ; exit early is ABS = 0
  65++D7AD A7          >                        and     a                       ; .
  65++D7AE C8          >                        ret     z                       ; .
  65++D7AF 78          >                        ld      a,b                     ; a = rotate counter S7
  65++D7B0 E6 80       >                        and     SignOnly8Bit            ; rat2 = c = sign
  65++D7B2 4F          >                        ld      c,a                     ; .
  65++D7B3 32 4F C0    >                        ld      (univRAT2),a            ; .
  65++D7B6 78          >                        ld      a,b                     ; a = abs b
  65++D7B7 E6 7F       >                        and     SignMask8Bit            ; .
  65++D7B9 3D          >                        dec     a                       ; dampen
  65++D7BA 32 50 C0    >                        ld      (univRAT2Val),a
  65++D7BD B1          >                        or      c                       ; make S7 again after dampening
  65++D7BE 32 48 C0    >                        ld      (UBnKRotXCounter),a
  66++D7C1 21 2F C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  67++D7C4 22 70 7D                             ld	    (varAxis1),hl
  68++D7C7 21 29 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  69++D7CA 22 72 7D                             ld	    (varAxis2),hl
  70++D7CD CD EF D7                             call    MVS5RotateAxis
  71++D7D0 21 31 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  72++D7D3 22 70 7D                             ld	    (varAxis1),hl
  73++D7D6 21 2B C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  74++D7D9 22 72 7D                             ld	    (varAxis2),hl
  75++D7DC CD EF D7                             call    MVS5RotateAxis
  76++D7DF 21 33 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  77++D7E2 22 70 7D                             ld	    (varAxis1),hl
  78++D7E5 21 2D C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  79++D7E8 22 72 7D                             ld	    (varAxis2),hl
  80++D7EB CD EF D7                             call    MVS5RotateAxis
  81++D7EE C9                                   ret
  82++D7EF
  83++D7EF
  84++D7EF
  85++D7EF              ; Roate around axis
  86++D7EF              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  87++D7EF              ; so the axis x1 points to roofv  x , y or z
  88++D7EF              ;             x2           nosev or sidev  x, y or z
  89++D7EF              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  90++D7EF              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  91++D7EF              ; var RAT2 gives direction
  92++D7EF              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  93++D7EF              ;-Set up S R -----------------------------------------
  94++D7EF              ; optimised we don't deal with sign here just the value of roof axis / 512
  95++D7EF 2A 70 7D     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  96++D7F2 5E                                   ld      e,(hl)
  97++D7F3 23                                   inc     hl
  98++D7F4 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  99++D7F5 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 100++D7F6 7C                                   ld      a,h
 101++D7F7 E6 80                                and     SignOnly8Bit
 102++D7F9 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 103++D7FB 7C                                   ld      a,h
 104++D7FC E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 105++D7FE CB 3F                                srl     a               ; a = Axis1/2
 106++D800 5F                                   ld      e,a             ;
 107++D801 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 108++D803 57                                   ld      d,a             ; de = signed Axis1 / 512
 109++D804 B7                                   or      a               ; clear carry
 110++D805 CD BD 8F                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 111++D808              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 112++D808 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 113++D809 7D                                   ld      a,l
 114++D80A 32 8B 7E                             ld      (varR),a
 115++D80D 7C                                   ld      a,h
 116++D80E 32 8C 7E                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 117++D811              ;-calculate roofv latter half of calc
 118++D811 2A 72 7D                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 119++D814 5E                                   ld      e,(hl)
 120++D815 23                                   inc     hl
 121++D816 56                                   ld      d,(hl)          ; de = value of roof axis
 122++D817 7A                                   ld      a,d
 123++D818 E6 80                                and     SignOnly8Bit
 124++D81A FD 67                                ld      iyh,a           ; save sign
 125++D81C 7A                                   ld      a,d
 126++D81D E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 127++D81F 57                                   ld      d,a             ; de = abs (nosev)
 128++D820                                      ShiftDERight1
 128++D820 CB 3A       >			   srl d
 128++D822 CB 1B       >			   rr  e
 129++D824                                      ShiftDERight1
 129++D824 CB 3A       >			   srl d
 129++D826 CB 1B       >			   rr  e
 130++D828                                      ShiftDERight1
 130++D828 CB 3A       >			   srl d
 130++D82A CB 1B       >			   rr  e
 131++D82C                                      ShiftDERight1           ; de = nosev /16 unsigned
 131++D82C CB 3A       >			   srl d
 131++D82E CB 1B       >			   rr  e
 132++D830 3A 4F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 133++D833 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 134++D835 E6 80                                and     SignOnly8Bit
 135++D837 B2                                   or      d
 136++D838 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 137++D839              ;;; ld      a,e
 138++D839              ;;;     or      iyh
 139++D839              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 140++D839              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 141++D839 E1                                   pop     hl              ; get back RS POP ID 1
 142++D83A                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 143++D83A              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 144++D83A CD 22 8F                             call    ADDHLDESignedV4 ; do add using hl and de
 145++D83D E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 146++D83E              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 147++D83E              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 148++D83E 2A 72 7D                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 149++D841 5E                                   ld      e,(hl)
 150++D842 23                                   inc     hl
 151++D843 56                                   ld      d,(hl)
 152++D844 EB                                   ex      de,hl
 153++D845 7C                                   ld      a,h
 154++D846 E6 80                                and     $80
 155++D848 FD 67                                ld      iyh,a
 156++D84A 7C                                   ld      a,h
 157++D84B E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 158++D84D CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 159++D84F 5F                                   ld      e,a
 160++D850 FD 7C                                ld      a,iyh
 161++D852 57                                   ld      d,a
 162++D853 B7                                   or      a               ; clear carry
 163++D854 CD BD 8F                             call    subHLDES15
 164++D857              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 165++D857 E5                                   push    hl              ; save hl on stack  PUSH ID 3
 166++D858 7D                                   ld      a,l
 167++D859 32 8B 7D                             ld      (varP),a        ; p = low of resuilt
 168++D85C 7C                                   ld      a,h
 169++D85D E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 170++D85F 32 A6 7E                             ld      (varT),a        ; t = high of result
 171++D862              ;-- Set up TQ
 172++D862 2A 70 7D                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 173++D865              ;   ld      hl,(varAxis2)   ; work on nosev again
 174++D865 5E                                   ld      e,(hl)
 175++D866 23                                   inc     hl
 176++D867 56                                   ld      d,(hl)
 177++D868 7A                                   ld      a,d
 178++D869 E6 80                                and     $80
 179++D86B FD 67                                ld      iyh,a           ; save sign
 180++D86D 7A                                   ld      a,d
 181++D86E E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 182++D870 57                                   ld      d,a             ; de = abs (nosev)
 183++D871                                      ShiftDERight1
 183++D871 CB 3A       >			   srl d
 183++D873 CB 1B       >			   rr  e
 184++D875                                      ShiftDERight1
 184++D875 CB 3A       >			   srl d
 184++D877 CB 1B       >			   rr  e
 185++D879                                      ShiftDERight1
 185++D879 CB 3A       >			   srl d
 185++D87B CB 1B       >			   rr  e
 186++D87D                                      ShiftDERight1           ; de = nosev /16 unsigned
 186++D87D CB 3A       >			   srl d
 186++D87F CB 1B       >			   rr  e
 187++D881 3A 4F C0                             ld      a,(univRAT2)
 188++D884 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 189++D886 E6 80                                and     $80
 190++D888 B2                                   or      d
 191++D889 57                                   ld      d,a
 192++D88A              ;;; ld      a,e
 193++D88A              ;;;     or      iyh
 194++D88A              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 195++D88A E1                                   pop     hl              ; get back RS   POP ID 3
 196++D88B              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 197++D88B CD BD 8F                             call    subHLDES15 ; do add using hl and de
 198++D88E              ;-- Update nosev ---------------------------------------
 199++D88E EB                                   ex      de,hl           ; save hl to de
 200++D88F 2A 72 7D                             ld      hl,(varAxis2)
 201++D892 73                                   ld      (hl),e
 202++D893 23                                   inc     hl
 203++D894 72                                   ld      (hl),d          ; copy result into nosev
 204++D895              ;-- Update roofv ---------------------------------------
 205++D895 D1                                   pop     de              ; get calc saved on stack POP ID 2
 206++D896 2A 70 7D                             ld      hl,(varAxis1)
 207++D899 73                                   ld      (hl),e
 208++D89A 23                                   inc     hl
 209++D89B 72                                   ld      (hl),d          ; copy result into nosev
 210++D89C C9                                   ret
 211++D89D
 212++D89D
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1197+ D89D                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++D89D
   2++D89D
   3++D89D              ;AddSpeedToVert:         MACRO   vertex
   4++D89D              ;                        ld      hl,(vertex)
   5++D89D              ;                        ld      a,(vertex+2)
   6++D89D              ;                        ld      b,a
   7++D89D              ;                        call    AHLEquBHLaddCDE
   8++D89D              ;                        ld      (vertex),hl
   9++D89D              ;                        ld      (vertex+2),a
  10++D89D              ;                        ENDM
  11++D89D
  12++D89D
  13++D89D              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++D89D 3A 46 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++D8A0 FE 00                                cp      0
  16++D8A2 C8                                   ret     z
  17++D8A3 CB 27                                sla     a
  18++D8A5 CB 27                                sla     a
  19++D8A7 FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++D8A9              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++D8A9 5F          >                        ld      e,a
  20++D8AA 2A 35 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++D8AD 7C          >                        ld      a,h
  20++D8AE             >                        ClearSignBitA
  20++D8AE E6 7F       >                        and     SignMask8Bit
  20++D8B0 57          >                        ld      d,a
  20++D8B1 ED 30       >                        mul     de
  20++D8B3 7C          >                        ld      a,h
  20++D8B4             >                        SignBitOnlyA
  20++D8B4 E6 80       >                        and     SignOnly8Bit
  20++D8B6 47          >                        ld      b,a;ld      c,a
  20++D8B7 62          >                        ld      h,d;ld      e,d
  20++D8B8 0E 00       >                        ld      c,0;ld      d,0
  21++D8BA              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++D8BA ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++D8BE 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++D8C1 6F          >                        ld      l,a
  21++D8C2 CD 5C 8F    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++D8C5 7D          >                        ld      a,l
  21++D8C6 32 20 C0    >                        ld      (UBnKxlo),a
  21++D8C9 ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++D8CD              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++D8CD FD 5D       >                        ld      e,iyl
  22++D8CF 2A 37 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++D8D2 7C          >                        ld      a,h
  22++D8D3             >                        ClearSignBitA
  22++D8D3 E6 7F       >                        and     SignMask8Bit
  22++D8D5 57          >                        ld      d,a
  22++D8D6 ED 30       >                        mul     de
  22++D8D8 7C          >                        ld      a,h
  22++D8D9             >                        SignBitOnlyA
  22++D8D9 E6 80       >                        and     SignOnly8Bit
  22++D8DB 47          >                        ld      b,a;ld      c,a
  22++D8DC 62          >                        ld      h,d;ld      e,d
  22++D8DD 0E 00       >                        ld      c,0;ld      d,0
  23++D8DF              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++D8DF ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++D8E3 3A 23 C0    >                        ld      a,(UBnKylo)
  23++D8E6 6F          >                        ld      l,a
  23++D8E7 CD 5C 8F    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++D8EA 7D          >                        ld      a,l
  23++D8EB 32 23 C0    >                        ld      (UBnKylo),a
  23++D8EE ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++D8F2              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++D8F2 FD 5D       >                        ld      e,iyl
  24++D8F4 2A 39 C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++D8F7 7C          >                        ld      a,h
  24++D8F8             >                        ClearSignBitA
  24++D8F8 E6 7F       >                        and     SignMask8Bit
  24++D8FA 57          >                        ld      d,a
  24++D8FB ED 30       >                        mul     de
  24++D8FD 7C          >                        ld      a,h
  24++D8FE             >                        SignBitOnlyA
  24++D8FE E6 80       >                        and     SignOnly8Bit
  24++D900 47          >                        ld      b,a;ld      c,a
  24++D901 62          >                        ld      h,d;ld      e,d
  24++D902 0E 00       >                        ld      c,0;ld      d,0
  25++D904              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++D904 ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++D908 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++D90B 6F          >                        ld      l,a
  25++D90C CD 5C 8F    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++D90F 7D          >                        ld      a,l
  25++D910 32 26 C0    >                        ld      (UBnKzlo),a
  25++D913 ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++D917 C9                                   ret
  27++D918
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1198+ D918                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++D918
   2++D918
   3++D918              ; ---------------------------------------------------------------------------------------------------------------------------------
   4++D918 00           DrawLinesCounter		db	0
   5++D919              ; Initial tests look OK
   6++D919              LL155:;
   7++D919              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   8++D919                    ;break                                                                             ; ObjectInFront:
   9++D919 3E 65        DrawLines:              ld	a,$65 ; DEBUG
  10++D91B FD 6F                                ld    iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  11++D91D 3A EA C3                             ld	a,(UbnkLineArrayLen)			; get number of lines
  12++D920                                      ReturnIfAIsZero   						; No lines then bail out.
  12++D920 A7          >                        and     a
  12++D921 C8          >                        ret     z
  13++D922 FD 67                                ld	iyh,a			                ; number of lines still to draw
  14++D924 21 30 C2                             ld	hl,UbnkLineArray
  15++D927 4E           .DrawLinesLoop:         ld    c,(hl)                          ; (XX19),Y c = varX1
  16++D928 23                                   inc   hl
  17++D929 46                                   ld    b,(hl)                          ; bc = point1 Y,X
  18++D92A 23                                   inc   hl
  19++D92B 5E                                   ld    e,(hl)                          ; c = varX1
  20++D92C 23                                   inc   hl
  21++D92D 56                                   ld    d,(hl)                          ; de = point2 Y,X
  22++D92E 23                                   inc   hl
  23++D92F E5 FD E5                             push  hl,,iy
  24++D932 60                                   ld    h,b
  25++D933 69                                   ld    l,c
  26++D934                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  27++D934 FD 7D                                ld	a,iyl							; get colour back before calling line draw
  28++D936                                      MMUSelectLayer2
  28++D936 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  29++D93A CD 12 FF                             call  LineHLtoDE
  30++D93D FD E1 E1                             pop   hl,,iy
  31++D940 FD 25                                dec   iyh
  32++D942 20 E3                                jr	nz, .DrawLinesLoop
  33++D944 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  34++D945
  35++D945
  36++D945 3E 65        DrawLinesLateClipping:  ld	a,$65 ; DEBUG
  37++D947 FD 6F                                ld    iyl,a					      ; set ixl to colour (assuming we come in here with a = colour to draw)
  38++D949 3A EA C3                             ld	a,(UbnkLineArrayLen)			; get number of lines
  39++D94C                                      ReturnIfAIsZero   				; No lines then bail out.
  39++D94C A7          >                        and     a
  39++D94D C8          >                        ret     z
  40++D94E FD 67                                ld	iyh,a			                  ; number of lines still to draw
  41++D950 21 30 C2                             ld	hl,UbnkLineArray
  42++D953                                      MMUSelectLayer2
  42++D953 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43++D957 3E BF                                ld    a,$BF
  44++D959 32 B5 E2                             ld    (line_gfx_colour),a
  45++D95C 11 D8 F5     LateDrawLinesLoop:      ld    de,x1
  46++D95F                                      FourLDIInstrunctions
  46++D95F ED A0       >                        ldi
  46++D961 ED A0       >                        ldi
  46++D963 ED A0       >                        ldi
  46++D965 ED A0       >                        ldi
  47++D967                                      FourLDIInstrunctions
  47++D967 ED A0       >                        ldi
  47++D969 ED A0       >                        ldi
  47++D96B ED A0       >                        ldi
  47++D96D ED A0       >                        ldi
  48++D96F E5 FD E5                             push  hl,,iy
  49++D972                                      //call  l2_draw_clipped_line
  50++D972                                      //call  l2_draw_elite_line
  51++D972 CD 6B FC                             call    l2_draw_6502_line
  52++D975 DA 9B D9                             jp      c,LateNoLineToDraw
  53++D978
  54++D978 E5 C5 D5 FD  PreLate:                push    hl,,bc,,de,,iy
  54++D97C E5
  55++D97D 3A D8 F5                             ld      a,(x1)
  56++D980 4F                                   ld      c,a
  57++D981 3A DA F5                             ld      a,(y1)
  58++D984 47                                   ld      b,a
  59++D985 3A DC F5                             ld      a,(x2)
  60++D988 5F                                   ld      e,a
  61++D989 3A DE F5                             ld      a,(y2)
  62++D98C 57                                   ld      d,a
  63++D98D                                      ; bc = y0,x0 de=y1,x1,a=color)
  64++D98D 3E D5                                ld	    a, $D5 ; colour
  65++D98F                                      MMUSelectLayer2
  65++D98F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  66++D993 CD AB FC     LateLine:               call    l2_draw_elite_line; l2_draw_diagonal
  67++D996 FD E1 D1 C1                          pop     hl,,bc,,de,,iy
  67++D99A E1
  68++D99B
  69++D99B
  70++D99B FD E1 E1     LateNoLineToDraw:       pop   hl,,iy
  71++D99E FD 25                                dec   iyh
  72++D9A0 20 BA                                jr	nz, LateDrawLinesLoop
  73++D9A2 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
# file closed: ././ModelRender/DrawLines.asm
1199+ D9A3              ; ---------------------------------------------------------------------------------------------------------------------------------
1200+ D9A3
1201+ D9A3              ; DIot seem to lawyas have Y = 0???
1202+ D9A3              ProcessDot:            ; break
1203+ D9A3 CD C8 CB                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1204+ D9A6 CD 24 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1205+ D9A9 CD 80 CE                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1206+ D9AC CD 4D CD                             call    InverseXX16                      ;#11; Invert rotation matrix
1207+ D9AF 21 00 00                             ld      hl,0
1208+ D9B2 22 A6 C0                             ld      (UBnkXScaled),hl
1209+ D9B5 22 A8 C0                             ld      (UBnkYScaled),hl
1210+ D9B8 22 AA C0                             ld      (UBnkZScaled),hl
1211+ D9BB AF                                   xor     a
1212+ D9BC CD 86 79                             call    XX12EquNodeDotOrientation
1213+ D9BF CD F1 CB                             call    TransposeXX12ByShipToXX15
1214+ D9C2 CD 6E CC                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1215+ D9C5 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1216+ D9C9 CD 76 D4                             call    ProjectNodeToEye
1217+ D9CC C9                                   ret
1218+ D9CD
1219+ D9CD              ; .....................................................
1220+ D9CD              ; Plot Node points as part of debugging
1221+ D9CD 3A FF C3     PlotAllNodes:           ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1222+ D9D0 4F           .GetActualVertexCount:  ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1223+ D9D1 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1224+ D9D2 16 06                                ld      d,6
1225+ D9D4 CD 0F 96                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1226+ D9D7 41                                   ld      b,c                              ; c = number of vertices
1227+ D9D8 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1228+ D9DC FD 5E 00     .PlotLoop:              ld      e,(iy)
1229+ D9DF FD 56 01                             ld      d,(iy+1)
1230+ D9E2 FD 6E 02                             ld      l,(iy+2)
1231+ D9E5 FD 66 03                             ld      h,(iy+3)
1232+ D9E8 C5 FD E5                             push    bc,,iy
1233+ D9EB CD FC D9                             call    PlotAtDEHL
1234+ D9EE FD E1 C1                             pop     bc,,iy
1235+ D9F1 FD 23                                inc     iy
1236+ D9F3 FD 23                                inc     iy
1237+ D9F5 FD 23                                inc     iy
1238+ D9F7 FD 23                                inc     iy
1239+ D9F9 10 E1                                djnz    .PlotLoop
1240+ D9FB C9                                   ret
1241+ D9FC
1242+ D9FC 7A           PlotAtDEHL:             ld      a,d
1243+ D9FD A7                                   and     a
1244+ D9FE C0                                   ret     nz
1245+ D9FF 7C                                   ld      a,h
1246+ DA00 A7                                   and     a
1247+ DA01 C0                                   ret     nz
1248+ DA02 7D                                   ld      a,l
1249+ DA03 E6 80                                and     $80
1250+ DA05 C0                                   ret     nz
1251+ DA06                                      MMUSelectLayer2
1251+ DA06 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1252+ DA0A 45                                   ld      b,l
1253+ DA0B 4B                                   ld      c,e
1254+ DA0C 3E 88                                ld      a,$88
1255+ DA0E CD B6 E2                             call    l2_plot_pixel
1256+ DA11 C9                                   ret
1257+ DA12
1258+ DA12
1259+ DA12              ; .....................................................
1260+ DA12              ; Process Nodes does the following:
1261+ DA12              ; for each node:
1262+ DA12              ;     see if node >
1263+ DA12 00           PNXX20DIV6          DB      0
1264+ DA13 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1265+ DA15 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1266+ DA17 00           PNLASTNORM          DB      0
1267+ DA18              ProcessNodes:           ZeroA
1267+ DA18 AF          >                        xor a
1268+ DA19 32 EA C3                             ld      (UbnkLineArrayLen),a
1269+ DA1C CD C8 CB                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1270+ DA1F CD 24 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1271+ DA22 CD 80 CE                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1272+ DA25 CD 4D CD                             call    InverseXX16                      ;#11; Invert rotation matrix
1273+ DA28 21 11 C4                             ld      hl,UBnkHullVerticies
1274+ DA2B 3A FF C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1275+ DA2E 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1276+ DA2F 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1277+ DA30 16 06                                ld      d,6
1278+ DA32 CD 0F 96                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1279+ DA35 41                                   ld      b,c                              ; c = number of vertices
1280+ DA36 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1281+ DA3A              LL48:
1282+ DA3A C5           PointLoop:              push    bc                                  ; save counters
1283+ DA3B E5                                   push    hl                                  ; save verticies list pointer
1284+ DA3C FD E5                                push    iy                                  ; save Screen plot array pointer
1285+ DA3E 78                                   ld      a,b
1286+ DA3F                                      ;break
1287+ DA3F CD F7 D3                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1288+ DA42 3A A7 C0                             ld      a,(UBnkXScaledSign)
1289+ DA45 CD 86 79                             call    XX12EquNodeDotOrientation
1290+ DA48 CD F1 CB                             call    TransposeXX12ByShipToXX15
1291+ DA4B CD 6E CC                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1292+ DA4E FD E1                                pop     iy                                  ; get back screen plot array pointer
1293+ DA50 CD 76 D4                             call    ProjectNodeToEye                     ; set up screen plot list entry
1294+ DA53                 ; ld      hl,UbnkLineArrayLen
1295+ DA53                ;  inc     (hl)                                ; another node done
1296+ DA53 FD E5        ReadyForNextPoint:      push    iy                                  ; copy screen plot pointer to hl
1297+ DA55 E1                                   pop     hl
1298+ DA56 3E 04                                ld      a,4
1299+ DA58 ED 31                                add     hl,a
1300+ DA5A E5                                   push    hl                                  ; write it back at iy + 4
1301+ DA5B FD E1                                pop     iy                                  ; and put it in iy again
1302+ DA5D E1                                   pop     hl                                  ; get hl back as vertex list
1303+ DA5E 3E 06                                ld      a,6
1304+ DA60 ED 31                                add     hl,a                                ; and move to next vertex
1305+ DA62 C1                                   pop     bc                                  ; get counter back
1306+ DA63 10 D5                                djnz    PointLoop
1307+ DA65              ; ......................................................
1308+ DA65                                      ClearCarryFlag
1308+ DA65 B7          >                        or a
1309+ DA66 C9                                   ret
1310+ DA67              ; ...........................................................
1311+ DA67 CD 7B D0     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1312+ DA6A 3A 54 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1313+ DA6D E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1314+ DA6F C8                                   ret     z                           ; if none of these flags are set we can fast exit
1315+ DA70                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1315+ DA70 CB 6F       >                        bit 	ShipExplodingBitNbr, a
1315+ DA72 C2 B3 DA    >                        jp      nz,.ExplodingCloud
1316+ DA75              ;............................................................
1317+ DA75              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1317+ DA75 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1317+ DA77 C8          >                        ret		z
1318+ DA78                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1318+ DA78 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1318+ DA7A CA A1 DA    >                        jp      z,.CarryOnWithDraw
1319+ DA7D              ;............................................................
1320+ DA7D CD A3 D9     .itsJustADot:           call    ProcessDot
1321+ DA80                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1321+ DA80 21 54 C0    >                        ld      hl,UBnkaiatkecm
1321+ DA83 CB DE       >                        set     ShipIsDotBitNbr,(hl)
1322+ DA85 ED 4B F0 C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1323+ DA89 ED 5B F2 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1324+ DA8D 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1325+ DA8E B2                                   or      d                           ;
1326+ DA8F C0                                   ret     nz                          ;
1327+ DA90 7B                                   ld      a,e
1328+ DA91 E6 80                                and     %10000000                   ; check to see if Y > 128
1329+ DA93 C0                                   ret     nz
1330+ DA94 43                                   ld      b,e                         ; now b = y and c = x
1331+ DA95 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1332+ DA97 3E E0                                ld      a,224
1333+ DA99                                      MMUSelectLayer2                     ; then go to update radar
1333+ DA99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1334+ DA9D CD F8 E2                             call    ShipPixel                   ;
1335+ DAA0 C9                                   ret
1336+ DAA1              ;............................................................
1337+ DAA1 CD 18 DA     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1338+ DAA4                                     ; break
1339+ DAA4                                  IFDEF PLOTPOINTSONLY
1340+ DAA4 ~                                    ld      a,$F6
1341+ DAA4 ~                                    ld      (line_gfx_colour),a
1342+ DAA4 ~                                    call    PlotAllNodes
1343+ DAA4                                  ELSE
1344+ DAA4 3E E3                                ld      a,$E3
1345+ DAA6 32 B5 E2                             ld      (line_gfx_colour),a
1346+ DAA9 CD C2 D0                             call    CullV2
1347+ DAAC CD 5B DC                             call    PrepLines                       ; With late clipping this just moves the data to the line array which is now x2 size
1348+ DAAF CD 45 D9                             call    DrawLinesLateClipping
1349+ DAB2                                  ENDIF
1350+ DAB2                                  IFDEF OVERLAYNODES
1351+ DAB2 ~                                    ld      a,$CF
1352+ DAB2 ~                                    ld      (line_gfx_colour),a
1353+ DAB2 ~                                    call    PlotAllNodes
1354+ DAB2                                  ENDIF
1355+ DAB2                                  IFDEF FLIPBUFFERSTEST
1356+ DAB2 ~                                    DISPLAY "Univ_ship_data flip buffer test Enabled"
1357+ DAB2 ~                                    call   l2_flip_buffers
1358+ DAB2 ~                                    call   l2_flip_buffers
1359+ DAB2                                  ELSE
1360+ DAB2                                      DISPLAY "Univ_ship_data flip buffer test Disabled"
1361+ DAB2                                  ENDIF
1362+ DAB2 C9                                   ret
1363+ DAB3              ;............................................................
1364+ DAB3 CD 18 DA     .ExplodingCloud:        call    ProcessNodes
1365+ DAB6                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1365+ DAB6 21 54 C0    >                        ld      hl,UBnkaiatkecm
1365+ DAB9 CB A6       >                        res     ShipKilledBitNbr,(hl)
1366+ DABB 3A 5F C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1367+ DABE C6 04                                add     4                           ; we do this early as we now have logic for
1368+ DAC0 DA 82 DB                             jp      c,.FinishedExplosion        ; display or not later
1369+ DAC3 32 5F C0                             ld      (UBnKCloudCounter),a        ; .
1370+ DAC6              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1370+ DAC6 3A 54 C0    >                        ld     a,(UBnkaiatkecm)
1370+ DAC9 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1370+ DACB C8          >                        ret		z
1371+ DACC              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1371+ DACC CB 5F       >                        bit 	ShipIsDotBitNbr, a
1371+ DACE C2 7D DA    >                        jp      nz,.itsJustADot
1372+ DAD1 2A 26 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1373+ DAD4 7C                                   ld      a,h                         ; .
1374+ DAD5                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1374+ DAD5 FE 20       >                        cp      32
1374+ DAD7 DA DF DA    >                        jp		c, .CalcFromZ
1375+ DADA 26 FE                                ld      h,$FE                       ; .
1376+ DADC C3 EA DA                             jp      .DoneZDist                  ; .
1377+ DADF              .CalcFromZ:             ShiftHLLeft1                        ; else
1377+ DADF CB 25       >			   sla l
1377+ DAE1 CB 14       >			   rl  h
1378+ DAE3                                      ShiftHLLeft1                        ; hl = hl * 2
1378+ DAE3 CB 25       >			   sla l
1378+ DAE5 CB 14       >			   rl  h
1379+ DAE7                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1379+ DAE7 37          >                        scf
1380+ DAE8 CB 14                                rl  h                               ;
1381+ DAEA 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1382+ DAEC 4C                                   ld      c,h                         ; .
1383+ DAED 3A 5F C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1384+ DAF0                      IFDEF LOGMATHS
1385+ DAF0 ~                                    MMUSelectMathsTables
1386+ DAF0 ~                                    ld      b,h
1387+ DAF0 ~                                    call    AEquAmul256DivBLog
1388+ DAF0 ~                                    ld      d,a
1389+ DAF0 ~                                    MMUSelectROM0
1390+ DAF0                      ELSE
1391+ DAF0 57                                   ld      d,a                         ;
1392+ DAF1 1E 00                                ld      e,0                         ;
1393+ DAF3 CD 53 95                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1394+ DAF6 7A                                   ld      a,d                         ; if radius >= 28
1395+ DAF7                      ENDIF
1396+ DAF7                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1396+ DAF7 FE 1C       >                        cp      28
1396+ DAF9 DA 01 DB    >                        jp		c, .SetCloudRadius
1397+ DAFC 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1398+ DAFE C3 0D DB                             jp      .SizedUpCloud               ;
1399+ DB01              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1399+ DB01 CB 23       >			   sla e
1399+ DB03 CB 12       >			   rl  d
1400+ DB05                                      ShiftDELeft1                        ; .
1400+ DB05 CB 23       >			   sla e
1400+ DB07 CB 12       >			   rl  d
1401+ DB09                                      ShiftDELeft1                        ; .
1401+ DB09 CB 23       >			   sla e
1401+ DB0B CB 12       >			   rl  d
1402+ DB0D 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1403+ DB0E 32 60 C0                             ld      (UBnKCloudRadius),a         ; .
1404+ DB11 DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1405+ DB13 3A 5F C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1406+ DB16 ED 23                                swapnib                             ; divive by 16
1407+ DB18 E6 0F                                and     $0F                         ; mask off upper bytes
1408+ DB1A CB 2F                                sra     a                           ; divide by 32
1409+ DB1C 21 8E DB                             ld      hl,DebrisColourTable
1410+ DB1F ED 31                                add     hl,a
1411+ DB21 7E                                   ld      a,(hl)
1412+ DB22 FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1413+ DB24 3A 5F C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1414+ DB27                                      ABSa2c                              ; a = abs a
1414+ DB27 CB 7F       >                        bit     7,a
1414+ DB29 CA 2E DB    >                        jp      z,.DoneABSa
1414+ DB2C ED 44       >                        neg
1414+ DB2E             >.DoneABSa:
1415+ DB2E CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1416+ DB30 CB 2F                                sra a                               ; .
1417+ DB32 CB 2F                                sra a                               ; .
1418+ DB34 F6 01                                or  1                               ; bit 0 set so minimum 1
1419+ DB36 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1420+ DB38 3A FE C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1421+ DB3B 47                                   ld      b,a                         ; .
1422+ DB3C 21 F0 C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1423+ DB3F C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1424+ DB41 DD 68                                    ld      ixl,b                   ; save counter
1425+ DB43 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1426+ DB44 23                                       inc     hl                      ; .
1427+ DB45 46                                       ld      b,(hl)                  ; .
1428+ DB46 23                                       inc     hl                      ; .
1429+ DB47 5E                                       ld      e,(hl)                  ; .
1430+ DB48 23                                       inc     hl                      ; .
1431+ DB49 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1432+ DB4A DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1433+ DB4C FD 67                                    ld      iyh,a                   ;
1434+ DB4E                                          ;break
1435+ DB4E D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1436+ DB50 EB                                           ex      de,hl               ; hl = de (Y)
1437+ DB51 DD 54                                        ld      d,ixh               ; d = cloud radius
1438+ DB53 CD 96 DB                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1439+ DB56 7C                                           ld      a,h                 ; if off screen skip
1440+ DB57                                              JumpIfAIsNotZero  .NextIteration
1440+ DB57 A7          >                        and     a
1440+ DB58 C2 73 DB    >                        jp	    nz,.NextIteration
1441+ DB5B EB                                           ex      de,hl               ; de = result for y which was put into hl
1442+ DB5C E1                                           pop     hl                  ; get x back from bc on stack
1443+ DB5D E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1444+ DB5E D5                                           push    de                  ; save de
1445+ DB5F DD 54                                        ld      d,ixh               ; d = cloud radius
1446+ DB61 CD 96 DB                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1447+ DB64 D1                                           pop     de                  ; get de back doing pop here clears stack up
1448+ DB65 7C                                           ld      a,h                 ; if high byte has a value then off screen
1449+ DB66                                              JumpIfAIsNotZero .NextIteration ;
1449+ DB66 A7          >                        and     a
1449+ DB67 C2 73 DB    >                        jp	    nz,.NextIteration
1450+ DB6A 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1451+ DB6B 4D                                           ld      c,l                 ; iyl already has colour
1452+ DB6C                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1452+ DB6C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1453+ DB70 CD 00 E3                                     call    DebrisPixel         ; .
1454+ DB73 C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1455+ DB75 FD 25                                    dec    iyh                      ; one partcile done
1456+ DB77 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1457+ DB79 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1458+ DB7B 3E 04                                ld      a,4                         ; move to next vertex group
1459+ DB7D ED 31                                add     hl,a                        ;
1460+ DB7F 10 BE                                djnz    .ExplosionVertLoop          ;
1461+ DB81 C9                                   ret
1462+ DB82              .FinishedExplosion:     ;break
1463+ DB82 3A 3F C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1464+ DB85 CD 4B 83                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1465+ DB88                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1465+ DB88 21 54 C0    >                        ld      hl,UBnkaiatkecm
1465+ DB8B CB AE       >                        res     ShipExplodingBitNbr,(hl)
1466+ DB8D C9                                   ret
1467+ DB8E
1468+ DB8E
1469+ DB8E FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1469+ DB92 6C 48 24 25
1470+ DB96                                      ; set flags and signal to remove from slot list
1471+ DB96
1472+ DB96              ; Hl = HlL +/- (Random * projected cloud size)
1473+ DB96              ; In - d = z distance, hl = vert hi lo
1474+ DB96              ; Out hl = adjusted distance
1475+ DB96              ; uses registers hl, de
1476+ DB96 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1477+ DB97 CD 1C 84                             call    doRandom                    ; a= random * 2
1478+ DB9A E1                                   pop     hl
1479+ DB9B 17                                   rla                                 ;
1480+ DB9C 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1481+ DB9E 5F           .Positive:              ld  e,a
1482+ DB9F ED 30                                mul
1483+ DBA1 5A                                   ld  e,d
1484+ DBA2 16 00                                ld  d,0
1485+ DBA4                                      ClearCarryFlag
1485+ DBA4 B7          >                        or a
1486+ DBA5 ED 5A                                adc     hl,de                       ; hl = hl + a
1487+ DBA7 C9                                   ret
1488+ DBA8 5F           .Negative:              ld  e,a
1489+ DBA9 ED 30                                mul
1490+ DBAB 5A                                   ld  e,d
1491+ DBAC 16 00                                ld  d,0
1492+ DBAE                                      ClearCarryFlag
1492+ DBAE B7          >                        or a
1493+ DBAF ED 52                                sbc     hl,de                       ; hl = hl + a
1494+ DBB1 C9                                   ret
1495+ DBB2
1496+ DBB2              GetExperiencePoints:    ; TODO calculate experience points
1497+ DBB2                                      ; TODO mission updates check
1498+ DBB2 C9                                   ret
1499+ DBB3
1500+ DBB3              ; ......................................................
1501+ DBB3 3A 0D C4     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1502+ DBB6 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1503+ DBB8 C8                                   ret     z
1504+ DBB9 3A 54 C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1505+ DBBC F6 30                                or      ShipExploding | ShipKilled  ; .
1506+ DBBE E6 7F                                and     ShipAIDisabled              ; .
1507+ DBC0 32 54 C0                             ld      (UBnkaiatkecm),a            ; .
1508+ DBC3                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1508+ DBC3 3E 4B       >                        ld      a,ShipExplosionDuration
1508+ DBC5 32 51 C0    >                        ld      (UBnKexplDsp),a
1509+ DBC8                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1509+ DBC8 AF          >                        xor      a
1509+ DBC9 32 58 C0    >                        ld       (UBnKEnergy),a
1510+ DBCC 32 60 C0                             ld      (UBnKCloudRadius),a
1511+ DBCF 3E 12                                ld      a,18
1512+ DBD1 32 5F C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1513+ DBD4                                      ; TODO logic to spawn cargo/plates goes here
1514+ DBD4 C9                                   ret
1515+ DBD5
1516+ DBD5              ; in a = damage
1517+ DBD5 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1518+ DBD6 3A 0D C4                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1519+ DBD9 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1520+ DBDB C8                                   ret     z
1521+ DBDC 3A 58 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1522+ DBDF                                      ClearCarryFlag
1522+ DBDF B7          >                        or a
1523+ DBE0 98                                   sbc     a,b                         ; subtract damage
1524+ DBE1 D2 E8 DB     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1525+ DBE4 CD B3 DB                             call    KillShip                    ; else kill it
1526+ DBE7 C9                                   ret
1527+ DBE8 32 58 C0     .DoneDamage:            ld      (UBnKEnergy),a
1528+ DBEB C9                                   ret
1529+ DBEC              ; need recovery for energy too
1530+ DBEC              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1531+ DBEC
1532+ DBEC              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1533+ DBEC              ;  Entering Here we have the following:
1534+ DBEC              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1535+ DBEC              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1536+ DBEC              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1537+ DBEC              ;
1538+ DBEC              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1539+ DBEC              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1540+ DBEC              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1541+ DBEC              ;--------------------------------------------------------------------------------------------------------
1542+ DBEC              AddLaserBeamLine:
1543+ DBEC              ; this code is a bag of shit and needs re-writing
1544+ DBEC              GetGunVertexNode:
1545+ DBEC 3A FC C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1546+ DBEF 21 F0 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1547+ DBF2 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1548+ DBF4 FD 2E 00             ld          iyl,0
1549+ DBF7              MoveX1PointToXX15:
1550+ DBF7 4E                   ld          c,(hl)                              ;
1551+ DBF8 23                   inc         hl
1552+ DBF9 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1553+ DBFA 23                   inc         hl
1554+ DBFB ED 43 A6 C0          ld          (UBnkX1),bc
1555+ DBFF 0C                   inc         c
1556+ DC00 C8                   ret         z                                   ; was c 255?
1557+ DC01 04                   inc         b
1558+ DC02 C8                   ret         z                                   ; was c 255?
1559+ DC03              MoveY1PointToXX15:
1560+ DC03 4E                   ld          c,(hl)                              ;
1561+ DC04 23                   inc         hl
1562+ DC05 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1563+ DC06 23                   inc         hl
1564+ DC07 ED 43 A8 C0          ld          (UBnkY1),bc
1565+ DC0B              SetX2PointToXX15:
1566+ DC0B 01 00 00             ld          bc,0                                ; set X2 to 0
1567+ DC0E ED 43 AA C0          ld          (UBnkX2),bc
1568+ DC12 3A 26 C0             ld          a,(UBnKzlo)
1569+ DC15 4F                   ld          c,a
1570+ DC16              SetY2PointToXX15:
1571+ DC16 ED 43 AC C0          ld          (UBnkY2),bc                         ; set Y2to 0
1572+ DC1A 3A 22 C0             ld          a,(UBnKxsgn)
1573+ DC1D                      JumpOnBitClear a,7,LL74SkipDec
1573+ DC1D CB 7F       >                        bit 	7,a
1573+ DC1F CA 27 DC    >                        jp      z,LL74SkipDec
1574+ DC22              LL74DecX2:
1575+ DC22 3E FF                ld          a,$FF
1576+ DC24 32 AA C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1577+ DC27              LL74SkipDec:
1578+ DC27 CD C7 CB             call        ClipLineV3                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1579+ DC2A 38 5A                jr          c,CalculateNewLines
1580+ DC2C              ;        jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1581+ DC2C              ; Here we are usign hl to replace VarU as index
1582+ DC2C 2A 8D 7E             ld          hl,(varU16)
1583+ DC2F 3A A6 C0             ld          a,(UBnKx1Lo)
1584+ DC32 77                   ld          (hl),a
1585+ DC33 23                   inc         hl
1586+ DC34 3A A8 C0             ld          a,(UbnKy1Lo)
1587+ DC37 77                   ld          (hl),a
1588+ DC38 23                   inc         hl
1589+ DC39 3A AA C0             ld          a,(UBnkX2Lo)
1590+ DC3C 77                   ld          (hl),a
1591+ DC3D 23                   inc         hl
1592+ DC3E 3A AC C0             ld          a,(UbnKy2Lo)
1593+ DC41 77                   ld          (hl),a
1594+ DC42 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1595+ DC44 23                   inc         hl
1596+ DC45 FD 2C                inc         iyl                                 ; ready for next byte
1597+ DC47 22 8D 7E             ld          (varU16),hl
1598+ DC4A C9                   ret
1599+ DC4B
1600+ DC4B                  DISPLAY "Tracing 7", $
1601+ DC4B
1602+ DC4B                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DC4B
   2++DC4B              ;--------------------------------------------------------------------------------------------------------
   3++DC4B                      DISPLAY "Tracing 8", $
   4++DC4B
   5++DC4B                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DC4B              ;--------------------------------------------------------------------------------------------------------
   2++DC4B              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DC4B 21 F0 C0     getVertexNodeAtAToDE:   ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DC4E ED 31                                add         hl,a                                ; hl = address of Node
   5++DC50 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DC51 ED A0                                ldi                                             ; x1 lo
   7++DC53 ED A0                                ldi                                             ; x1 hi
   8++DC55 ED A0                                ldi                                             ; y1 lo
   9++DC57 ED A0                                ldi                                             ; y1 hi
  10++DC59 C9                                   ret
  11++DC5A
  12++DC5A              ;getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
  13++DC5A              ;                        add         hl,a                                ; hl = address of Node
  14++DC5A              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
  15++DC5A              ;                        ld          de,UBnkX1
  16++DC5A              ;                        ldi                                             ; x1 lo
  17++DC5A              ;                        ldi                                             ; x1 hi
  18++DC5A              ;                        ldi                                             ; y1 lo
  19++DC5A              ;                        ldi                                             ; y1 hi
  20++DC5A              ;                        ret
  21++DC5A
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   6++DC5A
   7++DC5A                      DISPLAY "Tracing 9", $
   8++DC5A
   9++DC5A                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DC5A              ;--------------------------------------------------------------------------------------------------------
   2++DC5A              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DC5A              ;getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DC5A              ;                        add         hl,a                                ; hl = address of Node
   5++DC5A              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DC5A              ;                        ld          de,UBnkX2
   7++DC5A              ;                        ldi                                             ; x1 lo
   8++DC5A              ;                        ldi                                             ; x1 hi
   9++DC5A              ;                        ldi                                             ; y1 lo
  10++DC5A              ;                        ldi                                             ; y1 hi
  11++DC5A              ;                        ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
  10++DC5A                      DISPLAY "Tracing 10", $
  11++DC5A
  12++DC5A                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DC5A              ;--------------------------------------------------------------------------------------------------------
   2++DC5A              GetFaceAtA:         MACRO
   3++DC5A ~                                ld          hl,UbnkFaceVisArray
   4++DC5A ~                                add         hl,a
   5++DC5A ~                                ld          a,(hl)                              ; get face visibility
   6++DC5A                                  ENDM
   7++DC5A
# file closed: ././ModelRender/GetFaceAtA.asm
  13++DC5A                      DISPLAY "Tracing 11", $
  14++DC5A
  15++DC5A              ;--------------------------------------------------------------------------------------------------------
  16++DC5A              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
  17++DC5A               ;   DEFINE NOBACKFACECULL 1
  18++DC5A 00           PLEDGECTR           DB          0
  19++DC5B
  20++DC5B              PrepLines:
  21++DC5B              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  22++DC5B
  23++DC5B              ; TODO add in onced DOEXP is finished
  24++DC5B              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  25++DC5B              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  26++DC5B              ;        or          8
  27++DC5B              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  28++DC5B              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  29++DC5B              ;EE31:                                                   ; no explosion
  30++DC5B              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  31++DC5B              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  32++DC5B              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  33++DC5B              ;
  34++DC5B              ;--------------------------------------------------------------------------------------------------------
  35++DC5B
  36++DC5B              InitialiseLineRead:
  37++DC5B                      ;break
  38++DC5B                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  38++DC5B AF          >                        xor      a
  38++DC5C 32 EA C3    >                        ld       (UbnkLineArrayLen),a
  39++DC5F 32 EB C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  40++DC62 32 5A DC             ld          (PLEDGECTR),a
  41++DC65 3A 00 C4             ld          a,(EdgeCountAddr)
  42++DC68 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  43++DC6A FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  44++DC6D 21 30 C2             ld          hl,UbnkLineArray                    ; head of array
  45++DC70 22 8D 7E             ld          (varU16),hl                         ; store current line array pointer un varU16
  46++DC73                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  46++DC73 3A 00 C4    >                        ld       a,(EdgeCountAddr)
  46++DC76 32 91 7E    >                        ld       (XX17),a
  47++DC79 3A 51 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  48++DC7C                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  48++DC7C CB 77       >                        bit 	6,a
  48++DC7E CA 86 DC    >                        jp      z,CalculateNewLines
  49++DC81 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  50++DC83 32 51 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  51++DC86              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  52++DC86              ; NOw we can calculate hull after including laser line
  53++DC86              CalculateNewLines:
  54++DC86              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  55++DC86              CheckEdgesForVisibility:
  56++DC86 21 01 C5             ld          hl,UBnkHullEdges
  57++DC89                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  58++DC89 22 90 7D             ld          (varV),hl                           ; V \ is pointer to where edges data start
  59++DC8C 3A FB C3             ld          a,(LineX4Addr)
  60++DC8F 47                   ld          b,a                                 ; nbr of bytes of edge data
  61++DC90              LL75Loop:                                               ; count Visible edges
  62++DC90              IsEdgeInVisibilityRange:
  63++DC90 2A 90 7D             ld          hl,(varV)
  64++DC93 E5                   push        hl
  65++DC94 FD E1                pop         iy
  66++DC96                     ; DEFINE NOBACKFACECULL 1
  67++DC96                      IFDEF NOBACKFACECULL
  68++DC96 ~                        jp          VisibileEdge; DEBUGTODO
  69++DC96                      ENDIF
  70++DC96 3A 7C 7D             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  71++DC99 57                   ld          d,a                                 ; d holds copy of XX4
  72++DC9A              ; Get Edge Byte 0
  73++DC9A FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  74++DC9D                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  74++DC9D BA          >                        cp      d
  74++DC9E DA F9 DC    >                        jp		c, LL78EdgeNotVisible
  75++DCA1              EdgeMayBeVisibile:
  76++DCA1              ; Get Edge Byte 1
  77++DCA1              IsFace1Visibile:                                        ; edges have 2 faces to test
  78++DCA1 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  79++DCA4 4F                   ld          c,a                                 ;  c = a copy of byte 1
  80++DCA5 E6 0F                and         $0F                                 ;
  81++DCA7                      GetFaceAtA
  81++DCA7 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  81++DCAA ED 31       >                    add         hl,a
  81++DCAC 7E          >                    ld          a,(hl)                              ; get face visibility
  82++DCAD              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  83++DCAD                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  83++DCAD A7          >                        and     a
  83++DCAE C2 C2 DC    >                        jp	    nz,VisibileEdge
  84++DCB1              IsFace2Visibile:
  85++DCB1 79                   ld          a,c                                 ; restore byte 1 from c register
  86++DCB2 ED 23                swapnib                                         ;
  87++DCB4 E6 0F                and         $0F                                 ; swap high byte into low byte
  88++DCB6 E5                   push        hl
  89++DCB7                      GetFaceAtA
  89++DCB7 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  89++DCBA ED 31       >                    add         hl,a
  89++DCBC 7E          >                    ld          a,(hl)                              ; get face visibility
  90++DCBD E1                   pop         hl
  91++DCBE                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  91++DCBE A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  91++DCBF CA F9 DC    >                        jp	    z, LL78EdgeNotVisible
  92++DCC2              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  93++DCC2              ;LL79--Visible edge--------------------------------------
  94++DCC2              ; Get Edge Byte 2
  95++DCC2 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  96++DCC5 11 A6 C0             ld          de,UBnkX1
  97++DCC8 CD 4B DC             call        getVertexNodeAtAToDE; getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  98++DCCB FD 7E 03             ld          a,(IY+3)
  99++DCCE 11 AA C0             ld          de,UBnkX2
 100++DCD1 CD 4B DC             call        getVertexNodeAtAToDE; getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
 101++DCD4
 102++DCD4                      IFDEF       CLIPVersion3
 103++DCD4 ~                        call        ClipLineV3
 104++DCD4 ~                        jr          nc,.SkipBreak1
 105++DCD4 ~                        nop
 106++DCD4 ~                        nop
 107++DCD4 ~                        ;break
 108++DCD4 ~            .SkipBreak1:
 109++DCD4 ~                        jr          c,LL78EdgeNotVisible
 110++DCD4 ~            //COMMENEDOUT FOR LATECLIPPING        ELSE
 111++DCD4 ~            //COMMENEDOUT FOR LATECLIPPING            call        ClipLine
 112++DCD4 ~            //COMMENEDOUT FOR LATECLIPPING            jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
 113++DCD4                      ENDIF
 114++DCD4              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
 115++DCD4                      IFDEF       LATECLIPPING
 116++DCD4 ED 5B 8D 7E                  ld          de,(varU16)                         ; clipped edges heap address
 117++DCD8 21 A6 C0                     ld          hl,UbnkPreClipX1
 118++DCDB                              FourLDIInstrunctions
 118++DCDB ED A0       >                        ldi
 118++DCDD ED A0       >                        ldi
 118++DCDF ED A0       >                        ldi
 118++DCE1 ED A0       >                        ldi
 119++DCE3                              FourLDIInstrunctions
 119++DCE3 ED A0       >                        ldi
 119++DCE5 ED A0       >                        ldi
 119++DCE7 ED A0       >                        ldi
 119++DCE9 ED A0       >                        ldi
 120++DCEB ED 53 8D 7E                  ld          (varU16),de                         ; update U16 with current address
 121++DCEF                      ELSE
 122++DCEF ~                            ld          de,(varU16)                         ; clipped edges heap address
 123++DCEF ~                            ld          hl,UBnkNewX1
 124++DCEF ~                            FourLDIInstrunctions
 125++DCEF ~                            ld          (varU16),de                         ; update U16 with current address
 126++DCEF                      ENDIF
 127++DCEF 21 EA C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
 128++DCF2 34                   inc         (hl)
 129++DCF3 7E                   ld          a,(hl)
 130++DCF4                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
 130++DCF4 FE 32       >                        cp     LineArraySize
 130++DCF6 D2 0F DD    >                        jp		nc,CompletedLineGeneration
 131++DCF9              ; If we hit here we skip the write of line arryay u16
 132++DCF9              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 133++DCF9              LL78:
 134++DCF9 2A 90 7D             ld          hl,(varV)                           ; varV is current edge address
 135++DCFC 3E 04                ld          a,4
 136++DCFE ED 31                add         hl,a
 137++DD00 22 90 7D             ld          (varV),hl
 138++DD03 21 5A DC             ld          hl,PLEDGECTR                        ;
 139++DD06 34                   inc         (hl)                                ;
 140++DD07 7E                   ld          a,(hl)                              ; current edge index ++
 141++DD08                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 141++DD08 21 91 7E    >                        ld    hl,XX17
 141++DD0B BE          >                        cp    (hl)
 141++DD0C C2 90 DC    >                        jp      nz,LL75Loop
 142++DD0F              CompletedLineGeneration:
 143++DD0F              LL81:
 144++DD0F              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 145++DD0F 3A EA C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 146++DD12 CB 27                sla         a
 147++DD14 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 148++DD16                      IFDEF       LATECLIPPING
 149++DD16 CB 27                        sla         a                           ; multiple by 8 to equal number of bytes
 150++DD18                      ENDIF
 151++DD18 32 EB C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 152++DD1B              ExitEdgeDataLoop:
 153++DD1B C9                   ret
 154++DD1C
# file closed: ./Universe/Ships/PrepLines.asm
1603+ DD1C
1604+ DD1C                  DISPLAY "Tracing XX", $
1605+ DD1C
1606+ DD1C              UnivBankSize  EQU $ - StartOfUniv
1607+ DD1C
# file closed: ./Universe/Ships/univ_ship_data.asm
1536  DD1C                                  DISPLAY "Sizing Bank ",BankUNIVDATA0," - Start ",UniverseBankAddr," End - ",$, "- Universe Data A"
1537  DD1C                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
1538  DD1C                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1539  DD1C              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
1540  DD1C                                  SLOT    UniverseBankAddr
1541  DD1C                                  PAGE    BankUNIVDATA1
1542  DD1C                                  ORG	UniverseBankAddr,BankUNIVDATA1
1543  C000 FF           UNIVDATABlock1      DB $FF
1544  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1545  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
1546  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1547  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
1548  E000                                  SLOT    UniverseBankAddr
1549  E000                                  PAGE    BankUNIVDATA2
1550  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
1551  C000 FF           UNIVDATABlock2      DB $FF
1552  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1553  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
1554  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1555  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
1556  E000                                  SLOT    UniverseBankAddr
1557  E000                                  PAGE    BankUNIVDATA3
1558  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
1559  C000 FF           UNIVDATABlock3      DB $FF
1560  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1561  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
1562  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1563  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1564  E000                                  SLOT    UniverseBankAddr
1565  E000                                  PAGE    BankUNIVDATA4
1566  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
1567  C000 FF           UNIVDATABlock4      DB $FF
1568  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1569  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
1570  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1571  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
1572  E000                                  SLOT    UniverseBankAddr
1573  E000                                  PAGE    BankUNIVDATA5
1574  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
1575  C000 FF           UNIVDATABlock5      DB $FF
1576  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1577  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
1578  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1579  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
1580  E000                                  SLOT    UniverseBankAddr
1581  E000                                  PAGE    BankUNIVDATA6
1582  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
1583  C000 FF           UNIVDATABlock6      DB $FF
1584  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1585  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
1586  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1587  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1588  E000                                  SLOT    UniverseBankAddr
1589  E000                                  PAGE    BankUNIVDATA7
1590  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
1591  C000 FF           UNIVDATABlock7      DB $FF
1592  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1593  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
1594  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1595  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1596  E000                                  SLOT    UniverseBankAddr
1597  E000                                  PAGE    BankUNIVDATA8
1598  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
1599  C000 FF           UNIVDATABlock8      DB $FF
1600  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1601  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
1602  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1603  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1604  E000                                  SLOT    UniverseBankAddr
1605  E000                                  PAGE    BankUNIVDATA9
1606  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
1607  C000 FF           UNIVDATABlock9      DB $FF
1608  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1609  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
1610  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1611  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1612  E000                                  SLOT    UniverseBankAddr
1613  E000                                  PAGE    BankUNIVDATA10
1614  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
1615  C000 FF           UNIVDATABlock10     DB $FF
1616  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1617  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
1618  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1619  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1620  E000                                  SLOT    UniverseBankAddr
1621  E000                                  PAGE    BankUNIVDATA11
1622  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
1623  C000 FF           UNIVDATABlock11     DB $FF
1624  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1625  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
1626  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1627  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1628  E000                                  SLOT    UniverseBankAddr
1629  E000                                  PAGE    BankUNIVDATA12
1630  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
1631  C000 FF           UNIVDATABlock12     DB $FF
1632  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1633  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
1634  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1635  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1636  E000                                  SLOT    SunBankAddr
1637  E000                                  PAGE    BankSunData
1638  E000                                  ORG	    SunBankAddr,BankSunData
1639  C000                                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD 26 7D                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB
  94+ C1BB              ; Z Must be at least 2 and positve to warp
  95+ C1BB 21 18 C0     WarpSunCloser:          ld      hl,SBnKzsgn
  96+ C1BE 7E                                   ld      a,(hl)
  97+ C1BF                                      ReturnIfALTNusng 2                      ; hard liit along z axis
  97+ C1BF FE 02       >                        cp    2
  97+ C1C1 D8          >                        ret	 c
  98+ C1C2 35                                   dec     (hl)
  99+ C1C3 C9                                   ret
 100+ C1C4
 101+ C1C4              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 102+ C1C4 21 18 C0     WarpSunFurther:         ld      hl,SBnKzsgn
 103+ C1C7 7E                                   ld      a,(hl)
 104+ C1C8                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 104+ C1C8 FE 7F       >                        cp    $7F
 104+ C1CA D0          >                        ret	 nc
 105+ C1CB 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 106+ C1CC C9                                   ret
 107+ C1CD              ; This uses UBNKNodeArray as the list
 108+ C1CD              ; the array is 256 * 2 bytes
 109+ C1CD              ; counter is current row y pos
 110+ C1CD              ; byte 1 is start x pos
 111+ C1CD              ; byte 2 is end x pos
 112+ C1CD              ; if they are both 0 then skip
 113+ C1CD              ; its always horizontal, yellow
 114+ C1CD
 115+ C1CD              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 115+ C1CD 37          >                        scf
 116+ C1CE C9                                   ret
 117+ C1CF
 118+ C1CF              SunBankDraw:            MACRO
 119+ C1CF ~            .drawLoop               ld      a,(hl)
 120+ C1CF ~                                    ld      c,a                     ; c = left column
 121+ C1CF ~                                    inc     hl
 122+ C1CF ~                                    ld      d,(hl)                  ; d = right col
 123+ C1CF ~                                    inc     hl                      ; now ready for next linel
 124+ C1CF ~                                    push    hl,,bc
 125+ C1CF ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 126+ C1CF ~                                    IfResultZeroGoto .NoLineDraw
 127+ C1CF ~                                    ld      a,d                     ; get right col back
 128+ C1CF ~                                    sub     c                       ; subtract left so a = length
 129+ C1CF ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 130+ C1CF ~                                    call    z, .FixWidth
 131+ C1CF ~                                    ld      d,a                     ; de = length (e - d)
 132+ C1CF ~                                    ld      e,216                   ; yellow
 133+ C1CF ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 134+ C1CF ~            .NoLineDraw:            pop     hl,,bc
 135+ C1CF ~                                    inc     b
 136+ C1CF ~                                    dec     iyh
 137+ C1CF ~                                    IfResultNotZeroGoto  .drawLoop
 138+ C1CF                                      ENDM
 139+ C1CF
 140+ C1CF
 141+ C1CF
 142+ C1CF              SunDraw:                MMUSelectLayer2
 142+ C1CF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1D3 3A B3 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 144+ C1D6                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 144+ C1D6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 144+ C1D7 CA E7 C1    >                        jp	    z, .OffsetIsZero
 145+ C1DA                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 145+ C1DA FE 40       >                        cp      64
 145+ C1DC DA F4 C1    >                        jp		c, .OffsetLT64
 146+ C1DF D6 40        .OffsetGTE64:           sub     64
 147+ C1E1 32 B3 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 148+ C1E4 C3 2C C2                             jp      .StartBank2
 149+ C1E7 06 00        .OffsetIsZero:          ld      b,0                     ; row
 150+ C1E9 FD 26 40                             ld      iyh,64                  ; counter
 151+ C1EC 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 152+ C1EF C3 06 C2                             jp      .StartBank1
 153+ C1F2              ;-- Snuck routine in here so that the macro will be happier
 154+ C1F2 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 155+ C1F3 C9                                   ret
 156+ C1F4 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 157+ C1F7 ED 31                                add     hl,a                    ; .
 158+ C1F9 ED 31                                add     hl,a                    ; .
 159+ C1FB 47                                   ld      b,a                     ; set b row to the actual offset
 160+ C1FC 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 161+ C1FD 3E 40                                ld      a,64                    ; .
 162+ C1FF 91                                   sub     c                       ; .
 163+ C200 FD 67                                ld      iyh,a
 164+ C202 AF                                   xor     a                       ; Ready bank 2 with no offset
 165+ C203 32 B3 C5                             ld      (MinYOffset),a          ; .
 166+ C206 D9           .StartBank1:            exx
 167+ C207 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 168+ C209 CD 38 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 169+ C20C D9                                   exx
 170+ C20D                                      SunBankDraw
 170+ C20D 7E          >.drawLoop               ld      a,(hl)
 170+ C20E 4F          >                        ld      c,a                     ; c = left column
 170+ C20F 23          >                        inc     hl
 170+ C210 56          >                        ld      d,(hl)                  ; d = right col
 170+ C211 23          >                        inc     hl                      ; now ready for next linel
 170+ C212 E5 C5       >                        push    hl,,bc
 170+ C214 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 170+ C215             >                        IfResultZeroGoto .NoLineDraw
 170+ C215 CA 24 C2    >                        jp	z,.NoLineDraw
 170+ C218 7A          >                        ld      a,d                     ; get right col back
 170+ C219 91          >                        sub     c                       ; subtract left so a = length
 170+ C21A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 170+ C21B CC F2 C1    >                        call    z, .FixWidth
 170+ C21E 57          >                        ld      d,a                     ; de = length (e - d)
 170+ C21F 1E D8       >                        ld      e,216                   ; yellow
 170+ C221 CD 5E E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 170+ C224 C1 E1       >.NoLineDraw:            pop     hl,,bc
 170+ C226 04          >                        inc     b
 170+ C227 FD 25       >                        dec     iyh
 170+ C229             >                        IfResultNotZeroGoto  .drawLoop
 170+ C229 C2 0D C2    >                        jp	nz,.drawLoop
 171+ C22C 3A B3 C5     .StartBank2:            ld      a,(MinYOffset)
 172+ C22F                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 172+ C22F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 172+ C230 CA 44 C2    >                        jp	    z, .OffsetBank2IsZero
 173+ C233 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 174+ C236 ED 31                                add     hl,a
 175+ C238 ED 31                                add     hl,a
 176+ C23A 4F                                   ld      c,a                     ; iyh = 64 - offset
 177+ C23B 3E 40                                ld      a,64                    ; .
 178+ C23D 91                                   sub     c                       ; .
 179+ C23E FD 67                                ld      iyh,a                   ; .
 180+ C240 41                                   ld      b,c                     ; b = offset row
 181+ C241 C3 4C C2                             jp      .drawLineBank2
 182+ C244 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 183+ C247 06 00                                ld      b,0
 184+ C249 FD 26 40                             ld      iyh,64
 185+ C24C D9           .drawLineBank2:         exx
 186+ C24D 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 187+ C24F CD 38 E0                             call    asm_l2_bank_select      ; now do the lower bank
 188+ C252 D9                                   exx
 189+ C253              ; Could make this a sub routine but unwrapping saves a call
 190+ C253                                      SunBankDraw
 190+ C253 7E          >.drawLoop               ld      a,(hl)
 190+ C254 4F          >                        ld      c,a                     ; c = left column
 190+ C255 23          >                        inc     hl
 190+ C256 56          >                        ld      d,(hl)                  ; d = right col
 190+ C257 23          >                        inc     hl                      ; now ready for next linel
 190+ C258 E5 C5       >                        push    hl,,bc
 190+ C25A BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 190+ C25B             >                        IfResultZeroGoto .NoLineDraw
 190+ C25B CA 6A C2    >                        jp	z,.NoLineDraw
 190+ C25E 7A          >                        ld      a,d                     ; get right col back
 190+ C25F 91          >                        sub     c                       ; subtract left so a = length
 190+ C260 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 190+ C261 CC F2 C1    >                        call    z, .FixWidth
 190+ C264 57          >                        ld      d,a                     ; de = length (e - d)
 190+ C265 1E D8       >                        ld      e,216                   ; yellow
 190+ C267 CD 5E E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 190+ C26A C1 E1       >.NoLineDraw:            pop     hl,,bc
 190+ C26C 04          >                        inc     b
 190+ C26D FD 25       >                        dec     iyh
 190+ C26F             >                        IfResultNotZeroGoto  .drawLoop
 190+ C26F C2 53 C2    >                        jp	nz,.drawLoop
 191+ C272 C9                                   ret
 192+ C273
 193+ C273              ; --------------------------------------------------------------
 194+ C273              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 195+ C273 CD A5 C1     CreateSun:              call    ResetSBnKData
 196+ C276 3A 1D 7F                             ld      a,(WorkingSeeds+3)
 197+ C279 E6 07                                and     %00000111
 198+ C27B F6 81                                or      %10000001
 199+ C27D 32 18 C0                             ld      (SBnKzsgn),a
 200+ C280 3A 1F 7F                             ld      a,(WorkingSeeds+5)
 201+ C283 E6 03                                and     %00000011
 202+ C285 32 12 C0                             ld      (SBnKxsgn),a
 203+ C288 32 15 C0                             ld      (SBnKysgn),a
 204+ C28B 21 00 00                             ld      hl, $0000
 205+ C28E 22 17 C0                             ld      (SBnKzhi),hl
 206+ C291 3E E3                                ld      a, $E3
 207+ C293 32 16 C0                             ld      (SBnKzlo),a
 208+ C296 C9                                   ret
 209+ C297              ; --------------------------------------------------------------
 210+ C297              ; This creates a sun relative to space station on launch
 211+ C297 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 212+ C29A 21 00 00                             ld      hl,0
 213+ C29D 3E 00                                ld      a,0
 214+ C29F 22 10 C0                             ld      (SBnKxlo),hl
 215+ C2A2 22 13 C0                             ld      (SBnKylo),hl
 216+ C2A5 21 00 E0                             ld      hl,$E000
 217+ C2A8 22 16 C0                             ld      (SBnKzlo),hl
 218+ C2AB 32 12 C0                             ld      (SBnKxsgn),a
 219+ C2AE 32 18 C0                             ld      (SBnKzsgn),a
 220+ C2B1 3E 06                                ld      a,$06
 221+ C2B3 32 15 C0                             ld      (SBnKysgn),a
 222+ C2B6 C9                                   ret
 223+ C2B7              ; --------------------------------------------------------------
 224+ C2B7              ; This sets current universe object to a planet,they use sign + 23 bit positions
 225+ C2B7              ;;TODOCreatePlanet:           call    ResetSBnKData
 226+ C2B7              ;;TODO                        ld      a,(DisplayTekLevel)
 227+ C2B7              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 228+ C2B7              ;;TODO                        or      $10000000
 229+ C2B7              ;;TODO                        ld      (SBnKShipType),a
 230+ C2B7              ;;TODO                        xor     a
 231+ C2B7              ;;TODO                        ld      (SBnKaiatkecm),a
 232+ C2B7              ;;TODO                        MaxUnivPitchAndRoll
 233+ C2B7              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 234+ C2B7              ;;TODO                        and     %00000011               ; .
 235+ C2B7              ;;TODO                        adc     3                       ; .
 236+ C2B7              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 237+ C2B7              ;;TODO                        rr      a
 238+ C2B7              ;;TODO                        ld      (PlanetXsgn),a
 239+ C2B7              ;;TODO                        ld      (PlanetYsgn),a
 240+ C2B7              ;;TODO                        ret
 241+ C2B7
 242+ C2B7
 243+ C2B7                                 ;     include "./Maths/ADDHLDESignBC.asm"
 244+ C2B7
 245+ C2B7 7C           SunADDHLDESignedv3:     ld      a,h
 246+ C2B8 E6 80                                and     SignOnly8Bit
 247+ C2BA 47                                   ld      b,a                         ;save sign bit in b
 248+ C2BB AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 249+ C2BC                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 249+ C2BC FA D7 C2    >                        jp		m, .SunADDHLDEOppSGN
 250+ C2BF 78           .SunADDHLDESameSigns:   ld      a,b
 251+ C2C0 B2                                   or      d
 252+ C2C1                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 252+ C2C1 FA C9 C2    >                        jp		m, .SunADDHLDESameNeg
 253+ C2C4                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 253+ C2C4 FA C9 C2    >                        jp		m, .SunADDHLDESameNeg
 254+ C2C7 19                                   add     hl,de
 255+ C2C8 C9                                   ret
 256+ C2C9 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 257+ C2CA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 258+ C2CC 67                                   ld      h,a
 259+ C2CD 7A                                   ld      a,d
 260+ C2CE E6 7F                                and     SignMask8Bit
 261+ C2D0 57                                   ld      d,a
 262+ C2D1 19                                   add     hl,de
 263+ C2D2 3E 80                                ld      a,SignOnly8Bit
 264+ C2D4 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 265+ C2D5 67                                   ld      h,a
 266+ C2D6 C9                                   ret
 267+ C2D7 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 268+ C2D8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 269+ C2DA 67                                   ld      h,a
 270+ C2DB 7A                                   ld      a,d
 271+ C2DC E6 7F                                and     SignMask8Bit
 272+ C2DE 57                                   ld      d,a
 273+ C2DF B7                                   or      a
 274+ C2E0 ED 52                                sbc     hl,de
 275+ C2E2 38 04                                jr      c,.SunADDHLDEOppInvert
 276+ C2E4 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 277+ C2E5 B4                                   or      h
 278+ C2E6 67                                   ld      h,a                         ; set the previou sign value
 279+ C2E7 C9                                   ret
 280+ C2E8              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 280+ C2E8 AF          >                    xor a
 280+ C2E9 95          >                    sub l
 280+ C2EA 6F          >                    ld l,a
 280+ C2EB 9F          >                    sbc a,a
 280+ C2EC 94          >                    sub h
 280+ C2ED 67          >                    ld h,a
 281+ C2EE 78                                   ld      a,b
 282+ C2EF EE 80                                xor     SignOnly8Bit                ; flip sign bit
 283+ C2F1 B4                                   or      h
 284+ C2F2 67                                   ld      h,a                         ; recover sign
 285+ C2F3 C9                                   ret
 286+ C2F4
 287+ C2F4              ; we could cheat, flip the sign of DE and just add but its not very optimised
 288+ C2F4 7C           .SunSUBHLDESignedv3:        ld      a,h
 289+ C2F5 E6 80                                and     SignOnly8Bit
 290+ C2F7 47                                   ld      b,a                         ;save sign bit in b
 291+ C2F8 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 292+ C2F9                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 292+ C2F9 FA 27 C3    >                        jp		m, .SunSUBHLDEOppSGN
 293+ C2FC 78           .SunSUBHLDESameSigns:       ld      a,b
 294+ C2FD B2                                   or      d
 295+ C2FE                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 295+ C2FE FA 08 C3    >                        jp		m, .SunSUBHLDESameNeg
 296+ C301 B7                                   or      a
 297+ C302 ED 52                                sbc     hl,de
 298+ C304                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 298+ C304 FA 1B C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 299+ C307 C9                                   ret
 300+ C308 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 301+ C309 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 302+ C30B 67                                   ld      h,a
 303+ C30C 7A                                   ld      a,d
 304+ C30D E6 7F                                and     SignMask8Bit
 305+ C30F 57                                   ld      d,a
 306+ C310 B7                                   or      a
 307+ C311 ED 52                                sbc     hl,de
 308+ C313                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 308+ C313 FA 1B C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 309+ C316 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 310+ C317 F6 80                                or      SignOnly8Bit
 311+ C319 67                                   ld      h,a
 312+ C31A C9                                   ret
 313+ C31B              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 313+ C31B AF          >                    xor a
 313+ C31C 95          >                    sub l
 313+ C31D 6F          >                    ld l,a
 313+ C31E 9F          >                    sbc a,a
 313+ C31F 94          >                    sub h
 313+ C320 67          >                    ld h,a
 314+ C321 78                                   ld      a,b
 315+ C322 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 316+ C324 B4                                   or      h
 317+ C325 67                                   ld      h,a                         ; recover sign
 318+ C326 C9                                   ret
 319+ C327 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 320+ C328 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 321+ C329 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 322+ C32B 67                                   ld      h,a
 323+ C32C 7A                                   ld      a,d
 324+ C32D E6 7F                                and     SignMask8Bit
 325+ C32F 57                                   ld      d,a
 326+ C330 19                                   add     hl,de
 327+ C331 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 328+ C332 B4                                   or      h
 329+ C333 67                                   ld      h,a                         ; set the previou sign value
 330+ C334 C9                                   ret
 331+ C335
 332+ C335
 333+ C335              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 333+ C335 CB 7C       >                        bit 	7,h
 333+ C337 C2 48 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 334+ C33A              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 334+ C33A CB 7C       >                        bit 	7,h
 334+ C33C C2 48 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 335+ C33F ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 336+ C341 C9                                   ret
 337+ C342 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 338+ C344 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 339+ C345 CB FA                                set     7,d
 340+ C347 C9                                   ret
 341+ C348 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 342+ C34A                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 342+ C34A CB 7A       >                        bit 	7,d
 342+ C34C C2 54 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 343+ C34F ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 344+ C351 CB FC                                set     7,h
 345+ C353 C9                                   ret
 346+ C354 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 347+ C356 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 348+ C357 CB FA                                set     7,d
 349+ C359 CB FC                                set     7,h
 350+ C35B C9                                   ret
 351+ C35C
 352+ C35C
 353+ C35C                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C35C              TransposeSXX12BySunToSXX15:
   2++C35C 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C35F 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C360 E6 80                                and		$80									; check sign bit on high byte
   5++C362 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C363                                      ;110921 debugld      h,0
   7++C363 7C                                   ld      a,h
   8++C364 E6 7F                                and     $7F
   9++C366 67                                   ld      h,a
  10++C367                                      ;110921 debugld      h,0
  11++C367 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C36B 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C36E E6 80                                and		$80									; make sure we only have bit 7
  14++C370 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C371 CD FF 8E                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C374 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C375 67                                   ld		h,a
  18++C376 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C379              ; ..................................
  20++C379 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C37C 7C                                   ld		a,h
  22++C37D E6 80                                and		$80
  23++C37F 47                                   ld		b,a
  24++C380                                      ;110921 debugld      h,0
  25++C380 7C                                   ld      a,h
  26++C381 E6 7F                                and     $7F
  27++C383 67                                   ld      h,a
  28++C384                                      ;110921 debugld      h,0
  29++C384 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C388 3A 15 C0                             ld		a,(SBnKysgn)
  31++C38B E6 80                                and		$80									; make sure we only have bit 7
  32++C38D 4F                                   ld		c,a
  33++C38E CD FF 8E                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C391 B4                                   or		h									; combine sign in A with H
  35++C392 67                                   ld		h,a
  36++C393 22 7A C0                             ld		(SBnKYScaled),hl
  37++C396              ; ..................................
  38++C396 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C399 7C                                   ld		a,h
  40++C39A E6 80                                and		$80
  41++C39C 47                                   ld		b,a
  42++C39D                                      ;110921 debugld      h,0
  43++C39D 7C                                   ld      a,h
  44++C39E E6 7F                                and     $7F
  45++C3A0 67                                   ld      h,a
  46++C3A1                                      ;110921 debugld      h,0
  47++C3A1 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C3A5 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C3A8 E6 80                                and		$80									; make sure we only have bit 7
  50++C3AA 4F                                   ld		c,a
  51++C3AB CD FF 8E                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C3AE B4                                   or		h									; combine sign in A with H
  53++C3AF 67                                   ld		h,a
  54++C3B0 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C3B2 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C3B4 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C3B6 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C3B8 7D                                   ld      a,l                                 ; get low byte now
  59++C3B9                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C3B9 FE 04       >                        cp      4
  59++C3BB DA CA C3    >                        jp		c, .ClampZto4
  60++C3BE 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C3C1 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C3C2 32 A6 7E                             ld      (varT),a
  63++C3C5 7C                                   ld		a,h
  64++C3C6 32 89 7E                             ld      (varU),a
  65++C3C9 C9                                   ret
  66++C3CA              ; This is where we limit 4 to a minimum of 4
  67++C3CA 21 04 00     .ClampZto4:             ld		hl,4
  68++C3CD 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C3D0 7D                                   ld		a,l
  70++C3D1 32 A6 7E                             ld      (varT),a                            ;                                                                           ;;;
  71++C3D4 7C                                   ld		a,h
  72++C3D5 32 89 7E                             ld      (varU),a 						; compatibility for now
  73++C3D8 C9                                   ret
  74++C3D9
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 354+ C3D9
 355+ C3D9
 356+ C3D9 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 357+ C3DD 2A 78 C0                             ld			hl,(SBnKXScaled)
 358+ C3E0 ED 5B 7A C0                          ld			de,(SBnKYScaled)
 359+ C3E4 78           .SetABSbc:              ld			a,b
 360+ C3E5 DD 67                                ld			ixh,a
 361+ C3E7 E6 7F                                and			SignMask8Bit
 362+ C3E9 47                                   ld			b,a									; bc = ABS bc
 363+ C3EA 7C           .SetABShl:              ld			a,h
 364+ C3EB DD 6F                                ld			ixl,a
 365+ C3ED E6 7F                                and			SignMask8Bit
 366+ C3EF 67                                   ld			h,a									; hl = ABS hl
 367+ C3F0 7A           .SetABSde:              ld			a,d
 368+ C3F1 FD 67                                ld			iyh,a
 369+ C3F3 E6 7F                                and			SignMask8Bit
 370+ C3F5 57                                   ld			d,a									; de = ABS de
 371+ C3F6 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 372+ C3F7 B4                                   or			h                                   ; XX15+1	\ x hi
 373+ C3F8 B2                                   or			d                                   ; XX15+4	\ y hi
 374+ C3F9 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 375+ C3FB                                      ShiftHLRight1
 375+ C3FB CB 3C       >			   srl h
 375+ C3FD CB 1D       >			   rr  l
 376+ C3FF                                      ShiftDERight1
 376+ C3FF CB 3A       >			   srl d
 376+ C401 CB 1B       >			   rr  e
 377+ C403                                      ShiftBCRight1
 377+ C403 CB 38       >			   srl b
 377+ C405 CB 19       >			   rr  c
 378+ C407 C3 F6 C3                             jp          .ScaleNodeTo8BitLoop
 379+ C40A              ; now we have scaled values we have to deal with sign
 380+ C40A DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 381+ C40C E6 80                                and			SignOnly8Bit
 382+ C40E B0                                   or			b
 383+ C40F 47                                   ld			b,a
 384+ C410 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 385+ C412 E6 80                                and			SignOnly8Bit
 386+ C414 B4                                   or			h
 387+ C415 67                                   ld			h,a
 388+ C416 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 389+ C418 E6 80                                and			SignOnly8Bit
 390+ C41A B2                                   or			d
 391+ C41B 57                                   ld			d,a
 392+ C41C ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 393+ C420 22 78 C0                             ld			(SBnKXScaled),hl
 394+ C423 ED 53 7A C0                          ld			(SBnKYScaled),de
 395+ C427 78                                   ld			a,b
 396+ C428 32 89 7E                             ld			(varU),a
 397+ C42B 79                                   ld			a,c
 398+ C42C 32 A6 7E                             ld			(varT),a
 399+ C42F C9                                   ret
 400+ C430
 401+ C430              ;--------------------------------------------------------------------------------------------------------
 402+ C430              ;;;;X = normal scale
 403+ C430              ;;;;ZtempHi = zhi
 404+ C430              ;;;;......................................................
 405+ C430              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 406+ C430              ;;;;  Loop                                              ::LL90
 407+ C430              ;;;;     inc X
 408+ C430              ;;;;     divide X, Y & ZtempHiLo by 2
 409+ C430              ;;;;  Until ZtempHi = 0
 410+ C430              ;;;;......................................................
 411+ C430              ;-LL21---------------------------------------------------------------------------------------------------
 412+ C430              ;                        include "./Universe/NormaliseTransMat.asm"
 413+ C430              ;-LL91---------------------------------------------------------------------------------------------------
 414+ C430
 415+ C430              ; Now we have
 416+ C430              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 417+ C430              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 418+ C430              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 419+ C430              ;
 420+ C430              ;--------------------------------------------------------------------------------------------------------
 421+ C430              ;--------------------------------------------------------------------------------------------------------
 422+ C430              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 423+ C430              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 424+ C430              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 425+ C430              ; Returns
 426+ C430              ;
 427+ C430              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 428+ C430              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 429+ C430              ;
 430+ C430              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 431+ C430              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 432+ C430              ;
 433+ C430              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 434+ C430              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 435+ C430
 436+ C430
 437+ C430               ; TESTEDOK
 438+ C430              SXX12DotOneRow:
 439+ C430              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 439+ C430 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 439+ C433 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 439+ C434 7E          >                        ld      a,(hl)                        ; A = XX16 element
 439+ C435 57          >                        ld      d,a
 439+ C436 ED 30       >                        mul
 439+ C438 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 439+ C439 32 A6 7E    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 440+ C43C 23                                   inc     hl                                  ; move to sign byte
 441+ C43D              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 441+ C43D 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 441+ C440 AE          >                        xor     (hl)
 442+ C441 32 8C 7E                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 443+ C444 23                                   inc     hl
 444+ C445              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 444+ C445 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 444+ C448 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 444+ C449 7E          >                        ld      a,(hl)                        ; A = XX16 element
 444+ C44A 57          >                        ld      d,a
 444+ C44B ED 30       >                        mul
 444+ C44D 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 444+ C44E 32 8A 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 445+ C451                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 445+ C451 3A A6 7E    >                        ld       a,(varT)
 445+ C454 32 8B 7E    >                        ld       (varR),a
 446+ C457 23                                   inc     hl
 447+ C458                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 447+ C458 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 447+ C45B AE          >                        xor     (hl)
 448+ C45C              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 449+ C45C E5           SSTequSRplusAQ           push    hl
 450+ C45D CD 6C 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 451+ C460 E1                                   pop     hl
 452+ C461 32 A6 7E                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 453+ C464 23                                   inc     hl
 454+ C465              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 454+ C465 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 454+ C468 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 454+ C469 7E          >                        ld      a,(hl)                        ; A = XX16 element
 454+ C46A 57          >                        ld      d,a
 454+ C46B ED 30       >                        mul
 454+ C46D 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 454+ C46E 32 8A 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 455+ C471                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 455+ C471 3A A6 7E    >                        ld       a,(varT)
 455+ C474 32 8B 7E    >                        ld       (varR),a
 456+ C477 23                                   inc     hl
 457+ C478                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 457+ C478 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 457+ C47B AE          >                        xor     (hl)
 458+ C47C              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 459+ C47C CD 6C 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 460+ C47F              ; Now we exit with A = result S = Sign
 461+ C47F C9                                   ret
 462+ C480
 463+ C480
 464+ C480
 465+ C480              ;--------------------------------------------------------------------------------------------------------
 466+ C480                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C480              CopySXX12ScaledToSXX18:
   2++C480              CopyResultToSDrawCam:
   3++C480                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C480 3A 7E C0    >                        ld       a,(SXX12)
   3++C483 32 6C C0    >                        ld       (SXX18),a
   4++C486                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C486 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C489 32 6E C0    >                        ld       (SXX18+2),a
   5++C48C                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C48C 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C48F 32 6F C0    >                        ld       (SXX18+3),a
   6++C492                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C492 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C495 32 71 C0    >                        ld       (SXX18+5),a
   7++C498                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C498 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C49B 32 72 C0    >                        ld       (SXX18+6),a
   8++C49E                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C49E 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C4A1 32 74 C0    >                        ld       (SXX18+8),a
   9++C4A4 C9                   ret
  10++C4A5
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 467+ C4A5              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 468+ C4A5              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 469+ C4A5              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 470+ C4A5              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 471+ C4A5              ;--------------------------------------------------------------------------------------------------------
 472+ C4A5              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 473+ C4A5              ;--------------------------------------------------------------------------------------------------------
 474+ C4A5
 475+ C4A5 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 476+ C4A7 F8                                   ret     m
 477+ C4A8 21 78 C0                             ld      hl,SBnKXScaled
 478+ C4AB CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 479+ C4AD 23                                   inc     hl                          ; looking at SunXX15 x sign now
 480+ C4AE 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 481+ C4AF CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 482+ C4B1 23                                   inc     hl                          ; looking at SunXX15 y sign now
 483+ C4B2 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 484+ C4B3 CB 3E                                srl     (hl)
 485+ C4B5 C3 A5 C4                             jp      ScaleDownSXX15byIXH
 486+ C4B8 C9                                   ret
 487+ C4B9
 488+ C4B9 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 489+ C4BC CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 490+ C4BE 23                                   inc     hl                          ; looking at XX18 x sign now
 491+ C4BF 23                                   inc     hl                          ; looking at XX18 y Lo now
 492+ C4C0 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 493+ C4C2 23                                   inc     hl                          ; looking at XX18 y sign now
 494+ C4C3 23                                   inc     hl                          ; looking at XX18 z Lo now
 495+ C4C4 CB 3E                                srl     (hl)
 496+ C4C6 C9                                   ret
 497+ C4C7
 498+ C4C7              ; ......................................................                                                         ;;;
 499+ C4C7
 500+ C4C7
 501+ C4C7
 502+ C4C7
 503+ C4C7              ; Pitch and roll are 2 phases
 504+ C4C7              ; 1 - we apply our pitch and roll to the ship position
 505+ C4C7              ;       x -> x + alpha * (y - alpha * x)
 506+ C4C7              ;       y -> y - alpha * x - beta * z
 507+ C4C7              ;       z -> z + beta * (y - alpha * x - beta * z)
 508+ C4C7              ; which can be simplified as:
 509+ C4C7              ;       1. K2 = y - alpha * x
 510+ C4C7              ;       2. z = z + beta * K2
 511+ C4C7              ;       3. y = K2 - beta * z
 512+ C4C7              ;       4. x = x + alpha * y
 513+ C4C7              ; 2 - we apply our patch and roll to the ship orientation
 514+ C4C7              ;      Roll calculations:
 515+ C4C7              ;
 516+ C4C7              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 517+ C4C7              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 518+ C4C7              ;      Pitch calculations:
 519+ C4C7              ;
 520+ C4C7              ;        nosev_y = nosev_y - beta * nosev_z_hi
 521+ C4C7              ;        nosev_z = nosev_z + beta * nosev_y_hi
 522+ C4C7
 523+ C4C7
 524+ C4C7                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4C7
   2++C4C7              ; Full version
   3++C4C7              ; 1. K2 = y - alpha * x
   4++C4C7              ; 2. z = z + beta * K2
   5++C4C7              ; 3. y = K2 - beta * z
   6++C4C7              ; 4. x = x + alpha * y
   7++C4C7
   8++C4C7
   9++C4C7
  10++C4C7              ; SunrollWork holds Alpha intermidate results
  11++C4C7              ;  1. K2 = y - alpha * x
  12++C4C7              ;  2. z = z + beta * K2
  13++C4C7              ;  3. y = K2 - beta * z
  14++C4C7              ;  4. x = x + alpha * y
  15++C4C7              ;.... or
  16++C4C7              ;  2. z = z + (beta * (y - alpha * x))
  17++C4C7              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4C7              ;  4. x = x + (alpha * y)
  19++C4C7
  20++C4C7
  21++C4C7              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4C7              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4C7              ; Need to write a test routine for roll and pitchs
  24++C4C7 00 00 00 00  SunAlphaMulX            DS 4
  25++C4CB 00 00 00 00  SunAlphaMulY            DS 4
  26++C4CF 00 00 00 00  SunBetaMulZ             DS 4
  27++C4D3 00 00 00     SunK2                   DS 3
  28++C4D6
  29++C4D6 3A A3 7D     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C4D9 21 96 7D                             ld      hl,BETA
  31++C4DC B6                                   or      (hl)
  32++C4DD E6 7F                                and     SignMask8Bit
  33++C4DF CA 90 C5                             jp      z,.NoRotation
  34++C4E2 3A A3 7D     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C4E5 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C4E7 57                                   ld      d,a                         ; .
  37++C4E8 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C4EB 5F                                   ld      e,a                         ; .
  39++C4EC 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C4EF CD F9 91                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C4F2              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C4F2                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C4F2 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C4F3 32 C8 C4                             ld      (SunAlphaMulX+1),a
  45++C4F6 7B                                   ld      a,e
  46++C4F7 32 C9 C4                             ld      (SunAlphaMulX+2),a
  47++C4FA 7A                                   ld      a,d
  48++C4FB 32 CA C4                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C4FE ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C502 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C505 6F                                   ld      l,a                         ; .
  52++C506 ED 4B C9 C4                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C50A 3A C8 C4                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C50D 67                                   ld      h,a                         ; .
  55++C50E CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C511 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C512 32 D3 C4                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C515 ED 53 D4 C4                          ld      (SunK2+1),de                ;
  59++C519 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C51A 5F                                   ld      e,a                         ; .
  61++C51B 3A 96 7D                             ld      a,(BETA)                    ; D = BETA
  62++C51E 57                                   ld      d,a                         ; .
  63++C51F CD F9 91                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C522 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C526 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C529 67                                   ld      h,a                         ;
  67++C52A CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C52D ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C531 7D                                   ld      a,l                         ; .
  70++C532 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C535 3A 96 7D     .CalcBetaZ:             ld      a,(BETA)
  72++C538 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C53A 57                                   ld      d,a                         ; .
  74++C53B 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C53E 5F                                   ld      e,a                         ; .
  76++C53F 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C542 CD F9 91                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C545              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C545                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C545                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C545                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C545                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C545                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C545                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C545                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C545 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C547 65                                   ld      h,l
  88++C548 ED 5B D4 C4                          ld      de,(SunK2+1)                ; DEL = k2
  89++C54C 3A D3 C4                             ld      a,(SunK2)
  90++C54F 6F                                   ld      l,a
  91++C550 CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C553 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C557 7D                                   ld      a,l                         ; .
  94++C558 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C55B 3A A3 7D     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C55E 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C55F 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C562 5F                                   ld      e,a                         ; .
  99++C563 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C566 CD F9 91                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C569 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C56A 32 CB C4                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C56D 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C56E 32 CC C4                             ld      (SunAlphaMulY+1),a
 105++C571 7B                                   ld      a,e
 106++C572 32 CD C4                             ld      (SunAlphaMulY+2),a
 107++C575 7A                                   ld      a,d
 108++C576 32 CE C4                             ld      (SunAlphaMulY+3),a
 109++C579 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C57B 65                                   ld      h,l                         ; .
 111++C57C ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C580 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C583 6F                                   ld      l,a                         ; .
 114++C584 CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C587 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C588 63                                   ld      h,e                         ;
 117++C589 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C58C 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C58F C9                                   ret
 120++C590 3A 84 7E     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C593                                      ReturnIfAIsZero
 121++C593 A7          >                        and     a
 121++C594 C8          >                        ret     z
 122++C595 0E 00                                ld      c,0                         ;
 123++C597 67                                   ld      h,a                         ;
 124++C598 06 80                                ld      b,$80                       ;
 125++C59A ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C59E 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C5A1 6F                                   ld      l,a                         ; .
 128++C5A2 CD 5C 8F                             call    AddBCHtoDELsigned           ; update speed
 129++C5A5 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C5A9 7D                                   ld      a,l
 131++C5AA 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C5AD C9                                   ret
 133++C5AE              ;
 134++C5AE              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C5AE              ;                        ld      hl,BETA
 136++C5AE              ;                        or      (hl)
 137++C5AE              ;                        and     SignMask8Bit
 138++C5AE              ;                        ret     z
 139++C5AE              ;.CalcZ:                 ;break
 140++C5AE              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C5AE              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C5AE              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C5AE              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C5AE              ;                        ld      e,a                         ;
 145++C5AE              ;                        ld      hl,(SBnKxhi)                ;
 146++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C5AE              ;                        ld      a,d
 148++C5AE              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C5AE              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C5AE              ;                        ld      h,a
 151++C5AE              ;                        ld      bc,(SBnKyhi)
 152++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C5AE              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C5AE              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C5AE              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C5AE              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C5AE              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C5AE              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C5AE              ;                        ld      a,(SunRollResult)           ; .
 160++C5AE              ;                        ;ld      (SunRollResult2),a          ; .
 161++C5AE              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C5AE              ;                        ld      a,(BETA)                    ; get pitch
 163++C5AE              ;                        ld      d,a                         ; now D = BETA
 164++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C5AE              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C5AE              ;                        ld      a,(SBnKzlo)                 ;
 167++C5AE              ;                        ld      h,a                         ;
 168++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C5AE              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C5AE              ;                        ld      (SBnKzhi),de                ; .
 171++C5AE              ;                        ld      a,l                         ; .
 172++C5AE              ;                        ld      (SunZResult),a              ; .
 173++C5AE              ;                        ld      (SBnKzlo),a                 ; .
 174++C5AE              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C5AE              ;                        ld      e,l                         ;
 176++C5AE              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C5AE              ;                        ld      d,a                         ;
 178++C5AE              ;                        xor     SignOnly8Bit                ;
 179++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C5AE              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C5AE              ;                        ld      a,(SunRollResult)           ;
 182++C5AE              ;                        ld      h,a                         ;
 183++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C5AE              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C5AE              ;                        ld      a,l                         ;
 186++C5AE              ;                        ld      (SBnKylo),a                 ;
 187++C5AE              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C5AE              ;                        ld      e,l                         ;
 189++C5AE              ;                        ld      a,(ALPHA)
 190++C5AE              ;                        ld      d,a                         ; D = alpha
 191++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C5AE              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C5AE              ;                        ld      a,(SBnKxlo)                 ;
 194++C5AE              ;                        ld      h,a                         ;
 195++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C5AE              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C5AE              ;                        ld      a,h                         ;
 198++C5AE              ;                        ld      (SBnKxlo),a                 ;
 199++C5AE              ;                        ret
 200++C5AE              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 525+ C5AE              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 526+ C5AE
 527+ C5AE 00           SunOnScreen             DB 0
 528+ C5AF 00 00        cLineArrayPtr            DW 0
 529+ C5B1 00           LineCount               DB 0
 530+ C5B2 00           RaggedSize              DB 0
 531+ C5B3 00           MinYOffset              DB 0
 532+ C5B4 00           MaxYOffSet              DB 0
 533+ C5B5 00 00        SunScrnX                DW  0       ; signed
 534+ C5B7 00 00        SunScrnY                DW  0       ; signed
 535+ C5B9 00           SunRadius               DB  0       ; unsigned
 536+ C5BA              ; draw circle
 537+ C5BA
 538+ C5BA              ;
 539+ C5BA              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 540+ C5BA
 541+ C5BA 00 00 00 00  SunVarK                 DS 4
 542+ C5BE 00 00 00     SunVarP                 DS 3
 543+ C5C1 00           SunVarQ                 DS 1
 544+ C5C2 00           SunVarR                 DS 1
 545+ C5C3 00           SunVarS                 DS 1
 546+ C5C4 00           SunVarT                 DS 1
 547+ C5C5
 548+ C5C5              ; Optimisation
 549+ C5C5              ; if a <> 0
 550+ C5C5              ;       divide AH by CD
 551+ C5C5              ; if h <> 0
 552+ C5C5              ;      if c <> 0 return 0
 553+ C5C5              ;      else
 554+ C5C5              ;        divide HL by DE
 555+ C5C5              ; if l <>0
 556+ C5C5              ;      if c or d <> 0 return 0
 557+ C5C5              ;      else
 558+ C5C5              ;        divide l by e
 559+ C5C5              ;
 560+ C5C5 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 561+ C5C6 79                                   ld      a,c                         ; check for divide by zero
 562+ C5C7 B2                                   or      d                           ; .
 563+ C5C8 B3                                   or      e                           ; .
 564+ C5C9                                      JumpIfZero      .divideByZero       ; .
 564+ C5C9 CA E2 C5    >                        jp	z,.divideByZero
 565+ C5CC 78                                   ld      a,b                         ; get a back
 566+ C5CD                                      JumpIfAIsNotZero    .divideAHLbyCDE
 566+ C5CD A7          >                        and     a
 566+ C5CE C2 E9 C5    >                        jp	    nz,.divideAHLbyCDE
 567+ C5D1 7C           .AIsZero:               ld      a,h
 568+ C5D2                                      JumpIfAIsNotZero    .divideHLbyDE
 568+ C5D2 A7          >                        and     a
 568+ C5D3 C2 F0 C5    >                        jp	    nz,.divideHLbyDE
 569+ C5D6 7D           .HIsZero:               ld      a,l
 570+ C5D7                                      JumpIfAIsNotZero    .divideLbyE
 570+ C5D7 A7          >                        and     a
 570+ C5D8 C2 FF C5    >                        jp	    nz,.divideLbyE
 571+ C5DB              .resultIsZero:          ZeroA
 571+ C5DB AF          >                        xor a
 572+ C5DC 67                                   ld      h,a                        ; result is zero so set hlde
 573+ C5DD 6F                                   ld      l,a                        ; result is zero so set hlde
 574+ C5DE 54 5D                                ld      de,hl
 575+ C5E0                                      ClearCarryFlag
 575+ C5E0 B7          >                        or a
 576+ C5E1 C9                                   ret
 577+ C5E2 3E FF        .divideByZero:          ld      a,$FF
 578+ C5E4 67                                   ld      h,a
 579+ C5E5 6F                                   ld      l,a
 580+ C5E6 54 5D                                ld      de,hl
 581+ C5E8                                      SetCarryFlag
 581+ C5E8 37          >                        scf
 582+ C5E9              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 583+ C5E9              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 584+ C5E9 CD 40 90     .divideAHLbyCDE:        call    Div24by24
 585+ C5EC EB                                   ex      hl,de                         ; ahl is result
 586+ C5ED 79                                   ld      a,c                           ; ahl is result
 587+ C5EE                                      ClearCarryFlag
 587+ C5EE B7          >                        or a
 588+ C5EF
 589+ C5EF C9                                   ret
 590+ C5F0              ; AHL = 0hl/0de as A is zero
 591+ C5F0 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 592+ C5F1                                      JumpIfAIsNotZero   .resultIsZero
 592+ C5F1 A7          >                        and     a
 592+ C5F2 C2 DB C5    >                        jp	    nz,.resultIsZero
 593+ C5F5 44 4D                                ld      bc,hl
 594+ C5F7 CD 6B 96                             call    BC_Div_DE                   ; BC = HL/DE
 595+ C5FA 60 69                                ld      hl,bc
 596+ C5FC                                      ZeroA                               ; so we can set A to Zero
 596+ C5FC AF          >                        xor a
 597+ C5FD                                      ClearCarryFlag
 597+ C5FD B7          >                        or a
 598+ C5FE C9                                   ret
 599+ C5FF              ; AHL = 00l/00e as A and H are zero
 600+ C5FF 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 601+ C600 B2                                   or      d
 602+ C601                                      JumpIfAIsNotZero   .resultIsZero
 602+ C601 A7          >                        and     a
 602+ C602 C2 DB C5    >                        jp	    nz,.resultIsZero
 603+ C605 4B                                   ld      c,e
 604+ C606 5D                                   ld      e,l
 605+ C607 CD 2D 96                             call    E_Div_C
 606+ C60A 6F                                   ld      l,a
 607+ C60B                                      ZeroA
 607+ C60B AF          >                        xor a
 608+ C60C 67                                   ld      h,a
 609+ C60D                                      ClearCarryFlag
 609+ C60D B7          >                        or a
 610+ C60E C9                                   ret
 611+ C60F
 612+ C60F
 613+ C60F              ; Needs tuning for registers vs memroy
 614+ C60F 22 BE C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 615+ C612 32 C0 C5                             ld      (SunVarP+2),a
 616+ C615 ED 53 C1 C5                          ld      (SunVarQ),de
 617+ C619 79                                   ld      a,c
 618+ C61A 32 C3 C5                             ld      (SunVarS),a
 619+ C61D 3A BE C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 620+ C620 F6 01                                or      1
 621+ C622 32 BE C5                             ld      (SunVarP),a
 622+ C625 3A C0 C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 623+ C628 21 C3 C5                             ld      hl,SunVarS
 624+ C62B AE                                   xor     (hl)
 625+ C62C E6 80                                and     SignOnly8Bit
 626+ C62E 32 C4 C5                             ld      (SunVarT),a
 627+ C631 06 00                                ld      b,0                         ; b = y counter
 628+ C633 3A C0 C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 629+ C636 E6 7F                                and     SignMask8Bit                ; .
 630+ C638 2A BE C5                             ld      hl,(SunVarP)                ; shift P left
 631+ C63B              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 631+ C63B FE 40       >                        cp     64
 631+ C63D D2 4A C6    >                        jp		nc,.SunDV14
 632+ C640                                      ShiftHLLeft1                        ;
 632+ C640 CB 25       >			   sla l
 632+ C642 CB 14       >			   rl  h
 633+ C644 CB 17                                rl      a                           ;
 634+ C646 04                                   inc     b                           ; increase shift count
 635+ C647 C3 3B C6                             jp      .SunDVL9
 636+ C64A 22 BE C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 637+ C64D 32 C0 C5                             ld      (SunVarP+2),a
 638+ C650 3A C3 C5                             ld      a,(SunVarS)                 ; a= ABS varS
 639+ C653 E6 7F                                and     SignMask8Bit
 640+ C655 2A C1 C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 641+ C658 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 642+ C659                                      ShiftHLLeft1                        ; varQRA  shift left
 642+ C659 CB 25       >			   sla l
 642+ C65B CB 14       >			   rl  h
 643+ C65D CB 17                                rl      a                           ;
 644+ C65F F2 58 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 645+ C662 22 C1 C5                             ld      (SunVarQ),hl                ; save QR
 646+ C665 32 C3 C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 647+ C668                                      ;ld      a,h
 648+ C668                                      ;ld      (varQ),a
 649+ C668 4F                                   ld      c,a
 650+ C669 3A C0 C5                             ld      a,(SunVarP+2)
 651+ C66C C5                                   push    bc                          ; save shift counter in b
 652+ C66D CD DF 95                             call    DIV16Amul256dCUNDOC
 653+ C670                                      ;call    RequAmul256divQ
 654+ C670 79                                   ld      a, c
 655+ C671 32 8B 7E                             ld      (varR),a
 656+ C674 C1                                   pop     bc                          ; retrieve shift counter
 657+ C675 21 00 00                             ld      hl,0                        ; set K to 0
 658+ C678 22 BA C5                             ld      (SunVarK),hl                ; .
 659+ C67B 22 BC C5                             ld      (SunVarK+2),hl              ; .
 660+ C67E CB 78                                bit     7,b                         ; is counter positive
 661+ C680 28 32                                jr      z,.SunDV12                  ; .
 662+ C682 3A 8B 7E                             ld      a,(varR)                    ;
 663+ C685 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 664+ C687 21 BB C5                             ld      hl,SunVarK+1                ; .
 665+ C68A CB 16                                rl      (hl)                        ; .
 666+ C68C 23                                   inc     hl                          ; .
 667+ C68D CB 16                                rl      (hl)                        ; .
 668+ C68F 23                                   inc     hl                          ; .
 669+ C690 CB 16                                rl      (hl)                        ; .
 670+ C692 04                                   inc     b
 671+ C693 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 672+ C695 32 BA C5                             ld      (SunVarK),a
 673+ C698 3A BD C5                             ld      a,(SunVarK+3)
 674+ C69B 21 C4 C5                             ld      hl,SunVarT
 675+ C69E B6                                   or      (hl)
 676+ C69F 32 BD C5                             ld      (SunVarK+3),a
 677+ C6A2 C9                                   ret
 678+ C6A3 3A 8B 7E     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 679+ C6A6 32 BA C5                             ld      (SunVarK),a
 680+ C6A9 3A BD C5                             ld      a,(SunVarK+3)
 681+ C6AC 21 C4 C5                             ld      hl,SunVarT
 682+ C6AF B6                                   or      (hl)
 683+ C6B0 32 BD C5                             ld      (SunVarK+3),a
 684+ C6B3 C9                                   ret
 685+ C6B4 78           .SunDV12:               ld      a,b
 686+ C6B5 A7                                   and     a
 687+ C6B6 28 EB                                jr      z,.SunDV13
 688+ C6B8 3A 8B 7E                             ld      a,(varR)                    ; it probably is already R so need to test
 689+ C6BB CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 690+ C6BD 05                                   dec     b
 691+ C6BE 20 FB                                jr      nz,.SunDVL10
 692+ C6C0 32 BA C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 693+ C6C3 3A C4 C5                             ld      a,(SunVarT)
 694+ C6C6 32 BD C5                             ld      (SunVarK+3),a
 695+ C6C9 C9                                   ret
 696+ C6CA
 697+ C6CA
 698+ C6CA
 699+ C6CA 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 700+ C6CB ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 701+ C6CF 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 702+ C6D2 FD 67                                ld      iyh,a                       ; save sign
 703+ C6D4                                      ClearSignBitA
 703+ C6D4 E6 7F       >                        and     SignMask8Bit
 704+ C6D6                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 705+ C6D6              ;                        ld      c,a                         ;
 706+ C6D6 5A                                   ld      e,d
 707+ C6D7 57                                   ld      d,a
 708+ C6D8 0E 00                                ld      c,0
 709+ C6DA                                      ; added above to correct positioning as in reality its X/(Z/256)
 710+ C6DA 78                                   ld      a,b                         ; restore sign byte
 711+ C6DB FD 6F                                ld      iyl,a                       ; save sign
 712+ C6DD                                      ClearSignBitA
 712+ C6DD E6 7F       >                        and     SignMask8Bit
 713+ C6DF CD C5 C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 714+ C6E2              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 714+ C6E2 A7          >                        and     a
 714+ C6E3 C2 00 C7    >                        jp	    nz,.IsOffScreen
 715+ C6E6                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 715+ C6E6 7C          >                        ld      a,h
 715+ C6E7 E6 80       >                        and     SignOnly8Bit
 715+ C6E9 C2 00 C7    >                        jp      nz,.IsOffScreen
 716+ C6EC 7C                                   ld      a,h
 717+ C6ED                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 717+ C6ED FE 04       >                        cp    4
 717+ C6EF D0          >                        ret	 nc
 718+ C6F0 FD 7C                                ld      a,iyh                       ; now deal with the sign
 719+ C6F2 FD AD                                xor     iyl
 720+ C6F4                                      SignBitOnlyA                        ; a= resultant sign
 720+ C6F4 E6 80       >                        and     SignOnly8Bit
 721+ C6F6 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 722+ C6F8              .XIsNegative:           NegHL                               ; make 2's c as negative
 722+ C6F8 AF          >                    xor a
 722+ C6F9 95          >                    sub l
 722+ C6FA 6F          >                    ld l,a
 722+ C6FB 9F          >                    sbc a,a
 722+ C6FC 94          >                    sub h
 722+ C6FD 67          >                    ld h,a
 723+ C6FE              .calculatedVert:        ClearCarryFlag
 723+ C6FE B7          >                        or a
 724+ C6FF C9                                   ret
 725+ C700 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 726+ C703 FD 7C                                ld      a,iyh
 727+ C705 FD AD                                xor     iyl
 728+ C707                                      SignBitOnlyA
 728+ C707 E6 80       >                        and     SignOnly8Bit
 729+ C709 28 02                                jr      z,.calculatedOffScreen
 730+ C70B 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 731+ C70C 23                                   inc     hl                          ; .
 732+ C70D              .calculatedOffScreen:   SetCarryFlag
 732+ C70D 37          >                        scf
 733+ C70E C9                                   ret
 734+ C70F
 735+ C70F
 736+ C70F              ; .........................................................................................................................
 737+ C70F              ; we only hit this if z is positive so we can ignore signs
 738+ C70F ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 739+ C713 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 740+ C716 57                                   ld      d,a                         ;
 741+ C717 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 742+ C71A CD 0B 95                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 743+ C71D B4                                   or      h                           ; if A or H are not 0 then max Radius
 744+ C71E                                      JumpIfAIsZero  .SaveRadius
 744+ C71E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 744+ C71F CA 24 C7    >                        jp	    z, .SaveRadius
 745+ C722 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 746+ C724 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 747+ C725 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 748+ C727 32 B9 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 749+ C72A 5F                                   ld      e,a                         ; as later code expects it to be in e
 750+ C72B C9                                   ret
 751+ C72C
 752+ C72C              ; Shorter version when sun does not need to be processed to screen
 753+ C72C 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 754+ C72F 2A 10 C0                             ld      hl,(SBnKxlo)
 755+ C732 CD CA C6                             call    SunProcessVertex
 756+ C735 22 19 C0                             ld      (SunCompassX),hl
 757+ C738 3A 15 C0                             ld      a,(SBnKysgn)
 758+ C73B 2A 13 C0                             ld      hl,(SBnKylo)
 759+ C73E CD CA C6                             call    SunProcessVertex
 760+ C741 22 1B C0                             ld      (SunCompassY),hl
 761+ C744 C9                                   ret
 762+ C745
 763+ C745                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 764+ C745 CD D6 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 765+ C748 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 766+ C74B                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 766+ C74B FE 30       >                        cp     48
 766+ C74D D2 2C C7    >                        jp		nc,SunUpdateCompass
 767+ C750 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 768+ C753 B6                                   or      (hl)
 769+ C754                                      JumpIfAIsZero       SunUpdateCompass
 769+ C754 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 769+ C755 CA 2C C7    >                        jp	    z, SunUpdateCompass
 770+ C758 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 771+ C75B 2A 10 C0                             ld      hl,(SBnKxlo)
 772+ C75E CD CA C6                             call    SunProcessVertex            ; now returns carry set for failure
 773+ C761 22 19 C0                             ld      (SunCompassX),hl
 774+ C764 D8                                   ret     c
 775+ C765 1E 80        .calculatedX:           ld      e,ScreenCenterX
 776+ C767 16 00                                ld      d,0
 777+ C769                                      ClearCarryFlag
 777+ C769 B7          >                        or a
 778+ C76A ED 5A                                adc     hl,de
 779+ C76C                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 780+ C76C 22 B5 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 781+ C76F 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 782+ C772 2A 13 C0                             ld      hl,(SBnKylo)
 783+ C775 CD CA C6                             call    SunProcessVertex            ; now returns carry set for failure
 784+ C778 22 1B C0                             ld      (SunCompassY),hl
 785+ C77B D8                                   ret     c
 786+ C77C 1E 60        .calculatedY:           ld      e,ScreenCenterY
 787+ C77E 16 00                                ld      d,0
 788+ C780 EB                                   ex      de,hl
 789+ C781                                      ClearCarryFlag
 789+ C781 B7          >                        or a
 790+ C782 ED 52                                sbc     hl,de
 791+ C784                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 792+ C784 22 B7 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 793+ C787              ; .........................................................................................................................
 794+ C787 CD 0F C7                             call    SunCalculateRadius
 795+ C78A              ; .........................................................................................................................
 796+ C78A 2A B5 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 797+ C78D FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 798+ C790 16 00                                ld      d,0                         ; e still holds radius
 799+ C792 7C                                   ld      a,h
 800+ C793                                      JumpOnLeadSignSet   h,.CheckXNegative
 800+ C793 7C          >                        ld      a,h
 800+ C794 E6 80       >                        and     SignOnly8Bit
 800+ C796 C2 AC C7    >                        jp      nz,.CheckXNegative
 801+ C799 7C           .CheckXPositive:        ld      a,h
 802+ C79A                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 802+ C79A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 802+ C79B CA B5 C7    >                        jp	    z, .XOnScreen
 803+ C79E 16 00                                ld      d,0                         ; de = radius
 804+ C7A0                                      ClearCarryFlag
 804+ C7A0 B7          >                        or a
 805+ C7A1 ED 52                                sbc     hl,de
 806+ C7A3 FA B5 C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 807+ C7A6 7C                                   ld      a,h
 808+ C7A7                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 808+ C7A7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 808+ C7A8 CA B5 C7    >                        jp	    z, .XOnScreen
 809+ C7AB C9                                   ret                                 ; None of the X coordinates are on screen
 810+ C7AC 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 811+ C7AE                                      ClearCarryFlag
 811+ C7AE B7          >                        or a
 812+ C7AF ED 5A                                adc     hl,de                       ; so we have hl - de
 813+ C7B1 F2 B5 C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 814+ C7B4 C9                                   ret                                 ; else x is totally off the left side of the screen
 815+ C7B5              ; .........................................................................................................................
 816+ C7B5 2A B7 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 817+ C7B8                                      JumpOnLeadSignSet   h,.CheckYNegative
 817+ C7B8 7C          >                        ld      a,h
 817+ C7B9 E6 80       >                        and     SignOnly8Bit
 817+ C7BB C2 DC C7    >                        jp      nz,.CheckYNegative
 818+ C7BE 7C           .CheckYPositive:        ld      a,h
 819+ C7BF                                      JumpIfAIsNotZero   .PosYCheck2
 819+ C7BF A7          >                        and     a
 819+ C7C0 C2 C9 C7    >                        jp	    nz,.PosYCheck2
 820+ C7C3 7D                                   ld      a,l
 821+ C7C4 E6 80                                and     %10000000
 822+ C7C6 CA E5 C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 823+ C7C9 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 824+ C7CB                                      ClearCarryFlag
 824+ C7CB B7          >                        or a
 825+ C7CC ED 52                                sbc     hl,de
 826+ C7CE FA E5 C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 827+ C7D1 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 828+ C7D2                                      ReturnIfANotZero                    ; .
 828+ C7D2 A7          >                        and     a
 828+ C7D3 C0          >                        ret     nz
 829+ C7D4 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 830+ C7D5 E6 80                                and     %10000000                   ; .
 831+ C7D7                                      ReturnIfANotZero                    ; .
 831+ C7D7 A7          >                        and     a
 831+ C7D8 C0          >                        ret     nz
 832+ C7D9 C3 E5 C7                             jp      YOnScreen                  ; so Y at least spans
 833+ C7DC 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 834+ C7DE                                      ClearCarryFlag
 834+ C7DE B7          >                        or a
 835+ C7DF ED 5A                                adc     hl,de                       ; so we have hl - de
 836+ C7E1 F2 E5 C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 837+ C7E4 C9                                   ret                                 ; else never gets above 0 so return
 838+ C7E5              ; .........................................................................................................................
 839+ C7E5 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 840+ C7E8 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 841+ C7EB 3E 00                                ld		a,0
 842+ C7ED CD 26 7D                             call	memfill_dma
 843+ C7F0              ; .........................................................................................................................
 844+ C7F0 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 845+ C7F3 3A B9 C5                             ld      a,(SunRadius)               ; get readius
 846+ C7F6 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 847+ C7F8                                      FlipCarryFlag
 847+ C7F8 3F          >                        ccf
 848+ C7F9 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 849+ C7FB FE 28                                cp      40
 850+ C7FD                                      FlipCarryFlag
 850+ C7FD 3F          >                        ccf
 851+ C7FE CB 13                                rl      e
 852+ C800 FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 853+ C802                                      FlipCarryFlag
 853+ C802 3F          >                        ccf
 854+ C803 CB 13                                rl     e
 855+ C805 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 856+ C806 32 B2 C5                             ld      (RaggedSize),a
 857+ C809              ; .........................................................................................................................
 858+ C809 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 859+ C80C 22 A3 C1                             ld      (LineArrayPtr),hl
 860+ C80F AF                                   xor     a
 861+ C810 32 B1 C5                             ld      (LineCount),a
 862+ C813              ; .........................................................................................................................
 863+ C813 2A B7 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 864+ C816 3A B9 C5                             ld      a,(SunRadius)
 865+ C819 5F                                   ld      e,a
 866+ C81A 16 00                                ld      d,0
 867+ C81C                                      ClearCarryFlag
 867+ C81C B7          >                        or a
 868+ C81D ED 52                                sbc     hl,de
 869+ C81F F2 25 C8                             jp      p,.DoneMinY
 870+ C822 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 871+ C825              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 871+ C825 7C          >                        ld      a, h
 871+ C826 A7          >                        and     a
 871+ C827 C0          >                        ret     nz
 872+ C828 7D                                   ld      a,l                         ; check if l > 127
 873+ C829 E6 80                                and     SignOnly8Bit                ; .
 874+ C82B C0                                   ret     nz                          ; if bit is set then > 128
 875+ C82C 7D           .SetMinY:               ld      a,l
 876+ C82D 32 B3 C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 877+ C830 2A B7 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 878+ C833 3A B9 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 879+ C836 16 00                                ld      d,0                         ; .
 880+ C838 5F                                   ld      e,a                         ; .
 881+ C839                                      ClearCarryFlag                      ; .
 881+ C839 B7          >                        or a
 882+ C83A ED 5A                                adc     hl,de                       ; .
 883+ C83C 7C                                   ld      a,h
 884+ C83D A7                                   and     a
 885+ C83E 28 06                                jr      z,.YHiOK
 886+ C840 21 7F 00     .YHiGTE127:             ld      hl,127
 887+ C843 C3 4F C8                             jp      .SetMaxY
 888+ C846 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 889+ C847 E6 80                                and     SignOnly8Bit                ; .
 890+ C849 CA 4F C8                             jp      z,.SetMaxY
 891+ C84C 21 7F 00                             ld      hl,127
 892+ C84F 7D           .SetMaxY                ld      a,l
 893+ C850 32 B4 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 894+ C853 CD 5A C8                             call    SunDrawCircle
 895+ C856 CD CF C1                             call    SunDraw
 896+ C859 C9                                   ret
 897+ C85A                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 898+ C85A              ;.. Now we caluclate the circle of the star
 899+ C85A              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 900+ C85A              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 901+ C85A              ; so now there are the following conditions to consider
 902+ C85A              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 903+ C85A              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 904+ C85A              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 905+ C85A              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 906+ C85A              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 907+ C85A              ; x center + radius < 0                                                 => Don't draw
 908+ C85A              ; x center - radius > 255                                               => Don't draw
 909+ C85A              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 910+ C85A              ; x point = max (x point, 0)   on left
 911+ C85A              ; x point = min (x point, 255) on right
 912+ C85A
 913+ C85A              SetIYPlusOffset:        MACRO   reg
 914+ C85A ~                                    push    hl,,iy                          ; save hl, then hl = iy
 915+ C85A ~                                    pop     hl                              ;
 916+ C85A ~                                    ld      a,reg
 917+ C85A ~                                    add     hl,a
 918+ C85A ~                                    add     hl,a
 919+ C85A ~                                    push    hl
 920+ C85A ~                                    pop     iy
 921+ C85A ~                                    pop     hl
 922+ C85A                                      ENDM
 923+ C85A
 924+ C85A              SetIYMinusOffset:       MACRO   reg
 925+ C85A ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 926+ C85A ~                                    pop     hl                              ;
 927+ C85A ~                                    ld      a,reg
 928+ C85A ~                                    add     a,a
 929+ C85A ~                                    ld      e,a
 930+ C85A ~                                    ld      d,0
 931+ C85A ~                                    ClearCarryFlag
 932+ C85A ~                                    sbc     hl,de
 933+ C85A ~                                    push    hl
 934+ C85A ~                                    pop     iy
 935+ C85A ~                                    pop     de,,hl
 936+ C85A                                      ENDM
 937+ C85A
 938+ C85A
 939+ C85A              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 940+ C85A              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 941+ C85A              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 942+ C85A              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 943+ C85A              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 944+ C85A              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 945+ C85A              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 946+ C85A              ;;;-                        push    hl
 947+ C85A              ;;;-                        ld      a,(SunRadius)
 948+ C85A              ;;;-                        add     hl,a
 949+ C85A              ;;;-                        bit     7,h
 950+ C85A              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 951+ C85A              ;;;-                        pop     hl
 952+ C85A              ;;;-                        ld      d,0
 953+ C85A              ;;;-                        ld      e,a
 954+ C85A              ;;;-                        ClearCarryFlag
 955+ C85A              ;;;-                        sbc     hl,de
 956+ C85A              ;;;-                        ld      a,h
 957+ C85A              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 958+ C85A              ;;;-
 959+ C85A              ;;;-                        ld      hl,(SunScrnX)
 960+ C85A              ;;;-                        push    hl
 961+ C85A              ;;;-                        ld      a,(SunRadius)
 962+ C85A              ;;;-                        add     hl,a
 963+ C85A              ;;;-                        bit     7,h
 964+ C85A              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 965+ C85A              ;;;-                        pop     hl
 966+ C85A              ;;;-                        ld      d,0
 967+ C85A              ;;;-                        ld      e,a
 968+ C85A              ;;;-                        ClearCarryFlag
 969+ C85A              ;;;-                        sbc     hl,de
 970+ C85A              ;;;-                        ld      a,h
 971+ C85A              ;;;-
 972+ C85A              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 973+ C85A              SunDrawCircle
 974+ C85A                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 975+ C85A              .PrepCircleData:       ; ld      ixl,0
 976+ C85A                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 977+ C85A 3A B9 C5                             ld      a,(SunRadius)
 978+ C85D DD 67                                ld		ixh,a							; ixh = radius
 979+ C85F DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 980+ C862 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 981+ C864 6F                                   ld		l,a                             ; .
 982+ C865 29                                   add		hl,hl							; .
 983+ C866 EB                                   ex		de,hl							; .
 984+ C867 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 985+ C86A A7                                   and		a                               ; .
 986+ C86B ED 52                                sbc		hl,de							; .
 987+ C86D 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 988+ C86E 4D                                   ld		c,l								; .
 989+ C86F 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 990+ C872 16 00                                ld		d,0                             ; de = ixl
 991+ C874 DD 5D                                ld		e,ixl                           ;
 992+ C876                                      ClearCarryFlag                          ;
 992+ C876 B7          >                        or a
 993+ C877 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 994+ C879 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 995+ C87C DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 996+ C87E DD BD                                cp		ixl                             ;
 997+ C880 D8                                   ret		c                               ;
 998+ C881 D9           .ProcessLoop:	        exx                                     ; save out registers
 999+ C882              ; Process CY+Y CX+X & CY+Y CX-X..................................
1000+ C882 2A B7 C5     .Plot1:                 ld      hl, (SunScrnY)
1001+ C885 DD 7C        .Get1YRow:              ld      a,ixh
1002+ C887 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1003+ C889              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1003+ C889 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1003+ C88A A7          >                        and     a                               ; .
1003+ C88B 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1003+ C88D 7D          >                        ld      a,l                             ; l bit 7 0?
1003+ C88E E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1003+ C890 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1004+ C892              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1004+ C892 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1004+ C895 E1          >                        pop     hl                              ;
1004+ C896 DD 7C       >                        ld      a,ixh
1004+ C898 ED 31       >                        add     hl,a
1004+ C89A ED 31       >                        add     hl,a
1004+ C89C E5          >                        push    hl
1004+ C89D FD E1       >                        pop     iy
1004+ C89F E1          >                        pop     hl
1005+ C8A0                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1005+ C8A0 7D          >                        ld      a,l
1005+ C8A1 21 A3 C0    >                        ld      hl,SBnKLineArray
1005+ C8A4 ED 31       >                        add     hl,a
1005+ C8A6 ED 31       >                        add     hl,a
1005+ C8A8 E5          >                        push    hl
1005+ C8A9 FD E1       >                        pop     iy
1006+ C8AB DD 7D                                ld      a,ixl
1007+ C8AD CD 80 C9                             call    ProcessXRowA
1008+ C8B0 C3 B3 C8                             jp      .Plot2
1009+ C8B3              .NoTopPixelPair:        ;break
1010+ C8B3              ; Process CY-Y CX+X & CY-Y CX-X..................................
1011+ C8B3 2A B7 C5     .Plot2:                 ld      hl, (SunScrnY)
1012+ C8B6 16 00        .Get2YRow:              ld      d,0
1013+ C8B8 DD 5C                                ld      e,ixh
1014+ C8BA                                      ClearCarryFlag
1014+ C8BA B7          >                        or a
1015+ C8BB ED 52                                sbc     hl,de
1016+ C8BD              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1016+ C8BD 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1016+ C8BE A7          >                        and     a                               ; .
1016+ C8BF 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1016+ C8C1 7D          >                        ld      a,l                             ; l bit 7 0?
1016+ C8C2 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1016+ C8C4 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1017+ C8C6                                      SetIYMinusOffset ixh
1017+ C8C6 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1017+ C8CA E1          >                        pop     hl                              ;
1017+ C8CB DD 7C       >                        ld      a,ixh
1017+ C8CD 87          >                        add     a,a
1017+ C8CE 5F          >                        ld      e,a
1017+ C8CF 16 00       >                        ld      d,0
1017+ C8D1             >                        ClearCarryFlag
1017+ C8D1 B7          >                        or a
1017+ C8D2 ED 52       >                        sbc     hl,de
1017+ C8D4 E5          >                        push    hl
1017+ C8D5 FD E1       >                        pop     iy
1017+ C8D7 E1 D1       >                        pop     de,,hl
1018+ C8D9              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1018+ C8D9 7D          >                        ld      a,l
1018+ C8DA 21 A3 C0    >                        ld      hl,SBnKLineArray
1018+ C8DD ED 31       >                        add     hl,a
1018+ C8DF ED 31       >                        add     hl,a
1018+ C8E1 E5          >                        push    hl
1018+ C8E2 FD E1       >                        pop     iy
1019+ C8E4 DD 7D                                ld      a,ixl
1020+ C8E6 CD 80 C9                             call    ProcessXRowA
1021+ C8E9 C3 EC C8                             jp      .Plot3
1022+ C8EC              .NoBottomPixelPair:     ;break
1023+ C8EC              ; Process CY+X CX+Y & CY+X CX-Y..................................
1024+ C8EC 2A B7 C5     .Plot3:                 ld      hl, (SunScrnY)
1025+ C8EF DD 7D        .Get3YRow:              ld      a,ixl
1026+ C8F1 ED 31                                add     hl,a                            ; Check to see if CY+Y
1027+ C8F3              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1027+ C8F3 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1027+ C8F4 A7          >                        and     a                               ; .
1027+ C8F5 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1027+ C8F7 7D          >                        ld      a,l                             ; l bit 7 0?
1027+ C8F8 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1027+ C8FA 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1028+ C8FC                                      SetIYPlusOffset ixl
1028+ C8FC E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1028+ C8FF E1          >                        pop     hl                              ;
1028+ C900 DD 7D       >                        ld      a,ixl
1028+ C902 ED 31       >                        add     hl,a
1028+ C904 ED 31       >                        add     hl,a
1028+ C906 E5          >                        push    hl
1028+ C907 FD E1       >                        pop     iy
1028+ C909 E1          >                        pop     hl
1029+ C90A              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1029+ C90A 7D          >                        ld      a,l
1029+ C90B 21 A3 C0    >                        ld      hl,SBnKLineArray
1029+ C90E ED 31       >                        add     hl,a
1029+ C910 ED 31       >                        add     hl,a
1029+ C912 E5          >                        push    hl
1029+ C913 FD E1       >                        pop     iy
1030+ C915 DD 7C                                ld      a,ixh
1031+ C917 CD 80 C9                             call    ProcessXRowA
1032+ C91A C3 1D C9                             jp      .Plot4
1033+ C91D              .NoTop3PixelPair:       ;break
1034+ C91D              ; Process CY-X CX+Y & CY-X CX-Y..................................
1035+ C91D 2A B7 C5     .Plot4:                 ld      hl, (SunScrnY)
1036+ C920 16 00        .Get4YRow:              ld      d,0
1037+ C922 DD 5D                                ld      e,ixl
1038+ C924                                      ClearCarryFlag
1038+ C924 B7          >                        or a
1039+ C925 ED 52                                sbc     hl,de
1040+ C927              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1040+ C927 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1040+ C928 A7          >                        and     a                               ; .
1040+ C929 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1040+ C92B 7D          >                        ld      a,l                             ; l bit 7 0?
1040+ C92C E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1040+ C92E 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1041+ C930                                      SetIYMinusOffset ixl
1041+ C930 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1041+ C934 E1          >                        pop     hl                              ;
1041+ C935 DD 7D       >                        ld      a,ixl
1041+ C937 87          >                        add     a,a
1041+ C938 5F          >                        ld      e,a
1041+ C939 16 00       >                        ld      d,0
1041+ C93B             >                        ClearCarryFlag
1041+ C93B B7          >                        or a
1041+ C93C ED 52       >                        sbc     hl,de
1041+ C93E E5          >                        push    hl
1041+ C93F FD E1       >                        pop     iy
1041+ C941 E1 D1       >                        pop     de,,hl
1042+ C943              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1042+ C943 7D          >                        ld      a,l
1042+ C944 21 A3 C0    >                        ld      hl,SBnKLineArray
1042+ C947 ED 31       >                        add     hl,a
1042+ C949 ED 31       >                        add     hl,a
1042+ C94B E5          >                        push    hl
1042+ C94C FD E1       >                        pop     iy
1043+ C94E DD 7C                                ld      a,ixh
1044+ C950 CD 80 C9                             call    ProcessXRowA
1045+ C953              .NoBottom4PixelPair:
1046+ C953              ; Completed one iteration........................................
1047+ C953 D9                                   exx
1048+ C954 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1049+ C956 28 03                                jr z,   .draw_circle_1
1050+ C958 19                                   add hl,de			; Delta=Delta+D1
1051+ C959 18 05                                jr      .draw_circle_2		;
1052+ C95B 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1053+ C95C 03                                   inc     bc
1054+ C95D 03                                   inc     bc				; D2=D2+2
1055+ C95E DD 25                                dec     ixh				; Y=Y-1
1056+ C960 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1057+ C961 03                                   inc bc
1058+ C962 13                                   inc de				    ; D1=D1+2
1059+ C963 13                                   inc de
1060+ C964 DD 2C                                inc ixl				    ; X=X+1
1061+ C966 C3 7C C8                             jp      .CircleLoop
1062+ C969 2A B5 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1063+ C96C 7C                                   ld      a,h
1064+ C96D A7                                   and     a
1065+ C96E C0                                   ret     nz                  ; if the high byte is set then no pixel
1066+ C96F 4D                                   ld      c,l
1067+ C970 2A B7 C5                             ld      hl,(SunScrnY)
1068+ C973 7C                                   ld      a,h
1069+ C974 A7                                   and     a
1070+ C975 C0                                   ret     nz                  ; if the high byte is set then no pixel
1071+ C976 7D                                   ld      a,l
1072+ C977 CB 7F                                bit     7,a
1073+ C979 C0                                   ret     nz                  ; if l > 127 then no pixel
1074+ C97A 47                                   ld      b,a
1075+ C97B 7B                                   ld		a,e
1076+ C97C CD 08 E3                             call	l2_plot_pixel_y_test
1077+ C97F C9                                   ret
1078+ C980
1079+ C980              ProcessXRowA:           ;break
1080+ C980 2A B5 C5                             ld      hl,(SunScrnX)                    ; get X Center
1081+ C983 F5                                   push    af                              ; save A (curent offset +/- value
1082+ C984 ED 31                                add     hl,a                            ; Hl = HL + offset
1083+ C986 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1084+ C987 CB 7F                                bit     7,a                             ;
1085+ C989 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1086+ C98B A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1087+ C98C 20 16                                jr      nz,.XCoordMaxed                 ; .
1088+ C98E 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1089+ C98F C5           .AddFuzz:               push    bc
1090+ C990 CD 1C 84                             call    doRandom                        ; c = c - random AND ragged Size
1091+ C993 C1                                   pop     bc
1092+ C994 21 B2 C5                             ld      hl,RaggedSize                   ;
1093+ C997 A6                                   and     (hl)                            ;
1094+ C998 81                                   add     c                               ;
1095+ C999 4F                                   ld      c,a                             ;
1096+ C99A 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1097+ C99C C3 A6 C9                             jp      .ProcessSubtract                ;
1098+ C99F 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1099+ C9A1 C3 A6 C9                             jp      .ProcessSubtract
1100+ C9A4 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1101+ C9A6 F1           .ProcessSubtract:       pop     af                              ; get offset back
1102+ C9A7 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1103+ C9A8 16 00                                ld      d,0
1104+ C9AA 2A B5 C5                             ld      hl,(SunScrnX)                    ; so do subtract
1105+ C9AD                                      ClearCarryFlag                          ; .
1105+ C9AD B7          >                        or a
1106+ C9AE ED 52                                sbc     hl,de                           ; .
1107+ C9B0 FA CD C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1108+ C9B3 E5 C5        .AddFuzzSubtract:       push    hl,,bc
1109+ C9B5 CD 1C 84                             call    doRandom                        ; c = c - random AND ragged Size
1110+ C9B8 C1                                   pop     bc
1111+ C9B9 21 B2 C5                             ld      hl,RaggedSize                   ;
1112+ C9BC A6                                   and     (hl)                            ;
1113+ C9BD 5F                                   ld      e,a
1114+ C9BE E1                                   pop     hl
1115+ C9BF ED 52                                sbc     hl,de
1116+ C9C1 FA CD C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1117+ C9C4 7C                                   ld      a,h
1118+ C9C5 A7                                   and     a
1119+ C9C6 C2 D2 C9                             jp      nz,.XCordLeftMaxed
1120+ C9C9 45                                   ld      b,l
1121+ C9CA C3 D4 C9                             jp      .CompletedXCoords
1122+ C9CD 06 00        .XCoordLeftNegative:    ld      b,0
1123+ C9CF C3 D4 C9                             jp      .CompletedXCoords
1124+ C9D2 06 FF        .XCordLeftMaxed:        ld      b,255
1125+ C9D4 78           .CompletedXCoords:      ld      a,b
1126+ C9D5 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1127+ C9D8 79                                   ld      a,c
1128+ C9D9 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1129+ C9DC C9                                   ret
1130+ C9DD
1131+ C9DD              ; .....................................................
1132+ C9DD              ; if the universe object is a planet or sun then do that instead
1133+ C9DD              ;;TODOProcessPlanet:          cp      129
1134+ C9DD              ;;TODO                        jr      nz, .ItsAPlanet
1135+ C9DD              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1136+ C9DD              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1137+ C9DD
1138+ C9DD
1139+ C9DD              ; Square Root using tables
1140+ C9DD              ; DE = number to find
1141+ C9DD 21 FD CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1142+ C9E0 7A           .LookupCorseJump:       ld      a,d
1143+ C9E1 ED 31                                add     hl,a
1144+ C9E3 ED 31                                add     hl,a
1145+ C9E5 7E                                   ld      a,(hl)
1146+ C9E6 23                                   inc     hl
1147+ C9E7 66                                   ld      h,(hl)
1148+ C9E8 6F                                   ld      l,a
1149+ C9E9 7E           .FineSearchLoop:        ld      a,(hl)
1150+ C9EA                                      JumpIfAEqNusng  e, .FoundByte
1150+ C9EA BB          >                        cp     e
1150+ C9EB CA F7 C9    >                        jp      z,.FoundByte
1151+ C9EE                                      JumpIfAGTENusng e, .PreviousByte
1151+ C9EE BB          >                        cp     e
1151+ C9EF D2 FA C9    >                        jp		nc,.PreviousByte
1152+ C9F2 23           .NotFound:              inc     hl
1153+ C9F3 23                                   inc     hl
1154+ C9F4 C3 E9 C9                             jp      .FineSearchLoop
1155+ C9F7 23           .FoundByte:             inc     hl
1156+ C9F8 7E                                   ld      a,(hl)
1157+ C9F9 C9                                   ret
1158+ C9FA 2B           .PreviousByte:          dec     hl
1159+ C9FB 7E                                   ld      a,(hl)
1160+ C9FC C9                                   ret
1161+ C9FD
1162+ C9FD FD CB 0F CC  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1162+ CA01 1D CC 29 CC
1162+ CA05 33 CC 3B CC
1162+ CA09 43 CC 4B CC
1162+ CA0D 53 CC 59 CC
1162+ CA11 61 CC 67 CC
1162+ CA15 6B CC 71 CC
1162+ CA19 77 CC 7D CC
1163+ CA1D 83 CC 89 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1163+ CA21 8F CC 95 CC
1163+ CA25 9B CC 9F CC
1163+ CA29 A3 CC A5 CC
1163+ CA2D A9 CC AD CC
1163+ CA31 B1 CC B5 CC
1163+ CA35 B9 CC BD CC
1163+ CA39 BF CC C3 CC
1164+ CA3D C5 CC C9 CC                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1164+ CA41 CD CC CF CC
1164+ CA45 D1 CC D5 CC
1164+ CA49 D7 CC D9 CC
1164+ CA4D DD CC DF CC
1164+ CA51 E1 CC E3 CC
1164+ CA55 E7 CC E9 CC
1164+ CA59 EB CC EF CC
1165+ CA5D F3 CC F7 CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1165+ CA61 FB CC FF CC
1165+ CA65 01 CD 05 CD
1165+ CA69 09 CD 0D CD
1165+ CA6D 0F CD 13 CD
1165+ CA71 17 CD 1B CD
1165+ CA75 1F CD 23 CD
1165+ CA79 27 CD 2B CD
1166+ CA7D 2F CD 33 CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1166+ CA81 37 CD 3B CD
1166+ CA85 3F CD 43 CD
1166+ CA89 47 CD 4B CD
1166+ CA8D 4F CD 53 CD
1166+ CA91 57 CD 5B CD
1166+ CA95 5F CD 63 CD
1166+ CA99 67 CD 6B CD
1167+ CA9D 6F CD 71 CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1167+ CAA1 75 CD 79 CD
1167+ CAA5 7D CD 81 CD
1167+ CAA9 85 CD 89 CD
1167+ CAAD 8D CD 8F CD
1167+ CAB1 93 CD 97 CD
1167+ CAB5 9B CD 9F CD
1167+ CAB9 A3 CD A5 CD
1168+ CABD A9 CD AD CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1168+ CAC1 B1 CD B5 CD
1168+ CAC5 B7 CD BB CD
1168+ CAC9 BF CD C3 CD
1168+ CACD C7 CD C9 CD
1168+ CAD1 CD CD D1 CD
1168+ CAD5 D5 CD D7 CD
1168+ CAD9 D9 CD DD CD
1169+ CADD E1 CD E5 CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1169+ CAE1 E9 CD ED CD
1169+ CAE5 F1 CD F5 CD
1169+ CAE9 F7 CD FB CD
1169+ CAED FF CD 01 CE
1169+ CAF1 05 CE 09 CE
1169+ CAF5 0D CE 0F CE
1169+ CAF9 13 CE 17 CE
1170+ CAFD 1B CE 1D CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1170+ CB01 21 CE 23 CE
1170+ CB05 27 CE 2B CE
1170+ CB09 2F CE 31 CE
1170+ CB0D 35 CE 39 CE
1170+ CB11 3B CE 3F CE
1170+ CB15 43 CE 45 CE
1170+ CB19 49 CE 4D CE
1171+ CB1D 4F CE 53 CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1171+ CB21 57 CE 59 CE
1171+ CB25 5D CE 61 CE
1171+ CB29 63 CE 67 CE
1171+ CB2D 6B CE 6D CE
1171+ CB31 71 CE 75 CE
1171+ CB35 77 CE 7B CE
1171+ CB39 7F CE 81 CE
1172+ CB3D 85 CE 89 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1172+ CB41 8B CE 8F CE
1172+ CB45 91 CE 95 CE
1172+ CB49 99 CE 9B CE
1172+ CB4D 9F CE A1 CE
1172+ CB51 A5 CE A9 CE
1172+ CB55 AB CE AF CE
1172+ CB59 B3 CE B5 CE
1173+ CB5D B7 CE B9 CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1173+ CB61 BD CE C1 CE
1173+ CB65 C3 CE C7 CE
1173+ CB69 C9 CE CD CE
1173+ CB6D D1 CE D5 CE
1173+ CB71 D7 CE D9 CE
1173+ CB75 DD CE DF CE
1173+ CB79 E3 CE E7 CE
1174+ CB7D E9 CE ED CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1174+ CB81 EF CE F3 CE
1174+ CB85 F5 CE F9 CE
1174+ CB89 FD CE FF CE
1174+ CB8D 01 CF 03 CF
1174+ CB91 07 CF 09 CF
1174+ CB95 0D CF 11 CF
1174+ CB99 13 CF 17 CF
1175+ CB9D 19 CF 1D CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1175+ CBA1 1F CF 23 CF
1175+ CBA5 25 CF 29 CF
1175+ CBA9 2D CF 2F CF
1175+ CBAD 33 CF 35 CF
1175+ CBB1 39 CF 3B CF
1175+ CBB5 3F CF 41 CF
1175+ CBB9 43 CF 45 CF
1176+ CBBD 49 CF 4D CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1176+ CBC1 51 CF 55 CF
1176+ CBC5 59 CF 5D CF
1176+ CBC9 5F CF 63 CF
1176+ CBCD 67 CF 6B CF
1176+ CBD1 6D CF 71 CF
1176+ CBD5 73 CF 75 CF
1176+ CBD9 77 CF 7B CF
1177+ CBDD 7D CF 7F CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1177+ CBE1 81 CF 85 CF
1177+ CBE5 87 CF 8B CF
1177+ CBE9 8D CF 91 CF
1177+ CBED 93 CF 97 CF
1177+ CBF1 99 CF 9D CF
1177+ CBF5 9F CF A3 CF
1177+ CBF9 A5 CF A7 CF
1178+ CBFD
1179+ CBFD              SunSquareRootTable:
1180+ CBFD 00 00        SunSqr00:               DB $00,   0
1181+ CBFF 04 02                                DB $04,   2
1182+ CC01 10 04                                DB $10,   4
1183+ CC03 24 06                                DB $24,   6
1184+ CC05 40 08                                DB $40,   8
1185+ CC07 64 0A                                DB $64,  10
1186+ CC09 90 0C                                DB $90,  12
1187+ CC0B C4 0E                                DB $C4,  14
1188+ CC0D FF 0F                                DB $FF,  15
1189+ CC0F 00 10        SunSqr01:               DB $00,  16
1190+ CC11 21 11                                DB $21,  17
1191+ CC13 44 12                                DB $44,  18
1192+ CC15 69 13                                DB $69,  19
1193+ CC17 90 14                                DB $90,  20
1194+ CC19 B9 15                                DB $B9,  21
1195+ CC1B FF 16                                DB $FF,  22
1196+ CC1D 11 17        SunSqr02:               DB $11,  23
1197+ CC1F 40 18                                DB $40,  24
1198+ CC21 71 19                                DB $71,  25
1199+ CC23 A4 1A                                DB $A4,  26
1200+ CC25 D9 1B                                DB $D9,  27
1201+ CC27 FF 1B                                DB $FF,  27
1202+ CC29 10 1C        SunSqr03:               DB $10,  28
1203+ CC2B 49 1D                                DB $49,  29
1204+ CC2D 84 1E                                DB $84,  30
1205+ CC2F C1 1F                                DB $C1,  31
1206+ CC31 FF 1F                                DB $FF,  31
1207+ CC33 00 20        SunSqr04:               DB $00,  32
1208+ CC35 41 21                                DB $41,  33
1209+ CC37 84 22                                DB $84,  34
1210+ CC39 FF 23                                DB $FF,  35
1211+ CC3B 10 24        SunSqr05:               DB $10,  36
1212+ CC3D 59 25                                DB $59,  37
1213+ CC3F A4 26                                DB $A4,  38
1214+ CC41 FF 27                                DB $FF,  39
1215+ CC43 40 28        SunSqr06:               DB $40,  40
1216+ CC45 91 29                                DB $91,  41
1217+ CC47 E4 2A                                DB $E4,  42
1218+ CC49 FF 2A                                DB $FF,  42
1219+ CC4B 39 2B        SunSqr07:               DB $39,  43
1220+ CC4D 90 2C                                DB $90,  44
1221+ CC4F E9 2D                                DB $E9,  45
1222+ CC51 FF 2D                                DB $FF,  45
1223+ CC53 44 2E        SunSqr08:               DB $44,  46
1224+ CC55 A1 2F                                DB $A1,  47
1225+ CC57 FF 2F                                DB $FF,  47
1226+ CC59 00 30        SunSqr09:               DB $00,  48
1227+ CC5B 61 31                                DB $61,  49
1228+ CC5D C4 32                                DB $C4,  50
1229+ CC5F FF 32                                DB $FF,  50
1230+ CC61 29 33        SunSqr0A:               DB $29,  51
1231+ CC63 90 34                                DB $90,  52
1232+ CC65 FF 35                                DB $FF,  53
1233+ CC67 64 36        SunSqr0B:               DB $64,  54
1234+ CC69 FF 37                                DB $FF,  55
1235+ CC6B 40 38        SunSqr0C:               DB $40,  56
1236+ CC6D B1 39                                DB $B1,  57
1237+ CC6F FF 39                                DB $FF,  57
1238+ CC71 24 3A        SunSqr0D:               DB $24,  58
1239+ CC73 99 3B                                DB $99,  59
1240+ CC75 FF 3B                                DB $FF,  59
1241+ CC77 10 3C        SunSqr0E:               DB $10,  60
1242+ CC79 89 3D                                DB $89,  61
1243+ CC7B FF 3D                                DB $FF,  61
1244+ CC7D 04 3E        SunSqr0F:               DB $04,  62
1245+ CC7F 81 3F                                DB $81,  63
1246+ CC81 FF 3F                                DB $FF,  63
1247+ CC83 00 40        SunSqr10:               DB $00,  64
1248+ CC85 81 41                                DB $81,  65
1249+ CC87 FF 41                                DB $FF,  65
1250+ CC89 04 42        SunSqr11:               DB $04,  66
1251+ CC8B 89 43                                DB $89,  67
1252+ CC8D FF 43                                DB $FF,  67
1253+ CC8F 10 44        SunSqr12:               DB $10,  68
1254+ CC91 99 45                                DB $99,  69
1255+ CC93 FF 45                                DB $FF,  69
1256+ CC95 24 46        SunSqr13:               DB $24,  70
1257+ CC97 B1 47                                DB $B1,  71
1258+ CC99 FF 47                                DB $FF,  71
1259+ CC9B 40 48        SunSqr14:               DB $40,  72
1260+ CC9D FF 49                                DB $FF,  73
1261+ CC9F 64 4A        SunSqr15:               DB $64,  74
1262+ CCA1 FF 4B                                DB $FF,  75
1263+ CCA3 FF 4C        SunSqr16:               DB $FF,  76
1264+ CCA5 C4 4D        SunSqr17:               DB $C4,  77
1265+ CCA7 FF 4E                                DB $FF,  78
1266+ CCA9 61 4F        SunSqr18:               DB $61,  79
1267+ CCAB FF 4F                                DB $FF,  79
1268+ CCAD 00 50        SunSqr19:               DB $00,  80
1269+ CCAF FF 51                                DB $FF,  81
1270+ CCB1 44 52        SunSqr1A:               DB $44,  82
1271+ CCB3 FF 53                                DB $FF,  83
1272+ CCB5 90 54        SunSqr1B:               DB $90,  84
1273+ CCB7 FF 54                                DB $FF,  84
1274+ CCB9 39 55        SunSqr1C:               DB $39,  85
1275+ CCBB FF 56                                DB $FF,  86
1276+ CCBD FF 57        SunSqr1D:               DB $FF,  87
1277+ CCBF 40 58        SunSqr1E:               DB $40,  88
1278+ CCC1 FF 59                                DB $FF,  89
1279+ CCC3 FF 5A        SunSqr1F:               DB $FF,  90
1280+ CCC5 59 5B        SunSqr20:               DB $59,  91
1281+ CCC7 FF 5B                                DB $FF,  91
1282+ CCC9 10 5C        SunSqr21:               DB $10,  92
1283+ CCCB FF 5D                                DB $FF,  93
1284+ CCCD FF 5E        SunSqr22:               DB $FF,  94
1285+ CCCF FF 5F        SunSqr23:               DB $FF,  95
1286+ CCD1 00 60        SunSqr24:               DB $00,  96
1287+ CCD3 FF 61                                DB $FF,  97
1288+ CCD5 84 62        SunSqr25:               DB $84,  98
1289+ CCD7 49 63        SunSqr26:               DB $49,  99
1290+ CCD9 10 64        SunSqr27:               DB $10, 100
1291+ CCDB FF 65                                DB $FF, 101
1292+ CCDD FF 66        SunSqr28:               DB $FF, 102
1293+ CCDF FF 67        SunSqr29:               DB $FF, 103
1294+ CCE1 FF 68        SunSqr2A:               DB $FF, 104
1295+ CCE3 11 69        SunSqr2B:               DB $11, 105
1296+ CCE5 FF 6A                                DB $FF, 106
1297+ CCE7 FF 6B        SunSqr2C:               DB $FF, 107
1298+ CCE9 FF 6C        SunSqr2D:               DB $FF, 108
1299+ CCEB 69 6D        SunSqr2E:               DB $69, 109
1300+ CCED FF 6E                                DB $FF, 110
1301+ CCEF 44 6E        SunSqr2F:               DB $44, 110
1302+ CCF1 FF 6F                                DB $FF, 111
1303+ CCF3 21 6F        SunSqr30:               DB $21, 111
1304+ CCF5 FF 70                                DB $FF, 112
1305+ CCF7 00 70        SunSqr31:               DB $00, 112
1306+ CCF9 FF 71                                DB $FF, 113
1307+ CCFB C4 72        SunSqr32:               DB $C4, 114
1308+ CCFD FF 72                                DB $FF, 114
1309+ CCFF FF 73        SunSqr33:               DB $FF, 115
1310+ CD01 90 74        SunSqr34:               DB $90, 116
1311+ CD03 FF 75                                DB $FF, 117
1312+ CD05 79 75        SunSqr35:               DB $79, 117
1313+ CD07 FF 76                                DB $FF, 118
1314+ CD09 64 76        SunSqr36:               DB $64, 118
1315+ CD0B 64 77                                DB $64, 119
1316+ CD0D 51 77        SunSqr37:               DB $51, 119
1317+ CD0F 40 78        SunSqr38:               DB $40, 120
1318+ CD11 FF 79                                DB $FF, 121
1319+ CD13 31 79        SunSqr39:               DB $31, 121
1320+ CD15 FF 7A                                DB $FF, 122
1321+ CD17 24 7A        SunSqr3A:               DB $24, 122
1322+ CD19 FF 7B                                DB $FF, 123
1323+ CD1B 19 7B        SunSqr3B:               DB $19, 123
1324+ CD1D FF 7C                                DB $FF, 124
1325+ CD1F 10 7C        SunSqr3C:               DB $10, 124
1326+ CD21 FF 7D                                DB $FF, 125
1327+ CD23 09 7D        SunSqr3D:               DB $09, 125
1328+ CD25 FF 7D                                DB $FF, 125
1329+ CD27 04 7E        SunSqr3E:               DB $04, 126
1330+ CD29 FF 7E                                DB $FF, 126
1331+ CD2B 01 7F        SunSqr3F:               DB $01, 127
1332+ CD2D FF 7F                                DB $FF, 127
1333+ CD2F 00 80        SunSqr40:               DB $00, 128
1334+ CD31 FF 80                                DB $FF, 128
1335+ CD33 01 81        SunSqr41:               DB $01, 129
1336+ CD35 FF 82                                DB $FF, 130
1337+ CD37 04 82        SunSqr42:               DB $04, 130
1338+ CD39 FF 83                                DB $FF, 131
1339+ CD3B 09 83        SunSqr43:               DB $09, 131
1340+ CD3D FF 84                                DB $FF, 132
1341+ CD3F 10 84        SunSqr44:               DB $10, 132
1342+ CD41 FF 85                                DB $FF, 133
1343+ CD43 19 85        SunSqr45:               DB $19, 133
1344+ CD45 FF 86                                DB $FF, 134
1345+ CD47 24 86        SunSqr46:               DB $24, 134
1346+ CD49 FF 87                                DB $FF, 135
1347+ CD4B 31 87        SunSqr47:               DB $31, 135
1348+ CD4D FF 88                                DB $FF, 136
1349+ CD4F 40 88        SunSqr48:               DB $40, 136
1350+ CD51 FF 89                                DB $FF, 137
1351+ CD53 51 89        SunSqr49:               DB $51, 137
1352+ CD55 FF 8A                                DB $FF, 138
1353+ CD57 64 8A        SunSqr4A:               DB $64, 138
1354+ CD59 FF 8A                                DB $FF, 138
1355+ CD5B 79 8B        SunSqr4B:               DB $79, 139
1356+ CD5D FF 8B                                DB $FF, 139
1357+ CD5F 90 8C        SunSqr4C:               DB $90, 140
1358+ CD61 FF 8C                                DB $FF, 140
1359+ CD63 A9 8D        SunSqr4D:               DB $A9, 141
1360+ CD65 FF 8D                                DB $FF, 141
1361+ CD67 C4 8E        SunSqr4E:               DB $C4, 142
1362+ CD69 FF 8E                                DB $FF, 142
1363+ CD6B E1 8F        SunSqr4F:               DB $E1, 143
1364+ CD6D FF 8F                                DB $FF, 143
1365+ CD6F FF 8F        SunSqr50:               DB $FF, 143
1366+ CD71 00 90        SunSqr51:               DB $00, 144
1367+ CD73 FF 90                                DB $FF, 144
1368+ CD75 21 91        SunSqr52:               DB $21, 145
1369+ CD77 FF 91                                DB $FF, 145
1370+ CD79 44 92        SunSqr53:               DB $44, 146
1371+ CD7B FF 92                                DB $FF, 146
1372+ CD7D 69 93        SunSqr54:               DB $69, 147
1373+ CD7F FF 93                                DB $FF, 147
1374+ CD81 90 94        SunSqr55:               DB $90, 148
1375+ CD83 FF 94                                DB $FF, 148
1376+ CD85 B9 95        SunSqr56:               DB $B9, 149
1377+ CD87 FF 95                                DB $FF, 149
1378+ CD89 E4 96        SunSqr57:               DB $E4, 150
1379+ CD8B FF 96                                DB $FF, 150
1380+ CD8D FF 96        SunSqr58:               DB $FF, 150
1381+ CD8F 11 97        SunSqr59:               DB $11, 151
1382+ CD91 FF 97                                DB $FF, 151
1383+ CD93 40 98        SunSqr5A:               DB $40, 152
1384+ CD95 FF 98                                DB $FF, 152
1385+ CD97 71 99        SunSqr5B:               DB $71, 153
1386+ CD99 FF 99                                DB $FF, 153
1387+ CD9B A4 9A        SunSqr5C:               DB $A4, 154
1388+ CD9D FF 9A                                DB $FF, 154
1389+ CD9F D9 9B        SunSqr5D:               DB $D9, 155
1390+ CDA1 FF 9B                                DB $FF, 155
1391+ CDA3 FF 9B        SunSqr5E:               DB $FF, 155
1392+ CDA5 10 9C        SunSqr5F:               DB $10, 156
1393+ CDA7 FF 9C                                DB $FF, 156
1394+ CDA9 49 9D        SunSqr60:               DB $49, 157
1395+ CDAB FF 9D                                DB $FF, 157
1396+ CDAD 84 9E        SunSqr61:               DB $84, 158
1397+ CDAF FF 9E                                DB $FF, 158
1398+ CDB1 C1 9F        SunSqr62:               DB $C1, 159
1399+ CDB3 FF 9F                                DB $FF, 159
1400+ CDB5 FF 9F        SunSqr63:               DB $FF, 159
1401+ CDB7 00 A0        SunSqr64:               DB $00, 160
1402+ CDB9 FF A0                                DB $FF, 160
1403+ CDBB 41 A1        SunSqr65:               DB $41, 161
1404+ CDBD FF A1                                DB $FF, 161
1405+ CDBF 84 A2        SunSqr66:               DB $84, 162
1406+ CDC1 FF A2                                DB $FF, 162
1407+ CDC3 C9 A3        SunSqr67:               DB $C9, 163
1408+ CDC5 FF A3                                DB $FF, 163
1409+ CDC7 FF A3        SunSqr68:               DB $FF, 163
1410+ CDC9 10 A4        SunSqr69:               DB $10, 164
1411+ CDCB FF A4                                DB $FF, 164
1412+ CDCD 59 A5        SunSqr6A:               DB $59, 165
1413+ CDCF FF A5                                DB $FF, 165
1414+ CDD1 A4 A6        SunSqr6B:               DB $A4, 166
1415+ CDD3 FF A6                                DB $FF, 166
1416+ CDD5 FF A7        SunSqr6C:               DB $FF, 167
1417+ CDD7 FF A7        SunSqr6D:               DB $FF, 167
1418+ CDD9 40 A8        SunSqr6E:               DB $40, 168
1419+ CDDB FF A8                                DB $FF, 168
1420+ CDDD 91 A9        SunSqr6F:               DB $91, 169
1421+ CDDF FF A9                                DB $FF, 169
1422+ CDE1 E4 AA        SunSqr70:               DB $E4, 170
1423+ CDE3 FF AA                                DB $FF, 170
1424+ CDE5 00 AA        SunSqr71:               DB $00, 170
1425+ CDE7 FF AA                                DB $FF, 170
1426+ CDE9 39 AB        SunSqr72:               DB $39, 171
1427+ CDEB FF AB                                DB $FF, 171
1428+ CDED 90 AC        SunSqr73:               DB $90, 172
1429+ CDEF FF AC                                DB $FF, 172
1430+ CDF1 E9 AD        SunSqr74:               DB $E9, 173
1431+ CDF3 FF AD                                DB $FF, 173
1432+ CDF5 FF AD        SunSqr75:               DB $FF, 173
1433+ CDF7 44 AE        SunSqr76:               DB $44, 174
1434+ CDF9 FF AE                                DB $FF, 174
1435+ CDFB A1 AF        SunSqr77:               DB $A1, 175
1436+ CDFD FF AF                                DB $FF, 175
1437+ CDFF FF AF        SunSqr78:               DB $FF, 175
1438+ CE01 00 B0        SunSqr79:               DB $00, 176
1439+ CE03 FF B0                                DB $FF, 176
1440+ CE05 61 B1        SunSqr7A:               DB $61, 177
1441+ CE07 FF B1                                DB $FF, 177
1442+ CE09 C4 B2        SunSqr7B:               DB $C4, 178
1443+ CE0B FF B2                                DB $FF, 178
1444+ CE0D FF B2        SunSqr7C:               DB $FF, 178
1445+ CE0F 29 B3        SunSqr7D:               DB $29, 179
1446+ CE11 FF B3                                DB $FF, 179
1447+ CE13 90 B4        SunSqr7E:               DB $90, 180
1448+ CE15 FF B4                                DB $FF, 180
1449+ CE17 F9 B5        SunSqr7F:               DB $F9, 181
1450+ CE19 FF B5                                DB $FF, 181
1451+ CE1B FF B5        SunSqr80:               DB $FF, 181
1452+ CE1D 64 B6        SunSqr81:               DB $64, 182
1453+ CE1F FF B6                                DB $FF, 182
1454+ CE21 D1 B7        SunSqr82:               DB $D1, 183
1455+ CE23 FF B7        SunSqr83:               DB $FF, 183
1456+ CE25 FF B7                                DB $FF, 183
1457+ CE27 40 B8        SunSqr84:               DB $40, 184
1458+ CE29 FF B8                                DB $FF, 184
1459+ CE2B B1 B9        SunSqr85:               DB $B1, 185
1460+ CE2D FF B9                                DB $FF, 185
1461+ CE2F FF B9        SunSqr86:               DB $FF, 185
1462+ CE31 24 BA        SunSqr87:               DB $24, 186
1463+ CE33 FF BA                                DB $FF, 186
1464+ CE35 99 BB        SunSqr88:               DB $99, 187
1465+ CE37 FF BB                                DB $FF, 187
1466+ CE39 FF BB        SunSqr89:               DB $FF, 187
1467+ CE3B 10 BC        SunSqr8A:               DB $10, 188
1468+ CE3D FF BC                                DB $FF, 188
1469+ CE3F 89 BD        SunSqr8B:               DB $89, 189
1470+ CE41 FF BD                                DB $FF, 189
1471+ CE43 FF BD        SunSqr8C:               DB $FF, 189
1472+ CE45 04 BE        SunSqr8D:               DB $04, 190
1473+ CE47 FF BE                                DB $FF, 190
1474+ CE49 81 BF        SunSqr8E:               DB $81, 191
1475+ CE4B FF BF                                DB $FF, 191
1476+ CE4D FF BF        SunSqr8F:               DB $FF, 191
1477+ CE4F 00 C0        SunSqr90:               DB $00, 192
1478+ CE51 FF C0                                DB $FF, 192
1479+ CE53 81 C1        SunSqr91:               DB $81, 193
1480+ CE55 FF C1                                DB $FF, 193
1481+ CE57 FF C1        SunSqr92:               DB $FF, 193
1482+ CE59 04 C2        SunSqr93:               DB $04, 194
1483+ CE5B FF C2                                DB $FF, 194
1484+ CE5D 89 C3        SunSqr94:               DB $89, 195
1485+ CE5F FF C3                                DB $FF, 195
1486+ CE61 FF C3        SunSqr95:               DB $FF, 195
1487+ CE63 10 C4        SunSqr96:               DB $10, 196
1488+ CE65 FF C4                                DB $FF, 196
1489+ CE67 99 C5        SunSqr97:               DB $99, 197
1490+ CE69 FF C5                                DB $FF, 197
1491+ CE6B FF C5        SunSqr98:               DB $FF, 197
1492+ CE6D 24 C6        SunSqr99:               DB $24, 198
1493+ CE6F FF C6                                DB $FF, 198
1494+ CE71 B1 C7        SunSqr9A:               DB $B1, 199
1495+ CE73 FF C7                                DB $FF, 199
1496+ CE75 FF C7        SunSqr9B:               DB $FF, 199
1497+ CE77 40 C8        SunSqr9C:               DB $40, 200
1498+ CE79 FF C8                                DB $FF, 200
1499+ CE7B D1 C9        SunSqr9D:               DB $D1, 201
1500+ CE7D FF C9                                DB $FF, 201
1501+ CE7F FF C9        SunSqr9E:               DB $FF, 201
1502+ CE81 64 CA        SunSqr9F:               DB $64, 202
1503+ CE83 FF CA                                DB $FF, 202
1504+ CE85 F9 CB        SunSqrA0:               DB $F9, 203
1505+ CE87 FF CB                                DB $FF, 203
1506+ CE89 FF CB        SunSqrA1:               DB $FF, 203
1507+ CE8B 90 CC        SunSqrA2:               DB $90, 204
1508+ CE8D FF CC                                DB $FF, 204
1509+ CE8F FF CC        SunSqrA3:               DB $FF, 204
1510+ CE91 29 CD        SunSqrA4:               DB $29, 205
1511+ CE93 FF CD                                DB $FF, 205
1512+ CE95 C4 CE        SunSqrA5:               DB $C4, 206
1513+ CE97 FF CE                                DB $FF, 206
1514+ CE99 FF CE        SunSqrA6:               DB $FF, 206
1515+ CE9B 61 CF        SunSqrA7:               DB $61, 207
1516+ CE9D FF CF                                DB $FF, 207
1517+ CE9F FF CF        SunSqrA8:               DB $FF, 207
1518+ CEA1 00 D0        SunSqrA9:               DB $00, 208
1519+ CEA3 FF D0                                DB $FF, 208
1520+ CEA5 A1 D1        SunSqrAA:               DB $A1, 209
1521+ CEA7 FF D1                                DB $FF, 209
1522+ CEA9 FF D1        SunSqrAB:               DB $FF, 209
1523+ CEAB 44 D2        SunSqrAC:               DB $44, 210
1524+ CEAD FF D2                                DB $FF, 210
1525+ CEAF E9 D3        SunSqrAD:               DB $E9, 211
1526+ CEB1 FF D3                                DB $FF, 211
1527+ CEB3 FF D3        SunSqrAE:               DB $FF, 211
1528+ CEB5 90 D4        SunSqrAF:               DB $90, 212
1529+ CEB7 FF D4        SunSqrB0:               DB $FF, 212
1530+ CEB9 39 D5        SunSqrB1:               DB $39, 213
1531+ CEBB FF D5                                DB $FF, 213
1532+ CEBD E4 D6        SunSqrB2:               DB $E4, 214
1533+ CEBF FF D6                                DB $FF, 214
1534+ CEC1 FF D6        SunSqrB3:               DB $FF, 214
1535+ CEC3 91 D7        SunSqrB4:               DB $91, 215
1536+ CEC5 FF D7                                DB $FF, 215
1537+ CEC7 FF D7        SunSqrB5:               DB $FF, 215
1538+ CEC9 40 D8        SunSqrB6:               DB $40, 216
1539+ CECB FF D8                                DB $FF, 216
1540+ CECD F1 D9        SunSqrB7:               DB $F1, 217
1541+ CECF FF D9                                DB $FF, 217
1542+ CED1 FF D9        SunSqrB8:               DB $FF, 217
1543+ CED3 FF D9                                DB $FF, 217
1544+ CED5 A4 DA        SunSqrB9:               DB $A4, 218
1545+ CED7 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1546+ CED9 59 DB        SunSqrBB:               DB $59, 219
1547+ CEDB FF DB                                DB $FF, 219
1548+ CEDD FF DB        SunSqrBC:               DB $FF, 219
1549+ CEDF 10 DC        SunSqrBD:               DB $10, 220
1550+ CEE1 FF DC                                DB $FF, 220
1551+ CEE3 C9 DD        SunSqrBE:               DB $C9, 221
1552+ CEE5 FF DD                                DB $FF, 221
1553+ CEE7 FF DD        SunSqrBF:               DB $FF, 221
1554+ CEE9 84 DE        SunSqrC0:               DB $84, 222
1555+ CEEB FF DE                                DB $FF, 222
1556+ CEED FF DE        SunSqrC1:               DB $FF, 222
1557+ CEEF 41 DF        SunSqrC2:               DB $41, 223
1558+ CEF1 FF DF                                DB $FF, 223
1559+ CEF3 FF DF        SunSqrC3:               DB $FF, 223
1560+ CEF5 00 E0        SunSqrC4:               DB $00, 224
1561+ CEF7 FF E0                                DB $FF, 224
1562+ CEF9 C1 E1        SunSqrC5:               DB $C1, 225
1563+ CEFB FF E1                                DB $FF, 225
1564+ CEFD FF E1        SunSqrC6:               DB $FF, 225
1565+ CEFF 84 E2        SunSqrC7:               DB $84, 226
1566+ CF01 FF E2        SunSqrC8:               DB $FF, 226
1567+ CF03 49 E3        SunSqrC9:               DB $49, 227
1568+ CF05 FF E3                                DB $FF, 227
1569+ CF07 FF E4        SunSqrCA:               DB $FF, 228
1570+ CF09 10 E4        SunSqrCB:               DB $10, 228
1571+ CF0B FF E4                                DB $FF, 228
1572+ CF0D D9 E5        SunSqrCC:               DB $D9, 229
1573+ CF0F FF E5                                DB $FF, 229
1574+ CF11 FF E5        SunSqrCD:               DB $FF, 229
1575+ CF13 A4 E6        SunSqrCE:               DB $A4, 230
1576+ CF15 FF E6                                DB $FF, 230
1577+ CF17 FF E6        SunSqrCF:               DB $FF, 230
1578+ CF19 71 E7        SunSqrD0:               DB $71, 231
1579+ CF1B FF E7                                DB $FF, 231
1580+ CF1D FF E7        SunSqrD1:               DB $FF, 231
1581+ CF1F 40 E8        SunSqrD2:               DB $40, 232
1582+ CF21 FF E8                                DB $FF, 232
1583+ CF23 FF E8        SunSqrD3:               DB $FF, 232
1584+ CF25 11 E9        SunSqrD4:               DB $11, 233
1585+ CF27 FF E9                                DB $FF, 233
1586+ CF29 E4 EA        SunSqrD5:               DB $E4, 234
1587+ CF2B FF EA                                DB $FF, 234
1588+ CF2D FF EA        SunSqrD6:               DB $FF, 234
1589+ CF2F B9 EB        SunSqrD7:               DB $B9, 235
1590+ CF31 FF EB                                DB $FF, 235
1591+ CF33 FF EB        SunSqrD8:               DB $FF, 235
1592+ CF35 90 EC        SunSqrD9:               DB $90, 236
1593+ CF37 FF EC                                DB $FF, 236
1594+ CF39 FF EC        SunSqrDA:               DB $FF, 236
1595+ CF3B 69 ED        SunSqrDB:               DB $69, 237
1596+ CF3D FF ED                                DB $FF, 237
1597+ CF3F FF ED        SunSqrDC:               DB $FF, 237
1598+ CF41 44 EE        SunSqrDD:               DB $44, 238
1599+ CF43 FF EE        SunSqrDE:               DB $FF, 238
1600+ CF45 21 EF        SunSqrDF:               DB $21, 239
1601+ CF47 FF EF                                DB $FF, 239
1602+ CF49 00 F0        SunSqrE0:               DB $00, 240
1603+ CF4B FF F0                                DB $FF, 240
1604+ CF4D 00 F0        SunSqrE1:               DB $00, 240
1605+ CF4F FF F0                                DB $FF, 240
1606+ CF51 E1 F1        SunSqrE2:               DB $E1, 241
1607+ CF53 FF F1                                DB $FF, 241
1608+ CF55 E1 F1        SunSqrE3:               DB $E1, 241
1609+ CF57 FF F1                                DB $FF, 241
1610+ CF59 C4 F2        SunSqrE4:               DB $C4, 242
1611+ CF5B FF F2                                DB $FF, 242
1612+ CF5D FF F2        SunSqrE5:               DB $FF, 242
1613+ CF5F A9 F3        SunSqrE6:               DB $A9, 243
1614+ CF61 FF F3                                DB $FF, 243
1615+ CF63 FF F3        SunSqrE7:               DB $FF, 243
1616+ CF65 FF F3                                DB $FF, 243
1617+ CF67 90 F3        SunSqrE8:               DB $90, 243
1618+ CF69 FF F4                                DB $FF, 244
1619+ CF6B FF F4        SunSqrE9:               DB $FF, 244
1620+ CF6D 79 F5        SunSqrEA:               DB $79, 245
1621+ CF6F FF F5                                DB $FF, 245
1622+ CF71 FF F5        SunSqrEB:               DB $FF, 245
1623+ CF73 64 F6        SunSqrEC:               DB $64, 246
1624+ CF75 FF F6        SunSqrED:               DB $FF, 246
1625+ CF77 51 F7        SunSqrEE:               DB $51, 247
1626+ CF79 FF F7                                DB $FF, 247
1627+ CF7B FF F7        SunSqrEF:               DB $FF, 247
1628+ CF7D 40 F8        SunSqrF0:               DB $40, 248
1629+ CF7F FF F8        SunSqrF1:               DB $FF, 248
1630+ CF81 31 F9        SunSqrF2:               DB $31, 249
1631+ CF83 FF F9                                DB $FF, 249
1632+ CF85 FF F9        SunSqrF3:               DB $FF, 249
1633+ CF87 24 FA        SunSqrF4:               DB $24, 250
1634+ CF89 FF FA                                DB $FF, 250
1635+ CF8B FF FA        SunSqrF5:               DB $FF, 250
1636+ CF8D 19 FB        SunSqrF6:               DB $19, 251
1637+ CF8F FF FB                                DB $FF, 251
1638+ CF91 FF FB        SunSqrF7:               DB $FF, 251
1639+ CF93 10 FC        SunSqrF8:               DB $10, 252
1640+ CF95 FF FC                                DB $FF, 252
1641+ CF97 FF FC        SunSqrF9:               DB $FF, 252
1642+ CF99 09 FD        SunSqrFA:               DB $09, 253
1643+ CF9B FF FD                                DB $FF, 253
1644+ CF9D FF FD        SunSqrFB:               DB $FF, 253
1645+ CF9F 04 FE        SunSqrFC:               DB $04, 254
1646+ CFA1 FF FE                                DB $FF, 254
1647+ CFA3 FF FE        SunSqrFD:               DB $FF, 254
1648+ CFA5 01 FF        SunSqrFE:               DB $01, 255
1649+ CFA7 FF FF        SunSqrFF:               DB $FF, 255
1650+ CFA9
1651+ CFA9
1652+ CFA9
1653+ CFA9              SunBankSize  EQU $ - StartOfSun
1654+ CFA9
1655+ CFA9
# file closed: ./Universe/Sun/sun_data.asm
1640  CFA9                                  DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
1641  CFA9                                  ASSERT $-SunBankAddr <8912, Bank code leaks over 8K boundary
1642  CFA9              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1643  CFA9                                  SLOT    PlanetBankAddr
1644  CFA9                                  PAGE    BankPlanetData
1645  CFA9                                  ORG	    PlanetBankAddr,BankPlanetData
1646  C000                                  INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000
   2+ C000              ;- DEBUG CODE
   3+ C000                                      IFDEF BLINEDEBUG
   4+ C000 ~            TestBLINE:              ld  a,$FF
   5+ C000 ~                                    ld  (P_BnKFlag),a
   6+ C000 ~                                    ld  a,5
   7+ C000 ~                                    ld  (P_BnKSTP),a
   8+ C000 ~                                    ZeroA
   9+ C000 ~                                    ld  (P_BnKCNT),a
  10+ C000 ~            .DebugLoop:             ld  ix,(DataPointer)
  11+ C000 ~                                    ld  a,(ix+0)
  12+ C000 ~                                    ld  l,a
  13+ C000 ~                                    ld  a,(ix+1)
  14+ C000 ~                                    ld  h,a
  15+ C000 ~                                    ld  (P_NewXPos),hl
  16+ C000 ~                                    ld  a,(ix+2)
  17+ C000 ~                                    ld  l,a
  18+ C000 ~                                    ld  a,(ix+3)
  19+ C000 ~                                    ld  h,a
  20+ C000 ~                                    ld  (P_NewYPos),hl
  21+ C000 ~                                    call    BLINE
  22+ C000 ~                                    ld      a,(DataPointCounter)
  23+ C000 ~                                    inc     a
  24+ C000 ~                                    ld      hl,DataPointSize
  25+ C000 ~                                    cp      (hl)
  26+ C000 ~                                    ret     z
  27+ C000 ~                                    ld      (DataPointCounter),a
  28+ C000 ~                                    ld      hl,(DataPointer)
  29+ C000 ~                                    ld      a,4
  30+ C000 ~                                    add     hl,a
  31+ C000 ~                                    ld      (DataPointer),hl
  32+ C000 ~                                    jp      .DebugLoop
  33+ C000 ~
  34+ C000 ~            DataPoints:             DW  10,10, 20,60, 30,20, 40,50, 100,90, 150, 30
  35+ C000 ~            DataPointSize           DB  6
  36+ C000 ~            DataPointCounter        DB  0
  37+ C000 ~            DataPointer:            DW  DataPoints
  38+ C000                                      ENDIF
  39+ C000
  40+ C000                                      IFDEF TESTMERIDIAN
  41+ C000 ~            TestMeridian:           ld      hl,20        ; 20
  42+ C000 ~                                    ld      (P_BnKVx),hl ; vx
  43+ C000 ~                                    ld      hl,20        ; 20
  44+ C000 ~                                    ld      (P_BnKVy),hl ; vy
  45+ C000 ~                                    ld      hl,20        ; 20
  46+ C000 ~                                    ld      (P_BnKUx),hl ; ux
  47+ C000 ~                                    ld      hl, $8014    ; -20
  48+ C000 ~                                    ld      (P_BnKUy),hl ; uy
  49+ C000 ~                                    ld      de,120       ; 120
  50+ C000 ~                                    ld      (P_BnKCx),de ; cx
  51+ C000 ~                                    ld      de,69        ; 69
  52+ C000 ~                                    ld      (P_BnKCy),de ; cy
  53+ C000 ~                                    call    DrawMeridian
  54+ C000                                      ENDIF
  55+ C000
  56+ C000              ; In  flight ship data tables
  57+ C000              ; In  flight ship data tables
  58+ C000              ; In  flight ship data tables
  59+ C000              ; There can be upto &12 objects in flight.
  60+ C000              ; To avoid hassle of memory heap managment, the free list
  61+ C000              ; will correspond to a memory bank offset so data will be held in
  62+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  63+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  64+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  65+ C000              ; This means each gets its own line list, inwork etc
  66+ C000
  67+ C000              ; "Runtime Ship Data paged into in Bank 7"
  68+ C000              ;                      0123456789ABCDEF
  69+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  69+ C004 65 74 20 44
  69+ C008 61 74 61 2E
  69+ C00C 2E 2E 2E 2E
  70+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  71+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  72+ C010              ; Universe map substibute for INWK
  73+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  74+ C010              P_BnKDataBlock:
  75+ C010                                      ;INCLUDE "./Universe/Planet/PlanetPosVars.asm"
  76+ C010                                      ;INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
  77+ C010                                      ;INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
  78+ C010                                          UnivPosVarsMacro P
  78+ C010 00          >P_BnKxlo                     DB  0                       ; INWK+0
  78+ C011 00          >P_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  78+ C012 00          >P_BnKxsgn                    DB  0                       ; INWK+2
  78+ C013 00          >P_BnKylo                     DB  0                       ; INWK+3 \ ylo
  78+ C014 00          >P_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  78+ C015 00          >P_BnKysgn                    DB  0                       ; INWK +5
  78+ C016 00          >P_BnKzlo                     DB  0                       ; INWK +6
  78+ C017 00          >P_BnKzhi                     DB  0                       ; INWK +7
  78+ C018 00          >P_BnKzsgn                    DB  0                       ; INWK +8
  78+ C019 00 00       >P_CompassX                   DW  0
  78+ C01B 00 00       >P_CompassY                   DW  0
  78+ C01D 00 00       >P_BnKElipseCenterX           DW  0
  78+ C01F 00 00       >P_BnKElipseCenterY           DW  0
  78+ C021 00 00       >P_BnKElipseRadiusU           DW  0
  78+ C023 00 00       >P_BnKElipseRadiusV           DW  0
  79+ C025                                          UnivRotationVarsMacro P
  79+ C025 00 00       >P_BnKrotmatSidevX            DW  0                       ; INWK +21
  79+ C027             >P_BnKrotmatSidev             equ P_BnKrotmatSidevX
  79+ C027 00 00       >P_BnKrotmatSidevY            DW  0                       ; INWK +23
  79+ C029 00 00       >P_BnKrotmatSidevZ            DW  0                       ; INWK +25
  79+ C02B 00 00       >P_BnKrotmatRoofvX            DW  0                       ; INWK +15
  79+ C02D             >P_BnKrotmatRoofv             equ P_BnKrotmatRoofvX
  79+ C02D 00 00       >P_BnKrotmatRoofvY            DW  0                       ; INWK +17
  79+ C02F 00 00       >P_BnKrotmatRoofvZ            DW  0                       ; INWK +19
  79+ C031 00 00       >P_BnKrotmatNosevX            DW  0                       ; INWK +9
  79+ C033             >P_BnKrotmatNosev             EQU P_BnKrotmatNosevX
  79+ C033 00 00       >P_BnKrotmatNosevY            DW  0                       ; INWK +11
  79+ C035 00 00       >P_BnKrotmatNosevZ            DW  0                       ; INWK +13
  80+ C037
  81+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
  82+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
  83+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
  84+ C037                                          XX16DefineMacro P
  84+ C037             >;-- XX16 --------------------------------------------------------------------------------------------------------------------------
  84+ C037 00 00       >P_BnkTransmatSidevX          DW  0               ; XX16+0
  84+ C039             >P_BnkTransmatSidev           EQU P_BnkTransmatSidevX
  84+ C039 00 00       >P_BnkTransmatSidevY          DW 0                ; XX16+2
  84+ C03B 00 00       >P_BnkTransmatSidevZ          DW 0                ; XX16+2
  84+ C03D 00 00       >P_BnkTransmatRoofvX          DW 0
  84+ C03F             >P_BnkTransmatRoofv           EQU P_BnkTransmatRoofvX
  84+ C03F 00 00       >P_BnkTransmatRoofvY          DW 0                ; XX16+2
  84+ C041 00 00       >P_BnkTransmatRoofvZ          DW 0                ; XX16+2
  84+ C043 00 00       >P_BnkTransmatNosevX          DW 0
  84+ C045             >P_BnkTransmatNosev           EQU P_BnkTransmatNosevX
  84+ C045 00 00       >P_BnkTransmatNosevY          DW 0                ; XX16+2
  84+ C047 00 00       >P_BnkTransmatNosevZ          DW 0                ; XX16+2
  84+ C049 00 00       >P_BnkTransmatTransX          DW 0
  84+ C04B 00 00       >P_BnkTransmatTransY          DW 0
  84+ C04D 00 00       >P_BnkTransmatTransZ          DW 0
  84+ C04F             >P_XX16                       equ P_BnkTransmatSidev
  84+ C04F             >;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  84+ C04F 00 00       >P_BnkTransInvRow0x0          DW 0
  84+ C051 00 00       >P_BnkTransInvRow0x1          DW 0
  84+ C053 00 00       >P_BnkTransInvRow0x2          DW 0
  84+ C055 00 00       >P_BnkTransInvRow0x3          DW 0
  84+ C057 00 00       >P_BnkTransInvRow1y0          DW 0
  84+ C059 00 00       >P_BnkTransInvRow1y1          DW 0
  84+ C05B 00 00       >P_BnkTransInvRow1y2          DW 0
  84+ C05D 00 00       >P_BnkTransInvRow1y3          DW 0
  84+ C05F 00 00       >P_BnkTransInvRow2z0          DW 0
  84+ C061 00 00       >P_BnkTransInvRow2z1          DW 0
  84+ C063 00 00       >P_BnkTransInvRow2z2          DW 0
  84+ C065 00 00       >P_BnkTransInvRow2z3          DW 0
  84+ C067             >
  84+ C067             >P_XX16Inv                    equ P_BnkTransInvRow0x0
  85+ C067                                          XX25DefineMacro P
  85+ C067             >;-- XX25 --------------------------------------------------------------------------------------------------------------------------
  85+ C067 00          >P_BnKProjxLo                 DB  0
  85+ C068 00          >P_BnKProjxHi                 DB  0
  85+ C069 00          >P_BnKProjxSgn                DB  0
  85+ C06A             >P_BnKProjx                   EQU P_BnKProjxLo
  85+ C06A 00          >P_BnKProjyLo                 DB  0
  85+ C06B 00          >P_BnKProjyHi                 DB  0
  85+ C06C 00          >P_BnKProjySgn                DB  0
  85+ C06D             >P_BnKProjy                   EQU P_BnKProjyLo
  85+ C06D 00          >P_BnKProjzLo                 DB  0
  85+ C06E 00          >P_BnKProjzHi                 DB  0
  85+ C06F 00          >P_BnKProjzSgn                DB  0
  85+ C070             >P_BnKProjz                   EQU P_BnKProjzLo
  85+ C070             >P_XX25                       EQU P_BnKProjxLo
  86+ C070                                          XX18DefineMacro P
  86+ C070             >;-- XX18 --------------------------------------------------------------------------------------------------------------------------
  86+ C070 00          >P_BnkDrawCam0xLo             DB  0               ; XX18+0
  86+ C071 00          >P_BnkDrawCam0xHi             DB  0               ; XX18+1
  86+ C072 00          >P_BnkDrawCam0xSgn            DB  0               ; XX18+2
  86+ C073             >P_BnkDrawCam0x               equ P_BnkDrawCam0xLo
  86+ C073 00          >P_BnkDrawCam0yLo             DB  0               ; XX18+3
  86+ C074 00          >P_BnkDrawCam0yHi             DB  0               ; XX18+4
  86+ C075 00          >P_BnkDrawCam0ySgn            DB  0               ; XX18+5
  86+ C076             >P_BnkDrawCam0y               equ P_BnkDrawCam0yLo
  86+ C076 00          >P_BnkDrawCam0zLo             DB  0               ; XX18+6
  86+ C077 00          >P_BnkDrawCam0zHi             DB  0               ; XX18+7
  86+ C078 00          >P_BnkDrawCam0zSgn            DB  0               ; XX18+8
  86+ C079             >P_BnkDrawCam0z               equ P_BnkDrawCam0zLo
  86+ C079             >P_XX18                       equ P_BnkDrawCam0xLo
  87+ C079
  88+ C079                                          UnivCoreAIVarsMacro P
  88+ C079 00          >P_BnKRotXCounter             DB  0                       ; INWK +29
  88+ C07A 00          >P_BnKRotZCounter             DB  0                       ; INWK +30
  88+ C07B 00          >P_BnkCam0yLo                 DB  0                       ; INWK +33 ????
  88+ C07C 00          >P_BnkCam0yHi                 DB  0                       ; INWK +34?????
  88+ C07D 00          >P_BnKShipType                DB  0
  88+ C07E             >
  88+ C07E             >; Used to make 16 bit reads a little cleaner in source code
  88+ C07E 00 00 00    >P_BnKzPoint                  DS  3
  88+ C081             >P_BnKzPointLo                equ P_BnKzPoint
  88+ C081             >P_BnKzPointHi                equ P_BnKzPoint+1
  88+ C081             >P_BnKzPointSign              equ P_BnKzPoint+2
  88+ C081             >
  88+ C081             >; Used for medridan drawing routines
  88+ C081 00 00       >P_BnKCx                      DW  0
  88+ C083             >P_BnKCxSign                  EQU P_BnKCx+1
  88+ C083 00 00       >P_BnKCy                      DW  0
  88+ C085             >P_BnKCySign                  EQU P_BnKCy+1
  88+ C085 00 00       >P_BnKUx                      DW  0
  88+ C087             >P_BnKUxSign                  EQU P_BnKUx+1
  88+ C087 00 00       >P_BnKUy                      DW  0
  88+ C089             >P_BnKUySign                  EQU P_BnKUy+1
  88+ C089 00 00       >P_BnKVx                      DW  0
  88+ C08B             >P_BnKVxSign                  EQU P_BnKVx+1
  88+ C08B 00 00       >P_BnKVy                      DW  0
  88+ C08D             >P_BnKVySign                  EQU P_BnKVy+1
  88+ C08D 00          >P_BnKSinCNT2                 DB  0
  88+ C08E 00          >P_BnKSinCNT2Sign             DB  0
  88+ C08F 00          >P_BnKCosCNT2                 DB  0
  88+ C090 00          >P_BnKCosCNT2Sign             DB  0
  88+ C091 00          >P_BnKUxCos                   DB  0
  88+ C092 00          >P_BnKUxCosSign               DB  0
  88+ C093 00          >P_BnKUyCos                   DB  0
  88+ C094 00          >P_BnKUyCosSign               DB  0
  88+ C095 00          >P_BnKVxSin                   DB  0
  88+ C096 00          >P_BnKVxSinSign               DB  0
  88+ C097 00          >P_BnKVySin                   DB  0
  88+ C098 00          >P_BnKVySinSign               DB  0
  88+ C099 00          >P_BnKVxVySinSign             DB  0
  88+ C09A 00          >P_BnKUxUyCosSign             DB  0
  88+ C09B 00 00       >P_BnKUxCosAddVxSin           DW  0
  88+ C09D 00 00       >P_BnKUyCosSubVySin           DW  0
  88+ C09F 00          >P_BnKAngle                   DB  0
  88+ C0A0             >s
  88+ C0A0             >
  88+ C0A0             >; General local variables used in universe object
  88+ C0A0 00          >P_BnKTGT                     DB  0
  88+ C0A1 00          >P_BnKSTP                     DB  0
  88+ C0A2 00 00 00... >P_BnKLSP                     DS  50              ; move to planet or L2 code ?
  88+ C0D4 00          >P_BnKCNT                     DB  0               ; 93
  88+ C0D5 00          >P_BnKCNT2                    DB  0               ; 93
  88+ C0D6             >; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  88+ C0D6             >    IFDEF MERIDANLINEDEBUG
  88+ C0D6 ~           >prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  88+ C0D6 ~           >prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  88+ C0D6             >    ENDIF
  88+ C0D6 00          >P_BnKPlotIndex               DB  0
  88+ C0D7             >    DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  88+ C0D7 00          >P_BnKFlag					DB  0
  88+ C0D8             >
  88+ C0D8             >; Post clipping the results are now 8 bit
  88+ C0D8 00          >P_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  88+ C0D9 00          >P_BnKProjectedY              DB  0
  88+ C0DA 00          >P_BnKProjectedX              DB  0
  88+ C0DB             >P_BnKProjected               equ P_BnKProjectedY  ; resultant projected position
  88+ C0DB 00 00 00... >P_XX15Save                   DS  8
  88+ C0E3 00 00 00... >P_XX15Save2                  DS  8
  88+ C0EB 00          >P_Radius                     DB  0
  88+ C0EC             >; Used when drawing curves for the end value from previous calls to BLINE
  88+ C0EC             >; held as 16 bit values pre clipping
  88+ C0EC 00 00       >P_PrevXPos                   DW 0
  88+ C0EE 00 00       >P_PrevYPos                   DW 0
  88+ C0F0 00 00       >P_NewXPos                    DW 0
  88+ C0F2 00 00       >P_NewYPos                    DW 0
  88+ C0F4             >
  88+ C0F4             >; Colouration
  88+ C0F4             >; For planets, Colour 1 is main colour, Colour 2 is outer rim
  88+ C0F4             >; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  88+ C0F4 00          >P_Colour1                    DB 0
  88+ C0F5 00          >P_Colour2                    DB 0
  88+ C0F6 00          >P_Colour2Thickness           DB 0
  88+ C0F7             >
  88+ C0F7             >;        -- _pl(prf .. "Radius                     DW  0
  88+ C0F7             >;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  89+ C0F7
  90+ C0F7
  91+ C0F7                                      ;INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
  92+ C0F7                                          XX15DefineMacro P
  92+ C0F7             >
  92+ C0F7 00          >P_BnKXScaled                  DB  0               ; XX15+0Xscaled
  92+ C0F8 00          >P_BnKXScaledSign              DB  0               ; XX15+1xsign
  92+ C0F9 00          >P_BnKYScaled                  DB  0               ; XX15+2yscaled
  92+ C0FA 00          >P_BnKYScaledSign              DB  0               ; XX15+3ysign
  92+ C0FB 00          >P_BnKZScaled                  DB  0               ; XX15+4zscaled
  92+ C0FC 00          >P_BnKZScaledSign              DB  0               ; XX15+5zsign
  92+ C0FD 00 00       >P_XX1576                      DW  0    ; y2
  92+ C0FF             >
  92+ C0FF             >P_XX15:                       equ P_BnKXScaled
  92+ C0FF             >P_XX15VecX:                   equ P_XX15
  92+ C0FF             >P_XX15VecY:                   equ P_XX15+1
  92+ C0FF             >P_XX15VecZ:                   equ P_XX15+2
  92+ C0FF             >P_BnKXPoint:                  equ P_XX15
  92+ C0FF             >P_BnKXPointLo:                equ P_XX15+0
  92+ C0FF             >P_BnKXPointHi:                equ P_XX15+1
  92+ C0FF             >P_BnKXPointSign:              equ P_XX15+2
  92+ C0FF             >P_BnKYPoint:                  equ P_XX15+3
  92+ C0FF             >P_BnKYPointLo:                equ P_XX15+3
  92+ C0FF             >P_BnKYPointHi:                equ P_XX15+4
  92+ C0FF             >P_BnKYPointSign:              equ P_XX15+5
  92+ C0FF             >
  92+ C0FF             >P_XX1510                      EQU P_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
  92+ C0FF             >P_XX1532                      EQU P_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
  92+ C0FF             >P_XX1554                      EQU P_BnKZScaled   ; x2
  92+ C0FF             >P_XX1554p1                    EQU P_XX1554+1
  92+ C0FF             >P_XX15X1lo                    EQU P_XX1510
  92+ C0FF             >P_XX15X1hi                    EQU P_XX1510+1
  92+ C0FF             >P_XX15Y1lo                    EQU P_XX1532
  92+ C0FF             >P_XX15Y1hi                    EQU P_XX1532+1
  92+ C0FF             >P_XX15X2lo                    EQU P_XX1554
  92+ C0FF             >P_XX15X2hi                    EQU P_XX1554+1
  92+ C0FF             >P_XX15Y2lo                    EQU P_XX1210
  92+ C0FF             >P_XX15Y2hi                    EQU P_XX1210+1
  92+ C0FF             >P_XX15PlotX1                  EQU P_XX15
  92+ C0FF             >P_XX15PlotY1                  EQU P_XX15+1
  92+ C0FF             >P_XX15PlotX2                  EQU P_XX15+2
  92+ C0FF             >P_XX15PlotY2                  EQU P_XX15+3
  93+ C0FF                                      ;INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
  94+ C0FF                                          XX12DefineMacro P
  94+ C0FF             >;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
  94+ C0FF             >; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
  94+ C0FF             >
  94+ C0FF             >P_XX1210                     EQU P_XX1576
  94+ C0FF             >P_XX12p1                     EQU P_XX1210+1
  94+ C0FF             >P_XX12                       EQU P_XX1210
  94+ C0FF             >
  94+ C0FF             >
  94+ C0FF             >P_BnKXX12xLo                 EQU P_XX12               ; XX12+0
  94+ C0FF             >P_BnKXX12xSign               EQU P_XX12+1   ; XX12+1
  94+ C0FF             >P_BnKXX12yLo                 EQU P_XX12+2   ; XX12+2
  94+ C0FF             >P_BnKXX12ySign               EQU P_XX12+3   ; XX12+3
  94+ C0FF             >P_BnKXX12zLo                 EQU P_XX12+4   ; XX12+4
  94+ C0FF             >P_BnKXX12zSign               EQU P_XX12+5   ; XX12+5
  94+ C0FF 00 00 00... >P_XX12Save                   DS  6
  94+ C105 00 00 00... >P_XX12Save2                  DS  6
  94+ C10B             >
  94+ C10B             >P_varXX12                    EQU P_XX12
  94+ C10B             >; Repurposed XX12 when plotting lines
  94+ C10B             >P_BnkY2                      equ P_XX12+0
  94+ C10B             >P_BnKy2Lo                    equ P_XX12+0
  94+ C10B             >P_BnkY2Hi                    equ P_XX12+1
  94+ C10B             >P_BnkDeltaXLo                equ P_XX12+2
  94+ C10B             >P_BnkDeltaXHi                equ P_XX12+3
  94+ C10B             >P_BnkDeltaYLo                equ P_XX12+4
  94+ C10B             >P_BnkDeltaYHi                equ P_XX12+5
  94+ C10B             >P_BnkGradient                equ P_XX12+2
  94+ C10B             >P_BnkTemp1                   equ P_XX12+2
  94+ C10B             >P_BnkTemp1Lo                 equ P_XX12+2
  94+ C10B             >P_BnkTemp1Hi                 equ P_XX12+3
  94+ C10B             >P_BnkTemp2                   equ P_XX12+3
  94+ C10B             >P_BnkTemp2Lo                 equ P_XX12+3
  94+ C10B             >P_BnkTemp2Hi                 equ P_XX12+4
  95+ C10B
  96+ C10B                                          ClippingVarsMacro P
  96+ C10B             >;-- Clipping code for universe objects -------------------------------------------
  96+ C10B 00          >P_XX13        DB 0
  96+ C10C             >
  96+ C10C             >
  96+ C10C 00 00 00 00 >P_varK3		 DS	4				; D2
  96+ C110             >P_centreX     equ P_varK3
  96+ C110 00          >P_varK3p2	 DB	0				; 42
  96+ C111 00          >P_varK3p3	 DB	0				; 43
  96+ C112             >P_varK3p1	 equ P_varK3+1			; D3
  96+ C112 00 00 00 00 >P_varK4		 DS	4				; E0
  96+ C116             >P_centreY     equ P_varK4
  96+ C116             >P_varK4p1	 equ P_varK4+1			; D3
  96+ C116 00 00 00... >P_varK5       DS  6
  96+ C11C             >P_varK5p2     equ P_varK5+2
  96+ C11C 00 00 00... >P_varK6       DS  6
  96+ C122             >P_varK6p2     equ P_varK6+2
  96+ C122             >
  96+ C122 00          >P_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  96+ C123 00          >P_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  96+ C124 00          >P_XX12p4      DB 0
  96+ C125 00          >P_XX12p5      DB 0
  96+ C126             >P_Delta_x     EQU P_XX12p2
  96+ C126             >P_Delta_y     EQU P_XX12p4
  96+ C126 00          >P_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  96+ C127 00          >P_Qvar        DB 0
  96+ C128 00          >P_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  96+ C129 00          >P_Svar        DB 0    ; sign variable
  96+ C12A             >P_SRvarPair   EQU P_Rvar
  96+ C12A 00          >P_Xreg        DB 0
  96+ C12B 00          >P_Yreg        DB 0
  96+ C12C             >P_YXregPair   EQU P_Xreg
  97+ C12C
  98+ C12C
  99+ C12C              P_BnK_Data_len               EQU $ - P_BnKDataBlock
 100+ C12C
 101+ C12C
 102+ C12C                                          ClippingCodeLL28Macro P
 102+ C12C 21 B6 F1    >P_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 102+ C12F 4E          >                            ld      c,(hl)                  ; using c as Q var
 102+ C130 B9          >                            cp      c
 102+ C131             >                            FlipCarryFlag
 102+ C131 3F          >                        ccf
 102+ C132 DA 5A C1    >                            jp      c, P_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
 102+ C135 06 FE       >                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 102+ C137 CB 27       >P_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 102+ C139 DA 4E C1    >                            jp      c, P_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 102+ C13C             >                            FlipCarryFlag                   ;                          If A < N, then C flag is set.
 102+ C13C 3F          >                        ccf
 102+ C13D             >                            JumpIfALTNusng c, P_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 102+ C13D B9          >                        cp      c
 102+ C13E DA 43 C1    >                        jp		c, P_LL31_SKIPSUB_6502
 102+ C141             >                                                                ; BCC P%+4
 102+ C141 91          >                            sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C142             >                            ClearCarryFlag
 102+ C142 B7          >                        or a
 102+ C143             >P_LL31_SKIPSUB_6502:  FlipCarryFlag
 102+ C143 3F          >                        ccf
 102+ C144 CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C146 DA 37 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C149 78          >                            ld      a,b
 102+ C14A 32 B7 F1    >                            ld      (Rvar),a
 102+ C14D C9          >                            ret                             ; RTS                    \ R left with remainder of division
 102+ C14E 91          >P_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C14F             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 102+ C14F 37          >                        scf
 102+ C150 CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C152 DA 37 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C155 78          >                            ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 102+ C156 32 B7 F1    >                            ld      (Rvar),a                ; .
 102+ C159 C9          >                            ret                             ; .                      \ remainder of the division
 102+ C15A 3E FF       >P_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 102+ C15C 32 B7 F1    >                            ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 102+ C15F             >                            SetCarryFlag                    ; we failed so need carry flag set
 102+ C15F 37          >                        scf
 102+ C160 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 102+ C161             >
 102+ C161 3A B9 F1    >P_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 102+ C164 4F          >                            ld      c,a
 102+ C165 06 00       >                            ld      b,0
 102+ C167 2A F9 C0    >                            ld      hl,(P_XX1532)
 102+ C16A             >                            ClearCarryFlag
 102+ C16A B7          >                        or a
 102+ C16B ED 4A       >                            adc     hl,bc
 102+ C16D 22 F9 C0    >                            ld      (P_XX1532),hl
 102+ C170 C9          >                            ret
 102+ C171             >
 102+ C171 ED 4B B9 F1 >P_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 102+ C175 2A F9 C0    >                            ld      hl,(P_XX1532)
 102+ C178             >                            ClearCarryFlag
 102+ C178 B7          >                        or a
 102+ C179 ED 4A       >                            adc     hl,bc
 102+ C17B 22 F9 C0    >                            ld      (P_XX1532),hl
 102+ C17E C9          >                            ret
 102+ C17F             >
 102+ C17F ED 4B B9 F1 >P_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 102+ C183 2A F7 C0    >                            ld      hl,(P_XX1510)
 102+ C186             >                            ClearCarryFlag
 102+ C186 B7          >                        or a
 102+ C187 ED 4A       >                            adc     hl,bc
 102+ C189 22 F7 C0    >                            ld      (P_XX1510),hl
 102+ C18C C9          >                            ret
 102+ C18D             >
 102+ C18D 2A F9 C0    >P_SUBBCFromY1:       ld      hl,(P_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 102+ C190             >                            ClearCarryFlag
 102+ C190 B7          >                        or a
 102+ C191 ED 42       >                            sbc     hl,bc
 102+ C193 22 B7 F1    >                            ld      (SRvarPair),hl
 102+ C196 C9          >                            ret
 102+ C197             >
 102+ C197 2A B9 F1    >P_AddSRToYX:         ld      hl,(YXregPair)
 102+ C19A ED 5B B7 F1 >                            ld      de,(SRvarPair)
 102+ C19E             >                            ClearCarryFlag
 102+ C19E B7          >                        or a
 102+ C19F ED 5A       >                            adc     hl,de
 102+ C1A1 22 B9 F1    >                            ld      (YXregPair),hl
 102+ C1A4 C9          >                            ret
 102+ C1A5             >
 102+ C1A5 7C          >P_ClampX:            ld      a,h
 102+ C1A6 A7          >                            and     a
 102+ C1A7 7D          >                            ld      a,l
 102+ C1A8 C8          >                            ret     z
 102+ C1A9 F2 AE C1    >                            jp      p,.Max255
 102+ C1AC             >.ClampXMin0:                ZeroA
 102+ C1AC AF          >                        xor a
 102+ C1AD C9          >                            ret
 102+ C1AE 3E FF       >.Max255:                    ld      a,$FF
 102+ C1B0 C9          >                            ret
 102+ C1B1             >
 102+ C1B1 7C          >P_ClampY:            ld      a,h
 102+ C1B2 A7          >                            and     a
 102+ C1B3 CA BE C1    >                            jp      z,.ClampYlo
 102+ C1B6 F2 BB C1    >                            jp      p,.Max127
 102+ C1B9             >.ClampYMin0:                ZeroA
 102+ C1B9 AF          >                        xor a
 102+ C1BA C9          >                            ret
 102+ C1BB 3E 7F       >.Max127:                    ld      a,127
 102+ C1BD C9          >                            ret
 102+ C1BE 7D          >.ClampYlo:                  ld      a,l
 102+ C1BF A7          >                            and     a
 102+ C1C0 F0          >                            ret     p
 102+ C1C1 3E 7F       >                            ld      a,127
 102+ C1C3 C9          >                            ret
 103+ C1C4                                          ClippingCodeLL120Macro P
 103+ C1C4 3A F7 C0    >P_LL120_6502:        ld      a,(P_XX1510)              ;LDA XX15               \ Set R = x1_lo
 103+ C1C7 32 B7 F1    >                            ld      (Rvar),a                ;STA R
 103+ C1CA CD 76 C2    >                            call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 103+ C1CD F5          >                            push    af                      ;PHA                    \ Store A on the stack so we can use it later
 103+ C1CE             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 103+ C1CE 3A B5 F1    >                            ld      a,(Tvar)                ; .
 103+ C1D1 32 B9 F1    >                            ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 103+ C1D4 A7          >                            and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 103+ C1D5             >; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 103+ C1D5 20 48       >                            jr      nz,P_LL121_6502           ;.
 103+ C1D7             >;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 103+ C1D7             >P_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 103+ C1D7 AF          >                        xor a
 103+ C1D8             >
 103+ C1D8             >                            IFDEF DEBUG_LL122_DIRECT"
 103+ C1D8 ~           >                                  DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 103+ C1D8 ~           >                                  push    af
 103+ C1D8             >                            ENDIF
 103+ C1D8 32 B9 F1    >                            ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 103+ C1DB 32 BA F1    >                            ld      (Yreg),a                ;TAY
 103+ C1DE 21 B8 F1    >                            ld      hl,Svar
 103+ C1E1 ED 4B B7 F1 >                            ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 103+ C1E5             >                            ShiftBCRight1                   ;ROR R                  \ into the C flag
 103+ C1E5 CB 38       >			   srl b
 103+ C1E7 CB 19       >			   rr  c
 103+ C1E9 ED 43 B7 F1 >                            ld      (SRvarPair),bc
 103+ C1ED 21 B6 F1    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C1F0 CB 26       >                            sla     (hl)                    ;.
 103+ C1F2 30 03       >                            jr      nc, P_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 103+ C1F4             >; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 103+ C1F4 CD 26 F2    >P_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 103+ C1F7 ED 4B B7 F1 >P_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 103+ C1FB             >                            ShiftBCRight1                   ;ROR R
 103+ C1FB CB 38       >			   srl b
 103+ C1FD CB 19       >			   rr  c
 103+ C1FF ED 43 B7 F1 >                            ld      (SRvarPair),bc          ;.
 103+ C203 21 B6 F1    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C206 CB 26       >                            sla     (hl)                    ;.
 103+ C208 38 EA       >                            jr      c,P_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 103+ C20A 20 EB       >                            jr      nz,P_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 103+ C20C F1          >                            pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 103+ C20D A7          >                            and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 103+ C20E F2 67 C2    >                            jp      p,P_LL133_6502            ;.
 103+ C211             >                            ;.. return from the subroutine using a tail call
 103+ C211 C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C212                                          ClippingCodeLL122Macro P
 104+ C212 CD 76 C2    >P_LL123_6502:         call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 104+ C215 F5          >                             push    af                      ;PHA                    \ Store A on the stack so we can use it later
 104+ C216             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 104+ C216 3A B5 F1    >                             ld      a,(Tvar)                ; .
 104+ C219 32 B9 F1    >                             ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 104+ C21C A7          >                             and     a                       ;.
 104+ C21D             >;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 104+ C21D 20 B8       >                             jr      nz,P_LL122_6502           ;.
 104+ C21F             >;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 104+ C21F 3E FF       >P_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 104+ C221 32 BA F1    >                             ld      (Yreg),a                ;TAY
 104+ C224 CB 27       >                             sla     a                       ;ASL A                  \ Set X = %11111110
 104+ C226 32 B9 F1    >                             ld      (Xreg),a                ;TAX
 104+ C229             >;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 104+ C229 ED 4B B7 F1 >P_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 104+ C22D             >                            ShiftBCLeft1                    ;.
 104+ C22D CB 21       >			   sla c
 104+ C22F CB 10       >			   rl  b
 104+ C231 ED 43 B7 F1 >                            ld      (SRvarPair),bc          ;ROL S
 104+ C235 3A B8 F1    >                            ld      a,(Svar)                ;LDA S                  \ Set A = S
 104+ C238 38 07       >                            jr      c, P_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 104+ C23A 21 B6 F1    >                            ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 104+ C23D BE          >                            cp      (hl)
 104+ C23E             >                            FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 104+ C23E 3F          >                        ccf
 104+ C23F 30 12       >                            jr      nc,P_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 104+ C241             >P_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 104+ C241 3F          >                        ccf
 104+ C242 9E          >                            sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 104+ C243 32 B8 F1    >                            ld      (Svar),a                ;STA S
 104+ C246 3A B7 F1    >                            ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 104+ C249             >                            ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 104+ C249 B7          >                        or a
 104+ C24A DE 00       >                            sbc     0                       ;SBC #0
 104+ C24C 32 B7 F1    >                            ld      (Rvar),a                ;STA R
 104+ C24F             >                            SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 104+ C24F 37          >                        scf
 104+ C250 C3 54 C2    >                            jp      P_LL132_6502              ;added so that we can do a 6502 style carry above
 104+ C253 00          >P_LL132A_6502:        nop; FlipCarryFlag
 104+ C254 ED 4B B9 F1 >P_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 104+ C258             >                            RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 104+ C258 CB 11       >               rl  c
 104+ C25A CB 10       >               rl  b
 104+ C25C ED 43 B9 F1 >                            ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 104+ C260 38 C7       >                            jr      c, P_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 104+ C262             >        IFDEF DEBUG_LL121_DIRECT
 104+ C262 ~           >              DISPLAY "DIRECT CALL TO LL121 so dummy push"
 104+ C262 ~           >                            push    af
 104+ C262             >        ENDIF
 104+ C262 F1          >                            pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 104+ C263 A7          >                            and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 104+ C264 FA 75 C2    >                            jp      m, P_LL128_6502           ; .                      \ subroutine with (Y X) as is
 104+ C267 ED 4B B9 F1 >P_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 104+ C26B             >                            macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 104+ C26B AF          >					xor 	a
 104+ C26C 91          >                    sub 	c
 104+ C26D 4F          >                    ld 		c,a
 104+ C26E 9F          >                    sbc 	a,a
 104+ C26F 90          >                    sub 	b
 104+ C270 47          >                    ld 		b,a
 104+ C271 ED 43 B9 F1 >                            ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 104+ C275 C9          >P_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 104+ C276             >;-------------------------------------------------------------------------------------------------------
 104+ C276             >;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 104+ C276             >;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 104+ C276 F5          >P_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 104+ C277 3A 22 C1    >                            ld      a,(P_XX12p2)              ;.
 104+ C27A 32 B9 F1    >                            ld      (Xreg),a                ;.
 104+ C27D 32 B6 F1    >                            ld      (Qvar),a                ;STX Q
 104+ C280 F1          >                            pop     af                      ;.
 104+ C281 3A B8 F1    >                            ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 104+ C284 A7          >                            and     a                       ;BPL LL127
 104+ C285 F2 9D C2    >                            jp      p,P_LL127_6502            ;.
 104+ C288             >                            ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 104+ C288 AF          >                        xor a
 104+ C289             >                            ClearCarryFlag                  ;SEC
 104+ C289 B7          >                        or a
 104+ C28A 21 B7 F1    >                            ld      hl, Rvar                ;SBC R
 104+ C28D 9E          >                            sbc     (hl)                    ;.
 104+ C28E 32 B7 F1    >                            ld      (Rvar),a                ;STA R
 104+ C291 3A B8 F1    >                            ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 104+ C294 F5          >                            push    af                      ;PHA
 104+ C295 EE FF       >                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 104+ C297 CE 00       >                            adc     0                       ;ADC #0
 104+ C299 32 B8 F1    >                            ld      (Svar),a                ;STA S
 104+ C29C F1          >                            pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 104+ C29D 21 23 C1    >P_LL127_6502:        ld      hl,P_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 104+ C2A0 AE          >                            xor     (hl)                    ;.
 104+ C2A1 C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C2A2             >;----------------------------------------------------------------------------------------------------------------
 104+ C2A2             >;--- LL118 Move along a point until on screen
 104+ C2A2             >; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 104+ C2A2             >;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 104+ C2A2             >;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 104+ C2A2             >;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 104+ C2A2             >;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 104+ C2A2             >;  Out  XX150               x1 as an 8-bit coordinate
 104+ C2A2             >;       XX152               y1 as an 8-bit coordinate
 104+ C2A2             >;----------------------------------------------------------------------------------------------------------------
 104+ C2A2             >
 104+ C2A2 3A F8 C0    >P_LL118_6502:         ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 104+ C2A5 A7          >                            and     a                       ; BPL LL119              \ .
 104+ C2A6 F2 C3 C2    >                            jp      p, P_LL119_6502           ;                        \ following
 104+ C2A9 32 B8 F1    >.X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 104+ C2AC CD C4 C1    >                            call    P_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 104+ C2AF             >                                                    ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 104+ C2AF             >                                                    ; with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2AF CD 00 F2    >                            call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 104+ C2B2 22 F9 C0    >                            ld      (P_XX1532),hl             ; .
 104+ C2B5 21 00 00    >                            ld      hl,0                    ; Set x1 = 0
 104+ C2B8 22 F7 C0    >                            ld      (P_XX1510),hl             ; .
 104+ C2BB 3E 00       >                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 104+ C2BD 32 B9 F1    >                            ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 104+ C2C0 C3 D9 C2    >                            jp      P_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 104+ C2C3             >;-- Entering LL119 a will always be the value of X1 Hi byte
 104+ C2C3 CA D9 C2    >P_LL119_6502:         jp      z,P_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 104+ C2C6             >                                                            ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 104+ C2C6 32 B8 F1    >                            ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 104+ C2C9 3D          >                            dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 104+ C2CA 32 B8 F1    >                            ld      (Svar),a                ;
 104+ C2CD CD C4 C1    >                            call    P_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 104+ C2D0             >                                                            ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 104+ C2D0             >                                                            ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2D0 CD 00 F2    >                            call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 104+ C2D3 21 FF 00    >                            ld      hl,255                  ; LDX #255               \ Set x1 = 255
 104+ C2D6 22 F7 C0    >                            ld      ( P_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 104+ C2D9             >;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 104+ C2D9 3A FA C0    >P_LL134_6502:        ld      a,(P_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 104+ C2DC A7          >                            and     a                       ; BPL LL135              \ the following
 104+ C2DD F2 F5 C2    >                            jp      p, P_LL135_6502           ; .
 104+ C2E0 32 B8 F1    >                            ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 104+ C2E3 3A F9 C0    >                            ld      a, ( P_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 104+ C2E6 32 B7 F1    >                            ld      (Rvar),a                ; STA R
 104+ C2E9 CD 12 C2    >                            call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 104+ C2EC             >                                                            ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 104+ C2EC             >                                                            ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2EC CD 0E F2    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C2EF 21 00 00    >                            ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 104+ C2F2 22 F9 C0    >                            ld      ( P_XX1532),hl             ; STA XX15+2, XX15+3
 104+ C2F5 01 80 00    >P_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 104+ C2F8 CD 1C F2    >                            call    SUBBCFromY1             ; .                      \ .
 104+ C2FB 38 0C       >                            jr      c, P_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 104+ C2FD             >                                                    ;                        \ to return from the subroutine, as we are done
 104+ C2FD             >;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 104+ C2FD CD 12 C2    >P_LL139_6502:         call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 104+ C300             >;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 104+ C300             >;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C300 CD 0E F2    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C303 21 7F 00    >                            ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 104+ C306 22 F9 C0    >                            ld      (P_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 104+ C309 C9          >P_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 104+ C30A             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 104+ C30A             >;-- LL145 LINE CLIP
 104+ C30A             >;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 104+ C30A             >;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 104+ C30A             >;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 104+ C30A             >;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 104+ C30A             >;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 104+ C30A             >;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 104+ C30A             >;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 104+ C30A             >;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 104+ C30A             >; TODO treat horizonal/vert and single pixel as special cases
 105+ C30A                                          ClippingCodeLL145Macro P
 105+ C30A             >P_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 105+ C30A AF          >                        xor a
 105+ C30B 32 18 C9    >                            ld      (SWAP),a                ; STA SWAP
 105+ C30E 3A FC C0    >                            ld      a,(P_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 105+ C311 47          >                            ld      b,a                     ; .
 105+ C312             >; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 105+ C312             >; for the screen coord we will use 127 though, we use c as a temporay X register
 105+ C312 3E BF       >P_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 105+ C314 32 B9 F1    >                            ld      (Xreg),a                ; .
 105+ C317             >;                    ld      a,127
 105+ C317             >;                    ld      c,a
 105+ C317 78          >.CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 105+ C318 21 FE C0    >                            ld      hl,P_XX15Y2hi    ; .
 105+ C31B B6          >                            or      (hl)                    ; .
 105+ C31C C2 2C C3    >                            jp      nz,P_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 105+ C31F 3E 7F       >.CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 105+ C321 21 FD C0    >                            ld      hl,P_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 105+ C324 BE          >                            cp      (hl)                    ; .
 105+ C325 DA 2C C3    >                            jp      c,P_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 105+ C328             >                            ZeroA                           ; LDX #0                 \ Set X = 0
 105+ C328 AF          >                        xor a
 105+ C329 32 B9 F1    >                            ld      (Xreg),a
 105+ C32C 3A B9 F1    >P_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 105+ C32F 32 0B C1    >                            ld      ( P_XX13),a      ; now c is released as a temporary x reg
 105+ C332 3A F8 C0    >                            ld      a,(P_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 105+ C335 21 FA C0    >                            ld      hl,P_XX15Y1hi    ; ORA XX15+3             \ to LL83
 105+ C338 B6          >                            or      (hl)                    ; .
 105+ C339 C2 79 C3    >                            jp      nz,P_LL83_6502            ; BNE LL83
 105+ C33C             >; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 105+ C33C 3A AB F1    >                            ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 105+ C33F 26 7F       >                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 105+ C341 BC          >                            cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 105+ C342 D2 79 C3    >                            jp      nc, P_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 105+ C345 3A 0B C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 105+ C348 A7          >                            and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 105+ C349 C2 74 C3    >                            jp      nz,P_LL108_6502
 105+ C34C             >; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 105+ C34C             >; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 105+ C34C             >; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 105+ C34C 2A F7 C0    >P_LL146_6502:        ld      hl,(P_XX15X1lo)           ;  Save X1 to XX1510
 105+ C34F CD A5 C1    >                            call    P_ClampX
 105+ C352 32 F7 C0    >                            ld      (P_XX15X1lo),a
 105+ C355 2A F9 C0    >                            ld      hl,(P_XX15Y1lo)           ;  hl = y1
 105+ C358 CD B1 C1    >                            call    P_ClampY
 105+ C35B 32 F8 C0    >                            ld      (P_XX1510+1),a            ;  XX1510... = [X1][Y1]
 105+ C35E             >
 105+ C35E 2A FB C0    >                            ld      hl,(P_XX15X2lo)           ;  de = x2
 105+ C361 CD A5 C1    >                            call    P_ClampX
 105+ C364 32 F9 C0    >                            ld      (P_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 105+ C367             >
 105+ C367 2A FD C0    >                            ld      hl,(P_XX15Y2lo)           ;  bc = y2
 105+ C36A CD B1 C1    >                            call    P_ClampY
 105+ C36D 32 FA C0    >                            ld      (P_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 105+ C370             >                            ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 105+ C370 B7          >                        or a
 105+ C371 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C372             >P_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C372 37          >                        scf
 105+ C373 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C374 21 0B C1    >P_LL108_6502:        ld      hl, P_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 105+ C377 CB 3E       >                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 105+ C379             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C379             >;-- LL145 (Part 2 of 4)
 105+ C379 3A 0B C1    >P_LL83_6502:         ld      a,( P_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 105+ C37C A7          >                            and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 105+ C37D F2 C9 C3    >                            jp      p,P_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 105+ C380             >;-- If we get here, both points are off-screen
 105+ C380 3A F8 C0    >                            ld      a,(P_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 105+ C383 21 FC C0    >                            ld      hl,P_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 105+ C386 A6          >                            and     (hl)
 105+ C387 FA 72 C3    >                            jp      m, P_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 105+ C38A 3A FA C0    >                            ld      a,(P_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 105+ C38D 21 FE C0    >                            ld      hl,P_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 105+ C390 A6          >                            and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 105+ C391 FA 72 C3    >                            jp      m,P_LL109_6502            ; .
 105+ C394 3A F8 C0    >                            ld      a,(P_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 105+ C397 3D          >                            dec     a                                ; DEX
 105+ C398 32 B9 F1    >                            ld      (Xreg),a                         ; TXA
 105+ C39B F5          >                            push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 105+ C39C 3A FC C0    >                            ld      a,(P_XX15X2hi)            ; .
 105+ C39F 3D          >                            dec     a                                ; DEX
 105+ C3A0 32 B9 F1    >                            ld      (Xreg),a                         ; STX XX12+2
 105+ C3A3 F1          >                            pop     af                               ; .              SP+0    restore a register
 105+ C3A4 21 FE C0    >                            ld      hl,P_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 105+ C3A7 B6          >                            or      (hl)                             ; .
 105+ C3A8 F2 72 C3    >                            jp      p, P_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C3AB             >; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 105+ C3AB             >;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 105+ C3AB 3A F9 C0    >P_LL83_DEBUG:          ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 105+ C3AE FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 105+ C3B0 3A FA C0    >                            ld      a,(P_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 105+ C3B3 DE 00       >                            sbc     0                       ; SBC #0                 \ .
 105+ C3B5 32 22 C1    >                            ld      (P_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 105+ C3B8 3A FD C0    >                            ld      a,(P_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 105+ C3BB FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 105+ C3BD 3A FE C0    >                            ld      a,(P_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 105+ C3C0 DE 00       >                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 105+ C3C2 21 22 C1    >                            ld      hl,P_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 105+ C3C5 B6          >                            or      (hl)                    ; .
 105+ C3C6 F2 72 C3    >                            jp      p,P_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C3C9             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C3C9             >;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 105+ C3C9 3A BA F1    >P_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 105+ C3CC F5          >                            push    af                      ; PHA            SP+1    \ call to this subroutine
 105+ C3CD 2A FB C0    >                            ld      hl,(P_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 105+ C3D0 ED 5B F7 C0 >                            ld      de,(P_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 105+ C3D4             >                            ClearCarryFlag                  ; SBC XX15+1
 105+ C3D4 B7          >                        or a
 105+ C3D5 ED 52       >                            sbc     hl,de                   ; .
 105+ C3D7 22 02 F6    >                            ld      (delta_x),hl            ; .
 105+ C3DA 2A FD C0    >                            ld      hl,(P_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 105+ C3DD ED 5B F9 C0 >                            ld      de,(P_XX15Y1lo)             ;
 105+ C3E1             >                            ClearCarryFlag                  ; SBC XX15+2
 105+ C3E1 B7          >                        or a
 105+ C3E2 ED 52       >                            sbc     hl,de                   ; .
 105+ C3E4 22 04 F6    >                            ld      (delta_y),hl            ; .
 105+ C3E7             >; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 105+ C3E7 3A 05 F6    >                            ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 105+ C3EA 21 03 F6    >                            ld      hl,delta_x+1
 105+ C3ED AE          >                            xor     (hl)
 105+ C3EE 32 B8 F1    >                            ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 105+ C3F1 2A 04 F6    >                            ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 105+ C3F4 7C          >                            ld      a,h
 105+ C3F5 A7          >                            and     a
 105+ C3F6 F2 02 C4    >                            jp      p, P_LL110_6502  ; BPL LL110              \ the following
 105+ C3F9             >                            NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 105+ C3F9 AF          >                    xor a
 105+ C3FA 95          >                    sub l
 105+ C3FB 6F          >                    ld l,a
 105+ C3FC 9F          >                    sbc a,a
 105+ C3FD 94          >                    sub h
 105+ C3FE 67          >                    ld h,a
 105+ C3FF 22 04 F6    >                            ld      (delta_y),hl            ; positive, starting with the low bytes
 105+ C402 2A 02 F6    >P_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 105+ C405 7C          >                            ld      a,h                     ; BPL LL111              \ the following
 105+ C406 A7          >                            and     a                       ; .
 105+ C407 F2 13 C4    >                            jp      p,P_LL111_6502            ; .
 105+ C40A             >                            NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 105+ C40A AF          >                    xor a
 105+ C40B 95          >                    sub l
 105+ C40C 6F          >                    ld l,a
 105+ C40D 9F          >                    sbc a,a
 105+ C40E 94          >                    sub h
 105+ C40F 67          >                    ld h,a
 105+ C410 22 02 F6    >                            ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 105+ C413             >;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 105+ C413 2A 02 F6    >P_LL111_6502:        ld      hl,(delta_x)
 105+ C416 ED 5B 04 F6 >                            ld      de,(delta_y)
 105+ C41A 7C          >                            ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 105+ C41B B2          >                            or      d                       ; BNE LL112
 105+ C41C CA 31 C4    >                            jp      z,P_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 105+ C41F             >P_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 105+ C41F CB 3C       >			   srl h
 105+ C421 CB 1D       >			   rr  l
 105+ C423             >                            ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 105+ C423 CB 3A       >			   srl d
 105+ C425 CB 1B       >			   rr  e
 105+ C427 22 02 F6    >                            ld      (delta_x),hl
 105+ C42A ED 53 04 F6 >                            ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 105+ C42E C3 13 C4    >                            jp       P_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 105+ C431             >;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 105+ C431             >P_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 105+ C431 AF          >                        xor a
 105+ C432 32 B5 F1    >                            ld      (Tvar),a
 105+ C435 3A 02 F6    >                            ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 105+ C438 21 04 F6    >                            ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 105+ C43B BE          >                            cp      (hl)
 105+ C43C DA 4E C4    >                            jp      c, P_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 105+ C43F             >;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 105+ C43F 3A 02 F6    >                            ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 105+ C442 32 B6 F1    >                            ld      (Qvar),a                ; .
 105+ C445 3A 04 F6    >                            ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 105+ C448 CD 2C C1    >                            call    P_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 105+ C44B C3 5F C4    >                            jp      P_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 105+ C44E             >;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 105+ C44E 3A 04 F6    >P_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 105+ C451 32 B6 F1    >                            ld      (Qvar),a                ; STA Q
 105+ C454 3A 02 F6    >                            ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 105+ C457 CD 2C C1    >                            call    P_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 105+ C45A 3E FF       >                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 105+ C45C 32 B5 F1    >                            ld      (Tvar),a                ;                        \ line is steep
 105+ C45F             >;----------------------------------------------------------------------------------------------------------------
 105+ C45F             >;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 105+ C45F             >;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 105+ C45F             >;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 105+ C45F             >;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 105+ C45F 3A B7 F1    >P_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 105+ C462 32 22 C1    >                            ld      (P_XX12p2),a     ; STA XX12+2
 105+ C465 3A B8 F1    >                            ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 105+ C468 32 23 C1    >                            ld      (P_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 105+ C46B 3A 0B C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 105+ C46E FE 00       >                            cp      0                       ; BEQ LL138
 105+ C470 CA 76 C4    >                            jp      z,P_LL138_6502            ; .
 105+ C473 F2 92 C4    >                            jp      p, P_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 105+ C476             >;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 105+ C476 CD A2 C2    >P_LL138_6502:          call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C479 3A 0B C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 105+ C47C A7          >                            and     a
 105+ C47D F2 B5 C4    >                            jp      p,P_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 105+ C480             >;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 105+ C480 3A F8 C0    >P_LL117_6502:          ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 105+ C483 21 FA C0    >                            ld      hl,P_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 105+ C486 B6          >                            or      (hl)
 105+ C487 C2 BD C4    >                            jp      nz, P_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 105+ C48A 3A F9 C0    >                            ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 105+ C48D FE 80       >                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 105+ C48F D2 BD C4    >                            jp      nc, P_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 105+ C492             >;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 105+ C492 2A F7 C0    >P_LLX117_6502:         ld      hl,( P_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 105+ C495 ED 5B FB C0 >                            ld      de,( P_XX1554)
 105+ C499 ED 53 F7 C0 >                            ld      ( P_XX1510),de
 105+ C49D 22 FB C0    >                            ld      ( P_XX1554),hl
 105+ C4A0 2A F9 C0    >                            ld      hl,( P_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 105+ C4A3 ED 5B FD C0 >                            ld      de,( P_XX1576)
 105+ C4A7 ED 53 F9 C0 >                            ld      ( P_XX1532),de
 105+ C4AB 22 FD C0    >                            ld      ( P_XX1576),hl
 105+ C4AE CD A2 C2    >                            call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C4B1 21 18 C9    >                            ld      hl,SWAP
 105+ C4B4 35          >                            dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 105+ C4B5 F1          >P_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4B6 32 BA F1    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4B9 CD 4C C3    >                            call    P_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 105+ C4BC C9          >                            ret                             ; then exit so we don't pop it twice
 105+ C4BD F1          >P_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4BE 32 BA F1    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4C1             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C4C1 37          >                        scf
 105+ C4C2 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C4C3             >
 105+ C4C3             >
 105+ C4C3 21 D8 F5    >P_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 105+ C4C6 11 F7 C0    >                            ld      de, P_XX1510
 105+ C4C9 01 08 00    >                            ld      bc,4*2
 105+ C4CC ED B0       >                            ldir
 105+ C4CE CD 0A C3    >                            call    P_LL145_6502                      ; perform 6502 version
 105+ C4D1 D8          >                            ret     c                               ; returns if carry is set as its a no draw
 105+ C4D2 21 00 00    >.CopyBackResults:           ld      hl,0
 105+ C4D5 22 D8 F5    >                            ld      (x1),hl
 105+ C4D8 22 DA F5    >                            ld      (y1),hl
 105+ C4DB 22 DC F5    >                            ld      (x2),hl
 105+ C4DE 22 DE F5    >                            ld      (y2),hl
 105+ C4E1 3A F7 C0    >                            ld      a,( P_XX1510)
 105+ C4E4 32 D8 F5    >                            ld      (x1),a
 105+ C4E7 4F          >                            ld      c,a
 105+ C4E8 3A F8 C0    >                            ld      a,( P_XX1510+1)
 105+ C4EB 32 DA F5    >                            ld      (y1),a
 105+ C4EE 47          >                            ld      b,a
 105+ C4EF 3A F9 C0    >                            ld      a,( P_XX1510+2)
 105+ C4F2 32 DC F5    >                            ld      (x2),a
 105+ C4F5 5F          >                            ld      e,a
 105+ C4F6 3A FA C0    >                            ld      a,( P_XX1510+3)
 105+ C4F9 32 DE F5    >                            ld      (y2),a
 105+ C4FC 57          >                            ld      d,a
 105+ C4FD 3E FF       >                            ld      a,$FF
 105+ C4FF             >                            ClearCarryFlag
 105+ C4FF B7          >                        or a
 105+ C500 C9          >                            ret
 106+ C501                                          InitialiseUniverseObjMacro P
 106+ C501 21 00 00    >P_InitRotMat:    ld      hl, 0
 106+ C504 22 27 C0    >                        ld      (P_BnKrotmatSidevY),hl       ; set the zeroes
 106+ C507 22 29 C0    >                        ld      (P_BnKrotmatSidevZ),hl       ; set the zeroes
 106+ C50A 22 2B C0    >                        ld      (P_BnKrotmatRoofvX),hl       ; set the zeroes
 106+ C50D 22 2F C0    >                        ld      (P_BnKrotmatRoofvZ),hl       ; set the zeroes
 106+ C510 22 31 C0    >                        ld      (P_BnKrotmatNosevX),hl       ; set the zeroes
 106+ C513 22 33 C0    >                        ld      (P_BnKrotmatNosevY),hl       ; set the zeroes
 106+ C516             >; Optimised as already have 0 in l
 106+ C516 26 60       >                        ld      h, $60	             				; 96 in hi byte
 106+ C518             >                        ;ld      hl,1
 106+ C518 22 25 C0    >                        ld      (P_BnKrotmatSidevX),hl
 106+ C51B 22 2D C0    >                        ld      (P_BnKrotmatRoofvY),hl
 106+ C51E             >; Optimised as already have 0 in l
 106+ C51E 26 E0       >                        ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 106+ C520 22 35 C0    >                        ld      (P_BnKrotmatNosevZ),hl
 106+ C523 C9          >                        ret
 107+ C524
 108+ C524              ; --------------------------------------------------------------
 109+ C524              ; clear out the planet data block
 110+ C524 21 10 C0     ResetP_BnKData:         ld      hl,P_BnKDataBlock
 111+ C527 11 1C 01                             ld      de,P_BnK_Data_len
 112+ C52A AF                                   xor     a
 113+ C52B CD 26 7D                             call    memfill_dma
 114+ C52E C9                                   ret
 115+ C52F              ; --------------------------------------------------------------
 116+ C52F 21 10 C0     ResetP_BnKPosition:     ld      hl,P_BnKxlo
 117+ C532 06 09                                ld      b, 3*3
 118+ C534 AF                                   xor     a
 119+ C535 77           .zeroLoop:              ld      (hl),a
 120+ C536 23                                   inc     hl
 121+ C537 10 FC                                djnz    .zeroLoop
 122+ C539 C9                                   ret
 123+ C53A              ; --------------------------------------------------------------
 124+ C53A              ; Normalise planet vectors
 125+ C53A 21 48 C0     P_NormaliseRotMat:      ld      hl,P_BnkTransmatNosevZ+1   ; initialise loop
 126+ C53D 0E C5                                ld      c,ConstNorm                 ; c = Q = norm = 197
 127+ C53F 79                                   ld      a,c
 128+ C540 32 8A 7E                             ld      (varQ),a                    ; set up varQ
 129+ C543 06 09                                ld      b,9                         ; total of 9 elements to transform
 130+ C545 56           .LL21Loop:              ld      d,(hl)
 131+ C546 2B                                   dec     hl
 132+ C547 5E                                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
 133+ C548                                      ShiftDELeft1                        ; De = DE * 2
 133+ C548 CB 23       >			   sla e
 133+ C54A CB 12       >			   rl  d
 134+ C54C 7A                                   ld      a,d                         ; a = hi byte after shifting
 135+ C54D E5                                   push	hl
 136+ C54E C5                                   push	bc
 137+ C54F CD FC CC                             call    Norm256mulAdivQ
 138+ C552                                      ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
 139+ C552 79                                   ld      a,c                         ; BFRDIV returns R also in l reg
 140+ C553 C1                                   pop		bc
 141+ C554 E1                                   pop		hl							; bc gets wrecked by BFRDIV
 142+ C555 77                                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
 143+ C556 2B                                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
 144+ C557 10 EC                                djnz    .LL21Loop                    ; loop from 2zLo through to 0xLo
 145+ C559 C9                                   ret
 146+ C55A
 147+ C55A
 148+ C55A              ; This uses UBNKNodeArray as the list
 149+ C55A              ; the array is 256 * 2 bytes
 150+ C55A              ; counter is current row y pos
 151+ C55A              ; byte 1 is start x pos
 152+ C55A              ; byte 2 is end x pos
 153+ C55A              ; if they are both 0 then skip
 154+ C55A              ; its always horizontal, yellow
 155+ C55A              ; 16 different Planet Colours
 156+ C55A              ; codes D<> Dark, M<> Mid, L<> Light B<> Brightest
 157+ C55A              PlanetColour10DG        equ      40     ; Green
 158+ C55A              PlanetColour20DG        equ      44
 159+ C55A              PlanetColour11MG        equ      44
 160+ C55A              PlanetColour21MG        equ      80
 161+ C55A              PlanetColour12LG        equ      80
 162+ C55A              PlanetColour22LG        equ      84
 163+ C55A              PlanetColour13BG        equ      84
 164+ C55A              PlanetColour23BG        equ      120
 165+ C55A              PlanetColour14DB        equ      1      ; Blue
 166+ C55A              PlanetColour24DB        equ      2
 167+ C55A              PlanetColour15MB        equ      2
 168+ C55A              PlanetColour25MB        equ      3
 169+ C55A              PlanetColour16LB        equ      3
 170+ C55A              PlanetColour26LB        equ      67
 171+ C55A              PlanetColour17DO        equ      68     ; Orange
 172+ C55A              PlanetColour27DO        equ      100
 173+ C55A              PlanetColour18MO        equ      100
 174+ C55A              PlanetColour28MO        equ      136
 175+ C55A              PlanetColour19LO        equ      136
 176+ C55A              PlanetColour29LO        equ      168
 177+ C55A              PlanetColour1ABO        equ      168
 178+ C55A              PlanetColour2ABO        equ      204
 179+ C55A              PlanetColour1BDR        equ      64     ; Red
 180+ C55A              PlanetColour2BDR        equ      96
 181+ C55A              PlanetColour1CMR        equ      96
 182+ C55A              PlanetColour2CMR        equ      128
 183+ C55A              PlanetColour1DLR        equ      128
 184+ C55A              PlanetColour2DLR        equ      160
 185+ C55A              PlanetColour1EMC        equ      18     ; Cyan
 186+ C55A              PlanetColour2EMC        equ      22
 187+ C55A              PlanetColour1FMP        equ      163    ; Purple
 188+ C55A              PlanetColour2FMP        equ      226    ; note avoiding transparent
 189+ C55A
 190+ C55A 28 2C 50 54  PlanetColour1Table:     DB       PlanetColour10DG, PlanetColour11MG, PlanetColour12LG, PlanetColour13BG
 191+ C55E 01 02 03 44                          DB       PlanetColour14DB, PlanetColour15MB, PlanetColour16LB, PlanetColour17DO
 192+ C562 64 88 A8 40                          DB       PlanetColour18MO, PlanetColour19LO, PlanetColour1ABO, PlanetColour1BDR
 193+ C566 60 80 12 A3                          DB       PlanetColour1CMR, PlanetColour1DLR, PlanetColour1EMC, PlanetColour1FMP
 194+ C56A 2C 50 54 78  PlanetColour2Table:     DB       PlanetColour20DG, PlanetColour21MG, PlanetColour22LG, PlanetColour23BG
 195+ C56E 02 03 43 64                          DB       PlanetColour24DB, PlanetColour25MB, PlanetColour26LB, PlanetColour27DO
 196+ C572 88 A8 CC 60                          DB       PlanetColour28MO, PlanetColour29LO, PlanetColour2ABO, PlanetColour2BDR
 197+ C576 80 A0 16 E2                          DB       PlanetColour2CMR, PlanetColour2DLR, PlanetColour2EMC, PlanetColour2FMP
 198+ C57A
 199+ C57A              ; PLANET
 200+ C57A
 201+ C57A 21 18 C0     WarpPlanetCloser:       ld      hl,P_BnKzsgn
 202+ C57D 7E           .PositiveAxis:          ld      a,(hl)
 203+ C57E                                      ReturnIfALTNusng 2                      ; hard liit along z axis
 203+ C57E FE 02       >                        cp    2
 203+ C580 D8          >                        ret	 c
 204+ C581 35                                   dec     (hl)
 205+ C582 C9                                   ret
 206+ C583
 207+ C583              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 208+ C583 21 18 C0     WarpPlanetFurther:      ld      hl,P_BnKzsgn
 209+ C586 7E                                   ld      a,(hl)
 210+ C587                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 210+ C587 FE 7F       >                        cp    $7F
 210+ C589 D0          >                        ret	 nc
 211+ C58A 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 212+ C58B C9                                   ret
 213+ C58C              ; --------------------------------------------------------------
 214+ C58C              ; This sets current universe object to a planet,they use sign + 23 bit positions
 215+ C58C              ; we need to have variable size and color
 216+ C58C CD 24 C5     CreatePlanet:           call    ResetP_BnKData          ; Clear out planet block
 217+ C58F 3A 49 7F                             ld      a,(DisplayTekLevel)
 218+ C592 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 219+ C594 F6 80                                or      %10000000
 220+ C596 32 7D C0                             ld      (P_BnKShipType),a       ; and load to ship type (synomous with planet type)
 221+ C599                                      MaxUnivPitchAndRoll
 221+ C599 3E 7F       >                        ld      a,127
 221+ C59B 32 48 C0    >                        ld      (UBnKRotXCounter),a
 221+ C59E 32 49 C0    >                        ld      (UBnKRotZCounter),a
 222+ C5A1 3A 1B 7F                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 223+ C5A4 E6 03                                and     %00000011               ; .
 224+ C5A6 CE 03                                adc     3                       ; we also lauch planet side so its infront of us
 225+ C5A8 32 18 C0                             ld      (P_BnKzsgn),a           ; set z sign to 3 + C + 0..3 bits
 226+ C5AB CB 1F                                rr      a
 227+ C5AD 32 12 C0                             ld      (P_BnKxsgn),a
 228+ C5B0 32 15 C0                             ld      (P_BnKysgn),a
 229+ C5B3 3A 49 7F     .SetColour:             ld      a,(DisplayTekLevel)
 230+ C5B6 21 4A 7F                             ld      hl,DisplayPopulation    ; add displaypopulation
 231+ C5B9 86                                   add     a, (hl)
 232+ C5BA 47                                   ld      b,a                     ; save for atmosphere level
 233+ C5BB 23                                   inc     hl                      ; move to DisplayProductivity
 234+ C5BC 86                                   add     a, (hl)
 235+ C5BD E6 0F                                and     $0F                     ; limit to 0 to 16
 236+ C5BF 21 5A C5                             ld      hl,PlanetColour1Table
 237+ C5C2 ED 31                                add     hl,a
 238+ C5C4 7E                                   ld      a,(hl)
 239+ C5C5 32 F4 C0                             ld      (P_Colour1),a
 240+ C5C8 3E 10                                ld      a,$10
 241+ C5CA ED 31                                add     hl,a
 242+ C5CC 7E                                   ld      a,(hl)
 243+ C5CD 32 F5 C0                             ld      (P_Colour2),a
 244+ C5D0 78                                   ld      a,b
 245+ C5D1 E6 07                                and     %00000111               ; atmosphere can be 0 to  3 pixels thick
 246+ C5D3 CB 3F                                srl     a                       ;
 247+ C5D5 32 F6 C0                             ld      (P_Colour2Thickness),a
 248+ C5D8 CD 01 C5     .SetOrientation:        call    P_InitRotMat
 249+ C5DB C9                                   ret
 250+ C5DC
 251+ C5DC CD 24 C5     CreatePlanetLaunched:   call    ResetP_BnKData
 252+ C5DF CD 8C C5                             call    CreatePlanet
 253+ C5E2 21 00 00                             ld      hl,0
 254+ C5E5 22 10 C0                             ld      (P_BnKxlo),hl
 255+ C5E8 22 13 C0                             ld      (P_BnKylo),hl
 256+ C5EB 21 03 FF                             ld      hl,$FF03
 257+ C5EE 22 16 C0                             ld      (P_BnKzlo),hl
 258+ C5F1                                      ZeroA
 258+ C5F1 AF          >                        xor a
 259+ C5F2 32 12 C0                             ld      (P_BnKxsgn),a
 260+ C5F5 32 15 C0                             ld      (P_BnKysgn),a
 261+ C5F8 32 18 C0                             ld      (P_BnKzsgn),a
 262+ C5FB                                      MaxUnivPitchAndRoll
 262+ C5FB 3E 7F       >                        ld      a,127
 262+ C5FD 32 48 C0    >                        ld      (UBnKRotXCounter),a
 262+ C600 32 49 C0    >                        ld      (UBnKRotZCounter),a
 263+ C603 C9                                   ret
 264+ C604              ; NEED FINSIHGING
 265+ C604
 266+ C604
 267+ C604 ED 4B FB C0  ScalePlanetTo8Bit:		ld			bc,(P_BnKZScaled)
 268+ C608 2A F7 C0                             ld			hl,(P_BnKXScaled)
 269+ C60B ED 5B F9 C0                          ld			de,(P_BnKYScaled)
 270+ C60F 78           .SetABSbc:              ld			a,b
 271+ C610 DD 67                                ld			ixh,a
 272+ C612 E6 7F                                and			SignMask8Bit
 273+ C614 47                                   ld			b,a									; bc = ABS bc
 274+ C615 7C           .SetABShl:              ld			a,h
 275+ C616 DD 6F                                ld			ixl,a
 276+ C618 E6 7F                                and			SignMask8Bit
 277+ C61A 67                                   ld			h,a									; hl = ABS hl
 278+ C61B 7A           .SetABSde:              ld			a,d
 279+ C61C FD 67                                ld			iyh,a
 280+ C61E E6 7F                                and			SignMask8Bit
 281+ C620 57                                   ld			d,a									; de = ABS de
 282+ C621 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 283+ C622 B4                                   or			h                                   ; XX15+1	\ x hi
 284+ C623 B2                                   or			d                                   ; XX15+4	\ y hi
 285+ C624 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 286+ C626                                      ShiftHLRight1
 286+ C626 CB 3C       >			   srl h
 286+ C628 CB 1D       >			   rr  l
 287+ C62A                                      ShiftDERight1
 287+ C62A CB 3A       >			   srl d
 287+ C62C CB 1B       >			   rr  e
 288+ C62E                                      ShiftBCRight1
 288+ C62E CB 38       >			   srl b
 288+ C630 CB 19       >			   rr  c
 289+ C632 C3 21 C6                             jp          .ScaleNodeTo8BitLoop
 290+ C635              ; now we have scaled values we have to deal with sign
 291+ C635 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 292+ C637 E6 80                                and			SignOnly8Bit
 293+ C639 B0                                   or			b
 294+ C63A 47                                   ld			b,a
 295+ C63B DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 296+ C63D E6 80                                and			SignOnly8Bit
 297+ C63F B4                                   or			h
 298+ C640 67                                   ld			h,a
 299+ C641 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 300+ C643 E6 80                                and			SignOnly8Bit
 301+ C645 B2                                   or			d
 302+ C646 57                                   ld			d,a
 303+ C647 ED 43 FB C0  .SignsDoneSaveResult:	ld			(P_BnKZScaled),bc
 304+ C64B 22 F7 C0                             ld			(P_BnKXScaled),hl
 305+ C64E ED 53 F9 C0                          ld			(P_BnKYScaled),de
 306+ C652 78                                   ld			a,b
 307+ C653 32 89 7E                             ld			(varU),a
 308+ C656 79                                   ld			a,c
 309+ C657 32 A6 7E                             ld			(varT),a
 310+ C65A C9                                   ret
 311+ C65B
 312+ C65B              ;--------------------------------------------------------------------------------------------------------
 313+ C65B                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C65B              CopyPSXX12ScaledToPXX18:
   2++C65B              CopyResultToPDrawCam:
   3++C65B                      ldCopyByte P_XX12         ,P_XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C65B 3A FD C0    >                        ld       a,(P_XX12)
   3++C65E 32 70 C0    >                        ld       (P_XX18),a
   4++C661                      ldCopyByte P_XX12+1       ,P_XX18+2           ; XX12+1 => XX18+2
   4++C661 3A FE C0    >                        ld       a,(P_XX12+1)
   4++C664 32 72 C0    >                        ld       (P_XX18+2),a
   5++C667                      ldCopyByte P_XX12+2       ,P_XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C667 3A FF C0    >                        ld       a,(P_XX12+2)
   5++C66A 32 73 C0    >                        ld       (P_XX18+3),a
   6++C66D                      ldCopyByte P_XX12+3       ,P_XX18+5           ; XX12+3 => XX18+5
   6++C66D 3A 00 C1    >                        ld       a,(P_XX12+3)
   6++C670 32 75 C0    >                        ld       (P_XX18+5),a
   7++C673                      ldCopyByte P_XX12+4       ,P_XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C673 3A 01 C1    >                        ld       a,(P_XX12+4)
   7++C676 32 76 C0    >                        ld       (P_XX18+6),a
   8++C679                      ldCopyByte P_XX12+5       ,P_XX18+8           ; XX12+5 => XX18+8
   8++C679 3A 02 C1    >                        ld       a,(P_XX12+5)
   8++C67C 32 78 C0    >                        ld       (P_XX18+8),a
   9++C67F C9                   ret
  10++C680
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 314+ C680                                      include "./Universe/Planet/CopyPlanetPosToPlanetXX15.asm"
# file opened: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
   1++C680              PlanetCopyPosToXX15:    ldCopyByte  P_BnKxhi         ,P_BnKXScaled        ; xlo
   1++C680 3A 11 C0    >                        ld       a,(P_BnKxhi)
   1++C683 32 F7 C0    >                        ld       (P_BnKXScaled),a
   2++C686                                      ldCopyByte  P_BnKxsgn        ,P_BnKXScaledSign    ; xsg
   2++C686 3A 12 C0    >                        ld       a,(P_BnKxsgn)
   2++C689 32 F8 C0    >                        ld       (P_BnKXScaledSign),a
   3++C68C                                      ldCopyByte  P_BnKyhi         ,P_BnKYScaled        ; xlo
   3++C68C 3A 14 C0    >                        ld       a,(P_BnKyhi)
   3++C68F 32 F9 C0    >                        ld       (P_BnKYScaled),a
   4++C692                                      ldCopyByte  P_BnKysgn        ,P_BnKYScaledSign    ; xsg
   4++C692 3A 15 C0    >                        ld       a,(P_BnKysgn)
   4++C695 32 FA C0    >                        ld       (P_BnKYScaledSign),a
   5++C698                                      ldCopyByte  P_BnKzhi         ,P_BnKZScaled        ; xlo
   5++C698 3A 17 C0    >                        ld       a,(P_BnKzhi)
   5++C69B 32 FB C0    >                        ld       (P_BnKZScaled),a
   6++C69E                                      ldCopyByte  P_BnKzsgn        ,P_BnKZScaledSign    ; xsg
   6++C69E 3A 18 C0    >                        ld       a,(P_BnKzsgn)
   6++C6A1 32 FC C0    >                        ld       (P_BnKZScaledSign),a
   7++C6A4 C9                                   ret
   8++C6A5
# file closed: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
 315+ C6A5
 316+ C6A5              ; ......................................................                                                         ;;;
 317+ C6A5                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C6A5
   2++C6A5              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C6A5              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C6A5              ; Need to write a test routine for roll and pitchs
   5++C6A5 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C6A9 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C6AD 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C6B1 00 00 00     PlanetK2                   DS 3
   9++C6B4
  10++C6B4
  11++C6B4              ; Roate around axis
  12++C6B4              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  13++C6B4              ; so the axis x1 points to roofv  x , y or z
  14++C6B4              ;             x2           nosev or sidev  x, y or z
  15++C6B4              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  16++C6B4              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  17++C6B4              ; var RAT2 gives direction
  18++C6B4              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  19++C6B4              ;-Set up S R -----------------------------------------
  20++C6B4              ; optimised we don't deal with sign here just the value of roof axis / 512
  21++C6B4 2A 70 7D     P_MVS5RotateAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  22++C6B7 5E                                   ld      e,(hl)
  23++C6B8 23                                   inc     hl
  24++C6B9 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  25++C6BA EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
  26++C6BB 7C                                   ld      a,h
  27++C6BC E6 80                                and     SignOnly8Bit
  28++C6BE FD 67                                ld      iyh,a           ; iyh = sign Axis1
  29++C6C0 7C                                   ld      a,h
  30++C6C1 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
  31++C6C3 CB 3F                                srl     a               ; a = Axis1/2
  32++C6C5 5F                                   ld      e,a             ;
  33++C6C6 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
  34++C6C8 57                                   ld      d,a             ; de = signed Axis1 / 512
  35++C6C9 B7                                   or      a               ; clear carry
  36++C6CA CD BD 8F                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
  37++C6CD              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
  38++C6CD E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
  39++C6CE 7D                                   ld      a,l
  40++C6CF 32 8B 7E                             ld      (varR),a
  41++C6D2 7C                                   ld      a,h
  42++C6D3 32 8C 7E                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
  43++C6D6              ;-calculate roofv latter half of calc
  44++C6D6 2A 72 7D                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
  45++C6D9 5E                                   ld      e,(hl)
  46++C6DA 23                                   inc     hl
  47++C6DB 56                                   ld      d,(hl)          ; de = value of roof axis
  48++C6DC 7A                                   ld      a,d
  49++C6DD E6 80                                and     SignOnly8Bit
  50++C6DF FD 67                                ld      iyh,a           ; save sign
  51++C6E1 7A                                   ld      a,d
  52++C6E2 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
  53++C6E4 57                                   ld      d,a             ; de = abs (nosev)
  54++C6E5                                      ShiftDERight1
  54++C6E5 CB 3A       >			   srl d
  54++C6E7 CB 1B       >			   rr  e
  55++C6E9                                      ShiftDERight1
  55++C6E9 CB 3A       >			   srl d
  55++C6EB CB 1B       >			   rr  e
  56++C6ED                                      ShiftDERight1
  56++C6ED CB 3A       >			   srl d
  56++C6EF CB 1B       >			   rr  e
  57++C6F1                                      ShiftDERight1           ; de = nosev /16 unsigned
  57++C6F1 CB 3A       >			   srl d
  57++C6F3 CB 1B       >			   rr  e
  58++C6F5 3A 4F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
  59++C6F8 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
  60++C6FA E6 80                                and     SignOnly8Bit
  61++C6FC B2                                   or      d
  62++C6FD 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
  63++C6FE              ;;; ld      a,e
  64++C6FE              ;;;     or      iyh
  65++C6FE              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
  66++C6FE              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
  67++C6FE E1                                   pop     hl              ; get back RS POP ID 1
  68++C6FF                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
  69++C6FF              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
  70++C6FF CD 22 8F                             call    ADDHLDESignedV4 ; do add using hl and de
  71++C702 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
  72++C703              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
  73++C703              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
  74++C703 2A 72 7D                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
  75++C706 5E                                   ld      e,(hl)
  76++C707 23                                   inc     hl
  77++C708 56                                   ld      d,(hl)
  78++C709 EB                                   ex      de,hl
  79++C70A 7C                                   ld      a,h
  80++C70B E6 80                                and     $80
  81++C70D FD 67                                ld      iyh,a
  82++C70F 7C                                   ld      a,h
  83++C710 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
  84++C712 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
  85++C714 5F                                   ld      e,a
  86++C715 FD 7C                                ld      a,iyh
  87++C717 57                                   ld      d,a
  88++C718 B7                                   or      a               ; clear carry
  89++C719 CD BD 8F                             call    subHLDES15
  90++C71C              ;   sbc     hl,de           ; hl = nosev - novesv / 512
  91++C71C E5                                   push    hl              ; save hl on stack  PUSH ID 3
  92++C71D 7D                                   ld      a,l
  93++C71E 32 8B 7D                             ld      (varP),a        ; p = low of resuilt
  94++C721 7C                                   ld      a,h
  95++C722 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
  96++C724 32 A6 7E                             ld      (varT),a        ; t = high of result
  97++C727              ;-- Set up TQ
  98++C727 2A 70 7D                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
  99++C72A              ;   ld      hl,(varAxis2)   ; work on nosev again
 100++C72A 5E                                   ld      e,(hl)
 101++C72B 23                                   inc     hl
 102++C72C 56                                   ld      d,(hl)
 103++C72D 7A                                   ld      a,d
 104++C72E E6 80                                and     $80
 105++C730 FD 67                                ld      iyh,a           ; save sign
 106++C732 7A                                   ld      a,d
 107++C733 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 108++C735 57                                   ld      d,a             ; de = abs (nosev)
 109++C736                                      ShiftDERight1
 109++C736 CB 3A       >			   srl d
 109++C738 CB 1B       >			   rr  e
 110++C73A                                      ShiftDERight1
 110++C73A CB 3A       >			   srl d
 110++C73C CB 1B       >			   rr  e
 111++C73E                                      ShiftDERight1
 111++C73E CB 3A       >			   srl d
 111++C740 CB 1B       >			   rr  e
 112++C742                                      ShiftDERight1           ; de = nosev /16 unsigned
 112++C742 CB 3A       >			   srl d
 112++C744 CB 1B       >			   rr  e
 113++C746 3A 4F C0                             ld      a,(univRAT2)
 114++C749 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 115++C74B E6 80                                and     $80
 116++C74D B2                                   or      d
 117++C74E 57                                   ld      d,a
 118++C74F              ;;; ld      a,e
 119++C74F              ;;;     or      iyh
 120++C74F              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 121++C74F E1                                   pop     hl              ; get back RS   POP ID 3
 122++C750              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 123++C750 CD BD 8F                             call    subHLDES15 ; do add using hl and de
 124++C753              ;-- Update nosev ---------------------------------------
 125++C753 EB                                   ex      de,hl           ; save hl to de
 126++C754 2A 72 7D                             ld      hl,(varAxis2)
 127++C757 73                                   ld      (hl),e
 128++C758 23                                   inc     hl
 129++C759 72                                   ld      (hl),d          ; copy result into nosev
 130++C75A              ;-- Update roofv ---------------------------------------
 131++C75A D1                                   pop     de              ; get calc saved on stack POP ID 2
 132++C75B 2A 70 7D                             ld      hl,(varAxis1)
 133++C75E 73                                   ld      (hl),e
 134++C75F 23                                   inc     hl
 135++C760 72                                   ld      (hl),d          ; copy result into nosev
 136++C761 C9                                   ret
 137++C762
 138++C762 3A 49 C0     ApplyPlanetPitchOnly:   ld      a,(UBnKRotZCounter)
 139++C765 FE FF                                cp      $FF
 140++C767 21 2B C0     .PitchSAxes:            ld	    hl,P_BnKrotmatRoofvX; UBnkrotmatSidevY
 141++C76A 22 70 7D                             ld	    (varAxis1),hl
 142++C76D 21 31 C0                             ld	    hl,P_BnKrotmatNosevX; UBnkrotmatSidevZ
 143++C770 22 72 7D                             ld	    (varAxis2),hl
 144++C773 CD B4 C6                             call    P_MVS5RotateAxis
 145++C776 21 2D C0     .PitchRAxes:            ld	    hl,P_BnKrotmatRoofvY
 146++C779 22 70 7D                             ld	    (varAxis1),hl
 147++C77C 21 33 C0                             ld	    hl,P_BnKrotmatNosevY;UBnkrotmatRoofvZ
 148++C77F 22 72 7D                             ld	    (varAxis2),hl
 149++C782 CD B4 C6                             call    P_MVS5RotateAxis
 150++C785 21 2F C0     .PitchNAxes:            ld	    hl,P_BnKrotmatRoofvZ; UBnkrotmatNosevY
 151++C788 22 70 7D                             ld	    (varAxis1),hl
 152++C78B 21 35 C0                             ld	    hl,P_BnKrotmatNosevZ
 153++C78E 22 72 7D                             ld	    (varAxis2),hl
 154++C791 CD B4 C6                             call    P_MVS5RotateAxis
 155++C794 C9                                   ret
 156++C795
 157++C795 3A 49 C0     ApplyPlanetRollAndPitch:ld      a,(UBnKRotZCounter)
 158++C798 FE FF                                cp      $FF
 159++C79A 21 2B C0     .PitchSAxes:            ld	    hl,P_BnKrotmatRoofvX; UBnkrotmatSidevY
 160++C79D 22 70 7D                             ld	    (varAxis1),hl
 161++C7A0 21 31 C0                             ld	    hl,P_BnKrotmatNosevX; UBnkrotmatSidevZ
 162++C7A3 22 72 7D                             ld	    (varAxis2),hl
 163++C7A6 CD B4 C6                             call    P_MVS5RotateAxis
 164++C7A9 21 2D C0     .PitchRAxes:            ld	    hl,P_BnKrotmatRoofvY
 165++C7AC 22 70 7D                             ld	    (varAxis1),hl
 166++C7AF 21 33 C0                             ld	    hl,P_BnKrotmatNosevY;UBnkrotmatRoofvZ
 167++C7B2 22 72 7D                             ld	    (varAxis2),hl
 168++C7B5 CD B4 C6                             call    P_MVS5RotateAxis
 169++C7B8 21 2F C0     .PitchNAxes:            ld	    hl,P_BnKrotmatRoofvZ; UBnkrotmatNosevY
 170++C7BB 22 70 7D                             ld	    (varAxis1),hl
 171++C7BE 21 35 C0                             ld	    hl,P_BnKrotmatNosevZ
 172++C7C1 22 72 7D                             ld	    (varAxis2),hl
 173++C7C4 CD B4 C6                             call    P_MVS5RotateAxis
 174++C7C7              ApplyPlanetRollOnly:
 175++C7C7 3A 79 C0     .ProcessRoll:           ld      a,(P_BnKRotXCounter)
 176++C7CA FE FF                                cp      $FF
 177++C7CC 21 2B C0     .RollSAxis:           	ld	    hl,P_BnKrotmatRoofvX; UBnkrotmatSidevX
 178++C7CF 22 70 7D                             ld	    (varAxis1),hl
 179++C7D2 21 25 C0                             ld	    hl,P_BnKrotmatSidevX; UBnkrotmatSidevY
 180++C7D5 22 72 7D                             ld	    (varAxis2),hl
 181++C7D8 CD B4 C6                             call    P_MVS5RotateAxis
 182++C7DB 21 2D C0     .RollRAxis:             ld	    hl,P_BnKrotmatRoofvY; UBnkrotmatRoofvX
 183++C7DE 22 70 7D                             ld	    (varAxis1),hl
 184++C7E1 21 27 C0                             ld	    hl,P_BnKrotmatSidevY; UBnkrotmatRoofvY
 185++C7E4 22 72 7D                             ld	    (varAxis2),hl
 186++C7E7 CD B4 C6                             call    P_MVS5RotateAxis
 187++C7EA 21 2F C0     .RollNAxis:             ld	    hl,P_BnKrotmatRoofvZ; UBnkrotmatNosevX
 188++C7ED 22 70 7D                             ld	    (varAxis1),hl
 189++C7F0 21 29 C0                             ld	    hl,P_BnKrotmatSidevZ; UBnkrotmatNosevY
 190++C7F3 22 72 7D                             ld	    (varAxis2),hl
 191++C7F6 CD B4 C6                             call    P_MVS5RotateAxis
 192++C7F9 C9                                   ret
 193++C7FA
 194++C7FA
 195++C7FA 3A A3 7D     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 196++C7FD 21 96 7D                             ld      hl,BETA
 197++C800 B6                                   or      (hl)
 198++C801 E6 7F                                and     SignMask8Bit
 199++C803 CA B4 C8                             jp      z,.NoRotation
 200++C806 3A A3 7D     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
 201++C809 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
 202++C80B 57                                   ld      d,a                         ; .
 203++C80C 3A 10 C0                             ld      a,(P_BnKxlo)                 ; HLE = x sgn, hi, lo
 204++C80F 5F                                   ld      e,a                         ; .
 205++C810 2A 11 C0                             ld      hl,(P_BnKxhi)                ; .
 206++C813 CD F9 91                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
 207++C816              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
 208++C816                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
 209++C816 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 210++C817 32 A6 C6                             ld      (PlanetAlphaMulX+1),a
 211++C81A 7B                                   ld      a,e
 212++C81B 32 A7 C6                             ld      (PlanetAlphaMulX+2),a
 213++C81E 7A                                   ld      a,d
 214++C81F 32 A8 C6                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
 215++C822 ED 5B 14 C0  .CalcK2:                ld      de,(P_BnKyhi)                ; DEL = Y
 216++C826 3A 13 C0                             ld      a,(P_BnKylo)                 ; .
 217++C829 6F                                   ld      l,a                         ; .
 218++C82A ED 4B A7 C6                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
 219++C82E 3A A6 C6                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
 220++C831 67                                   ld      h,a                         ; .
 221++C832 CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
 222++C835 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
 223++C836 32 B1 C6                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
 224++C839 ED 53 B2 C6                          ld      (PlanetK2+1),de                ;
 225++C83D EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
 226++C83E 5F                                   ld      e,a                         ; .
 227++C83F 3A 96 7D                             ld      a,(BETA)                    ; D = BETA
 228++C842 57                                   ld      d,a                         ; .
 229++C843 CD F9 91                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
 230++C846 ED 4B 17 C0  .CalcZ:                 ld      bc,(P_BnKzhi)                ; BCH = z
 231++C84A 3A 16 C0                             ld      a,(P_BnKzlo)                 ;
 232++C84D 67                                   ld      h,a                         ;
 233++C84E CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
 234++C851 ED 53 17 C0                          ld      (P_BnKzhi),de                ; z = resuklt
 235++C855 7D                                   ld      a,l                         ; .
 236++C856 32 16 C0                             ld      (P_BnKzlo),a                 ; .
 237++C859 3A 96 7D     .CalcBetaZ:             ld      a,(BETA)
 238++C85C EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
 239++C85E 57                                   ld      d,a                         ; .
 240++C85F 3A 16 C0                             ld      a,(P_BnKzlo)                 ; HLE = z
 241++C862 5F                                   ld      e,a                         ; .
 242++C863 2A 17 C0                             ld      hl,(P_BnKzhi)                ; .
 243++C866 CD F9 91                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
 244++C869              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
 245++C869                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
 246++C869                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
 247++C869                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 248++C869                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 249++C869                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 250++C869                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 251++C869                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
 252++C869 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
 253++C86B 65                                   ld      h,l
 254++C86C ED 5B B2 C6                          ld      de,(PlanetK2+1)                ; DEL = k2
 255++C870 3A B1 C6                             ld      a,(PlanetK2)
 256++C873 6F                                   ld      l,a
 257++C874 CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
 258++C877 ED 53 14 C0                          ld      (P_BnKyhi),de                ; y = DEL = K2 - Beta * Z
 259++C87B 7D                                   ld      a,l                         ; .
 260++C87C 32 13 C0                             ld      (P_BnKylo),a                 ; .
 261++C87F 3A A3 7D     .CalcAlphaMulY:         ld      a,(ALPHA)
 262++C882 57                                   ld      d,a                         ; d = alpha (Q value)
 263++C883 3A 13 C0                             ld      a,(P_BnKylo)                 ; HLE = x sgn, hi, lo
 264++C886 5F                                   ld      e,a                         ; .
 265++C887 2A 14 C0                             ld      hl,(P_BnKyhi)                ; .
 266++C88A CD F9 91                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 267++C88D 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 268++C88E 32 A9 C6                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
 269++C891 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 270++C892 32 AA C6                             ld      (PlanetAlphaMulY+1),a
 271++C895 7B                                   ld      a,e
 272++C896 32 AB C6                             ld      (PlanetAlphaMulY+2),a
 273++C899 7A                                   ld      a,d
 274++C89A 32 AC C6                             ld      (PlanetAlphaMulY+3),a
 275++C89D 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 276++C89F 65                                   ld      h,l                         ; .
 277++C8A0 ED 5B 11 C0                          ld      de,(P_BnKxhi)                ; DEL = Y
 278++C8A4 3A 10 C0                             ld      a,(P_BnKxlo)                 ; .
 279++C8A7 6F                                   ld      l,a                         ; .
 280++C8A8 CD 5C 8F                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 281++C8AB 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 282++C8AC 63                                   ld      h,e                         ;
 283++C8AD 32 12 C0     .CopyResultTo2:         ld      (P_BnKxlo+2),a               ; .
 284++C8B0 22 10 C0                             ld      (P_BnKxlo) ,hl               ; .
 285++C8B3 C9                                   ret
 286++C8B4 3A 84 7E     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 287++C8B7                                      ReturnIfAIsZero
 287++C8B7 A7          >                        and     a
 287++C8B8 C8          >                        ret     z
 288++C8B9 0E 00                                ld      c,0                         ;
 289++C8BB 67                                   ld      h,a                         ;
 290++C8BC 06 80                                ld      b,$80                       ;
 291++C8BE ED 5B 17 C0                          ld      de,(P_BnKzhi)                ; DEL = z position
 292++C8C2 3A 16 C0                             ld      a,(P_BnKzlo)                 ; .
 293++C8C5 6F                                   ld      l,a                         ; .
 294++C8C6 CD 5C 8F                             call    AddBCHtoDELsigned           ; update speed
 295++C8C9 ED 53 17 C0                          ld      (P_BnKzhi),DE                ; write back to zpos
 296++C8CD 7D                                   ld      a,l
 297++C8CE 32 16 C0                             ld      (P_BnKzlo),a                ;
 298++C8D1 C9                                   ret
 299++C8D2
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 318+ C8D2
 319+ C8D2 00           PlanetOnScreen          DB 0
 320+ C8D3 00 00        PlanetScrnX             DW  0       ; signed
 321+ C8D5 00 00        PlanetScrnY             DW  0       ; signed
 322+ C8D7              ;PlanetRadius            DW  0       ; unsigned
 323+ C8D7              ; draw circle
 324+ C8D7
 325+ C8D7              ;
 326+ C8D7              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 327+ C8D7
 328+ C8D7 00 00 00 00  PlanetVarK                 DS 4
 329+ C8DB 00 00 00     PlanetVarP                 DS 3
 330+ C8DE 00           PlanetVarQ                 DS 1
 331+ C8DF 00           PlanetVarR                 DS 1
 332+ C8E0 00           PlanetVarS                 DS 1
 333+ C8E1 00           PlanetVarT                 DS 1
 334+ C8E2
 335+ C8E2
 336+ C8E2 DD 4E 00     MaximiseHLVector:       ld      c,(ix+0)
 337+ C8E5 DD 46 01                             ld      b,(ix+1)
 338+ C8E8 DD 5E 02                             ld      e,(ix+2)
 339+ C8EB DD 56 03                             ld      d,(ix+3)
 340+ C8EE DD 6E 04                             ld      l,(ix+4)
 341+ C8F1 DD 66 05                             ld      h,(ix+5)
 342+ C8F4              MaxShiftOutSign:        ShiftBCLeft1
 342+ C8F4 CB 21       >			   sla c
 342+ C8F6 CB 10       >			   rl  b
 343+ C8F8                                      ShiftDELeft1
 343+ C8F8 CB 23       >			   sla e
 343+ C8FA CB 12       >			   rl  d
 344+ C8FC                                      ShiftHLLeft1
 344+ C8FC CB 25       >			   sla l
 344+ C8FE CB 14       >			   rl  h
 345+ C900 78           MaximiseIXVector:       ld      a,b                 ; Now loop round until bit 7 is populated
 346+ C901 B2                                   or      d
 347+ C902 B3                                   or      e
 348+ C903 E6 80                                and     $80
 349+ C905 CA F4 C8                             jp      z,MaxShiftOutSign
 350+ C908              .MakeSpaceForSign:      ShiftBCRight1               ; Now go back 1 so sign bit is clear
 350+ C908 CB 38       >			   srl b
 350+ C90A CB 19       >			   rr  c
 351+ C90C                                      ShiftDERight1
 351+ C90C CB 3A       >			   srl d
 351+ C90E CB 1B       >			   rr  e
 352+ C910                                      ShiftHLRight1
 352+ C910 CB 3C       >			   srl h
 352+ C912 CB 1D       >			   rr  l
 353+ C914 DD 7E 00                             ld      a,(ix+0)
 354+ C917 E6 80                                and     SignOnly8Bit
 355+ C919 B0                                   or      b
 356+ C91A DD 7E 01                             ld      a,(ix+1)
 357+ C91D E6 80                                and     SignOnly8Bit
 358+ C91F B2                                   or      d
 359+ C920 DD 7E 03                             ld      a,(ix+3)
 360+ C923 E6 80                                and     SignOnly8Bit
 361+ C925 B3                                   or      e
 362+ C926 DD 71 00                             ld      (ix+0),c
 363+ C929 DD 70 01                             ld      (ix+1),b
 364+ C92C DD 73 02                             ld      (ix+2),e
 365+ C92F DD 72 03                             ld      (ix+3),d
 366+ C932 DD 74 04                             ld      (ix+4),h
 367+ C935 DD 75 05                             ld      (ix+5),l
 368+ C938 C9                                   ret
 369+ C939
 370+ C939
 371+ C939              ; Subroutine: SPS1 (Docked) Calculate the vector to the planet and store it in XX15
 372+ C939              ; calls SPS3 and falls into TAS2
 373+ C939
 374+ C939
 375+ C939 CD 80 C6     VectorToPlanet:         call    PlanetCopyPosToXX15 ; Perform all of SPS3
 376+ C93C DD 21 F7 C0                          ld      ix,P_XX15
 377+ C940 CD 00 C9                             call    MaximiseIXVector
 378+ C943 CD 71 99                             call    NormaliseIXVector
 379+ C946
 380+ C946
 381+ C946              ;;INWORK
 382+ C946              ;;INWORK Main loop
 383+ C946              ;;INWORK
 384+ C946              ;;INWORK Subroutine: Main flight loop (Part 14 of 16) (Flight)
 385+ C946              ;;INWORK
 386+ C946              ;;INWORK Spawn a space station if we are close enough to the planet
 387+ C946              ;;INWORK
 388+ C946              ;;INWORK Main loop
 389+ C946              ;;INWORK
 390+ C946              ;;INWORK Subroutine: Main flight loop (Part 15 of 16) (Flight)
 391+ C946              ;;INWORK
 392+ C946              ;;INWORK Perform altitude checks with the planet and sun and process fuel scooping if appropriate
 393+ C946              ;;INWORK
 394+ C946              ;;INWORK Maths (Geometry)
 395+ C946              ;;INWORK
 396+ C946              ;;INWORK Subroutine: MAS2 (Flight)
 397+ C946              ;;INWORK
 398+ C946              ;;INWORK Calculate a cap on the maximum distance to the planet or sun
 399+ C946              ;;INWORK
 400+ C946              ;;INWORK Universe
 401+ C946              ;;INWORK
 402+ C946              ;;INWORK Subroutine: SOS1 (Flight)
 403+ C946              ;;INWORK
 404+ C946              ;;INWORK Update the missile indicators, set up the planet data block
 405+ C946              ;;INWORK
 406+ C946              ;;INWORK
 407+ C946              ;;INWORK Dashboard
 408+ C946              ;;INWORK
 409+ C946              ;;INWORK Subroutine: SP2 (Flight)
 410+ C946              ;;INWORK
 411+ C946              ;;INWORK Draw a dot on the compass, given the planet/station vector
 412+ C946
 413+ C946              ; Drawing planets Subroutine: PL2 (Flight) Remove the planet or sun from the screen
 414+ C946              ;                             PLANET (Flight) Draw the planet or sun
 415+ C946              ;                             PL9 (Part 1 of 3) (Flight) Draw the planet, with either an equator and meridian, or a crater
 416+ C946              ;                             PL9 (Part 2 of 3) (Flight) Draw the planet's equator and meridian
 417+ C946              ;                             PL9 (Part 3 of 3) (Flight) Draw the planet's crater
 418+ C946              ;                             PLS1 (Flight)  Calculate (Y A) = nosev_x / z
 419+ C946              ;                             PLS2 (Flight) Draw a half-ellipse
 420+ C946              ;                             PLS22 (Flight) Draw an ellipse or half-ellipse
 421+ C946
 422+ C946
 423+ C946              ; Drawing circles Subroutine: CIRCLE (Flight) Draw a circle for the planet
 424+ C946              ;                             CIRCLE2 (Flight) Draw a circle (for the planet or chart)
 425+ C946              ;                             WPLS2 (Flight) Remove the planet from the screen
 426+ C946              ;                             WP1 (Flight) Reset the ball line heap
 427+ C946              ; Drawing planets PL21 (Flight) Return from a planet/sun-drawing routine with a failure flag
 428+ C946              ;                 PLS3 (Flight) Calculate (Y A P) = 222 * roofv_x / z
 429+ C946              ;                 PLS4 (Flight) Calculate CNT2 = arctan(P / A) / 4
 430+ C946              ;                 PLS5 (Flight) Calculate roofv_x / z and roofv_y / z
 431+ C946              ;                 PLS6 (Flight) Calculate (X K) = (A P) / (z_sign z_hi z_lo)
 432+ C946              ; SPS1 (Flight) Calculate the vector to the planet and store it in XX15
 433+ C946              ; MV40 rate planet by our pitch
 434+ C946              ;
 435+ C946              ;look at PL9
 436+ C946
 437+ C946
 438+ C946              ; Optimisation
 439+ C946              ; if a <> 0
 440+ C946              ;       divide AH by CD
 441+ C946              ; if h <> 0
 442+ C946              ;      if c <> 0 return 0
 443+ C946              ;      else
 444+ C946              ;        divide HL by DE
 445+ C946              ; if l <>0
 446+ C946              ;      if c or d <> 0 return 0
 447+ C946              ;      else
 448+ C946              ;        divide l by e
 449+ C946              ;
 450+ C946 47           PlanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 451+ C947 79                                   ld      a,c                         ; check for divide by zero
 452+ C948 B2                                   or      d                           ; .
 453+ C949 B3                                   or      e                           ; .
 454+ C94A                                      JumpIfZero      .divideByZero       ; .
 454+ C94A CA 63 C9    >                        jp	z,.divideByZero
 455+ C94D 78                                   ld      a,b                         ; get a back
 456+ C94E                                      JumpIfAIsNotZero    .divideAHLbyCDE
 456+ C94E A7          >                        and     a
 456+ C94F C2 6B C9    >                        jp	    nz,.divideAHLbyCDE
 457+ C952 7C           .AIsZero:               ld      a,h
 458+ C953                                      JumpIfAIsNotZero    .divideHLbyDE
 458+ C953 A7          >                        and     a
 458+ C954 C2 72 C9    >                        jp	    nz,.divideHLbyDE
 459+ C957 7D           .HIsZero:               ld      a,l
 460+ C958                                      JumpIfAIsNotZero    .divideLbyE
 460+ C958 A7          >                        and     a
 460+ C959 C2 81 C9    >                        jp	    nz,.divideLbyE
 461+ C95C              .resultIsZero:          ZeroA
 461+ C95C AF          >                        xor a
 462+ C95D 67                                   ld      h,a                        ; result is zero so set hlde
 463+ C95E 6F                                   ld      l,a                        ; result is zero so set hlde
 464+ C95F 54 5D                                ld      de,hl
 465+ C961                                      ClearCarryFlag
 465+ C961 B7          >                        or a
 466+ C962 C9                                   ret
 467+ C963 3E FF        .divideByZero:          ld      a,$FF
 468+ C965 67                                   ld      h,a
 469+ C966 6F                                   ld      l,a
 470+ C967 54 5D                                ld      de,hl
 471+ C969                                      SetCarryFlag
 471+ C969 37          >                        scf
 472+ C96A C9                                   ret
 473+ C96B              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 474+ C96B              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 475+ C96B CD 40 90     .divideAHLbyCDE:        call    Div24by24
 476+ C96E EB                                   ex      hl,de                         ; ahl is result
 477+ C96F 79                                   ld      a,c                           ; ahl is result
 478+ C970                                      ClearCarryFlag
 478+ C970 B7          >                        or a
 479+ C971 C9                                   ret
 480+ C972              ; AHL = 0hl/0de as A is zero
 481+ C972 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 482+ C973                                      JumpIfAIsNotZero   .resultIsZero
 482+ C973 A7          >                        and     a
 482+ C974 C2 5C C9    >                        jp	    nz,.resultIsZero
 483+ C977 44 4D                                ld      bc,hl
 484+ C979 CD 6B 96                             call    BC_Div_DE                   ; BC = HL/DE
 485+ C97C 60 69                                ld      hl,bc
 486+ C97E                                      ZeroA                               ; so we can set A to Zero
 486+ C97E AF          >                        xor a
 487+ C97F                                      ClearCarryFlag
 487+ C97F B7          >                        or a
 488+ C980 C9                                   ret
 489+ C981              ; AHL = 00l/00e as A and H are zero
 490+ C981 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 491+ C982 B2                                   or      d
 492+ C983                                      JumpIfAIsNotZero   .resultIsZero
 492+ C983 A7          >                        and     a
 492+ C984 C2 5C C9    >                        jp	    nz,.resultIsZero
 493+ C987 4B                                   ld      c,e
 494+ C988 5D                                   ld      e,l
 495+ C989 CD 2D 96                             call    E_Div_C
 496+ C98C 6F                                   ld      l,a
 497+ C98D                                      ZeroA
 497+ C98D AF          >                        xor a
 498+ C98E 67                                   ld      h,a
 499+ C98F                                      ClearCarryFlag
 499+ C98F B7          >                        or a
 500+ C990 C9                                   ret
 501+ C991
 502+ C991              ; Project XY to screen location
 503+ C991 DD 26 00     ProjectPlanet:          ld      ixh,0
 504+ C994 2A 10 C0                             ld      hl,(P_BnKxlo)
 505+ C997 3A 12 C0                             ld      a,(P_BnKxsgn)
 506+ C99A CD AF C9                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 507+ C99D 22 0C C1                             ld      (P_centreX),hl
 508+ C9A0 DD 24                                inc     ixh
 509+ C9A2 2A 13 C0                             ld      hl,(P_BnKylo)
 510+ C9A5 3A 15 C0                             ld      a,(P_BnKysgn)
 511+ C9A8 CD AF C9                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 512+ C9AB 22 12 C1                             ld      (P_centreY),hl
 513+ C9AE C9                                   ret
 514+ C9AF
 515+ C9AF              ; PlanetProcessVertex AHL = X or Y position (sign in A)
 516+ C9AF              ;                     fetches z as this used in both calcs
 517+ C9AF 47           PlanetProcessVertex:    ld      b,a                         ; save sign/high byte
 518+ C9B0 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(P_BnKzlo)               ; B H L   = X or Y
 519+ C9B4 3A 18 C0                             ld      a,(P_BnKzsgn)               ; IYH D E = z
 520+ C9B7 FD 67                                ld      iyh,a                       ; save sign
 521+ C9B9                                      ClearSignBitA                       ; A D E   = | z |
 521+ C9B9 E6 7F       >                        and     SignMask8Bit
 522+ C9BB                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 523+ C9BB 5A                                   ld      e,d                         ; C D E   = A D E * 256, i.e. 0 A D
 524+ C9BC 57                                   ld      d,a                         ; .
 525+ C9BD 0E 00                                ld      c,0                         ; .
 526+ C9BF                                      ; added above to correct positioning as in reality its X/(Z/256) to get +-256 rather than +- 1
 527+ C9BF 78                                   ld      a,b                         ; copy X or Y sign into iyl
 528+ C9C0 FD 6F                                ld      iyl,a                       ; .
 529+ C9C2                                      ClearSignBitA                       ; A H L = |X| (or |Y|)
 529+ C9C2 E6 7F       >                        and     SignMask8Bit
 530+ C9C4 CD 46 C9                             call PlanetAHLequAHLDivCDE          ; AHL = AHL/CDE unsigned
 531+ C9C7 DA 26 CA                             jp      c,.IsOffScreen              ; carry flag indicates failure
 532+ C9CA              .CheckPosOnScreen:      JumpIfAIsNotZero .IsOffScreen       ; if A has a value then its way too large regardless of sign
 532+ C9CA A7          >                        and     a
 532+ C9CB C2 26 CA    >                        jp	    nz,.IsOffScreen
 533+ C9CE                                      JumpOnLeadSignSet h, .IsOffScreen   ; or bit 7 set of h
 533+ C9CE 7C          >                        ld      a,h
 533+ C9CF E6 80       >                        and     SignOnly8Bit
 533+ C9D1 C2 26 CA    >                        jp      nz,.IsOffScreen
 534+ C9D4 DD 7C        .CheckXorY:             ld      a,ixh
 535+ C9D6                                      JumpIfAIsNotZero .ProcessYCoord
 535+ C9D6 A7          >                        and     a
 535+ C9D7 C2 FD C9    >                        jp	    nz,.ProcessYCoord
 536+ C9DA              ; Handle X Coord offset
 537+ C9DA FD 7C        .ProcessXCoord:         ld      a,iyh                       ; determine if its + or - value of AHL/CDE
 538+ C9DC FD AD                                xor     iyl
 539+ C9DE E6 80                                and     $80
 540+ C9E0 CA E9 C9                             jp      z,.ProcessXPositive
 541+ C9E3              .ProcessXNegative:      macronegate16hl
 541+ C9E3 AF          >					xor 	a
 541+ C9E4 95          >					sub 	l
 541+ C9E5 6F          >					ld 		l,a
 541+ C9E6 9F          >					sbc 	a,a
 541+ C9E7 94          >					sub 	h
 541+ C9E8 67          >					ld 		h,a
 542+ C9E9 11 80 00     .ProcessXPositive:      ld      de,ViewCenterX
 543+ C9EC                                      ClearCarryFlag
 543+ C9EC B7          >                        or a
 544+ C9ED ED 5A                                adc     hl,de                       ; now X position is CenterX+ (X / Z) in 2's c
 545+ C9EF 54 5D                                ld      de,hl                       ; set de to | hl for +/- 1024 check
 546+ C9F1 F2 1E CA                             jp      p,.CheckBoundaries          ; .
 547+ C9F4                                      macronegate16de                     ; .
 547+ C9F4 AF          >					xor 	a
 547+ C9F5 93          >                    sub 	e
 547+ C9F6 5F          >                    ld 		e,a
 547+ C9F7 9F          >                    sbc 	a,a
 547+ C9F8 92          >                    sub 	d
 547+ C9F9 57          >                    ld 		d,a
 548+ C9FA C3 1E CA                             jp      .CheckBoundaries            ; .
 549+ C9FD              ; Handle Y Coord offset
 550+ C9FD FD 7C        .ProcessYCoord:         ld      a,iyh
 551+ C9FF FD AD                                xor     iyl
 552+ CA01 E6 80                                and     $80
 553+ CA03 CA 0C CA                             jp      z,.ProcessYPositive
 554+ CA06              .ProcessYNegative:      macronegate16hl
 554+ CA06 AF          >					xor 	a
 554+ CA07 95          >					sub 	l
 554+ CA08 6F          >					ld 		l,a
 554+ CA09 9F          >					sbc 	a,a
 554+ CA0A 94          >					sub 	h
 554+ CA0B 67          >					ld 		h,a
 555+ CA0C 11 60 00     .ProcessYPositive:      ld      de,ViewCenterY              ; set hl to center Y and de to 2s'c Y/Z
 556+ CA0F EB                                   ex      de,hl
 557+ CA10                                      ClearCarryFlag
 557+ CA10 B7          >                        or a
 558+ CA11 ED 52                                sbc     hl,de                       ; now HL  position is CenterY - (Y / Z) in 2's c
 559+ CA13 54 5D                                ld      de,hl                       ;
 560+ CA15 F2 1E CA                             jp      p,.CheckBoundaries          ; .
 561+ CA18                                      macronegate16de                     ; load DE with | result to simplify +-1024 check|
 561+ CA18 AF          >					xor 	a
 561+ CA19 93          >                    sub 	e
 561+ CA1A 5F          >                    ld 		e,a
 561+ CA1B 9F          >                    sbc 	a,a
 561+ CA1C 92          >                    sub 	d
 561+ CA1D 57          >                    ld 		d,a
 562+ CA1E 7A           .CheckBoundaries:       ld      a,d
 563+ CA1F                                      JumpIfAGTENusng 4, .IsOffScreen     ; if |position| > 1024 then way to large
 563+ CA1F FE 04       >                        cp     4
 563+ CA21 D2 26 CA    >                        jp		nc,.IsOffScreen
 564+ CA24              .calculatedVert:        ClearCarryFlag
 564+ CA24 B7          >                        or a
 565+ CA25 C9                                   ret
 566+ CA26 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 567+ CA29 FD 7C                                ld      a,iyh
 568+ CA2B FD AD                                xor     iyl
 569+ CA2D                                      SignBitOnlyA
 569+ CA2D E6 80       >                        and     SignOnly8Bit
 570+ CA2F 28 02                                jr      z,.calculatedOffScreen
 571+ CA31 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 572+ CA32 23                                   inc     hl                          ; .
 573+ CA33              .calculatedOffScreen:   SetCarryFlag
 573+ CA33 37          >                        scf
 574+ CA34 C9                                   ret
 575+ CA35
 576+ CA35
 577+ CA35              ; .........................................................................................................................
 578+ CA35              ; we only hit this if z is positive so we can ignore signs
 579+ CA35              ; calculates 24576/z, maxes at 248
 580+ CA35 ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(P_BnKzlo)                ; DBC = z position
 581+ CA39 3A 18 C0                             ld      a,(P_BnKzsgn)                ;
 582+ CA3C 57                                   ld      d,a                         ;
 583+ CA3D 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 584+ CA40 CD 0B 95                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 585+ CA43 B4                                   or      h                           ; if A or H are not 0 then max Radius
 586+ CA44                                      JumpIfAIsZero  .SaveRadius
 586+ CA44 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 586+ CA45 CA 4B CA    >                        jp	    z, .SaveRadius
 587+ CA48 21 F8 00     .MaxRadius:             ld      hl,248                      ; set radius to 248 as maxed out
 588+ CA4B 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 589+ CA4C F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 590+ CA4E                                      DISPLAY "DONE - Eliiminate the check to see if planet radius is > 255 as its already fixed in Planet Calculate Radius"
 591+ CA4E                                      ;ld      l,a                        ;
 592+ CA4E                                      ;ld      (P_Radius),hl              ; save a copy of radius now for later
 593+ CA4E 32 EB C0                             ld      (P_Radius),a
 594+ CA51 5F                                   ld      e,a                         ; as later code expects it to be in e
 595+ CA52 16 08        .CalculateStep:         ld      d,8
 596+ CA54                                      JumpIfALTNusng 8, .DoneStepCalc
 596+ CA54 FE 08       >                        cp      8
 596+ CA56 DA 62 CA    >                        jp		c, .DoneStepCalc
 597+ CA59 CB 3A                                srl     d                           ; d = d / 2
 598+ CA5B                                      JumpIfALTNusng 60, .DoneStepCalc
 598+ CA5B FE 3C       >                        cp      60
 598+ CA5D DA 62 CA    >                        jp		c, .DoneStepCalc
 599+ CA60 CB 3A                                srl     d                           ; d = d / 2
 600+ CA62 7A           .DoneStepCalc:          ld      a,d
 601+ CA63 32 A1 C0                             ld      (P_BnKSTP),a
 602+ CA66 C9                                   ret
 603+ CA67
 604+ CA67              ; Shorter version when sun does not need to be processed to screen
 605+ CA67 3A 12 C0     PlanetUpdateCompass:    ld      a,(P_BnKxsgn)
 606+ CA6A 2A 10 C0                             ld      hl,(P_BnKxlo)
 607+ CA6D CD AF C9                             call    PlanetProcessVertex
 608+ CA70 22 19 C0                             ld      (P_CompassX),hl
 609+ CA73 3A 15 C0                             ld      a,(P_BnKysgn)
 610+ CA76 2A 13 C0                             ld      hl,(P_BnKylo)
 611+ CA79 CD AF C9                             call    PlanetProcessVertex
 612+ CA7C 22 1B C0                             ld      (P_CompassY),hl
 613+ CA7F C9                                   ret
 614+ CA80
 615+ CA80                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 616+ CA80 CD FA C7     PlanetUpdateAndRender:  call    PlanetApplyMyRollAndPitch    ; not needed for solid as yet
 617+ CA83 3A 18 C0     .DrawSolidPlanet:       ld      a,(P_BnKzsgn)                ; a = z sign of position
 618+ CA86 A7           .ElimiateBehind:        and     a
 619+ CA87 FA DC CA                             jp      m,.SkipDrawPlanet            ; if its negative then behind so exit
 620+ CA8A              .TooFarAway:            JumpIfAGTENusng   48,.SkipDrawPlanet ; if sign (high byte 2) > 48 then too far away to render
 620+ CA8A FE 30       >                        cp     48
 620+ CA8C D2 DC CA    >                        jp		nc,.SkipDrawPlanet
 621+ CA8F 21 17 C0                             ld      hl, P_BnKzhi                 ; if |P_BnKzsgn| or P_BnKzhi or P_Bnkzlo upper byte are both 0 then the planet is too close so return
 622+ CA92 B6                                   or      (hl)                         ; .
 623+ CA93 2B                                   dec     hl
 624+ CA94 47                                   ld      b,a
 625+ CA95 7E                                   ld      a,(hl)
 626+ CA96 E6 F0                                and     $F0
 627+ CA98 B0                                   or      b
 628+ CA99 CA DC CA                             jp      z,.SkipDrawPlanet            ; .
 629+ CA9C              ;                       loads P_centreX and Y with planet on screen centre
 630+ CA9C CD 91 C9     .Project                call    ProjectPlanet                ; Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 631+ CA9F CD 35 CA     .CalcRadius:            call    PlanetCalculateRadius
 632+ CAA2                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 633+ CAA2                                      DISPLAY "TODO, pick colour based on galaxy map"
 634+ CAA2 2A 0C C1                             ld      hl,(P_centreX)
 635+ CAA5 ED 5B 12 C1                          ld      de,(P_centreY)
 636+ CAA9 3A EB C0                             ld      a,(P_Radius)
 637+ CAAC A7                                   and     a
 638+ CAAD CA DC CA                             jp      z,.SkipDrawPlanet            ; skip 0 size
 639+ CAB0 4F                                   ld      c,a
 640+ CAB1 3A F4 C0                             ld      a,(P_Colour1)
 641+ CAB4 47                                   ld      b,a
 642+ CAB5                                      MMUSelectLayer2
 642+ CAB5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 643+ CAB9 CD 95 EE                             call    l2_draw_clipped_circle_filled
 644+ CABC                                      JumpIfMemLTNusng P_Radius, 5, .SkipDrawPlanet
 644+ CABC 3A EB C0    >                        ld      a,(P_Radius)
 644+ CABF FE 05       >                        cp      5
 644+ CAC1 DA DC CA    >                        jp	  c,.SkipDrawPlanet
 645+ CAC4 FE 06                                cp      PlanetMinRadius             ; radius < min radius means no atmosphere
 646+ CAC6 4F                                   ld      c,a                         ; as a holds radius from Jump Macro
 647+ CAC7 CA DC CA                             jp      z,.SkipDrawPlanet
 648+ CACA 2A 0C C1                             ld      hl,(P_centreX) ; just to test putting a rim there
 649+ CACD ED 5B 12 C1                          ld      de,(P_centreY)
 650+ CAD1 3A F5 C0                             ld      a,(P_Colour2)
 651+ CAD4 47                                   ld      b,a
 652+ CAD5                                      MMUSelectLayer2
 652+ CAD5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 653+ CAD9 CD 99 EC                             call    l2_draw_clipped_circle
 654+ CADC CD 67 CA     .SkipDrawPlanet:        call    PlanetUpdateCompass
 655+ CADF C9                                   ret                                 ; else x is totally off the left side of the screen
 656+ CAE0              ;
 657+ CAE0              ; (PLS4)
 658+ CAE0              ; CNT2 =  = arctan(-nosev_z_hi / side_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 659+ CAE0 3A 36 C0     CalcNoseSideArcTanPI:   ld      a, (P_BnKrotmatNosevZ + 1)   ; P = - nosevz hi
 660+ CAE3 EE 80                                xor     $80
 661+ CAE5 32 8B 7D                             ld      (varP),a
 662+ CAE8 3A 2A C0                             ld      a, (P_BnKrotmatSidevZ + 1)
 663+ CAEB C3 F9 CA                             jp      CalcArcTanPiPA
 664+ CAEE              ;  CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 665+ CAEE 3A 36 C0     CalcNoseRoofArcTanPI:   ld      a, (P_BnKrotmatNosevZ + 1)   ; P = - nosevz hi
 666+ CAF1 EE 80                                xor     $80
 667+ CAF3 32 8B 7D                             ld      (varP),a
 668+ CAF6 3A 30 C0                             ld      a, (P_BnKrotmatRoofvZ + 1)
 669+ CAF9              ; CNT2 = arctan(P / A) / 4
 670+ CAF9 32 8A 7E     CalcArcTanPiPA:         ld      (varQ),a                    ; STA Q                  \ Set Q = A
 671+ CAFC CD C7 92                             call    ARCTAN                      ; A = arctan(P / Q)
 672+ CAFF 4F                                   ld      c,a                         ; save a
 673+ CB00 3A 36 C0                             ld      a,(P_BnKrotmatNosevZ+1)
 674+ CB03 E6 80                                and     $80
 675+ CB05 79                                   ld      a,c                         ; restore a as it doesn't affect flags doing an ld
 676+ CB06 FA 0B CB                             jp      m,.SkipFlipSign             ; If nosev_z_hi is negativeleave the angle in A as a positive
 677+ CB09              ; Adds 128 to the result (rather than makes it negative)
 678+ CB09 EE 80        .FlipSign:              xor     $80                         ; If we get here then nosev_z_hi is positive, so flip bit 7 of the angle in A, which is the same as adding 128
 679+ CB0B CB 3F        .SkipFlipSign:          srl     a                           ; Set CNT2 = A / 4
 680+ CB0D CB 3F                                srl     a                           ; .
 681+ CB0F 32 D5 C0                             ld      (P_BnKCNT2),a                ; .
 682+ CB12 C9                                   ret
 683+ CB13
 684+ CB13              ; (PSL1)
 685+ CB13              ; XX16 K2) = nosev_x / z
 686+ CB13 2A 31 C0     CalcNoseXDivNoseZ:      ld      hl,(P_BnKrotmatNosevX)
 687+ CB16 ED 5B 35 C0                          ld      de,(P_BnKrotmatNosevZ)
 688+ CB1A C3 4C CB                             jp      CalcRotMatDivide
 689+ CB1D 2A 33 C0     CalcNoseYDivNoseZ:      ld      hl,(P_BnKrotmatNosevY)
 690+ CB20 ED 5B 35 C0                          ld      de,(P_BnKrotmatNosevZ)
 691+ CB24 C3 4C CB                             jp      CalcRotMatDivide
 692+ CB27 2A 2B C0     CalcRoofXDivRoofZ:      ld      hl,(P_BnKrotmatRoofvX)
 693+ CB2A ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 694+ CB2E C3 4C CB                             jp      CalcRotMatDivide
 695+ CB31 2A 2D C0     CalcRoofYDivRoofZ:      ld      hl,(P_BnKrotmatRoofvY)
 696+ CB34 ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 697+ CB38 C3 4C CB                             jp      CalcRotMatDivide
 698+ CB3B 2A 25 C0     CalcSideXDivSideZ:      ld      hl,(P_BnKrotmatSidevX)
 699+ CB3E ED 5B 29 C0                          ld      de,(P_BnKrotmatSidevZ)
 700+ CB42 C3 4C CB                             jp      CalcRotMatDivide
 701+ CB45 2A 27 C0     CalcSideYDivSideZ:      ld      hl,(P_BnKrotmatSidevY)
 702+ CB48 ED 5B 29 C0                          ld      de,(P_BnKrotmatSidevZ)
 703+ CB4C              ; (PLS1) (Y A) = nosev_x / z where B = Y (also stores in regY), K+3 = sign of calculation
 704+ CB4C              ; stores result in BC now as well
 705+ CB4C              ; does not do increment of X as its not needed when directly loading verticies of rotation
 706+ CB4C              CalcRotMatDivide:
 707+ CB4C 7B           .LoadDEtoQRS:           ld      a,e                         ; Q
 708+ CB4D 32 8A 7E                             ld      (varQ),a                    ;
 709+ CB50 7A                                   ld      a,d                         ;
 710+ CB51 E6 7F                                and     $7F                         ;
 711+ CB53 32 8B 7E                             ld      (varR),a                    ;
 712+ CB56 7A                                   ld      a,d                         ;
 713+ CB57 E6 80                                and     $80                         ;
 714+ CB59 32 8C 7E                             ld      (varS),a                    ;
 715+ CB5C 7D           .LoadHLtoP012:          ld      a,l                         ; set A P+1 P to (signnoseX) (|noseX|)
 716+ CB5D 32 8B 7D                             ld      (varP),a                    ; set P to nosevX lo
 717+ CB60 7C                                   ld      a,h                         ; set P_1 to |nosevX hi|
 718+ CB61 44                                   ld      b,h                         ; .
 719+ CB62 E6 7F                                and     $7F                         ; .
 720+ CB64 32 8C 7D                             ld      (varP+1),a                  ; .
 721+ CB67 78                                   ld      a,b                         ; set a to sign nosevX
 722+ CB68 E6 80                                and     $80
 723+ CB6A 32 8D 7D                             ld      (varP+2),a
 724+ CB6D CD D4 93                             call    DVID3B                      ; call DVI3B2 variane where z is in de as 16 bit and needs expanding to 32
 725+ CB70 3A 9E 7E                             ld      a,(varK+1)                  ; get second byte into b
 726+ CB73 47                                   ld      b,a                         ; and also check to see if its
 727+ CB74 A7                                   and     a                           ; zero
 728+ CB75 3A 9D 7E                             ld      a,(varK)
 729+ CB78 4F                                   ld      c,a                         ; so now BC = result too
 730+ CB79 CA 7F CB                             jp      z,.Skip254
 731+ CB7C 3E FE        .Force254Result:        ld      a,254                       ; if 2nd byte is non zero set a to 254 as our max 1 byte value to return
 732+ CB7E 4F                                   ld      c,a
 733+ CB7F F5           .Skip254:               push    af
 734+ CB80 79                                   ld      a,c                         ; if a is 0 then force sign to be +ve
 735+ CB81 A7                                   and     a
 736+ CB82 C2 8B CB                             jp      nz,.DoNotForceSign
 737+ CB85 32 75 7D     .ForceSignPositive:     ld      (regY),a
 738+ CB88 47                                   ld      b,a
 739+ CB89 F1                                   pop     af
 740+ CB8A C9                                   ret
 741+ CB8B 3A A0 7E     .DoNotForceSign:        ld      a,(varK+3)                  ; set b to sign (which was Y in 6502)
 742+ CB8E 32 75 7D                             ld      (regY),a
 743+ CB91 47                                   ld      b,a                         ; bc also is result as c was a copy of a
 744+ CB92 F1                                   pop     af                          ; so c doesn't need to be pushed to stack
 745+ CB93 C9                                   ret
 746+ CB94
 747+ CB94              ; (PLS3)
 748+ CB94              ;  (Y A P) = 222 * roofv_x / z to give the x-coordinate of the crater offset
 749+ CB94 2A 2B C0     Cacl222MulRoofXDivRoofZ:ld      hl,(P_BnKrotmatRoofvX)
 750+ CB97 ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 751+ CB9B C3 A5 CB                             jp      Calc222MulHLDivDE
 752+ CB9E              ; (Y A P) = 222 * roofv_y / z to give the x-coordinate of the crater offset
 753+ CB9E 2A 2D C0     Cacl222MulRoofYDivRoofZ:ld      hl,(P_BnKrotmatRoofvY)
 754+ CBA1 ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 755+ CBA5              ; Optimise, move result at the end into HL instead of YA (we can ignore P)
 756+ CBA5 CD 4C CB     Calc222MulHLDivDE:      call    CalcRotMatDivide            ; calculate (Y A) = nosev_x(orY) / z
 757+ CBA8 57                                   ld      d,a                         ; P = |roofv_x / z|
 758+ CBA9 1E DE                                ld      e,222                       ; LDA #222               \ Set Q = 222, the offset to the crater
 759+ CBAB                                      ; Not needed                        ; STA Q
 760+ CBAB                                      ; Not needed                        ; STX U                  \ Store the vector index X in U for retrieval after the  call to MULTU
 761+ CBAB ED 30                                mul     de                          ; call MULTU (unsigned multiply) de = 222 * |roofv_x / z|
 762+ CBAD 3A A0 7E                             ld      a,(varK+3)                  ; LDY K+3                \ If the sign of the result in K+3 is positive, skip to
 763+ CBB0 A7                                   and     a
 764+ CBB1 F2 D1 CB                             jp      p,.PL12                     ; BPL PL12               \ PL12 to return with Y = 0
 765+ CBB4 3E FF                                ld      a,$FF                       ; LDY #&FF               \ Set Y = &FF to be a negative high byte
 766+ CBB6 32 75 7D                             ld      (regY),a                    ; .
 767+ CBB9 47                                   ld      b,a                         ; .
 768+ CBBA                                      macronegate16de                     ; Otherwise the result should be negative, so negate
 768+ CBBA AF          >					xor 	a
 768+ CBBB 93          >                    sub 	e
 768+ CBBC 5F          >                    ld 		e,a
 768+ CBBD 9F          >                    sbc 	a,a
 768+ CBBE 92          >                    sub 	d
 768+ CBBF 57          >                    ld 		d,a
 769+ CBC0 7B                                   ld      a,e                         ; now we have Y A P (with Y in b also)
 770+ CBC1 32 8B 7D                             ld      (varP),a                    ; .
 771+ CBC4 7A                                   ld      a,d                         ; .
 772+ CBC5 A7                                   and     a
 773+ CBC6 CA CA CB                             jp      z,.ForcePositive            ; if A is 0, special case to make +ve
 774+ CBC9 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 775+ CBCA              .ForcePositive:         ZeroA                               ; set regY and b to 0
 775+ CBCA AF          >                        xor a
 776+ CBCB 32 75 7D                             ld      (regY),a
 777+ CBCE 47                                   ld      b,a
 778+ CBCF 7A                                   ld      a,d                         ; get d back into a again
 779+ CBD0 C9                                   ret
 780+ CBD1              .PL12:                  ZeroA                               ; set Y A P to be 0 D E from mul
 780+ CBD1 AF          >                        xor a
 781+ CBD2 47                                   ld      b,a
 782+ CBD3 32 75 7D                             ld      (regY),a
 783+ CBD6 7B                                   ld      a,e
 784+ CBD7 32 8B 7D                             ld      (varP),a
 785+ CBDA 7A                                   ld      a,d
 786+ CBDB C9                                   ret
 787+ CBDC
 788+ CBDC
 789+ CBDC
 790+ CBDC              ;-- bc = bc * P_radius where bc = S.Fraction ,e.g nosex/nosey
 791+ CBDC 3A EB C0     P_BCmulRadius:          ld      a,(P_Radius)                ; we probably don't have radius already
 792+ CBDF 57           P_BCmulRadiusInA:       ld      d,a                         ; d = radius already in a
 793+ CBE0 59                                   ld      e,c                         ; e = c (as we only hold 0.8 in bc, i.e. fractional +/- > 0)
 794+ CBE1 ED 30                                mul     de                          ; mulitply raidus by c which will be fractional  generating a 8.X value)
 795+ CBE3 4A                                   ld      c,d                         ; we only want the whole number, preserving sign in b
 796+ CBE4 C9                                   ret
 797+ CBE5
 798+ CBE5                 ; DEFINE  PlanetDebugLocal 1
 799+ CBE5              PlanetDraw:             INCLUDE "./Universe/Planet/PlanetDiagnostics.asm"
# file opened: ././Universe/Planet/PlanetDiagnostics.asm
   1++CBE5                      IFDEF BLINEDEBUG
   2++CBE5 ~                                            call    TestBLINE
   3++CBE5                                      ENDIF
   4++CBE5                                      IFDEF TESTMERIDIAN
   5++CBE5 ~                                            call    TestMeridian
   6++CBE5                                      ENDIF
   7++CBE5                                      IFDEF PlanetDebugLocal
   8++CBE5 ~                                            ZeroA
   9++CBE5 ~                                            ; x 500, y 50, z 2000: 500/7,50/7 =>71,7 => 199,71 Yes
  10++CBE5 ~                                            ; radius becomes 24576/2000 = 12 (13 is good enough yes)
  11++CBE5 ~                                            ld      (P_BnKxsgn),a
  12++CBE5 ~                                            ld      (P_BnKysgn),a
  13++CBE5 ~                                            ld      (P_BnKzsgn),a
  14++CBE5 ~                                            ld      hl, 0
  15++CBE5 ~                                            ld      (P_BnKxlo),hl
  16++CBE5 ~                                            ld      hl,0
  17++CBE5 ~                                            ld      (P_BnKylo),hl
  18++CBE5 ~                                            ld      hl, 1500
  19++CBE5 ~                                            ld      (P_BnKzlo),hl
  20++CBE5 ~                                            ld      hl,$C800
  21++CBE5 ~                                            ld      bc,6144
  22++CBE5 ~                                            ld      de,0
  23++CBE5 ~                                            ld      (P_BnKrotmatNosevX),bc
  24++CBE5 ~                                            ld      (P_BnKrotmatNosevY),de
  25++CBE5 ~                                            ld      (P_BnKrotmatNosevZ),hl
  26++CBE5 ~                                            ld      (P_BnKrotmatRoofvX),de
  27++CBE5 ~                                            ld      (P_BnKrotmatRoofvY),hl
  28++CBE5 ~                                            ld      (P_BnKrotmatRoofvZ),bc
  29++CBE5 ~                                            ld      hl,18432
  30++CBE5 ~                                            ld      bc,$9800
  31++CBE5 ~                                            ld      (P_BnKrotmatSidevX),hl
  32++CBE5 ~                                            ld      (P_BnKrotmatSidevY),de
  33++CBE5 ~                                            ld      (P_BnKrotmatSidevZ),bc
  34++CBE5 ~            ;                                ld      hl, 230
  35++CBE5 ~            ;                                ld      de,100
  36++CBE5 ~            ;                                ld      c,200
  37++CBE5 ~            ;                                ld      b,$FF
  38++CBE5 ~                                            call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
  39++CBE5 ~                                            call    PlanetCalculateRadius
  40++CBE5 ~
  41++CBE5 ~                                            ld      hl, (P_centreX)
  42++CBE5 ~                                            ld      de,(P_centreY)
  43++CBE5 ~                                            ld      a,(P_Radius)
  44++CBE5 ~                                            ld      c,a
  45++CBE5 ~                                            ld      b,$FF
  46++CBE5 ~                                            MMUSelectLayer2
  47++CBE5 ~                                            break
  48++CBE5 ~                                            call    l2_draw_clipped_circle
  49++CBE5 ~                                            break
  50++CBE5 ~            .DebugMeridian1:                xor     a
  51++CBE5 ~                                            ld      (P_BnKCNT2),a
  52++CBE5 ~                                            ld      hl,(P_centreX)
  52++CBE5 ~               call    TwosCompToLeadingSign
  52++CBE5 ~              ld      (P_BnKCx),hl
  53++CBE5 ~                                            ld      hl,(P_centreY)
  53++CBE5 ~               call    TwosCompToLeadingSign
  53++CBE5 ~              ld      (P_BnKCy),hl
  54++CBE5 ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
  55++CBE5 ~                                            call    CalcNoseXDivNoseZ
  55++CBE5 ~               call  P_BCmulRadius
  55++CBE5 ~              ld      (P_BnKUx),bc
  56++CBE5 ~                                            call    CalcNoseYDivNoseZ
  56++CBE5 ~               call  P_BCmulRadius
  56++CBE5 ~              ld      (P_BnKUy),bc
  57++CBE5 ~                                            call    CalcRoofXDivRoofZ
  57++CBE5 ~               call  P_BCmulRadius
  57++CBE5 ~              ld      (P_BnKVx),bc
  58++CBE5 ~                                            call    CalcRoofYDivRoofZ
  58++CBE5 ~               call  P_BCmulRadius
  58++CBE5 ~              ld      (P_BnKVy),bc
  59++CBE5 ~                                            break
  60++CBE5 ~
  61++CBE5 ~                                            break
  62++CBE5 ~                                            call    DrawMeridian
  63++CBE5 ~                                            break
  64++CBE5 ~            .DebugMeridian2:                xor     a
  65++CBE5 ~                                            ld      (P_BnKCNT2),a
  66++CBE5 ~                                            ld      hl,(P_centreX)
  66++CBE5 ~               call    TwosCompToLeadingSign
  66++CBE5 ~              ld      (P_BnKCx),hl
  67++CBE5 ~                                            ld      hl,(P_centreY)
  67++CBE5 ~               call    TwosCompToLeadingSign
  67++CBE5 ~              ld      (P_BnKCy),hl
  68++CBE5 ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
  69++CBE5 ~                                            call    CalcNoseXDivNoseZ
  69++CBE5 ~               call  P_BCmulRadius
  69++CBE5 ~              ld      (P_BnKUx),bc
  70++CBE5 ~                                            call    CalcNoseYDivNoseZ
  70++CBE5 ~               call  P_BCmulRadius
  70++CBE5 ~              ld      (P_BnKUy),bc
  71++CBE5 ~                                            call    CalcSideXDivSideZ
  71++CBE5 ~               call  P_BCmulRadius
  71++CBE5 ~              ld      (P_BnKVx),bc
  72++CBE5 ~                                            call    CalcSideYDivSideZ
  72++CBE5 ~               call  P_BCmulRadius
  72++CBE5 ~              ld      (P_BnKVy),bc
  73++CBE5 ~                                            break
  74++CBE5 ~                                            call    DrawMeridian
  75++CBE5 ~                                            break
  76++CBE5 ~                                            break
  77++CBE5 ~
  78++CBE5 ~
  79++CBE5                                      ENDIF
  80++CBE5
# file closed: ././Universe/Planet/PlanetDiagnostics.asm
 800+ CBE5 3A 18 C0                             ld      a,(P_BnKzsgn)                ; a = z sign of position
 801+ CBE8 A7           .ElimiateBehind:        and     a
 802+ CBE9 F8                                   ret     m                           ; if its negative then behind so exit
 803+ CBEA              .TooFarAway:            ReturnIfAGTEusng   48               ; if sign (high byte 2) > 48 then too far away to render
 803+ CBEA FE 30       >                        cp    48
 803+ CBEC D0          >                        ret	 nc
 804+ CBED 21 17 C0                             ld      hl, P_BnKzhi                 ; if |P_BnKzsgn| or P_BnKzsgn are both 0 then the planet is too close so return
 805+ CBF0 B6                                   or      (hl)                        ; .
 806+ CBF1 C8                                   ret     z                           ; .
 807+ CBF2              ;                       loads P_centreX and Y with planet on screen centre
 808+ CBF2 CD 91 C9     .Project                call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 809+ CBF5 D8                                   ret     c                           ; If the C flag is set by PROJ then the planet/sun is  not visible on-screen, so return
 810+ CBF6 CD 35 CA     .CalcRadius:            call    PlanetCalculateRadius
 811+ CBF9                              IFDEF   PLANETSARESOLID
 812+ CBF9                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 813+ CBF9                                      DISPLAY "TODO, pick colour based on galaxy map"
 814+ CBF9 2A 0C C1                             ld      hl,(P_centreX)
 815+ CBFC ED 5B 12 C1                          ld      de,(P_centreY)
 816+ CC00 3A EB C0                             ld      a,(P_Radius)
 817+ CC03 4F                                   ld      c,a
 818+ CC04 06 CF                                ld      b,$CF
 819+ CC06                                      MMUSelectLayer2
 819+ CC06 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 820+ CC0A CD 95 EE                             call    l2_draw_clipped_circle_filled
 821+ CC0D C9                                   ret
 822+ CC0E                              ELSE
 823+ CC0E ~                                    INCLUDE "./Universe/Planet/PlanetWireframe.asm"
 824+ CC0E                              ENDIF
 825+ CC0E
 826+ CC0E                              IFNDEF  PLANETSARESOLID
 827+ CC0E ~                                    INCLUDE "./Universe/Planet/PlanetMeridian.asm"
 828+ CC0E                              ENDIF
 829+ CC0E
 830+ CC0E
 831+ CC0E
 832+ CC0E              PlanetBankSize  EQU $ - StartOfPlanet
 833+ CC0E
 834+ CC0E
# file closed: ./Universe/Planet/planet_data.asm
1647  CC0E                                  DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
1648  CC0E                                  ASSERT $-PlanetBankAddr <8912, Bank code leaks over 8K boundary
1649  CC0E              ; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1650  CC0E                                  SLOT    SpaceStationBankAddr
1651  CC0E                                  PAGE    BankSpaceStationData
1652  CC0E                                  ORG	    SpaceStationBankAddr,BankSpaceStationData
1653  C000                                  ;INCLUDE "./Universe/Planet/planet_data.asm"
1654  C000                                  DISPLAY "Bank ",BankSpaceStationData," - Bytes free ",/D, $2000 - ($-SpaceStationBankAddr), " - BankSpaceStationData"
1655  C000                                  ASSERT $-SpaceStationBankAddr <8912, Bank code leaks over 8K boundary
1656  C000
1657  C000              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1658  C000              ;;;***                        SLOT    SpriteDataAAddr
1659  C000              ;;;***                        PAGE    BankSpriteDataA
1660  C000              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
1661  C000              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
1662  C000              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
1663  C000              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
1664  C000              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
1665  C000              ;;;***                        SLOT    SpriteDataBAddr
1666  C000              ;;;***                        PAGE    BankSpriteDataB
1667  C000              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
1668  C000              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
1669  C000              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
1670  C000              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
1671  C000              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
1672  C000                                  SLOT    GalaxyDataAddr
1673  C000                                  PAGE    BankGalaxyData0
1674  C000                                  ORG GalaxyDataAddr, BankGalaxyData0
1675  E000                                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 C3 87 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 60 8B 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 A8 87 B9 87                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A BF 87 00 00
 317+ F41E CF 87 D6 87                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 C3 87 C8 87                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E AE 87 B5 87                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 DD 87 E4 87                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 42 88 DD 87                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 10 88 00 00
 322+ F446 1C 88 24 88                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 39 88 78 8A                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 92 87 EF 87                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A E9 87 00 00
 325+ F45E A3 87 EF 87                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 E9 87 00 00
 326+ F466 9E 87 EF 87                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A E9 87 00 00
 327+ F46E 98 87 EF 87                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 E9 87 00 00
 328+ F476 92 87 F5 87                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A E9 87 00 00
 329+ F47E A3 87 F5 87                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 E9 87 00 00
 330+ F486 9E 87 F5 87                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A E9 87 00 00
 331+ F48E 98 87 F5 87                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 E9 87 00 00
 332+ F496 92 87 02 88                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A E9 87 00 00
 333+ F49E A3 87 02 88                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 E9 87 00 00
 334+ F4A6 9E 87 02 88                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA E9 87 00 00
 335+ F4AE 98 87 02 88                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 E9 87 00 00
 336+ F4B6 92 87 83 8A                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA E9 87 00 00
 337+ F4BE A3 87 83 8A                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 E9 87 00 00
 338+ F4C6 9E 87 83 8A                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA E9 87 00 00
 339+ F4CE 98 87 83 8A                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 E9 87 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD 8A 84     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD A2 84     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 8E 8E     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 1A 7F                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD AF 8E     .LargeSizeName:         call	NamingLoop
 402+ F691 CD AF 8E     .SmallSizeName:         call	NamingLoop
 403+ F694 CD AF 8E                             call	NamingLoop
 404+ F697 CD AF 8E                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 1C 7F     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 1D 7F                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 1E 7F                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 1F 7F                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 00 84     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A E5 83     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 39 7F     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD 97 91                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 02 7F     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 1A 7F             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 1A 7F             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 02 7F     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 02 7F     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 02 7F     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 8F 7E                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A 8F 7E     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 8F 7E     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 94 92                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 4E 7F                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 4E 7F                             ld      (Distance),a
1231+ FC60 32 4F 7F                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 8F 7E                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 1A 7F                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 75 84                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A 8F 7E                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 8F 7E                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 02 7F     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 8F 7E                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 02 7F                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 75 84                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD AA 84                             call    next_system_seed                ; .
1286+ FCCF 3A 8F 7E                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 8F 7E                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
1676  FCDC                                  DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
1677  FCDC                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1678  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
1679  FCDC                                  SLOT    GalaxyDataAddr
1680  FCDC                                  PAGE    BankGalaxyData1
1681  FCDC                                  ORG GalaxyDataAddr, BankGalaxyData1
1682  E000 FF           GALAXYDATABlock1:   DB $FF
1683  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1684  0000                                  DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
1685  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1686  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
1687  0000                                  SLOT    GalaxyDataAddr
1688  0000                                  PAGE    BankGalaxyData2
1689  0000                                  ORG GalaxyDataAddr, BankGalaxyData2
1690  E000 FF           GALAXYDATABlock2:   DB $FF
1691  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1692  0000                                  DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
1693  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1694  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
1695  0000                                  SLOT    GalaxyDataAddr
1696  0000                                  PAGE    BankGalaxyData3
1697  0000                                  ORG GalaxyDataAddr, BankGalaxyData3
1698  E000 FF           GALAXYDATABlock3:   DB $FF
1699  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1700  0000                                  DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
1701  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1702  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
1703  0000                                  SLOT    GalaxyDataAddr
1704  0000                                  PAGE    BankGalaxyData4
1705  0000                                  ORG GalaxyDataAddr, BankGalaxyData4
1706  E000 FF           GALAXYDATABlock4:   DB $FF
1707  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1708  0000                                  DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
1709  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1710  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1711  0000                                  SLOT    GalaxyDataAddr
1712  0000                                  PAGE    BankGalaxyData5
1713  0000                                  ORG GalaxyDataAddr,BankGalaxyData5
1714  E000 FF           GALAXYDATABlock5:   DB $FF
1715  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1716  0000                                  DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
1717  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1718  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1719  0000                                  SLOT    GalaxyDataAddr
1720  0000                                  PAGE    BankGalaxyData6
1721  0000                                  ORG GalaxyDataAddr,BankGalaxyData6
1722  E000 FF           GALAXYDATABlock6:   DB $FF
1723  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1724  0000                                  DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
1725  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1726  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1727  0000                                  SLOT    GalaxyDataAddr
1728  0000                                  PAGE    BankGalaxyData7
1729  0000                                  ORG GalaxyDataAddr,BankGalaxyData7
1730  E000 FF           GALAXYDATABlock7:   DB $FF
1731  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1732  0000                                  DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
1733  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1734  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1735  0000                                  SLOT    MathsTablesAddr
1736  0000                                  PAGE    BankMathsTables
1737  0000                                  ORG     MathsTablesAddr,BankMathsTables
1738  0000                                  INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 83 05                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 83 03                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 83 03                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              ; calculates R = 256 * A / Q
  35+ 0043              Requ256mulAdivQ_Log:    JumpIfAGTEMemusng varQ, LL2             ; If A >= Q, then the answer will not fit in one byte, return 255
  35+ 0043 21 8A 7E    >                        ld      hl,varQ
  35+ 0046 BE          >                        cp      (hl)
  35+ 0047 D2 BB 00    >                        jp		nc,LL2
  36+ 004A FD 6F                                ld      iyl,a                           ; STA widget             \ Store A in widget, so now widget = argument A
  37+ 004C DD 67                                ld      ixh,a                           ; TAX                    \ Transfer A into X, so now X = argument A
  38+ 004E                                      JumpIfAIsZero LLfix                     ; If A = 0, jump to LLfix to return a result of 0
  38+ 004E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 004F CA B7 00    >                        jp	    z, LLfix
  39+ 0052              ; calculate log(A) - log(Q), first adding the low bytes (from the logL table), and then the high bytes (from the log table)
  40+ 0052              ; this determins if we branch to antilog or antilogodd for negative value
  41+ 0052 21 83 03     .GetLogA:               ld      hl,LogTable                     ; LDA logL,X             \ e = low byte of log(X)
  42+ 0055 ED 31                                add     hl,a                            ; have to add twice as ist 8 bit so cant shift
  43+ 0057 ED 31                                add     hl,a                            ;
  44+ 0059 5E                                   ld      e,(hl)                          ;
  45+ 005A 23                                   inc     hl                              ;
  46+ 005B 56                                   ld      d,(hl)                          ; de = logH[X] logL[X]
  47+ 005C 21 83 03                             ld      hl,LogTable                     ;
  48+ 005F 3A 8A 7E                             ld      a,(varQ)                        ;
  49+ 0062 ED 31                                add     hl,a                            ;
  50+ 0064 ED 31                                add     hl,a                            ;
  51+ 0066 4E                                   ld      c,(hl)                          ;
  52+ 0067 23                                   inc     hl                              ;
  53+ 0068 46                                   ld      b,(hl)                          ; bc = logH[X] logL[X]
  54+ 0069 7B                                   ld      a,e                             ; SBC logL,X             \       = low byte of log(A) - low byte of log(Q)
  55+ 006A                                      ClearCarryFlag                          ; .
  55+ 006A B7          >                        or a
  56+ 006B 99                                   sbc     a,c                             ; .
  57+ 006C D2 93 00                             jp      nc,NoCarryBranch
  58+ 006F FA 83 00     CarryBranch:            jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  59+ 0072 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  60+ 0073 7A                                   ld      a,d                             ; a = logH(a)
  61+ 0074              .CarryFlagPoint1:       SetCarryFlag
  61+ 0074 37          >                        scf
  62+ 0075 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  63+ 0076 D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  64+ 0079 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  65+ 007C ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  66+ 007E 7E                                   ld      a,(hl)
  67+ 007F 32 8B 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  68+ 0082 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  69+ 0083 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  70+ 0084              .CarryFlagPoint2:       SetCarryFlag
  70+ 0084 37          >                        scf
  71+ 0085 98                                   sbc     a,b
  72+ 0086 D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  73+ 0089 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  74+ 008C ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  75+ 008E 7E                                   ld      a,(hl)
  76+ 008F 32 8B 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  77+ 0092 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  78+ 0093 FA A7 00     NoCarryBranch:          jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  79+ 0096 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  80+ 0097 7A                                   ld      a,d                             ; a = logH(a)
  81+ 0098              .CarryFlagPoint1:       ClearCarryFlag
  81+ 0098 B7          >                        or a
  82+ 0099 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  83+ 009A D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  84+ 009D 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  85+ 00A0 ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  86+ 00A2 7E                                   ld      a,(hl)
  87+ 00A3 32 8B 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  88+ 00A6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  89+ 00A7 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  90+ 00A8              .CarryFlagPoint2:       ClearCarryFlag
  90+ 00A8 B7          >                        or a
  91+ 00A9 98                                   sbc     a,b
  92+ 00AA D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  93+ 00AD 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  94+ 00B0 ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  95+ 00B2 7E                                   ld      a,(hl)
  96+ 00B3 32 8B 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  97+ 00B6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  98+ 00B7 32 8B 7E     LLfix:                  ld      (varR),a                        ; Set the result in R to the value of A
  99+ 00BA C9                                   ret                                     ; RTS                    \ Return from the subroutine
 100+ 00BB 3E FF        LL2:                    ld      a,$FF
 101+ 00BD 32 8B 7E                             ld      (varR),a
 102+ 00C0 C9                                   ret
 103+ 00C1
 104+ 00C1
 105+ 00C1              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
 105+ 00C1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 105+ 00C2 CA EA 00    >                        jp	    z, .ResultIsZero
 106+ 00C5 21 83 03                             ld      hl,LogTable                     ; de = log a
 107+ 00C8 ED 31                                add     hl,a                            ; .
 108+ 00CA ED 31                                add     hl,a                            ; .
 109+ 00CC 5E                                   ld      e,(hl)                          ; .
 110+ 00CD 23                                   inc     hl                              ; .
 111+ 00CE 56                                   ld      d,(hl)                          ; .
 112+ 00CF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 113+ 00D2 78                                   ld      a,b                             ; .
 114+ 00D3 ED 31                                add     hl,a                            ; .
 115+ 00D5 ED 31                                add     hl,a                            ; .
 116+ 00D7 7E                                   ld      a,(hl)                          ; .
 117+ 00D8 23                                   inc     hl                              ; .
 118+ 00D9 66                                   ld      h,(hl)                          ; .
 119+ 00DA 6F                                   ld      l,a                             ; .
 120+ 00DB                                      ClearCarryFlag                          ;
 120+ 00DB B7          >                        or a
 121+ 00DC EB                                   ex      de,hl                           ; now hl = log a and de = log b
 122+ 00DD ED 52                                sbc     hl,de                           ; hl = log a - log b
 123+ 00DF 7C                                   ld      a,h                             ; .
 124+ 00E0 21 83 02                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
 125+ 00E3 ED 31                                add     hl,a                            ; which is also a / b
 126+ 00E5 ED 31                                add     hl,a                            ; .
 127+ 00E7 7E                                   ld      a,(hl)                          ; .
 128+ 00E8                                      ClearCarryFlag                          ;
 128+ 00E8 B7          >                        or a
 129+ 00E9 C9                                   ret
 130+ 00EA              .ResultIsZero:          ClearCarryFlag
 130+ 00EA B7          >                        or a
 131+ 00EB                                      ZeroA
 131+ 00EB AF          >                        xor a
 132+ 00EC C9                                   ret
 133+ 00ED
 134+ 00ED              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
 134+ 00ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ 00EE CA 24 01    >                        jp	    z, .ResultIsZero
 135+ 00F1                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
 135+ 00F1 BA          >                        cp     d
 135+ 00F2 D2 C1 00    >                        jp		nc,AEquAmul256DivBLogLT
 136+ 00F5 21 83 03                             ld      hl,LogTable                     ; de = log a
 137+ 00F8 ED 31                                add     hl,a                            ; .
 138+ 00FA ED 31                                add     hl,a                            ; .
 139+ 00FC 5E                                   ld      e,(hl)                          ; .
 140+ 00FD 23                                   inc     hl                              ; .
 141+ 00FE 56                                   ld      d,(hl)                          ; .
 142+ 00FF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 143+ 0102 78                                   ld      a,b                             ; .
 144+ 0103 ED 31                                add     hl,a                            ; .
 145+ 0105 ED 31                                add     hl,a                            ; .
 146+ 0107 7E                                   ld      a,(hl)                          ; .
 147+ 0108 23                                   inc     hl                              ; .
 148+ 0109 66                                   ld      h,(hl)                          ; .
 149+ 010A 6F                                   ld      l,a                             ; .
 150+ 010B                                      ClearCarryFlag                          ;
 150+ 010B B7          >                        or a
 151+ 010C EB                                   ex      de,hl                           ; now hl = log a and de = log b
 152+ 010D ED 52                                sbc     hl,de                           ; hl = log a - log b
 153+ 010F 38 0B                                jr      c,.ResultIsOne                  ; .
 154+ 0111 7C                                   ld      a,h                             ; .
 155+ 0112 21 83 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
 156+ 0115 ED 31                                add     hl,a                            ; which is also a / b
 157+ 0117 ED 31                                add     hl,a                            ; .
 158+ 0119 7E                                   ld      a,(hl)                          ; .
 159+ 011A                                      ClearCarryFlag                          ;
 159+ 011A B7          >                        or a
 160+ 011B C9                                   ret
 161+ 011C              .ResultIsOne:           ClearCarryFlag
 161+ 011C B7          >                        or a
 162+ 011D 3E FF                                ld      a,$FF
 163+ 011F C9                                   ret
 164+ 0120              .ResultIsInfinte:       SetCarryFlag
 164+ 0120 37          >                        scf
 165+ 0121 3E FF                                ld      a,$FF
 166+ 0123 C9                                   ret
 167+ 0124              .ResultIsZero:          ClearCarryFlag
 167+ 0124 B7          >                        or a
 168+ 0125 C9                                   ret
 169+ 0126
 170+ 0126              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
 170+ 0126 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 170+ 0127 CA 46 01    >                        jp	    z, .ResultIsZero
 171+ 012A 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 172+ 012D ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 173+ 012F ED 31                                add     hl,a
 174+ 0131 5E                                   ld      e,(hl)                          ; de = log a
 175+ 0132 23                                   inc     hl                              ; .
 176+ 0133 56                                   ld      d,(hl)                          ; .
 177+ 0134 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 178+ 0137                                      ClearCarryFlag
 178+ 0137 B7          >                        or a
 179+ 0138 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 180+ 0139 ED 52                                sbc     hl,de
 181+ 013B 7C                                   ld      a,h
 182+ 013C 21 83 02                             ld      hl,AnitLogODDTable
 183+ 013F ED 31                                add     hl,a
 184+ 0141 ED 31                                add     hl,a
 185+ 0143 7E                                   ld      a,(hl)
 186+ 0144                                      ClearCarryFlag
 186+ 0144 B7          >                        or a
 187+ 0145 C9                                   ret
 188+ 0146              .ResultIsZero:          ClearCarryFlag
 188+ 0146 B7          >                        or a
 189+ 0147                                      ZeroA
 189+ 0147 AF          >                        xor a
 190+ 0148 C9                                   ret
 191+ 0149
 192+ 0149
 193+ 0149              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 193+ 0149 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 193+ 014A CA 73 01    >                        jp	    z, .ResultIsZero
 194+ 014D                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 194+ 014D BA          >                        cp     d
 194+ 014E D2 26 01    >                        jp		nc,AEquAmul256Div197LogLT
 195+ 0151 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 196+ 0154 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 197+ 0156 ED 31                                add     hl,a
 198+ 0158 5E                                   ld      e,(hl)                          ; de = log a
 199+ 0159 23                                   inc     hl                              ; .
 200+ 015A 56                                   ld      d,(hl)                          ; .
 201+ 015B 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 202+ 015E                                      ClearCarryFlag
 202+ 015E B7          >                        or a
 203+ 015F EB                                   ex      hl,de                           ; hl = log a, de = log 197
 204+ 0160 ED 52                                sbc     hl,de
 205+ 0162 38 0B                                jr      c,.ResultIsOne
 206+ 0164 7C                                   ld      a,h
 207+ 0165 21 83 01                             ld      hl,AntiLogTable
 208+ 0168 ED 31                                add     hl,a
 209+ 016A ED 31                                add     hl,a
 210+ 016C 7E                                   ld      a,(hl)
 211+ 016D                                      ClearCarryFlag
 211+ 016D B7          >                        or a
 212+ 016E C9                                   ret
 213+ 016F              .ResultIsOne:           ClearCarryFlag
 213+ 016F B7          >                        or a
 214+ 0170 3E FF                                ld      a,$FF
 215+ 0172 C9                                   ret
 216+ 0173              .ResultIsZero:          ClearCarryFlag
 216+ 0173 B7          >                        or a
 217+ 0174 C9                                   ret
 218+ 0175
 219+ 0175              AEquAmul256Div197LogSignA:
 220+ 0175 FD 67                                ld      iyh,a
 221+ 0177                                      ClearSignBitA
 221+ 0177 E6 7F       >                        and     SignMask8Bit
 222+ 0179 CD 49 01                             call    AEquAmul256Div197Log
 223+ 017C 47                                   ld      b,a
 224+ 017D FD 7C                                ld      a,iyh
 225+ 017F                                      SignBitOnlyA
 225+ 017F E6 80       >                        and     SignOnly8Bit
 226+ 0181 B0                                   or      b
 227+ 0182 C9                                   ret
# file closed: ./Maths/logmaths.asm
1739  0183                                  INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0183 01 01 01 01  AntiLogTable:           DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
   1+ 0187 01 01 01 01
   1+ 018B 01 01
   2+ 018D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
   2+ 0191 01 01 01 01
   2+ 0195 01 01
   3+ 0197 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
   3+ 019B 01 01 01 01
   3+ 019F 01 01
   4+ 01A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
   4+ 01A5 02 02 02 02
   4+ 01A9 02 02
   5+ 01AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
   5+ 01AF 02 02 02 02
   5+ 01B3 02 02
   6+ 01B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
   6+ 01B9 03 03 03 03
   6+ 01BD 03 03
   7+ 01BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
   7+ 01C3 04 04 04 04
   7+ 01C7 04 04
   8+ 01C9 04 04 04 04                          DB $04, $04, $04, $04, $04, $05, $05, $05, $05, $05 ; 70 to 79
   8+ 01CD 04 05 05 05
   8+ 01D1 05 05
   9+ 01D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
   9+ 01D7 06 06 06 06
   9+ 01DB 06 06
  10+ 01DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  10+ 01E1 07 07 08 08
  10+ 01E5 08 08
  11+ 01E7 08 08 09 09                          DB $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A ; 100 to 109
  11+ 01EB 09 09 09 0A
  11+ 01EF 0A 0A
  12+ 01F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D ; 110 to 119
  12+ 01F5 0B 0C 0C 0C
  12+ 01F9 0C 0D
  13+ 01FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F, $10, $10 ; 120 to 129
  13+ 01FF 0E 0E 0F 0F
  13+ 0203 10 10
  14+ 0205 10 11 11 11                          DB $10, $11, $11, $11, $12, $12, $13, $13, $13, $14 ; 130 to 139
  14+ 0209 12 12 13 13
  14+ 020D 13 14
  15+ 020F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  15+ 0213 16 17 17 18
  15+ 0217 18 19
  16+ 0219 19 1A 1A 1B                          DB $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F ; 150 to 159
  16+ 021D 1C 1C 1D 1D
  16+ 0221 1E 1F
  17+ 0223 20 20 21 22                          DB $20, $20, $21, $22, $22, $23, $24, $25, $26, $26 ; 160 to 169
  17+ 0227 22 23 24 25
  17+ 022B 26 26
  18+ 022D 27 28 29 2A                          DB $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  18+ 0231 2B 2C 2D 2E
  18+ 0235 2F 30
  19+ 0237 31 32 33 34                          DB $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B ; 180 to 189
  19+ 023B 35 36 38 39
  19+ 023F 3A 3B
  20+ 0241 3D 3E 40 41                          DB $3D, $3E, $40, $41, $42, $44, $45, $47, $48, $4A ; 190 to 199
  20+ 0245 42 44 45 47
  20+ 0249 48 4A
  21+ 024B 4C 4D 4F 51                          DB $4C, $4D, $4F, $51, $52, $54, $56, $58, $5A, $5C ; 200 to 219
  21+ 024F 52 54 56 58
  21+ 0253 5A 5C
  22+ 0255 5E 60 62 64                          DB $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72 ; 210 to 229
  22+ 0259 67 69 6B 6D
  22+ 025D 70 72
  23+ 025F 75 77 7A 7D                          DB $75, $77, $7A, $7D, $80, $82, $85, $88, $8B, $8E ; 220 to 239
  23+ 0263 80 82 85 88
  23+ 0267 8B 8E
  24+ 0269 91 94 98 9B                          DB $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1 ; 230 to 239
  24+ 026D 9E A2 A5 A9
  24+ 0271 AD B1
  25+ 0273 B5 B8 BD C1                          DB $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB ; 240 to 249
  25+ 0277 C5 C9 CE D2
  25+ 027B D7 DB
  26+ 027D E0 E5 EA EF                          DB $E0, $E5, $EA, $EF, $F5, $FA                     ; 250 to 255
  26+ 0281 F5 FA
  27+ 0283
  28+ 0283 01 01 01 01  AnitLogODDTable:        DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
  28+ 0287 01 01 01 01
  28+ 028B 01 01
  29+ 028D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
  29+ 0291 01 01 01 01
  29+ 0295 01 01
  30+ 0297 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
  30+ 029B 01 01 01 01
  30+ 029F 01 01
  31+ 02A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
  31+ 02A5 02 02 02 02
  31+ 02A9 02 02
  32+ 02AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
  32+ 02AF 02 02 02 02
  32+ 02B3 02 02
  33+ 02B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
  33+ 02B9 03 03 03 03
  33+ 02BD 03 03
  34+ 02BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
  34+ 02C3 04 04 04 04
  34+ 02C7 04 04
  35+ 02C9 04 04 04 04                          DB $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 70 to 79
  35+ 02CD 05 05 05 05
  35+ 02D1 05 05
  36+ 02D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
  36+ 02D7 06 06 06 06
  36+ 02DB 06 06
  37+ 02DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  37+ 02E1 07 07 08 08
  37+ 02E5 08 08
  38+ 02E7 08 09 09 09                          DB $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A ; 100 to 109
  38+ 02EB 09 09 0A 0A
  38+ 02EF 0A 0A
  39+ 02F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D ; 110 to 119
  39+ 02F5 0B 0C 0C 0C
  39+ 02F9 0D 0D
  40+ 02FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F, $10, $10 ; 120 to 129
  40+ 02FF 0E 0F 0F 0F
  40+ 0303 10 10
  41+ 0305 10 11 11 12                          DB $10, $11, $11, $12, $12, $12, $13, $13, $14, $14 ; 130 to 139
  41+ 0309 12 12 13 13
  41+ 030D 14 14
  42+ 030F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  42+ 0313 16 17 17 18
  42+ 0317 18 19
  43+ 0319 1A 1A 1B 1B                          DB $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 150 to 159
  43+ 031D 1C 1D 1D 1E
  43+ 0321 1E 1F
  44+ 0323 20 21 21 22                          DB $20, $21, $21, $22, $23, $24, $24, $25, $26, $27 ; 160 to 169
  44+ 0327 23 24 24 25
  44+ 032B 26 27
  45+ 032D 28 29 29 2A                          DB $28, $29, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  45+ 0331 2B 2C 2D 2E
  45+ 0335 2F 30
  46+ 0337 31 32 34 35                          DB $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C ; 180 to 189
  46+ 033B 36 37 38 3A
  46+ 033F 3B 3C
  47+ 0341 3D 3F 40 42                          DB $3D, $3F, $40, $42, $43, $45, $46, $48, $49, $4B ; 190 to 199
  47+ 0345 43 45 46 48
  47+ 0349 49 4B
  48+ 034B 4C 4E 50 52                          DB $4C, $4E, $50, $52, $53, $55, $57, $59, $5B, $5D ; 200 to 219
  48+ 034F 53 55 57 59
  48+ 0353 5B 5D
  49+ 0355 5F 61 63 65                          DB $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74 ; 210 to 229
  49+ 0359 68 6A 6C 6F
  49+ 035D 71 74
  50+ 035F 76 79 7B 7E                          DB $76, $79, $7B, $7E, $81, $84, $87, $8A, $8D, $90 ; 220 to 239
  50+ 0363 81 84 87 8A
  50+ 0367 8D 90
  51+ 0369 93 96 99 9D                          DB $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 230 to 239
  51+ 036D A0 A4 A7 AB
  51+ 0371 AF B3
  52+ 0373 B6 BA BF C3                          DB $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE ; 240 to 249
  52+ 0377 C7 CB D0 D4
  52+ 037B D9 DE
  53+ 037D E3 E8 ED F2                          DB $E3, $E8, $ED, $F2, $F7, $FD                     ; 250 to 255
  53+ 0381 F7 FD
  54+ 0383
# file closed: ./Tables/antilogtable.asm
1740  0383                                  INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0383 00 00        LogTable:               DW $0000                                                                   ; 0
   2+ 0385 00 00 00 20                          DW $0000, $2000, $32B8, $4000, $4A4D, $52B8, $59D6, $6000, $6570, $6A4D    ;   1 TO  10
   2+ 0389 B8 32 00 40
   2+ 038D 4D 4A B8 52
   2+ 0391 D6 59 00 60
   2+ 0395 70 65 4D 6A
   3+ 0399 B4 6E B8 72                          DW $6EB4, $72B8, $766A, $79D6, $7D05, $8000, $82CC, $8570, $87EF, $8A4D    ;  11 TO  20
   3+ 039D 6A 76 D6 79
   3+ 03A1 05 7D 00 80
   3+ 03A5 CC 82 70 85
   3+ 03A9 EF 87 4D 8A
   4+ 03AD 8E 8C B4 8E                          DW $8C8E, $8EB4, $90C1, $92B8, $949A, $966A, $9828, $99D6, $9B75, $9D05    ;  21 TO  30
   4+ 03B1 C1 90 B8 92
   4+ 03B5 9A 94 6A 96
   4+ 03B9 28 98 D6 99
   4+ 03BD 75 9B 05 9D
   5+ 03C1 89 9E 00 A0                          DW $9E89, $A000, $A16C, $A2CC, $A423, $A570, $A6B4, $A7EF, $A922, $AA4D    ;  31 TO  40
   5+ 03C5 6C A1 CC A2
   5+ 03C9 23 A4 70 A5
   5+ 03CD B4 A6 EF A7
   5+ 03D1 22 A9 4D AA
   6+ 03D5 71 AB 8E AC                          DW $AB71, $AC8E, $ADA4, $AEB4, $AFBD, $B0C1, $B1BF, $B2B8, $B3AC, $B49A    ;  41 TO  50
   6+ 03D9 A4 AD B4 AE
   6+ 03DD BD AF C1 B0
   6+ 03E1 BF B1 B8 B2
   6+ 03E5 AC B3 9A B4
   7+ 03E9 85 B5 6A B6                          DW $B585, $B66A, $B74B, $B828, $B901, $B9D6, $BAA7, $BB75, $BC3F, $BD05    ;  51 TO  60
   7+ 03ED 4B B7 28 B8
   7+ 03F1 01 B9 D6 B9
   7+ 03F5 A7 BA 75 BB
   7+ 03F9 3F BC 05 BD
   8+ 03FD C9 BD 89 BE                          DW $BDC9, $BE89, $BF46, $C000, $C0B7, $C16C, $C21D, $C2CC, $C379, $C423    ;  61 TO  70
   8+ 0401 46 BF 00 C0
   8+ 0405 B7 C0 6C C1
   8+ 0409 1D C2 CC C2
   8+ 040D 79 C3 23 C4
   9+ 0411 CB C4 70 C5                          DW $C4CB, $C570, $C613, $C6B4, $C752, $C7EF, $C88A, $C922, $C9B9, $CA4D    ;  71 TO  80
   9+ 0415 13 C6 B4 C6
   9+ 0419 52 C7 EF C7
   9+ 041D 8A C8 22 C9
   9+ 0421 B9 C9 4D CA
  10+ 0425 E0 CA 71 CB                          DW $CAE0, $CB71, $CC00, $CC8E, $CD1A, $CDA4, $CE2D, $CEB4, $CF39, $CFBD    ;  81 TO  90
  10+ 0429 00 CC 8E CC
  10+ 042D 1A CD A4 CD
  10+ 0431 2D CE B4 CE
  10+ 0435 39 CF BD CF
  11+ 0439 40 D0 C1 D0                          DW $D040, $D0C1, $D141, $D1BF, $D23C, $D2B8, $D332, $D3AC, $D424, $D49A    ;  91 TO 100
  11+ 043D 41 D1 BF D1
  11+ 0441 3C D2 B8 D2
  11+ 0445 32 D3 AC D3
  11+ 0449 24 D4 9A D4
  12+ 044D 10 D5 85 D5                          DW $D510, $D585, $D5F8, $D66A, $D6DB, $D74B, $D7BA, $D828, $D895, $D901    ; 101 TO 110
  12+ 0451 F8 D5 6A D6
  12+ 0455 DB D6 4B D7
  12+ 0459 BA D7 28 D8
  12+ 045D 95 D8 01 D9
  13+ 0461 6C D9 D6 D9                          DW $D96C, $D9D6, $DA3F, $DAA7, $DB0E, $DB75, $DBDA, $DC3F, $DCA2, $DD05    ; 111 TO 120
  13+ 0465 3F DA A7 DA
  13+ 0469 0E DB 75 DB
  13+ 046D DA DB 3F DC
  13+ 0471 A2 DC 05 DD
  14+ 0475 67 DD C9 DD                          DW $DD67, $DDC9, $DE29, $DE89, $DEE8, $DF46, $DFA3, $E000, $E05C, $E0B7    ; 121 TO 130
  14+ 0479 29 DE 89 DE
  14+ 047D E8 DE 46 DF
  14+ 0481 A3 DF 00 E0
  14+ 0485 5C E0 B7 E0
  15+ 0489 12 E1 6C E1                          DW $E112, $E16C, $E1C5, $E21D, $E275, $E2CC, $E323, $E379, $E3CE, $E423    ; 131 TO 140
  15+ 048D C5 E1 1D E2
  15+ 0491 75 E2 CC E2
  15+ 0495 23 E3 79 E3
  15+ 0499 CE E3 23 E4
  16+ 049D 77 E4 CB E4                          DW $E477, $E4CB, $E51E, $E570, $E5C2, $E613, $E664, $E6B4, $E703, $E752    ; 141 TO 150
  16+ 04A1 1E E5 70 E5
  16+ 04A5 C2 E5 13 E6
  16+ 04A9 64 E6 B4 E6
  16+ 04AD 03 E7 52 E7
  17+ 04B1 A1 E7 EF E7                          DW $E7A1, $E7EF, $E83D, $E88A, $E8D6, $E922, $E96E, $E9B9, $EA03, $EA4D    ; 151 TO 160
  17+ 04B5 3D E8 8A E8
  17+ 04B9 D6 E8 22 E9
  17+ 04BD 6E E9 B9 E9
  17+ 04C1 03 EA 4D EA
  18+ 04C5 97 EA E0 EA                          DW $EA97, $EAE0, $EB29, $EB71, $EBB9, $EC00, $EC47, $EC8E, $ECD4, $ED1A    ; 161 TO 170
  18+ 04C9 29 EB 71 EB
  18+ 04CD B9 EB 00 EC
  18+ 04D1 47 EC 8E EC
  18+ 04D5 D4 EC 1A ED
  19+ 04D9 5F ED A4 ED                          DW $ED5F, $EDA4, $EDE8, $EE2D, $EE70, $EEB4, $EEF7, $EF39, $EF7B, $EFBD    ; 171 TO 180
  19+ 04DD E8 ED 2D EE
  19+ 04E1 70 EE B4 EE
  19+ 04E5 F7 EE 39 EF
  19+ 04E9 7B EF BD EF
  20+ 04ED FF EF 40 F0                          DW $EFFF, $F040, $F081, $F0C1, $F101, $F141, $F180, $F1BF, $F1FE, $F23C    ; 181 TO 190
  20+ 04F1 81 F0 C1 F0
  20+ 04F5 01 F1 41 F1
  20+ 04F9 80 F1 BF F1
  20+ 04FD FE F1 3C F2
  21+ 0501 7A F2 B8 F2                          DW $F27A, $F2B8, $F2F5, $F332, $F36F, $F3AC, $F3E8, $F424, $F45F, $F49A    ; 191 TO 290
  21+ 0505 F5 F2 32 F3
  21+ 0509 6F F3 AC F3
  21+ 050D E8 F3 24 F4
  21+ 0511 5F F4 9A F4
  22+ 0515 D5 F4 10 F5                          DW $F4D5, $F510, $F54A, $F585, $F5BE, $F5F8, $F631, $F66A, $F6A3, $F6DB    ; 201 TO 210
  22+ 0519 4A F5 85 F5
  22+ 051D BE F5 F8 F5
  22+ 0521 31 F6 6A F6
  22+ 0525 A3 F6 DB F6
  23+ 0529 13 F7 4B F7                          DW $F713, $F74B, $F783, $F7BA, $F7F1, $F828, $F85F, $F895, $F8CB, $F901    ; 211 TO 220
  23+ 052D 83 F7 BA F7
  23+ 0531 F1 F7 28 F8
  23+ 0535 5F F8 95 F8
  23+ 0539 CB F8 01 F9
  24+ 053D 36 F9 6C F9                          DW $F936, $F96C, $F9A1, $F9D6, $FA0A, $FA3F, $FA73, $FAA7, $FADB, $FB0E    ; 221 TO 230
  24+ 0541 A1 F9 D6 F9
  24+ 0545 0A FA 3F FA
  24+ 0549 73 FA A7 FA
  24+ 054D DB FA 0E FB
  25+ 0551 42 FB 75 FB                          DW $FB42, $FB75, $FBA7, $FBDA, $FC0C, $FC3F, $FC71, $FCA2, $FCD4, $FD05    ; 231 TO 240
  25+ 0555 A7 FB DA FB
  25+ 0559 0C FC 3F FC
  25+ 055D 71 FC A2 FC
  25+ 0561 D4 FC 05 FD
  26+ 0565 36 FD 67 FD                          DW $FD36, $FD67, $FD98, $FDC9, $FDF9, $FE29, $FE59, $FE89, $FEB8, $FEE8    ; 241 TO 250
  26+ 0569 98 FD C9 FD
  26+ 056D F9 FD 29 FE
  26+ 0571 59 FE 89 FE
  26+ 0575 B8 FE E8 FE
  27+ 0579 17 FF 46 FF                          DW $FF17, $FF46, $FF75, $FFA3, $FFA3                                       ; 251 TO 255
  27+ 057D 75 FF A3 FF
  27+ 0581 A3 FF
  28+ 0583
  29+ 0583
  30+ 0583
  31+ 0583 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  31+ 0587 20 00 02 00
  31+ 058B 32 00 03 00
  31+ 058F 40 00 04 00
  31+ 0593 4A 00 05 00
  31+ 0597 52 00 06 00
  32+ 059B 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  32+ 059F 60 00 08 00
  32+ 05A3 65 00 09 00
  32+ 05A7 6A 00 0A 00
  32+ 05AB 6E 00 0B 00
  32+ 05AF 72 00 0C 00
  33+ 05B3 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  33+ 05B7 79 00 0E 00
  33+ 05BB 7D 00 0F 00
  33+ 05BF 80 00 10 00
  33+ 05C3 82 00 11 00
  33+ 05C7 85 00 12 00
  34+ 05CB 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  34+ 05CF 8A 00 14 00
  34+ 05D3 8C 00 15 00
  34+ 05D7 8E 00 16 00
  34+ 05DB 90 00 17 00
  34+ 05DF 92 00 18 00
  35+ 05E3 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  35+ 05E7 96 00 1A 00
  35+ 05EB 98 00 1B 00
  35+ 05EF 99 00 1C 00
  35+ 05F3 9B 00 1D 00
  35+ 05F7 9D 00 1E 00
  36+ 05FB 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  36+ 05FF A0 00 20 00
  36+ 0603 A1 00 21 00
  36+ 0607 A2 00 22 00
  36+ 060B A4 00 23 00
  36+ 060F A5 00 24 00
  37+ 0613 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  37+ 0617 A7 00 26 00
  37+ 061B A9 00 27 00
  37+ 061F AA 00 28 00
  37+ 0623 AB 00 29 00
  37+ 0627 AC 00 2A 00
  38+ 062B AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  38+ 062F AE 00 2C 00
  38+ 0633 AF 00 2D 00
  38+ 0637 B0 00 2E 00
  38+ 063B B1 00 2F 00
  38+ 063F B2 00 30 00
  39+ 0643 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  39+ 0647 B4 00 32 00
  39+ 064B B5 00 33 00
  39+ 064F B6 00 34 00
  39+ 0653 B7 00 35 00
  39+ 0657 B8 00 36 00
  40+ 065B B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  40+ 065F B9 00 38 00
  40+ 0663 BA 00 39 00
  40+ 0667 BB 00 3A 00
  40+ 066B BC 00 3B 00
  40+ 066F BD 00 3C 00
  41+ 0673 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  41+ 0677 BF 00 3F 00
  41+ 067B C0 00 40 00
  41+ 067F C1 00 42 00
  41+ 0683 C2 00 43 00
  41+ 0687 C3 00 45 00
  42+ 068B C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  42+ 068F C5 00 48 00
  42+ 0693 C6 00 48 00
  42+ 0697 C7 00 4A 00
  42+ 069B C8 00 4C 00
  42+ 069F C9 00 4D 00
  43+ 06A3 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  43+ 06A7 CB 00 52 00
  43+ 06AB CC 00 53 00
  43+ 06AF CD 00 55 00
  43+ 06B3 CE 00 57 00
  43+ 06B7 CF 00 58 00
  44+ 06BB D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  44+ 06BF D1 00 5C 00
  44+ 06C3 D2 00 5E 00
  44+ 06C7 D3 00 61 00
  44+ 06CB D4 00 64 00
  44+ 06CF D5 00 66 00
  45+ 06D3 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  45+ 06D7 D6 00 69 00
  45+ 06DB D7 00 6A 00
  45+ 06DF D7 00 6B 00
  45+ 06E3 D8 00 6C 00
  45+ 06E7 D8 00 6D 00
  46+ 06EB D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  46+ 06EF D9 00 6F 00
  46+ 06F3 D9 00 70 00
  46+ 06F7 DA 00 71 00
  46+ 06FB DB 00 72 00
  46+ 06FF DC 00 75 00
  47+ 0703 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  47+ 0707 DE 00 7B 00
  47+ 070B DF 00 7E 00
  47+ 070F E0 00 80 00
  47+ 0713 E1 00 83 00
  47+ 0717 E2 00 86 00
  48+ 071B E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  48+ 071F E4 00 8C 00
  48+ 0723 E5 00 8F 00
  48+ 0727 E6 00 92 00
  48+ 072B E7 00 95 00
  48+ 072F E8 00 99 00
  49+ 0733 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  49+ 0737 EA 00 9F 00
  49+ 073B EB 00 A3 00
  49+ 073F EC 00 A6 00
  49+ 0743 ED 00 AA 00
  49+ 0747 EE 00 AE 00
  50+ 074B EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  50+ 074F F0 00 B6 00
  50+ 0753 F1 00 B9 00
  50+ 0757 F2 00 BE 00
  50+ 075B F3 00 C2 00
  50+ 075F F4 00 C6 00
  51+ 0763 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  51+ 0767 F6 00 CF 00
  51+ 076B F7 00 D3 00
  51+ 076F F8 00 D8 00
  51+ 0773 F8 00 D9 00
  51+ 0777 F9 00 DC 00
  52+ 077B FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  52+ 077F FB 00 E6 00
  52+ 0783 FB 00 E9 00
  52+ 0787 FC 00 EB 00
  52+ 078B FD 00 F0 00
  52+ 078F FE 00 F6 00
  53+ 0793 FF 00 FB 00                          DW $FF, 251
  54+ 0797              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1741  0797                                  DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1742  0797                                  ASSERT $-MathsTablesAddr <8912, Bank code leaks over 8K boundary
1743  0797              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
1744  0797                                  SLOT    KeyboardAddr
1745  0797                                  PAGE    BankKeyboard
1746  0797                                  ORG SoundAddr, BankKeyboard
1747  E000                                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ E000              ;
   2+ E000              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ E000              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ E000              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ E000              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ E000              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ E000              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ E000              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ E000              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ E000              ;
  11+ E000              ; Keyboard
  12+ E000              ;
  13+ E000              ;   0      1       2       3       4       5        6       7       8       9
  14+ E000              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ E000              ;   10     11      12      13      14      15       16      17      18      19
  16+ E000              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ E000              ;   20     21      22      23      24      25       26      27      28      29
  18+ E000              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ E000              ;   30     31      32      33      34      35       36      37      38      39
  20+ E000              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ E000              ;
  22+ E000              ; ZX Spectrum Next Compound keys
  23+ E000              ;   40     41       42       43      44      45       46       47
  24+ E000              ;  VK_SEMI VK_QUOTE VK_COMMA VK_STOP VK_UP   VK_DOWN  VK_LEFT  VK _RIGHT        $Register B0 bits 7 to 0    (Set to set ULA Register ($68) bit to to prevent default keystrokes
  25+ E000              ;   48       49      50       51         52          53       54      55
  26+ E000              ;  VK_DELETE VK_EDIT VK_BREAK VK_INV_VID VK_TRUE_VID VK_GRAPH VK_CAPS VK_EXTEND $Register B1 bits 7 to 0
  27+ E000              ; Default map
  28+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ E000              ;   0          1           2             3              4           5           6           7           8           9
  30+ E000              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  31+ E000              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  32+ E000              ;                                                                                                       Find System
  33+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  34+ E000              ;   10         11          12            13             14          15          16          17          18          19
  35+ E000              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  36+ E000              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  37+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ E000              ;   20         Accel       22            23             24          25          26          27          28          29
  39+ E000              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  40+ E000              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  41+ E000              ;   PlanetData                                                      PauseGame   SaveGame
  42+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  43+ E000              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  44+ E000              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  45+ E000              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  46+ E000              ;              ResumeGame                WarpJump
  47+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  48+ E000              ;   40         41          42            43             44          45          46          47          48          49
  49+ E000              ;   VK_SEMI    VK_QUOTE    VK_COMMA      VK_STOP        VK_UP       VK_DOWN     VK_LEFT     VK _RIGHT   VK_DELETE   VK_EDIT
  50+ E000              ;   Market     EquipShip   PlanetData    NearestObject  Map Cursor no auto repeat....................   Delete      Find System
  51+ E000              ;
  52+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  53+ E000              ;   50         51          52            53             54          55
  54+ E000              ;   VK_BREAK   VK_INV_VID  VK_TRUE_VID   VK_GRAPH       VK_EXTCAPS  VK_EXTEND
  55+ E000              ;   EscapePod  Inventory   Status        GalacticChart  LocalChart  SystemJump
  56+ E000              ;
  57+ E000
  58+ E000              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  59+ E000
  60+ E000              c_Pressed_Front         equ 0  * 2
  61+ E000              c_Pressed_Aft           equ 1  * 2
  62+ E000              c_Pressed_Left          equ 2  * 2
  63+ E000              c_Pressed_Right         equ 3  * 2
  64+ E000              c_Pressed_RollLeft      equ 4  * 2
  65+ E000              c_Pressed_RollRight     equ 5  * 2
  66+ E000              c_Pressed_Dive          equ 6  * 2
  67+ E000              c_Pressed_Climb         equ 7  * 2
  68+ E000              c_Pressed_Accellerate   equ 8  * 2
  69+ E000              c_Pressed_Decellerate   equ 9  * 2
  70+ E000              c_Pressed_FireLaser     equ 10 * 2
  71+ E000              c_Pressed_TargetMissle  equ 11 * 2
  72+ E000              c_Pressed_FireMissile   equ 12 * 2
  73+ E000              c_Pressed_UnarmMissile  equ 13 * 2
  74+ E000              c_Pressed_ECM           equ 14 * 2
  75+ E000              c_Pressed_EnergyBomb    equ 15 * 2
  76+ E000              c_Pressed_EscapePod     equ 16 * 2
  77+ E000              c_Pressed_DockingComp   equ 17 * 2
  78+ E000              c_Pressed_Hyperspace    equ 18 * 2
  79+ E000              c_Pressed_Distance      equ 19 * 2
  80+ E000              c_Pressed_HomeCursor    equ 20 * 2
  81+ E000              c_Pressed_Launch        equ 21 * 2
  82+ E000              c_Pressed_BuyCargo      equ 22 * 2
  83+ E000              c_Pressed_SellCargo     equ 23 * 2
  84+ E000              c_Pressed_Equip         equ 24 * 2
  85+ E000              c_Pressed_GalacticChrt  equ 25 * 2
  86+ E000              c_Pressed_LocalChart    equ 26 * 2
  87+ E000              c_Pressed_MarketPrices  equ 27 * 2
  88+ E000              c_Pressed_Status        equ 28 * 2
  89+ E000              c_Pressed_Inventory     equ 29 * 2
  90+ E000              c_Pressed_GameSkip      equ 30 * 2
  91+ E000              c_Pressed_Save          equ 31 * 2
  92+ E000              c_Pressed_Freeze        equ 32 * 2
  93+ E000              c_Pressed_Resume        equ 33 * 2
  94+ E000              c_Pressed_Recentre      equ 34 * 2
  95+ E000              c_Pressed_Quit          equ 35 * 2
  96+ E000              c_Pressed_PlanetData    equ 36 * 2
  97+ E000              c_Pressed_CursorUp      equ 37 * 2
  98+ E000              c_Pressed_CursorDown    equ 38 * 2
  99+ E000              c_Pressed_Find          equ 39 * 2
 100+ E000              c_Pressed_Yes           equ 40 * 2
 101+ E000              c_Pressed_No            equ 41 * 2
 102+ E000              c_Pressed_Warp          equ 42 * 2
 103+ E000              c_Pressed_ExtMarket     equ 43 * 2
 104+ E000              c_Pressed_ExtEquip      equ 44 * 2
 105+ E000              c_Pressed_ExtPlanet     equ 45 * 2
 106+ E000              c_Pressed_ExtNearest    equ 46 * 2
 107+ E000              c_Pressed_ExtCurUp      equ 47 * 2
 108+ E000              c_Pressed_ExtCurDown    equ 48 * 2
 109+ E000              c_Pressed_ExtCurLeft    equ 49 * 2
 110+ E000              c_Pressed_ExtCurRight   equ 50 * 2
 111+ E000              c_Pressed_ExtDelete     equ 51 * 2
 112+ E000              c_Pressed_ExtFindSystem equ 52 * 2
 113+ E000              c_Pressed_ExtEscapePod  equ 53 * 2
 114+ E000              c_Pressed_ExtInventory  equ 54 * 2
 115+ E000              c_Pressed_ExtStatus     equ 55 * 2
 116+ E000              c_Pressed_ExtGlactic    equ 56 * 2
 117+ E000              c_Pressed_ExtLocal      equ 57 * 2
 118+ E000              c_Pressed_ExtSystemJump equ 58 * 2
 119+ E000
 120+ E000              ; half row 1
 121+ E000              VK_CAPS  				equ 0
 122+ E000              VK_Z  					equ 1
 123+ E000              VK_X  					equ 2
 124+ E000              VK_C  					equ 3
 125+ E000              VK_V  					equ 4
 126+ E000              ; half row 2
 127+ E000              VK_A  					equ 5
 128+ E000              VK_S  					equ 6
 129+ E000              VK_D  					equ 7
 130+ E000              VK_F					equ 8
 131+ E000              VK_G  					equ 9
 132+ E000              ; half row 3
 133+ E000              VK_Q  					equ 10
 134+ E000              VK_W  					equ 11
 135+ E000              VK_E  					equ 12
 136+ E000              VK_R  					equ 13
 137+ E000              VK_T  					equ 14
 138+ E000              ; half row 4
 139+ E000              VK_1  					equ 15
 140+ E000              VK_2  					equ 16
 141+ E000              VK_3  					equ 17
 142+ E000              VK_4  					equ 18
 143+ E000              VK_5  					equ 19
 144+ E000              ; half row 5
 145+ E000              VK_0 					equ 20
 146+ E000              VK_9 					equ 21
 147+ E000              VK_8 					equ 22
 148+ E000              VK_7 					equ 23
 149+ E000              VK_6 					equ 24
 150+ E000              ; half row 6
 151+ E000              VK_P  					equ 25
 152+ E000              VK_O  					equ 26
 153+ E000              VK_I  					equ 27
 154+ E000              VK_U  					equ 28
 155+ E000              VK_Y  					equ 29
 156+ E000              ; half row 7
 157+ E000              VK_ENTER 				equ 30
 158+ E000              VK_L  					equ 31
 159+ E000              VK_K  					equ 32
 160+ E000              VK_J  					equ 33
 161+ E000              VK_H  					equ 34
 162+ E000              ; half row 8
 163+ E000              VK_SPACE 				equ 35
 164+ E000              VK_SYM  				equ 36
 165+ E000              VK_M  					equ 37
 166+ E000              VK_N  					equ 38
 167+ E000              VK_B  					equ 39
 168+ E000              ; Extended Group B0
 169+ E000              VK_SEMI                 equ 40
 170+ E000              VK_QUOTE                equ 41
 171+ E000              VK_COMMA                equ 42
 172+ E000              VK_STOP                 equ 43
 173+ E000              VK_UP                   equ 44
 174+ E000              VK_DOWN                 equ 45
 175+ E000              VK_LEFT                 equ 46
 176+ E000              VK_RIGHT                equ 47
 177+ E000              ; Extended Group B1
 178+ E000              VK_DELETE               equ 48
 179+ E000              VK_EDIT                 equ 49
 180+ E000              VK_BREAK                equ 50
 181+ E000              VK_INV_VID              equ 51
 182+ E000              VK_TRUE_VID             equ 52
 183+ E000              VK_GRAPH                equ 53
 184+ E000              VK_EXTCAPS              equ 54
 185+ E000              VK_EXTEND               equ 55
 186+ E000              ;KeyboardMapping
 187+ E000              KeyCode_Front        	equ VK_1
 188+ E000              KeyCode_Aft          	equ VK_2
 189+ E000              KeyCode_Left         	equ VK_3
 190+ E000              KeyCode_Right        	equ VK_4
 191+ E000              KeyCode_RollLeft     	equ VK_O
 192+ E000              KeyCode_RollRight    	equ VK_P
 193+ E000              KeyCode_Dive         	equ VK_Q
 194+ E000              KeyCode_Climb        	equ VK_A
 195+ E000              KeyCode_Accellerate  	equ VK_W
 196+ E000              KeyCode_Decellerate  	equ VK_S
 197+ E000              KeyCode_FireLaser    	equ VK_SPACE
 198+ E000              KeyCode_TargetMissle 	equ VK_T
 199+ E000              KeyCode_FireMissile  	equ VK_STOP
 200+ E000              KeyCode_Find        	equ VK_F
 201+ E000              KeyCode_UnarmMissile 	equ VK_R
 202+ E000              KeyCode_ECM          	equ VK_E
 203+ E000              KeyCode_EnergyBomb   	equ VK_U
 204+ E000              KeyCode_EscapePod    	equ VK_CAPS
 205+ E000              KeyCode_DockingComp  	equ VK_N
 206+ E000              KeyCode_Hyperspace   	equ VK_H
 207+ E000              KeyCode_Distance     	equ VK_J
 208+ E000              KeyCode_HomeCursor   	equ VK_G
 209+ E000              KeyCode_Launch       	equ VK_L
 210+ E000              KeyCode_BuyCargo     	equ VK_B
 211+ E000              KeyCode_SellCargo    	equ VK_V
 212+ E000              KeyCode_Equip        	equ VK_C
 213+ E000              KeyCode_GalacticChrt 	equ VK_5
 214+ E000              KeyCode_LocalChart   	equ VK_6
 215+ E000              KeyCode_MarketPrices 	equ VK_7
 216+ E000              KeyCode_Status       	equ VK_8
 217+ E000              KeyCode_Inventory    	equ VK_9
 218+ E000              KeyCode_GameSkip     	equ VK_Z
 219+ E000              KeyCode_Save         	equ VK_O
 220+ E000              KeyCode_Freeze       	equ VK_B
 221+ E000              KeyCode_Resume       	equ VK_L
 222+ E000              KeyCode_Recentre     	equ VK_STOP
 223+ E000              KeyCode_Quit         	equ VK_Y
 224+ E000              KeyCode_PlanetData   	equ VK_0
 225+ E000              KeyCode_CursorUp        equ VK_Q
 226+ E000              KeyCode_CursorDown      equ VK_A
 227+ E000              KeyCode_PressedYes      equ VK_Y
 228+ E000              KeyCode_PressedNo       equ VK_N
 229+ E000              KeyCode_Warp            equ VK_J
 230+ E000              KeyCode_ExtMarket       equ VK_SEMI
 231+ E000              KeyCode_ExtEquip        equ VK_QUOTE
 232+ E000              KeyCode_ExtPlanet       equ VK_COMMA
 233+ E000              KeyCode_ExtNearest      equ VK_STOP
 234+ E000              KeyCode_ExtCurUp        equ VK_UP
 235+ E000              KeyCode_ExtCurDown      equ VK_DOWN
 236+ E000              KeyCode_ExtCurLeft      equ VK_LEFT
 237+ E000              KeyCode_ExtCurRight     equ VK_RIGHT
 238+ E000              KeyCode_ExtDelete       equ VK_DELETE
 239+ E000              KeyCode_ExtFindSystem   equ VK_EDIT
 240+ E000              KeyCode_ExtEscapePod    equ VK_BREAK
 241+ E000              KeyCode_ExtInventory    equ VK_INV_VID
 242+ E000              KeyCode_ExtStatus       equ VK_TRUE_VID
 243+ E000              KeyCode_ExtGlactic      equ VK_GRAPH
 244+ E000              KeyCode_ExtLocal        equ VK_EXTCAPS
 245+ E000              KeyCode_ExtSystemJump   equ VK_EXTEND
 246+ E000
 247+ E000 00 00 00...  Keys					DS	55          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 248+ E037              c_KeyBoardLen 			equ $ - Keys
 249+ E037 00 00 00...  RawKeys					DS	10          ; increased for extended keys
 250+ E041 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 250+ E045 EF DF BF 7F
 251+ E049              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 252+ E049              ; of updating this table with the respective location to look up
 253+ E049              ; key list sequence is in table above
 254+ E049 0F E0 10 E0  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 254+ E04D 11 E0 12 E0
 254+ E051 1A E0
 255+ E053 19 E0 0A E0                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 255+ E057 05 E0 0B E0
 255+ E05B 06 E0
 256+ E05D 23 E0 0E E0                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 256+ E061 2B E0 0D E0
 256+ E065 0C E0
 257+ E067 1C E0 00 E0                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 257+ E06B 26 E0 22 E0
 257+ E06F 21 E0
 258+ E071 09 E0 1F E0                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 258+ E075 27 E0 04 E0
 258+ E079 03 E0
 259+ E07B 13 E0 18 E0                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 259+ E07F 17 E0 16 E0
 259+ E083 15 E0
 260+ E085 01 E0 1A E0                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 260+ E089 27 E0 1F E0
 260+ E08D 2B E0
 261+ E08F 1D E0 14 E0                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 261+ E093 0A E0 05 E0
 261+ E097 08 E0
 262+ E099 1D E0 26 E0                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp         ,Keys+KeyCode_ExtMarket    ,Keys+KeyCode_ExtEquip
 262+ E09D 21 E0 28 E0
 262+ E0A1 29 E0
 263+ E0A3 2A E0 2B E0                          DW  Keys+KeyCode_ExtPlanet    ,Keys+KeyCode_ExtNearest   ,Keys+KeyCode_ExtCurUp     ,Keys+KeyCode_ExtCurDown   ,Keys+KeyCode_ExtCurLeft
 263+ E0A7 2C E0 2D E0
 263+ E0AB 2E E0
 264+ E0AD 2F E0 30 E0                          DW  Keys+KeyCode_ExtCurRight  ,Keys+KeyCode_ExtDelete    ,Keys+KeyCode_ExtFindSystem,Keys+KeyCode_ExtEscapePod ,Keys+KeyCode_ExtInventory
 264+ E0B1 31 E0 32 E0
 264+ E0B5 33 E0
 265+ E0B7 34 E0 35 E0                          DW  Keys+KeyCode_ExtStatus    ,Keys+KeyCode_ExtGlactic   ,Keys+KeyCode_ExtLocal     ,Keys+KeyCode_ExtSystemJump
 265+ E0BB 36 E0 37 E0
 266+ E0BF
 267+ E0BF
 268+ E0BF 3F 5A 58 43  ASCII_Map:              DB "?","Z","X","C","V"
 268+ E0C3 56
 269+ E0C4 41 53 44 46                          DB "A","S","D","F","G"
 269+ E0C8 47
 270+ E0C9 51 57 45 52                          DB "Q","W","E","R","T"
 270+ E0CD 54
 271+ E0CE 31 32 33 34                          DB "1","2","3","4","5"
 271+ E0D2 35
 272+ E0D3 30 39 38 37                          DB "0","9","8","7","6"
 272+ E0D7 36
 273+ E0D8 50 4F 49 55                          DB "P","O","I","U","Y"
 273+ E0DC 59
 274+ E0DD 3E 4C 4B 4A                          DB ">","L","K","J","H"
 274+ E0E1 48
 275+ E0E2 20 5E 4D 4E                          DB " ","^","M","N","B"
 275+ E0E6 42
 276+ E0E7 3B 22 2C 2E                          DB ";",'"',",",".","^","v","[","]"  ; Extended keys register 0 semicolon, quote, comman, fullstop, up, down, left, right
 276+ E0EB 5E 76 5B 5D
 277+ E0EF 23 65 62 69                          DB "#","e","b","i","t","g","c","x"  ; Extended keys register 1 delete, edit, break, inv video, true video graph, caps, extend
 277+ E0F3 74 67 63 78
 278+ E0F7              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 279+ E0F7              ; for the raw key press status
 280+ E0F7              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 281+ E0F7              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 282+ E0F7              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 283+ E0F7              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 284+ E0F7              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 285+ E0F7              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 286+ E0F7              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 287+ E0F7              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 288+ E0F7              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 289+ E0F7              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 290+ E0F7              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 291+ E0F7              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 292+ E0F7              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 293+ E0F7              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 294+ E0F7              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 295+ E0F7              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 296+ E0F7              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 297+ E0F7              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 298+ E0F7              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 299+ E0F7              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 300+ E0F7              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 301+ E0F7              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 302+ E0F7              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 303+ E0F7              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 304+ E0F7              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 305+ E0F7              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 306+ E0F7              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 307+ E0F7              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 308+ E0F7              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 309+ E0F7              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 310+ E0F7              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 311+ E0F7              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 312+ E0F7              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 313+ E0F7              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 314+ E0F7              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 315+ E0F7              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 316+ E0F7              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 317+ E0F7              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 318+ E0F7              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 319+ E0F7              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 320+ E0F7              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 321+ E0F7
 322+ E0F7
 323+ E0F7              MIsKeyPressed:          MACRO   keyaddress, misstarget
 324+ E0F7 ~                                    MMUSelectKeyboard
 325+ E0F7 ~                                    ld      hl,(keyaddress)
 326+ E0F7 ~                                    ld      a,(hl)
 327+ E0F7 ~                                    JumpIfAIsZero   misstarget
 328+ E0F7                                      ENDM
 329+ E0F7
 330+ E0F7
 331+ E0F7 21 00 E0     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 332+ E0FA 11 37 00                             ld		de, c_KeyBoardLen               ;
 333+ E0FD 3E 00                                ld		a,0                             ;
 334+ E0FF CD 26 7D                             call	memfill_dma                     ;
 335+ E102 C9                                   ret                                     ;
 336+ E103
 337+ E103
 338+ E103
 339+ E103 DD 21 37 E0  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 340+ E107 21 41 E0                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 341+ E10A 0E 08                                ld		c,8                             ; 8 ports to ready
 342+ E10C 11 00 E0                             ld      de,Keys                         ; ix = table of key states from raw read
 343+ E10F 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 344+ E110 DB FE                                in		a,($FE)							; read port to a
 345+ E112 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 346+ E115 DD 23                                inc     ix
 347+ E117 23                                   inc		hl                              ; and ready for next read
 348+ E118 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 349+ E11A 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 350+ E11B 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 351+ E11D FD 6F                                ld      iyl,a
 352+ E11F                                      ZeroA
 352+ E11F AF          >                        xor a
 353+ E120 C3 2D E1                             jp      .SetKey
 354+ E123 20 0B                                jr		nz,.SkipKeySet
 355+ E125 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 356+ E127 1A                                   ld      a,(de)                          ; get current keystate
 357+ E128 FE 02                                cp      2
 358+ E12A 28 02                                jr      z,.AlreadyHeld
 359+ E12C 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 360+ E12D 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 361+ E12E FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 362+ E130 13           .SkipKeySet:	        inc		de								; move to next key
 363+ E131 10 E7                                djnz	.ProcessBitsLoop				; Process all key group bits
 364+ E133 0D                                   dec     c                               ; thats one row of bits all processed
 365+ E134 20 D9                                jr      nz,.PortReadLoop				; Read next input port
 366+ E136              .ReadExtend0:           GetNextReg EXTENDED_KEYS_0_REGISTER
 366+ E136 01 3B 24    >            ld bc,$243B
 366+ E139 3E B0       >            ld a,EXTENDED_KEYS_0_REGISTER
 366+ E13B ED 79       >            out (c),a
 366+ E13D 04          >            inc b
 366+ E13E ED 78       >            in a,(c)
 367+ E140 32 3F E0                             ld      (RawKeys+8),a                   ; save to extended slot
 368+ E143 06 08                                ld      b,8
 369+ E145 21 28 E0                             ld      hl,Keys + VK_SEMI
 370+ E148 17           .ProcessExtend0:        rla                                     ; shift bits left into carry for extended keys
 371+ E149 30 04                                jr      nc,.SetExtend0KeyPressed
 372+ E14B              .Extend0NotPressed:     ZeroA
 372+ E14B AF          >                        xor a
 373+ E14C C3 55 E1                             jp      .SetExtend0Key
 374+ E14F 7E           .SetExtend0KeyPressed:  ld      a,(hl)
 375+ E150 FE 02                                cp      2
 376+ E152 28 02                                jr      z,.Extend0AlreadyHeld
 377+ E154 3C                                   inc     a
 378+ E155 77           .SetExtend0Key:         ld      (hl),a
 379+ E156 23           .Extend0AlreadyHeld:    inc     hl
 380+ E157 10 EF                                djnz    .ProcessExtend0
 381+ E159              .ReadExtend1:           GetNextReg EXTENDED_KEYS_1_REGISTER
 381+ E159 01 3B 24    >            ld bc,$243B
 381+ E15C 3E B1       >            ld a,EXTENDED_KEYS_1_REGISTER
 381+ E15E ED 79       >            out (c),a
 381+ E160 04          >            inc b
 381+ E161 ED 78       >            in a,(c)
 382+ E163 32 40 E0                             ld      (RawKeys+9),a                      ; save to extended slot
 383+ E166 06 08                                ld      b,8
 384+ E168 21 30 E0                             ld      hl,Keys + VK_DELETE
 385+ E16B 17           .ProcessExtend1:        rla                                     ; shift bits left into carry for extended keys
 386+ E16C 30 04                                jr      nc,.SetExtend1KeyPressed
 387+ E16E              .Extend1NotPressed:     ZeroA
 387+ E16E AF          >                        xor a
 388+ E16F C3 78 E1                             jp      .SetExtend1Key
 389+ E172 7E           .SetExtend1KeyPressed:  ld      a,(hl)
 390+ E173 FE 02                                cp      2
 391+ E175 28 02                                jr      z,.Extend1AlreadyHeld
 392+ E177 3C                                   inc     a
 393+ E178 77           .SetExtend1Key:         ld      (hl),a
 394+ E179 23           .Extend1AlreadyHeld:    inc     hl
 395+ E17A 10 EF                                djnz    .ProcessExtend1
 396+ E17C C9                                   ret
 397+ E17D
 398+ E17D
 399+ E17D
 400+ E17D              GetKeyStateAddressDE:   MACRO
 401+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 402+ E17D ~                                    add     hl,a
 403+ E17D ~                                    ld      e,(hl)
 404+ E17D ~                                    inc     hl
 405+ E17D ~                                    ld      d,(hl)                          ; now de = address in keypress list
 406+ E17D                                      ENDM
 407+ E17D
 408+ E17D              GetKeyStateAddressHL:   MACRO
 409+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 410+ E17D ~                                    add     hl,a
 411+ E17D ~                                    ld      a,(hl)
 412+ E17D ~                                    inc     hl
 413+ E17D ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 414+ E17D ~                                    ld      l,a
 415+ E17D                                      ENDM
 416+ E17D
 417+ E17D
 418+ E17D              ;;old debug codeCurrentX            DB 0
 419+ E17D              ;;old debug codeCurrentY            DB 0
 420+ E17D              ;;old debug code
 421+ E17D              ;;old debug codedisplayKeyStatus:       xor         a
 422+ E17D              ;;old debug code                        ld          (CurrentX),a
 423+ E17D              ;;old debug code                        ld          hl,RawKeys
 424+ E17D              ;;old debug code                        ld          a,(hl)
 425+ E17D              ;;old debug code                        and         %00011111
 426+ E17D              ;;old debug code                        ld          b,5
 427+ E17D              ;;old debug code.displayLoop:           push        bc,,hl
 428+ E17D              ;;old debug code                        rra
 429+ E17D              ;;old debug code                        jr          c,.displayNoPress
 430+ E17D              ;;old debug code.displayPress:          push        af
 431+ E17D              ;;old debug code                        ld          a,(CurrentX)
 432+ E17D              ;;old debug code                        ld          e,a
 433+ E17D              ;;old debug code                        ld          a,(CurrentY)
 434+ E17D              ;;old debug code                        ld          d,a
 435+ E17D              ;;old debug code                        ld          a,'*'
 436+ E17D              ;;old debug code                        MMUSelectLayer1
 437+ E17D              ;;old debug code                        call        l1_print_char
 438+ E17D              ;;old debug code                        ld          a,(CurrentX)
 439+ E17D              ;;old debug code                        add         a,8
 440+ E17D              ;;old debug code                        ld          (CurrentX),a
 441+ E17D              ;;old debug code                        pop         af
 442+ E17D              ;;old debug code                        pop         bc,,hl
 443+ E17D              ;;old debug code                        djnz        .displayLoop
 444+ E17D              ;;old debug code                        ret
 445+ E17D              ;;old debug code.displayNoPress:        push        af
 446+ E17D              ;;old debug code                        ld          a,(CurrentX)
 447+ E17D              ;;old debug code                        ld          e,a
 448+ E17D              ;;old debug code                        ld          a,(CurrentY)
 449+ E17D              ;;old debug code                        ld          d,a
 450+ E17D              ;;old debug code                        ld          a,'O'
 451+ E17D              ;;old debug code                        MMUSelectLayer1
 452+ E17D              ;;old debug code                        call        l1_print_char
 453+ E17D              ;;old debug code                        ld          a,(CurrentX)
 454+ E17D              ;;old debug code                        add         a,8
 455+ E17D              ;;old debug code                        ld          (CurrentX),a
 456+ E17D              ;;old debug code                        pop         af
 457+ E17D              ;;old debug code                        pop         bc,,hl
 458+ E17D              ;;old debug code                        djnz        .displayLoop
 459+ E17D              ;;old debug code                        ret
 460+ E17D              ;;old debug code
 461+ E17D              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 462+ E17D              ;;old debug code                        cp  0
 463+ E17D              ;;old debug code                        jr      z,.displayNoUp
 464+ E17D              ;;old debug code                        cp  1
 465+ E17D              ;;old debug code                        jr      z,.displayUp
 466+ E17D              ;;old debug code.displayHeld:           ld      de,8*15
 467+ E17D              ;;old debug code                        ld      a,"*"
 468+ E17D              ;;old debug code                        MMUSelectLayer1
 469+ E17D              ;;old debug code                        call        l1_print_char
 470+ E17D              ;;old debug code                        ret
 471+ E17D              ;;old debug code.displayUp:             ld      de,8*15
 472+ E17D              ;;old debug code                        ld      a,"+"
 473+ E17D              ;;old debug code                        MMUSelectLayer1
 474+ E17D              ;;old debug code                        call        l1_print_char
 475+ E17D              ;;old debug code                        ret
 476+ E17D              ;;old debug code.displayNoUp:             ld      de,8*15
 477+ E17D              ;;old debug code                        ld      a,"O"
 478+ E17D              ;;old debug code                        MMUSelectLayer1
 479+ E17D              ;;old debug code                        call        l1_print_char
 480+ E17D              ;;old debug code                        ret
 481+ E17D              ;;old debug code
 482+ E17D
 483+ E17D
 484+ E17D              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 485+ E17D              ; it will have to be let go to reset of 0 and scan again
 486+ E17D              ; Deprecated as not used as yet
 487+ E17D              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 488+ E17D              ;;;;;;                        push    hl
 489+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 490+ E17D              ;;;;;;                        pop     hl                              ; get key address into hl
 491+ E17D              ;;;;;;                        push    hl
 492+ E17D              ;;;;;;                        ld      a,(hl)
 493+ E17D              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 494+ E17D              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 495+ E17D              ;;;;;;                        ret
 496+ E17D              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 497+ E17D              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 498+ E17D              ;;;;;;                        push    hl
 499+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 500+ E17D              ;;;;;;                        pop     hl
 501+ E17D              ;;;;;;                        push    hl
 502+ E17D              ;;;;;;                        ld      a,(hl)
 503+ E17D              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 504+ E17D              ;;;;;;                        pop     hl
 505+ E17D              ;;;;;;                        ret
 506+ E17D
 507+ E17D              ; Gets the current keystate of the c_Pressed Key in a register
 508+ E17D              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 508+ E17D 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 508+ E180 ED 31       >                        add     hl,a
 508+ E182 7E          >                        ld      a,(hl)
 508+ E183 23          >                        inc     hl
 508+ E184 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 508+ E185 6F          >                        ld      l,a
 509+ E186 7E                                   ld      a,(hl)                          ; a = keystate
 510+ E187 C9                                   ret
 511+ E188
 512+ E188              ; sets they keystate of c pressed key in a register to 1 (pressed)
 513+ E188              ; This will be used by auto dock
 514+ E188              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 514+ E188 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 514+ E18B ED 31       >                        add     hl,a
 514+ E18D 7E          >                        ld      a,(hl)
 514+ E18E 23          >                        inc     hl
 514+ E18F 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 514+ E190 6F          >                        ld      l,a
 515+ E191 3E 01                                ld      a,1
 516+ E193 77                                   ld      (hl),a
 517+ E194 C9                                   ret
 518+ E195
 519+ E195              is_key_up_state:        GetKeyStateAddressHL
 519+ E195 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 519+ E198 ED 31       >                        add     hl,a
 519+ E19A 7E          >                        ld      a,(hl)
 519+ E19B 23          >                        inc     hl
 519+ E19C 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 519+ E19D 6F          >                        ld      l,a
 520+ E19E 7E                                   ld      a,(hl)
 521+ E19F FE 00                                cp      0
 522+ E1A1 C9                                   ret
 523+ E1A2
 524+ E1A2              ; returns z is set if c_ key is pressed
 525+ E1A2              is_key_pressed:         GetKeyStateAddressHL
 525+ E1A2 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 525+ E1A5 ED 31       >                        add     hl,a
 525+ E1A7 7E          >                        ld      a,(hl)
 525+ E1A8 23          >                        inc     hl
 525+ E1A9 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 525+ E1AA 6F          >                        ld      l,a
 526+ E1AB 7E                                   ld      a,(hl)                          ; a = keystate
 527+ E1AC FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 528+ E1AE C9                                   ret
 529+ E1AF
 530+ E1AF              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 531+ E1AF              is_key_held:            GetKeyStateAddressHL
 531+ E1AF 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 531+ E1B2 ED 31       >                        add     hl,a
 531+ E1B4 7E          >                        ld      a,(hl)
 531+ E1B5 23          >                        inc     hl
 531+ E1B6 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 531+ E1B7 6F          >                        ld      l,a
 532+ E1B8 7E                                   ld      a,(hl)                          ; a = keystate
 533+ E1B9 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 534+ E1BB C9                                   ret
 535+ E1BC
 536+ E1BC              ; checks to see if any key is pressed in the key table
 537+ E1BC 21 00 E0     is_any_key_pressed:     ld      hl,Keys
 538+ E1BF 01 28 00                             ld      bc,40
 539+ E1C2 3E 01                                ld      a,1
 540+ E1C4 ED B1                                cpir                                    ; search for the value 1
 541+ E1C6 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 542+ E1C8                                      SetAFalse
 542+ E1C8 3E FF       >                        ld      a,$FF
 543+ E1CA C9                                   ret
 544+ E1CB 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 545+ E1CD 91                                   sub     c                               ; so a = 40 - c to get to result
 546+ E1CE C9                                   ret
 547+ E1CF
 548+ E1CF 21 00 E0     is_any_key_held:        ld      hl,Keys
 549+ E1D2 06 28                                ld      b,40
 550+ E1D4 0E 00                                ld      c,0
 551+ E1D6 7E           .KeyReadLoop:           ld      a,(hl)
 552+ E1D7 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 553+ E1D9 C2 E3 E1                             jp      nz,.KeyPressed
 554+ E1DC 23                                   inc     hl
 555+ E1DD 0C                                   inc     c
 556+ E1DE 10 F6                                djnz    .KeyReadLoop
 557+ E1E0                                      SetAFalse
 557+ E1E0 3E FF       >                        ld      a,$FF
 558+ E1E2 C9                                   ret
 559+ E1E3 79           .KeyPressed:            ld      a,c
 560+ E1E4 C9                                   ret
 561+ E1E5
 562+ E1E5
 563+ E1E5 21 41 E0     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 564+ E1E8 06 08                                ld		b,8                             ; 8 ports to ready
 565+ E1EA 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 566+ E1EB DB FE                                in		a,($FE)							; read port to a
 567+ E1ED E6 1F                                and     %00011111
 568+ E1EF FE 1F                                cp      %00011111
 569+ E1F1 20 F2                                jr      nz ,WaitForNoKey
 570+ E1F3 23                                   inc		hl                              ; and ready for next read
 571+ E1F4 10 F4                                djnz    .PortReadLoop
 572+ E1F6 C9                                   ret
 573+ E1F7
 574+ E1F7 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 575+ E1FB CD E5 E1                             call    WaitForNoKey
 576+ E1FE 21 41 E0     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 577+ E201 06 08                                ld		b,8                             ; 8 ports to ready
 578+ E203 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 579+ E204 DB FE                                in		a,($FE)							; read port to a
 580+ E206 E6 1F                                and     %00011111
 581+ E208 FE 1F                                cp      %00011111
 582+ E20A C2 14 E2                             jp      nz,.WaitComplete
 583+ E20D C0                                   ret     nz
 584+ E20E 23                                   inc		hl                              ; and ready for next read
 585+ E20F 10 F2                                djnz    .PortReadLoop
 586+ E211 C3 FE E1                             jp      .waitKeyLoop
 587+ E214 E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 588+ E218 C9                                   ret
 589+ E219
 590+ E219
 591+ E219 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 592+ E237 00                                   DB  0               ; end of string marker as a safety
 593+ E238 00           InputLength             DB  0               ; Current String length
 594+ E239 00           InputCursor             DB  0               ; Current Cursor Position
 595+ E23A 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 596+ E23B 00           InputChanged            DB  0
 597+ E23C 00           InsertMode              DB  0
 598+ E23D              InputLimit              EQU 20
 599+ E23D
 600+ E23D 21 19 E2     keyboard_copy_input_to_de:  ld      hl,InputString
 601+ E240 3A 39 E2                                 ld      a,(InputCursor)
 602+ E243 FE 00                                    cp      0
 603+ E245 28 05                                    jr      z,.NoString
 604+ E247 4F                                       ld      c,a
 605+ E248 06 00                                    ld      b,0
 606+ E24A ED B0                                    ldir
 607+ E24C 3E 00        .NoString                   ld      a,0
 608+ E24E 12                                       ld      (de),a
 609+ E24F C9                                       ret
 610+ E250
 611+ E250               ;Input routine logic
 612+ E250               ;Intialise input state
 613+ E250
 614+ E250              ; Scans the key pressed to determine if its an alpha, returns ascii code or 0 if not alpha
 615+ E250              ; Input a = key pressed, returns with carry set if no alpha else carry is clear
 616+ E250              isKeyAlpha:             JumpIfALTNusng  "A",   .NotAlpha
 616+ E250 FE 41       >                        cp      "A"
 616+ E252 DA 5C E2    >                        jp		c, .NotAlpha
 617+ E255                                      JumpIfAGTENusng "Z"+1, .NotAlpha
 617+ E255 FE 5B       >                        cp     "Z"+1
 617+ E257 D2 5C E2    >                        jp		nc,.NotAlpha
 618+ E25A                                      ClearCarryFlag
 618+ E25A B7          >                        or a
 619+ E25B C9                                   ret
 620+ E25C              .NotAlpha               SetCarryFlag
 620+ E25C 37          >                        scf
 621+ E25D C9                                   ret
 622+ E25E
 623+ E25E 3A 39 E2     InsertKeystroke:        ld      a,(InputCursor)                         ; Current Cursor position
 624+ E261 FE 1E                                cp      30                                      ; protect from buffer overflow
 625+ E263 C8                                   ret     z                                       ; .
 626+ E264 21 19 E2                             ld      hl,InputString                          ; position hl to position in input string
 627+ E267 ED 31                                add     hl,a                                    ; .
 628+ E269 E5                                   push    hl                                      ; save current cursor position
 629+ E26A 47                                   ld      b,a                                     ; as a quick optimisation
 630+ E26B                                      JumpIfMemFalse InsertMode, .NoCopyNeeded        ; if we are in overtype mode skip copy
 630+ E26B 3A 3C E2    >                        ld      a,(InsertMode)
 630+ E26E A7          >                        and     a
 630+ E26F C2 8F E2    >                        jp      nz, .NoCopyNeeded
 631+ E272 3A 38 E2                             ld      a,(InputLength)                         ; no need to shuffle string
 632+ E275 B8                                   cp      b                                       ; if we are at the end already
 633+ E276 78                                   ld      a,b                                     ; .
 634+ E277 CA 8F E2                             jp      z,.NoCopyNeeded                         ; so we can behave like overtype mode
 635+ E27A 11 36 E2                             ld      de,InputString+29                       ; now from the end of the string
 636+ E27D 21 35 E2                             ld      hl,InputString+28                       ; .
 637+ E280 06 1D                                ld      b,29                                    ; for up to 29 characters
 638+ E282 4F                                   ld      c,a                                     ; back to the current cursor position
 639+ E283 C5           .CopyLoop:              push    bc                                      ; save current position
 640+ E284 7E                                   ld      a,(hl)                                  ; now suffle from left char to right char
 641+ E285 12                                   ld      (de),a                                  ; .
 642+ E286 2B                                   dec     hl                                      ; moving back one byte at a time
 643+ E287 1B                                   dec     de                                      ;
 644+ E288 05                                   dec     b                                       ; and reducing the current copy position
 645+ E289 79                                   ld      a,c                                     ; have we reached the input cursor pos
 646+ E28A B8                                   cp      b                                       ;
 647+ E28B C1                                   pop     bc
 648+ E28C C2 83 E2                             jp      nz,.CopyLoop
 649+ E28F E1           .NoCopyNeeded:          pop     hl
 650+ E290 3A 9B E2                             ld      a,(LastKeyPressed)
 651+ E293 77                                   ld      (hl),a
 652+ E294 21 38 E2                             ld      hl,InputLength
 653+ E297 34                                   inc     (hl)
 654+ E298 23                                   inc     hl                                      ;  to input cursor as a short cut to logic
 655+ E299 34                                   inc     (hl)
 656+ E29A C9                                   ret
 657+ E29B
 658+ E29B
 659+ E29B              ; We won't have any auto repeat on input
 660+ E29B 00           LastKeyPressed:         db 0
 661+ E29C
 662+ E29C              initInputText:          ZeroA
 662+ E29C AF          >                        xor a
 663+ E29D 32 39 E2                             ld      (InputCursor),a
 664+ E2A0 32 9B E2                             ld      (LastKeyPressed),a
 665+ E2A3 32 38 E2                             ld      (InputLength),a
 666+ E2A6                                      SetMemTrue  InsertMode
 666+ E2A6 AF          >                        xor     a
 666+ E2A7 32 3C E2    >                        ld      (InsertMode),a
 667+ E2AA                                      SetMemFalse EnterPressed
 667+ E2AA 3E FF       >                        ld      a,$FF
 667+ E2AC 32 3A E2    >                        ld      (EnterPressed),a
 668+ E2AF                                      SetMemFalse InputChanged
 668+ E2AF 3E FF       >                        ld      a,$FF
 668+ E2B1 32 3B E2    >                        ld      (InputChanged),a
 669+ E2B4 21 19 E2                             ld      hl,InputString
 670+ E2B7 06 1E                                ld      b,30
 671+ E2B9 77           .wipeloop:              ld      (hl),a
 672+ E2BA 23                                   inc     hl
 673+ E2BB 10 FC                                djnz    .wipeloop
 674+ E2BD C9                                   ret
 675+ E2BE
 676+ E2BE              ;;;InputNameV2:            call    is_any_key_pressed              ; scan for key states
 677+ E2BE              ;;;                        cp      $FF                             ; no key means we reset auto repeat
 678+ E2BE              ;;;                        jp      z,.NoKeyPressed                 ;
 679+ E2BE              ;;;.IsItLastKeyHeld:       ld      hl,LastKeyPressed               ; is it the same key as before
 680+ E2BE              ;;;                        cp      (hl)                            ;
 681+ E2BE              ;;;                        ret     z                               ; if so just ignore it to avoid auto repeat
 682+ E2BE              ;;;.SetNewAntiRepeat:      ld      (LastKeyPressed),a
 683+ E2BE              ;;;.CheckKeyPressed:       call    isKeyAlpha
 684+ E2BE              ;;;                        jp      nc,.AlphaKeyPressed
 685+ E2BE              ;;;.CheckSpaceKeyPressed:  cp      " "
 686+ E2BE              ;;;                        jp      z,.SpacePressed
 687+ E2BE              ;;;.CheckEnterPressed:     cp      ">"
 688+ E2BE              ;;;                        jp      z,.EnterPressed
 689+ E2BE              ;;;.CheckLeftPressed:      cp      "["
 690+ E2BE              ;;;                        jp      z,.LeftPressed
 691+ E2BE              ;;;.CheckRightPressed:     cp      "]"
 692+ E2BE              ;;;                        jp      z,.RightPressed
 693+ E2BE              ;;;.CheckDeletePressed:    cp      "#"
 694+ E2BE              ;;;                        jp      z,.DeletePressed
 695+ E2BE              ;;;.AnyOtherKeyIsIgnored:  ret
 696+ E2BE              ;;;.AlphaKeyPressed:       ld      a,(InputLength)
 697+ E2BE              ;;;                        JumpIfAGTENusng 30,.MaxInputReached
 698+ E2BE              ;;;.InsertKey:             call    InsertKeystroke
 699+ E2BE              ;;;                        ret
 700+ E2BE              ;;;.SpacePressed:          call    InsertKeystroke
 701+ E2BE              ;;;                        ret
 702+ E2BE              ;;;.EnterPressed:
 703+ E2BE              ;;;
 704+ E2BE              ;;;.LeftPressed:           ld      a,(InputCusor)
 705+ E2BE              ;;;                        JumpIfAIsZero, .MaxInputReached
 706+ E2BE              ;;;                        dec     a
 707+ E2BE              ;;;                        ld      (InputCursor),a
 708+ E2BE              ;;;                        ret
 709+ E2BE              ;;;.RightPressed:          ld      a,(InputLength)
 710+ E2BE              ;;;                        inc     a
 711+ E2BE              ;;;                        ld      b,a
 712+ E2BE              ;;;                        ld      a,(InputCursor)
 713+ E2BE              ;;;                        JumpIfMemGTENusng b, .MaxInputReached
 714+ E2BE              ;;;                        inc     a
 715+ E2BE              ;;;                        ld      (InputCursor),a
 716+ E2BE              ;;;                        ret
 717+ E2BE              ;;;.DeletaPressed:         ld      a,(InputCusor)
 718+ E2BE              ;;;                        ld      c,a
 719+ E2BE              ;;;                        JumpIfAisZero, .MaxInputReached
 720+ E2BE              ;;;                        ld      a,(InputLength)
 721+ E2BE              ;;;                        JumpIfAisZero, .MaxInputReached
 722+ E2BE              ;;;                        ld      de,InputString
 723+ E2BE              ;;;                        ld      hl,de
 724+ E2BE              ;;;                        inc     hl
 725+ E2BE              ;;;                        ld      a,(InputLength)                 ; copy backwards
 726+ E2BE              ;;;                        dec     c                               ; for string length - curretn cursor
 727+ E2BE              ;;;                        ld      c,a
 728+ E2BE              ;;;                        ld      b,0
 729+ E2BE              ;;;                        ldir
 730+ E2BE              ;;;                        ret
 731+ E2BE              ;;;GOTTOHERE
 732+ E2BE
 733+ E2BE
 734+ E2BE
 735+ E2BE C9           .MaxInputReached:       ret ; will add a beep later
 736+ E2BF
 737+ E2BF
 738+ E2BF
 739+ E2BF
 740+ E2BF              .NoKeyPressed:          ZeroA
 740+ E2BF AF          >                        xor a
 741+ E2C0 32 9B E2                             ld      (LastKeyPressed),a              ; Clear last key pressed
 742+ E2C3
 743+ E2C3
 744+ E2C3              InputName:              SetMemFalse InputChanged
 744+ E2C3 3E FF       >                        ld      a,$FF
 744+ E2C5 32 3B E2    >                        ld      (InputChanged),a
 745+ E2C8 CD BC E1                             call    is_any_key_pressed
 746+ E2CB FE FF                                cp      $FF
 747+ E2CD C8                                   ret     z
 748+ E2CE 4F           .KeyPressed:            ld      c,a
 749+ E2CF 3A 39 E2                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 750+ E2D2 FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 751+ E2D4 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 752+ E2D6 21 BF E0                             ld      hl,ASCII_Map
 753+ E2D9 79                                   ld      a,c
 754+ E2DA ED 31                                add     hl,a
 755+ E2DC 7E                                   ld      a,(hl)
 756+ E2DD FE 41                                cp      "A"
 757+ E2DF 30 09                                jr      nc,.AlphaPressed
 758+ E2E1              ; CAPS and Symbol act as delete for now
 759+ E2E1 FE 23        .DeleteOrEnterOnly      cp      "#"                             ; if space was  pressed (mapped to Hash in ASCII table))
 760+ E2E3 28 31                                jr      z,.SpacePressed                 ; for now we will ignore the shift and just assume delete
 761+ E2E5 FE 3E                                cp      ">"         ; ENTER
 762+ E2E7 28 17                                jr      z,.EnterPressed
 763+ E2E9 C9                                   ret
 764+ E2EA 47           .AlphaPressed:          ld      b,a
 765+ E2EB 3A 39 E2                             ld      a,(InputCursor)
 766+ E2EE 4F                                   ld      c,a
 767+ E2EF 21 19 E2                             ld      hl,InputString
 768+ E2F2 ED 31                                add     hl,a
 769+ E2F4 78                                   ld      a,b
 770+ E2F5 70                                   ld      (hl),b
 771+ E2F6 79                                   ld      a,c
 772+ E2F7 21 39 E2                             ld      hl,InputCursor
 773+ E2FA 34                                   inc     (hl)
 774+ E2FB                                      SetMemTrue InputChanged
 774+ E2FB AF          >                        xor     a
 774+ E2FC 32 3B E2    >                        ld      (InputChanged),a
 775+ E2FF C9                                   ret
 776+ E300 3A 39 E2     .EnterPressed:          ld      a,(InputCursor)
 777+ E303 21 19 E2                             ld      hl,InputString
 778+ E306 ED 31                                add     hl,a
 779+ E308                                      ZeroA
 779+ E308 AF          >                        xor a
 780+ E309 77                                   ld      (hl),a
 781+ E30A                                      SetMemTrue EnterPressed
 781+ E30A AF          >                        xor     a
 781+ E30B 32 3A E2    >                        ld      (EnterPressed),a
 782+ E30E                                      SetMemTrue InputChanged
 782+ E30E AF          >                        xor     a
 782+ E30F 32 3B E2    >                        ld      (InputChanged),a
 783+ E312 CD F7 E0                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 784+ E315 C9                                   ret
 785+ E316 3A 39 E2     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 786+ E319 FE 00                                cp      0                       ; if input is zero length then can not delete
 787+ E31B C8                                   ret     z
 788+ E31C 3D                                   dec     a                       ; move back one and update cursor pos
 789+ E31D 32 39 E2                             ld      (InputCursor),a         ;
 790+ E320 21 19 E2                             ld      hl,InputString          ; now update end of line to null
 791+ E323 ED 31                                add     hl,a                    ; .
 792+ E325                                      ZeroA                           ; .
 792+ E325 AF          >                        xor a
 793+ E326 77                                   ld      (hl),a                  ; .
 794+ E327                                      SetMemTrue InputChanged
 794+ E327 AF          >                        xor     a
 794+ E328 32 3B E2    >                        ld      (InputChanged),a
 795+ E32B C9                                   ret
 796+ E32C
 797+ E32C              TargetMissileTest:      AnyMissilesLeft
 797+ E32C 3A 39 7F    >                        ld      a,(NbrMissiles)
 797+ E32F A7          >                        and     a
 798+ E330                                      JumpIfZero      .ClearTargetting
 798+ E330 CA 47 E3    >                        jp	z,.ClearTargetting
 799+ E333                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 799+ E333 3A 07 81    >                        ld      a,(MissileTargettingFlag)
 799+ E336 E6 80       >                        and     $80
 800+ E338 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 801+ E339 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 802+ E33B CD A2 E1                             call            is_key_pressed              ; .
 803+ E33E C0                                   ret             nz                          ; .
 804+ E33F 3A 07 81     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 805+ E342                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 805+ E342 FE FF       >                        cp     StageMissileNotTargeting
 805+ E344 CA 4D E3    >                        jp      z,.SetTargetting
 806+ E347              .ClearTargetting:       ClearMissileTargetting
 806+ E347 3E FF       >                        ld      a,StageMissileNotTargeting
 806+ E349 32 07 81    >                        ld      (MissileTargettingFlag),a
 807+ E34C C9                                   ret
 808+ E34D              .SetTargetting:         SetMissileTargetting
 808+ E34D 3E FE       >                        ld      a,StageMissileTargeting
 808+ E34F 32 07 81    >                        ld      (MissileTargettingFlag),a
 809+ E352 C9                                   ret
 810+ E353
 811+ E353 AF           MovementKeyTest:        xor     a
 812+ E354 32 70 80                             ld      (CursorKeysPressed),a
 813+ E357 3A 97 7E                             ld      a,(MenuIdMax)
 814+ E35A E6 FC                                and     $FC
 815+ E35C 20 26                                jr      nz,CursorKeys
 816+ E35E 2A 57 E0     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 817+ E361 7E                                   ld      a,(hl)
 818+ E362                                      JumpIfAIsZero ScanDiveKey
 818+ E362 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 818+ E363 CA 71 E3    >                        jp	    z, ScanDiveKey
 819+ E366 3A 70 80                             ld      a,(CursorKeysPressed)
 820+ E369 F6 80                                or      CursorClimb
 821+ E36B 32 70 80                             ld      (CursorKeysPressed),a
 822+ E36E C3 A7 E3                             jp      ScanLeftKey
 823+ E371 2A 55 E0     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 824+ E374 7E                                   ld      a,(hl)
 825+ E375                                      JumpIfAIsZero ScanLeftKey
 825+ E375 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 825+ E376 CA A7 E3    >                        jp	    z, ScanLeftKey
 826+ E379 3A 70 80                             ld      a,(CursorKeysPressed)
 827+ E37C F6 40                                or      CursorDive
 828+ E37E 32 70 80                             ld      (CursorKeysPressed),a
 829+ E381 C3 A7 E3                             jp      ScanLeftKey
 830+ E384 2A 93 E0     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 831+ E387 7E                                   ld      a,(hl)
 832+ E388                                      JumpIfAIsZero ScanCursorDownKey
 832+ E388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 832+ E389 CA 97 E3    >                        jp	    z, ScanCursorDownKey
 833+ E38C 3A 70 80                             ld      a,(CursorKeysPressed)
 834+ E38F F6 80                                or      CursorClimb
 835+ E391 32 70 80                             ld      (CursorKeysPressed),a
 836+ E394 C3 A7 E3                             jp      ScanLeftKey
 837+ E397 2A 95 E0     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 838+ E39A 7E                                   ld      a,(hl)
 839+ E39B                                      JumpIfAIsZero ScanLeftKey
 839+ E39B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 839+ E39C CA A7 E3    >                        jp	    z, ScanLeftKey
 840+ E39F 3A 70 80                             ld      a,(CursorKeysPressed)
 841+ E3A2 F6 40                                or      CursorDive
 842+ E3A4 32 70 80                             ld      (CursorKeysPressed),a
 843+ E3A7 2A 51 E0     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 844+ E3AA 7E                                   ld      a,(hl)
 845+ E3AB                                      JumpIfAIsZero ScanRightKey
 845+ E3AB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 845+ E3AC CA B8 E3    >                        jp	    z, ScanRightKey
 846+ E3AF 3A 70 80                             ld      a,(CursorKeysPressed)
 847+ E3B2 F6 20                                or      CursorLeft
 848+ E3B4 32 70 80                             ld      (CursorKeysPressed),a
 849+ E3B7 C9                                   ret
 850+ E3B8 2A 53 E0     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 851+ E3BB 7E                                   ld      a,(hl)
 852+ E3BC                                      JumpIfAIsZero ScanHomeKey
 852+ E3BC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 852+ E3BD CA C9 E3    >                        jp	    z, ScanHomeKey
 853+ E3C0 3A 70 80                             ld      a,(CursorKeysPressed)
 854+ E3C3 F6 10                                or      CursorRight
 855+ E3C5 32 70 80                             ld      (CursorKeysPressed),a
 856+ E3C8 C9                                   ret
 857+ E3C9 2A 71 E0     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 858+ E3CC 7E                                   ld      a,(hl)
 859+ E3CD                                      JumpIfAIsZero ScanRecentreKey
 859+ E3CD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 859+ E3CE CA DA E3    >                        jp	    z, ScanRecentreKey
 860+ E3D1 3A 70 80                             ld      a,(CursorKeysPressed)
 861+ E3D4 F6 08                                or      CursorHome
 862+ E3D6 32 70 80                             ld      (CursorKeysPressed),a
 863+ E3D9 C9                                   ret
 864+ E3DA 2A 8D E0     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 865+ E3DD 7E                                   ld      a,(hl)
 866+ E3DE                                      ReturnIfAIsZero
 866+ E3DE A7          >                        and     a
 866+ E3DF C8          >                        ret     z
 867+ E3E0 3A 70 80                             ld      a,(CursorKeysPressed)
 868+ E3E3 F6 04                                or      CursorRecenter
 869+ E3E5 32 70 80                             ld      (CursorKeysPressed),a
 870+ E3E8 C9                                   ret
 871+ E3E9
 872+ E3E9
# file closed: ./Hardware/keyboard.asm
1748  E3E9                                  DISPLAY "Keyboard ",BankKeyboard," - Bytes free ",/D, $2000 - ($-KeyboardAddr), " - BankKeyboard"
1749  E3E9                                  ASSERT $-KeyboardAddr <8912, Bank code leaks over 8K boundary
1750  E3E9              ; Bank 101  -----------------------------------------------------------------------------------------------------------------------
1751  E3E9                                  SLOT    SoundAddr
1752  E3E9                                  PAGE    BankSound
1753  E3E9                                  ORG SoundAddr, BankSound
1754  E000                                  INCLUDE "./Hardware/sound.asm"
# file opened: ./Hardware/sound.asm
   1+ E000
   2+ E000              ;-------------------------------------------------------------------------------------------------
   3+ E000              ;--- Equates for sounds
   4+ E000              ;       DEFINE          USETIMER 1
   5+ E000                     DEFINE          DANUBEATTACK 1
   6+ E000                                      IFDEF   USETIMER
   7+ E000 ~            SOUNDSTEPLENGTH             EQU     25
   8+ E000                                      ENDIF
   9+ E000
  10+ E000
  11+ E000              WriteTurboControlA:     MACRO
  12+ E000 ~                                    ld      bc,TURBO_SOUND_NEXT_CONTROL
  13+ E000 ~                                    out     (c),a
  14+ E000                                      ENDM
  15+ E000
  16+ E000              WriteTurboRegisterA:    MACRO   value
  17+ E000 ~                                    WriteTurboControlA
  18+ E000 ~                                    ld      b,$BF
  19+ E000 ~                                    ld      a,value
  20+ E000 ~                                    out     (c),a
  21+ E000                                      ENDM
  22+ E000
  23+ E000              WriteTurboRegister:     MACRO   register,value
  24+ E000 ~                                    ld      a,register
  25+ E000 ~                                    WriteTurboControlA
  26+ E000 ~                                    ld      b,$BF
  27+ E000 ~                                    ld      a,value
  28+ E000 ~                                    out     (c),a
  29+ E000                                      ENDM
  30+ E000
  31+ E000              WriteAToTurboRegister:  MACRO   register
  32+ E000 ~                                    ex      af,af'
  33+ E000 ~                                    ld      a,register
  34+ E000 ~                                    WriteTurboControlA
  35+ E000 ~                                    ld      b, $BF
  36+ E000 ~                                    ex      af,af'
  37+ E000 ~                                    out     (c),a
  38+ E000                                      ENDM
  39+ E000
  40+ E000              SelectAY:               MACRO   chipNbr
  41+ E000 ~                                    ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | chipNbr
  42+ E000 ~                                    WriteTurboControlA
  43+ E000                                      ENDM
  44+ E000
  45+ E000              ;--- Interrupt handler, moved from main code
  46+ E000 3A 84 7E     SoundInterruptHandler:  ld      a,(DELTA)
  47+ E003 21 06 B1                             ld      hl,LAST_DELTA
  48+ E006 BE                                   cp      (hl)
  49+ E007 C4 37 E2     .SpeedChange:           call    nz, UpdateEngineSound
  50+ E00A 3A 87 7E     .NoSpeedChange:         ld      a,(SoundFxToEnqueue)        ; Check for new sound
  51+ E00D FE FF                                cp      $FF
  52+ E00F C4 4C E1                             call    nz,EnqueSound
  53+ E012              .NoNewSound:            IFDEF   USETIMER
  54+ E012 ~                                        ld      hl,SoundChannelTimer
  55+ E012                                      ENDIF
  56+ E012 11 D2 E2                             ld      de,SoundChannelSeq
  57+ E015 06 08                                ld      b,8
  58+ E017 1A           .ResetLoop:             ld      a,(de)                  ; we only update active channels
  59+ E018 FE FF                                cp      $FF
  60+ E01A 28 0A                                jr      z,.NextCounter
  61+ E01C                                      IFDEF   USETIMER
  62+ E01C ~                                        dec     (hl)                    ; so update channel timer
  63+ E01C ~                                        jr      nz,.NextCounter         ; if its not zero then continue
  64+ E01C                                      ENDIF
  65+ E01C 3E 08                                ld      a,8                     ; a now = channel to play
  66+ E01E 90                                   sub     a,b
  67+ E01F                                      IFDEF   USETIMER
  68+ E01F ~                                        push    bc,,de,,hl              ; save state
  69+ E01F                                      ELSE
  70+ E01F C5 D5                                    push    bc,,de
  71+ E021                                      ENDIF
  72+ E021 CD A7 E1                             call    PlaySound               ; play sound
  73+ E024                                      IFDEF   USETIMER
  74+ E024 ~                                        pop     bc,,de,,hl              ; restore state so de = correct timer & hl = correct channel, b = coutner
  75+ E024                                      ELSE
  76+ E024 D1 C1                                    pop     bc,,de              ; restore state so de = correct timer & hl = correct channel, b = coutner
  77+ E026                                      ENDIF
  78+ E026              ; If it went negative new sound update
  79+ E026                                      IFDEF   USETIMER
  80+ E026 ~            .ResetTimer:                ld      a,SOUNDSTEPLENGTH       ; as we fallin to this it will auto update counter
  81+ E026 ~                                        ld      (hl),a                  ; so may take it out of playsound routine
  82+ E026                                      ENDIF
  83+ E026              .NextCounter:
  84+ E026                                      IFDEF   USETIMER
  85+ E026 ~                                        inc     hl
  86+ E026                                      ENDIF
  87+ E026 13                                   inc     de
  88+ E027 10 EE                                djnz    .ResetLoop
  89+ E029 C9                                   ret
  90+ E02A
  91+ E02A
  92+ E02A              ; On entering here a = AY chip to select
  93+ E02A 21 BF FF     DefaultAYChip:          ld      hl,$FFBF            ; h = turbo control, l = turbo register
  94+ E02D 0E FD                                ld      c,$FD               ; bc = h$FD or l$FD
  95+ E02F 11 0E 00                             ld      de,$000E            ; d = value 0, e = counter
  96+ E032 F6 FC                                or      TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
  97+ E034 44                                   ld      b,h                 ; now select chip and set to stereo
  98+ E035 ED 79                                out     (c),a               ; .
  99+ E037 1D           .DefaultLoop:           dec     e                   ; loop down we set E 1 higher
 100+ E038 CA 44 E0                             jp      z,.Complete         ; On zero we complete, we
 101+ E03B 44                                   ld      b,h                 ; Set register to 0
 102+ E03C ED 59                                out     (c),e               ; .
 103+ E03E 45                                   ld      b,l                 ; .
 104+ E03F ED 51                                out     (c),d               ; .
 105+ E041 C3 37 E0     .DefaultDone:           jp      .DefaultLoop        ; and loop
 106+ E044 44           .Complete:              ld      b,h                 ; we set fine tone to 0
 107+ E045 ED 59                                out     (c),e               ; though as volume is 0
 108+ E047 45                                   ld      b,l                 ; it doesn't really
 109+ E048 ED 51                                out     (c),d               ; matter
 110+ E04A C9                                   ret
 111+ E04B
 112+ E04B              ;-- Initialise Audio channels to AY1 noise, AY2 and 3 tone, all channels to volume 0
 113+ E04B
 114+ E04B              ; For each AY channel, set everything to zero, then set up envelope and tone channels.
 115+ E04B              ; for now we are blocking noise channels whilst debugging
 116+ E04B 3E 01        InitAudio:              ld      a, TURBO_CHIP_AY1
 117+ E04D CD 2A E0                             call    DefaultAYChip
 118+ E050                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E050 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 118+ E052             >                        WriteTurboControlA
 118+ E052 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 118+ E055 ED 79       >                        out     (c),a
 118+ E057 06 BF       >                        ld      b,$BF
 118+ E059 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E05B ED 79       >                        out     (c),a
 119+ E05D                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E05D 3E 07       >                        ld      a,TONE_ENABLE
 119+ E05F             >                        WriteTurboControlA
 119+ E05F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 119+ E062 ED 79       >                        out     (c),a
 119+ E064 06 BF       >                        ld      b,$BF
 119+ E066 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E068 ED 79       >                        out     (c),a
 120+ E06A 3E 02                                ld      a, TURBO_CHIP_AY2
 121+ E06C CD 2A E0                             call    DefaultAYChip
 122+ E06F                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E06F 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 122+ E071             >                        WriteTurboControlA
 122+ E071 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 122+ E074 ED 79       >                        out     (c),a
 122+ E076 06 BF       >                        ld      b,$BF
 122+ E078 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E07A ED 79       >                        out     (c),a
 123+ E07C                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E07C 3E 07       >                        ld      a,TONE_ENABLE
 123+ E07E             >                        WriteTurboControlA
 123+ E07E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 123+ E081 ED 79       >                        out     (c),a
 123+ E083 06 BF       >                        ld      b,$BF
 123+ E085 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E087 ED 79       >                        out     (c),a
 124+ E089 3E 03                                ld      a, TURBO_CHIP_AY3
 125+ E08B CD 2A E0                             call    DefaultAYChip
 126+ E08E                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E08E 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 126+ E090             >                        WriteTurboControlA
 126+ E090 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 126+ E093 ED 79       >                        out     (c),a
 126+ E095 06 BF       >                        ld      b,$BF
 126+ E097 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E099 ED 79       >                        out     (c),a
 127+ E09B                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E09B 3E 07       >                        ld      a,TONE_ENABLE
 127+ E09D             >                        WriteTurboControlA
 127+ E09D 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 127+ E0A0 ED 79       >                        out     (c),a
 127+ E0A2 06 BF       >                        ld      b,$BF
 127+ E0A4 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E0A6 ED 79       >                        out     (c),a
 128+ E0A8 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 129+ E0AB 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 130+ E0AE 3E FF                                ld      a,$FF                   ; which means that it
 131+ E0B0 06 08                                ld      b,8                     ; has no data to play
 132+ E0B2 77           .InitLoop:              ld      (hl),a
 133+ E0B3 23                                   inc     hl
 134+ E0B4 10 FC                                djnz    .InitLoop
 135+ E0B6 C9                                   ret
 136+ E0B7
 137+ E0B7              ;Enable with no noise chanels active
 138+ E0B7 3E 01        InitAudioMusic:         ld      a, TURBO_CHIP_AY1
 139+ E0B9 CD 2A E0                             call    DefaultAYChip
 140+ E0BC                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0BC 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 140+ E0BE             >                        WriteTurboControlA
 140+ E0BE 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 140+ E0C1 ED 79       >                        out     (c),a
 140+ E0C3 06 BF       >                        ld      b,$BF
 140+ E0C5 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0C7 ED 79       >                        out     (c),a
 141+ E0C9                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0C9 3E 07       >                        ld      a,TONE_ENABLE
 141+ E0CB             >                        WriteTurboControlA
 141+ E0CB 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 141+ E0CE ED 79       >                        out     (c),a
 141+ E0D0 06 BF       >                        ld      b,$BF
 141+ E0D2 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0D4 ED 79       >                        out     (c),a
 142+ E0D6 3E 02                                ld      a, TURBO_CHIP_AY2
 143+ E0D8 CD 2A E0                             call    DefaultAYChip
 144+ E0DB                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0DB 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 144+ E0DD             >                        WriteTurboControlA
 144+ E0DD 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 144+ E0E0 ED 79       >                        out     (c),a
 144+ E0E2 06 BF       >                        ld      b,$BF
 144+ E0E4 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0E6 ED 79       >                        out     (c),a
 145+ E0E8                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0E8 3E 07       >                        ld      a,TONE_ENABLE
 145+ E0EA             >                        WriteTurboControlA
 145+ E0EA 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 145+ E0ED ED 79       >                        out     (c),a
 145+ E0EF 06 BF       >                        ld      b,$BF
 145+ E0F1 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0F3 ED 79       >                        out     (c),a
 146+ E0F5 3E 03                                ld      a, TURBO_CHIP_AY3
 147+ E0F7 CD 2A E0                             call    DefaultAYChip
 148+ E0FA                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E0FA 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 148+ E0FC             >                        WriteTurboControlA
 148+ E0FC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 148+ E0FF ED 79       >                        out     (c),a
 148+ E101 06 BF       >                        ld      b,$BF
 148+ E103 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E105 ED 79       >                        out     (c),a
 149+ E107                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E107 3E 07       >                        ld      a,TONE_ENABLE
 149+ E109             >                        WriteTurboControlA
 149+ E109 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 149+ E10C ED 79       >                        out     (c),a
 149+ E10E 06 BF       >                        ld      b,$BF
 149+ E110 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E112 ED 79       >                        out     (c),a
 150+ E114 C9                                   ret
 151+ E115
 152+ E115              GetSoundAAddressToHL:   MACRO
 153+ E115 ~                                    ld      hl,SFXPointerList
 154+ E115 ~                                    add     a,a
 155+ E115 ~                                    add     hl,a
 156+ E115 ~                                    ld      a,(hl)
 157+ E115 ~                                    inc     hl
 158+ E115 ~                                    ld      h,(hl)
 159+ E115 ~                                    ld      l,a
 160+ E115                                      ENDM
 161+ E115
 162+ E115              SetIXToChannelA:        MACRO
 163+ E115 ~                                    ld      hl,SoundChannelSeq
 164+ E115 ~                                    add     hl,a
 165+ E115 ~                                    ld      ix,hl
 166+ E115                                      ENDM
 167+ E115
 168+ E115              SelectChannelMapping:   MACRO
 169+ E115 ~                                    ld      hl,SoundChipMapNumber
 170+ E115 ~                                    add     hl,a
 171+ E115 ~                                    ld      a,(hl)
 172+ E115                                      ENDM
 173+ E115
 174+ E115              ; This version ignores nooise and envelope setup so its always 0 atack hold and
 175+ E115              ; noise is pre-configured in channel
 176+ E115              ; The channel always holds a pointer to the next block of data to play
 177+ E115 DD 7E 18     PlayChannelD:           ld      a,(ix+SoundDataPointerOffset)    ; set hl to current data block
 178+ E118 6F                                   ld      l,a                              ; for SFX step
 179+ E119 DD 7E 19                             ld      a,(ix+SoundDataPointerOffset1)   ;
 180+ E11C 67                                   ld      h,a                              ;
 181+ E11D 7E                                   ld      a,(hl)                           ; get fine
 182+ E11E                                      WriteAToTurboRegister d
 182+ E11E 08          >                        ex      af,af'
 182+ E11F 7A          >                        ld      a,d
 182+ E120             >                        WriteTurboControlA
 182+ E120 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 182+ E123 ED 79       >                        out     (c),a
 182+ E125 06 BF       >                        ld      b, $BF
 182+ E127 08          >                        ex      af,af'
 182+ E128 ED 79       >                        out     (c),a
 183+ E12A 14                                   inc     d                                ; Move to channel coarse
 184+ E12B 23                                   inc     hl
 185+ E12C 7E                                   ld      a,(hl)
 186+ E12D                                      WriteAToTurboRegister d
 186+ E12D 08          >                        ex      af,af'
 186+ E12E 7A          >                        ld      a,d
 186+ E12F             >                        WriteTurboControlA
 186+ E12F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 186+ E132 ED 79       >                        out     (c),a
 186+ E134 06 BF       >                        ld      b, $BF
 186+ E136 08          >                        ex      af,af'
 186+ E137 ED 79       >                        out     (c),a
 187+ E139 7A                                   ld      a,d
 188+ E13A C6 07                                add     a,7
 189+ E13C 57                                   ld      d,a
 190+ E13D 23                                   inc     hl                               ; Get Volume
 191+ E13E 7E                                   ld      a,(hl)
 192+ E13F                                      WriteAToTurboRegister d
 192+ E13F 08          >                        ex      af,af'
 192+ E140 7A          >                        ld      a,d
 192+ E141             >                        WriteTurboControlA
 192+ E141 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 192+ E144 ED 79       >                        out     (c),a
 192+ E146 06 BF       >                        ld      b, $BF
 192+ E148 08          >                        ex      af,af'
 192+ E149 ED 79       >                        out     (c),a
 193+ E14B C9                                   ret
 194+ E14C
 195+ E14C              ;--- Take the current sound to play, Put it in a noise or tone channel (if bit 1 is clear is a tone only)
 196+ E14C 3A 87 7E     EnqueSound:             ld      a,(SoundFxToEnqueue)                ; Get Sound FX to Enque
 197+ E14F                                      JumpIfAGTENusng SFXEndOfList, .InvalidSound ; Invalid sounds get discarded quickly
 197+ E14F FE 01       >                        cp     SFXEndOfList
 197+ E151 D2 A1 E1    >                        jp		nc,.InvalidSound
 198+ E154 5F           .GetSoundData:          ld      e,a                                 ; save SoundFxToEnqeue
 199+ E155 E6 01                                and     $01                                 ; even numbers are tone only (Including 0)
 200+ E157 20 12                                jr      nz,.FindFreeNoiseChannel
 201+ E159 21 D4 E2     .FindFreeToneChannel:   ld      hl,SoundChannelSeq + 2              ; so we start at the first tone channel
 202+ E15C 16 FF                                ld      d,$FF                               ; d = marker for free slot cp d will be faster in the loop
 203+ E15E 0E 02                                ld      c,2                                 ; c= current slot
 204+ E160 06 07                                ld      b,7                                 ; b = nbr of slots
 205+ E162 7E           .ToneScanLoop:          ld      a,(hl)                              ; is channel occupied
 206+ E163 BA                                   cp      d
 207+ E164 28 16                                jr      z,.SaveSoundId                      ; if its free then move forward
 208+ E166 0C                                   inc     c                                   ; c is hunting for a free channel
 209+ E167 23                                   inc     hl                                  ; move tonext address in channel list
 210+ E168 10 F8                                djnz    .ToneScanLoop
 211+ E16A C9           .NoFreeSlot:            ret                                         ; no free slot, leave sound enqued
 212+ E16B 21 D2 E2     .FindFreeNoiseChannel:  ld      hl,SoundChannelSeq                  ; We only have 2 noise channels so no need to
 213+ E16E 0E 00                                ld      c,0                                 ; do a complex loop
 214+ E170 7E                                   ld      a,(hl)
 215+ E171 16 FF                                ld      d,$FF                               ; d = marker for free slot
 216+ E173 BA                                   cp      d
 217+ E174 28 06                                jr      z,.SaveSoundId
 218+ E176 23                                   inc     hl
 219+ E177 7E                                   ld      a,(hl)
 220+ E178 BA                                   cp      d
 221+ E179 C0           .NoNoiseSlot:           ret     nz                                  ; no free slot, leave sound enqued
 222+ E17A 0E 01        .NoiseChannel2:         ld      c,1                                 ; So we have channel 1 free
 223+ E17C 7B           .SaveSoundId:           ld      a,e                                 ; get back sound id
 224+ E17D                                      GetSoundAAddressToHL                        ; hl = pointer to sfx data
 224+ E17D 21 10 E3    >                        ld      hl,SFXPointerList
 224+ E180 87          >                        add     a,a
 224+ E181 ED 31       >                        add     hl,a
 224+ E183 7E          >                        ld      a,(hl)
 224+ E184 23          >                        inc     hl
 224+ E185 66          >                        ld      h,(hl)
 224+ E186 6F          >                        ld      l,a
 225+ E187 EB                                   ex      de,hl                               ; save pointer to data also makes loading to (ix) easier
 226+ E188 21 D2 E2     .SetIXToChannelPointer: ld      hl,SoundChannelSeq                  ; Get the sequence for the
 227+ E18B 79                                   ld      a,c                                 ; respective channel
 228+ E18C ED 31                                add     hl,a                                ; that we are looking at
 229+ E18E E5 DD E1                             ld      ix,hl                               ; now we can use indexed access
 230+ E191 EB           .GetSFXDataBack:        ex      de,hl                               ; hl = sound fx again
 231+ E192              .LoadSeqCount           ZeroA
 231+ E192 AF          >                        xor a
 232+ E193 DD 77 00                             ld      (ix+0),a                            ; set SoundChannelSeq[channel] to 0 as its starting
 233+ E196 7E                                   ld      a,(hl)                              ; get the nbr of steps
 234+ E197 DD 77 08                             ld      (ix+SoundLastSeqOffset),a           ; load SoundChannelLastSeq[channel]
 235+ E19A                                      IFDEF   USETIMER
 236+ E19A ~                                        ld      a,1                             ; for now we have separate timers, we enque with 1 so the loops starts immediatly
 237+ E19A ~                                        ld      (ix+SoundTimerOffset),a         a; load SoundChannelTimer[channel] with duration
 238+ E19A                                      ENDIF
 239+ E19A 23                                   inc     hl                                  ; move hl to first byte of data block
 240+ E19B DD 75 18                             ld      (ix+SoundDataPointerOffset),l       ; load SoundDataPointer[channel] with current data set
 241+ E19E DD 74 19                             ld      (ix+SoundDataPointerOffset1),h
 242+ E1A1 3E FF        .InvalidSound:          ld      a,$FF
 243+ E1A3 32 87 7E                             ld      (SoundFxToEnqueue),a                ; ClearFXEnqeue
 244+ E1A6 C9                                   ret
 245+ E1A7
 246+ E1A7 5F           PlaySound:              ld      e,a                                 ; save channel number
 247+ E1A8                                      SetIXToChannelA                             ; We trap for debugging
 247+ E1A8 21 D2 E2    >                        ld      hl,SoundChannelSeq
 247+ E1AB ED 31       >                        add     hl,a
 247+ E1AD E5 DD E1    >                        ld      ix,hl
 248+ E1B0 DD 7E 00     .GetCurrentSeq:         ld      a,(ix+0)                            ; for optimisation we
 249+ E1B3 FE FF                                cp      $FF                                 ; will never call this if its $FF
 250+ E1B5 C8                                   ret     z                                   ; its just a belt n braces
 251+ E1B6              ;--- Play Next Step, we select chip, select channel, set up tone then step, timer & pointer
 252+ E1B6 DD 7E 28     .SelectChip             ld      a,(ix+SoundChipMapOffset)           ; get the mapping. bits 1 and 0 hold
 253+ E1B9 57                                   ld      d,a                                 ; .
 254+ E1BA F6 FC                                or      %11111100                           ; .
 255+ E1BC                                      WriteTurboControlA                          ; .
 255+ E1BC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 255+ E1BF ED 79       >                        out     (c),a
 256+ E1C1 DD 7E 08     .CheckLastSeq:          ld      a,(ix+SoundLastSeqOffset)           ; get last in sequence
 257+ E1C4                                      JumpIfALTNusng  (ix+0),.CompletedSFX        ; if we have gone beyond last then done
 257+ E1C4 DD BE 00    >                        cp      (ix+0)
 257+ E1C7 DA E9 E1    >                        jp		c, .CompletedSFX
 258+ E1CA 7A           .PlayStep:              ld      a,d                                 ; Get the channel number
 259+ E1CB E6 30                                and     %00110000
 260+ E1CD ED 23                                swapnib                                     ; get channel to lower bits
 261+ E1CF 57                                   ld      d,a
 262+ E1D0 CD 15 E1                             call    PlayChannelD                        ; play channel D step ix is pointer to correct soundchannelseq
 263+ E1D3 DD 34 00     .UpdateStep:            inc     (ix+0)                              ; next stepssss
 264+ E1D6                                      IFDEF   USETIMER
 265+ E1D6 ~            .UpdateTimer:               ld      a,SOUNDSTEPLENGTH
 266+ E1D6 ~                                        ld      (ix+SoundTimerOffset),a
 267+ E1D6                                      ENDIF
 268+ E1D6 DD 5E 18     .UpdateStepPointer:     ld      e,(ix+SoundDataPointerOffset)       ; move pointer on by 7 bytes
 269+ E1D9 DD 56 19                             ld      d,(ix+SoundDataPointerOffset+1)     ;
 270+ E1DC EB                                   ex      de,hl                               ; hl = current pointer
 271+ E1DD 3E 03                                ld      a,SFXBlockLength                    ; move to next block
 272+ E1DF ED 31                                add     hl,a                                ; .
 273+ E1E1 EB                                   ex      de,hl                               ; move to de for load back
 274+ E1E2 DD 73 18                             ld      (ix+SoundDataPointerOffset),e       ;
 275+ E1E5 DD 72 19                             ld      (ix+SoundDataPointerOffset+1),d     ;
 276+ E1E8 C9                                   ret
 277+ E1E9 DD 7E 28     .CompletedSFX:          ld      a,(ix+SoundChipMapOffset)           ; channel number is in upper bits
 278+ E1EC ED 23                                swapnib                                     ; so we need it in
 279+ E1EE E6 03                                and     %00000011                           ; lower for selecting volume register
 280+ E1F0 C6 08                                add     a,CHANNEL_A_AMPLITUDE               ; select the register
 281+ E1F2                                      WriteTurboRegisterA 0                       ; set volume to 0
 281+ E1F2             >                        WriteTurboControlA
 281+ E1F2 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 281+ E1F5 ED 79       >                        out     (c),a
 281+ E1F7 06 BF       >                        ld      b,$BF
 281+ E1F9 3E 00       >                        ld      a,0
 281+ E1FB ED 79       >                        out     (c),a
 282+ E1FD                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 282+ E1FD 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 282+ E1FF             >                        WriteTurboControlA
 282+ E1FF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 282+ E202 ED 79       >                        out     (c),a
 282+ E204 06 BF       >                        ld      b,$BF
 282+ E206 3E 00       >                        ld      a,0
 282+ E208 ED 79       >                        out     (c),a
 283+ E20A                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 283+ E20A 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 283+ E20C             >                        WriteTurboControlA
 283+ E20C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 283+ E20F ED 79       >                        out     (c),a
 283+ E211 06 BF       >                        ld      b,$BF
 283+ E213 3E 00       >                        ld      a,0
 283+ E215 ED 79       >                        out     (c),a
 284+ E217                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E217 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 284+ E219             >                        WriteTurboControlA
 284+ E219 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 284+ E21C ED 79       >                        out     (c),a
 284+ E21E 06 BF       >                        ld      b,$BF
 284+ E220 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E222 ED 79       >                        out     (c),a
 285+ E224                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E224 3E 07       >                        ld      a,TONE_ENABLE
 285+ E226             >                        WriteTurboControlA
 285+ E226 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 285+ E229 ED 79       >                        out     (c),a
 285+ E22B 06 BF       >                        ld      b,$BF
 285+ E22D 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E22F ED 79       >                        out     (c),a
 286+ E231 3E FF                                ld      a,$FF                               ; set sequence to FF to denote
 287+ E233 DD 77 00                             ld      (ix+0),a                            ; channel is now free
 288+ E236 C9                                   ret
 289+ E237
 290+ E237              ; Engine Sound is always a priority so gets a dedicated channel
 291+ E237              ; this is only called if delta has changed
 292+ E237              UpdateEngineSound:      SelectAY TURBO_CHIP_AY1
 292+ E237 3E FD       >                        ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | TURBO_CHIP_AY1
 292+ E239             >                        WriteTurboControlA
 292+ E239 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 292+ E23C ED 79       >                        out     (c),a
 293+ E23E 3A 84 7E     .SetUpTone:             ld      a,(DELTA)
 294+ E241 A7                                   and     a
 295+ E242 CA 7D E2                             jp      z,.EngineOff    ; if speed is 0 the engine off as a = 0
 296+ E245 21 F3 08                             ld      hl,$08F3        ; base tone - delta * 15
 297+ E248 57                                   ld      d,a             ; we subtract as the tone is the
 298+ E249 1E 0F                                ld      e,15            ; time between pulses
 299+ E24B B7 ED 52                             sub     hl,de
 300+ E24E 3E 00                                ld      a,CHANNEL_A_FINE
 301+ E250 01 FD FF                             ld      bc,$FFFD
 302+ E253 ED 79                                out     (c),a
 303+ E255 06 BF                                ld      b,$BF
 304+ E257 ED 61                                out     (c),h
 305+ E259 3C                                   inc     a
 306+ E25A 06 FF                                ld      b,$FF
 307+ E25C ED 79                                out     (c),a
 308+ E25E 06 BF                                ld      b,$BF
 309+ E260 ED 69                                out     (c),l
 310+ E262 3A 84 7E     .SetUpNoise:            ld      a,(DELTA)       ; l = DELTA / 4
 311+ E265 CB 3F                                srl     a
 312+ E267 57                                   ld      d,a             ;
 313+ E268 CB 3F                                srl     a
 314+ E26A CB 3F                                srl     a               ; a = DELTA / 8
 315+ E26C C6 1F                                add     a, $1F          ; more noise higher the speed
 316+ E26E 06 FF                                ld      b,$FF
 317+ E270 1E 06                                ld      e,NOISE_PERIOD
 318+ E272 ED 59                                out     (c),e
 319+ E274 06 BF                                ld      b,$BF
 320+ E276 ED 79                                out     (c),a
 321+ E278 7A                                   ld      a,d             ; get back delta / 4
 322+ E279 C6 05                                add     a,5
 323+ E27B CB 3F                                srl     a               ; calculate a scaled from 2 to 7
 324+ E27D 1E 08        .EngineOff:             ld      e,CHANNEL_A_AMPLITUDE
 325+ E27F 06 FF                                ld      b,$FF
 326+ E281 ED 59                                out     (c),e
 327+ E283 06 BF                                ld      b,$BF
 328+ E285 ED 79                                out     (c),a
 329+ E287                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 329+ E287 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 329+ E289             >                        WriteTurboControlA
 329+ E289 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 329+ E28C ED 79       >                        out     (c),a
 329+ E28E 06 BF       >                        ld      b,$BF
 329+ E290 3E 00       >                        ld      a,0
 329+ E292 ED 79       >                        out     (c),a
 330+ E294                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 330+ E294 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 330+ E296             >                        WriteTurboControlA
 330+ E296 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 330+ E299 ED 79       >                        out     (c),a
 330+ E29B 06 BF       >                        ld      b,$BF
 330+ E29D 3E 00       >                        ld      a,0
 330+ E29F ED 79       >                        out     (c),a
 331+ E2A1                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2A1 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 331+ E2A3             >                        WriteTurboControlA
 331+ E2A3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 331+ E2A6 ED 79       >                        out     (c),a
 331+ E2A8 06 BF       >                        ld      b,$BF
 331+ E2AA 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2AC ED 79       >                        out     (c),a
 332+ E2AE                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2AE 3E 07       >                        ld      a,TONE_ENABLE
 332+ E2B0             >                        WriteTurboControlA
 332+ E2B0 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 332+ E2B3 ED 79       >                        out     (c),a
 332+ E2B5 06 BF       >                        ld      b,$BF
 332+ E2B7 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2B9 ED 79       >                        out     (c),a
 333+ E2BB 3A 84 7E                             ld      a,(DELTA)
 334+ E2BE 32 06 B1                             ld      (LAST_DELTA),a
 335+ E2C1 C9                                   ret
 336+ E2C2
 337+ E2C2 53 6F 75 6E  SoundLabel              DB      "Sound Channels  "
 337+ E2C6 64 20 43 68
 337+ E2CA 61 6E 6E 65
 337+ E2CE 6C 73 20 20
 338+ E2D2 00 00 00...  SoundChannelSeq         DS      8   ; The current step in the SFX or $FX for empty
 339+ E2DA 00 00 00...  SoundChannelLastSeq     DS      8   ; A copy of SFX length to save an extra lookup, $FF means 1 step always on, $00 means off
 340+ E2E2 00 00 00...  SoundChannelTimer       DS      8   ; The count down to next sequence
 341+ E2EA 00 00 00...  SoundDataPointer        DS      2*8 ; pointer to current sound step
 342+ E2FA              ;                  Channel/Chip B/1  C/1  A/2  B/2  C/2  A/3  B/3  C/3
 343+ E2FA 11 21        SoundChipMapNumber      DB      $10 | TURBO_CHIP_AY1, $20 | TURBO_CHIP_AY1
 344+ E2FC 02 32                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY2 | $20 | TURBO_CHIP_AY2
 345+ E2FE 02 33                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY3 | $20 | TURBO_CHIP_AY3
 346+ E300              SoundLastSeqOffset      EQU     8
 347+ E300              SoundTimerOffset        EQU     SoundLastSeqOffset + 8
 348+ E300              SoundDataPointerOffset  EQU     SoundTimerOffset + 8
 349+ E300              SoundDataPointerOffset1 EQU     SoundTimerOffset + 9
 350+ E300              SoundChipMapOffset      EQU     SoundDataPointerOffset + 16
 351+ E300              ;Chip map is            bits 5,4 channel letter A = 0 B =1 C = 2    1,0 Chip Number
 352+ E300              ;Mapping                0 = 1B, 1 = 1C, 3=2A, 4 = 2B, 5=2C, 6 = 3A, 7 = 3B, 8 = 3C
 353+ E300              ;                       Chip 1 Engine, noise channel but engine noise period is priority
 354+ E300              ;                       Chip 2 General FX, no noise
 355+ E300              ;                       Chip 3 General FX, no noise
 356+ E300
 357+ E300              ;--- Data sets for Sound
 358+ E300              ;--- Sound Channels are 0 to 9 AY1 A B C AY2 A B C AY3 A B C
 359+ E300              ;--- Sounds can not enqueu, the find a free slot & SoundFxtoEnqueue gets zeroed or it gets left
 360+ E300              ;--- AY1 channel 1 is reserved for engine noise as its calculated on the fly
 361+ E300              ; Predefined value for each channel to load to $FFFD before setting up tone
 362+ E300              ; Hcops a copy of the 3 chips register 7
 363+ E300
 364+ E300
 365+ E300              ; StepLength            DB      1   ; $FF = 1 step forever else number of entries in StepListArray
 366+ E300              ; StepListArray
 367+ E300              ;     TonePitch         DW      4 bits unused + 12 bits
 368+ E300              ;     NoisePitch        DB      5 bit or $FF for no noise
 369+ E300              ;     Volume            DB      0 to 15
 370+ E300              ;     EnvelopePeriod    DW      0
 371+ E300              ;     WaveForm          DB      0
 372+ E300
 373+ E300              ; SFX Format
 374+ E300              ; SFXPointerList - Odd numbers are tone, Even Numbers have noise too, optimisation for channel handling
 375+ E300 53 6F 75 6E  SoundLabelSFX   DB      "Sound Data      "
 375+ E304 64 20 44 61
 375+ E308 74 61 20 20
 375+ E30C 20 20 20 20
 376+ E310 19 E3        SFXPointerList  dw      SFXLaser
 377+ E312              SFXEndOfList    EQU     1
 378+ E312              SFXBlockLength  EQU     3
 379+ E312              SFXFineOffset   EQU     0
 380+ E312              SFXCorseOffset  EQU     1
 381+ E312              SFXVolOffset    EQU     2
 382+ E312              ;                       Step Count
 383+ E312 4C 61 73 65  SoundLaser      DB      "Laser  "
 383+ E316 72 20 20
 384+ E319 0B           SFXLaser        db      11
 385+ E31A              ;                       Tone
 386+ E31A              ;                      Fine Crs  Vol
 387+ E31A 5F 00 0E                    db      $5F, $00, $0E
 388+ E31D 39 00 0E                    db      $39, $00, $0E
 389+ E320 47 00 0D                    db      $47, $00, $0D
 390+ E323 5E 00 0C                    db      $5E, $00, $0C
 391+ E326 6E 10 0A                    db      $6E, $10, $0A
 392+ E329 76 00 08                    db      $76, $00, $08
 393+ E32C 76 00 07                    db      $76, $00, $07
 394+ E32F 06 01 06                    db      $06, $01, $06
 395+ E332 2E 01 03                    db      $2E, $01, $03
 396+ E335 16 01 03                    db      $16, $01, $03
 397+ E338 03 00 01                    db      $03, $00, $01
 398+ E33B
 399+ E33B              ;
 400+ E33B              ;
 401+ E33B              ;Laser1:          db 14,14,13,12,10, 8, 7, 6, 3, 1
 402+ E33B              ;LaserFrameCount  db  5, 5, 5, 5, 5, 5, 5, 5, 5, 5
 403+ E33B              ;LaserLength:     db $-LaserFrameCount
 404+ E33B              ;LaserTone:       dw $05F, $089, $097, $0AE, $0CE, $0B6, $0E6, $106, $13E, $126, $136
 405+ E33B
 406+ E33B C5 E5        DanubePointer1:         DW BlueDanube1
 407+ E33D DA E6        DanubePointer2:         DW BlueDanube2
 408+ E33F EF E7        DanubePointer3:         DW BlueDanube3
 409+ E341 04 E9        DanubePointer4:         DW BlueDanube4
 410+ E343 19 EA        DanubePointer5:         DW BlueDanube5
 411+ E345 2E EB        DanubePointer6:         DW BlueDanube6
 412+ E347              ; Sustain reduces volume each cycle, playing a note resets it
 413+ E347 00           DanubeVolume1:          DB 0
 414+ E348 02           DanubeChip1:            DB TURBO_CHIP_AY2
 415+ E349 00           DanubeVolume2:          DB 0
 416+ E34A 02           DanubeChip2:            DB TURBO_CHIP_AY2
 417+ E34B 00           DanubeVolume3:          DB 0
 418+ E34C 02           DanubeChip3:            DB TURBO_CHIP_AY2
 419+ E34D 00           DanubeVolume4:          DB 0
 420+ E34E 03           DanubeChip4:            DB TURBO_CHIP_AY3
 421+ E34F 00           DanubeVolume5:          DB 0
 422+ E350 03           DanubeChip5:            DB TURBO_CHIP_AY3
 423+ E351 00           DanubeVolume6:          DB 0
 424+ E352 03           DanubeChip6:            DB TURBO_CHIP_AY3
 425+ E353              PointerVolOffset:       EQU 12
 426+ E353              PointerChipOffset:      EQU 13
 427+ E353 00 00        DanubeCounter:          DW 0
 428+ E355              DanubeMax:              EQU BlueDanube2 - BlueDanube1 +1
 429+ E355 16 01        DanubeMaxMem:           DW  DanubeMax
 430+ E357 0F           DanubeVolume:           DB $0F
 431+ E358 08           DanubePace:             DB 8
 432+ E359 08           DanubeTimer:            DB 8
 433+ E35A 00 00        DanubeAttackEnvelope    DW $0000
 434+ E35C
 435+ E35C F6 FC        SelectDanubeAYa:        or TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
 436+ E35E                                      WriteTurboControlA
 436+ E35E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 436+ E361 ED 79       >                        out     (c),a
 437+ E363 C9                                   ret
 438+ E364
 439+ E364 08           WriteAToTurboRegisterD: ex      af,af'
 440+ E365 7A                                   ld      a,d
 441+ E366                                      WriteTurboControlA
 441+ E366 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 441+ E369 ED 79       >                        out     (c),a
 442+ E36B 06 BF                                ld      b,$BF
 443+ E36D 08                                   ex      af,af'
 444+ E36E ED 79                                out     (c),a
 445+ E370 C9                                   ret
 446+ E371
 447+ E371              SetChannelAVolume0:     WriteTurboControlA
 447+ E371 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 447+ E374 ED 79       >                        out     (c),a
 448+ E376 06 BF                                ld      b,$BF
 449+ E378                                      ZeroA
 449+ E378 AF          >                        xor a
 450+ E379 ED 79                                out     (c),a
 451+ E37B C9                                   ret
 452+ E37C
 453+ E37C 7A           SetChannelDNoteAtHL:    ld      a,d                 ; a is now 0 to 2
 454+ E37D CB 27                                sla     a                   ; multiply by 2 so now 0, 2, 4
 455+ E37F F5                                   push    af                  ; save fine adjust register nbr
 456+ E380                                      WriteTurboControlA          ; Send out fine adjust
 456+ E380 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 456+ E383 ED 79       >                        out     (c),a
 457+ E385 06 BF                                ld      b,$BF
 458+ E387 7E                                   ld      a,(hl)              ; get fine note
 459+ E388 ED 79                                out     (c),a               ; write fine note
 460+ E38A F1                                   pop     af                  ; get back fine adjust register
 461+ E38B 3C                                   inc     a
 462+ E38C                                      WriteTurboControlA
 462+ E38C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 462+ E38F ED 79       >                        out     (c),a
 463+ E391 23                                   inc     hl                  ; move to coarse value
 464+ E392 06 BF                                ld      b,$BF
 465+ E394 7E                                   ld      a,(hl)
 466+ E395 ED 79                                out     (c),a
 467+ E397                                      ;IFDEF   DANUBEATTACK
 468+ E397              .SetAttack:             ;    ld      hl,(DanubeAttackEnvelope)
 469+ E397                                      ;    ld      a,ENVELOPE_PERIOD_FINE
 470+ E397                                      ;    WriteTurboControlA
 471+ E397                                      ;    ld      b,$BF
 472+ E397                                      ;    ld      a,l
 473+ E397                                      ;    out     (c),a
 474+ E397                                      ;    ld      a,ENVELOPE_PERIOD_COARSE
 475+ E397                                      ;    WriteTurboControlA
 476+ E397                                      ;    ld      b,$BF
 477+ E397                                      ;    ld      a,h
 478+ E397                                      ;    out     (c),a
 479+ E397                                      ;ENDIF
 480+ E397 7A           .SetVolume:             ld      a,d                 ; get back channel
 481+ E398 C6 08                                add     a,8
 482+ E39A                                      WriteTurboControlA
 482+ E39A 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 482+ E39D ED 79       >                        out     (c),a
 483+ E39F 06 BF                                ld      b,$BF
 484+ E3A1 3A 57 E3                             ld      a,(DanubeVolume)    ; could put in ixh but we have plenty of cycles
 485+ E3A4 ED 79                                out     (c),a
 486+ E3A6 C9                                   ret
 487+ E3A7
 488+ E3A7 DD 7E 06     SustainNote:            ld      a,(ix+6)
 489+ E3AA 3D                                   dec     a
 490+ E3AB 20 02                                jr      nz,.MinNoteSkip
 491+ E3AD 3E 01                                ld      a,1
 492+ E3AF DD 77 0C     .MinNoteSkip:           ld      (ix+PointerVolOffset),a
 493+ E3B2 78                                   ld      a,b          ; get back channel which is passed in via b
 494+ E3B3 C6 08                                add     a,8
 495+ E3B5                                      WriteTurboControlA
 495+ E3B5 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 495+ E3B8 ED 79       >                        out     (c),a
 496+ E3BA 06 BF                                ld      b,$BF
 497+ E3BC DD 7E 0C                             ld      a,(ix+PointerVolOffset)
 498+ E3BF ED 79                                out     (c),a
 499+ E3C1                                      IFDEF   DANUBEATTACK
 500+ E3C1 3E 0B        .SetAttack:                 ld      a,ENVELOPE_PERIOD_FINE
 501+ E3C3                                          WriteTurboControlA
 501+ E3C3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 501+ E3C6 ED 79       >                        out     (c),a
 502+ E3C8 06 BF                                    ld      b,$BF
 503+ E3CA                                          ZeroA
 503+ E3CA AF          >                        xor a
 504+ E3CB ED 79                                    out     (c),a
 505+ E3CD 3E 0C                                    ld      a,ENVELOPE_PERIOD_COARSE
 506+ E3CF                                          WriteTurboControlA
 506+ E3CF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 506+ E3D2 ED 79       >                        out     (c),a
 507+ E3D4 06 BF                                    ld      b,$BF
 508+ E3D6                                          ZeroA
 508+ E3D6 AF          >                        xor a
 509+ E3D7 ED 79                                    out     (c),a
 510+ E3D9                                      ENDIF
 511+ E3D9 C9                                   ret
 512+ E3DA
 513+ E3DA
 514+ E3DA              ; IN iyh = channel number, a = note, ix = pointer to danubepointer table corresponding to guitar string
 515+ E3DA DD 7E 0D     PlayDanubeNote:         ld      a,(ix+PointerChipOffset)
 516+ E3DD C5                                   push    bc
 517+ E3DE CD 5C E3                             call    SelectDanubeAYa
 518+ E3E1 C1                                   pop     bc
 519+ E3E2 DD 7E 00                             ld      a,(ix+0)
 520+ E3E5 6F                                   ld      l,a
 521+ E3E6 DD 7E 01                             ld      a,(ix+1)
 522+ E3E9 67                                   ld      h,a
 523+ E3EA 7E                                   ld      a,(hl)
 524+ E3EB A7                                   and     a
 525+ E3EC 28 26                                jr      z,  .NoNote
 526+ E3EE FE FF                                cp      $FF
 527+ E3F0 C8                                   ret     z
 528+ E3F1                                      ;jp      z,SustainNote
 529+ E3F1 21 1D E5                             ld      hl, TonesPitch
 530+ E3F4 5F                                   ld      e,a         ; save a
 531+ E3F5 E6 F0                                and     $F0         ; load octave to d
 532+ E3F7 ED 23                                swapnib             ;
 533+ E3F9 57                                   ld      d,a         ;
 534+ E3FA 7B                                   ld      a,e         ; get a back
 535+ E3FB 1E 0C                                ld      e,12        ; 12 semi tones so mul by 12
 536+ E3FD ED 30                                mul                 ;
 537+ E3FF E6 0F                                and     $0F         ; get semi tone
 538+ E401 EB                                   ex      de,hl       ; hl = octave * 12 + semi tone
 539+ E402 ED 31                                add     hl,a        ; .
 540+ E404                                      ShiftHLLeft1        ; multiply by 2 as we have 2 bytes per tone
 540+ E404 CB 25       >			   sla l
 540+ E406 CB 14       >			   rl  h
 541+ E408 11 1D E5                             ld      de,TonesPitch
 542+ E40B 19                                   add     hl,de       ; now we are pointing at table
 543+ E40C 50                                   ld      d,b         ; get channel number
 544+ E40D CD 7C E3                             call    SetChannelDNoteAtHL ; leaves with A = volume note
 545+ E410 DD 77 0C                             ld      (ix+PointerVolOffset),a    ;
 546+ E413 C9                                   ret
 547+ E414 78           .NoNote:                ld      a,b         ; a= channel number 0 to 3
 548+ E415 C6 08                                add     8           ; adjust to volume register
 549+ E417 CD 71 E3     .NoNoteOK               call    SetChannelAVolume0
 550+ E41A C9                                   ret
 551+ E41B
 552+ E41B 3A 59 E3     PlayDanube:             ld      a,(DanubeTimer)
 553+ E41E 3D                                   dec     a
 554+ E41F 28 04                                jr      z,.PlaySequence
 555+ E421 32 59 E3                             ld      (DanubeTimer),a
 556+ E424 C9                                   ret
 557+ E425 06 06        .PlaySequence:          ld      b,6
 558+ E427 DD 21 3B E3                          ld      ix,DanubePointer1
 559+ E42B 0E 00                                ld      c,0
 560+ E42D C5           .ChannelLoop:           push    bc
 561+ E42E 41                                   ld      b,c
 562+ E42F CD DA E3                             call    PlayDanubeNote
 563+ E432 C1                                   pop     bc
 564+ E433 DD 23                                inc     ix
 565+ E435 DD 23                                inc     ix
 566+ E437 0C                                   inc     c
 567+ E438 79                                   ld      a,c
 568+ E439 FE 03                                cp      3
 569+ E43B 20 02                                jr      nz,.SkipChannelMax
 570+ E43D 0E 00                                ld      c,0
 571+ E43F 10 EC        .SkipChannelMax:        djnz    .ChannelLoop
 572+ E441 C3 AE E4                             jp      UpdatePointers
 573+ E444              ;
 574+ E444              .sPlaySequence:
 575+ E444 3E 02        .PlayChannel1:          ld      a,TURBO_CHIP_AY2
 576+ E446 CD 5C E3                             call    SelectDanubeAYa
 577+ E449 DD 21 3B E3                          ld      ix,DanubePointer1
 578+ E44D DD 7E 00                             ld      a,(ix+0)
 579+ E450 2A 3B E3                             ld      hl,(DanubePointer1)
 580+ E453 7E                                   ld      a,(hl)
 581+ E454 06 00                                ld      b,0
 582+ E456 CD DA E3                             call    PlayDanubeNote
 583+ E459              .PlayChannel2:          ;break
 584+ E459 3E 02                                ld      a,TURBO_CHIP_AY2
 585+ E45B CD 5C E3                             call    SelectDanubeAYa
 586+ E45E DD 21 3D E3                          ld      ix,DanubePointer2
 587+ E462 DD 7E 00                             ld      a,(ix+0)
 588+ E465 06 01                                ld      b,1
 589+ E467 CD DA E3                             call    PlayDanubeNote
 590+ E46A 3E 02        .PlayChannel3:          ld      a,TURBO_CHIP_AY2
 591+ E46C CD 5C E3                             call    SelectDanubeAYa
 592+ E46F DD 21 3F E3                          ld      ix,DanubePointer3
 593+ E473 DD 7E 00                             ld      a,(ix+0)
 594+ E476 06 02                                ld      b,2
 595+ E478 CD DA E3                             call    PlayDanubeNote
 596+ E47B 3E 03        .PlayChannel4:          ld      a,TURBO_CHIP_AY3
 597+ E47D CD 5C E3                             call    SelectDanubeAYa
 598+ E480 DD 21 41 E3                          ld      ix,DanubePointer4
 599+ E484 DD 7E 00                             ld      a,(ix+0)
 600+ E487 06 00                                ld      b,0
 601+ E489 CD DA E3                             call    PlayDanubeNote
 602+ E48C 3E 03        .PlayChannel5:          ld      a,TURBO_CHIP_AY3
 603+ E48E CD 5C E3                             call    SelectDanubeAYa
 604+ E491 DD 21 43 E3                          ld      ix,DanubePointer5
 605+ E495 DD 7E 00                             ld      a,(ix+0)
 606+ E498 06 01                                ld      b,1
 607+ E49A CD DA E3                             call    PlayDanubeNote
 608+ E49D 3E 03        .PlayChannel6:          ld      a,TURBO_CHIP_AY3
 609+ E49F CD 5C E3                             call    SelectDanubeAYa
 610+ E4A2 DD 21 45 E3                          ld      ix,DanubePointer6
 611+ E4A6 DD 7E 00                             ld      a,(ix+0)
 612+ E4A9 06 02                                ld      b,2
 613+ E4AB CD DA E3                             call    PlayDanubeNote
 614+ E4AE 3A 58 E3     UpdatePointers:         ld      a,(DanubePace)
 615+ E4B1 32 59 E3                             ld      (DanubeTimer),a
 616+ E4B4 2A 53 E3                             ld      hl,(DanubeCounter)
 617+ E4B7 11 16 01                             ld      de,DanubeMax
 618+ E4BA E5           .compare16HLDE:         push    hl
 619+ E4BB A7                                   and     a
 620+ E4BC ED 52                                sbc     hl,de
 621+ E4BE E1                                   pop     hl
 622+ E4BF                                      ;break
 623+ E4BF 20 2A                                jr      nz,.MovePointersForward
 624+ E4C1 21 C5 E5     .ResetPointers:         ld      hl,BlueDanube1
 625+ E4C4 22 3B E3                             ld      (DanubePointer1),hl
 626+ E4C7 21 DA E6                             ld      hl,BlueDanube2
 627+ E4CA 22 3D E3                             ld      (DanubePointer2),hl
 628+ E4CD 21 EF E7                             ld      hl,BlueDanube3
 629+ E4D0 22 3F E3                             ld      (DanubePointer3),hl
 630+ E4D3 21 04 E9                             ld      hl,BlueDanube4
 631+ E4D6 22 41 E3                             ld      (DanubePointer4),hl
 632+ E4D9 21 19 EA                             ld      hl,BlueDanube5
 633+ E4DC 22 43 E3                             ld      (DanubePointer5),hl
 634+ E4DF 21 2E EB                             ld      hl,BlueDanube6
 635+ E4E2 22 45 E3                             ld      (DanubePointer6),hl
 636+ E4E5 21 00 00                             ld      hl,0
 637+ E4E8 22 53 E3                             ld      (DanubeCounter),hl
 638+ E4EB 23           .MovePointersForward:   inc     hl
 639+ E4EC 22 53 E3                             ld      (DanubeCounter),hl
 640+ E4EF 21 3B E3                             ld      hl,DanubePointer1
 641+ E4F2 CD 14 E5                             call    AdvancePointer
 642+ E4F5 21 3D E3                             ld      hl,DanubePointer2
 643+ E4F8 CD 14 E5                             call    AdvancePointer
 644+ E4FB 21 3F E3                             ld      hl,DanubePointer3
 645+ E4FE CD 14 E5                             call    AdvancePointer
 646+ E501 21 41 E3                             ld      hl,DanubePointer4
 647+ E504 CD 14 E5                             call    AdvancePointer
 648+ E507 21 43 E3                             ld      hl,DanubePointer5
 649+ E50A CD 14 E5                             call    AdvancePointer
 650+ E50D 21 45 E3                             ld      hl,DanubePointer6
 651+ E510 CD 14 E5                             call    AdvancePointer
 652+ E513 C9                                   ret
 653+ E514
 654+ E514 7E           AdvancePointer:         ld      a,(hl)
 655+ E515 23                                   inc     hl
 656+ E516 56                                   ld      d,(hl)
 657+ E517 5F                                   ld      e,a
 658+ E518 13                                   inc     de
 659+ E519 72                                   ld      (hl),d
 660+ E51A 2B                                   dec     hl
 661+ E51B 73                                   ld      (hl),e
 662+ E51C C9                                   ret
 663+ E51D
 664+ E51D
 665+ E51D
 666+ E51D
 667+ E51D BF 0F        TonesPitch       db  $BF,   $0F
 668+ E51F DC 0E                         db  $DC,   $0E
 669+ E521 07 0E                         db  $07,   $0E
 670+ E523 7B 1A                         db  $7B,   $1A
 671+ E525 FE 18                         db  $FE,   $18
 672+ E527 97 17                         db  $97,   $17
 673+ E529 44 16                         db  $44,   $16
 674+ E52B 04 15                         db  $04,   $15
 675+ E52D D6 13                         db  $D6,   $13
 676+ E52F B9 12                         db  $B9,   $12
 677+ E531 AC 11                         db  $AC,   $11
 678+ E533 AE 10                         db  $AE,   $10
 679+ E535 DF 07                         db  $DF,   $07
 680+ E537 6E 07                         db  $6E,   $07
 681+ E539 03 07                         db  $03,   $07
 682+ E53B 3D 0D                         db  $3D,   $0D
 683+ E53D 7F 0C                         db  $7F,   $0C
 684+ E53F CC 0B                         db  $CC,   $0B
 685+ E541 22 0B                         db  $22,   $0B
 686+ E543 82 0A                         db  $82,   $0A
 687+ E545 EB 09                         db  $EB,   $09
 688+ E547 5D 09                         db  $5D,   $09
 689+ E549 D6 08                         db  $D6,   $08
 690+ E54B 57 08                         db  $57,   $08
 691+ E54D F0 03                         db  $F0,   $03
 692+ E54F B7 03                         db  $B7,   $03
 693+ E551 82 03                         db  $82,   $03
 694+ E553 9F 06                         db  $9F,   $06
 695+ E555 40 06                         db  $40,   $06
 696+ E557 E6 05                         db  $E6,   $05
 697+ E559 91 05                         db  $91,   $05
 698+ E55B 41 05                         db  $41,   $05
 699+ E55D F6 04                         db  $F6,   $04
 700+ E55F AE 04                         db  $AE,   $04
 701+ E561 6B 04                         db  $6B,   $04
 702+ E563 2C 04                         db  $2C,   $04
 703+ E565 F8 01                         db  $F8,   $01
 704+ E567 DC 01                         db  $DC,   $01
 705+ E569 C1 01                         db  $C1,   $01
 706+ E56B 4F 03                         db  $4F,   $03
 707+ E56D 20 03                         db  $20,   $03
 708+ E56F F3 02                         db  $F3,   $02
 709+ E571 C9 02                         db  $C9,   $02
 710+ E573 A1 02                         db  $A1,   $02
 711+ E575 7B 02                         db  $7B,   $02
 712+ E577 57 02                         db  $57,   $02
 713+ E579 36 02                         db  $36,   $02
 714+ E57B 16 02                         db  $16,   $02
 715+ E57D FC 00                         db  $FC,   $00
 716+ E57F EE 00                         db  $EE,   $00
 717+ E581 E0 00                         db  $E0,   $00
 718+ E583 A8 01                         db  $A8,   $01
 719+ E585 90 01                         db  $90,   $01
 720+ E587 79 01                         db  $79,   $01
 721+ E589 64 01                         db  $64,   $01
 722+ E58B 50 01                         db  $50,   $01
 723+ E58D 3D 01                         db  $3D,   $01
 724+ E58F 2C 01                         db  $2C,   $01
 725+ E591 1B 01                         db  $1B,   $01
 726+ E593 0B 01                         db  $0B,   $01
 727+ E595 7E 00                         db  $7E,   $00
 728+ E597 77 00                         db  $77,   $00
 729+ E599 70 00                         db  $70,   $00
 730+ E59B D4 00                         db  $D4,   $00
 731+ E59D C8 00                         db  $C8,   $00
 732+ E59F BD 00                         db  $BD,   $00
 733+ E5A1 B2 00                         db  $B2,   $00
 734+ E5A3 A8 00                         db  $A8,   $00
 735+ E5A5 9F 00                         db  $9F,   $00
 736+ E5A7 96 00                         db  $96,   $00
 737+ E5A9 8D 00                         db  $8D,   $00
 738+ E5AB 85 00                         db  $85,   $00
 739+ E5AD 3F 00                         db  $3F,   $00
 740+ E5AF 3B 00                         db  $3B,   $00
 741+ E5B1 38 00                         db  $38,   $00
 742+ E5B3 6A 00                         db  $6A,   $00
 743+ E5B5 64 00                         db  $64,   $00
 744+ E5B7 5E 00                         db  $5E,   $00
 745+ E5B9 59 00                         db  $59,   $00
 746+ E5BB 54 00                         db  $54,   $00
 747+ E5BD 4F 00                         db  $4F,   $00
 748+ E5BF 4B 00                         db  $4B,   $00
 749+ E5C1 47 00                         db  $47,   $00
 750+ E5C3 43 00                         db  $43,   $00
 751+ E5C5
 752+ E5C5
 753+ E5C5              ; 1 Byte high nibble Octave, low note
 754+ E5C5              ; for now middle octave 3,
 755+ E5C5              ; low nibble mapping
 756+ E5C5              ;       0      1  2  3  4  5  6   7  8  9   A  B  C
 757+ E5C5              ;       None   A  A# B  C  C# D  D#  E  F  F#  G  G#
 758+ E5C5              ;BlueDanube1:     DB $00, $00, $00, $00, $00, $61, $61, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $61, $61, $5B, $5B, $00, $00, $00
 759+ E5C5              ;BlueDanube2:     DB $00, $00, $00, $00, $00, $5A, $5A, $5A, $5A, $00, $00, $00, $00, $00, $00, $00, $00, $58, $58, $55, $55, $00, $00, $00
 760+ E5C5              ;BlueDanube3:     DB $00, $00, $00, $41, $41, $00, $00, $56, $56, $00, $00, $00, $00, $00, $00, $41, $41, $00, $00, $00, $00, $00, $00, $00
 761+ E5C5              ;BlueDanube4:     DB $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00
 762+ E5C5
 763+ E5C5 00 00 00 48  BlueDanube1:          DB 	$00, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 763+ E5C9 00 00 00 4A
 763+ E5CD FF 4A FF 4A
 763+ E5D1 FF 00 00 48
 763+ E5D5 00 00 00 4B
 763+ E5D9 FF 4B FF 4B
 763+ E5DD FF 00 00 00
 763+ E5E1 00 00 00 00
 763+ E5E5 00 00 00 00
 763+ E5E9 00 00 00 00
 763+ E5ED 00 00 00 00
 763+ E5F1 00 00 00 00
 763+ E5F5 00 00 00 00
 763+ E5F9 00 00 00 00
 763+ E5FD 00 00 00 00
 763+ E601 00 00 00 00
 764+ E605 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 764+ E609 00 00 00 00
 764+ E60D 00 00 00 00
 764+ E611 00 00 00 00
 764+ E615 00 00 00 00
 764+ E619 00 00 00 00
 764+ E61D 00 00 00 00
 764+ E621 00 00 00 00
 764+ E625 00 00 00 00
 764+ E629 00 00 00 00
 764+ E62D 00 00 00 00
 764+ E631 00 00 00 00
 764+ E635 00 00 00 00
 764+ E639 00 00 00 00
 764+ E63D 00 00 00 00
 764+ E641 00 00 00 00
 765+ E645 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$00, 	$48, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00
 765+ E649 00 00 00 00
 765+ E64D 00 00 48 FF
 765+ E651 48 FF 00 00
 765+ E655 00 00 00 00
 765+ E659 00 00 00 00
 765+ E65D 00 00 00 00
 765+ E661 00 00 00 00
 765+ E665 00 00 00 48
 765+ E669 00 48 00 00
 765+ E66D 00 00 00 00
 765+ E671 00 00 00 00
 765+ E675 00 00 00 00
 765+ E679 00 00 00 00
 765+ E67D 00 00 4B FF
 765+ E681 4B FF 00 00
 766+ E685 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48
 766+ E689 00 00 00 00
 766+ E68D 00 00 00 00
 766+ E691 00 00 00 00
 766+ E695 00 4B FF 4B
 766+ E699 FF 00 00 48
 766+ E69D FF 48 FF 00
 766+ E6A1 00 00 00 00
 766+ E6A5 00 00 00 00
 766+ E6A9 00 00 00 4A
 766+ E6AD FF 4A FF 4A
 766+ E6B1 FF 00 00 00
 766+ E6B5 00 00 00 00
 766+ E6B9 00 00 00 00
 766+ E6BD 00 00 00 00
 766+ E6C1 00 00 00 48
 767+ E6C5 FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$4B, 	$FF, 	$49, 	$FF
 767+ E6C9 00 4A FF 00
 767+ E6CD 00 00 00 4B
 767+ E6D1 FF 4B FF 00
 767+ E6D5 00 4B FF 49
 767+ E6D9 FF
 768+ E6DA 00 44 46 00  BlueDanube2:          DB 	$00, 	$44, 	$46, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$46, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$44, 	$46, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 768+ E6DE 00 44 FF 44
 768+ E6E2 FF 44 FF 44
 768+ E6E6 FF 44 46 00
 768+ E6EA 00 43 FF 43
 768+ E6EE FF 43 FF 43
 768+ E6F2 FF 43 44 46
 768+ E6F6 00 00 00 44
 768+ E6FA 00 00 00 00
 768+ E6FE 00 44 00 00
 768+ E702 00 00 00 44
 768+ E706 00 00 00 00
 768+ E70A 00 00 00 00
 768+ E70E 00 00 00 00
 768+ E712 00 00 00 00
 768+ E716 00 00 00 00
 769+ E71A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$00, 	$46, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$FF, 	$46, 	$FF, 	$00, 	$00, 	$44, 	$44, 	$00, 	$00, 	$00, 	$00
 769+ E71E 00 00 00 00
 769+ E722 00 00 00 00
 769+ E726 00 00 00 00
 769+ E72A 00 00 00 00
 769+ E72E 00 00 00 00
 769+ E732 00 00 00 00
 769+ E736 46 00 46 00
 769+ E73A 00 00 43 00
 769+ E73E 43 00 00 00
 769+ E742 00 00 00 00
 769+ E746 00 00 00 00
 769+ E74A 00 00 00 00
 769+ E74E 46 FF 46 FF
 769+ E752 00 00 44 44
 769+ E756 00 00 00 00
 770+ E75A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$46
 770+ E75E 00 00 00 00
 770+ E762 00 00 44 FF
 770+ E766 44 FF 00 00
 770+ E76A 44 FF 44 FF
 770+ E76E 00 00 00 00
 770+ E772 00 00 00 00
 770+ E776 00 00 00 00
 770+ E77A 00 00 00 43
 770+ E77E 00 43 00 00
 770+ E782 00 43 FF 43
 770+ E786 FF 00 00 00
 770+ E78A 00 00 00 00
 770+ E78E 00 00 00 00
 770+ E792 00 00 43 FF
 770+ E796 43 FF 00 46
 771+ E79A FF 46 FF 00                        DB	$FF, 	$46, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44
 771+ E79E 00 00 00 00
 771+ E7A2 00 00 00 00
 771+ E7A6 00 00 00 00
 771+ E7AA 00 48 FF 48
 771+ E7AE FF 00 00 44
 771+ E7B2 FF 44 FF 00
 771+ E7B6 00 00 00 00
 771+ E7BA 00 00 00 00
 771+ E7BE 00 00 00 44
 771+ E7C2 FF 44 FF 44
 771+ E7C6 FF 00 00 00
 771+ E7CA 00 43 FF 00
 771+ E7CE 00 00 00 43
 771+ E7D2 FF 00 00 00
 771+ E7D6 00 00 00 44
 772+ E7DA FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00
 772+ E7DE 00 44 FF 00
 772+ E7E2 00 00 00 43
 772+ E7E6 FF 43 FF 00
 772+ E7EA 00 43 FF 00
 772+ E7EE 00
 773+ E7EF 00 00 00 00  BlueDanube3:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 773+ E7F3 00 00 00 41
 773+ E7F7 FF 41 FF 41
 773+ E7FB FF 00 00 00
 773+ E7FF 00 00 00 3B
 773+ E803 FF 3B FF 3B
 773+ E807 FF 00 00 00
 773+ E80B 00 41 00 00
 773+ E80F 00 00 00 3B
 773+ E813 00 00 00 00
 773+ E817 00 00 00 00
 773+ E81B 00 00 00 00
 773+ E81F 00 41 00 00
 773+ E823 00 00 00 3B
 773+ E827 00 00 00 00
 773+ E82B 00 00 00 00
 774+ E82F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$41, 	$41, 	$00, 	$00, 	$00, 	$00
 774+ E833 00 00 00 00
 774+ E837 00 00 00 00
 774+ E83B 00 00 00 00
 774+ E83F 00 00 00 00
 774+ E843 00 00 00 00
 774+ E847 00 00 00 00
 774+ E84B 43 00 43 00
 774+ E84F 00 00 3B 00
 774+ E853 3B 00 00 00
 774+ E857 00 00 00 00
 774+ E85B 00 00 00 00
 774+ E85F 00 00 00 00
 774+ E863 41 FF 41 FF
 774+ E867 00 00 41 41
 774+ E86B 00 00 00 00
 775+ E86F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$3B
 775+ E873 00 00 00 00
 775+ E877 00 00 00 00
 775+ E87B 00 00 00 00
 775+ E87F 41 FF 41 FF
 775+ E883 00 00 00 00
 775+ E887 00 00 00 00
 775+ E88B 00 00 00 00
 775+ E88F 00 00 00 00
 775+ E893 00 00 00 00
 775+ E897 00 3B FF 3B
 775+ E89B FF 00 00 00
 775+ E89F 00 00 00 00
 775+ E8A3 00 00 3B FF
 775+ E8A7 FF FF FF FF
 775+ E8AB FF FF 00 3B
 776+ E8AF FF 3B FF 00                        DB	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00
 776+ E8B3 00 00 00 00
 776+ E8B7 00 00 00 00
 776+ E8BB 00 3B FF 00
 776+ E8BF 00 00 00 3B
 776+ E8C3 FF 00 00 00
 776+ E8C7 00 00 00 00
 776+ E8CB 00 00 00 00
 776+ E8CF 00 00 00 00
 776+ E8D3 00 00 00 41
 776+ E8D7 FF 41 FF 41
 776+ E8DB FF 00 00 00
 776+ E8DF 00 00 00 3B
 776+ E8E3 FF 3B FF 00
 776+ E8E7 00 3B FF 00
 776+ E8EB 00 00 00 00
 777+ E8EF 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3C, 	$FF
 777+ E8F3 00 00 00 00
 777+ E8F7 00 00 00 3B
 777+ E8FB FF 3B FF 00
 777+ E8FF 00 00 00 3C
 777+ E903 FF
 778+ E904 00 00 00 00  BlueDanube4:          DB 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$3A, 	$00, 	$00, 	$00, 	$36, 	$00, 	$38, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3A, 	$00, 	$00
 778+ E908 36 00 00 36
 778+ E90C FF 36 FF 36
 778+ E910 FF 00 00 00
 778+ E914 36 00 00 36
 778+ E918 FF 36 FF 36
 778+ E91C FF 00 00 00
 778+ E920 36 36 00 00
 778+ E924 00 36 00 36
 778+ E928 00 00 00 36
 778+ E92C 00 3A 00 00
 778+ E930 00 36 00 38
 778+ E934 00 00 00 00
 778+ E938 00 36 00 00
 778+ E93C 00 00 00 00
 778+ E940 00 3A 00 00
 779+ E944 00 36 00 00                        DB	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00
 779+ E948 00 00 00 00
 779+ E94C 00 00 00 00
 779+ E950 00 00 00 00
 779+ E954 00 00 00 00
 779+ E958 00 00 00 36
 779+ E95C FF 36 FF FF
 779+ E960 FF FF FF FF
 779+ E964 FF FF FF FF
 779+ E968 FF FF 00 00
 779+ E96C 00 00 00 00
 779+ E970 00 00 36 FF
 779+ E974 36 FF FF FF
 779+ E978 FF FF FF FF
 779+ E97C FF FF FF FF
 779+ E980 00 00 00 00
 780+ E984 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00
 780+ E988 38 FF FF FF
 780+ E98C FF FF FF FF
 780+ E990 FF FF FF FF
 780+ E994 38 FF 38 FF
 780+ E998 00 00 00 00
 780+ E99C 00 00 00 00
 780+ E9A0 00 38 FF 38
 780+ E9A4 FF FF FF FF
 780+ E9A8 FF FF FF 00
 780+ E9AC 00 00 00 00
 780+ E9B0 00 00 00 00
 780+ E9B4 00 00 00 00
 780+ E9B8 00 36 36 FF
 780+ E9BC FF FF FF FF
 780+ E9C0 FF FF 00 00
 781+ E9C4 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 781+ E9C8 00 00 00 00
 781+ E9CC 00 00 00 36
 781+ E9D0 FF 38 FF 00
 781+ E9D4 00 00 00 00
 781+ E9D8 00 00 00 00
 781+ E9DC 00 00 00 00
 781+ E9E0 00 00 00 00
 781+ E9E4 00 00 00 38
 781+ E9E8 FF 38 FF 00
 781+ E9EC 00 00 00 00
 781+ E9F0 00 00 00 36
 781+ E9F4 FF 00 00 36
 781+ E9F8 FF 36 FF 36
 781+ E9FC FF 00 00 00
 781+ EA00 00 00 00 00
 782+ EA04 00 00 00 38                        DB	$00, 	$00, 	$00, 	$38, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 782+ EA08 FF 00 00 36
 782+ EA0C FF 00 00 00
 782+ EA10 00 00 00 00
 782+ EA14 00 00 00 00
 782+ EA18 00
 783+ EA19 00 00 00 00  BlueDanube5:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$00, 	$34, 	$00, 	$00, 	$00, 	$31
 783+ EA1D 00 00 00 00
 783+ EA21 00 00 00 00
 783+ EA25 00 00 00 00
 783+ EA29 00 00 00 00
 783+ EA2D 00 00 00 00
 783+ EA31 00 00 00 00
 783+ EA35 00 00 00 00
 783+ EA39 00 00 00 00
 783+ EA3D 00 00 00 00
 783+ EA41 00 00 00 00
 783+ EA45 00 00 00 00
 783+ EA49 00 00 00 34
 783+ EA4D 00 00 00 00
 783+ EA51 00 33 00 34
 783+ EA55 00 00 00 31
 784+ EA59 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 784+ EA5D 00 00 00 34
 784+ EA61 00 00 00 00
 784+ EA65 00 31 00 00
 784+ EA69 00 00 00 00
 784+ EA6D 00 33 FF 00
 784+ EA71 00 33 FF 00
 784+ EA75 00 00 00 00
 784+ EA79 00 00 00 00
 784+ EA7D 00 00 00 00
 784+ EA81 00 00 00 00
 784+ EA85 33 FF 00 00
 784+ EA89 31 FF 00 00
 784+ EA8D 00 00 00 00
 784+ EA91 00 00 00 00
 784+ EA95 00 00 00 00
 785+ EA99 00 00 31 FF                        DB	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$33
 785+ EA9D 00 00 31 00
 785+ EAA1 00 00 00 00
 785+ EAA5 00 00 00 00
 785+ EAA9 00 00 31 FF
 785+ EAAD 00 00 00 00
 785+ EAB1 00 00 00 31
 785+ EAB5 FF 00 00 33
 785+ EAB9 FF FF FF FF
 785+ EABD FF FF FF 00
 785+ EAC1 00 00 00 00
 785+ EAC5 00 00 00 00
 785+ EAC9 00 00 00 33
 785+ EACD FF 00 33 FF
 785+ EAD1 FF FF FF FF
 785+ EAD5 FF FF 00 33
 786+ EAD9 FF 33 FF 00                        DB	$FF, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$31, 	$FF, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$35, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$33, 	$FF, 	$00
 786+ EADD 00 00 00 00
 786+ EAE1 00 33 FF 00
 786+ EAE5 00 34 FF 00
 786+ EAE9 00 00 00 00
 786+ EAED 00 00 00 00
 786+ EAF1 00 00 00 00
 786+ EAF5 00 31 FF 31
 786+ EAF9 FF 34 FF 00
 786+ EAFD 00 00 00 00
 786+ EB01 00 00 00 00
 786+ EB05 00 35 FF 00
 786+ EB09 00 00 00 00
 786+ EB0D 00 00 00 00
 786+ EB11 00 00 00 33
 786+ EB15 FF 33 FF 00
 787+ EB19 00 31 FF 00                        DB	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 787+ EB1D 00 00 00 00
 787+ EB21 00 00 00 00
 787+ EB25 00 00 00 00
 787+ EB29 00 00 00 00
 787+ EB2D 00
 788+ EB2E 00 00 00 00  BlueDanube6:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 788+ EB32 00 00 00 00
 788+ EB36 00 00 00 00
 788+ EB3A 00 00 00 00
 788+ EB3E 00 00 00 00
 788+ EB42 00 00 00 00
 788+ EB46 00 00 00 00
 788+ EB4A 00 00 00 00
 788+ EB4E 00 00 00 00
 788+ EB52 00 00 00 00
 788+ EB56 00 00 00 00
 788+ EB5A 00 00 00 00
 788+ EB5E 00 00 00 00
 788+ EB62 00 00 00 00
 788+ EB66 00 00 00 00
 788+ EB6A 00 00 00 00
 789+ EB6E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF
 789+ EB72 00 00 00 00
 789+ EB76 00 00 00 00
 789+ EB7A 00 00 00 00
 789+ EB7E 00 00 00 2B
 789+ EB82 FF 00 00 00
 789+ EB86 00 2B FF 00
 789+ EB8A 00 00 00 00
 789+ EB8E 00 00 00 00
 789+ EB92 00 00 00 00
 789+ EB96 2B FF 2B FF
 789+ EB9A 00 00 00 00
 789+ EB9E 2A FF 00 00
 789+ EBA2 00 00 00 00
 789+ EBA6 00 00 00 00
 789+ EBAA 00 00 2A FF
 790+ EBAE 2A FF 00 00                        DB	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 790+ EBB2 00 00 00 00
 790+ EBB6 00 00 00 00
 790+ EBBA 00 00 00 00
 790+ EBBE 00 00 00 00
 790+ EBC2 00 00 00 2A
 790+ EBC6 FF 2A FF 00
 790+ EBCA 00 00 00 2B
 790+ EBCE FF FF FF FF
 790+ EBD2 FF FF FF 00
 790+ EBD6 00 00 00 00
 790+ EBDA 00 00 00 2B
 790+ EBDE FF 2B FF 00
 790+ EBE2 00 00 00 00
 790+ EBE6 00 00 00 00
 790+ EBEA 00 00 00 00
 791+ EBEE 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 791+ EBF2 00 2B FF 2B
 791+ EBF6 FF 00 00 00
 791+ EBFA 00 00 00 00
 791+ EBFE 00 00 00 00
 791+ EC02 00 00 00 00
 791+ EC06 00 00 00 00
 791+ EC0A 00 00 00 00
 791+ EC0E 00 00 00 00
 791+ EC12 00 00 00 00
 791+ EC16 00 00 00 00
 791+ EC1A 00 00 00 00
 791+ EC1E 00 2B FF 00
 791+ EC22 00 00 00 00
 791+ EC26 00 00 00 00
 791+ EC2A 00 00 00 00
 792+ EC2E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 792+ EC32 00 00 00 00
 792+ EC36 00 2B FF 00
 792+ EC3A 00 00 00 00
 792+ EC3E 00 00 00 00
 792+ EC42 00
 793+ EC43
# file closed: ./Hardware/sound.asm
1755  EC43                                  DISPLAY "Sound ",BankSound," - Bytes free ",/D, $2000 - ($-SoundAddr), " - BankSound"
1756  EC43                                  ASSERT $-SoundAddr <8912, Bank code leaks over 8K boundary
1757  EC43                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
1758  EC43                  SAVENEX CFG  0,0,0,1
1759  EC43                  SAVENEX AUTO
1760  EC43                  SAVENEX CLOSE
1761  EC43                  DISPLAY "Main Non Banked Code End ", MainNonBankedCodeEnd , " Bytes free ", 0B000H - MainNonBankedCodeEnd
1762  EC43                  ASSERT MainNonBankedCodeEnd < 0B000H, Program code leaks intot interrup vector table
1763  EC43
# file closed: eliteNext.asm
