# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEVICE ZXSPECTRUMNEXT
   3  0000               DEVICE ZXSPECTRUMNEXT
   4  0000               DEFINE  DOUBLEBUFFER 1
   5  0000               CSPECTMAP eliteNext.map
   6  0000               OPT --zxnext=cspect --syntax=a
   7  0000
   8  0000              DEBUGSEGSIZE   equ 1
   9  0000              DEBUGLOGSUMMARY equ 1
  10  0000              ;DEBUGLOGDETAIL equ 1
  11  0000
  12  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  13  0000              ; Game Defines
  14  0000              ScreenLocal     EQU 0
  15  0000              ScreenGalactic  EQU ScreenLocal + 1
  16  0000              ScreenMarket    EQU ScreenGalactic + 1
  17  0000              ScreenMarketDsp EQU ScreenMarket + 1
  18  0000              ScreenStatus    EQU ScreenMarketDsp + 1
  19  0000              ScreenInvent    EQU ScreenStatus + 1
  20  0000              ScreenPlanet    EQU ScreenInvent + 1
  21  0000              ScreenEquip     EQU ScreenPlanet + 1
  22  0000              ScreenLaunch    EQU ScreenEquip + 1
  23  0000              ScreenFront     EQU ScreenLaunch + 1
  24  0000              ScreenAft       EQU ScreenFront+1
  25  0000              ScreenLeft      EQU ScreenAft+2
  26  0000              ScreenRight     EQU ScreenLeft+3
  27  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  28  0000              ; Colour Defines
  29  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED             EQU 224
   3+ 0000              L2ColourRED_MED         EQU 128
   4+ 0000              L2ColourRED_DRK         EQU  32
   5+ 0000              L2ColourRED_1           EQU L2ColourRED_MED
   6+ 0000              L2ColourRED_2           EQU  96
   7+ 0000              L2ColourRED_3           EQU  64
   8+ 0000              L2ColourRED_4           EQU L2ColourRED_DRK
   9+ 0000              L2ColourDARK_RED        EQU L2ColourRED_DRK
  10+ 0000              L2ColourYELLOW          EQU 252
  11+ 0000              L2ColourYELLOW_MED      EQU 144
  12+ 0000              L2ColourYELLOW_DRK      EQU  72
  13+ 0000              L2ColourYELLOW_1	    EQU L2ColourYELLOW_MED
  14+ 0000              L2ColourYELLOW_2        EQU L2ColourYELLOW_DRK
  15+ 0000              L2ColourGREEN           EQU  29
  16+ 0000              L2ColourGREEN_MED       EQU  16
  17+ 0000              L2ColourGREEN_DRK       EQU   8
  18+ 0000              L2ColourGREEN_1		    EQU L2ColourGREEN
  19+ 0000              L2ColourGREEN_2		    EQU L2ColourGREEN_MED
  20+ 0000              L2ColourGREEN_3		    EQU L2ColourGREEN_DRK
  21+ 0000              L2ColourWHITE           EQU 255
  22+ 0000              L2ColourWHITE_MED       EQU 146
  23+ 0000              L2ColourWHITE_DRK       EQU  73
  24+ 0000              L2ColourWHITE_1         EQU L2ColourWHITE_MED
  25+ 0000              L2ColourWHITE_2         EQU L2ColourWHITE_DRK
  26+ 0000              L2ColourGREY_1		    EQU 146
  27+ 0000              L2ColourGREY_2		    EQU 109
  28+ 0000              L2ColourGREY_3		    EQU  73
  29+ 0000              L2ColourGREY_4		    EQU  37
  30+ 0000              L2ColourMAGENTA         EQU 218
  31+ 0000              L2ColourMAGENTA_MED     EQU 130
  32+ 0000              L2ColourMAGENTA_DRK     EQU  65
  33+ 0000              L2ColourORANGE          EQU 236
  34+ 0000              L2ColourORANGE_MED      EQU 168
  35+ 0000              L2ColourORANGE_DRK      EQU  68
  36+ 0000              L2ColourBLUE            EQU   3
  37+ 0000              L2ColourBLUE_MED        EQU   2
  38+ 0000              L2ColourBLUE_DRK        EQU   1
  39+ 0000              L2ColourBLUE_1          EQU 111
  40+ 0000              L2ColourBLUE_2		    EQU  39
  41+ 0000              L2ColourBLUE_3		    EQU L2ColourBLUE_MED
  42+ 0000              L2ColourBLUE_4		    EQU L2ColourBLUE_DRK
  43+ 0000              L2ColourCYAN            EQU  31
  44+ 0000              L2ColourCYAN_MED        EQU  18
  45+ 0000              L2ColourCYAN_DRK        EQU   9
  46+ 0000              L2ColourPURPLE          EQU 109
  47+ 0000              L2ColourPURPLE_MED      EQU  66
  48+ 0000              L2ColourPURPLE_DRK      EQU  33
  49+ 0000              L2ColourPINK_1		    EQU 231
  50+ 0000              L2ColourPINK_2		    EQU 226
  51+ 0000              L2ColourPINK_3		    EQU 225
  52+ 0000              L2ColourPINK_4		    EQU 224
  53+ 0000              L2ColourTRANSPARENT     EQU $E3
  54+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  30  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Total screen list
  33  0000              ; Local Chart
  34  0000              ; Galactic Chart
  35  0000              ; Market Prices
  36  0000              ; Inventory
  37  0000              ; Comander status
  38  0000              ; System Data
  39  0000              ; Mission Briefing
  40  0000              ; missio completion
  41  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  42  0000              ; Pause Menu (only place you can load from )
  43  0000              ; byint and selling equipment
  44  0000              ; bying and selling stock
  45  0000
  46  0000                  INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  47  0000                  INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  48  0000                  INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              UniverseBankAddr	    equ $c000
  25+ 0000              LaunchShipAddr          equ $c000
  26+ 0000              membank7 			    equ $e000
  27+ 0000              L1membankAddr   	    equ $e000
  28+ 0000              L2membankAddr   	    equ $e000
  29+ 0000              ShipModelsAddr	        equ $e000
  30+ 0000              SpritemembankAddr       equ $e000
  31+ 0000              ResetUniverseAddr       equ $e000
  32+ 0000              StockTableAddr	        equ $e000
  33+ 0000              CMDRDATAAddr            equ $e000
  34+ 0000              LAYER2Addr              equ $e000
  35+ 0000              LAYER1Addr              equ $e000
  36+ 0000              SPRITEAddr              equ $e000
  37+ 0000              ConsoleImageAddr        equ $e000
  38+ 0000              GalaxyDataAddr          equ $e000
  39+ 0000
  40+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  41+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  42+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  43+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  44+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  45+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  46+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  53+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  54+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  55+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  56+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  57+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  58+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  60+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  61+ 0000
  62+ 0000              BankResetUniv           equ 49
  63+ 0000              BankMenuShrCht          equ 50
  64+ 0000              BankMenuGalCht          equ 51
  65+ 0000              BankMenuInvent          equ 52
  66+ 0000              BankMenuSystem          equ 53
  67+ 0000              BankMenuMarket          equ 54
  68+ 0000              BankStockTable          equ 55
  69+ 0000              BankCmdrData            equ 56
  70+ 0000              BankLAYER2              equ 57
  71+ 0000              BankLAYER1              equ 58
  72+ 0000              BankShipModelsA         equ 59
  73+ 0000              BankSPRITE              equ 60
  74+ 0000              BankConsole             equ 61
  75+ 0000              BankFrontView           equ 62
  76+ 0000              BankMenuStatus          equ 63
  77+ 0000              BankMenuEquipS          equ 64
  78+ 0000              BankLaunchShip          equ 65
  79+ 0000              BankDispMarket          equ 66
  80+ 0000              BankShipModelsB         equ 67
  81+ 0000              BankShipModelsC         equ 68
  82+ 0000
  83+ 0000              BankUNIVDATA0           equ 70
  84+ 0000              BankUNIVDATA1           equ 71
  85+ 0000              BankUNIVDATA2           equ 72
  86+ 0000              BankUNIVDATA3           equ 73
  87+ 0000              BankUNIVDATA4           equ 74
  88+ 0000              BankUNIVDATA5           equ 75
  89+ 0000              BankUNIVDATA6           equ 76
  90+ 0000              BankUNIVDATA7           equ 77
  91+ 0000              BankUNIVDATA8           equ 78
  92+ 0000              BankUNIVDATA9           equ 79
  93+ 0000              BankUNIVDATA10          equ 80
  94+ 0000              BankUNIVDATA11          equ 81
  95+ 0000              BankUNIVDATA12          equ 82
  96+ 0000
  97+ 0000              BankGalaxyData0         equ 91
  98+ 0000              BankGalaxyData1         equ 92
  99+ 0000              BankGalaxyData2         equ 93
 100+ 0000              BankGalaxyData3         equ 94
 101+ 0000              BankGalaxyData4         equ 95
 102+ 0000              BankGalaxyData5         equ 96
 103+ 0000              BankGalaxyData6         equ 97
 104+ 0000              BankGalaxyData7         equ 98
 105+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  49  0000                  INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  50  0000
  51  0000                  INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipModelsA: MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsA
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipModelsB: MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsB
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipModelsC: MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsC
  29+ 0000              					 ENDM
  30+ 0000
  31+ 0000              MMUSelectShipModelA: MACRO
  32+ 0000 ~            					 nextreg ShipModelMMU,	    a
  33+ 0000              					 ENDM
  34+ 0000
  35+ 0000              MMUSelectShipModelN: MACRO value
  36+ 0000 ~            					 nextreg ShipModelMMU,	    value
  37+ 0000              					 ENDM
  38+ 0000
  39+ 0000              MMUSelectCmdrData:	 MACRO
  40+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  41+ 0000              					 ENDM
  42+ 0000
  43+ 0000              MMUSelectStockTable: MACRO
  44+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  45+ 0000              					 ENDM
  46+ 0000
  47+ 0000              MMUSelectCpySrcA:    MACRO
  48+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  49+ 0000              					 ENDM
  50+ 0000
  51+ 0000              MMUSelectCpySrcN:    MACRO value
  52+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  53+ 0000              					 ENDM
  54+ 0000
  55+ 0000              MMUSelectUniverseA:  MACRO
  56+ 0000 ~                                 nextreg UniverseMMU,       a
  57+ 0000                                   ENDM
  58+ 0000
  59+ 0000              MMUSelectUniverseN:  MACRO value
  60+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  61+ 0000                                   ENDM
  62+ 0000
  63+ 0000              MMUSelectGalaxyA:    MACRO
  64+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  65+ 0000                                   ENDM
  66+ 0000
  67+ 0000              MMUSelectGalaxyN:    MACRO value
  68+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  69+ 0000                                   ENDM
  70+ 0000              MMUSelectGalaxyACopy:MACRO
  71+ 0000 ~                                 nextreg UniverseMMU,       a
  72+ 0000                                   ENDM
  73+ 0000
  74+ 0000              MMUSelectUniverseAbs:MACRO value
  75+ 0000 ~                                 nextreg UniverseMMU,       value
  76+ 0000                                   ENDM
  77+ 0000
  78+ 0000              MMUSelectMenuGalCht: MACRO
  79+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  80+ 0000              					 ENDM
  81+ 0000
  82+ 0000              MMUSelectMenuShrCht: MACRO
  83+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  84+ 0000              					 ENDM
  85+ 0000
  86+ 0000              MMUSelectMenuInvent: MACRO
  87+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
  88+ 0000              					 ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuSystem: MACRO
  91+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuMarket: MACRO
  95+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuStatus: MACRO
  99+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectViewFront:  MACRO
 103+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectScreenA:    MACRO
 107+ 0000 ~                                 nextreg ScreenBankMMU,		a
 108+ 0000              					 ENDM
 109+ 0000
# file closed: ./Macros/MMUMacros.asm
  52  0000                  INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000              ShiftMem16Right1:   MACRO memaddr
  58+ 0000 ~                                ld    hl,(memaddr)
  59+ 0000 ~                                srl   h
  60+ 0000 ~                                rr    l
  61+ 0000 ~                                ld    (memaddr),hl
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000              ShiftMem8Right1:    MACRO memaddr
  65+ 0000 ~                                ld      a,(memaddr)
  66+ 0000 ~                                srl     a
  67+ 0000 ~                                ld      (memaddr),a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000
  71+ 0000              ShiftMem8Left1A:    MACRO memaddr
  72+ 0000 ~                                ld      a,(memaddr)
  73+ 0000 ~                                sla     a
  74+ 0000 ~                                ld      (memaddr),a
  75+ 0000                                  ENDM
  76+ 0000
# file closed: ./Macros/ShiftMacros.asm
  53  0000                  INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
# file closed: ./Macros/CopyByteMacros.asm
  54  0000                  INCLUDE "./Macros/GeneralMacros.asm"
# file opened: ./Macros/GeneralMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  15+ 0000 ~                                    ld      a,(mem)
  16+ 0000 ~                                    bit 	bitnbr,a
  17+ 0000 ~                                    jp      nz,target
  18+ 0000                                      ENDM
  19+ 0000
  20+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  21+ 0000 ~                                    ld      a,(mem)
  22+ 0000 ~                                    bit 	bitnbr,a
  23+ 0000 ~                                    jp      z,target
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  28+ 0000 ~                                    bit 	bitnbr,reg
  29+ 0000 ~                                    jp      nz,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  33+ 0000 ~                                    bit 	bitnbr,reg
  34+ 0000 ~                                    jp      z,target
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
  38+ 0000 ~                                    bit 	bitnbr,reg
  39+ 0000 ~                                    ret     nz
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  43+ 0000 ~                                    ld   a,(mem)
  44+ 0000 ~                                    bit 	bitnbr,a
  45+ 0000 ~                                    ret     nz
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  49+ 0000 ~                                    bit 	bitnbr,reg
  50+ 0000 ~                                    ret		z
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  54+ 0000 ~                                    ld     a,(mem)
  55+ 0000 ~                                    bit 	bitnbr,a
  56+ 0000 ~                                    ret		z
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              JumpIfAGTEusng:         MACRO
  60+ 0000 ~                                    jp		nc,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              JumpIfAGTENusng:        MACRO reg,target
  64+ 0000 ~                                    cp     reg
  65+ 0000 ~                                    jp		nc,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000
  69+ 0000              CallIfAGTENusng:        MACRO   reg,target
  70+ 0000 ~                                    cp      reg
  71+ 0000 ~                                    call	nc,target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  75+ 0000 ~                                    ld     a,(mem)
  76+ 0000 ~                                    cp     value
  77+ 0000 ~                                    jp	  nc,target
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              JumpIfMemGTEMemusng:    MACRO mem, value, target
  81+ 0000 ~                                    ld   a,(mem)
  82+ 0000 ~                                    ld   hl,value
  83+ 0000 ~                                    cp   (hl)
  84+ 0000 ~                                    jp	  nc,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000
  88+ 0000              JumpIfALTusng:          MACRO target
  89+ 0000 ~                                    jp		c,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              JumpIfALTNusng:         MACRO value, target
  93+ 0000 ~                                    cp      value
  94+ 0000 ~                                    jp		c,target
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
  98+ 0000 ~                                    ld      a,(mem)
  99+ 0000 ~                                    cp      value
 100+ 0000 ~                                    jp	  c,target
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 104+ 0000 ~                                    ld    a,(mem)
 105+ 0000 ~                                    ld    hl,value
 106+ 0000 ~                                    cp    (hl)
 107+ 0000 ~                                    jp	  c,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpIfALTMemHLusng:     MACRO target
 111+ 0000 ~                                    cp    (hl)
 112+ 0000 ~                                    jp	  c,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpIfANENusng: MACRO value, target
 116+ 0000 ~                            cp     value
 117+ 0000 ~                            jp      nz,target
 118+ 0000                              ENDM
 119+ 0000
 120+ 0000              JumpIfANEMemusng: MACRO  value, target
 121+ 0000 ~                              ld    hl,value
 122+ 0000 ~                              cp    (hl)
 123+ 0000 ~                              jp      nz,target
 124+ 0000                                ENDM
 125+ 0000
 126+ 0000              JumpIfAEqNusng: MACRO value, target
 127+ 0000 ~                            cp     value
 128+ 0000 ~                            jp      z,target
 129+ 0000                              ENDM
 130+ 0000
 131+ 0000              IfAIsZeroGoto:	MACRO target
 132+ 0000 ~            				cp	0
 133+ 0000 ~            				jp	z,target
 134+ 0000              				ENDM
 135+ 0000
 136+ 0000              IfANotZeroGoto:	MACRO target
 137+ 0000 ~            				cp	0
 138+ 0000 ~            				jp	nz,target
 139+ 0000              				ENDM
 140+ 0000
 141+ 0000              IfResultZeroGoto:	MACRO target
 142+ 0000 ~            					jp	z,target
 143+ 0000              					ENDM
 144+ 0000
 145+ 0000              IfResultNotZeroGoto:MACRO target
 146+ 0000 ~            					jp	nz,target
 147+ 0000              					ENDM
 148+ 0000
 149+ 0000              ReturnIfAIsZero: MACRO
 150+ 0000 ~                             cp     0
 151+ 0000 ~                             ret    z
 152+ 0000                               ENDM
 153+ 0000
 154+ 0000              ReturnIfMemisZero: MACRO mem
 155+ 0000 ~                               ld   a,(mem)
 156+ 0000 ~                               cp     0
 157+ 0000 ~                               ret    z
 158+ 0000                                 ENDM
 159+ 0000
 160+ 0000              ReturnIfANotZero: MACRO
 161+ 0000 ~                              cp     0
 162+ 0000 ~                              ret    nz
 163+ 0000                                ENDM
 164+ 0000
 165+ 0000              ReturnIfMemNotZero: MACRO mem
 166+ 0000 ~                                ld     a,(mem)
 167+ 0000 ~                                cp     0
 168+ 0000 ~                                ret    nz
 169+ 0000                                  ENDM
 170+ 0000
 171+ 0000              ReturnIfAGTEusng: MACRO value
 172+ 0000 ~            				  cp    value
 173+ 0000 ~                              ret	 nc
 174+ 0000                                ENDM
 175+ 0000
 176+ 0000              ReturnIfALTNusng:  MACRO value
 177+ 0000 ~                               cp    value
 178+ 0000 ~                               ret	 c
 179+ 0000                                 ENDM
 180+ 0000
 181+ 0000              ReturnIfAGTENusng: MACRO value
 182+ 0000 ~                               cp    value
 183+ 0000 ~                               ret	 nc
 184+ 0000                                 ENDM
 185+ 0000
 186+ 0000              ReturnIfANENusng: MACRO value
 187+ 0000 ~                              cp      value
 188+ 0000 ~                              ret     nz
 189+ 0000                                ENDM
 190+ 0000
 191+ 0000              ReturnIfAEqNusng: MACRO value
 192+ 0000 ~                              cp      value
 193+ 0000 ~                              ret     z
 194+ 0000                                ENDM
 195+ 0000
 196+ 0000
 197+ 0000              ClearCarryFlag:	MACRO
 198+ 0000 ~            				or a
 199+ 0000              				ENDM
 200+ 0000
 201+ 0000              pushbcde:		MACRO
 202+ 0000 ~            	push	bc
 203+ 0000 ~            	push	de
 204+ 0000              	ENDM
 205+ 0000
 206+ 0000              popdebc:		MACRO
 207+ 0000 ~            	pop		de
 208+ 0000 ~            	pop		bc
 209+ 0000              	ENDM
 210+ 0000
 211+ 0000              pushhlde:		MACRO
 212+ 0000 ~                            push	hl
 213+ 0000 ~                            push	de
 214+ 0000                              ENDM
 215+ 0000
 216+ 0000              popdehl:		MACRO
 217+ 0000 ~                            pop		de
 218+ 0000 ~                            pop		hl
 219+ 0000                              ENDM
 220+ 0000
 221+ 0000              pushbcdeaf:		MACRO
 222+ 0000 ~                            push	bc
 223+ 0000 ~                            push	de
 224+ 0000 ~                            push	af
 225+ 0000                              ENDM
 226+ 0000
 227+ 0000              popafdebc:		MACRO
 228+ 0000 ~                            pop		af
 229+ 0000 ~                            pop		de
 230+ 0000 ~                            pop		bc
 231+ 0000                              ENDM
 232+ 0000
 233+ 0000              NegIY:			MACRO
 234+ 0000 ~                            xor a
 235+ 0000 ~                            sub iyl
 236+ 0000 ~                            ld iyl,a
 237+ 0000 ~                            sbc a,a
 238+ 0000 ~                            sub iyh
 239+ 0000 ~                            ld iyh,a
 240+ 0000                              ENDM
 241+ 0000
 242+ 0000              NegHL:			MACRO
 243+ 0000 ~                            xor a
 244+ 0000 ~                            sub l
 245+ 0000 ~                            ld l,a
 246+ 0000 ~                            sbc a,a
 247+ 0000 ~                            sub h
 248+ 0000 ~                            ld h,a
 249+ 0000                              ENDM
 250+ 0000
 251+ 0000              NegDE:			MACRO
 252+ 0000 ~                            xor a
 253+ 0000 ~                            sub e
 254+ 0000 ~                            ld e,a
 255+ 0000 ~                            sbc a,a
 256+ 0000 ~                            sub d
 257+ 0000 ~                            ld d,a
 258+ 0000                              ENDM
 259+ 0000
 260+ 0000              NegBC:			MACRO
 261+ 0000 ~                            xor a
 262+ 0000 ~                            sub c
 263+ 0000 ~                            ld c,a
 264+ 0000 ~                            sbc a,a
 265+ 0000 ~                            sub  b
 266+ 0000 ~                            ld b,a
 267+ 0000                              ENDM
 268+ 0000
 269+ 0000              NegH            MACRO
 270+ 0000 ~                            ld      a,h
 271+ 0000 ~                            neg
 272+ 0000 ~                            ld      h,a
 273+ 0000                              ENDM
 274+ 0000
 275+ 0000              NegD            MACRO
 276+ 0000 ~                            ld      a,d
 277+ 0000 ~                            neg
 278+ 0000 ~                            ld      d,a
 279+ 0000                              ENDM
 280+ 0000
 281+ 0000              NegB            MACRO
 282+ 0000 ~                            ld      a,b
 283+ 0000 ~                            neg
 284+ 0000 ~                            ld      b,a
 285+ 0000                              ENDM
 286+ 0000
 287+ 0000              FourLDIInstrunctions:   MACRO
 288+ 0000 ~                                    ldi
 289+ 0000 ~                                    ldi
 290+ 0000 ~                                    ldi
 291+ 0000 ~                                    ldi
 292+ 0000                                      ENDM
 293+ 0000
 294+ 0000              FiveLDIInstrunctions:   MACRO
 295+ 0000 ~                                    ldi
 296+ 0000 ~                                    ldi
 297+ 0000 ~                                    ldi
 298+ 0000 ~                                    ldi
 299+ 0000 ~                                    ldi
 300+ 0000                                      ENDM
 301+ 0000
 302+ 0000              SixLDIInstrunctions:    MACRO
 303+ 0000 ~                                    ldi
 304+ 0000 ~                                    ldi
 305+ 0000 ~                                    ldi
 306+ 0000 ~                                    ldi
 307+ 0000 ~                                    ldi
 308+ 0000 ~                                    ldi
 309+ 0000                                      ENDM
 310+ 0000
 311+ 0000              EightLDIInstrunctions:  MACRO
 312+ 0000 ~            		                ldi
 313+ 0000 ~            		                ldi
 314+ 0000 ~            		                ldi
 315+ 0000 ~            		                ldi
 316+ 0000 ~            		                ldi
 317+ 0000 ~            		                ldi
 318+ 0000 ~            		                ldi
 319+ 0000 ~            		                ldi
 320+ 0000                                      ENDM
 321+ 0000
 322+ 0000              NineLDIInstrunctions:  MACRO
 323+ 0000 ~            		                ldi
 324+ 0000 ~            		                ldi
 325+ 0000 ~            		                ldi
 326+ 0000 ~            		                ldi
 327+ 0000 ~            		                ldi
 328+ 0000 ~            		                ldi
 329+ 0000 ~            		                ldi
 330+ 0000 ~            		                ldi
 331+ 0000 ~            		                ldi
 332+ 0000                                      ENDM
 333+ 0000
# file closed: ./Macros/GeneralMacros.asm
  55  0000                  INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		   MACRO
   2+ 0000 ~            			   xor a
   3+ 0000              			   ENDM
   4+ 0000
   5+ 0000              ldCopyByte:    MACRO memfrom, memto
   6+ 0000 ~                           ld       a,(memfrom)
   7+ 0000 ~                           ld       (memto),a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000
  11+ 0000              ldCopyByteABS: MACRO
  12+ 0000 ~                           ld       a,(memfrom)
  13+ 0000 ~            			   and		$7F
  14+ 0000 ~                           ld       (memto),a
  15+ 0000              			   ENDM
  16+ 0000
  17+ 0000              ldCopy2Byte    MACRO  memfrom, memto
  18+ 0000 ~                           ld       hl,(memfrom)
  19+ 0000 ~                           ld       (memto),hl
  20+ 0000                             ENDM
  21+ 0000
  22+ 0000              ldWriteConst   MACRO  memfrom, memto
  23+ 0000 ~                           ld       a,memfrom
  24+ 0000 ~                           ld       (memto),a
  25+ 0000                             ENDM
  26+ 0000
  27+ 0000              ldWriteZero    MACRO  memto
  28+ 0000 ~                           xor      a
  29+ 0000 ~                           ld       (memto),a
  30+ 0000                             ENDM
  31+ 0000
  32+ 0000              ldIXLaFromN:	MACRO memfrom
  33+ 0000 ~                            ld		a,(memfrom)
  34+ 0000 ~                            ld		ixl,a
  35+ 0000                              ENDM
  36+ 0000
  37+ 0000              ldIXHaFromN:	MACRO memfrom
  38+ 0000 ~                            ld		a,(memfrom)
  39+ 0000 ~                            ld		ixh,a
  40+ 0000                              ENDM
  41+ 0000
  42+ 0000              ldIYLaFromN:	MACRO memfrom
  43+ 0000 ~                            ld		a,(memfrom)
  44+ 0000 ~                            ld		iyl,a
  45+ 0000                              ENDM
  46+ 0000
  47+ 0000              ldIYHaFromN:	MACRO memfrom
  48+ 0000 ~                            ld		a,(memfrom)
  49+ 0000 ~                            ld		iyh,a
  50+ 0000                              ENDM
  51+ 0000
  52+ 0000              ldhlde:			MACRO
  53+ 0000 ~                            ld		h,d
  54+ 0000 ~                            ld		l,e
  55+ 0000                              ENDM
  56+ 0000
  57+ 0000              ldhlbc:			MACRO
  58+ 0000 ~                            ld		h,b
  59+ 0000 ~                            ld		l,c
  60+ 0000                              ENDM
  61+ 0000
  62+ 0000              ldbcde:			MACRO
  63+ 0000 ~                            ld		b,d
  64+ 0000 ~                            ld		c,e
  65+ 0000                              ENDM
  66+ 0000
  67+ 0000              lddebc:			MACRO
  68+ 0000 ~                            ld		d,b
  69+ 0000 ~                            ld		e,c
  70+ 0000                              ENDM
  71+ 0000
  72+ 0000              ldbchl:			MACRO
  73+ 0000 ~                            ld		b,h
  74+ 0000 ~                            ld		c,l
  75+ 0000                              ENDM
  76+ 0000
  77+ 0000              lddeiy:			MACRO
  78+ 0000 ~                            ld		d,iyh
  79+ 0000 ~                            ld		e,iyl
  80+ 0000                              ENDM
  81+ 0000
  82+ 0000              ldiyde:			MACRO
  83+ 0000 ~                            ld		iyh,d
  84+ 0000 ~                            ld		iyl,e
  85+ 0000                              ENDM
  86+ 0000
# file closed: ./Macros/ldCopyMacros.asm
  56  0000                  INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              ldAToHLixl:			MACRO value
   2+ 0000 ~            					ld          hl,value
   3+ 0000 ~            					ex          af,af'
   4+ 0000 ~            					ld          a,ixl
   5+ 0000 ~            					add         hl,a
   6+ 0000 ~            					ex          af,af'
   7+ 0000 ~            					ld          (hl),a
   8+ 0000              					ENDM
   9+ 0000
  10+ 0000              ldAToHLiyl:			MACRO value
  11+ 0000 ~            					ld          hl,value
  12+ 0000 ~            					ex          af,af'
  13+ 0000 ~            					ld          a,iyl
  14+ 0000 ~            					add         hl,a
  15+ 0000 ~            					ex          af,af'
  16+ 0000 ~            					ld          (hl),a
  17+ 0000              					ENDM
  18+ 0000
  19+ 0000
  20+ 0000              ldHLixlToA:         MACRO value
  21+ 0000 ~                                ld          hl,value
  22+ 0000 ~                                ex          af,af'
  23+ 0000 ~                                ld          a,ixl
  24+ 0000 ~                                add         hl,a
  25+ 0000 ~                                ld          a,(hl)
  26+ 0000                                  ENDM
  27+ 0000
  28+ 0000              ldHLiylToA:         MACRO value
  29+ 0000 ~                                ld          hl,value
  30+ 0000 ~                                ex          af,af'
  31+ 0000 ~                                ld          a,iyl
  32+ 0000 ~                                add         hl,a
  33+ 0000 ~                                ld          a,(hl)
  34+ 0000                                  ENDM
  35+ 0000
  36+ 0000              ldHLIdxAToA:        MACRO value
  37+ 0000 ~                                ld          hl,value
  38+ 0000 ~                                add         hl,a
  39+ 0000 ~                                ld          a,(hl)
  40+ 0000                                  ENDM
  41+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
  57  0000
  58  0000
  59  0000              charactersetaddr		equ 15360
  60  0000              STEPDEBUG               equ 1
  61  0000
  62  0000
  63  0000                                      ORG         $8000
  64  8000 F3                                   di
  65  8001                                      ; "STARTUP"
  66  8001                                      MMUSelectLayer1
  66  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  67  8005 CD 47 E0                             call		l1_cls
  68  8008 3E 07                                ld			a,7
  69  800A CD 53 E0                             call		l1_attr_cls_to_a
  70  800D 3E FF                                ld          a,$FF
  71  800F CD 5D E0                             call        l1_set_border
  72  8012                                      MMUSelectSpriteBank
  72  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  73  8016 CD 54 E1                             call		sprite_load_sprite_data
  74  8019              Initialise:             MMUSelectLayer2
  74  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  75  801D CD D0 E0                             call 		l2_initialise
  76  8020 3E FF                                ld          a,$FF
  77  8022 32 4A 83                             ld          (ScreenTransitionForced),a
  78  8025 3E 10        TidyDEBUG:              ld          a,16
  79  8027 32 88 82                             ld          (TidyCounter),a
  80  802A
  81  802A AF           TestText:               xor			a
  82  802B 32 94 93                             ld      (JSTX),a
  83  802E                                      MMUSelectCmdrData
  83  802E ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
  84  8032 CD 1F E0                             call		defaultCommander
  85  8035
  86  8035                                      MMUSelectSpriteBank
  86  8035 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  87  8039 CD 4C E1                             call		init_sprites
  88  803C
  89  803C                                      MMUSelectStockTable
  89  803C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  90  8040 CD AA E0                             call		generate_stock_market ; Normally done on jump to system and start up, should be written on load save to stop market price cheating
  91  8043
  92  8043                                      IFDEF DOUBLEBUFFER
  93  8043                                          MMUSelectLayer2
  93  8043 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  94  8047 CD C9 E0                                 call        l2_cls
  95  804A CD DD E0                                 call  l2_flip_buffers
  96  804D                                      ENDIF
  97  804D
  98  804D                                      ;MMUSelectResetUniv
  99  804D CD 4B 83                             call		ResetUniv
  99  8050
 100  8050 CD 6A 83                             call        ResetGalaxy
 101  8053                                      MMUSelectGalaxyN 0
 101  8053 ED 91 57 5B >                     nextreg GalaxyDataMMU,     BankGalaxyData0+0
 102  8057 CD 90 FC                             call        SeedGalaxy
 103  805A
 104  805A                                      MMUSelectLayer2
 104  805A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 105  805E                                      MMUSelectUniverseN 0
 105  805E ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 106  8062 CD C9 E0                             call        l2_cls
 107  8065                                      IFDEF DOUBLEBUFFER
 108  8065                                          MMUSelectLayer2
 108  8065 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 109  8069 CD DD E0                                 call  l2_flip_buffers
 110  806C                                      ENDIF
 111  806C
 112  806C 3A FE 81     InitialiseDemoShip:     ld      a,(currentDemoShip)
 113  806F                                      MMUSelectUniverseN 0                          ; load up register into universe bank
 113  806F ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 114  8073 CD 24 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 115  8076                                      MMUSelectShipModelsA
 115  8076 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModelsA
 116  807A 3A FE 81                             ld		a,(currentDemoShip)
 117  807D CD 58 E0                             call    CopyShipDataToUBnk
 118  8080 3E 03                                ld      a,3
 119  8082 32 E4 93                             ld      (MenuIdMax),a
 120  8085 3E FF                                ld      a,$FF                               ; Starts Docked
 121  8087 32 E9 93                             ld      (DockedFlag),a
 122  808A              ;                        call    InitialiseFrontView
 123  808A CD 93 83                             call    InitialiseCommander
 124  808D                                      MMUSelectUniverseN 0
 124  808D ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 125  8091 CD 44 84                             call    SetInitialShipPosition
 126  8094              ;..................................................................................................................................
 127  8094 CD 2B 97     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 128  8097 CD D3 90                             call    scan_keyboard
 129  809A CD AD 81     DemoOfShipsDEBUG:       call    TestForNextShip
 130  809D 3E 00        ScreenTransBlock:       ld      a,$0
 131  809F FE 01                                cp      1
 132  80A1 CA 39 81                             jp      z,CheckIfViewUpdate                 ; as we are in a transition the whole update AI is skipped
 133  80A4 CD F7 83                             call    ViewKeyTest
 134  80A7 CD D4 81                             call    TestPauseMode
 135  80AA 3A EA 93                             ld      a,(GamePaused)
 136  80AD FE 00                                cp      0
 137  80AF 20 E3                                jr      nz,MainLoop
 138  80B1 3A E9 93                             ld      a,(DockedFlag)
 139  80B4 FE 00                                cp      0
 140  80B6                                      ;call    z,ThrottleTest                      ; only use throttle if flying, may expand the logic to include hyperspace, not sure yet
 141  80B6 CD 64 92                             call    MovementKeyTest
 142  80B9              ;Process cursor keys for respective screen
 143  80B9 3A C8 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 144  80BC                                      IfAIsZeroGoto     AreWeDocked
 144  80BC FE 00       >				cp	0
 144  80BE CA C9 80    >				jp	z,AreWeDocked
 145  80C1 3E 00        HandleBankSelect:       ld      a,$00
 146  80C3                                      MMUSelectScreenA
 146  80C3 ED 92 56    >                     nextreg ScreenBankMMU,		a
 147  80C6 CD 00 00     CallCursorRoutine:      call    $0000
 148  80C9              ; need to optimise so not looping over agint for all universe doign ingle updates
 149  80C9              AreWeDocked:
 150  80C9 3A E9 93                             ld      a,(DockedFlag)
 151  80CC FE FF                                cp      $FF
 152  80CE CA 73 81                             jp      z,LoopRepeatPoint
 153  80D1              UpdateUniverse:         MMUSelectUniverseN 0
 153  80D1 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 154  80D5 3A 13 C3     .CheckIfWeAreDocking:   ld      a,(ShipTypeAddr)
 155  80D8 FE 02                                cp      ShipTypeStation                     ; is it a station
 156  80DA 20 43                                jr      nz,.NotDockingCheck
 157  80DC 21 14 C3                             ld      hl,ShipNewBitsAddr                  ; is it angry
 158  80DF CB 66                                bit     4,(hl)
 159  80E1 20 3C                                jr      nz,.NotDockingCheck                 ; if so the doors are shut
 160  80E3 ED 4B 0B C0  .CheckIfInRangeHi:      ld      bc,(UBnKxlo)
 161  80E7 2A 0E C0                             ld      hl,(UBnKylo)
 162  80EA ED 5B 11 C0                          ld      de,(UBnKzlo)
 163  80EE 78                                   ld      a,b
 164  80EF B4                                   or      h
 165  80F0 B2                                   or      d
 166  80F1 20 2C                                jr      nz,.NotDockingCheck
 167  80F3 79                                   ld      a,c
 168  80F4 B5                                   or      l
 169  80F5 B3                                   or      e
 170  80F6 E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 171  80F8 3A 25 C0                             ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 172  80FB                                      JumpIfALTNusng 214, .NotDockingCheck        ; this is the magic angle to be within 26 degrees +/-
 172  80FB FE D6       >                        cp      214
 172  80FD DA 1F 81    >                        jp		c,.NotDockingCheck
 173  8100 CD 22 82                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 174  8103 CB 7F                                bit     7,a                                 ; if its negative
 175  8105 20 18                                jr      nz,.NotDockingCheck                  ; we are flying away from it
 176  8107                                      JumpIfALTNusng 89, .NotDockingCheck         ; if the axis <89 the we are not in the 22 degree angle
 176  8107 FE 59       >                        cp      89
 176  8109 DA 1F 81    >                        jp		c,.NotDockingCheck
 177  810C 3A 1B C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 178  810F E6 7F                                and     SignMask8Bit
 179  8111                                      JumpIfALTNusng 80, .NotDockingCheck         ; note 80 decimal for 36.6 degrees
 179  8111 FE 50       >                        cp      80
 179  8113 DA 1F 81    >                        jp		c,.NotDockingCheck
 180  8116              .GoingIn:
 181  8116                                    MMUSelectLayer1
 181  8116 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 182  811A 3E 06                              ld        a,$6
 183  811C CD 5D E0                           call      l1_set_border
 184  811F                                      ; call    EnterDockingBay
 185  811F                                    ; jp      LoopRepeatPoint
 186  811F CD E8 D9     .NotDockingCheck:       call    ApplyMyRollAndPitch
 187  8122                                     ;  call    DEBUGSETNODES
 188  8122                                      ;       call    DEBUGSETPOS
 189  8122 21 88 82                             ld      hl,TidyCounter
 190  8125 35                                   dec     (hl)
 191  8126 20 05                                jr      nz ,.SkipTidy
 192  8128 3E 10                                ld      a,16
 193  812A 32 88 82                             ld      (TidyCounter),a
 194  812D                                     ; call    TIDY
 195  812D              .SkipTidy:
 196  812D CD BF DA                             call   ProcessNodes
 197  8130              DrawShipTest:           MMUSelectLayer1
 197  8130 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 198  8134 3E DF                                ld     a,$DF
 199  8136 32 ED E8                             ld     (line_gfx_colour),a
 200  8139 3E 00        CheckIfViewUpdate:      ld      a,$00
 201  813B FE 00                                cp      0
 202  813D 28 24                                jr      z, MenusLoop; This will change as more screens are added TODO
 203  813F CD BC CF     SpecificCodeWhenInView: call   SetAllFacesVisible
 204  8142 CD 0C D4                             call   CullV2				; culling but over aggressive backface assumes all 0 up front TOFIX
 205  8145 CD 91 DB                             call   PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 206  8148                                      MMUSelectLayer2
 206  8148 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 207  814C CD C9 E0                             call   l2_cls
 208  814F                                      MMUSelectUniverseN 0
 208  814F ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 209  8153 CD 58 8F                             call   DrawLines                   ; Need to plot all lines
 210  8156 CD 6B 8C     DrawStars:              call   StarsForward
 211  8159                                      MMUSelectViewFront
 211  8159 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 212  815D CD 93 84                             call   UpdateConsole
 213  8160 C3 73 81                             jp LoopRepeatPoint
 214  8163 2A 71 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 215  8166 7C                                   ld      a,h
 216  8167 B5                                   or      l
 217  8168 CA 73 81                             jp      z,LoopRepeatPoint
 218  816B 3E 00        ScreenLoopBank:         ld      a,$0
 219  816D                                      MMUSelectScreenA
 219  816D ED 92 56    >                     nextreg ScreenBankMMU,		a
 220  8170 CD 00 00     ScreenLoopJP:           call    $0000
 221  8173              LoopRepeatPoint:
 222  8173 3E 00        DoubleBufferCheck:      ld      a,00
 223  8175                                      IFDEF DOUBLEBUFFER
 224  8175 FE 00                                    cp      0
 225  8177 CA 94 80                                 jp      z,MainLoop
 226  817A                                          MMUSelectLayer2
 226  817A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 227  817E 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 228  8181 FE 00                                    cp     0
 229  8183 C4 DD E0                                 call   nz,l2_flip_buffers
 230  8186                                      ENDIF
 231  8186 3A 4A 83                             ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 232  8189 FE FF                                cp      $FF
 233  818B CA 94 80                             jp      z,MainLoop
 234  818E 57           .BruteForceChange:      ld      d,a
 235  818F 1E 10                                ld      e,ScreenMapRow
 236  8191 ED 30                                mul
 237  8193 DD 21 AA 82                          ld      ix,ScreenKeyMap
 238  8197 DD 19                                add     ix,de                               ; Force screen transition
 239  8199 CD A7 83                             call    SetScreenAIX
 240  819C C3 94 80                             jp MainLoop
 241  819F              ;..................................................................................................................................
 242  819F              	;call		keyboard_main_loop
 243  819F
 244  819F 3E FF        EnterDockingBay:        ld      a,$FF
 245  81A1 32 E9 93                             ld      (DockedFlag),a
 246  81A4 32 4A 83                             ld      (ScreenTransitionForced),a
 247  81A7 3E 05                                ld      a,5
 248  81A9 32 E1 93                             ld      (ScreenIndex),a
 249  81AC                                              ; Force status screen
 250  81AC C9                                   ret
 251  81AD
 252  81AD 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 253  81AF CD 5A 91                             call    is_key_pressed
 254  81B2 C0                                   ret     nz
 255  81B3 3A FE 81                             ld      a,(currentDemoShip)
 256  81B6 3C                                   inc     a
 257  81B7 FE 2C                                cp      44
 258  81B9 20 01                                jr      nz,.TestOK
 259  81BB AF                                   xor     a
 260  81BC 32 FE 81     .TestOK:                ld      (currentDemoShip),a
 261  81BF                                      MMUSelectUniverseN 0
 261  81BF ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 262  81C3 CD 24 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 263  81C6 3A FE 81                             ld      a,(currentDemoShip)
 264  81C9                                      MMUSelectShipModelsA
 264  81C9 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModelsA
 265  81CD CD 58 E0                             call    CopyShipDataToUBnk
 266  81D0 CD 44 84                             call    SetInitialShipPosition
 267  81D3 C9                                   ret
 268  81D4
 269  81D4 3A EA 93     TestPauseMode:          ld      a,(GamePaused)
 270  81D7 FE 00                                cp      0
 271  81D9 20 12                                jr      nz,.TestForResume
 272  81DB 3A E1 93     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 273  81DE                                      ReturnIfAGTENusng       ScreenFront
 273  81DE FE 09       >                   cp    ScreenFront
 273  81E0 D0          >                   ret	 nc
 274  81E1 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 275  81E3 CD 5A 91                             call    is_key_pressed
 276  81E6 C0                                   ret     nz
 277  81E7 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 278  81E9 32 EA 93                             ld      (GamePaused),a
 279  81EC C9                                   ret
 280  81ED 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 281  81EF CD 5A 91                             call    is_key_pressed
 282  81F2 C0                                   ret     nz
 283  81F3 AF           .ResumePressed:         xor     a
 284  81F4 32 EA 93                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 285  81F7 C9                                   ret
 286  81F8
 287  81F8 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 288  81FA CD 5A 91                             call    is_key_pressed
 289  81FD C9                                   ret
 290  81FE 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 291  81FF
 292  81FF
 293  81FF 21 89 82     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
 294  8202 11 0B C0                             ld      de,UBnKxlo
 295  8205 01 09 00                             ld      bc,9
 296  8208 ED B0                                ldir
 297  820A 21 92 82                             ld      hl,DEBUGROTMATDATA
 298  820D 11 14 C0                             ld      de,UBnkrotmatSidevX
 299  8210 01 12 00                             ld      bc,6*3
 300  8213 ED B0                                ldir
 301  8215 C9                                   ret
 302  8216
 303  8216 21 89 82     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
 304  8219 11 0B C0                             ld      de,UBnKxlo
 305  821C 01 06 00                             ld      bc,9 - 3
 306  821F ED B0                                ldir
 307  8221 C9                                   ret
 308  8222
 309  8222
 310  8222 21 0B C0     GetStationVectorToWork: ld      hl,UBnKxlo
 311  8225 11 F9 93                             ld      de,varVector9ByteWork
 312  8228 ED A0                                ldi
 313  822A ED A0                                ldi
 314  822C ED A0                                ldi
 315  822E ED A0                                ldi
 316  8230 ED A0                                ldi
 317  8232 ED A0                                ldi
 318  8234 ED A0                                ldi
 319  8236 ED A0                                ldi
 320  8238 ED A0                                ldi
 321  823A 2A F9 93     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 322  823D ED 5B FC 93                          ld      de, (varVector9ByteWork+3); Y
 323  8241 ED 4B FF 93                          ld      bc, (varVector9ByteWork+6); Z
 324  8245 7D                                   ld      a,l
 325  8246 B3                                   or      e
 326  8247 B1                                   or      c
 327  8248 F6 01                                or      1
 328  824A DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 329  824C 7C                                   ld      a,h
 330  824D B2                                   or      d
 331  824E B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 332  824F C5           .MulBy2Loop:            push    bc
 333  8250 DD 45                                ld      b,ixl
 334  8252 CB 20                                sla     b                       ; Shift ixl left
 335  8254 DD 68                                ld      ixl,b
 336  8256 C1                                   pop     bc
 337  8257 CB 17                                rl      a                       ; roll into a
 338  8259 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 339  825B                                      ShiftHLLeft1                    ; Shift Left X
 339  825B CB 25       >			   sla l
 339  825D CB 14       >			   rl  h
 340  825F                                      ShiftDELeft1                    ; Shift Left Y
 340  825F CB 23       >			   sla e
 340  8261 CB 12       >			   rl  d
 341  8263                                      ShiftBCLeft1                    ; Shift Left Z
 341  8263 CB 21       >			   sla c
 341  8265 CB 10       >			   rl  b
 342  8267 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 343  8269 3A FB 93     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 344  826C CB 3C                                srl     h
 345  826E B4                                   or      h
 346  826F 32 74 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 347  8272 3A FE 93                             ld      a,(varVector9ByteWork+5); y sign
 348  8275 CB 3A                                srl     d
 349  8277 B2                                   or      d
 350  8278 32 75 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 351  827B 3A 01 94                             ld      a,(varVector9ByteWork+8); y sign
 352  827E CB 38                                srl     b
 353  8280 B0                                   or      b
 354  8281 32 76 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 355  8284 CD 60 A4                             call    normaliseXX1596fast
 356  8287 C9                                   ret                             ; will return with a holding Vector Z
 357  8288
 358  8288 00           TidyCounter             DB  0
 359  8289
 360  8289
 361  8289              ; culltest
 362  8289              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
 363  8289 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
 363  828D 00 00 5C 07
 363  8291 00
 364  8292 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
 364  8296 00 00
 365  8298 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
 365  829C 00 00
 366  829E 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
 366  82A2 00 E0
 367  82A4
 368  82A4              ; FAILS due to sharp angle, OK now
 369  82A4              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
 370  82A4              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
 371  82A4              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
 372  82A4              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
 373  82A4              ; TOP RIGHT CORNER Passes as python and cobra
 374  82A4              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
 375  82A4              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
 376  82A4              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
 377  82A4              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
 378  82A4              ; Looks OK
 379  82A4              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
 380  82A4              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
 381  82A4              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
 382  82A4              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
 383  82A4              ;
 384  82A4              ; Massive horizontal line
 385  82A4              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
 386  82A4              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
 387  82A4              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
 388  82A4              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
 389  82A4              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
 390  82A4              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
 391  82A4              ; Line lost in clipping
 392  82A4              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
 393  82A4              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
 394  82A4              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
 395  82A4              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
 396  82A4              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
 397  82A4              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
 398  82A4              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
 399  82A4              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
 400  82A4              ;
 401  82A4              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
 402  82A4              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
 403  82A4              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
 404  82A4              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
 405  82A4              ; top left off right issue
 406  82A4              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
 407  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 408  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 409  82A4              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 410  82A4              ; test middle of screen
 411  82A4              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
 412  82A4              ;
 413  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 414  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 415  82A4              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 416  82A4              ; test middle of screen futher away
 417  82A4              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
 418  82A4              ;
 419  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 420  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 421  82A4              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 422  82A4
 423  82A4              ; Test left center clip still warping
 424  82A4              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
 425  82A4              ;
 426  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 427  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 428  82A4              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 429  82A4              ; Test right center clip - seems to be warping values towards bottom of screen on clip
 430  82A4              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
 431  82A4              ;
 432  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 433  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 434  82A4              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 435  82A4              ; Test top center clip test 1 - good test many ships fail
 436  82A4              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
 437  82A4              ;
 438  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 439  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 440  82A4              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 441  82A4              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 442  82A4              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 443  82A4              ;
 444  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 445  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 446  82A4              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 447  82A4              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 448  82A4              ; looks better now may have some clipping issues maybe ship data
 449  82A4              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 450  82A4              ;
 451  82A4              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 452  82A4              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 453  82A4 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 453  82A8 B0 55
 454  82AA              ; Test left top center clip
 455  82AA
 456  82AA              ; Test right top center clip
 457  82AA              ; Test left bottom center clip
 458  82AA              ; Test right bottom center clip
 459  82AA
 460  82AA              ; Tests with no clip
 461  82AA              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 462  82AA              ;
 463  82AA              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 464  82AA              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 465  82AA              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 466  82AA              ;
 467  82AA              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 468  82AA              ;
 469  82AA              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 470  82AA              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 471  82AA
 472  82AA
 473  82AA              ;TODO Optimisation
 474  82AA              ; Need this table to handle differnet events
 475  82AA              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 476  82AA              ; cursor key, joystick press
 477  82AA              ; cursor key, joystick press
 478  82AA              ; non cursor keys presses
 479  82AA              ;
 480  82AA              ; First byte is now docked flag
 481  82AA              ;
 482  82AA              ; Padded to 8 bytes to allow a * 8 for addressing
 483  82AA              ; Byte 0 - Docked flag  : 0 = not applicable, 1 = only whilst docked, 2 = only when not docked
 484  82AA              ; Byte 1 - Screen Id
 485  82AA              ; Byte 2,3 - address of keypress table
 486  82AA              ; Byte 4   - Bank with Display code
 487  82AA              ; Byte 5,6 - Function for display
 488  82AA              ; Byte 7,8 - Main loop update routine
 489  82AA              ; Byte 9   - Draw stars Y/N
 490  82AA              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 491  82AA              ; byte 11  - Double Buffering 0 = no, 1 = yes
 492  82AA              ; byte 12,13  - cursor key input
 493  82AA              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 494  82AA 00 00 83 90  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $00,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 494  82AE 32 FC C3 00
 494  82B2 00 00 00 00
 494  82B6 5A C4 00 00
 495  82BA 00 01 81 90  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $00,$00
 495  82BE 33 43 C1 62
 495  82C2 C2 00 00 00
 495  82C6 05 C3 00 00
 496  82CA 01 02 85 90                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,$00,$00,$00
 496  82CE 36 43 C3 FA
 496  82D2 C3 00 00 00
 496  82D6 00 00 00 00
 497  82DA 02 03 85 90                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 497  82DE 36 43 C3 00
 497  82E2 00 00 00 00
 497  82E6 00 00 00 00
 498  82EA 00 04 87 90  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,$00,$00,$00
 498  82EE 3F 1E CF 62
 498  82F2 CF 00 00 00
 498  82F6 00 00 00 00
 499  82FA 00 05 89 90                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 499  82FE 34 F5 C1 00
 499  8302 00 00 00 00
 499  8306 00 00 00 00
 500  830A 00 06 97 90                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 500  830E 35 F0 C2 00
 500  8312 00 00 00 00
 500  8316 00 00 00 00
 501  831A 01 07 7F 90                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,$00,$00,$00
 501  831E 40 EA D3 86
 501  8322 D4 00 00 00
 501  8326 00 00 00 00
 502  832A 01 08 79 90                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,$00,$00,$00
 502  832E 41 FE C0 76
 502  8332 C1 00 01 01
 502  8336 00 00 00 00
 503  833A 02 09 4F 90  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 503  833E 3E 38 C0 00
 503  8342 00 01 00 01
 503  8346 76 C0 00 00
 504  834A              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 505  834A              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 506  834A              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 507  834A              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 508  834A              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 509  834A              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 510  834A FF           ScreenTransitionForced  DB $FF
 511  834B                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 834B              ; Use bank 0 as source and bank 7 as write target
   2+ 834B              ResetUniv:
   3+ 834B                  MODULE ResetUniv
   4+ 834B              ; Move bank 70 into page 0
   5+ 834B                  MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   5+ 834B ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   6+ 834F 3E 47        	ld		a,BankUNIVDATA1 				 ; we can read bank 0 as if it was rom
   7+ 8351 06 0C        	ld		b,12
   8+ 8353              ResetCopyLoop:
   9+ 8353 C5           	push	bc
  10+ 8354              	MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
  10+ 8354 ED 92 56    >                     nextreg UniverseMMU,       a
  11+ 8357 F5           	push	af
  12+ 8358 21 00 C0     	ld		hl,UniverseBankAddr
  13+ 835B 11 00 00     	ld		de,dmaCopySrcAddr
  14+ 835E 01 4B 1C     	ld		bc,UnivBankSize
  15+ 8361 CD FA 8F     	call	memcopy_dma
  16+ 8364 F1           	pop		af
  17+ 8365 C1           	pop		bc
  18+ 8366 3C           	inc		a
  19+ 8367 10 EA        	djnz	ResetCopyLoop
  20+ 8369 C9           	ret
  21+ 836A                  ENDMODULE
  22+ 836A
  23+ 836A              ; Use bank 0 as source and bank 7 as write target
  24+ 836A              ResetGalaxy:
  25+ 836A                  MODULE ResetGalaxy
  26+ 836A              ; Move bank 70 into page 0
  27+ 836A                  MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0
  27+ 836A ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  28+ 836E 3E 5C        	ld		a,BankGalaxyData1 			   	 ; we can read bank 0 as if it was rom
  29+ 8370 06 08        	ld		b,8
  30+ 8372 0E 01            ld      c,1
  31+ 8374              ResetCopyLoop:
  32+ 8374 F5           	push	af
  33+ 8375 C5           	push	bc
  34+ 8376              	MMUSelectGalaxyA    	             ; copy from bank 0 to 71 to 12
  34+ 8376 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  35+ 8379 21 00 E0     	ld		hl,GalaxyDataAddr
  36+ 837C 11 00 00     	ld		de,dmaCopySrcAddr
  37+ 837F 01 CD 1C     	ld		bc,GalaxyBankSize
  38+ 8382 CD FA 8F     	call	memcopy_dma
  39+ 8385 C1           	pop		bc
  40+ 8386 21 0F E0         ld      hl, galaxy_pg_cnt
  41+ 8389 79               ld      a,c
  42+ 838A C6 30            add     a, $30
  43+ 838C 77               ld      (hl),a
  44+ 838D 0C               inc     c
  45+ 838E F1               pop     af
  46+ 838F 3C           	inc		a
  47+ 8390 10 E2        	djnz	ResetCopyLoop
  48+ 8392 C9           	ret
  49+ 8393                  ENDMODULE
# file closed: ./GameEngine/resetUniverse.asm
 512  8393
 513  8393
 514  8393 3A EB 82     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 515  8396 DD 21 EA 82                          ld      ix,ScreenCmdr
 516  839A C3 A7 83                             jp      SetScreenAIX
 517  839D
 518  839D 3A 3B 83     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 519  83A0 DD 21 3A 83                          ld      ix,ScreenKeyFront
 520  83A4 C3 A7 83                             jp      SetScreenAIX
 521  83A7              ; false ret here as we get it free from jp
 522  83A7
 523  83A7              ;----------------------------------------------------------------------------------------------------------------------------------
 524  83A7 32 E1 93     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to ixl
 525  83AA AF                                   xor     a
 526  83AB 3D                                   dec     a                               ; set A to FF
 527  83AC 32 4A 83                             ld      (ScreenTransitionForced),a      ; In case it was called by a brute force change in an update loop
 528  83AF 32 E0 93                             ld      (ScreenChanged),a               ; Set screen changed to FF
 529  83B2 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 530  83B5 32 6C 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 531  83B8 32 C2 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 532  83BB                                      MMUSelectScreenA
 532  83BB ED 92 56    >                     nextreg ScreenBankMMU,		a
 533  83BE DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 534  83C1 32 F5 83                             ld      (ScreenUpdateAddr+1),a
 535  83C4 DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 536  83C7 32 F6 83                             ld      (ScreenUpdateAddr+2),a
 537  83CA DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 538  83CD 32 71 81                             ld      (ScreenLoopJP+1),a
 539  83D0 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 540  83D3 32 72 81                             ld      (ScreenLoopJP+2),a
 541  83D6 DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 542  83D9 32 3A 81                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 543  83DC DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 544  83DF 32 9E 80                             ld      (ScreenTransBlock+1),a          ; Set flag to block transitions as needed e.g. launch screen
 545  83E2 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 546  83E5 32 74 81                             ld      (DoubleBufferCheck+1),a
 547  83E8 DD 7E 0C                             ld      a,(ix+12)
 548  83EB 32 C7 80                             ld      (CallCursorRoutine+1),a
 549  83EE DD 7E 0D                             ld      a,(ix+13)
 550  83F1 32 C8 80                             ld      (CallCursorRoutine+2),a
 551  83F4
 552  83F4 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 553  83F7              ;----------------------------------------------------------------------------------------------------------------------------------
 554  83F7 3A E1 93     ViewKeyTest:            ld      a,(ScreenIndex)
 555  83FA 4F                                   ld      c,a
 556  83FB 06 0A                                ld      b,ScreenMapLen                  ; For now until add screens are added
 557  83FD DD 21 AA 82                          ld      ix,ScreenKeyMap
 558  8401 DD 7E 00     ViewScanLoop:           ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 559  8404 FE 00                                cp      0
 560  8406 28 14                                jr      z,.NoDocCheck
 561  8408 57           .DocCheck:              ld      d,a
 562  8409 3A E9 93                             ld      a,(DockedFlag)
 563  840C FE 00                                cp      0
 564  840E 28 07                                jr      z,.NotDockedCheck
 565  8410 7A           .DockedCheck:           ld      a,d
 566  8411 FE 01                                cp      1
 567  8413 20 27                                jr      nz,NotReadNextKey
 568  8415 18 05                                jr      .NoDocCheck
 569  8417 7A           .NotDockedCheck:        ld      a,d
 570  8418 FE 02                                cp      2
 571  841A 20 20                                jr      nz,NotReadNextKey
 572  841C DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 573  841F B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 574  8420 5F                                   ld      e,a
 575  8421 28 19                                jr      z,NotReadNextKey
 576  8423 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 577  8426 32 30 84                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 578  8429 DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 579  842C 32 31 84                             ld      (ReadKeyAddr+2),a
 580  842F 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 581  8432 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 582  8433                                      IfAIsZeroGoto NotReadNextKey
 582  8433 FE 00       >				cp	0
 582  8435 CA 3C 84    >				jp	z,NotReadNextKey
 583  8438 7B           .ValidScreenChange:     ld      a,e
 584  8439 C3 A7 83                             jp      SetScreenAIX
 585  843C              ;--- CODE WILL NOT FALL TO HERE ---
 586  843C 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 587  843F DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 588  8441 10 BE                                djnz    ViewScanLoop
 589  8443 C9                                   ret
 590  8444
 591  8444 21 00 00     SetInitialShipPosition: ld      hl,$0000
 592  8447 22 0B C0                             ld      (UBnKxlo),hl
 593  844A 21 00 00                             ld      hl,$0000
 594  844D 22 0E C0                             ld      (UBnKylo),hl
 595  8450 21 B4 08                             ld      hl,$08B4
 596  8453 22 11 C0                             ld      (UBnKzlo),hl
 597  8456 AF                                   xor     a
 598  8457 32 0D C0                             ld      (UBnKxsgn),a
 599  845A 32 10 C0                             ld      (UBnKysgn),a
 600  845D 32 13 C0                             ld      (UBnKzsgn),a
 601  8460              ;    call    Reset TODO
 602  8460 CD AF CC                             call	InitialiseOrientation            ;#00;
 603  8463 3E 01                                ld      a,1
 604  8465 32 D4 93                             ld      (DELTA),a
 605  8468 21 04 00                             ld      hl,4
 606  846B 22 D5 93                             ld      (DELTA4),hl
 607  846E C9                                   ret
 608  846F
 609  846F 1E 10        Draw3Lines:             ld      e,16
 610  8471 C5 D5                                push    bc,,de
 611  8473                                      MMUSelectLayer2
 611  8473 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 612  8477 CD 62 E2                             call    l2_draw_horz_line
 613  847A D1 C1                                pop     bc,,de
 614  847C 05                                   dec     b
 615  847D C5 D5                                push    bc,,de
 616  847F 1E 14                                ld      e,20
 617  8481                                      MMUSelectLayer2
 617  8481 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 618  8485 CD 62 E2                             call    l2_draw_horz_line
 619  8488 D1 C1                                pop     bc,,de
 620  848A 05                                   dec     b
 621  848B                                      MMUSelectLayer2
 621  848B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 622  848F CD 62 E2                             call    l2_draw_horz_line
 623  8492 C9                                   ret
 624  8493
 625  8493 3A D4 93     UpdateConsole:          ld      a,(DELTA)
 626  8496 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 627  8498 28 0C                                jr      z,.UpdateRoll
 628  849A 01 D1 84                             ld      bc,SpeedoStart
 629  849D 21 C7 96                             ld      hl,SpeedoMapping
 630  84A0 ED 31                                add     hl,a
 631  84A2 56                                   ld      d,(hl)
 632  84A3 CD 6F 84                             call    Draw3Lines
 633  84A6 3A 97 93     .UpdateRoll:            ld      a,(ALP1)
 634  84A9 FE 00                                cp      0
 635  84AB 28 30                                jr      z,.UpdatePitch
 636  84AD 21 E0 8A                             ld      hl,RollMiddle
 637  84B0 3A 98 93                             ld      a,(ALP2)
 638  84B3 FE 00                                cp      0
 639  84B5 28 18                                jr      z,.PosRoll
 640  84B7 16 00        .NegRoll:               ld      d,0
 641  84B9 3A 97 93                             ld      a,(ALP1)
 642  84BC CB 27                                sla     a
 643  84BE 5F                                   ld      e,a
 644  84BF B7                                   or      a
 645  84C0 ED 52                                sbc     hl,de
 646  84C2 44 4D                                ld      bc,hl
 647  84C4 3E E1                                ld      a,DialMiddleXPos
 648  84C6 91                                   sub     c
 649  84C7 57                                   ld      d,a
 650  84C8 1E FF                                ld      e,$FF
 651  84CA CD 6F 84                             call    Draw3Lines
 652  84CD 18 0E                                jr      .UpdatePitch
 653  84CF 01 E0 8A     .PosRoll:               ld      bc,RollMiddle
 654  84D2 3A 97 93                             ld      a,(ALP1)
 655  84D5 CB 27                                sla     a
 656  84D7 57                                   ld      d,a
 657  84D8 1E FF                                ld      e,$FF
 658  84DA CD 6F 84                             call    Draw3Lines
 659  84DD 3A 8A 93     .UpdatePitch:           ld      a,(BET1)
 660  84E0 FE 00                                cp      0
 661  84E2 28 30                                jr      z,.DoneConsole
 662  84E4 21 E0 92                             ld      hl,PitchMiddle
 663  84E7 3A 8B 93                             ld      a,(BET2)
 664  84EA FE 00                                cp      0
 665  84EC 28 18                                jr      z,.PosPtich
 666  84EE 16 00        .NegPitch:              ld      d,0
 667  84F0 3A 8A 93                             ld      a,(BET1)
 668  84F3 CB 27                                sla     a
 669  84F5 5F                                   ld      e,a
 670  84F6 B7                                   or      a
 671  84F7 ED 52                                sbc     hl,de
 672  84F9 44 4D                                ld      bc,hl
 673  84FB 3E E1                                ld      a,DialMiddleXPos
 674  84FD 91                                   sub     c
 675  84FE 57                                   ld      d,a
 676  84FF 1E FF                                ld      e,$FF
 677  8501 CD 6F 84                             call    Draw3Lines
 678  8504 18 0E                                jr      .DoneConsole
 679  8506 01 E0 92     .PosPtich:              ld      bc,PitchMiddle
 680  8509 3A 8A 93                             ld      a,(BET1)
 681  850C CB 27                                sla     a
 682  850E 57                                   ld      d,a
 683  850F 1E FF                                ld      e,$FF
 684  8511 CD 6F 84                             call    Draw3Lines
 685  8514 CD C7 85     .DoneConsole:           call    UpdateRadar
 686  8517 C9                                   ret
 687  8518
 688  8518              ScannerX                equ 128
 689  8518              ScannerY                equ 171
 690  8518              ScannerBottom           equ 190
 691  8518              ScannerTypeMissle       equ 2
 692  8518              ScannerXRangeOffset     equ $35
 693  8518              ScannerCenter           equ 127
 694  8518
 695  8518              ScannerDefault          equ 0
 696  8518              ScannerMissile          equ 2
 697  8518              ScannerStation          equ 4
 698  8518              ScannerEnemy            equ 6
 699  8518
 700  8518 10 1C 90 FC  ScannerColourTable:     DB  16,28,144,252,18,31,128,224
 700  851C 12 1F 80 E0
 701  8520
 702  8520              GetShipColor:           MACRO
 703  8520 ~                                    ld      a,(ShipTypeAddr)
 704  8520 ~                                    sla     a                            ; as its byte pairs * 2
 705  8520 ~                                    ld      hl,ScannerColourTable
 706  8520 ~                                    add     hl,a
 707  8520 ~                                    ld      a,(hl)
 708  8520                                      ENDM
 709  8520              GetShipColorBright:     MACRO
 710  8520 ~                                    ld      a,(ShipTypeAddr)
 711  8520 ~                                    sla     a                            ; as its byte pairs * 2
 712  8520 ~                                    inc     a
 713  8520 ~                                    ld      hl,ScannerColourTable
 714  8520 ~                                    add     hl,a
 715  8520 ~                                    ld      a,(hl)
 716  8520                                      ENDM
 717  8520
 718  8520              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 719  8520              UpdateScannerShip:
 720  8520 3A 2A C0                             ld      a,(UBnkexplDsp)             ; if bit 4 is clear then ship should not be drawn
 721  8523 CB 67                                bit     4,a                         ; .
 722  8525                                      ;DEBUG ret     z                           ; .
 723  8525 3A 13 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 724  8528 CB 7F                                bit     7,a
 725  852A C0                                   ret     nz
 726  852B              ; DEBUG Add in station types later
 727  852B 2A 11 C0     .NotMissile:            ld      hl,(UBnKzlo)
 728  852E ED 5B 0B C0                          ld      de,(UBnKxlo)
 729  8532 ED 4B 0E C0                          ld      bc,(UBnKylo)
 730  8536 7C                                   ld      a,h
 731  8537 B2                                   or      d
 732  8538 B0                                   or      b
 733  8539 E6 C0                                and     %11000000
 734  853B C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 735  853C 3A 0D C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 736  853F CB 7F                                bit     7,a
 737  8541 28 04                                jr      z,.absXHi
 738  8543                                      NegD
 738  8543 7A          >                ld      a,d
 738  8544 ED 44       >                neg
 738  8546 57          >                ld      d,a
 739  8547 7A           .absXHi:                ld      a,d
 740  8548 C6 80                                add     ScannerX
 741  854A DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 742  854C CB 3C        .ProcessZCoord:         srl     h
 743  854E CB 3C                                srl     h
 744  8550 3A 13 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 745  8553 CB 7F                                bit     7,a
 746  8555 28 04                                jr      z,.absZHi
 747  8557                                      NegH
 747  8557 7C          >                ld      a,h
 747  8558 ED 44       >                neg
 747  855A 67          >                ld      h,a
 748  855B 3E AB        .absZHi:                ld      a,ScannerY
 749  855D 94                                   sub     h
 750  855E FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 751  8560 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 752  8562 20 19                                jr      nz,.StickHasLength
 753  8564 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 754  8566 FD 6F                                ld      iyl,a
 755  8568 DD 7D                                ld      a,ixl
 756  856A                                      GetShipColorBright
 756  856A 3A 13 C3    >                        ld      a,(ShipTypeAddr)
 756  856D CB 27       >                        sla     a                            ; as its byte pairs * 2
 756  856F 3C          >                        inc     a
 756  8570 21 18 85    >                        ld      hl,ScannerColourTable
 756  8573 ED 31       >                        add     hl,a
 756  8575 7E          >                        ld      a,(hl)
 757  8576                                      MMUSelectLayer2
 757  8576 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 758  857A C3 B4 85                             jp      .NoStick
 759  857D 3A 10 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 760  8580 CB 7F                                bit     7,a
 761  8582 28 04                                jr      z,.absYHi
 762  8584                                      NegB
 762  8584 78          >                ld      a,b
 762  8585 ED 44       >                neg
 762  8587 47          >                ld      b,a
 763  8588 FD 7C        .absYHi:                ld      a,iyh
 764  858A 90           .SetStickPos:           sub     b
 765  858B                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 765  858B FE BE       >                        cp      ScannerBottom
 765  858D DA 92 85    >                        jp		c,.StickOnScreen
 766  8590 3E BE                                ld      a,ScannerBottom
 767  8592 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 768  8594                                      GetShipColor
 768  8594 3A 13 C3    >                        ld      a,(ShipTypeAddr)
 768  8597 CB 27       >                        sla     a                            ; as its byte pairs * 2
 768  8599 21 18 85    >                        ld      hl,ScannerColourTable
 768  859C ED 31       >                        add     hl,a
 768  859E 7E          >                        ld      a,(hl)
 769  859F DD 6F                                ld      ixl,a
 770  85A1 FD 44                                ld      b,iyh                       ; from row
 771  85A3 DD 4C                                ld      c,ixh                       ; from col
 772  85A5 FD 55                                ld      d,iyl                       ; to row
 773  85A7 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 774  85A9 E5                                   push    hl
 775  85AA                                      MMUSelectLayer2
 775  85AA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 776  85AE CD 0D E3                             call    l2_draw_vert_line_to
 777  85B1 E1                                   pop     hl
 778  85B2 23                                   inc     hl
 779  85B3 7E                                   ld      a,(hl)
 780  85B4 FD 45        .NoStick:               ld      b,iyl                       ; row
 781  85B6 DD 4C                                ld      c,ixh                       ; col
 782  85B8 F5                                   push    af
 783  85B9 CD FF E0                             call    l2_plot_pixel
 784  85BC F1                                   pop     af
 785  85BD FD 45                                ld      b,iyl
 786  85BF DD 4C                                ld      c,ixh
 787  85C1 0C                                   inc     c
 788  85C2 CD FF E0                             call    l2_plot_pixel
 789  85C5 C9                                   ret
 790  85C6
 791  85C6
 792  85C6
 793  85C6              ;.absXhi:
 794  85C6              ;                        ld      a,ScannerX
 795  85C6              ;                        JumpOnBitSet d,7,ScannerNegX
 796  85C6              ;                        add     a,e
 797  85C6              ;                        jp      ScannerZCoord
 798  85C6              ;ScannerNegX:            sub     e
 799  85C6              ;ScannerZCoord:          ld      e,a
 800  85C6              ;                        srl     c
 801  85C6              ;                        srl     c
 802  85C6              ;                        ld      a,ScannerY
 803  85C6              ;                        JumpOnBitSet b,7,ScannerNegZ
 804  85C6              ;                        sub     c
 805  85C6              ;                        jp      ScannerYCoord
 806  85C6              ;ScannerNegZ:            add     a,c
 807  85C6              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 808  85C6              ;                        JumpOnBitSet h,7,ScannerStickDown
 809  85C6              ;                        sub     l                       ; a already holds actual Y
 810  85C6              ;                        JumpIfAGTENusng 128,ScannerHeightDone
 811  85C6              ;                        ld      a,128
 812  85C6              ;                        jp      ScannerHeightDone
 813  85C6              ;ScannerStickDown:       add     a,l
 814  85C6              ;                        JumpIfAGTENusng 191,ScannerHeightDone
 815  85C6              ;                        ld      a,191
 816  85C6              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 817  85C6              ;                        ld      b,d
 818  85C6              ;                        ld      d,a
 819  85C6              ;                        cp      b
 820  85C6              ;                        jp      z,Scanner0Height
 821  85C6              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
 822  85C6              ;                        push    bc
 823  85C6              ;                        push    de
 824  85C6              ;                        MMUSelectLayer2
 825  85C6              ;                        call    l2_draw_vert_line_to
 826  85C6              ;                        pop     de
 827  85C6              ;                        pop     bc
 828  85C6              ;Scanner0Height:         ld      b,d
 829  85C6              ;                       push    bc
 830  85C6              ;                       ld      a,255
 831  85C6              ;                       MMUSelectLayer2
 832  85C6              ;                       call    l2_plot_pixel
 833  85C6              ;                       pop     bc
 834  85C6              ;                       inc     c
 835  85C6              ;                       ld      a,255
 836  85C6              ;                       MMUSelectLayer2
 837  85C6              ;                       call    l2_plot_pixel
 838  85C6 C9                                   ret
 839  85C7
 840  85C7              UpdateRadar:            MMUSelectUniverseN 0                          ; load up register into universe bank
 840  85C7 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 841  85CB CD 20 85                             call    UpdateScannerShip
 842  85CE C9                                   ret
 843  85CF
 844  85CF AF           SeedGalaxy0:            xor     a
 845  85D0                                      MMUSelectGalaxyA
 845  85D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 846  85D3 DD 21 16 E0                          ld      ix,galaxy_data
 847  85D7 AF                                   xor		a
 848  85D8 32 DD 93                             ld		(XSAV),a
 849  85DB CD 67 97                             call    copy_galaxy_to_system
 850  85DE DD E5        SeedGalaxy0Loop:        push    ix
 851  85E0 D1                                   pop     de
 852  85E1 21 C4 93                             ld      hl,SystemSeed
 853  85E4 CD 6D 97                             call    copy_seed
 854  85E7 DD E5                                push    ix
 855  85E9 E1                                   pop     hl
 856  85EA ED 34 08 00                          add     hl,8
 857  85EE E5                                   push    hl
 858  85EF DD E1                                pop     ix
 859  85F1 CD A2 97                             call    next_system_seed
 860  85F4 3A DD 93                             ld		a,(XSAV)
 861  85F7 3D                                   dec		a
 862  85F8 FE 00                                cp		0
 863  85FA C8                                   ret		z
 864  85FB 32 DD 93                             ld		(XSAV),a
 865  85FE 20 DE                                jr      nz,SeedGalaxy0Loop
 866  8600 C9                                   ret
 867  8601
 868  8601
 869  8601
 870  8601
 871  8601                  include "./ModelRender/testdrawing.asm"
# file opened: ./ModelRender/testdrawing.asm
   1+ 8601
   2+ 8601              ; Test of render
   3+ 8601              ;  Generate a memory bank for a ship using univ_ship_data to create a block in bank 6
   4+ 8601              ;  need to clear page 70
   5+ 8601              ;  swap in to bank 7
   6+ 8601              ;  use UBnKxlo as INWK 0 (we will add an equ so that its moved over)
   7+ 8601              ;  x cobraMk3 data to map data
   8+ 8601              ;  Use ShipModelTable table indexed by cobraMk3 ship number (CobraTablePointer)
   9+ 8601              ;  Pull ship model table into bank 6
  10+ 8601              ;  use dma transfer to copy data from bank 6 to bank 7
  11+ 8601              ;
  12+ 8601              ScaleRotationMatrix197:
  13+ 8601 06 09        	ld		b,9
  14+ 8603 21 2F C0     	ld		hl,UBnkTransmatSidev
  15+ 8606              ScaleRotationLoop:
  16+ 8606 7E           	ld		a,(hl)
  17+ 8607 5F           	ld		e,a
  18+ 8608 23           	inc		hl                  ; move to hi byte
  19+ 8609 7E           	ld		a,(hl)
  20+ 860A 57           	ld		d,a
  21+ 860B E6 80            and     SignOnly8Bit        ; strip out sign bit
  22+ 860D DD 6F        	ld		ixl,a				; retain for sign bit
  23+ 860F              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2
  23+ 860F CB 23       >			   sla e
  23+ 8611 CB 12       >			   rl  d
  24+ 8613 7A               ld      a,d
  25+ 8614 0E C5        	ld		c,ConstNorm
  26+ 8616 7A           	ld		a,d					; a = D Hi* 2
  27+ 8617 C5           	push	bc
  28+ 8618 E5           	push	hl
  29+ 8619 CD 6E A2     	call	DIV16Amul256dCUNDOC	; result in BC
  30+ 861C E1           	pop		hl
  31+ 861D 78           	ld		a,b
  32+ 861E DD B5            or      ixl                 ; bring back sign bit
  33+ 8620 77               ld      (hl),a
  34+ 8621 2B               dec     hl
  35+ 8622 71               ld      (hl),c
  36+ 8623 23               inc     hl
  37+ 8624 C1           	pop		bc
  38+ 8625 23               inc     hl                  ; no to next vertex value
  39+ 8626 10 DE        	djnz	ScaleRotationLoop
  40+ 8628 C9           	ret
  41+ 8629
  42+ 8629                                      include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ././Maths/Utilities/ScaleXX16Matrix197.asm
   1++8629              ScaleXX16Matrix197:
   2++8629 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
   3++862B 0E C5        	ld		c,ConstNorm         ; c = 197
   4++862D 21 2F C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5++8630              .ScaleXX16Loop:
   6++8630 7E           	ld		a,(hl)              ; set DE = matrix value
   7++8631 5F           	ld		e,a                 ;
   8++8632 23           	inc		hl                  ;
   9++8633 7E           	ld		a,(hl)              ;
  10++8634 57           	ld		d,a                 ;
  11++8635 E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  12++8637 DD 6F        	ld		ixl,a				; retain for sign bit
  13++8639              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13++8639 CB 23       >			   sla e
  13++863B CB 12       >			   rl  d
  14++863D 7A               ld      a,d                 ; a = high byte after x 2
  15++863E C5           	push	bc                  ; save BC  counter and constant 197
  16++863F E5           	push	hl                  ; save HL
  17++8640 CD 6E A2     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  18++8643 E1           	pop		hl
  19++8644 2B               dec     hl                  ; move back to low byte
  20++8645 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  21++8646 23               inc     hl                  ; move back to high byte
  22++8647              ;    ld      a,(hl)
  23++8647              ;    and     $80
  24++8647 DD 7D            ld      a,ixl
  25++8649 77               ld      (hl),a              ; write back just sign bit
  26++864A C1           	pop		bc                  ; retrieve both counter and constant 197
  27++864B 23               inc     hl                  ; no to next vertex value
  28++864C 10 E2        	djnz	.ScaleXX16Loop
  29++864E C9           	ret
  30++864F
# file closed: ././Maths/Utilities/ScaleXX16Matrix197.asm
  43+ 864F              GetXX18Scale:
  44+ 864F 3A 0F C3         ld      a,(QAddr)
  45+ 8652 DD 6F            ld      ixl,a                 ; save Scale in C
  46+ 8654 ED 4B 68 C0      ld      bc,(UBnkDrawCam0xLo)
  47+ 8658 ED 5B 6B C0      ld      de,(UBnkDrawCam0yLo)
  48+ 865C 2A 6E C0         ld      hl,(UBnkDrawCam0zLo)
  49+ 865F              ScalePos:
  50+ 865F 78               ld      a,b
  51+ 8660 B2               or      d
  52+ 8661 B4               or      h
  53+ 8662 CA 76 86         jp      z,ScalePosDone
  54+ 8665 DD 2C            inc     ixl
  55+ 8667                  ShiftBCRight1
  55+ 8667 CB 38       >			   srl b
  55+ 8669 CB 19       >			   rr  c
  56+ 866B                  ShiftDERight1
  56+ 866B CB 3A       >			   srl d
  56+ 866D CB 1B       >			   rr  e
  57+ 866F                  ShiftHLRight1
  57+ 866F CB 3C       >			   srl h
  57+ 8671 CB 1D       >			   rr  l
  58+ 8673 C3 5F 86         jp      ScalePos
  59+ 8676              ScalePosDone:
  60+ 8676 DD 7D            ld      a,ixl
  61+ 8678 32 DF 93         ld      (XX17),a
  62+ 867B C9               ret
  63+ 867C
  64+ 867C
  65+ 867C              ScaleOrientationXX16:
  66+ 867C              ScaleRotationMatrix:
  67+ 867C                  MODULE  ScaleRotationMatrix
  68+ 867C 06 09        	ld		b,9
  69+ 867E 21 47 C0     	ld		hl,UbnkTransInvRow0x0
  70+ 8681 3A DF 93     	ld		a,(XX17)
  71+ 8684 FE 00        	cp		0
  72+ 8686 C8           	ret		z									; no mulitplier then bail out early
  73+ 8687 DD 6F        	ld		ixl,a								; master copy of 2^multiplier
  74+ 8689              ScaleRotationLoop:
  75+ 8689 5E           	ld		e,(hl)
  76+ 868A 23           	inc		hl
  77+ 868B 56           	ld		d,(hl)
  78+ 868C 7A           	ld		a,d
  79+ 868D E6 80        	and		$80
  80+ 868F DD 67        	ld		ixh,a								; make a copy for sign purposes
  81+ 8691 7A           	ld		a,d									; we need it back now to strip sign
  82+ 8692 E6 7F        	and		SignMask8Bit
  83+ 8694 57           	ld		d,a
  84+ 8695 DD 4D        	ld		c,ixl								; get master copy of multiplier
  85+ 8697              ScaleLoop:
  86+ 8697              	ShiftDELeft1
  86+ 8697 CB 23       >			   sla e
  86+ 8699 CB 12       >			   rl  d
  87+ 869B 0D           	dec		c
  88+ 869C 20 F9        	jr		nz,ScaleLoop						; loop until 0
  89+ 869E              .NoMultiply:
  90+ 869E 7A           	ld		a,d
  91+ 869F DD B4        	or		ixh									; bring sign bit back in to a and
  92+ 86A1 77           	ld		(hl),a								; we don;t need to go though d reg as an optimisation
  93+ 86A2 2B           	dec		hl
  94+ 86A3 73           	ld		(hl),e								; written back DE now
  95+ 86A4 23           	inc		hl
  96+ 86A5 23           	inc		hl									; on to next byte now
  97+ 86A6 10 E1        	djnz	ScaleRotationLoop
  98+ 86A8 C9           	ret
  99+ 86A9                  ENDMODULE
 100+ 86A9
 101+ 86A9              ScaleNodeTo8Bit:								; TODO make signed
 102+ 86A9 ED 4B 78 C0  	ld			bc,(UBnkZScaled)
 103+ 86AD 2A 74 C0     	ld			hl,(UBnkXScaled)
 104+ 86B0 ED 5B 76 C0  	ld			de,(UBnkYScaled)
 105+ 86B4              SetABSbc:
 106+ 86B4 78           	ld			a,b
 107+ 86B5 DD 67        	ld			ixh,a
 108+ 86B7 E6 7F        	and			SignMask8Bit
 109+ 86B9 47           	ld			b,a									; bc = ABS bc
 110+ 86BA              SetABShl:
 111+ 86BA 7C           	ld			a,h
 112+ 86BB DD 6F        	ld			ixl,a
 113+ 86BD E6 7F        	and			SignMask8Bit
 114+ 86BF 67           	ld			h,a									; hl = ABS hl
 115+ 86C0              SetABSde:
 116+ 86C0 7A           	ld			a,d
 117+ 86C1 FD 67        	ld			iyh,a
 118+ 86C3 E6 7F        	and			SignMask8Bit
 119+ 86C5 57           	ld			d,a									; de = ABS de
 120+ 86C6              ScaleNodeTo8BitLoop:
 121+ 86C6 78               ld          a,b		                            ; U	\ z hi
 122+ 86C7 B4           	or			h                                   ; XX15+1	\ x hi
 123+ 86C8 B2           	or			d                                   ; XX15+4	\ y hi
 124+ 86C9 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 125+ 86CB                  ShiftHLRight1
 125+ 86CB CB 3C       >			   srl h
 125+ 86CD CB 1D       >			   rr  l
 126+ 86CF                  ShiftDERight1
 126+ 86CF CB 3A       >			   srl d
 126+ 86D1 CB 1B       >			   rr  e
 127+ 86D3              	ShiftBCRight1
 127+ 86D3 CB 38       >			   srl b
 127+ 86D5 CB 19       >			   rr  c
 128+ 86D7 C3 C6 86         jp          ScaleNodeTo8BitLoop
 129+ 86DA              ScaleNodeDone:										; now we have scaled values we have to deal with sign
 130+ 86DA DD 7C        	ld			a,ixh								; get sign bit and or with b
 131+ 86DC E6 80        	and			SignOnly8Bit
 132+ 86DE B0           	or			b
 133+ 86DF 47           	ld			b,a
 134+ 86E0              SignforHL:
 135+ 86E0 DD 7D        	ld			a,ixl								; get sign bit and or with b
 136+ 86E2 E6 80        	and			SignOnly8Bit
 137+ 86E4 B4           	or			h
 138+ 86E5 67           	ld			h,a
 139+ 86E6              SignforDE:
 140+ 86E6 FD 7C        	ld			a,iyh								; get sign bit and or with b
 141+ 86E8 E6 80        	and			SignOnly8Bit
 142+ 86EA B2           	or			d
 143+ 86EB 57           	ld			d,a
 144+ 86EC              SignsDoneSaveResult:
 145+ 86EC ED 43 78 C0  	ld			(UBnkZScaled),bc
 146+ 86F0 22 74 C0     	ld			(UBnkXScaled),hl
 147+ 86F3 ED 53 76 C0  	ld			(UBnkYScaled),de
 148+ 86F7 78           	ld			a,b
 149+ 86F8 32 D7 93     	ld			(varU),a
 150+ 86FB 79           	ld			a,c
 151+ 86FC 32 F8 93     	ld			(varT),a
 152+ 86FF C9           	ret
 153+ 8700
 154+ 8700 00 00        varR16			DW	0
 155+ 8702
 156+ 8702              TestProjectNodeToScreen:
 157+ 8702 ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 158+ 8706 79           	ld			a,c                                 ;  so no need for a negative check
 159+ 8707 32 D8 93     	ld			(varQ),a		                    ; VarQ = z
 160+ 870A 3A 74 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
 161+ 870D CD 6E A2     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 162+ 8710              ;	ld			(varR16),bc							; store result in R for now TODO move to say D reg
 163+ 8710 3A 75 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
 164+ 8713                  JumpOnBitSet a,7,TestNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 164+ 8713 CB 7F       >                        bit 	7,a
 164+ 8715 C2 20 87    >                        jp      nz,TestNegativeXPoint
 165+ 8718              TestPositiveXPoint:									; x was positive result
 166+ 8718              ;	ld			bc,(varR16)							; calculated X positision
 167+ 8718 2E 80            ld          l,ScreenCenterX						;
 168+ 871A 26 00            ld          h,0
 169+ 871C 09               add         hl,bc								; hl = Screen Centre + X
 170+ 871D C3 27 87         jp          TestStoreXPoint
 171+ 8720              TestNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 172+ 8720              ;	ld			bc,(varR16
 173+ 8720 2E 80            ld          l,ScreenCenterX
 174+ 8722 26 00            ld          h,0
 175+ 8724              ;	ld			c,a
 176+ 8724              ;    ld          b,0
 177+ 8724                  ClearCarryFlag
 177+ 8724 B7          >				or a
 178+ 8725 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 179+ 8727              TestStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 180+ 8727 EB               ex          de,hl
 181+ 8728 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 182+ 872B FD 72 01         ld          (iy+1),d                            ; Update X Point
 183+ 872E              TestProcessYPoint:
 184+ 872E ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
 185+ 8732 79           	ld			a,c
 186+ 8733 32 D8 93     	ld			(varQ),a
 187+ 8736              ;    ldCopyByte  varT,varQ                          ; T =>  Q	\ zdist lo
 188+ 8736 3A 76 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
 189+ 8739 CD 6E A2     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
 190+ 873C              ;	ld			a,c
 191+ 873C              	;ld			(varR),a
 192+ 873C 3A 77 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
 193+ 873F                  JumpOnBitSet a,7,TestNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 193+ 873F CB 7F       >                        bit 	7,a
 193+ 8741 C2 4C 87    >                        jp      nz,TestNegativeYPoint
 194+ 8744              TestPositiveYPoint:									; Y is positive so above the centre line
 195+ 8744              ;	ld			a,(varR)							; in fact this code is already 16 bit aware
 196+ 8744 2E 60            ld          l,ScreenCenterY
 197+ 8746              ;	ld			c,a									; TODO DEBUG just added for testing to force 8 bit
 198+ 8746              ;	ld			b,0
 199+ 8746                  ClearCarryFlag
 199+ 8746 B7          >				or a
 200+ 8747 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 201+ 8749 C3 51 87         jp          TestStoreYPoint
 202+ 874C              TestNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 203+ 874C              ;	ld			a,(varR)
 204+ 874C 2E 60            ld          l,ScreenCenterY
 205+ 874E 26 00            ld          h,0
 206+ 8750 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 207+ 8751              TestStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 208+ 8751 EB               ex          de,hl
 209+ 8752 FD 73 02         ld          (iy+2),e                            ; Update Y Point
 210+ 8755 FD 72 03         ld          (iy+3),d                            ; Update Y Point
 211+ 8758 C9               ret
 212+ 8759
 213+ 8759                  include "ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1++8759 21 7A C0     CopyXX12ToXX15:         ld      hl,XX12
   2++875C 11 74 C0                             ld      de,XX15
   3++875F 01 06 00                             ld      bc,6
   4++8762 ED B0                                ldir
   5++8764 C9                                   ret
   6++8765
   7++8765 21 7A C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8++8768 11 80 C0                             ld      de,XX12Save
   9++876B 01 06 00                             ld      bc,6
  10++876E ED B0                                ldir
  11++8770 C9                                   ret
  12++8771
  13++8771 21 80 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14++8774 11 7A C0                             ld      de,XX12
  15++8777 01 06 00                             ld      bc,6
  16++877A ED B0                                ldir
  17++877C C9                                   ret
  18++877D
  19++877D 21 7A C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20++8780 11 86 C0                             ld      de,XX12Save2
  21++8783 01 06 00                             ld      bc,6
  22++8786 ED B0                                ldir
  23++8788 C9                                   ret
  24++8789
  25++8789 21 86 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26++878C 11 7A C0                             ld      de,XX12
  27++878F 01 06 00                             ld      bc,6
  28++8792 ED B0                                ldir
  29++8794 C9                                   ret
  30++8795
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 214+ 8795
 215+ 8795                  include "ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1++8795 21 74 C0     CopyXX15ToXX12:         ld		hl,XX15
   2++8798 11 7A C0                             ld      de,XX12
   3++879B 01 06 00                             ld      bc,6
   4++879E ED B0                                ldir
   5++87A0 C9                                   ret
   6++87A1
   7++87A1
   8++87A1
   9++87A1 21 74 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10++87A4 11 8F C0                             ld      de,XX15Save
  11++87A7 01 06 00                             ld      bc,6
  12++87AA ED B0                                ldir
  13++87AC C9                                   ret
  14++87AD
  15++87AD 21 8F C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16++87B0 11 74 C0                             ld      de,XX15
  17++87B3 01 06 00                             ld      bc,6
  18++87B6 ED B0                                ldir
  19++87B8 C9                                   ret
  20++87B9
  21++87B9 21 74 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22++87BC 11 97 C0                             ld      de,XX15Save2
  23++87BF 01 06 00                             ld      bc,6
  24++87C2 ED B0                                ldir
  25++87C4 C9                                   ret
  26++87C5
  27++87C5 21 97 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28++87C8 11 74 C0                             ld      de,XX15
  29++87CB 01 06 00                             ld      bc,6
  30++87CE ED B0                                ldir
  31++87D0 C9                                   ret
  32++87D1
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 216+ 87D1
 217+ 87D1 00 00        XX12PVarQ			DW 0
 218+ 87D3 00 00        XX12PVarR			DW 0
 219+ 87D5 00 00        XX12PVarS			DW 0
 220+ 87D7 00 00        XX12PVarResult1		DW 0
 221+ 87D9 00 00        XX12PVarResult2		DW 0
 222+ 87DB 00 00        XX12PVarResult3		DW 0
 223+ 87DD 00           XX12PVarSign2		DB 0
 224+ 87DE 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 225+ 87DF 00           XX12PVarSign3		DB 0
 226+ 87E0
 227+ 87E0              ; copy from wiring addhlde un iniv ship data
 228+ 87E0              XX12ProcessCalcHLPlusDESignBC:
 229+ 87E0              ; Combinations validated in ClacHLDEsignedBE.asm
 230+ 87E0              ; calcs HLB + DEC where B and C are signs
 231+ 87E0 78           		ld		a,b										; get HL sign byte
 232+ 87E1 CB 7F        		bit		7,a										; is high bit set?
 233+ 87E3 20 12        		jr		nz,XX12AddHLNegative					; if it is then the HL is negative
 234+ 87E5              XX12AddHLPositive:										; At here HL is positive
 235+ 87E5 79           		ld		a,c										; so we check DE as well
 236+ 87E6 CB 7F        		bit		7,a
 237+ 87E8 20 03        		jr		nz,XX12HLPosDENeg						; here if HL is negative jump
 238+ 87EA              XX12HLPosDEPos:											; so here we have +HL + +DE
 239+ 87EA 19           		add		hl,de									; which is HL+DE
 240+ 87EB AF           		xor		a										; and will always return a + sign
 241+ 87EC C9           		ret
 242+ 87ED              XX12HLPosDENeg:											; here we have +HL + -DE
 243+ 87ED              		ClearCarryFlag									;
 243+ 87ED B7          >				or a
 244+ 87EE ED 52        		sbc		hl,de									; so we do HL - DE
 245+ 87F0 CB 7C        		bit		7,h
 246+ 87F2 C2 0B 88     		jp		nz,XX12Pt1FixNegResult					; if the result was negative we need a correction
 247+ 87F5 AF           		xor		a										; else sign is +ve
 248+ 87F6 C9           		ret
 249+ 87F7              XX12AddHLNegative:										; here we enter with -HL
 250+ 87F7 79           		ld		a,c
 251+ 87F8 CB 7F        		bit		7,a
 252+ 87FA 20 0B        		jr		nz,XX12HLNegDENeg						; and now do we have DE as negative
 253+ 87FC              XX12HLNegDEPos:											; here we have -HL + +DE
 254+ 87FC EB           		ex		de,hl									; so to simplify concept swap DE and HL
 255+ 87FD              		ClearCarryFlag									; to make the calc
 255+ 87FD B7          >				or a
 256+ 87FE ED 52        		sbc		hl,de									; DE - HL
 257+ 8800 CB 7C        		bit		7,h										; was the result negative
 258+ 8802 C2 0B 88     		jp		nz,XX12Pt1FixNegResult					; if so deal with it
 259+ 8805 AF           		xor 	a										; else it is positive
 260+ 8806 C9           		ret
 261+ 8807              XX12HLNegDENeg:											; now we have -HL + -DE
 262+ 8807 19           		add		hl,de									; which we can translate to (HL + DE) * -1
 263+ 8808 3E 80        		ld		a,$80									; this sets the sign i.e. * -1
 264+ 880A C9           		ret
 265+ 880B              XX12Pt1FixNegResult:	 								; the result of HLcalcDE was negative
 266+ 880B              		NegHL											; so we 2's compliment it back to an absolute value
 266+ 880B AF          >                xor a
 266+ 880C 95          >                sub l
 266+ 880D 6F          >                ld l,a
 266+ 880E 9F          >                sbc a,a
 266+ 880F 94          >                sub h
 266+ 8810 67          >                ld h,a
 267+ 8811 3E 80        		ld		a,$80									; and set the sign to a negative
 268+ 8813 C9           		ret
 269+ 8814
 270+ 8814                                      include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ././Maths/Utilities/XX12EquNodeDotOrientation.asm
   1++8814              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2++8814              ; so xx12 = XX15 * XX16 row
   3++8814              XX12ProcessOneRow:
   4++8814              XX12CalcXCell:
   5++8814 ED 4B 74 C0          ld		bc,(UBnkXScaled)
   6++8818 5E           		ld		e,(hl)								    ; get orientation ZX
   7++8819 23           		inc		hl
   8++881A 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9++881B 7A           		ld		a,d
  10++881C A8                   xor     b
  11++881D E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12++881F DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13++8821 78           		ld		a,b                                     ; now make bc abs bc
  14++8822 E6 7F        		and		SignMask8Bit
  15++8824 47           		ld		b,a                                     ; bc = abs(bc) now
  16++8825 E5           		push	hl
  17++8826 16 00                ld      d,0                                     ; d = value
  18++8828 60           		ld		h,b
  19++8829 69           		ld		l,c
  20++882A CD 34 A1     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21++882D 22 D7 87     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22++8830 DD 7C        		ld		a,ixh
  23++8832 32 DE 87     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24++8835 E1           		pop		hl
  25++8836              XX12CalcYCell:
  26++8836 ED 4B 76 C0          ld		bc,(UBnkYScaled)
  27++883A 23           		inc		hl
  28++883B 5E           		ld		e,(hl)							    	; get orientation ZX
  29++883C 23           		inc		hl
  30++883D 56           		ld		d,(hl)
  31++883E 7A           		ld		a,d
  32++883F A8                   xor     b
  33++8840 E6 80        		and		SignOnly8Bit
  34++8842 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35++8844 78           		ld		a,b                                     ; now make bc abs bc
  36++8845 E6 7F        		and		SignMask8Bit
  37++8847 47           		ld		b,a                                     ; bc = abs(bc) now
  38++8848 E5           		push	hl
  39++8849 16 00                ld      d,0                                     ; d = value
  40++884B 60           		ld		h,b
  41++884C 69           		ld		l,c
  42++884D CD 34 A1     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43++8850 22 D9 87     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44++8853 DD 7C        		ld		a,ixh
  45++8855 32 DD 87     		ld		(XX12PVarSign2),a					    ; S = sign
  46++8858 E1           		pop		hl
  47++8859              XX12CalcZCell:
  48++8859 ED 4B 78 C0          ld		bc,(UBnkZScaled)
  49++885D 23           		inc		hl
  50++885E 5E           		ld		e,(hl)								    ; get orientation ZX
  51++885F 23           		inc		hl
  52++8860 56           		ld		d,(hl)
  53++8861 7A           		ld		a,d
  54++8862 A8                   xor     b
  55++8863 E6 80        		and		SignOnly8Bit
  56++8865 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57++8867 78           		ld		a,b                                     ; now make bc abs bc
  58++8868 E6 7F        		and		SignMask8Bit
  59++886A 47           		ld		b,a                                     ; bc = abs(bc) now
  60++886B 16 00                ld      d,0                                     ; d = value
  61++886D 60           		ld		h,b
  62++886E 69           		ld		l,c
  63++886F CD 34 A1     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64++8872 22 DB 87     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65++8875 DD 7C        		ld		a,ixh
  66++8877 32 DF 87     		ld		(XX12PVarSign3),a					    ; S = sign
  67++887A              XX12CalcCellResult:
  68++887A 2A D7 87     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69++887D ED 5B D9 87  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70++8881 ED 4B DD 87  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71++8885              XX12MSBOnly:
  72++8885 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73++8886 5A           		ld		e,d									    ; for both results
  74++8887 AF           		xor		a									    ;
  75++8888 67           		ld		h,a									    ;
  76++8889 57           		ld		d,a									    ; so set high byte to 0
  77++888A CD 3C CB     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78++888D 47           		ld		b,a									    ; move sign into b ready for next calc
  79++888E 3A DF 87     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80++8891 4F           		ld		c,a									    ; goes into c to align with DE
  81++8892 ED 5B DB 87  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82++8896 5A           		ld		e,d                                     ; d = result /256
  83++8897 16 00        		ld		d,0									    ; and only us high byte
  84++8899 CD 3C CB     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85++889C C9           		ret											    ; hl = result, a = sign
  86++889D              								    ; hl = result, a = sign
  87++889D
  88++889D              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89++889D              ;...X cell
  90++889D 21 47 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91++88A0 CD 14 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92++88A3 47           		ld		b,a                                 ; b = sign
  93++88A4 7C           		ld		a,h                                 ; a = high byte
  94++88A5 B0           		or		b
  95++88A6 32 7B C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96++88A9 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97++88AA 32 7A C0             ld      (UBnkXX12xLo),a						; that is result done for
  98++88AD              ;...Y cell
  99++88AD 21 4F C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100++88B0 CD 14 88             call    XX12ProcessOneRow
 101++88B3 47           		ld		b,a
 102++88B4 7C           		ld		a,h
 103++88B5              ;		ld		a,l
 104++88B5 B0           		or		b
 105++88B6 32 7D C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106++88B9 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107++88BA 32 7C C0             ld      (UBnkXX12yLo),a						; that is result done for
 108++88BD              ;...Z cell
 109++88BD 21 57 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110++88C0 CD 14 88             call    XX12ProcessOneRow
 111++88C3 47           		ld		b,a
 112++88C4 7C                   ld		a,h
 113++88C5              ;		ld		a,l
 114++88C5 B0           		or		b
 115++88C6 32 7F C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116++88C9 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117++88CA 32 7E C0             ld      (UBnkXX12zLo),a						; that is result done for
 118++88CD C9                   ret
 119++88CE
 120++88CE              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121++88CE              ;...X cell
 122++88CE 21 47 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123++88D1 CD 14 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124++88D4 47           		ld		b,a                                 ; b = sign
 125++88D5 7C           		ld		a,h                                 ; a = high byte
 126++88D6 B0           		or		b
 127++88D7 32 7B C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128++88DA 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129++88DB 32 7A C0             ld      (UBnkXX12xLo),a						; that is result done for
 130++88DE              ;...Y cell
 131++88DE 21 4F C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132++88E1 CD 14 88             call    XX12ProcessOneRow
 133++88E4 47           		ld		b,a
 134++88E5 7C           		ld		a,h
 135++88E6              ;		ld		a,l
 136++88E6 B0           		or		b
 137++88E7 32 7D C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138++88EA 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139++88EB 32 7C C0             ld      (UBnkXX12yLo),a						; that is result done for
 140++88EE              ;...Z cell
 141++88EE 21 57 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142++88F1 CD 14 88             call    XX12ProcessOneRow
 143++88F4 47           		ld		b,a
 144++88F5 7C                   ld		a,h
 145++88F6              ;		ld		a,l
 146++88F6 B0           		or		b
 147++88F7 32 7F C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148++88FA 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149++88FB 32 7E C0             ld      (UBnkXX12zLo),a						; that is result done for
 150++88FE C9                   ret
 151++88FF
 152++88FF              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153++88FF              ;...X cell
 154++88FF 21 2F C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155++8902 CD 14 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156++8905 47           		ld		b,a                                 ; b = sign
 157++8906 7C           		ld		a,h                                 ; a = high byte
 158++8907 B0           		or		b
 159++8908 32 7B C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160++890B 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161++890C 32 7A C0             ld      (UBnkXX12xLo),a						; that is result done for
 162++890F              ;...Y cell
 163++890F 21 35 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164++8912 CD 14 88             call    XX12ProcessOneRow
 165++8915 47           		ld		b,a
 166++8916 7C           		ld		a,h
 167++8917              ;		ld		a,l
 168++8917 B0           		or		b
 169++8918 32 7D C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170++891B 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171++891C 32 7C C0             ld      (UBnkXX12yLo),a						; that is result done for
 172++891F              ;...Z cell
 173++891F 21 3B C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174++8922 CD 14 88             call    XX12ProcessOneRow
 175++8925 47           		ld		b,a
 176++8926 7C                   ld		a,h
 177++8927              ;		ld		a,l
 178++8927 B0           		or		b
 179++8928 32 7F C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180++892B 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181++892C 32 7E C0             ld      (UBnkXX12zLo),a						; that is result done for
 182++892F C9                   ret
# file closed: ././Maths/Utilities/XX12EquNodeDotOrientation.asm
 271+ 8930
 272+ 8930              TransposeXX12ByShipToXX15:
 273+ 8930 2A 7A C0             ld		hl,(UBnkXX12xLo)					; get X into HL
 274+ 8933 7C           		ld		a,h			                        ; get XX12 Sign
 275+ 8934 E6 80        		and		$80									; check sign bit on high byte
 276+ 8936 47           		ld		b,a									; and put it in of 12xlo in b
 277+ 8937                      ;110921 debugld      h,0
 278+ 8937 7C                   ld      a,h
 279+ 8938 E6 7F                and     $7F
 280+ 893A 67                   ld      h,a
 281+ 893B                      ;110921 debugld      h,0
 282+ 893B ED 5B 0B C0  		ld		de,(UBnKxlo)						;
 283+ 893F 3A 0D C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
 284+ 8942 E6 80        		and		$80									; make sure we only have bit 7
 285+ 8944 4F           		ld		c,a									; and put sign of unkxsgn c
 286+ 8945 CD 3C CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
 287+ 8948 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
 288+ 8949 67           		ld		h,a
 289+ 894A 22 74 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
 290+ 894D              ; ..................................
 291+ 894D 2A 7C C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
 292+ 8950 7C           		ld		a,h
 293+ 8951 E6 80        		and		$80
 294+ 8953 47           		ld		b,a
 295+ 8954                      ;110921 debugld      h,0
 296+ 8954 7C                   ld      a,h
 297+ 8955 E6 7F                and     $7F
 298+ 8957 67                   ld      h,a
 299+ 8958                      ;110921 debugld      h,0
 300+ 8958 ED 5B 0E C0  		ld		de,(UBnKylo)
 301+ 895C 3A 10 C0     		ld		a,(UBnKysgn)
 302+ 895F E6 80        		and		$80									; make sure we only have bit 7
 303+ 8961 4F           		ld		c,a
 304+ 8962 CD 3C CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 305+ 8965 B4           		or		h									; combine sign in A with H
 306+ 8966 67           		ld		h,a
 307+ 8967 22 76 C0     		ld		(UBnkYScaled),hl
 308+ 896A              ; ..................................
 309+ 896A 2A 7E C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
 310+ 896D 7C           		ld		a,h
 311+ 896E E6 80        		and		$80
 312+ 8970 47           		ld		b,a
 313+ 8971                      ;110921 debugld      h,0
 314+ 8971 7C                   ld      a,h
 315+ 8972 E6 7F                and     $7F
 316+ 8974 67                   ld      h,a
 317+ 8975                      ;110921 debugld      h,0
 318+ 8975 ED 5B 11 C0  		ld		de,(UBnKzlo)
 319+ 8979 3A 13 C0     		ld		a,(UBnKzsgn)
 320+ 897C E6 80        		and		$80									; make sure we only have bit 7
 321+ 897E 4F           		ld		c,a
 322+ 897F CD 3C CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 323+ 8982 B4           		or		h									; combine sign in A with H
 324+ 8983 67           		ld		h,a
 325+ 8984 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
 326+ 8986 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
 327+ 8988 E6 7F                and     $7F                                 ; a = value unsigned
 328+ 898A 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
 329+ 898C 7D                   ld      a,l                                 ; get low byte now
 330+ 898D              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
 330+ 898D FE 04       >                        cp      4
 330+ 898F DA 9E 89    >                        jp		c,ClampZto4
 331+ 8992              NoClampZto4:
 332+ 8992 22 78 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
 333+ 8995 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
 334+ 8996 32 F8 93             ld      (varT),a
 335+ 8999 7C           		ld		a,h
 336+ 899A 32 D7 93             ld      (varU),a
 337+ 899D C9           		ret
 338+ 899E              ClampZto4:											; This is where we limit 4 to a minimum of 4
 339+ 899E 21 04 00     		ld		hl,4
 340+ 89A1 22 78 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
 341+ 89A4 7D           		ld		a,l
 342+ 89A5 32 F8 93             ld      (varT),a                            ;                                                                           ;;;
 343+ 89A8 7C           		ld		a,h
 344+ 89A9 32 D7 93             ld      (varU),a 						; compatibility for now
 345+ 89AC C9           		ret
 346+ 89AD
 347+ 89AD
 348+ 89AD              RescaleXXValue:
 349+ 89AD 5E           		ld		e,(hl)
 350+ 89AE 23           		inc		hl
 351+ 89AF 56           		ld		d,(hl)
 352+ 89B0 7A           		ld		a,d
 353+ 89B1 E6 80        		and		$80
 354+ 89B3 47           		ld		b,a
 355+ 89B4 7A           		ld		a,d
 356+ 89B5 E6 7F        		and		$7F
 357+ 89B7 4F           		ld		c,a
 358+ 89B8 7B           		ld		a,e
 359+ 89B9 CB 7F        		bit		7,a
 360+ 89BB CA BF 89     		jp		z,XX15XLT128
 361+ 89BE              XX15XGT128:
 362+ 89BE 0C           		inc		c
 363+ 89BF              XX15XLT128:
 364+ 89BF 59           		ld		e,c
 365+ 89C0 50           		ld		d,b
 366+ 89C1 72           		ld		(hl),d
 367+ 89C2 2B           		dec		hl
 368+ 89C3 73           		ld		(hl),e
 369+ 89C4 23           		inc		hl
 370+ 89C5 23           		inc		hl
 371+ 89C6 C9           		ret
 372+ 89C7
 373+ 89C7
 374+ 89C7              NegZeroBodge:
 375+ 89C7 21 20 C0         ld     hl,UBnkrotmatNosevX
 376+ 89CA 06 09            ld     b,9
 377+ 89CC              NegBodgeLoop:
 378+ 89CC 7E               ld      a,(hl)
 379+ 89CD 23               inc     hl
 380+ 89CE FE 00            cp      0
 381+ 89D0 20 07            jr      nz,NegBodgeSkip1
 382+ 89D2 7E               ld      a,(hl)
 383+ 89D3 FE 80            cp      $80
 384+ 89D5 20 02            jr      nz,NegBodgeSkip1
 385+ 89D7 AF               xor     a
 386+ 89D8 77               ld      (hl),a
 387+ 89D9              NegBodgeSkip1:
 388+ 89D9 23               inc     hl
 389+ 89DA 10 F0            djnz    NegBodgeLoop
 390+ 89DC C9               ret
 391+ 89DD
 392+ 89DD B0           RollLoop: DB $B0
 393+ 89DE
 394+ 89DE              TestRender:
 395+ 89DE              	;include "Tests/PlotTest2.asm"
 396+ 89DE              ; Initialise banks is include in main initialise subrotines now
 397+ 89DE              ; Prototype for .TITLE
 398+ 89DE              TestLines:
 399+ 89DE              ;include "Tests/LineHLtoDETest.asm"
 400+ 89DE              TestCalcs:
 401+ 89DE
 402+ 89DE              ;include "Tests/CalcHLDEsignedBE.asm"
 403+ 89DE
 404+ 89DE
 405+ 89DE 3E 5A        	ld	a,90
 406+ 89E0 4F           	ld	c,a
 407+ 89E1 16 6C        	ld	d,108
 408+ 89E3 CD 6D A6     	call AequAdivDmul96
 409+ 89E6
 410+ 89E6 3E 5A        	ld	a,90
 411+ 89E8 06 6C        	ld	b,108
 412+ 89EA 21 00 24     	ld	hl,$2400
 413+ 89ED 22 D9 93     	ld	(varR),hl
 414+ 89F0 CD E1 A8     	call	TidySub1
 415+ 89F3
 416+ 89F3              	;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 417+ 89F3
 418+ 89F3              TestTIDY:
 419+ 89F3 21 00 00     	ld	hl,$0000
 420+ 89F6 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 421+ 89F9 21 00 8D     	ld	hl,$8D00
 422+ 89FC 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 423+ 89FF 21 00 E0     	ld	hl,$E000
 424+ 8A02 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 425+ 8A05
 426+ 8A05 21 00 00     	ld	hl,$0000
 427+ 8A08 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 428+ 8A0B 21 00 B4     	ld	hl,$B400
 429+ 8A0E 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 430+ 8A11 21 00 CF     	ld	hl,$CF00
 431+ 8A14 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 432+ 8A17
 433+ 8A17 21 00 28     	ld	hl,$2800
 434+ 8A1A 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 435+ 8A1D 21 00 00     	ld	hl,$0000
 436+ 8A20 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 437+ 8A23 21 00 00     	ld	hl,$0000
 438+ 8A26 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 439+ 8A29 CD 23 8B     	call	TestPitchPos
 440+ 8A2C              ;	call	TestRollPos
 441+ 8A2C              ;	call	TIDY
 442+ 8A2C
 443+ 8A2C
 444+ 8A2C 21 00 00     	ld	hl,$0
 445+ 8A2F 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 446+ 8A32 21 CE 63     	ld	hl,$63CE
 447+ 8A35 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 448+ 8A38 21 C6 1D     	ld	hl,$1DC6
 449+ 8A3B 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 450+ 8A3E
 451+ 8A3E 21 00 00     	ld	hl,$0
 452+ 8A41 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 453+ 8A44 21 7D 64     	ld	hl,$647D
 454+ 8A47 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 455+ 8A4A 21 9B 23     	ld	hl,$239B
 456+ 8A4D 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 457+ 8A50
 458+ 8A50 21 00 60     	ld	hl,$6000
 459+ 8A53 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 460+ 8A56 21 00 00     	ld	hl,$0
 461+ 8A59 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 462+ 8A5C 21 00 00     	ld	hl,$0
 463+ 8A5F 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 464+ 8A62 CD 31 A9     	call	TIDY
 465+ 8A65
 466+ 8A65
 467+ 8A65              TestRollLoop:
 468+ 8A65 3A DD 89         ld      a,(RollLoop)
 469+ 8A68 3D               dec     a
 470+ 8A69                  JumpIfALTNusng $40 , ItsRoll
 470+ 8A69 FE 40       >                        cp      $40
 470+ 8A6B DA 77 8A    >                        jp		c,ItsRoll
 471+ 8A6E 32 DD 89         ld      (RollLoop),a
 472+ 8A71 CD 23 8B       	call	TestPitchPos
 473+ 8A74 C3 8D 8A         jp     SkipTidyUp
 474+ 8A77              ItsRoll;
 475+ 8A77 FE 00            cp      0
 476+ 8A79 20 0B            jr      nz,DontReset
 477+ 8A7B 3E 60            ld      a,$60
 478+ 8A7D 32 DD 89         ld      (RollLoop),a
 479+ 8A80 CD E9 8A         call    TestRollPos
 480+ 8A83 C3 8D 8A         jp      SkipTidyUp
 481+ 8A86              DontReset
 482+ 8A86 32 DD 89         ld      (RollLoop),a
 483+ 8A89 CD E9 8A         call    TestRollPos
 484+ 8A8C C9               ret
 485+ 8A8D
 486+ 8A8D              SkipTidyUp:
 487+ 8A8D
 488+ 8A8D
 489+ 8A8D
 490+ 8A8D 00 00        DebugPoint: DW 0
 491+ 8A8F
 492+ 8A8F              SubColor1:
 493+ 8A8F 7C           	ld		a,h
 494+ 8A90 D6 1F        	sub		$1F
 495+ 8A92 67           	ld		h,a
 496+ 8A93 C9           	ret
 497+ 8A94              SubColor2:
 498+ 8A94 7C           	ld		a,h
 499+ 8A95 D6 2F        	sub		$2F
 500+ 8A97 67           	ld		h,a
 501+ 8A98 C9           	ret
 502+ 8A99
 503+ 8A99                  ; V1 /512 => Part 1 = V1 - (1 /512) ; Oart 2 = V2 / 16 Answer = p1 + p2
 504+ 8A99
 505+ 8A99              SetupShip:
 506+ 8A99 47               ld  b,a
 507+ 8A9A CB 47            bit  0,a
 508+ 8A9C 28 0B            jr   z,ShipRoot
 509+ 8A9E FE 05            cp  5
 510+ 8AA0 28 14            jr  z,ShipUp
 511+ 8AA2 FE 03            cp  3
 512+ 8AA4 28 23            jr  z,ShipSide
 512+ 8AA6
 513+ 8AA6 18 31            jr  ShipNose
 514+ 8AA8 C9               ret
 515+ 8AA9
 516+ 8AA9              ShipRoot:
 517+ 8AA9 21 00 00         ld hl,0
 518+ 8AAC 22 74 C0         ld (UBnkXScaled),hl
 519+ 8AAF 22 76 C0         ld (UBnkYScaled),hl
 520+ 8AB2 22 78 C0         ld (UBnkZScaled),hl
 521+ 8AB5 C9               ret
 522+ 8AB6
 523+ 8AB6              ShipUp:
 524+ 8AB6 21 00 00         ld hl,0
 525+ 8AB9 22 74 C0         ld (UBnkXScaled),hl
 526+ 8ABC 21 14 00         ld hl,20
 527+ 8ABF 22 76 C0         ld (UBnkYScaled),hl
 528+ 8AC2 21 00 00         ld hl,0
 529+ 8AC5 22 78 C0         ld (UBnkZScaled),hl
 530+ 8AC8 C9               ret
 531+ 8AC9
 532+ 8AC9              ShipSide:
 533+ 8AC9 21 14 00         ld hl,20
 534+ 8ACC 22 74 C0         ld (UBnkXScaled),hl
 535+ 8ACF 21 00 00         ld hl,0
 536+ 8AD2 22 76 C0         ld (UBnkYScaled),hl
 537+ 8AD5 22 78 C0         ld (UBnkZScaled),hl
 538+ 8AD8 C9               ret
 539+ 8AD9
 540+ 8AD9              ShipNose:
 541+ 8AD9 21 00 00         ld hl,0
 542+ 8ADC 22 74 C0         ld (UBnkXScaled),hl
 543+ 8ADF 22 76 C0         ld (UBnkYScaled),hl
 544+ 8AE2 21 14 00         ld hl,20
 545+ 8AE5 22 78 C0         ld (UBnkZScaled),hl
 546+ 8AE8 C9               ret
 547+ 8AE9
 548+ 8AE9              TestRollPos:
 549+ 8AE9 21 14 C0     	ld	hl,UBnkrotmatSidevX
 550+ 8AEC 22 02 93     	ld	(varAxis1),hl
 551+ 8AEF 21 16 C0     	ld	hl,UBnkrotmatSidevY
 552+ 8AF2 22 04 93     	ld	(varAxis2),hl
 553+ 8AF5 AF           	xor	a
 554+ 8AF6 32 EE 93     	ld	(varRAT2),a
 555+ 8AF9 CD 01 CC     	call MVS5XRotateXAxis
 556+ 8AFC 21 1A C0     	ld	hl,UBnkrotmatRoofvX
 557+ 8AFF 22 02 93     	ld	(varAxis1),hl
 558+ 8B02 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 559+ 8B05 22 04 93     	ld	(varAxis2),hl
 560+ 8B08 AF           	xor	a
 561+ 8B09 32 EE 93     	ld	(varRAT2),a
 562+ 8B0C CD 01 CC     	call MVS5XRotateXAxis
 563+ 8B0F 21 20 C0     	ld	hl,UBnkrotmatNosevX
 564+ 8B12 22 02 93     	ld	(varAxis1),hl
 565+ 8B15 21 22 C0     	ld	hl,UBnkrotmatNosevY
 566+ 8B18 22 04 93     	ld	(varAxis2),hl
 567+ 8B1B AF           	xor	a
 568+ 8B1C 32 EE 93     	ld	(varRAT2),a
 569+ 8B1F CD 01 CC     	call MVS5XRotateXAxis
 570+ 8B22 C9           	ret
 571+ 8B23
 572+ 8B23              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 573+ 8B23              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 574+ 8B23
 575+ 8B23              TestPitchPos:
 576+ 8B23 21 16 C0         ld	hl,UBnkrotmatSidevY
 577+ 8B26 22 02 93         ld	(varAxis1),hl
 578+ 8B29 21 18 C0         ld	hl,UBnkrotmatSidevZ
 579+ 8B2C 22 04 93         ld	(varAxis2),hl
 580+ 8B2F AF               xor	a
 581+ 8B30 32 EE 93         ld	(varRAT2),a
 582+ 8B33 CD 01 CC         call MVS5XRotateXAxis
 583+ 8B36              ; Do Y
 584+ 8B36 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 585+ 8B39 22 02 93     	ld	(varAxis1),hl
 586+ 8B3C 21 1E C0     	ld	hl,UBnkrotmatRoofvZ
 587+ 8B3F 22 04 93     	ld	(varAxis2),hl
 588+ 8B42 AF           	xor	a
 589+ 8B43 32 EE 93     	ld	(varRAT2),a
 590+ 8B46 CD 01 CC     	call MVS5XRotateXAxis
 591+ 8B49              ; Do Z
 592+ 8B49 21 22 C0     	ld	hl,UBnkrotmatNosevY
 593+ 8B4C 22 02 93     	ld	(varAxis1),hl
 594+ 8B4F 21 24 C0     	ld	hl,UBnkrotmatNosevZ
 595+ 8B52 22 04 93     	ld	(varAxis2),hl
 596+ 8B55 AF           	xor	a
 597+ 8B56 32 EE 93     	ld	(varRAT2),a
 598+ 8B59 CD 01 CC     	call MVS5XRotateXAxis
 599+ 8B5C C9           	ret
 600+ 8B5D
 601+ 8B5D
 602+ 8B5D              TestReplot:
 603+ 8B5D 3A 05 C3         ld      a,(VertexCtX6Addr)                  ; get Hull byte#8 = number of vertices *6                                   ;;;
 604+ 8B60 4F               ld      c,a									; XX20 also c = number of vertices * 6 (or XX20)
 605+ 8B61 16 06            ld      d,6
 606+ 8B63 CD 9E A2         call    asm_div8                            ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 607+ 8B66 41               ld      b,c									; c = number of vertices
 608+ 8B67 FD 21 BE C0  	ld		iy,UBnkNodeArray
 609+ 8B6B              RePointLoop:
 610+ 8B6B C5           	push	bc
 611+ 8B6C FD E5        	push	iy
 612+ 8B6E FD 7E 00     	ld		a,(iy+0)
 613+ 8B71 4F           	ld		c,a
 614+ 8B72 FD 7E 02     	ld		a,(iy+2)
 615+ 8B75 47           	ld		b,a
 616+ 8B76 26 DF        	ld 		h,$DF
 617+ 8B78 FD 7E 01     	ld		a,(iy+1)
 618+ 8B7B 57           	ld		d,a
 619+ 8B7C FD 7E 03     	ld		a,(iy+3)
 620+ 8B7F 5F           	ld		e,a
 621+ 8B80 B2           	or		d
 622+ 8B81 28 0C        	jr		z,RePlotAsIs
 623+ 8B83 7A           	ld 		a,d
 624+ 8B84 FE 00        	cp		0
 625+ 8B86 C4 8F 8A     	call	nz,SubColor1
 626+ 8B89 7A           	ld 		a,d
 627+ 8B8A FE 00        	cp		0
 628+ 8B8C C4 8F 8A     	call	nz,SubColor1
 629+ 8B8F              RePlotAsIs:
 630+ 8B8F 7C           	ld		a,h
 631+ 8B90              	MMUSelectLayer2
 631+ 8B90 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 632+ 8B94 CD FF E0     	call    l2_plot_pixel
 633+ 8B97 E1           	pop		hl
 634+ 8B98 3E 04        	ld		a,4
 635+ 8B9A ED 31        	add		hl,a
 636+ 8B9C E5           	push	hl
 637+ 8B9D FD E1        	pop		iy								; this is very expensive need to optimise TODO
 638+ 8B9F C1           	pop		bc
 639+ 8BA0 10 C9        	djnz	RePointLoop
 640+ 8BA2 C9           	ret
 641+ 8BA3
 642+ 8BA3                  ;ProcessFaceNormDebug:
 643+ 8BA3              ;    push    hl
 644+ 8BA3              ;    push    bc
 645+ 8BA3              ;    push    de
 646+ 8BA3              ;    push    ix
 647+ 8BA3              ;    push    iy
 648+ 8BA3              ;    ld      hl,UBnkHullNormals
 649+ 8BA3              ;    call    CopyFaceToXX12
 650+ 8BA3              ;    call    CopyXX15ToXX15Save
 651+ 8BA3              ;    call    CopyXX12ToXX15
 652+ 8BA3              ;    call    RotateXX15ByTransMatXX16
 653+ 8BA3              ;    call    CopyXX15ToXX12
 654+ 8BA3              ;    call    CopyXX15SaveToXX15
 655+ 8BA3              ;    call    DotproductXX12XX15
 656+ 8BA3              ;    ld      a,(varS)
 657+ 8BA3              ;    JumpOnBitClear a,7,ItsGreen
 658+ 8BA3              ;
 659+ 8BA3              ;    ld      a,193
 660+ 8BA3              ;    jp      DoPlotNorm
 661+ 8BA3              ;ItsGreen:
 662+ 8BA3              ;	ld		a,28
 663+ 8BA3              ;DoPlotNorm:
 664+ 8BA3              ;    pop     iy
 665+ 8BA3              ;    pop     ix
 666+ 8BA3              ;    pop     de
 667+ 8BA3              ;    pop     bc
 668+ 8BA3              ;    pop     hl
 669+ 8BA3              ;    ret
 670+ 8BA3              ;
 671+ 8BA3              ;ProcessNormalLine:
 672+ 8BA3              ;    push    hl
 673+ 8BA3              ;    push    bc
 674+ 8BA3              ;    push    de
 675+ 8BA3              ;    push    ix
 676+ 8BA3              ;    push    iy
 677+ 8BA3              ;;    call    CopyXX15ToXX15Save                                      ; save current XX15
 678+ 8BA3              ;    ld      hl,UBnkHullNormals
 679+ 8BA3              ;    call    CopyFaceToXX15                                          ;        Get Face data into XX12
 680+ 8BA3              ;  ;  call    CopyXX12ToXX15
 681+ 8BA3              ;  ; ld      a,(QAddr)
 682+ 8BA3              ;  ;  xor       a
 683+ 8BA3              ;  ;  ld      (XX17),a
 684+ 8BA3              ;  ;  call    ScaleNormal
 685+ 8BA3              ;	ld		a,(UBnkXScaledSign)
 686+ 8BA3              ;	call    XX12EquNodeDotOrientation
 687+ 8BA3              ;    ld      a,(UBnkXX12zSign)
 688+ 8BA3              ;    ld      (VarBackface),a
 689+ 8BA3              ;    call    CopyXX12ToXX12Save
 690+ 8BA3              ;	call    TransposeXX12ByShipToXX15
 691+ 8BA3              ;    call    ScaleNodeTo8Bit
 692+ 8BA3              ;    call    CopyXX15ToXX12
 693+ 8BA3              ;    call    CopyXX12ToXX12Save2
 694+ 8BA3              ;    call    CopyXX15SaveToXX15 ; Copy from previous
 695+ 8BA3              ;    call    CopyXX12SaveToXX12
 696+ 8BA3              ;    ld      a,1
 697+ 8BA3              ;    ld      (XX17),a
 698+ 8BA3              ;    call    ScaleNormal
 699+ 8BA3              ;   ; call    DotproductXX12XX15
 700+ 8BA3              ;    ld      a,(VarBackface)
 701+ 8BA3              ;    JumpOnBitClear a,7,PlotRed
 702+ 8BA3              ;    JumpIfALTNUsng 51,PlotRed
 703+ 8BA3              ;PlotGreen:
 704+ 8BA3              ;    ld      a,$7C
 705+ 8BA3              ;    jp      ReadyToDrawLine
 706+ 8BA3              ;PlotRed:
 707+ 8BA3              ;    ld      a,$E0
 708+ 8BA3              ;ReadyToDrawLine:
 709+ 8BA3              ;    ld      (line_gfx_colour),a
 710+ 8BA3              ;    call    CopyXX12Save2ToXX12
 711+ 8BA3              ;    call    CopyXX12ToXX15
 712+ 8BA3              ;    ld		iy,UBnkNodeArray2
 713+ 8BA3              ;    call    TestProjectNodeToScreen
 714+ 8BA3              ;    ld		a,(iy+0)
 715+ 8BA3              ;	ld		e,a
 716+ 8BA3              ;	ld		a,(iy+2)
 717+ 8BA3              ;	ld		d,a
 718+ 8BA3              ;    ld      hl,(DebugPoint)
 719+ 8BA3              ;	MMUSelectLayer2
 720+ 8BA3              ;
 721+ 8BA3              ;	call    LineHLtoDE
 722+ 8BA3              ;
 723+ 8BA3              ;Skipit:
 724+ 8BA3              ;    pop     iy
 725+ 8BA3              ;
 726+ 8BA3              ;    pop     ix
 727+ 8BA3              ;    pop     de
 728+ 8BA3              ;    pop     bc
 729+ 8BA3              ;    pop     hl
 730+ 8BA3              ;    ret
 731+ 8BA3
# file closed: ./ModelRender/testdrawing.asm
 872  8BA3                  include "./Universe/StarRoutines.asm"
# file opened: ./Universe/StarRoutines.asm
   1+ 8BA3              ;note: DIV16Amul256dCUNDOC as per
   2+ 8BA3              ;                                   BC = A0
   3+ 8BA3              ;                                   DE = 0C
   4+ 8BA3              ;                                   so BC = a * 256 / C
   5+ 8BA3
   6+ 8BA3              ; We can cheat here, Speed is always 0 or positive
   7+ 8BA3              ; z postion will always be positive if we can see it
   8+ 8BA3
   9+ 8BA3 EB           InitStarAtHL:           ex      de,hl
  10+ 8BA4 CD 2B 97                             call    doRND
  11+ 8BA7 EB                                   ex      de,hl
  12+ 8BA8 F6 08                                or      8
  13+ 8BAA 77                                   ld      (hl),a
  14+ 8BAB E6 7F                                and     $7F
  15+ 8BAD 23                                   inc     hl
  16+ 8BAE 77                                   ld      (hl),a
  17+ 8BAF EB                                   ex      de,hl
  18+ 8BB0 CD 2B 97                             call    doRND
  19+ 8BB3 EB                                   ex      de,hl
  20+ 8BB4 0F                                   rrca
  21+ 8BB5 E6 80                                and     $80
  22+ 8BB7 B6                                   or      (hl)
  23+ 8BB8 77                                   ld      (hl),a
  24+ 8BB9 23                                   inc     hl
  25+ 8BBA EB                                   ex      de,hl
  26+ 8BBB CD 2B 97                             call    doRND
  27+ 8BBE EB                                   ex      de,hl
  28+ 8BBF F6 04                                or      4
  29+ 8BC1 77                                   ld      (hl),a
  30+ 8BC2 23                                   inc     hl
  31+ 8BC3 E6 7F                                and     $7F
  32+ 8BC5 77                                   ld      (hl),a
  33+ 8BC6 EB                                   ex      de,hl
  34+ 8BC7 CD 2B 97                             call    doRND
  35+ 8BCA EB                                   ex      de,hl
  36+ 8BCB 0F                                   rrca
  37+ 8BCC E6 80                                and     $80
  38+ 8BCE B6                                   or      (hl)
  39+ 8BCF 77                                   ld      (hl),a
  40+ 8BD0 23                                   inc     hl
  41+ 8BD1 EB                                   ex      de,hl
  42+ 8BD2 CD 2B 97                             call    doRND
  43+ 8BD5 EB                                   ex      de,hl
  44+ 8BD6 F6 90                                or      144
  45+ 8BD8 77                                   ld      (hl),a
  46+ 8BD9 23                                   inc     hl
  47+ 8BDA F6 70                                or      %01110000
  48+ 8BDC E6 7F                                and     $7f     ; bodge
  49+ 8BDE 77                                   ld      (hl),a
  50+ 8BDF 23                                   inc     hl
  51+ 8BE0 C9                                   ret
  52+ 8BE1
  53+ 8BE1              ; we could cheat, flip the sign of DE and just add but its not very optimised
  54+ 8BE1 7C           StarsSUBHLDESigned:     ld      a,h
  55+ 8BE2 E6 80                                and     SignOnly8Bit
  56+ 8BE4 47                                   ld      b,a                         ;save sign bit in b
  57+ 8BE5 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 8BE6                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
  58+ 8BE6 FA 14 8C    >                        jp		m, .SUBHLDEOppSGN
  59+ 8BE9 78           .SUBHLDESameSigns:      ld      a,b
  60+ 8BEA B2                                   or      d
  61+ 8BEB                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 8BEB FA F5 8B    >                        jp		m, .SUBHLDESameNeg
  62+ 8BEE B7                                   or      a
  63+ 8BEF ED 52                                sbc     hl,de
  64+ 8BF1                                      JumpIfNegative .SUBHLDESameOvrFlw
  64+ 8BF1 FA 08 8C    >                        jp		m, .SUBHLDESameOvrFlw
  65+ 8BF4 C9                                   ret
  66+ 8BF5 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  67+ 8BF6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  68+ 8BF8 67                                   ld      h,a
  69+ 8BF9 7A                                   ld      a,d
  70+ 8BFA E6 7F                                and     SignMask8Bit
  71+ 8BFC 57                                   ld      d,a
  72+ 8BFD B7                                   or      a
  73+ 8BFE ED 52                                sbc     hl,de
  74+ 8C00                                      JumpIfNegative .SUBHLDESameOvrFlw
  74+ 8C00 FA 08 8C    >                        jp		m, .SUBHLDESameOvrFlw
  75+ 8C03 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  76+ 8C04 F6 80                                or      SignOnly8Bit
  77+ 8C06 67                                   ld      h,a
  78+ 8C07 C9                                   ret
  79+ 8C08              .SUBHLDESameOvrFlw:     NegHL
  79+ 8C08 AF          >                xor a
  79+ 8C09 95          >                sub l
  79+ 8C0A 6F          >                ld l,a
  79+ 8C0B 9F          >                sbc a,a
  79+ 8C0C 94          >                sub h
  79+ 8C0D 67          >                ld h,a
  80+ 8C0E 78                                   ld      a,b
  81+ 8C0F EE 80                                xor     SignOnly8Bit                ; flip sign bit
  82+ 8C11 B4                                   or      h
  83+ 8C12 67                                   ld      h,a                         ; recover sign
  84+ 8C13 C9                                   ret
  85+ 8C14 B7           .SUBHLDEOppSGN:         or      a
  86+ 8C15 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  87+ 8C16 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  88+ 8C18 67                                   ld      h,a
  89+ 8C19 7A                                   ld      a,d
  90+ 8C1A E6 7F                                and     SignMask8Bit
  91+ 8C1C 57                                   ld      d,a
  92+ 8C1D 19                                   add     hl,de
  93+ 8C1E 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  94+ 8C1F B4                                   or      h
  95+ 8C20 67                                   ld      h,a                         ; set the previou sign value
  96+ 8C21 C9                                   ret
  97+ 8C22
  98+ 8C22 7C           StarsADDHLDESigned:     ld      a,h
  99+ 8C23 E6 80                                and     SignOnly8Bit
 100+ 8C25 47                                   ld      b,a                         ;save sign bit in b
 101+ 8C26 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 102+ 8C27                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 102+ 8C27 FA 3F 8C    >                        jp		m, .ADDHLDEOppSGN
 103+ 8C2A 78           .ADDHLDESameSigns:      ld      a,b
 104+ 8C2B B2                                   or      d
 105+ 8C2C                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 105+ 8C2C FA 31 8C    >                        jp		m, .ADDHLDESameNeg
 106+ 8C2F 19                                   add     hl,de
 107+ 8C30 C9                                   ret
 108+ 8C31 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 109+ 8C32 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 110+ 8C34 67                                   ld      h,a
 111+ 8C35 7A                                   ld      a,d
 112+ 8C36 E6 7F                                and     SignMask8Bit
 113+ 8C38 57                                   ld      d,a
 114+ 8C39 19                                   add     hl,de
 115+ 8C3A 3E 80                                ld      a,SignOnly8Bit
 116+ 8C3C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 117+ 8C3D 67                                   ld      h,a
 118+ 8C3E C9                                   ret
 119+ 8C3F 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 120+ 8C40 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 121+ 8C42 67                                   ld      h,a
 122+ 8C43 7A                                   ld      a,d
 123+ 8C44 E6 7F                                and     SignMask8Bit
 124+ 8C46 57                                   ld      d,a
 125+ 8C47 B7                                   or      a
 126+ 8C48 ED 52                                sbc     hl,de
 127+ 8C4A 38 04                                jr      c,.ADDHLDEOppInvert
 128+ 8C4C 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 129+ 8C4D B4                                   or      h
 130+ 8C4E 67                                   ld      h,a                         ; set the previou sign value
 131+ 8C4F C9                                   ret
 132+ 8C50              .ADDHLDEOppInvert:      NegHL
 132+ 8C50 AF          >                xor a
 132+ 8C51 95          >                sub l
 132+ 8C52 6F          >                ld l,a
 132+ 8C53 9F          >                sbc a,a
 132+ 8C54 94          >                sub h
 132+ 8C55 67          >                ld h,a
 133+ 8C56 78                                   ld      a,b
 134+ 8C57 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 135+ 8C59 B4                                   or      h
 136+ 8C5A 67                                   ld      h,a                         ; recover sign
 137+ 8C5B C9                                   ret
 138+ 8C5C              ;----------------------------------------------------------------------------------------------------------------------------------
 139+ 8C5C 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 140+ 8C5E 78                                   ld      a,b
 141+ 8C5F 32 DE 94                             ld      (NumberOfStarsNOSTM),a
 142+ 8C62 21 2B 96                             ld      hl,varDust
 143+ 8C65 CD A3 8B     InitStarsLoop:          call    InitStarAtHL
 144+ 8C68 10 FB                                djnz    InitStarsLoop
 145+ 8C6A C9                                   ret
 146+ 8C6B              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ 8C6B              StarsForward:          ; break
 148+ 8C6B 3A DE 94                             ld      a,(NumberOfStarsNOSTM)
 149+ 8C6E 47                                   ld      b,a                                 ; get the number of stars to process
 150+ 8C6F FD 21 2B 96                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 151+ 8C73 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 152+ 8C74 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 153+ 8C77 5F                                   ld      e,a
 154+ 8C78 16 00                                ld      d,0                                 ; de = zhi/256
 155+ 8C7A 3A D4 93                             ld      a,(DELTA)
 156+ 8C7D FE 00                                cp      0
 157+ 8C7F 20 01                                jr      nz,.NormalSpeed
 158+ 8C81 3C                                   inc     a                                   ; so the is at lest some dust movement
 159+ 8C82 47           .NormalSpeed:           ld      b,a
 160+ 8C83 0E 00                                ld      c,0                                 ; bc = delta * 256
 161+ 8C85 CD E2 A2                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 162+ 8C88                                      ShiftHLRight1
 162+ 8C88 CB 3C       >			   srl h
 162+ 8C8A CB 1D       >			   rr  l
 163+ 8C8C                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 163+ 8C8C CB 3C       >			   srl h
 163+ 8C8E CB 1D       >			   rr  l
 164+ 8C90 7D                                   ld      a,l                                 ;
 165+ 8C91 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 166+ 8C93 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 167+ 8C95 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 167+ 8C99 66 05
 168+ 8C9B ED 5B D5 93                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 169+ 8C9F CD E1 8B                             call    StarsSUBHLDESigned
 170+ 8CA2                                      JumpOnBitSet h,7,ResetStar
 170+ 8CA2 CB 7C       >                        bit 	7,h
 170+ 8CA4 C2 F9 8D    >                        jp      nz,ResetStar
 171+ 8CA7 FD 75 04 FD                          ld      (iy+4),hl
 171+ 8CAB 74 05
 172+ 8CAD FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 172+ 8CB1 66 01
 173+ 8CB3 7C                                   ld      a,h                                 ;
 174+ 8CB4 E6 7F                                and     $7F                                 ;
 175+ 8CB6 57                                   ld      d,a                                 ; d = abs(x hi)
 176+ 8CB7 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 177+ 8CB9 ED 30                                mul                                         ; de =  abs(x hi) * Q
 178+ 8CBB 7C                                   ld      a,h                                 ;
 179+ 8CBC E6 80                                and     $80                                 ;
 180+ 8CBE B2                                   or      d                                   ; set sign bit in d
 181+ 8CBF 57                                   ld      d,a                                 ;
 182+ 8CC0 CD 22 8C                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 183+ 8CC3 7C                                   ld      a,h
 184+ 8CC4 E6 7F                                and     $7F
 185+ 8CC6                                      JumpIfAGTENusng $70, ResetStar
 185+ 8CC6 FE 70       >                        cp     $70
 185+ 8CC8 D2 F9 8D    >                        jp		nc,ResetStar
 186+ 8CCB FD 75 00 FD                          ld      (iy+0),hl                           ;
 186+ 8CCF 74 01
 187+ 8CD1 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 187+ 8CD5 66 03
 188+ 8CD7 7C                                   ld      a,h                                 ;
 189+ 8CD8 E6 7F                                and     $7F                                 ;
 190+ 8CDA 57                                   ld      d,a                                 ; d = abs(y hi)
 191+ 8CDB DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 192+ 8CDD ED 30                                mul                                         ; de =  abs(y hi) * Q
 193+ 8CDF 7C                                   ld      a,h                                 ;
 194+ 8CE0 E6 80                                and     $80                                 ;
 195+ 8CE2 B2                                   or      d                                   ; set sign bit in d
 196+ 8CE3 57                                   ld      d,a                                 ;
 197+ 8CE4 CD 22 8C                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 198+ 8CE7 7C                                   ld      a,h
 199+ 8CE8 E6 7F                                and     $7F
 200+ 8CEA                                      JumpIfAGTENusng $60, ResetStar
 200+ 8CEA FE 60       >                        cp     $60
 200+ 8CEC D2 F9 8D    >                        jp		nc,ResetStar
 201+ 8CEF 7C                                   ld      a,h
 202+ 8CF0 E6 80                                and     $80
 203+ 8CF2 20 06                                jr      nz,.NoSecondCheck
 204+ 8CF4 7C                                   ld      a,h
 205+ 8CF5                                      JumpIfAGTENusng $20, ResetStar
 205+ 8CF5 FE 20       >                        cp     $20
 205+ 8CF7 D2 F9 8D    >                        jp		nc,ResetStar
 206+ 8CFA FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 206+ 8CFE 74 03
 207+ 8D00              ; Now roll
 208+ 8D00              ;  6. x = x - alpha * y / 256
 209+ 8D00 2A 97 93     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 210+ 8D03 7D                                   ld      a,l
 211+ 8D04 FE 00                                cp      0
 212+ 8D06 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 8D08                                      ;break
 214+ 8D08                                      ;ld      a,$80
 215+ 8D08                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 216+ 8D08 E5                                   push    hl
 217+ 8D09 7C                                   ld      a,h
 218+ 8D0A E6 80                                and     $80
 219+ 8D0C 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 8D0D 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 8D0E FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 8D11 5F                                   ld      e,a
 223+ 8D12 E6 80                                and     $80
 224+ 8D14 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 8D15 7B           .rxEEquABSignX:         ld      a,e
 226+ 8D16 E6 7F                                and     $7F
 227+ 8D18 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 8D19 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 8D1B 79                                   ld      a,c
 230+ 8D1C A8                                   xor     b                                   ; handle muliple sign bits
 231+ 8D1D B2                                   or      d
 232+ 8D1E 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 8D1F FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 8D23 66 01
 234+ 8D25 CD E1 8B                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 235+ 8D28 FD 75 00 FD                          ld      (iy+0),hl
 235+ 8D2C 74 01
 236+ 8D2E              ;  5. y = y + alpha * x / 256
 237+ 8D2E              .YRoll:                 ;break
 238+ 8D2E E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 8D2F 7C                                   ld      a,h
 240+ 8D30 E6 80                                and     $80
 241+ 8D32 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 242+ 8D33 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 243+ 8D34 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 244+ 8D37 5F                                   ld      e,a
 245+ 8D38 E6 80                                and     $80
 246+ 8D3A 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 247+ 8D3B 7B           .ryEEquABSignX:         ld      a,e
 248+ 8D3C E6 7F                                and     $7F
 249+ 8D3E 5F                                   ld      e,a                                 ; save abs x hi in e
 250+ 8D3F ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 251+ 8D41 79                                   ld      a,c
 252+ 8D42 A8                                   xor     b                                   ; handle muliple sign bits
 253+ 8D43 B2                                   or      d
 254+ 8D44 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 255+ 8D45 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 255+ 8D49 66 03
 256+ 8D4B CD 22 8C                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 257+ 8D4E FD 75 02 FD                          ld      (iy+2),hl
 257+ 8D52 74 03
 258+ 8D54 3A 8A 93     .NoRoll:                ld      a,(BET1)
 259+ 8D57 FE 00                                cp      0
 260+ 8D59 28 22                                jr      z,.NoPitch
 261+ 8D5B              ;  8. y = y - beta * 256
 262+ 8D5B 57           .YPitch:                ld      d,a                                 ; d = BET1
 263+ 8D5C FD 7E 02                             ld      a,(iy+2)
 264+ 8D5F 5F                                   ld      e,a                                 ; e = Y HI
 265+ 8D60 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 266+ 8D62 5F                                   ld      e,a
 267+ 8D63 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 268+ 8D65                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 268+ 8D65 CB 23       >			   sla e
 268+ 8D67 CB 12       >			   rl  d
 269+ 8D69 3A 8C 93                             ld      a,(BET2FLIP)                        ; get inverted Sign
 270+ 8D6C B2                                   or      d
 271+ 8D6D 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 272+ 8D6E FD 6E 02 FD                          ld      hl,(iy+2)
 272+ 8D72 66 03
 273+ 8D74 CD 22 8C                             call    StarsADDHLDESigned
 274+ 8D77 FD 75 02 FD                          ld      (iy+2),hl
 274+ 8D7B 74 03
 275+ 8D7D              ; now work out screen pos
 276+ 8D7D              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 277+ 8D7D              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 278+ 8D7D              ;        pop     de
 279+ 8D7D               ;       call    ProjectStarXToScreen
 280+ 8D7D                                      ;pop     de
 281+ 8D7D              .NoPitch:
 282+ 8D7D FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 283+ 8D80 6F                                   ld      l,a
 284+ 8D81 E6 7F                                and     $7F
 285+ 8D83                                      JumpOnBitSet l,7,StarNegXPt
 285+ 8D83 CB 7D       >                        bit 	7,l
 285+ 8D85 C2 8E 8D    >                        jp      nz,StarNegXPt
 286+ 8D88 C6 80                                add     a,$80
 287+ 8D8A 4F                                   ld      c,a
 288+ 8D8B C3 93 8D                             jp      StarDoneX
 289+ 8D8E 47           StarNegXPt:             ld      b,a
 290+ 8D8F 3E 80                                ld      a,$80
 291+ 8D91 90                                   sub     b
 292+ 8D92 4F                                   ld      c,a
 293+ 8D93 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 294+ 8D96 6F                                   ld      l,a
 295+ 8D97 E6 7F                                and     $7F
 296+ 8D99                                      JumpOnBitSet l,7,StarNegYPt
 296+ 8D99 CB 7D       >                        bit 	7,l
 296+ 8D9B C2 A4 8D    >                        jp      nz,StarNegYPt
 297+ 8D9E C6 60                                add     a,$60
 298+ 8DA0 47                                   ld      b,a
 299+ 8DA1 C3 A9 8D                             jp      StarDoneY
 300+ 8DA4 47           StarNegYPt:             ld      b,a
 301+ 8DA5 3E 60                                ld      a,$60
 302+ 8DA7 90                                   sub     b
 303+ 8DA8 47                                   ld      b,a
 304+ 8DA9 3E FC        StarDoneY:              ld      a,$FC
 305+ 8DAB C5                                   push    bc
 306+ 8DAC              .DrawStar:              MMUSelectLayer2
 306+ 8DAC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 307+ 8DB0 CD FF E0                             call    l2_plot_pixel
 308+ 8DB3 FD 7E 05                             ld      a,(iy+5)
 309+ 8DB6 C1                                   pop    bc
 310+ 8DB7                                      JumpIfAGTENusng $60,EndofStarsLoop
 310+ 8DB7 FE 60       >                        cp     $60
 310+ 8DB9 D2 E9 8D    >                        jp		nc,EndofStarsLoop
 311+ 8DBC 3E D8                                ld      a,$D8
 312+ 8DBE 0C                                   inc     c
 313+ 8DBF C5                                   push    bc
 314+ 8DC0                                      MMUSelectLayer2
 314+ 8DC0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 315+ 8DC4 CD FF E0                             call    l2_plot_pixel
 316+ 8DC7 FD 7E 05                             ld      a,(iy+5)
 317+ 8DCA C1                                   pop    bc
 318+ 8DCB                                      JumpIfAGTENusng $37,EndofStarsLoop
 318+ 8DCB FE 37       >                        cp     $37
 318+ 8DCD D2 E9 8D    >                        jp		nc,EndofStarsLoop
 319+ 8DD0 3E B4                                ld      a,$B4
 320+ 8DD2 04                                   inc     b
 321+ 8DD3 C5                                   push    bc
 322+ 8DD4                                      MMUSelectLayer2
 322+ 8DD4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 323+ 8DD8 CD FF E0                             call    l2_plot_pixel
 324+ 8DDB FD 7E 05                             ld      a,(iy+5)
 325+ 8DDE C1                                   pop    bc
 326+ 8DDF 3E B4                                ld      a,$B4
 327+ 8DE1 0D                                   dec     c
 328+ 8DE2                                      MMUSelectLayer2
 328+ 8DE2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ 8DE6 CD FF E0                             call    l2_plot_pixel
 330+ 8DE9 C1           EndofStarsLoop:         pop     bc                                      ;  0
 331+ 8DEA FD E5                                push    iy                                      ; +1
 332+ 8DEC E1                                   pop     hl                                      ;  0
 333+ 8DED ED 34 06 00                          add     hl,6
 334+ 8DF1 E5           NextStarLoop2:          push    hl                                      ; +1
 335+ 8DF2 FD E1                                pop     iy                                      ;  0
 336+ 8DF4 05                                   dec     b
 337+ 8DF5 C2 73 8C                             jp      nz,StarProcessLoop
 338+ 8DF8 C9                                   ret
 339+ 8DF9              ResetStar:              ;break
 340+ 8DF9                                      ;pop     de
 341+ 8DF9 C1                                   pop     bc                                      ; 0
 342+ 8DFA 3A DE 94                             ld      a,(NumberOfStarsNOSTM)
 343+ 8DFD 90                                   sub     b
 344+ 8DFE 57                                   ld      d,a
 345+ 8DFF 1E 06                                ld      e,6
 346+ 8E01 ED 30                                mul
 347+ 8E03 21 2B 96                             ld      hl,varDust
 348+ 8E06 19                                   add     hl,de
 349+ 8E07 CD A3 8B                             call    InitStarAtHL
 350+ 8E0A C3 F1 8D                             jp      NextStarLoop2
 351+ 8E0D              ;----------------------------------------------------------------------------------------------------------------------------------
 352+ 8E0D FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 353+ 8E10 FD 7E 01                             ld      a,(iy+1)
 354+ 8E13 6F                                   ld      l,a
 355+ 8E14 E6 7F                                and     $7F
 356+ 8E16 47                                   ld      b,a
 357+ 8E17 CD 85 A2                             call    DIV16BCDivDEUNDOC
 358+ 8E1A 7D                                   ld      a,l
 359+ 8E1B                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 359+ 8E1B CB 7F       >                        bit 	7,a
 359+ 8E1D C2 28 8E    >                        jp      nz,StarXNegativePoint
 360+ 8E20              ;StarXPositivePoint:									; x was positive result
 361+ 8E20 2E 80                                ld          l,ScreenCenterX						;
 362+ 8E22 26 00                                ld          h,0
 363+ 8E24 09                                   add         hl,bc								; hl = Screen Centre + X
 364+ 8E25 C3 2F 8E                             jp          StarStoreXPoint
 365+ 8E28              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 366+ 8E28 2E 80                                ld          l,ScreenCenterX
 367+ 8E2A 26 00                                ld          h,0
 368+ 8E2C                                      ClearCarryFlag
 368+ 8E2C B7          >				or a
 369+ 8E2D ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 370+ 8E2F              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 371+ 8E2F 7D                                   ld          a,l
 372+ 8E30 32 83 96                             ld          (varStarX),a
 373+ 8E33 C9                                   ret
 374+ 8E34
 375+ 8E34 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 376+ 8E37 FD 7E 03                             ld          a,(iy+3)
 377+ 8E3A 6F                                   ld          l,a
 378+ 8E3B E6 7F                                and         $7F
 379+ 8E3D 47                                   ld          b,a
 380+ 8E3E CD 85 A2                             call        DIV16BCDivDEUNDOC
 381+ 8E41 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 382+ 8E42                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 382+ 8E42 CB 7F       >                        bit 	7,a
 382+ 8E44 C2 4F 8E    >                        jp      nz,StarNegativeYPoint
 383+ 8E47                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 384+ 8E47 2E 60                               ld          l,ScreenCenterY
 385+ 8E49                                      ClearCarryFlag
 385+ 8E49 B7          >				or a
 386+ 8E4A ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 387+ 8E4C C3 54 8E                             jp          StarStoreYPoint
 388+ 8E4F              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 389+ 8E4F 2E 60                                ld          l,ScreenCenterY
 390+ 8E51 26 00                                ld          h,0
 391+ 8E53 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 392+ 8E54              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 393+ 8E54 7D                                   ld          a,l
 394+ 8E55 32 84 96                             ld          (varStarY),a
 395+ 8E58 C9                                   ret
 396+ 8E59
 397+ 8E59
# file closed: ./Universe/StarRoutines.asm
 873  8E59              ;    include "Universe/move_object-MVEIT.asm"
 874  8E59                  include "./ModelRender/draw_object.asm"
# file opened: ./ModelRender/draw_object.asm
   1+ 8E59              JumpIfObjectIsPlanet:   MACRO target
   2+ 8E59 ~                                    ld a,(UbnkHullCopy)
   3+ 8E59 ~                                    bit 7,a
   4+ 8E59 ~                                    jp  nz,target
   5+ 8E59                                      ENDM
   6+ 8E59
   7+ 8E59              SetMaxVisibility:       MACRO
   8+ 8E59 ~                                    ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
   9+ 8E59 ~                                    ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  10+ 8E59                                      ENDM
  11+ 8E59
  12+ 8E59              JumpIfObjectOutsideFov: MACRO target
  13+ 8E59 ~            LL10CheckXInFoV:
  14+ 8E59 ~                                    ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  15+ 8E59 ~                                    ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  16+ 8E59 ~                                    or		a							    ; clear carry flag for sbc                                        ;         .
  17+ 8E59 ~                                    sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  18+ 8E59 ~                                    bit     7,h
  19+ 8E59 ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  20+ 8E59 ~            LL10CheckYInFoV:
  21+ 8E59 ~                                    ld		hl, (INWKyLo)                                                                                     ;         .
  22+ 8E59 ~                                    or		a							    ; clear carry flag                                                ;         .
  23+ 8E59 ~                                    sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  24+ 8E59 ~                                    bit     7,h
  25+ 8E59 ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  26+ 8E59                                      ENDM
  27+ 8E59
  28+ 8E59              LL10AddGunNode:         MACRO
  29+ 8E59 ~                                    ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  30+ 8E59 ~                                    ld		c,a                                                                                               ;         if zhi = 0
  31+ 8E59 ~                                    ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  32+ 8E59 ~                                    ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  33+ 8E59 ~                                    ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  34+ 8E59 ~                                    add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  35+ 8E59 ~            MakeBothGunNodesVisible:
  36+ 8E59 ~                                    ld      (hl),a                          ; made both gun line notes visible always
  37+ 8E59 ~                                    inc     hl                              ;
  38+ 8E59 ~                                    ld      (hl),a                          ;
  39+ 8E59                                      ENDM
  40+ 8E59
  41+ 8E59              JumpIfTooFarAway:       MACRO   target
  42+ 8E59 ~                                    ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  43+ 8E59 ~                                    ShiftHLDiv8                             ; z position / 8
  44+ 8E59 ~                                    ld      a,h                             ;
  45+ 8E59 ~                                    IfANotZeroGoto target                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  46+ 8E59                                      ENDM
  47+ 8E59
  48+ 8E59              DisplayObject:
  49+ 8E59              LL9:										; Draw object in current bank                                  ;;;; Display object LL9
  50+ 8E59                 ; DEBUG JumpIfObjectIsPlanet LL25
  51+ 8E59              ; .................................................................................................................................
  52+ 8E59              LL9NotPlanet:
  53+ 8E59                  SetMaxVisibility
  53+ 8E59 3E 1F       >                        ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
  53+ 8E5B 32 0E 93    >                        ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  54+ 8E5E              ;LL9TestRemoveShip:
  55+ 8E5E              ;    JumpOnMemBitSet UbnkNweb,7,EraseOldLines; if bit 7 is set goto EraseOldLines                         ;;;;    goto EraseOldLines
  56+ 8E5E              ; .................................................................................................................................
  57+ 8E5E              LL9NoEraseLines:
  58+ 8E5E                  JumpOnMemBitSet UBnkexplDsp,5,DoExplosionOrClear7 ; mask for bit 5, exploding, display explosion state|missiles  EE28 bit5 set, explosion ongoing
  58+ 8E5E 3A 2A C0    >                        ld      a,(UBnkexplDsp)
  58+ 8E61 CB 6F       >                        bit 	5,a
  58+ 8E63 C2 8E 8E    >                        jp      nz,DoExplosionOrClear7
  59+ 8E66                  JumpOnBitClear a,7,DoExplosionOrClear7  ; we now have it in A so EE28 bit7 clear, else Start blowing up!                      ;;;;
  59+ 8E66 CB 7F       >                        bit 	7,a
  59+ 8E68 CA 8E 8E    >                        jp      z,DoExplosionOrClear7
  60+ 8E6B E6 3F        	and		$3F								; clear bits 7,6                                               ;;;; else
  61+ 8E6D 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31                                                      ;;;;    clear bit 7 & 6 of INKW31
  62+ 8E70              ;...............................................................................................................................................................................
  63+ 8E70              LL9ZeroAccelRotCtr:
  64+ 8E70                  ldWriteZero UBnkAccel                   ; byte #28 accel (INF),Y                                       ;;;;    set UBnkAccel & UBnkrotZCounter to 0
  64+ 8E70 AF          >               xor      a
  64+ 8E71 32 27 C0    >               ld       (UBnkAccel),a
  65+ 8E74 32 29 C0     	ld		(UBnkrotZCounter),a				; byte #30 rotz counter (INF),Y                                ;;;;
  66+ 8E77 CD 03 CD     	call	EraseOldLines					; EE51 \ if bit3 set erase old lines in XX19 heap              ;;;;    gosub erase old lines (EE51)
  67+ 8E7A              ;...............................................................................................................................................................................
  68+ 8E7A              LL9SetExploRad:
  69+ 8E7A              	ldWriteConst 18,UbnKEdgeHeapCounter		; Counter for explosion radius                                 ;;;;    set explosion raidus XX19[1] to 18
  69+ 8E7A 3E 12       >               ld       a,18
  69+ 8E7C 32 F5 C2    >               ld       (UbnKEdgeHeapCounter),a
  70+ 8E7F              	ldCopyByte ExplosionCtAddr,UbnkEdgeHeapBytes ; Hull byte#7 explosion of ship type e.g. &2A           ;;;;    set XX19 [2] to Explosion type for ship (i.e nbr of
  70+ 8E7F 3A 04 C3    >               ld       a,(ExplosionCtAddr)
  70+ 8E82 32 F3 C2    >               ld       (UbnkEdgeHeapBytes),a
  71+ 8E85 CD 50 97         call    fillHeapRandom4Points                                                                          ;;;;    set first 4 bytes of XX19 Heap to random number      ::EE55
  72+ 8E88 3A 13 C0         ld      a,(UBnKzsgn)                                                                                   ;;;;    set a to z pos sign
  73+ 8E8B C3 96 8E     	jp      ObjectInFront                                                                                  ;;;;    goto DoExplosion
  74+ 8E8E              ;...............................................................................................................................................................................
  75+ 8E8E              DoExplosionOrClear7:	                                                                                   ;;;;
  76+ 8E8E              EE28:										; bit5 set do explosion, or bit7 clear, dont kill.             ;;;;   DoExplosion:If z ccordinate sign is +ve
  77+ 8E8E              EE49:
  78+ 8E8E              	JumpOnMemBitSet UBnKzsgn,7,TestToRemove ; if zSign is negative then its behind so see if we remove
  78+ 8E8E 3A 13 C0    >                        ld      a,(UBnKzsgn)
  78+ 8E91 CB 7F       >                        bit 	7,a
  78+ 8E93 C2 04 8F    >                        jp      nz,TestToRemove
  79+ 8E96              ;...............................................................................................................................................................................
  80+ 8E96              ObjectInFront:
  81+ 8E96              LL10:										; LL10	 object in front of you                                   ; if object z is > FarInFront
  82+ 8E96                  JumpIfMemGTENusng UBnKzhi,FarInFront,TestToRemove  ; LL14		\ test to remove object                               ;    else if abs(x) > z or abs(y) > z
  82+ 8E96 3A 12 C0    >                        ld     a,(UBnKzhi)
  82+ 8E99 FE C0       >                        cp     FarInFront
  82+ 8E9B D2 04 8F    >                        jp	  nc,TestToRemove
  83+ 8E9E              LL10CheckFov:
  84+ 8E9E                  JumpIfObjectOutsideFov TestToRemove     ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8E9E             >LL10CheckXInFoV:
  84+ 8E9E 2A 0B C0    >                        ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  84+ 8EA1 ED 5B 11 C0 >                        ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  84+ 8EA5 B7          >                        or		a							    ; clear carry flag for sbc                                        ;         .
  84+ 8EA6 ED 52       >                        sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  84+ 8EA8 CB 7C       >                        bit     7,h
  84+ 8EAA CA 04 8F    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8EAD             >LL10CheckYInFoV:
  84+ 8EAD 2A 0E C0    >                        ld		hl, (INWKyLo)                                                                                     ;         .
  84+ 8EB0 B7          >                        or		a							    ; clear carry flag                                                ;         .
  84+ 8EB1 ED 52       >                        sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  84+ 8EB3 CB 7C       >                        bit     7,h
  84+ 8EB5 CA 04 8F    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  85+ 8EB8              LookAtGunNode:
  86+ 8EB8                  LL10AddGunNode                                                                                                ;         NodeHeap[GunVertex, GunVertex+1] = 255
  86+ 8EB8 3A 03 C3    >                        ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  86+ 8EBB 4F          >                        ld		c,a                                                                                               ;         if zhi = 0
  86+ 8EBC 06 00       >                        ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  86+ 8EBE 3E FF       >                        ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  86+ 8EC0 21 BE C0    >                        ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  86+ 8EC3 09          >                        add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  86+ 8EC4             >MakeBothGunNodesVisible:
  86+ 8EC4 77          >                        ld      (hl),a                          ; made both gun line notes visible always
  86+ 8EC5 23          >                        inc     hl                              ;
  86+ 8EC6 77          >                        ld      (hl),a                          ;
  87+ 8EC7              LL10TestTooFarAway:                         ; if zhi / 8 > 0 then its too far
  88+ 8EC7                  JumpIfTooFarAway SkipToAsFar            ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8EC7 2A 11 C0    >                        ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  88+ 8ECA             >                        ShiftHLDiv8                             ; z position / 8
  88+ 8ECA CB 3C       >			   srl h
  88+ 8ECC CB 1D       >			   rr  l
  88+ 8ECE CB 3C       >			   srl h
  88+ 8ED0 CB 1D       >			   rr  l
  88+ 8ED2 CB 3C       >			   srl h
  88+ 8ED4 CB 1D       >			   rr  l
  88+ 8ED6 7C          >                        ld      a,h                             ;
  88+ 8ED7             >                        IfANotZeroGoto SkipToAsFar                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8ED7 FE 00       >				cp	0
  88+ 8ED9 C2 EF 8E    >				jp	nz,SkipToAsFar
  89+ 8EDC              LL10CloseEnoughToDraw:
  90+ 8EDC              ; if zhi /16
  91+ 8EDC 7C               ld      a,h                             ; get zHi shifted again
  92+ 8EDD CB 1F            rr      a                               ; bring in hi bit0 from last shiftHLRight1
  93+ 8EDF CB 3F            srl     a                               ;
  94+ 8EE1 CB 3F            srl     a                               ;
  95+ 8EE3 CB 3F            srl     a                               ; zhi is now max 31
  96+ 8EE5 32 8C C0         ld      (UBnkVisibility),a              ; set XX4 to result, If this occurs then it’s a guaranteed call to LL17 to draw.
  97+ 8EE8              ;    Note the use of hop for jump/branch instrunction Rather than hop being calc logic
  98+ 8EE8              ;    The original did a bransh on positive but 3 shift right logicalks means bit 7 can never be set
  99+ 8EE8              ObjectDrawForwards:
 100+ 8EE8 CD 97 8F         call    DrawForwards
 101+ 8EEB C9               ret
 102+ 8EEC C3 E8 8E         jp      ObjectDrawForwards              ; LL17 guaranteed hop to Draw wireframe
 103+ 8EEF              ;...............................................................................................................................................................................
 104+ 8EEF              SkipToAsFar:
 105+ 8EEF              ; IF we are here then the ship may just be a dot, if its exploding thought that overrides dot
 106+ 8EEF              LL13:                                       ; hopped to as far
 107+ 8EEF              LL13DrawIfNearerThanDotDist:
 108+ 8EEF              ; if dot_distance >= z_hi then we can still draw ship
 109+ 8EEF                  JumpIfMemGTEMemusng DotAddr,UBnKzhi,ObjectDrawForwards
 109+ 8EEF 3A 0A C3    >                        ld   a,(DotAddr)
 109+ 8EF2 21 12 C0    >                        ld   hl,UBnKzhi
 109+ 8EF5 BE          >                        cp   (hl)
 109+ 8EF6 D2 E8 8E    >                        jp	  nc,ObjectDrawForwards
 110+ 8EF9              LL13DrawIfExplodingTest:
 111+ 8EF9              ; if exploding then draw ship
 112+ 8EF9 3A 2A C0         ld      a,(UBnkexplDsp)                 ; INWK+31	\ exploding/display state|missiles
 113+ 8EFC E6 20            and     $20                             ; mask bit 5 exploding
 114+ 8EFE C2 E8 8E         jp      nz,ObjectDrawForwards           ; LL17 hop over to Draw wireframe or exploding
 115+ 8F01              LL13TooFarPlotPoint:
 116+ 8F01 C3 16 8F         jp      ShipPlotPoint                   ; SHPPT	\ else ship plot point, up.
 117+ 8F04              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ 8F04              ;...............................................................................................................................................................................
 119+ 8F04              ;;;LL14
 120+ 8F04              ;;;   if bit5 of INWK31 is set								  ::LL14
 121+ 8F04              ;;;      clear bit 3 of INWK31
 122+ 8F04              ;;;      goto DO Explosion (DOEXP )
 123+ 8F04              ;;;   end if
 124+ 8F04              ;;;   if bit 3 of INKWK 31 is set                             ::EE51
 125+ 8F04              ;;;      clear bt 3 of INK31
 126+ 8F04              ;;;      goto Clear Lines from X19
 127+ 8F04              ;;;   else
 128+ 8F04              ;;;      return from subroutine
 129+ 8F04              ;;;
 130+ 8F04              TestToRemove:                                                                                             ;;;;
 131+ 8F04              LL14:										; Test to remove object                                        ;;;;
 132+ 8F04              	JumpOnMemBitSet UBnkexplDsp,5,EraseOldLines  ; bit5 currently exploding?                                      ;;;;
 132+ 8F04 3A 2A C0    >                        ld      a,(UBnkexplDsp)
 132+ 8F07 CB 6F       >                        bit 	5,a
 132+ 8F09 C2 03 CD    >                        jp      nz,EraseOldLines
 133+ 8F0C              ; Ship is exploding
 134+ 8F0C              ; Not in documented code!!    JumpOnBitSet    a,7,EraseOldLines            ; bit7 ongoing explosion?                                      ;;;;
 135+ 8F0C E6 F7        	and		$F7								; clear bit3  - No longer being drawn
 136+ 8F0E 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31
 137+ 8F11 C3 14 8F     	jp		DOEXP							; DOEXP \ Explosion                                               ;
 138+ 8F14              ;; EraseOldLines is in file EraseOldLines-EE51.asm
 139+ 8F14
 140+ 8F14              DOEXP: ; TODO
 141+ 8F14 B7           	or a
 142+ 8F15 C9           	ret
 143+ 8F16
# file closed: ./ModelRender/draw_object.asm
 875  8F16                  include "./ModelRender/draw_ship_point.asm"
# file opened: ./ModelRender/draw_ship_point.asm
   1+ 8F16
   2+ 8F16
   3+ 8F16              ShipPlotPoint:
   4+ 8F16              SHPPT:	                                    ; ship plot as point from LL10
   5+ 8F16 CD 03 CD         call    EraseOldLines                   ; EE51	\ if bit3 set draw to erase lines in XX19 heap
   6+ 8F19              SHPPT_ProjectToK3K4:
   7+ 8F19 CD D4 CC         call    Project                         ; PROJ	\ Project K+INWK(x,y)/z to K3,K4 for craft center
   8+ 8F1C              SHPTOnScreenTest:
   9+ 8F1C 2A 02 94     	ld		hl,(varK3)						; get X Y ccords from K3 and K4
  10+ 8F1F ED 5B 08 94  	ld		de,(varK4)
  11+ 8F23 7C           	ld		a,h
  12+ 8F24 B2           	or		d								;
  13+ 8F25 20 27        	jr		nz,SHPTFinishup					; quick test to see if K3 or K4 hi are populated , if they are its too big (or negative coord)
  14+ 8F27 7B           	ld		a,e								; k4 or Y lo
  15+ 8F28              	JumpIfAGTENusng ViewHeight,SHPTFinishup	; off view port?
  15+ 8F28 FE 80       >                        cp     ViewHeight
  15+ 8F2A D2 4E 8F    >                        jp		nc,SHPTFinishup
  16+ 8F2D              SHPTInjectFalseLine:						; it will always be 1 line only
  17+ 8F2D 3E 01        	ld		a,1
  18+ 8F2F 32 F0 C2     	ld		(UbnkLineArrayLen),a
  19+ 8F32 3E 04        	ld		a,4
  20+ 8F34 32 F0 C2     	ld		(UbnkLineArrayLen),a
  21+ 8F37 55           	ld		d,l                             ; de = Y lo X hi
  22+ 8F38 21 FE C1     	ld		hl,UbnkLineArray				; head of array
  23+ 8F3B 72           	ld		(hl),d
  24+ 8F3C 23           	inc		hl
  25+ 8F3D 73           	ld		(hl),e
  26+ 8F3E 23           	inc		hl
  27+ 8F3F 72           	ld		(hl),d
  28+ 8F40 23           	inc		hl
  29+ 8F41 73           	ld		(hl),e
  30+ 8F42 23           	inc		hl								; write out point as a line for clean up later
  31+ 8F43              SHPTIsOnScreen:
  32+ 8F43 43           	ld		b,e
  33+ 8F44 4A           	ld		c,d								; bc = XY
  34+ 8F45 3E FF        	ld		a,ShipColour
  35+ 8F47              	MMUSelectLayer2
  35+ 8F47 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 8F4B CD FF E0         call    l2_plot_pixel
  37+ 8F4E              SHPTFinishup:
  38+ 8F4E 3A 2A C0         ld      a,(UBnkexplDsp)
  39+ 8F51 E6 F7            and     $F7                             ;  clear bit3
  40+ 8F53 32 2A C0         ld      (UBnkexplDsp),a                 ; set bit3 (to erase later) and plot as Dot display|missiles explosion state
  41+ 8F56 C9               ret                                     ; now it will return to the caller of
  42+ 8F57
  43+ 8F57              ; ---------------------------------------------------------------------------------------------------------------------------------
  44+ 8F57                  INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++8F57              ; ---------------------------------------------------------------------------------------------------------------------------------
   2++8F57 00           DrawLinesCounter		db	0
   3++8F58              ; Initial tests look OK
   4++8F58              LL155:;
   5++8F58              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   6++8F58                    ;break                                                                             ; ObjectInFront:
   7++8F58 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   8++8F5A FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
   9++8F5C 3A F0 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  10++8F5F                                      ReturnIfAIsZero   						; No lines then bail out.
  10++8F5F FE 00       >                 cp     0
  10++8F61 C8          >                 ret    z
  11++8F62 FD 67                                ld		iyh,a			                ; number of lines still to draw
  12++8F64 21 FE C1                             ld		hl,UbnkLineArray
  13++8F67              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  14++8F67 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  15++8F68 23                                   inc     hl
  16++8F69 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  17++8F6A 23                                   inc     hl
  18++8F6B              ;;DEBUGTEST        push bc
  19++8F6B              ;;DEBUGTEST        push hl
  20++8F6B              ;;DEBUGTEST        push de
  21++8F6B              ;;DEBUGTEST        ld  a,$3F
  22++8F6B              ;;DEBUGTEST        MMUSelectLayer2
  23++8F6B              ;;DEBUGTEST        call    l2_plot_pixel
  24++8F6B              ;;DEBUGTEST        pop de
  25++8F6B              ;;DEBUGTEST        pop hl
  26++8F6B              ;;DEBUGTEST        pop bc
  27++8F6B 5E                                   ld      e,(hl)                          ; c = varX1
  28++8F6C 23                                   inc     hl
  29++8F6D 56                                   ld      d,(hl)                          ; de = point2 Y,X
  30++8F6E              ;;DEBUGTEST       push bc
  31++8F6E              ;;DEBUGTEST       push hl
  32++8F6E              ;;DEBUGTEST       push de
  33++8F6E              ;;DEBUGTEST       push de
  34++8F6E              ;;DEBUGTEST       pop  bc
  35++8F6E              ;;DEBUGTEST       ld  a,$3F
  36++8F6E              ;;DEBUGTEST       MMUSelectLayer2
  37++8F6E              ;;DEBUGTEST       call    l2_plot_pixel
  38++8F6E              ;;DEBUGTEST       pop de
  39++8F6E              ;;DEBUGTEST       pop hl
  40++8F6E              ;;DEBUGTEST       pop bc
  41++8F6E 23                                   inc     hl
  42++8F6F E5                                   push	hl
  43++8F70 FD E5                                push    iy
  44++8F72 60                                   ld      h,b
  45++8F73 69                                   ld      l,c
  46++8F74                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  47++8F74 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  48++8F76                                      MMUSelectLayer2
  48++8F76 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  49++8F7A CD F0 E8                             call    LineHLtoDE
  50++8F7D FD E1                                pop     iy
  51++8F7F E1                                   pop	    hl
  52++8F80 FD 25                                dec     iyh
  53++8F82 20 E3                                jr		nz,DrawXX19ClippedLines
  54++8F84 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  55++8F85
# file closed: ././ModelRender/DrawLines.asm
  45+ 8F85
  46+ 8F85              ;
  47+ 8F85              ;DrawLineBCtoDE:
  48+ 8F85              ;LIONBCDE:
  49+ 8F85              ;    -- Set colour etc
  50+ 8F85              ;    call    l2_draw_diagonal:
  51+ 8F85              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  52+ 8F85
# file closed: ./ModelRender/draw_ship_point.asm
 876  8F85                  include "./ModelRender/drawforwards-LL17.asm"
# file opened: ./ModelRender/drawforwards-LL17.asm
   1+ 8F85              SetLastFaceVisible: MACRO
   2+ 8F85 ~                                ld      a,$FF                       ; last normal is always visible                                                         ;;;
   3+ 8F85 ~                                ld      (UbnkFaceVisArray+15),a     ; XX2+15                                                                                ;;;
   4+ 8F85                                  ENDM
   5+ 8F85
   6+ 8F85 3E FF        SetLastFaceVisCall: ld      a,$FF
   7+ 8F87 32 AF C0                         ld      (UbnkFaceVisArray+15),a
   8+ 8F8A C9                               ret
   9+ 8F8B
  10+ 8F8B              CheckIfExplodingCall:
  11+ 8F8B              ; DEBUG TODO turn into MACRO later
  12+ 8F8B              ; Sets Z flag to true if only some faces are visible
  13+ 8F8B              ; Clears Z flag if exploding so all faces should be rendered
  14+ 8F8B 3A 2A C0             ld      a,(UBnkexplDsp)                 ; INWK+31                                                                               ;;; If bit 5 of exploding state is clear
  15+ 8F8E              ;;DEBUG
  16+ 8F8E F6 FF                or      $FF ; force bit 5 set so exploding
  17+ 8F90 32 2A C0             ld      (UBnkexplDsp),a
  18+ 8F93              ;;DEBUG
  19+ 8F93 4F                   ld      c,a                         ; save explDsp into c                                                                   ;;;
  20+ 8F94 E6 20                and     $20                         ; mask bit5 exploding                                                                   ;;;
  21+ 8F96 C9                   ret
  22+ 8F97
  23+ 8F97
  24+ 8F97              DrawForwardsIXL:
  25+ 8F97              DrawForwards:
  26+ 8F97              LL17:                                       ; draw Wireframe (including nodes exploding)                                            ;;; LL17 draw Wireframe
  27+ 8F97              ; Copy the three orientation vectors into XX16
  28+ 8F97 CD 74 CF     LL15:   call    CopyRotmatToTransMat        ; Copy Ship rotation to XX16                                                                                          ;;; load object position to camera matrix XX16 			::LL91 (ish)
  29+ 8F9A              ;;;;LL21:   call    NormaliseTransMat       ; Normalise XX16
  30+ 8F9A CD 56 D1     LL91lc: call    LoadCraftToCamera           ; Load Ship Coords to XX18
  31+ 8F9D              ; ......................................................                                                                            ;;;
  32+ 8F9D              LastNormalAlwaysVisible:
  33+ 8F9D CD 85 8F             call    SetLastFaceVisCall          ; DEBUG TODO revert back to MACRO later                                                                                                          ;;; Set last Normal to visible FF regarless
  34+ 8FA0              ; HEre original does LDY 12
  35+ 8FA0              ; ......................................................                                                                            ;;; (Originally loaded faces count here and stored in B, but will remove to simplify code)
  36+ 8FA0              CheckIfExplodingState:
  37+ 8FA0 CD 8B 8F             call    CheckIfExplodingCall
  38+ 8FA3 28 0C                jr      z,CullBackFaces             ; EE29 no, only Some visible                                                            ;;;    Goto EE29 - Only some faces visible
  39+ 8FA5              ; ......................................................                                                                            ;;; else
  40+ 8FA5              ItIsExploding:
  41+ 8FA5              MakeAllFacesVisible:                                                                                                                        ;;;    Set all faces in XX0 visible
  42+ 8FA5 CD BC CF             call    SetAllFacesVisible          ; code point EE30                                                                      ;;;
  43+ 8FA8 06 00                ld      b,0                         ; X = 0                                                                                 ;;;
  44+ 8FAA                      ldWriteZero LastNormalVisible       ; XX4  \ visibility                                                                     ;;;    XX4 visibility = 0
  44+ 8FAA AF          >               xor      a
  44+ 8FAB 32 0E 93    >               ld       (LastNormalVisible),a
  45+ 8FAE              LL41:                                       ; visibilities now set in XX2,X Transpose matrix.                                       ;;;
  46+ 8FAE C3 B4 8F             jp      TransposeMatrix             ; LL42 \ jump to transpose matrix and onwards                                           ;;;    goto LL42
  47+ 8FB1              ; ......................................................                                                                            ;;;
  48+ 8FB1              CullBackFaces:
  49+ 8FB1              EE29Entry:
  50+ 8FB1 CD 0C D4             call    CullV2
  51+ 8FB4              ;-- All normals' visibilities now set in XX2,X                                                                                      ;;;
  52+ 8FB4              TransposeMatrix:
  53+ 8FB4              LL42:	                                    ; DO nodeX-Ycoords their comment  \  TrnspMat                                           ;;; ......................................................
  54+ 8FB4 CD 23 D0             call    InverseXX16
  55+ 8FB7
  56+ 8FB7
  57+ 8FB7 CD BF DA             call    ProcessNodes                ; Loop through and determine visibility based on faces and position
  58+ 8FBA              DrawResults:
  59+ 8FBA CD 91 DB             call    PrepLines                   ; LL72, process lines and clip
  60+ 8FBD CD 58 8F             call    DrawLines                   ; Need to plot all lines
  61+ 8FC0 C9                   ret
  62+ 8FC1
# file closed: ./ModelRender/drawforwards-LL17.asm
 877  8FC1
 878  8FC1                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 8FC1
   2+ 8FC1 00           memfillvalue		DB 0
   3+ 8FC2 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 8FC6 7D
   4+ 8FC7 C1 8F        memfill_astrt  		DW memfillvalue
   5+ 8FC9 00 40        memfill_length 		DB $00,$40
   6+ 8FCB 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 8FCE 00 00        memfill_bstrt  		DB $00,$00
   8+ 8FD0 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 8FD4              memfill_cmd_len	  	EQU $ - memfill
  10+ 8FD4
  11+ 8FD4              memfill_dma:
  12+ 8FD4              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 8FD4              .set_fill_value:
  14+ 8FD4 32 C1 8F     	ld 		(memfillvalue),a
  15+ 8FD7              .set_target:
  16+ 8FD7 22 CE 8F     	ld		(memfill_bstrt),hl
  17+ 8FDA              .set_length:
  18+ 8FDA ED 53 C9 8F  	ld		(memfill_length),de
  19+ 8FDE              .write_dma:
  20+ 8FDE 21 C2 8F     	ld 		hl, memfill
  21+ 8FE1 06 12        	ld 		b, memfill_cmd_len
  22+ 8FE3 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 8FE5 ED B3        	otir
  24+ 8FE7 C9           	ret
  25+ 8FE8
# file closed: ./Hardware/memfill_dma.asm
 879  8FE8                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 8FE8
   2+ 8FE8 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 8FEC 7D
   3+ 8FED 00 00        memcopy_astrt  		DB $00,$00
   4+ 8FEF 00 40        memcopy_length 		DB $00,$40
   5+ 8FF1 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 8FF4 00 00        memcopy_bstrt  		DB $00,$00
   7+ 8FF6 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 8FFA              memcopy_cmd_len	  	equ $ - memcopy
   9+ 8FFA
  10+ 8FFA              memcopy_dma:
  11+ 8FFA              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 8FFA              .set_target:
  13+ 8FFA 22 F4 8F     	ld		(memcopy_bstrt),hl
  14+ 8FFD              .set_source:
  15+ 8FFD ED 53 ED 8F  	ld		(memcopy_astrt),de
  16+ 9001              .set_length:
  17+ 9001 ED 43 EF 8F  	ld		(memcopy_length),bc
  18+ 9005              .write_dma:
  19+ 9005 21 E8 8F     	ld 		hl, memcopy
  20+ 9008 06 12        	ld 		b, memcopy_cmd_len
  21+ 900A 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 900C ED B3        	otir
  23+ 900E C9           	ret
  24+ 900F
# file closed: ./Hardware/memcopy_dma.asm
 880  900F                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 900F              ;
   2+ 900F              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 900F              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 900F              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 900F              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 900F              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 900F              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 900F              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 900F              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 900F              ;
  11+ 900F              ; Keyboard
  12+ 900F              ;
  13+ 900F              ;   0      1       2       3       4       5        6       7       8       9
  14+ 900F              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 900F              ;   10     11      12      13      14      15       16      17      18      19
  16+ 900F              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 900F              ;   20     21      22      23      24      25       26      27      28      29
  18+ 900F              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 900F              ;   30     31      32      33      34      35       36      37      38      39
  20+ 900F              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 900F              ;
  22+ 900F              ; Default map
  23+ 900F              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 900F              ;   0          1           2             3              4           5           6           7           8           9
  25+ 900F              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 900F              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 900F              ;                                                                                                       Find System
  28+ 900F              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 900F              ;   10         11          12            13             14          15          16          17          18          19
  30+ 900F              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 900F              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 900F              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 900F              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 900F              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 900F              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 900F              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 900F              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 900F              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 900F              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 900F              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 900F              ;              ResumeGame
  42+ 900F
  43+ 900F              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 900F
  45+ 900F              c_Pressed_Front         equ 0  * 2
  46+ 900F              c_Pressed_Aft           equ 1  * 2
  47+ 900F              c_Pressed_Left          equ 2  * 2
  48+ 900F              c_Pressed_Right         equ 3  * 2
  49+ 900F              c_Pressed_RollLeft      equ 4  * 2
  50+ 900F              c_Pressed_RollRight     equ 5  * 2
  51+ 900F              c_Pressed_Dive          equ 6  * 2
  52+ 900F              c_Pressed_Climb         equ 7  * 2
  53+ 900F              c_Pressed_Accellerate   equ 8  * 2
  54+ 900F              c_Pressed_Decellerate   equ 9  * 2
  55+ 900F              c_Pressed_FireLaser     equ 10 * 2
  56+ 900F              c_Pressed_TargetMissle  equ 11 * 2
  57+ 900F              c_Pressed_FireMissile   equ 12 * 2
  58+ 900F              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 900F              c_Pressed_ECM           equ 14 * 2
  60+ 900F              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 900F              c_Pressed_EscapePod     equ 16 * 2
  62+ 900F              c_Pressed_DockingComp   equ 17 * 2
  63+ 900F              c_Pressed_Hyperspace    equ 18 * 2
  64+ 900F              c_Pressed_Distance      equ 19 * 2
  65+ 900F              c_Pressed_HomeCursor    equ 20 * 2
  66+ 900F              c_Pressed_Launch        equ 21 * 2
  67+ 900F              c_Pressed_BuyCargo      equ 22 * 2
  68+ 900F              c_Pressed_SellCargo     equ 23 * 2
  69+ 900F              c_Pressed_Equip         equ 24 * 2
  70+ 900F              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 900F              c_Pressed_LocalChart    equ 26 * 2
  72+ 900F              c_Pressed_MarketPrices  equ 27 * 2
  73+ 900F              c_Pressed_Status        equ 28 * 2
  74+ 900F              c_Pressed_Inventory     equ 29 * 2
  75+ 900F              c_Pressed_GameSkip      equ 30 * 2
  76+ 900F              c_Pressed_Save          equ 31 * 2
  77+ 900F              c_Pressed_Freeze        equ 32 * 2
  78+ 900F              c_Pressed_Resume        equ 33 * 2
  79+ 900F              c_Pressed_Recentre      equ 34 * 2
  80+ 900F              c_Pressed_Quit          equ 35 * 2
  81+ 900F              c_Pressed_PlanetData    equ 36 * 2
  82+ 900F              c_Pressed_CursorUp      equ 37 * 2
  83+ 900F              c_Pressed_CursorDown    equ 38 * 2
  84+ 900F              c_Pressed_Find          equ 39 * 2
  85+ 900F
  86+ 900F              ; half row 1
  87+ 900F              VK_CAPS  				equ 0
  88+ 900F              VK_Z  					equ 1
  89+ 900F              VK_X  					equ 2
  90+ 900F              VK_C  					equ 3
  91+ 900F              VK_V  					equ 4
  92+ 900F              ; half row 2
  93+ 900F              VK_A  					equ 5
  94+ 900F              VK_S  					equ 6
  95+ 900F              VK_D  					equ 7
  96+ 900F              VK_F  					equ 8
  97+ 900F              VK_G  					equ 9
  98+ 900F              ; half row 3
  99+ 900F              VK_Q  					equ 10
 100+ 900F              VK_W  					equ 11
 101+ 900F              VK_E  					equ 12
 102+ 900F              VK_R  					equ 13
 103+ 900F              VK_T  					equ 14
 104+ 900F              ; half row 4
 105+ 900F              VK_1  					equ 15
 106+ 900F              VK_2  					equ 16
 107+ 900F              VK_3  					equ 17
 108+ 900F              VK_4  					equ 18
 109+ 900F              VK_5  					equ 19
 110+ 900F              ; half row 5
 111+ 900F              VK_0 					equ 20
 112+ 900F              VK_9 					equ 21
 113+ 900F              VK_8 					equ 22
 114+ 900F              VK_7 					equ 23
 115+ 900F              VK_6 					equ 24
 116+ 900F              ; half row 6
 117+ 900F              VK_P  					equ 25
 118+ 900F              VK_O  					equ 26
 119+ 900F              VK_I  					equ 27
 120+ 900F              VK_U  					equ 28
 121+ 900F              VK_Y  					equ 29
 122+ 900F              ; half row 7
 123+ 900F              VK_ENTER 				equ 30
 124+ 900F              VK_L  					equ 31
 125+ 900F              VK_K  					equ 32
 126+ 900F              VK_J  					equ 33
 127+ 900F              VK_H  					equ 34
 128+ 900F              ; half row 8
 129+ 900F              VK_SPACE 				equ 35
 130+ 900F              VK_SYM  				equ 36
 131+ 900F              VK_M  					equ 37
 132+ 900F              VK_N  					equ 38
 133+ 900F              VK_B  					equ 39
 134+ 900F
 135+ 900F              ;KeyboardMapping
 136+ 900F              KeyCode_Front        	equ VK_1
 137+ 900F              KeyCode_Aft          	equ VK_2
 138+ 900F              KeyCode_Left         	equ VK_3
 139+ 900F              KeyCode_Right        	equ VK_4
 140+ 900F              KeyCode_RollLeft     	equ VK_O
 141+ 900F              KeyCode_RollRight    	equ VK_P
 142+ 900F              KeyCode_Dive         	equ VK_Q
 143+ 900F              KeyCode_Climb        	equ VK_A
 144+ 900F              KeyCode_Accellerate  	equ VK_W
 145+ 900F              KeyCode_Decellerate  	equ VK_S
 146+ 900F              KeyCode_FireLaser    	equ VK_SPACE
 147+ 900F              KeyCode_TargetMissle 	equ VK_T
 148+ 900F              KeyCode_FireMissile  	equ VK_F
 149+ 900F              KeyCode_Find        	equ VK_F
 150+ 900F              KeyCode_UnarmMissile 	equ VK_R
 151+ 900F              KeyCode_ECM          	equ VK_E
 152+ 900F              KeyCode_EnergyBomb   	equ VK_U
 153+ 900F              KeyCode_EscapePod    	equ VK_CAPS
 154+ 900F              KeyCode_DockingComp  	equ VK_N
 155+ 900F              KeyCode_Hyperspace   	equ VK_H
 156+ 900F              KeyCode_Distance     	equ VK_J
 157+ 900F              KeyCode_HomeCursor   	equ VK_G
 158+ 900F              KeyCode_Launch       	equ VK_L
 159+ 900F              KeyCode_BuyCargo     	equ VK_B
 160+ 900F              KeyCode_SellCargo    	equ VK_V
 161+ 900F              KeyCode_Equip        	equ VK_C
 162+ 900F              KeyCode_GalacticChrt 	equ VK_5
 163+ 900F              KeyCode_LocalChart   	equ VK_6
 164+ 900F              KeyCode_MarketPrices 	equ VK_7
 165+ 900F              KeyCode_Status       	equ VK_8
 166+ 900F              KeyCode_Inventory    	equ VK_9
 167+ 900F              KeyCode_GameSkip     	equ VK_Z
 168+ 900F              KeyCode_Save         	equ VK_O
 169+ 900F              KeyCode_Freeze       	equ VK_B
 170+ 900F              KeyCode_Resume       	equ VK_L
 171+ 900F              KeyCode_Recentre     	equ VK_D
 172+ 900F              KeyCode_Quit         	equ VK_Y
 173+ 900F              KeyCode_PlanetData   	equ VK_0
 174+ 900F              KeyCode_CursorUp        equ VK_Q
 175+ 900F              KeyCode_CursorDown      equ VK_A
 176+ 900F
 177+ 900F 00 00 00...  Keys					DS	40
 178+ 9037              c_KeyBoardLen 			equ $ - Keys
 179+ 9037 00 00 00...  RawKeys					DS	8
 180+ 903F FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 9043 FE FB FE F7
 180+ 9047 FE EF FE DF
 180+ 904B FE BF FE 7F
 181+ 904F              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 904F              ; of updating this table with the respective location to look up
 183+ 904F              ; key list sequence is in table above
 184+ 904F 1E 90 1F 90  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 9053 20 90 21 90
 184+ 9057 29 90
 185+ 9059 28 90 19 90                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 905D 14 90 1A 90
 185+ 9061 15 90
 186+ 9063 32 90 1D 90                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 9067 17 90 1C 90
 186+ 906B 1B 90
 187+ 906D 2B 90 0F 90                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 9071 35 90 31 90
 187+ 9075 30 90
 188+ 9077 18 90 2E 90                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 907B 36 90 13 90
 188+ 907F 12 90
 189+ 9081 22 90 27 90                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 9085 26 90 25 90
 189+ 9089 24 90
 190+ 908B 10 90 29 90                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 908F 36 90 2E 90
 190+ 9093 16 90
 191+ 9095 2C 90 23 90                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 9099 19 90 14 90
 191+ 909D 17 90
 192+ 909F
 193+ 909F 23 5A 58 43  ASCII_Map:           DB "#","Z","X","C","V"
 193+ 90A3 56
 194+ 90A4 41 53 44 46                       DB "A","S","D","F","G"
 194+ 90A8 47
 195+ 90A9 51 57 45 52                       DB "Q","W","E","R","T"
 195+ 90AD 54
 196+ 90AE 31 32 33 34                       DB "1","2","3","4","5"
 196+ 90B2 35
 197+ 90B3 30 39 38 37                       DB "0","9","8","7","6"
 197+ 90B7 36
 198+ 90B8 50 4F 49 55                       DB "P","O","I","U","Y"
 198+ 90BC 59
 199+ 90BD 3E 4C 4B 4A                       DB ">","L","K","J","H"
 199+ 90C1 48
 200+ 90C2 20 5E 4D 4E                       DB " ","^","M","N","B"
 200+ 90C6 42
 201+ 90C7
 202+ 90C7
 203+ 90C7              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 90C7              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 90C7              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 90C7              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 90C7              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 90C7              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 90C7              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 90C7              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 90C7              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 90C7              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 90C7              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 90C7              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 90C7              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 90C7              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 90C7              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 90C7              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 90C7              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 90C7              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 90C7              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 90C7              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 90C7              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 90C7              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 90C7              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 90C7              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 90C7              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 90C7              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 90C7              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 90C7              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 90C7              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 90C7              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 90C7              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 90C7              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 90C7              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 90C7              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 90C7              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 90C7              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 90C7              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 90C7              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 90C7              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 90C7              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 90C7
 244+ 90C7
 245+ 90C7              init_keyboard:
 246+ 90C7 21 0F 90     	ld		hl,Keys
 247+ 90CA 11 28 00     	ld		de, c_KeyBoardLen
 248+ 90CD 3E 00        	ld		a,0
 249+ 90CF CD D4 8F     	call	memfill_dma
 250+ 90D2 C9           	ret
 251+ 90D3
 252+ 90D3              scan_keyboard:
 253+ 90D3 21 37 90     	ld		hl,RawKeys
 254+ 90D6 11 3F 90     	ld		de,KeyAddrTab
 255+ 90D9 AF           	xor		a
 256+ 90DA FD 2E 08     	ld		iyl,8
 257+ 90DD DD 21 0F 90      ld      ix,Keys
 258+ 90E1              .PortReadLoop:
 259+ 90E1 1A           	ld		a,(de)							; Set up BC as port to read
 260+ 90E2 4F           	ld		c,a
 261+ 90E3 13           	inc		de
 262+ 90E4 1A               ld      a,(de)
 263+ 90E5 47           	ld		b,a
 264+ 90E6 13           	inc		de
 265+ 90E7 ED 78        	in		a,(c)							; read port to a
 266+ 90E9 77           	ld		(hl),a							; set raw keys to value
 267+ 90EA 23           	inc		hl								; and ready for next element
 268+ 90EB 06 05        	ld		b,5								; loop all bits (there are only 5 keys to a group)
 269+ 90ED              .ProcessBitsLoop:
 270+ 90ED CB 47        	bit		0,a								; is bit set
 271+ 90EF 28 07            jr      z,.SetKeyPressed
 272+ 90F1 08               ex      af,af'
 273+ 90F2 AF               xor     a
 274+ 90F3 C3 FF 90         jp      .SetKey
 275+ 90F6 20 0B        	jr		nz,.SkipKeySet
 276+ 90F8              .SetKeyPressed:
 277+ 90F8 08           	ex		af,af'
 278+ 90F9 DD 7E 00         ld      a,(ix+0)
 279+ 90FC 3C               inc     a
 280+ 90FD E6 03            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 281+ 90FF              .SetKey:
 282+ 90FF DD 77 00     	ld		(ix+0),a							; Key Pressed
 283+ 9102 08           	ex		af,af'
 284+ 9103              .SkipKeySet:
 285+ 9103 DD 23        	inc		ix								; move to next key
 286+ 9105 CB 3F        	srl		a								; move next key into bit 0
 287+ 9107 10 E4        	djnz	.ProcessBitsLoop				; Process all key group bits
 288+ 9109 FD 2D            dec     iyl
 289+ 910B 20 D4            jr      nz,.PortReadLoop				; Read next input port
 290+ 910D C9           	ret
 291+ 910E
 292+ 910E              GetKeyStateAddressDE: MACRO
 293+ 910E ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 294+ 910E ~                                  add     hl,a
 295+ 910E ~                                  ld      a,(hl)
 296+ 910E ~                                  ld      e,a
 297+ 910E ~                                  inc     hl
 298+ 910E ~                                  ld      a,(hl)
 299+ 910E ~                                  ld      d,a                             ; now de = address in keypress list
 300+ 910E                                    ENDM
 301+ 910E
 302+ 910E
 303+ 910E              ; call with a = c_Pressed key, will then read mapping
 304+ 910E              wait_for_key_a_press:
 305+ 910E                  GetKeyStateAddressDE
 305+ 910E 21 4F 90    >                      ld      hl,KeyboardMap                  ; work our address to read from
 305+ 9111 ED 31       >                      add     hl,a
 305+ 9113 7E          >                      ld      a,(hl)
 305+ 9114 5F          >                      ld      e,a
 305+ 9115 23          >                      inc     hl
 305+ 9116 7E          >                      ld      a,(hl)
 305+ 9117 57          >                      ld      d,a                             ; now de = address in keypress list
 306+ 9118 D5               push    de
 307+ 9119              wait_for_key_press_loop:
 308+ 9119 CD D3 90         call    scan_keyboard
 309+ 911C E1               pop     hl                              ; get key address into hl
 310+ 911D E5               push    hl
 311+ 911E 7E               ld      a,(hl)
 312+ 911F                  JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 312+ 911F FE 01       >                cp     1
 312+ 9121 C2 19 91    >                jp      nz,wait_for_key_press_loop
 313+ 9124 E1               pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 314+ 9125 C9               ret
 315+ 9126
 316+ 9126              wait_for_key_a_held:
 317+ 9126                  GetKeyStateAddressDE
 317+ 9126 21 4F 90    >                      ld      hl,KeyboardMap                  ; work our address to read from
 317+ 9129 ED 31       >                      add     hl,a
 317+ 912B 7E          >                      ld      a,(hl)
 317+ 912C 5F          >                      ld      e,a
 317+ 912D 23          >                      inc     hl
 317+ 912E 7E          >                      ld      a,(hl)
 317+ 912F 57          >                      ld      d,a                             ; now de = address in keypress list
 318+ 9130 D5               push    de
 319+ 9131              wait_for_key_a_held_loop:
 320+ 9131 CD D3 90         call    scan_keyboard
 321+ 9134 E1               pop     hl
 322+ 9135 E5               push    hl
 323+ 9136 7E               ld      a,(hl)
 324+ 9137                  JumpIfALTNusng  2,wait_for_key_a_held_loop
 324+ 9137 FE 02       >                        cp      2
 324+ 9139 DA 31 91    >                        jp		c,wait_for_key_a_held_loop
 325+ 913C E1               pop     hl
 326+ 913D C9               ret
 327+ 913E
 328+ 913E              get_key_a_state:                            ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 329+ 913E                  GetKeyStateAddressDE
 329+ 913E 21 4F 90    >                      ld      hl,KeyboardMap                  ; work our address to read from
 329+ 9141 ED 31       >                      add     hl,a
 329+ 9143 7E          >                      ld      a,(hl)
 329+ 9144 5F          >                      ld      e,a
 329+ 9145 23          >                      inc     hl
 329+ 9146 7E          >                      ld      a,(hl)
 329+ 9147 57          >                      ld      d,a                             ; now de = address in keypress list
 330+ 9148 EB               ex      de,hl
 331+ 9149 7E               ld      a,(hl)                          ; a = keystate
 332+ 914A C9               ret
 333+ 914B
 334+ 914B              force_key_press:
 335+ 914B                  GetKeyStateAddressDE
 335+ 914B 21 4F 90    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 914E ED 31       >                      add     hl,a
 335+ 9150 7E          >                      ld      a,(hl)
 335+ 9151 5F          >                      ld      e,a
 335+ 9152 23          >                      inc     hl
 335+ 9153 7E          >                      ld      a,(hl)
 335+ 9154 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 9155 EB               ex      de,hl
 337+ 9156 3E 01            ld      a,1
 338+ 9158 77               ld      (hl),a
 339+ 9159 C9               ret
 340+ 915A
 341+ 915A              is_key_pressed:                             ; returns z is set if pressed
 342+ 915A                  GetKeyStateAddressDE
 342+ 915A 21 4F 90    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 915D ED 31       >                      add     hl,a
 342+ 915F 7E          >                      ld      a,(hl)
 342+ 9160 5F          >                      ld      e,a
 342+ 9161 23          >                      inc     hl
 342+ 9162 7E          >                      ld      a,(hl)
 342+ 9163 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 9164 EB               ex      de,hl
 344+ 9165 7E               ld      a,(hl)                          ; a = keystate
 345+ 9166 FE 01            cp      1
 346+ 9168 C9               ret
 347+ 9169
 348+ 9169              is_key_held:                                ; returns z is set if held
 349+ 9169                  GetKeyStateAddressDE
 349+ 9169 21 4F 90    >                      ld      hl,KeyboardMap                  ; work our address to read from
 349+ 916C ED 31       >                      add     hl,a
 349+ 916E 7E          >                      ld      a,(hl)
 349+ 916F 5F          >                      ld      e,a
 349+ 9170 23          >                      inc     hl
 349+ 9171 7E          >                      ld      a,(hl)
 349+ 9172 57          >                      ld      d,a                             ; now de = address in keypress list
 350+ 9173 EB               ex      de,hl
 351+ 9174 7E               ld      a,(hl)                          ; a = keystate
 352+ 9175 E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 353+ 9177 FE 02            cp      2
 354+ 9179 C9               ret
 355+ 917A
 356+ 917A              is_any_key_pressed:
 357+ 917A 21 0F 90         ld      hl,Keys
 358+ 917D 06 28            ld      b,40
 359+ 917F 0E 00            ld      c,0
 360+ 9181              .KeyReadLoop:
 361+ 9181 7E               ld      a,(hl)
 362+ 9182 FE 01            cp      1
 363+ 9184 CA 8E 91         jp      z,.KeyPressed
 364+ 9187 23               inc     hl
 365+ 9188 0C               inc     c
 366+ 9189 10 F6            djnz    .KeyReadLoop
 367+ 918B 3E FF            ld      a,$FF
 368+ 918D C9               ret
 369+ 918E              .KeyPressed:
 370+ 918E 79               ld      a,c
 371+ 918F C9               ret
 372+ 9190
 373+ 9190              is_any_key_held:
 374+ 9190 21 0F 90         ld      hl,Keys
 375+ 9193 06 28            ld      b,40
 376+ 9195 0E 00            ld      c,0
 377+ 9197              .KeyReadLoop:
 378+ 9197 7E               ld      a,(hl)
 379+ 9198 E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 380+ 919A FE 02            cp      2
 381+ 919C CA A6 91         jp      z,.KeyPressed
 382+ 919F 23               inc     hl
 383+ 91A0 0C               inc     c
 384+ 91A1 10 F4            djnz    .KeyReadLoop
 385+ 91A3 3E FF            ld      a,$FF
 386+ 91A5 C9               ret
 387+ 91A6              .KeyPressed:
 388+ 91A6 79               ld      a,c
 389+ 91A7 C9               ret
 390+ 91A8
 391+ 91A8
 392+ 91A8 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 393+ 91C6 00                                   DB  0               ; end of string marker as a safety
 394+ 91C7 00           InputCursor             DB  0
 395+ 91C8 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 396+ 91C9 00           InputChanged            DB  0
 397+ 91CA              InputLimit              EQU 20
 398+ 91CA
 399+ 91CA              keyboard_copy_input_to_de:
 400+ 91CA 21 A8 91         ld      hl,InputString
 401+ 91CD 3A C7 91         ld      a,(InputCursor)
 402+ 91D0 FE 00            cp      0
 403+ 91D2 28 05            jr      z,.NoString
 404+ 91D4 4F               ld      c,a
 405+ 91D5 06 00            ld      b,0
 406+ 91D7 ED B0            ldir
 407+ 91D9              .NoString
 408+ 91D9 3E 00            ld      a,0
 409+ 91DB 12               ld      (de),a
 410+ 91DC C9               ret
 411+ 91DD
 412+ 91DD              initInputText:
 413+ 91DD AF               xor     a
 414+ 91DE 32 C7 91         ld      (InputCursor),a
 415+ 91E1 32 C8 91         ld      (EnterPressed),a
 416+ 91E4 32 C9 91         ld      (InputChanged),a
 417+ 91E7 21 A8 91         ld      hl,InputString
 418+ 91EA 06 1E            ld      b,30
 419+ 91EC              .wipeloop:
 420+ 91EC 77               ld      (hl),a
 421+ 91ED 23               inc     hl
 422+ 91EE 10 FC            djnz    .wipeloop
 423+ 91F0 C9               ret
 424+ 91F1
 425+ 91F1              InputName:
 426+ 91F1 AF               xor     a
 427+ 91F2 32 C9 91         ld      (InputChanged),a
 428+ 91F5 CD 7A 91         call    is_any_key_pressed
 429+ 91F8 FE FF            cp      $FF
 430+ 91FA C8               ret     z
 431+ 91FB              .KeyPressed:
 432+ 91FB 4F               ld      c,a
 433+ 91FC 3A C7 91         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 434+ 91FF FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 435+ 9201 28 0B            jr      z,.DeleteOrEnterOnly            ;
 436+ 9203 21 9F 90         ld      hl,ASCII_Map
 437+ 9206 79               ld      a,c
 438+ 9207 ED 31            add     hl,a
 439+ 9209 7E               ld      a,(hl)
 440+ 920A FE 41            cp      "A"
 441+ 920C 30 15            jr      nc,.AlphaPressed
 442+ 920E              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 443+ 920E FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 444+ 9210 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 445+ 9212 FE 3E            cp      ">"         ; ENTER
 446+ 9214 28 24            jr      z,.EnterPressed
 447+ 9216 FE 23            cp      "#"         ; CAPS
 448+ 9218 28 33            jr      z,.CapsPressed
 449+ 921A FE 5E            cp      "^"         ; SYMBOLSHIFT
 450+ 921C 28 2F            jr      z,.SymbolPressed
 451+ 921E FE 20            cp      " "         ; space
 452+ 9220 28 2B            jr      z,.SpacePressed
 453+ 9222 C9               ret
 454+ 9223              .AlphaPressed:
 455+ 9223 47               ld      b,a
 456+ 9224 3A C7 91         ld      a,(InputCursor)
 457+ 9227 4F               ld      c,a
 458+ 9228 21 A8 91         ld      hl,InputString
 459+ 922B ED 31            add     hl,a
 460+ 922D 78               ld      a,b
 461+ 922E 70               ld      (hl),b
 462+ 922F 79               ld      a,c
 463+ 9230 21 C7 91         ld      hl,InputCursor
 464+ 9233 34               inc     (hl)
 465+ 9234 3E FF            ld      a,$FF
 466+ 9236 32 C9 91         ld      (InputChanged),a
 467+ 9239 C9               ret
 468+ 923A              .EnterPressed:
 469+ 923A 3A C7 91         ld      a,(InputCursor)
 470+ 923D 3C               inc     a
 471+ 923E 21 A8 91         ld      hl,InputString
 472+ 9241 ED 31            add     hl,a
 473+ 9243 AF               xor     a
 474+ 9244 77               ld      (hl),a
 475+ 9245 3D               dec     a
 476+ 9246 32 C8 91         ld      (EnterPressed),a
 477+ 9249 32 C9 91         ld      (InputChanged),a
 478+ 924C C9               ret
 479+ 924D              .CheckShiftDelete:
 480+ 924D              .CapsPressed:                               ; act as a delete key for now
 481+ 924D              .SymbolPressed:
 482+ 924D              .SpacePressed:
 483+ 924D 3A C7 91         ld      a,(InputCursor)
 484+ 9250 FE 00            cp      0
 485+ 9252 C8               ret     z
 486+ 9253 3D               dec     a
 487+ 9254 32 C7 91         ld      (InputCursor),a
 488+ 9257 21 A8 91         ld      hl,InputString
 489+ 925A ED 31            add     hl,a
 490+ 925C AF               xor     a
 491+ 925D 77               ld      (hl),a
 492+ 925E 3E FF            ld      a,$FF
 493+ 9260 32 C9 91         ld      (InputChanged),a
 494+ 9263 C9               ret
 495+ 9264
 496+ 9264              MovementKeyTest:
 497+ 9264              ;DBG1:jp dbg1
 498+ 9264              ;dbx1:
 499+ 9264 AF               xor     a
 500+ 9265 32 E2 93         ld      (CursorKeysPressed),a
 501+ 9268 3A E4 93         ld      a,(MenuIdMax)
 502+ 926B E6 FC            and     $FC
 503+ 926D 20 28            jr      nz,CursorKeys
 504+ 926F              ClimbDiveKeys:
 505+ 926F 2A 5D 90         ld      hl,(addr_Pressed_Climb)
 506+ 9272 7E               ld      a,(hl)
 507+ 9273                  IfAIsZeroGoto ScanDiveKey
 507+ 9273 FE 00       >				cp	0
 507+ 9275 CA 83 92    >				jp	z,ScanDiveKey
 508+ 9278 3A E2 93         ld      a,(CursorKeysPressed)
 509+ 927B F6 80            or      $80
 510+ 927D 32 E2 93         ld      (CursorKeysPressed),a
 511+ 9280 C3 BC 92         jp      ScanLeftKey
 512+ 9283              ScanDiveKey:
 513+ 9283 2A 5B 90         ld      hl,(addr_Pressed_Dive)
 514+ 9286 7E               ld      a,(hl)
 515+ 9287                  IfAIsZeroGoto ScanLeftKey
 515+ 9287 FE 00       >				cp	0
 515+ 9289 CA BC 92    >				jp	z,ScanLeftKey
 516+ 928C 3A E2 93         ld      a,(CursorKeysPressed)
 517+ 928F F6 40            or      $40
 518+ 9291 32 E2 93         ld      (CursorKeysPressed),a
 519+ 9294 C3 BC 92         jp      ScanLeftKey
 520+ 9297              CursorKeys:
 521+ 9297 2A 99 90         ld      hl,(addr_Pressed_CursorUp)
 522+ 929A 7E               ld      a,(hl)
 523+ 929B                  IfAIsZeroGoto ScanCursorDownKey
 523+ 929B FE 00       >				cp	0
 523+ 929D CA AB 92    >				jp	z,ScanCursorDownKey
 524+ 92A0 3A E2 93         ld      a,(CursorKeysPressed)
 525+ 92A3 F6 80            or      $80
 526+ 92A5 32 E2 93         ld      (CursorKeysPressed),a
 527+ 92A8 C3 BC 92         jp      ScanLeftKey
 528+ 92AB              ScanCursorDownKey
 529+ 92AB 2A 9B 90         ld      hl,(addr_Pressed_CursorDown)
 530+ 92AE 7E               ld      a,(hl)
 531+ 92AF                  IfAIsZeroGoto ScanLeftKey
 531+ 92AF FE 00       >				cp	0
 531+ 92B1 CA BC 92    >				jp	z,ScanLeftKey
 532+ 92B4 3A E2 93         ld      a,(CursorKeysPressed)
 533+ 92B7 F6 40            or      $40
 534+ 92B9 32 E2 93         ld      (CursorKeysPressed),a
 535+ 92BC              ScanLeftKey:
 536+ 92BC 2A 57 90         ld      hl,(addr_Pressed_RollLeft)
 537+ 92BF 7E               ld      a,(hl)
 538+ 92C0                  IfAIsZeroGoto ScanRightKey
 538+ 92C0 FE 00       >				cp	0
 538+ 92C2 CA CE 92    >				jp	z,ScanRightKey
 539+ 92C5 3A E2 93         ld      a,(CursorKeysPressed)
 540+ 92C8 F6 20            or      $20
 541+ 92CA 32 E2 93         ld      (CursorKeysPressed),a
 542+ 92CD C9               ret
 543+ 92CE              ScanRightKey:
 544+ 92CE 2A 59 90         ld      hl,(addr_Pressed_RollRight)
 545+ 92D1 7E               ld      a,(hl)
 546+ 92D2                  IfAIsZeroGoto ScanHomeKey
 546+ 92D2 FE 00       >				cp	0
 546+ 92D4 CA E0 92    >				jp	z,ScanHomeKey
 547+ 92D7 3A E2 93         ld      a,(CursorKeysPressed)
 548+ 92DA F6 10            or      $10
 549+ 92DC 32 E2 93         ld      (CursorKeysPressed),a
 550+ 92DF C9               ret
 551+ 92E0              ScanHomeKey:
 552+ 92E0 2A 77 90         ld      hl,(addr_Pressed_HomeCursor)
 553+ 92E3 7E               ld      a,(hl)
 554+ 92E4                  IfAIsZeroGoto ScanRecentreKey
 554+ 92E4 FE 00       >				cp	0
 554+ 92E6 CA F2 92    >				jp	z,ScanRecentreKey
 555+ 92E9 3A E2 93         ld      a,(CursorKeysPressed)
 556+ 92EC F6 08            or      $08
 557+ 92EE 32 E2 93         ld      (CursorKeysPressed),a
 558+ 92F1 C9               ret
 559+ 92F2              ScanRecentreKey:
 560+ 92F2 2A 93 90         ld      hl,(addr_Pressed_Recentre)
 561+ 92F5 7E               ld      a,(hl)
 562+ 92F6                  ReturnIfAIsZero
 562+ 92F6 FE 00       >                 cp     0
 562+ 92F8 C8          >                 ret    z
 563+ 92F9 3A E2 93         ld      a,(CursorKeysPressed)
 564+ 92FC F6 04            or      $04
 565+ 92FE 32 E2 93         ld      (CursorKeysPressed),a
 566+ 9301 C9               ret
 567+ 9302
 568+ 9302
# file closed: ./Hardware/keyboard.asm
 881  9302
 882  9302                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 9302              ;Contants
   2+ 9302
   3+ 9302              SignMask8Bit		equ %01111111
   4+ 9302              SignMask16Bit		equ %0111111111111111
   5+ 9302              SignOnly8Bit		equ $80
   6+ 9302              SignOnly16Bit		equ $8000
   7+ 9302
   8+ 9302              ConstPi				equ $80
   9+ 9302              ConstNorm           equ 197
  10+ 9302
  11+ 9302              ;Text Tokens
  12+ 9302              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 9302              BrabenBellToken 	equ $0D
  14+ 9302              AcorToken			equ $0C
  15+ 9302
  16+ 9302              ; Intro Screen
  17+ 9302              TitleShip			equ	$8C
  18+ 9302              RotationUnity		equ $60
  19+ 9302              DBCheckCode			equ $DB
  20+ 9302              MaxVisibility		equ $1F
  21+ 9302              FarInFront			equ $C0
  22+ 9302
  23+ 9302              ; Universe Managment
  24+ 9302              ShipTypeStation     equ 2
  25+ 9302              ShipTypeMissile     equ 1
  26+ 9302              ShipTypeNormal      equ 0
  27+ 9302
  28+ 9302              MaxNumberOfStars	equ 11
  29+ 9302              FreeListSize		equ	$12
  30+ 9302              ShipTypeSize		equ	32 			;??????? just a guess for now
  31+ 9302              ShipSST				equ 4			; its a space station
  32+ 9302              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  33+ 9302              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  34+ 9302              ShipCountMax		equ	2			; For now just 2 ships to debug
  35+ 9302              LineLimitPerShip	equ 70			; Max lines per ship
  36+ 9302              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  37+ 9302              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  38+ 9302              PlayerDocked		equ	$FF
  39+ 9302
  40+ 9302              ; Memory page managment	(Refers to a memory slot as a place to access data)
  41+ 9302              ShipDataSlot		equ	6			; this may move into rom swap out space later
  42+ 9302              UniverseObjectSlot	equ	7
  43+ 9302
  44+ 9302              KeyForwardsView		equ	$20
  45+ 9302
  46+ 9302              ; Ship Data
  47+ 9302              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  48+ 9302              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  49+ 9302              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  50+ 9302              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  51+ 9302              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  52+ 9302              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  53+ 9302              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  54+ 9302              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  55+ 9302              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  56+ 9302              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  57+ 9302              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  58+ 9302              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  59+ 9302              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  60+ 9302              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  61+ 9302              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  62+ 9302              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  63+ 9302              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  64+ 9302              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  65+ 9302              ;;;;00 00			 EQUW 0     \ type 18 is
  66+ 9302              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  67+ 9302              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  68+ 9302              ;;;;00 00			 EQUW 0     \ type 21 is
  69+ 9302              ;;;;00 00			 EQUW 0     \ type 22 is
  70+ 9302              ;;;;00 00			 EQUW 0     \ type 23 is
  71+ 9302              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  72+ 9302              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  73+ 9302              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  74+ 9302              ;;;;00 00			 EQUW 0     \ type 27 is
  75+ 9302              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  76+ 9302              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  77+ 9302              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  78+ 9302              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  79+ 9302              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  80+ 9302              ;;;;			\ NEWB examples
  81+ 9302              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  82+ 9302              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  83+ 9302              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  84+ 9302              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  85+ 9302              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  86+ 9302
# file closed: ./Variables/constant_equates.asm
 883  9302                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 9302              ;	PAGE 0 Map to variable anmes
   2+ 9302              ;	PAGE 0 Map to variable anmes
   3+ 9302              ;
   4+ 9302              ;
   5+ 9302              ;
   6+ 9302              ;	06		T1
   7+ 9302              ;	07
   8+ 9302              ;	08		SC1					Screen Hi
   9+ 9302              ;	09							XX16 Matrix
  10+ 9302              ;	0A							XX16+1
  11+ 9302              ;	0B							XX16+2
  12+ 9302              ;	0C							XX16+3
  13+ 9302              ;	0D                          XX16+4
  14+ 9302              ;	0E                          XX16+5
  15+ 9302              ;	0F							XX16+6
  16+ 9302              ;	10		varP				XX16+7
  17+ 9302              ;	11		varP				XX16+8
  18+ 9302              ;	12                          XX16+9
  19+ 9302              ;	13                          XX16+10
  20+ 9302              ;	14							XX16+11
  21+ 9302              ;	15                          XX16+12
  22+ 9302              ;	16                          XX16+13
  23+ 9302              ;	17                          XX16+14
  24+ 9302              ;	17                          XX16+14
  25+ 9302              ;	18                          XX16+15
  26+ 9302              ;	19
  27+ 9302              ;	1A
  28+ 9302              ;	1B
  29+ 9302              ;	1C
  30+ 9302              ;	1D
  31+ 9302              ;	1E							XX0
  32+ 9302              ;	1F                          XX0+1
  33+ 9302              ;	20		INF                 XX0+2
  34+ 9302              ;	21      INF+1               XX0+3
  35+ 9302              ;	22      varV                XX0+4
  36+ 9302              ;	23      varV +1             XX0+5
  37+ 9302              ;	24		XXlo                XX0+6
  38+ 9302              ;	25		XXHi
  39+ 9302              ;	26		YYlo
  40+ 9302              ;	27		YYHi
  41+ 9302              ;	28
  42+ 9302              ;	29
  43+ 9302              ;	2A		BETA (pitch done)
  44+ 9302              ;	2B		BET1 lower7 magnitude
  45+ 9302              ;	2C		XC
  46+ 9302              ;	2D		YC
  47+ 9302              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 9302              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 9302              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 9302              ;	30		ECM Active
  51+ 9302              ;	31		ALP1
  52+ 9302              ;	32		ALP2
  53+ 9302              ;	33		ALP2FLIP
  54+ 9302
  55+ 9302              ;	36		Z1					XX15+2yscaled
  56+ 9302              ;	37		                    XX15+3ysign
  57+ 9302              ;	38		                    XX15+4zscaled
  58+ 9302              ;	39							XX15+5zsign
  59+ 9302              ;	3A		XX12				xplot for star
  60+ 9302              ;	3B
  61+ 9302              ;	3C
  62+ 9302              ;	3D
  63+ 9302              ;	3E
  64+ 9302              ;	3F
  65+ 9302              ;	40		varKlo
  66+ 9302              ;	41		varKmid
  67+ 9302              ;	42		varKHi
  68+ 9302              ;	43		varKVeryHi+Sign
  69+ 9302              ;	44
  70+ 9302              ;	45		MSTG				MissileTarget
  71+ 9302              ;	46		INWK				; Inner working space of 37 bytes
  72+ 9302              ;	47		INWK
  73+ 9302              ;	48		INWK
  74+ 9302              ;	49		INWK
  75+ 9302              ;	4A		INWK
  76+ 9302              ;	4B		INWK
  77+ 9302              ;	4C		INWK
  78+ 9302              ;	4D		INWK
  79+ 9302              ;	4E		INWK
  80+ 9302              ;	4F		INWK+9
  81+ 9302              ;	50		INWK
  82+ 9302              ;	51		INWK
  83+ 9302              ;	52		INWK
  84+ 9302              ;	53		INWK
  85+ 9302              ;	54		INWK
  86+ 9302              ;	55		INWK
  87+ 9302              ;	56		INWK
  88+ 9302              ;	57		INWK
  89+ 9302              ;	58		INWK
  90+ 9302              ;	59		INWK
  91+ 9302              ;	5A		INWK
  92+ 9302              ;	5B		INWK
  93+ 9302              ;	5C		INWK
  94+ 9302              ;	5D		INWK
  95+ 9302              ;	5E		INWK
  96+ 9302              ;	5F		INWK
  97+ 9302              ;	60		INWK
  98+ 9302              ;	61		INWK
  99+ 9302              ;	62		INWK
 100+ 9302              ;	63		INWK
 101+ 9302              ;	64		INWK
 102+ 9302              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 9302              ;	66		INWK
 104+ 9302              ;	67		INWK				XX19
 105+ 9302              ;	68		INWK
 106+ 9302              ;	69		INWK
 107+ 9302              ;	6A		INWK36
 108+ 9302              ;	6B
 109+ 9302              ;	6C		QQ15				Current Seed
 110+ 9302              ;	6D		QQ15+1
 111+ 9302              ;	6E		QQ15+2
 112+ 9302              ;	6F		QQ15+3
 113+ 9302              ;	70		QQ15+4
 114+ 9302              ;	71
 115+ 9302              ;	72		XX18   xlo			QQ17
 116+ 9302              ;	73		XX18+1 xhi
 117+ 9302              ;	74		XX18+2 xsgn
 118+ 9302              ;	75		XX18   ylo
 119+ 9302              ;	76		XX18+1 yhi
 120+ 9302              ;	77		XX18+2 ysgn
 121+ 9302              ;	78		XX18   zlo
 122+ 9302              ;	79		XX18+1 zhi
 123+ 9302              ;	7A		XX18+2 zsgn
 124+ 9302              ;	7B		BET2				Pitch Sign
 125+ 9302              ;	7C		BET2FLIP
 126+ 9302              ;	7D		DELTA
 127+ 9302              ;	7E		DELT4Lo
 128+ 9302              ;	7F		DELT4Hi
 129+ 9302              ;	80
 130+ 9302              ;	81		varQ
 131+ 9302              ;	82		varR
 132+ 9302              ;	83		varS
 133+ 9302              ;	84		XSAV
 134+ 9302              ;	85		YSAV
 135+ 9302              ;	86		XX17
 136+ 9302              ;	87		MenuIdMax		QQ11
 137+ 9302              ;	88		ZZDust
 138+ 9302              ;	89
 139+ 9302              ;	8A		MCNT			Move Count
 140+ 9302              ;	8B		ALPHA
 141+ 9302              ;	8C		TYPE
 142+ 9302              ;	8D
 143+ 9302              ;	8E		DockedFlag		QQ12
 144+ 9302              ;	8F
 145+ 9302              ;	96		XX4				Nbr of Normals Visible
 146+ 9302              ;
 147+ 9302              ;   9F      POINT
 148+ 9302              ;	D0
 149+ 9302              ;	D1		varT
 150+ 9302              ;array list of each face during draw flagged visible or not
 151+ 9302              ;	D2      XX2
 152+ 9302              ;	D3      XX2+1
 153+ 9302              ;	D4      XX2+2
 154+ 9302              ;	D5      XX2+3
 155+ 9302              ;	D6      XX2+4
 156+ 9302              ;	D7      XX2+5
 157+ 9302              ;	D8      XX2+6
 158+ 9302              ;	D9      XX2+7
 159+ 9302              ;	DA      XX2+8
 160+ 9302              ;	DB      XX2+9
 161+ 9302              ;	DC      XX2+10
 162+ 9302              ;	DD      XX2+11
 163+ 9302              ;	DE      XX2+12
 164+ 9302              ;	DF		XX2+13
 165+ 9302              ;	E0		XX2+14
 166+ 9302              ;	E1		XX2+15
 167+ 9302              ;	E2
 168+ 9302              ;	E3
 169+ 9302              ;	E4
 170+ 9302              ;	E5
 171+ 9302              ;	E6
 172+ 9302              ;	E7
 173+ 9302              ;	E8
 174+ 9302              ;	E9
 175+ 9302              ;	EA
 176+ 9302              ;	EB
 177+ 9302              ;	EC
 178+ 9302              ;	ED
 179+ 9302              ;	EE
 180+ 9302              ;	8F
 181+ 9302
 182+ 9302 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 9304 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 9306              ; Variables to simulate 6502 registers until code fixed
 185+ 9306              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 9306 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 9307 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 9308 00           regA		DB	0
 189+ 9309
 190+ 9309
 191+ 9309 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 930A 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 930C 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 930E
 195+ 930E
 196+ 930E
 197+ 930E              ;XX16		DS	16				; 16 byte Matrix
 198+ 930E
 199+ 930E              P0INWK							; page 0 & 46
 200+ 930E              p0INWK31						; page 0 & 65
 201+ 930E              P0INWK36						; PAGE 0 &6A
 202+ 930E
 203+ 930E 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 930F              LastNormalVisible	equ	XX4
 205+ 930F              varXX4              equ XX4
 206+ 930F
 207+ 930F
 208+ 930F
 209+ 930F 00           PATG		DB	0				; 6502 &03C9
 210+ 9310 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 9312
 212+ 9312
 213+ 9312 00 00 00...  UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 9336 00 00 00...  HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 9376
 216+ 9376              ; Present System Variables
 217+ 9376
 218+ 9376 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 9377 20           RandomSeed1				DB	32	; 01
 220+ 9378 0C           RandomSeed2				DB	12			; 02
 221+ 9379 42           RandomSeed3				DB	66			; 03
 222+ 937A
 223+ 937A 00           varT1					DB	0				; 06
 224+ 937B 00           SClo					DB 0				; 07
 225+ 937C 00           SChi					DB 0				; 08
 226+ 937D 00           varP					DB 0 				; 10	XX16+7
 227+ 937E 00           varPhi					DB 0 				; 11	XX16+8
 228+ 937F 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 9380              varPp1                  equ varPhi
 230+ 9380              varPp2                  equ varPhi2
 231+ 9380 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 9381 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 9382              UnivPointer				equ	UnivPointerLo
 234+ 9382 00           varV					DB 0				; 22                          XX0+4
 235+ 9383 00           varVHi					DB 0				; 23                          XX0+5
 236+ 9384 00           varXXlo                 DB 0                ; 24
 237+ 9385 00           varXXHi                 DB 0                ; 25
 238+ 9386              varXX					equ	varXXlo
 239+ 9386 00           YYlo                    DB 0                ; 26
 240+ 9387 00           YYHi                    DB 0                ; 27
 241+ 9388              varYY					equ	YYlo
 242+ 9388              											;	28
 243+ 9388              											;	29
 244+ 9388              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 9388 00           BETA 					DB	0               ; 2A        (pitch done)
 246+ 9389 00           JSTY                    DB  0               ; Joystick analog
 247+ 938A 00           BET1 					DB	0               ; 2B        lower7 magnitude
 248+ 938B 00           BET2                    DB  0               ;            climb sign
 249+ 938C 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 250+ 938D 1F           BET1MAXC                DB  31              ; max climb
 251+ 938E E1           BET1MAXD                DB  -31             ; max dive
 252+ 938F 00           XC						DB	0               ; 2C
 253+ 9390 00           YC						DB 	0               ; 2D
 254+ 9391 00           OuterHyperCount			DB 	0				; 2E		TODO Replace with 16 bit counter later
 255+ 9392 00           InnerHyperCount			DB 	0				; 2F
 256+ 9393 00           ECMActive				DB 	0				; 30		ECM Active flag
 257+ 9394 00 00        JSTX                    DW  0               ;           Joystick analog value
 258+ 9396 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 259+ 9397 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 260+ 9398 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 261+ 9399 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 262+ 939A 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 263+ 939B E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 264+ 939C
 265+ 939C 00 00        MissileTarget			DW	0				; 45
 266+ 939E 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 267+ 93C3
 268+ 93C3              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 269+ 93C3              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 270+ 93C3              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 271+ 93C3 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 272+ 93C4              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 273+ 93C4
 274+ 93C4
 275+ 93C4 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 276+ 93C9              											;	6D		QQ15+1
 277+ 93C9              											;	6E		QQ15+2
 278+ 93C9              											;	6F		QQ15+3
 279+ 93C9              											;	70		QQ15+4
 280+ 93C9              											;	71		QQ15+5
 281+ 93C9 00           QQ17					DB	0				;   72
 282+ 93CA 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 283+ 93CB 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 284+ 93CC 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 285+ 93CD 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 286+ 93CE 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 287+ 93CF 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 288+ 93D0 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 289+ 93D1 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 290+ 93D2 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 291+ 93D3
 292+ 93D3 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 293+ 93D4 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 294+ 93D5 00           DELT4Lo					DB 	0				; 7E
 295+ 93D6 00           DELT4Hi					DB 	0				; 7F
 296+ 93D7              DELTA4                  equ                 DELT4Lo
 297+ 93D7
 298+ 93D7
 299+ 93D7              ; Not thise must be in this order else 16 bit fetches will fail
 300+ 93D7 00           varU                    DB  0               ;   80
 301+ 93D8 00           varQ					DB  0 				;	81
 302+ 93D9 00           varR					DB  0 				;	82
 303+ 93DA 00           varS					DB  0 				;	83
 304+ 93DB              varRS                   equ varR
 305+ 93DB
 306+ 93DB 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 307+ 93DD
 308+ 93DD 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 309+ 93DE 00           YSAV                    DB  0               ; 85
 310+ 93DF 00           XX17					DB	0				; 86
 311+ 93E0              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 312+ 93E0              varXX17                 equ  XX17
 313+ 93E0 00           ScreenChanged           DB  0
 314+ 93E1 00           ScreenIndex             DB  0
 315+ 93E2 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 316+ 93E3                                                          ; 7    6    5    4     3    2        1    0
 317+ 93E3                                                          ; Up   Down Left Right Home Recentre
 318+ 93E3 00           InvertedYAxis           DB  0
 319+ 93E4 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 320+ 93E5              											; Bit 7 Set  ShortRangeChart    $80
 321+ 93E5              											; Bit 6 Set  Galactic Chart     $40
 322+ 93E5              											; Bit 5 Set  Market Place       $20
 323+ 93E5              											; Bit 4 Set  Status Screen      $10
 324+ 93E5              											; Bit 3 Set  Display Inventory  $08
 325+ 93E5                                                          ; Bit 2 Set  Planet Data        $04
 326+ 93E5                                                          ; View bit combinations if the ones above not matched
 327+ 93E5                                                          ; bits 1 0
 328+ 93E5                                                          ;      1 1  Front view , i.e. $03
 329+ 93E5                                                          ;      1 0  Aft View          $02
 330+ 93E5                                                          ;      0 1  Left View         $01
 331+ 93E5                                                          ;      0 0  Right view        $00
 332+ 93E5              											; Bit 0 Set  Data On System
 333+ 93E5              											; 0  Space View (Not a menu)
 334+ 93E5 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 335+ 93E6 00           XX13                    DB  0               ;   89
 336+ 93E7 00           MCNT					DB 	0				; 8A
 337+ 93E8 00           TYPE					DB	0				; 8C used for ship type in drawing
 338+ 93E9 00           DockedFlag				DB	0				; 8E
 339+ 93EA 00           GamePaused              DB  0
 340+ 93EB 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 341+ 93EC 00           varCNT                  DB  0               ; 93
 342+ 93ED 00           varRAT                  DB  0               ; 99
 343+ 93EE 00           varRAT2                 DB  0               ; 9A
 344+ 93EF
 345+ 93EF 00           varK					DB	0				; 40
 346+ 93F0 00           varKp1					DB	0				; 41
 347+ 93F1 00           varKp2					DB	0				; 42
 348+ 93F2 00           varKp3					DB	0				; 43
 349+ 93F3
 350+ 93F3 00           varK2                   DB  0               ; 9B
 351+ 93F4 00           varK2p1                 DB  0               ; 9C K2 plus 1
 352+ 93F5 00           varK2p2                 DB  0               ; 9D K2 plus 2
 353+ 93F6 00           varK2p3                 DB  0               ; 9E K2 plus 3
 354+ 93F7
 355+ 93F7 00           Point                   DB  0               ; 9F      POINT
 356+ 93F8
 357+ 93F8 00           varT					DB	0				; D1
 358+ 93F9
 359+ 93F9 00 00 00...  varVector9ByteWork      DS  9
 360+ 9402
 361+ 9402 00 00 00 00  varK3					DS	4				; D2
 362+ 9406 00           varK3p2					DB	0				; 42
 363+ 9407 00           varK3p3					DB	0				; 43
 364+ 9408              varK3p1					equ varK3+1			; D3
 365+ 9408 00 00 00 00  varK4					DS	4				; E0
 366+ 940C              varK4p1					equ varK4+1			; D3
 367+ 940C
 368+ 940C              ;PlayerData:
 369+ 940C 00           PlayerForwardSheild0	DB	0 ; ?????
 370+ 940D 00           PlayerForwardSheild1    DB	0
 371+ 940E 00           PlayerForwardSheild2    DB	0
 372+ 940F
 373+ 940F
 374+ 940F              ;Heap
 375+ 940F
 376+ 940F 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 377+ 9411 00 00 00...  HeapData				DS	50
 378+ 9443              ; Contains 				X 16 bit, Y 16 bit
 379+ 9443              ;RuntimeData:
 380+ 9443              HeapHead				equ HeapStart
 381+ 9443
 382+ 9443 00 00 00...  FRIN					DS FreeListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 383+ 9455              FreeUniverseSlotList    EQU FRIN
 384+ 9455 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 385+ 9456 00           MANY					DB	0				; &031E array of ship types???
 386+ 9457 00           SpaceStationPresent		DB	0				; &0320	Wonder if many is counter of type in univ objects?
 387+ 9458 00           						DB	0				; &0321	Speculative?
 388+ 9459 00           						DB	0				; &0322	Speculative?
 389+ 945A 00           						DB	0				; &0323	Speculative?
 390+ 945B 00           						DB	0				; &0324	Speculative?
 391+ 945C 00           						DB	0				; &0325	Speculative?
 392+ 945D 00           						DB	0				; &0326	Speculative?
 393+ 945E 00           						DB	0				; &0327	Speculative?
 394+ 945F 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 395+ 9460 00           						DB	0				; &0329	MANY + 11 Speculative?
 396+ 9461 00           				        DB	0				; &032A	MANY + 12 Speculative?
 397+ 9462 00           				        DB	0				; &032B	MANY + 13 Speculative?
 398+ 9463 00           				        DB	0				; &032C	MANY + 14 Speculative?
 399+ 9464 00           				        DB	0				; &032D	MANY + 15 Speculative?
 400+ 9465 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 401+ 9466 00           				        DB	0				; &032F	MANY + 17 Speculative?
 402+ 9467 00           				        DB	0				; &0330	MANY + 18 Speculative?
 403+ 9468 00           				        DB	0				; &0331	MANY + 19 Speculative?
 404+ 9469 00           						DB	0				; &0332	MANY + 20 Speculative?
 405+ 946A 00           				        DB	0				; &0333	MANY + 21 Speculative?
 406+ 946B 00           				        DB	0				; &0334	MANY + 22 Speculative?
 407+ 946C 00           				        DB	0				; &0335	MANY + 23 Speculative?
 408+ 946D 00           				        DB	0				; &0336	MANY + 24 Speculative?
 409+ 946E 00           				        DB	0				; &0337	MANY + 25 Speculative?
 410+ 946F 00           				        DB	0				; &0338	MANY + 26 Speculative?
 411+ 9470 00           				        DB	0				; &0339	MANY + 27 Speculative?
 412+ 9471 00           				        DB	0				; &033A	MANY + 28 Speculative?
 413+ 9472 00           				        DB	0				; &033B	MANY + 29 Speculative?
 414+ 9473 00           				        DB	0				; &033C	MANY + 30 Thargoids
 415+ 9474 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 416+ 9475 00           JunkCount				DB  0				; $033E
 417+ 9476 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 418+ 9477 00           CabinTemp				DB	0				; $0342
 419+ 9478 00           MissileArmedStatus		DB	0				; 0344 MSAR
 420+ 9479 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 421+ 947A 00           GunTemperature			DB	0				; 0347	GNTMP
 422+ 947B 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 423+ 947C 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 424+ 947D 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 425+ 947E 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 426+ 947F 00           JoystickX				DB	0				; 034C JSTX
 427+ 9480 00           JoystickY				DB	0				; 034D JSTY
 428+ 9481 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 429+ 9482 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 430+ 9483 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 431+ 948B 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 432+ 948C 00           VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 433+ 948D              											; Bit mask XXXX10XX - Thargoid plan mission
 434+ 948D 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 435+ 948E 00           PresentSystemY			DB  0
 436+ 948F 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 437+ 9495 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 438+ 9496 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 439+ 9497              ;036C to D???
 440+ 9497 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 441+ 949E              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 442+ 949E              ;  #&5 Does J reverse both joystick channels
 443+ 949E              ;  #&4 Does Y reverse joystick Y channel			03CB
 444+ 949E              ;  #&3 Does F toggle flashing information			03CA
 445+ 949E              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 446+ 949E              ;  #&1 Does A toggle keyboard auto-recentering ?
 447+ 949E              ;  #&0 Caps-lock toggles keyboard flight damping
 448+ 949E 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 449+ 949F 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 450+ 94A0 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 451+ 94B0 00           AlienItemsAvaliability  DB	0				; 039D
 452+ 94B1 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 453+ 94B2 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 454+ 94B4 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 455+ 94B5              											;
 456+ 94B5 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 457+ 94B6 00           ForeShield				DB	0				; 03A5
 458+ 94B7 00           AftShield				DB	0				; 03A6
 459+ 94B8 00           PlayerEnergy			DB	0				; 03A7
 460+ 94B9 00           CompassX				DB	0				; 03A8
 461+ 94BA 00           CompassY				DB	0				; 03A9
 462+ 94BB 00           MarketPrice				DB	0				; 03AA QQ24
 463+ 94BC 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 464+ 94BD 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 465+ 94BE 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 466+ 94BF 00           GovPresentSystem		DB	0				; 03AE Govenment
 467+ 94C0 00           TekPresentSystem		DB	0				; 03AF Technology
 468+ 94C1 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 469+ 94C3              											; this is ship lines stack pointer so may be redundant with paging
 470+ 94C3              											; LS = line stack so we will have one for now to remove later
 471+ 94C3 00 00 00...  WorkingSeeds			DS	6
 472+ 94C9 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 473+ 94CF 00           DisplayEcononmy			DB	0				; 03B8
 474+ 94D0 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 475+ 94D1 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 476+ 94D2 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 477+ 94D4 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 478+ 94D6 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 479+ 94D8 00 00        DisplayRadius			DW	0
 480+ 94DA 00           TargetPlanetX			DB	0               ; 03C1
 481+ 94DB 00           TargetPlanetY			DB	0               ; 03C2
 482+ 94DC 00           SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 483+ 94DD 00           SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 484+ 94DE 00           NumberOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 485+ 94DF
 486+ 94DF 00           CompassColor			DB	0				; 03C5
 487+ 94E0 00           SoundToggle				DB	0				; 03C6
 488+ 94E1 00           KeyboardRecenterToggle	DB	0				; 03C8
 489+ 94E2 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 490+ 94E3 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 491+ 94E4 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 492+ 94E5 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 493+ 94E6 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 494+ 94E7 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 495+ 94E8
 496+ 94E8              ; Working Data
 497+ 94E8
 498+ 94E8              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 499+ 94E8              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 500+ 94E8              ; $0925 =	EQUW page9+37* 1
 501+ 94E8              ; $094A =	EQUW page9+37* 2
 502+ 94E8              ; $096F =	EQUW page9+37* 3
 503+ 94E8              ; $0994 =	EQUW page9+37* 4
 504+ 94E8              ; $09B9 =	EQUW page9+37* 5
 505+ 94E8              ; $09DE =	EQUW page9+37* 6
 506+ 94E8              ; $0A03 =	EQUW page9+37* 7
 507+ 94E8              ; $0A28 =	EQUW page9+37* 8
 508+ 94E8              ; $0A4D =	EQUW page9+37* 9
 509+ 94E8              ; $0A72 =	EQUW page9+37*10
 510+ 94E8              ; $0A97 =	EQUW page9+37*11
 511+ 94E8              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 512+ 94E8
 513+ 94E8
 514+ 94E8
 515+ 94E8              ; 0b00 is start address of data to save
 516+ 94E8 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 517+ 94E9
 518+ 94E9 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 519+ 94EB 00 00        CommanderLoadAddress	DW	0				;0C03
 520+ 94ED 00 00        LengthOfFile			DW	0				;0C0B
 521+ 94EF 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 522+ 94F1
 523+ 94F1 00 00 00...  EdgesBuffer				DS 50
 524+ 9523              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 525+ 9523              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 526+ 9523
 527+ 9523 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 528+ 9569              ShipLineStackTop		equ $ - ShipLineStack
 529+ 9569
 530+ 9569 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 531+ 9629              ; LSX vector overlaps with LSO
 532+ 9629 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 533+ 962A 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 534+ 962B
 535+ 962B              ; Star Positions are 16 bit 3d coordinates
 536+ 962B 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 537+ 966D 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 538+ 9683 00           varStarX                DB  0
 539+ 9684 00           varStarY                DB  0
 540+ 9685 00 00 00...  varDustX                DS MaxNumberOfStars *2
 541+ 969B 00 00 00...  varDustY                DS MaxNumberOfStars *2
 542+ 96B1 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 543+ 96C7
 544+ 96C7
 545+ 96C7              SpeedoStart             equ $84D1
 546+ 96C7 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 546+ 96CB 04 04 05 06
 546+ 96CF 06 07 08 09
 546+ 96D3 0A 0A 0B 0C
 546+ 96D7 0D 0E 0E 0F
 546+ 96DB 10 10 11 12
 546+ 96DF 13 14 14 15
 546+ 96E3 16 17 18 18
 546+ 96E7 19 1A 1A 1B
 546+ 96EB 1C 1C 1D 1E
 546+ 96EF 1F
 547+ 96F0
 548+ 96F0              DialMiddleXPos          equ $E1
 549+ 96F0              RollMiddle              equ $8AE0
 550+ 96F0              PitchMiddle             equ $92E0
 551+ 96F0
 552+ 96F0              MakeInnocentMacro:		MACRO
 553+ 96F0 ~            						xor		a
 554+ 96F0 ~            						ld		(FugitiveInnocentStatus),a
 555+ 96F0              						ENDM
 556+ 96F0
 557+ 96F0              NoEscapePodMacro:		MACRO
 558+ 96F0 ~            						xor		a
 559+ 96F0 ~            						ld		(EscapePod),a
 560+ 96F0              						ENDM
 561+ 96F0
 562+ 96F0              MaxFuelLevel            EQU     $46
 563+ 96F0              MaxFuelMacro:			MACRO
 564+ 96F0 ~            						ld		a,MaxFuelLevel
 565+ 96F0 ~            						ld		(Fuel),a
 566+ 96F0              						ENDM
 567+ 96F0
 568+ 96F0              MaxThrottle:            MACRO
 569+ 96F0 ~                                    ld      a,(SHIPMAXSPEED)
 570+ 96F0 ~                                    ld      (DELTA),a
 571+ 96F0 ~                                    ld      d,a
 572+ 96F0 ~                                    ld      e,4
 573+ 96F0 ~                                    mul
 574+ 96F0 ~                                    ld      (DELT4Lo),de
 575+ 96F0                                      ENDM
 576+ 96F0
 577+ 96F0              ZeroThrottle:           MACRO
 578+ 96F0 ~                                    xor     a
 579+ 96F0 ~                                    ld      (DELTA),a
 580+ 96F0 ~                                    ld      (DELT4Lo),a
 581+ 96F0 ~                                    ld      (DELT4Lo+1),a
 582+ 96F0                                      ENDM
 583+ 96F0
# file closed: ./Variables/general_variables.asm
 884  96F0                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 96F0 00           AutoDocking				DB	0				; $033F
   2+ 96F1 00           PlayerECM				DB	0				; $0340
   3+ 96F2 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 96F3 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 96F4 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 96F8 19           Fuel					DB	25				; 0365  QQ14
   7+ 96F9 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 96FD 46           CargoBaySize			DB	70				; 036E
   9+ 96FE 00           CargoRunningLoad        DB  0
  10+ 96FF 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 9703 00 00 00 00
  10+ 9707 00 00 00 00
  10+ 970B 00 00 00 00
  11+ 970F              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 970F              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 970F              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 970F              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 970F
  16+ 970F              QQ20                    equ CargoTonnes
  17+ 970F 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  18+ 9729              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  19+ 9729              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  20+ 9729              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  21+ 9729              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  22+ 9729              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  23+ 9729              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  24+ 9729 01           FuelScoopsBarrelStatus	DB	1				; 0381
  25+ 972A
# file closed: ./Variables/EquipmentVariables.asm
 885  972A
 886  972A                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 972A              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 972A              doRND2:
   3+ 972A A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 972B              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 972B              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 972B 3A 76 93     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 972E CB 17                                rl		a								; Rotate L including carry
   8+ 9730 4F                                   ld		c,a								; c =  double lo
   9+ 9731 21 78 93     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9734 8E                                   adc		a,(hl)							; RAND+2
  11+ 9735 32 76 93     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 9738 08           .SaveBtoSeed2:          ex		af,af'
  13+ 9739 79                                   ld		a,c
  14+ 973A 32 78 93                             ld		(RandomSeed2),a
  15+ 973D 08                                   ex		af,af'
  16+ 973E 3A 77 93                             ld		a,(RandomSeed1)
  17+ 9741 4F                                   ld		c,a								; C = Seed1
  18+ 9742 21 79 93     .AddSeed3:              ld		hl,RandomSeed3
  19+ 9745 8E                                   adc		a,(hl)
  20+ 9746 32 77 93                             ld		(RandomSeed1),a
  21+ 9749 08                                   ex		af,af'
  22+ 974A 79                                   ld		a,c
  23+ 974B 32 79 93                             ld		(RandomSeed3),a
  24+ 974E 08                                   ex		af,af'
  25+ 974F C9                                   ret
  26+ 9750
  27+ 9750              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9750 06 04        	ld		b,4
  29+ 9752 21 FE C1     	ld		hl,UbnkLineArray				; line data
  30+ 9755              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 9755              EE55:
  32+ 9755 CD 2B 97     	call	doRND							; get random
  33+ 9758 77           	ld		(hl),a							; (XX19),Y
  34+ 9759 23           	inc		hl
  35+ 975A 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 975C C9               ret
  37+ 975D
# file closed: ./Variables/random_number.asm
 887  975D                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 975D 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9761 58 59 53 45
   1+ 9765 45 44
   2+ 9767 21 8F 94     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 976A 11 C4 93                             ld		de,SystemSeed
   4+ 976D ED A0        copy_seed:		        ldi
   5+ 976F ED A0                                ldi
   6+ 9771 ED A0                                ldi
   7+ 9773 ED A0                                ldi
   8+ 9775 ED A0                                ldi
   9+ 9777 ED A0                                ldi
  10+ 9779 C9                                   ret
  11+ 977A
  12+ 977A 21 C4 93     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 977D 11 8F 94                             ld		de,GalaxySeeds
  14+ 9780 18 EB                                jr		copy_seed
  15+ 9782
  16+ 9782 21 8F 94     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 9785 11 C3 94                             ld		de,WorkingSeeds
  18+ 9788 18 E3                                jr		copy_seed
  19+ 978A
  20+ 978A 21 C3 94     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 978D 11 8F 94                             ld		de,GalaxySeeds
  22+ 9790 18 DB                                jr		copy_seed
  23+ 9792
  24+ 9792 21 C3 94     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 9795 11 C4 93                             ld		de,SystemSeed
  26+ 9798 18 D3                                jr		copy_seed
  27+ 979A
  28+ 979A 21 C4 93     copy_system_to_working: ld		hl,SystemSeed
  29+ 979D 11 C3 94                             ld		de,WorkingSeeds
  30+ 97A0 18 CB                                jr		copy_seed
  31+ 97A2
  32+ 97A2              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 97A2 CD A5 97     		call	.NextStep					; This logic means we hard code x4
  34+ 97A5              .NextStep:
  35+ 97A5 CD A8 97     		call	process_seed				; This logic means we hard code x2
  36+ 97A8              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 97A8 3A C4 93     		ld		a,(SystemSeed)				; QQ15
  38+ 97AB B7           		or		a							; clear carry flag
  39+ 97AC 21 C6 93     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 97AF 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 97B0 47           		ld		b,a							; partial sum lo
  42+ 97B1 3A C5 93     		ld		a,(SystemSeed+1)
  43+ 97B4 21 C7 93     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 97B7 8E           		adc		a,(hl)						; note add with carry
  45+ 97B8 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 97B9 3A C6 93     		ld		a,(SystemSeed+2)
  47+ 97BC 32 C4 93     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 97BF 3A C7 93     		ld		a,(SystemSeed+3)
  49+ 97C2 32 C5 93     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 97C5 3A C9 93     		ld		a,(SystemSeed+5)
  51+ 97C8 32 C7 93     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 97CB 3A C8 93     		ld		a,(SystemSeed+4)
  53+ 97CE 32 C6 93     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 97D1 B7           		or		a
  55+ 97D2 78           		ld		a,b
  56+ 97D3 21 C6 93     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 97D6 86           		add	    a,(hl)
  58+ 97D7 32 C8 93     		ld		(SystemSeed+4),a
  59+ 97DA 79           		ld		a,c
  60+ 97DB 21 C7 93     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 97DE 8E           		adc		a,(hl)
  62+ 97DF 32 C9 93     		ld		(SystemSeed+5),a
  63+ 97E2 C9           		ret
  64+ 97E3
  65+ 97E3              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 97E3 CD E6 97     		call	.NextStep					; This logic means we hard code x4
  67+ 97E6              .NextStep:
  68+ 97E6 CD E9 97     		call	working_seed				; This logic means we hard code x2
  69+ 97E9              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 97E9              ; x = a + c
  71+ 97E9 3A C3 94     		ld		a,(WorkingSeeds)			; QQ15
  72+ 97EC B7           		or		a							; clear carry flag
  73+ 97ED 21 C5 94     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 97F0 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 97F1 47           		ld		b,a							; partial sum lo [x]
  76+ 97F2              ; y = b + d	+ carry
  77+ 97F2 3A C4 94     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 97F5 21 C6 94     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 97F8 8E           		adc		a,(hl)						; note add with carry
  80+ 97F9 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 97FA 3A C5 94     		ld		a,(WorkingSeeds+2)
  82+ 97FD 32 C3 94     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 9800 3A C6 94     		ld		a,(WorkingSeeds+3)
  84+ 9803 32 C4 94     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 9806 3A C8 94     		ld		a,(WorkingSeeds+5)
  86+ 9809 32 C6 94     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 980C 3A C7 94     		ld		a,(WorkingSeeds+4)
  88+ 980F 32 C5 94     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 9812 B7           		or		a
  90+ 9813 78           		ld		a,b
  91+ 9814 21 C5 94     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 9817 86           		add	    a,(hl)
  93+ 9818 32 C7 94     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 981B 79           		ld		a,c
  95+ 981C 21 C6 94     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 981F 8E           		adc		a,(hl)
  97+ 9820 32 C8 94     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 9823 C9           		ret
  99+ 9824
 100+ 9824 32           working_distX	DB 50
 101+ 9825 32           working_distY	DB 50
 102+ 9826 00           current_distY	DB 0
 103+ 9827
 104+ 9827 AF           find_present_system:    xor		a
 105+ 9828 32 DD 93                             ld		(XSAV),a
 106+ 982B              .CounterLoop:
 107+ 982B 3A C5 93     	ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 108+ 982E 4F           	ld		c,a
 109+ 982F              .calcLocaldy:
 110+ 982F 3A 8E 94     	ld		a,(PresentSystemY)
 111+ 9832 47           	ld		b,a								; so b holds Y ccord
 112+ 9833 79           	ld		a,c
 113+ 9834 90           	sub		b
 114+ 9835 CB 7F        	bit		7,a
 115+ 9837 28 02        	jr		z,.positivedy
 116+ 9839              .negativedy:
 117+ 9839 ED 44        	neg
 118+ 983B              .positivedy:
 119+ 983B 32 26 98     	ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 120+ 983E ED 5B 24 98  	ld		de,(working_distX)
 121+ 9842 BA           	cp		d
 122+ 9843 30 24        	jr		nc,.toofar
 123+ 9845              .calcLocaldx:
 124+ 9845 3A C7 93     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 125+ 9848 4F           	ld		c,a
 126+ 9849 3A 8D 94     	ld		a,(PresentSystemX)
 127+ 984C 47           	ld		b,a								; so b holds Y ccord
 128+ 984D 79           	ld		a,c
 129+ 984E 90           	sub		b
 130+ 984F CB 7F        	bit		7,a
 131+ 9851 28 02        	jr		z,.positivedx
 132+ 9853              .negativedx:
 133+ 9853 ED 44        	neg
 134+ 9855              .positivedx:
 135+ 9855 4F           	ld		c,a
 136+ 9856 BB           	cp		e
 137+ 9857 30 10        	jr		nc,.toofar
 138+ 9859              .Nearer:									; we have a closer system
 139+ 9859 3A 26 98     	ld		a,(current_distY)
 140+ 985C 47           	ld		b,a								; we have c to recall Y into b
 141+ 985D ED 43 24 98  	ld		(working_distX),bc
 142+ 9861 C5           	push	bc
 143+ 9862 CD 9A 97     	call 	copy_system_to_working
 144+ 9865 C1           	pop		bc
 145+ 9866 78           	ld		a,b								;
 146+ 9867 B1           	or		c								;
 147+ 9868 C8           	ret		z								; if we have distance 0 then bang on
 148+ 9869              .toofar:
 149+ 9869 CD A2 97     	call	next_system_seed
 150+ 986C 3A DD 93     	ld		a,(XSAV)
 151+ 986F 3D           	dec		a
 152+ 9870 FE 00        	cp		0
 153+ 9872 C8           	ret		z
 154+ 9873 32 DD 93     	ld		(XSAV),a
 155+ 9876 18 B3        	jr		.CounterLoop
 156+ 9878
 157+ 9878
 158+ 9878              get_planet_data_working_seed:
 159+ 9878 3A C4 94     		ld		a, (WorkingSeeds+1)
 160+ 987B E6 07        		and		7
 161+ 987D 32 CF 94     		ld		(DisplayEcononmy),a
 162+ 9880 3A C5 94     		ld		a, (WorkingSeeds+2)
 163+ 9883 CB 3F        		srl	a
 164+ 9885 CB 3F        		srl	a
 165+ 9887 CB 3F        		srl	a
 166+ 9889 CB 3F        		srl	a								; c/8
 167+ 988B E6 07        		and		7
 168+ 988D 32 D0 94     		ld		(DisplayGovernment),a
 169+ 9890 CB 3F        		srl	a
 170+ 9892 FE 00        		cp		0
 171+ 9894 20 08        		jr		nz,.CanBeRich
 172+ 9896              .Fedual:
 173+ 9896 3A CF 94     		ld		a,(DisplayEcononmy)
 174+ 9899 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 175+ 989B 32 CF 94     		ld		(DisplayEcononmy),a
 176+ 989E              .CanBeRich:
 177+ 989E 3A CF 94     		ld		a,(DisplayEcononmy)
 178+ 98A1 EE 07        		xor		7							; flip economy so Rich is now 7
 179+ 98A3 32 D1 94     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 180+ 98A6 47           		ld		b,a
 181+ 98A7 3A C6 94     		ld		a,(WorkingSeeds+3)
 182+ 98AA E6 03        		and		3
 183+ 98AC 80           		add		a,b
 184+ 98AD 32 D1 94     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 185+ 98B0 3A D0 94     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 186+ 98B3 CB 3F        		srl		a 							; gov/2
 187+ 98B5 47           		ld		b,a
 188+ 98B6 3A D1 94     		ld		a,(DisplayTekLevel)
 189+ 98B9 80           		add		a,b
 190+ 98BA 32 D1 94     		ld		(DisplayTekLevel),a			; Tek += gov /2
 191+ 98BD CB 27        		sla		a
 192+ 98BF CB 27        		sla		a							; Onto Population (TL-1)*= 4
 193+ 98C1 47           		ld		b,a
 194+ 98C2 3A CF 94     		ld		a,(DisplayEcononmy)
 195+ 98C5 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 196+ 98C6 47           		ld		b,a
 197+ 98C7 3A D0 94     		ld		a,(DisplayGovernment)
 198+ 98CA 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 199+ 98CB 32 D2 94     		ld		(DisplayPopulation),a
 200+ 98CE 3A CF 94     		ld		a,(DisplayEcononmy)
 201+ 98D1 EE 07        		xor		7							; Onto productivity
 202+ 98D3 C6 03        		add		3							;  (Flipped eco +3)
 203+ 98D5 57           		ld		d,a
 204+ 98D6 3A D0 94     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 205+ 98D9 C6 04        		add		4
 206+ 98DB 5F           		ld		e,a
 207+ 98DC ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 208+ 98DE 3A D2 94     		ld		a,(DisplayPopulation)		; then we use d for radius
 209+ 98E1 57           		ld		d,a
 210+ 98E2 ED 30        		mul
 211+ 98E4 CB 23        		sla		e
 212+ 98E6 CB 1A        		rr		d
 213+ 98E8 CB 23        		sla		e
 214+ 98EA CB 1A        		rr		d
 215+ 98EC CB 23        		sla		e
 216+ 98EE CB 1A        		rr		d							; de * 8
 217+ 98F0 ED 53 D4 94  		ld		(DisplayProductivity),de
 218+ 98F4              .DoRadius:
 219+ 98F4 3A C6 94     		ld		a,(WorkingSeeds+3)
 220+ 98F7 4F           		ld		c,a
 221+ 98F8 3A C8 94     		ld		a,(WorkingSeeds+5)
 222+ 98FB E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 223+ 98FD C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 224+ 98FF 47           		ld		b,a							;
 225+ 9900 ED 43 D8 94  		ld		(DisplayRadius),bc
 226+ 9904 C9           		ret
 227+ 9905
# file closed: ./Variables/galaxy_seed.asm
 888  9905                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 9905 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 9909 65 00
   2+ 990B 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 990F 00
   3+ 9910 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 9914 74 61 72 79
   3+ 9918 00
   4+ 9919 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 991D 6E 67 00
   5+ 9920 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 9924 6F 6D 00
   6+ 9927
   7+ 9927 05 99 0B 99  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 992B 10 99 19 99
   7+ 992F 20 99
   8+ 9931              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 9931
  10+ 9931 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 9935 65 64 00
  11+ 9938 47 72 65 65  ConditionName2		DB "Green",0
  11+ 993C 6E 00
  12+ 993E 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 9942 6F 77 00
  13+ 9945 52 65 64 00  ConditionName4		DB "Red",0
  14+ 9949
  15+ 9949 31 99 38 99  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 994D 3E 99 45 99
  16+ 9951              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 9951
  18+ 9951 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9955 53 45 49 54
  18+ 9959 49 4C 45 54
  18+ 995D 53 54 4F 4E
  18+ 9961 4C 4F 4E 55
  18+ 9965 54 48 4E 4F
  18+ 9969 41 4C 4C 45
  18+ 996D 58 45 47 45
  18+ 9971 5A 41 43 45
  18+ 9975 42 49 53 4F
  18+ 9979 55 53 45 53
  18+ 997D 41 52 4D 41
  18+ 9981 49 4E 44 49
  18+ 9985 52 45 41 3F
  18+ 9989 45 52 41 54
  18+ 998D 45 4E 42 45
  18+ 9991 52 41 4C 41
  18+ 9995 56 45 54 49
  18+ 9999 45 44 4F 52
  18+ 999D 51 55 41 4E
  18+ 99A1 54 45 49 53
  18+ 99A5 52 49 4F 4E
  18+ 99A9 00
  19+ 99AA
  20+ 99AA 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 99AE 10 00 20 00
  20+ 99B2 40 00 80 00
  20+ 99B6 00 02 00 0A
  20+ 99BA 00 19 00 49
  20+ 99BE FF FF
  21+ 99C0
  22+ 99C0 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 99C4 6C 65 73 73
  22+ 99C8 00
  23+ 99C9 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 99CD 6C 79 20 48
  23+ 99D1 61 72 6D 6C
  23+ 99D5 65 73 73 00
  24+ 99D9 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 99DD 00
  25+ 99DE 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 99E2 61 67 65 00
  26+ 99E6 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 99EA 65 20 41 76
  26+ 99EE 65 72 61 67
  26+ 99F2 65 00
  27+ 99F4 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 99F8 65 74 65 6E
  27+ 99FC 74 00
  28+ 99FE 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 9A02 65 72 6F 75
  28+ 9A06 73 00
  29+ 9A08 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 9A0C 6C 79 00
  30+ 9A0F 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 9A13 20 45 20 4C
  30+ 9A17 20 49 20 54
  30+ 9A1B 20 45 20 2D
  30+ 9A1F 2D 2D 00
  31+ 9A22 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 9A26 6C 6F 62 73
  31+ 9A2A 67 6F 64 00
  32+ 9A2E 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 9A32 65 72 00
  33+ 9A35
  34+ 9A35 C0 99 C9 99  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 9A39 D9 99 DE 99
  34+ 9A3D E6 99 F4 99
  34+ 9A41 FE 99 08 9A
  34+ 9A45 0F 9A 22 9A
  34+ 9A49 2E 9A
  35+ 9A4B              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 9A4B
  37+ 9A4B
  38+ 9A4B              getTableText:
  39+ 9A4B              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 9A4B              ; ">Note for ranking first 2 bytes are target rank"
  41+ 9A4B D5           	push	de								; save DE as we will likley need it in caller
  42+ 9A4C ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 9A4E ED 31        	add		hl,a
  44+ 9A50 5E           	ld		e,(hl)
  45+ 9A51 23           	inc		hl
  46+ 9A52 56           	ld		d,(hl)							; de = indexed address
  47+ 9A53 EB           	ex		de,hl							; flip it to hl
  48+ 9A54 D1           	pop		de								; retrieve de
  49+ 9A55 C9           	ret										; return with hl as start entry
  50+ 9A56
  51+ 9A56
  52+ 9A56              ;               CF      ZF      Result
  53+ 9A56              ;               -----------------------------------
  54+ 9A56              ;               0       0       HL > DE
  55+ 9A56              ;               0       1       HL == DE
  56+ 9A56              ;               1       0       HL < DE
  57+ 9A56              ;               1       1       Impossible
  58+ 9A56              getRankIndex:
  59+ 9A56              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 9A56              ; ">Note for ranking first 2 bytes are target rank"
  61+ 9A56 7A           	ld		a,d
  62+ 9A57 B3           	or		e
  63+ 9A58 FE 00        	cp		0
  64+ 9A5A C8           	ret		z								; quicks skip for 0 kills
  65+ 9A5B AF           	xor 	a
  66+ 9A5C 21 AA 99     	ld		hl,RankingTable
  67+ 9A5F              .testLoop:
  68+ 9A5F 4E           	ld		c,(hl)
  69+ 9A60 23           	inc		hl
  70+ 9A61 46           	ld		b,(hl)							; bc = ranking
  71+ 9A62 E5           	push	hl
  72+ 9A63 60           	ld		h,b
  73+ 9A64 69           	ld		l,c
  74+ 9A65 CD 26 A4     	call	compare16HLDE
  75+ 9A68 38 06        	jr		c,.HLLTDE
  76+ 9A6A              .HLGTEDE									; Found the correct rank
  77+ 9A6A E1           	pop		hl
  78+ 9A6B 23           	inc		hl								; move to next value
  79+ 9A6C 23           	inc		hl
  80+ 9A6D 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9A6E 18 EF        	jr		.testLoop
  82+ 9A70              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9A70 E1           	pop		hl
  84+ 9A71 C9           	ret
  85+ 9A72
# file closed: ./Tables/text_tables.asm
 889  9A72                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 9A72 58 00        WordDummy					DB  "X",0
   2+ 9A74 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9A78 74 00
   3+ 9A7A 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9A7E 74 00
   4+ 9A80 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 9A84 00
   5+ 9A85 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 9A89 00
   6+ 9A8A 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 9A8E 65 00
   7+ 9A90 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 9A94 70 65 00
   8+ 9A97 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 9A9B 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9A9F 6F 00
  10+ 9AA1 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 9AA5 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 9AA9 00
  12+ 9AAA 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 9AAE 70 73 00
  13+ 9AB1 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 9AB5 4D 2E 00
  14+ 9AB8 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 9ABC 65 6D 00
  15+ 9ABF 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 9AC3 67 79 00
  16+ 9AC6 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 9ACA 00
  17+ 9ACB 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 9ACF 72 00
  18+ 9AD1 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 9AD5 65 00
  19+ 9AD7 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 9ADB 00
  20+ 9ADC 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 9AE0 61 72 79 00
  21+ 9AE4 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 9AE8 6E 67 00
  22+ 9AEB 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 9AEF 6F 6D 00
  23+ 9AF2 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 9AF6 00
  24+ 9AF7 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 9AFB 6C 64 00
  25+ 9AFE 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 9B02 69 6E 67 00
  26+ 9B06 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 9B0A 75 74 65 72
  26+ 9B0E 73 00
  27+ 9B10 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 9B14 72 73 70 61
  27+ 9B18 63 65 00
  28+ 9B1B 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 9B1F 63 74 69 63
  28+ 9B23 00
  29+ 9B24 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 9B28 61 00
  30+ 9B2A 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 9B2E 6E 00
  31+ 9B30 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 9B34 6E 64 65 72
  31+ 9B38 00
  32+ 9B39 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 9B3D 74 69 76 65
  32+ 9B41 00
  33+ 9B42 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 9B46 00
  34+ 9B47 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 9B4B 69 6C 65 73
  34+ 9B4F 00
  35+ 9B50 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 9B54 6F 61 63 74
  35+ 9B58 69 76 65 73
  35+ 9B5C 00
  36+ 9B5D 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 9B61 65 73 00
  37+ 9B64 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 9B68 6F 72 2F 57
  37+ 9B6C 69 6E 65 73
  37+ 9B70 00
  38+ 9B71 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 9B75 72 69 65 73
  38+ 9B79 00
  39+ 9B7A 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 9B7E 6F 74 69 63
  39+ 9B82 73 00
  40+ 9B84 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 9B88 69 6E 65 72
  40+ 9B8C 79 00
  41+ 9B8E 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 9B92 79 73 00
  42+ 9B95 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 9B99 61 72 6D 73
  42+ 9B9D 00
  43+ 9B9E 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 9BA2 00
  44+ 9BA3 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 9BA7 72 61 6C 73
  44+ 9BAB 00
  45+ 9BAC 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 9BB0 00
  46+ 9BB1 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 9BB5 69 6E 75 6D
  46+ 9BB9 00
  47+ 9BBA 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 9BBE 53 74 6F 6E
  47+ 9BC2 65 73 00
  48+ 9BC5 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 9BC9 6E 20 49 74
  48+ 9BCD 65 6D 73 00
  49+ 9BD1 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 9BD5 65 73 00
  50+ 9BD8 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 9BDC 67 72 61 6D
  50+ 9BE0 73 00
  51+ 9BE2 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 9BE6 73 00
  52+ 9BE8 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 9BEC 74 00
  53+ 9BEE 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 9BF2 65 00
  54+ 9BF4 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 9BF8 74 00
  55+ 9BFA 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 9BFE 00
  56+ 9BFF 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 9C02 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 9C06 61 6E 63 65
  57+ 9C0A 00
  58+ 9C0B 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 9C0F 6F 6D 79 00
  59+ 9C13 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 9C17 72 6E 6D 65
  59+ 9C1B 6E 74 00
  60+ 9C1E 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 9C22 4C 65 76 65
  60+ 9C26 6C 00
  61+ 9C28 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 9C2C 6C 61 74 69
  61+ 9C30 6F 6E 00
  62+ 9C33 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 9C37 69 6F 6E 00
  63+ 9C3B 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 9C3F 69 6F 6E 00
  64+ 9C43 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 9C47 73 00
  65+ 9C49 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 9C4D 75 63 74 69
  65+ 9C51 76 69 74 79
  65+ 9C55 00
  66+ 9C56 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 9C5A 61 67 65 00
  67+ 9C5E 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 9C62 75 73 00
  68+ 9C65 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 9C68 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 9C6C 00
  70+ 9C6D 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 9C71 00
  71+ 9C72 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 9C76 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 9C7A 6C 79 00
  73+ 9C7D 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 9C81 00
  74+ 9C82 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 9C86 73 74 72 69
  74+ 9C8A 61 6C 00
  75+ 9C8D 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 9C91 63 75 6C 74
  75+ 9C95 75 72 61 6C
  75+ 9C99 00
  76+ 9C9A 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 9C9E 63 68 79 00
  77+ 9CA2 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 9CA6 61 6C 00
  78+ 9CA9 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 9CAD 69 2D 47 6F
  78+ 9CB1 76 65 72 6E
  78+ 9CB5 6D 65 6E 74
  78+ 9CB9 00
  79+ 9CBA 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 9CBE 61 74 6F 72
  79+ 9CC2 73 68 69 70
  79+ 9CC6 00
  80+ 9CC7 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 9CCB 75 6E 69 73
  80+ 9CCF 74 00
  81+ 9CD1 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 9CD5 65 64 65 72
  81+ 9CD9 61 63 79 00
  82+ 9CDD 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 9CE1 63 72 61 63
  82+ 9CE5 79 00
  83+ 9CE7 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 9CEB 6F 72 61 74
  83+ 9CEF 65 20 53 74
  83+ 9CF3 61 74 65 00
  84+ 9CF7 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 9CFB 65 00
  85+ 9CFD 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 9D01 74 00
  86+ 9D03 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 9D07 73 00
  87+ 9D09 30 00        Word0						DB  "0",0				   ;86
  88+ 9D0B 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 9D0F 65 74 00
  89+ 9D12 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 9D16 65 73 00
  90+ 9D19 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 9D1D 75 63 74 00
  91+ 9D21 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 9D25 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 9D29 65 00
  93+ 9D2B 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 9D2F 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 9D33 00
  95+ 9D34 74 00        Wordt						DB  "t",0                  ;94
  96+ 9D36 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 9D39 67 00        Wordg						DB  "g",0                  ;96
  98+ 9D3B 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 9D3F 69 74 69 74
  98+ 9D43 79 00
  99+ 9D45 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 9D49 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 9D4D 6B 00
 101+ 9D4F 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 9D53 70 00
 102+ 9D55 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 9D59 00
 103+ 9D5A 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 9D5E 69 6C 65 00
 104+ 9D62 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 9D66 72 64 72 69
 104+ 9D6A 76 65 00
 105+ 9D6D 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 9D71 74 61 72 79
 105+ 9D75 00
 106+ 9D76
 107+ 9D76 72 9A 74 9A  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 9D7A 7A 9A 80 9A
 108+ 9D7E 85 9A 8A 9A  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 9D82 90 9A 97 9A
 109+ 9D86 9B 9A A1 9A  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 9D8A A5 9A AA 9A
 110+ 9D8E B1 9A B8 9A  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 9D92 BF 9A C6 9A
 111+ 9D96 CB 9A D1 9A  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 9D9A D7 9A DC 9A
 112+ 9D9E E4 9A EB 9A  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 9DA2 F2 9A F7 9A
 113+ 9DA6 FE 9A 06 9B  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 9DAA 10 9B 1B 9B
 114+ 9DAE 24 9B 2A 9B  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 9DB2 30 9B 39 9B
 115+ 9DB6 42 9B 47 9B  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 9DBA 50 9B 5D 9B
 116+ 9DBE 64 9B 71 9B  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 9DC2 7A 9B 84 9B
 117+ 9DC6 8E 9B 95 9B  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 9DCA 9E 9B A3 9B
 118+ 9DCE AC 9B B1 9B  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 9DD2 BA 9B C5 9B
 119+ 9DD6 D1 9B D8 9B  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 9DDA E2 9B E8 9B
 120+ 9DDE EE 9B F4 9B  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 9DE2 FA 9B FF 9B
 121+ 9DE6 02 9C 0B 9C  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 9DEA 13 9C 1E 9C
 122+ 9DEE 28 9C 33 9C  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 9DF2 3B 9C 43 9C
 123+ 9DF6 49 9C 56 9C  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 9DFA 5E 9C 65 9C
 124+ 9DFE 68 9C        					DW  WordMCR																	;68
 125+ 9E00 6D 9C 72 9C  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 9E04 76 9C 7D 9C
 126+ 9E08 82 9C 8D 9C                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 9E0C 9A 9C A2 9C  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 9E10 A9 9C BA 9C
 128+ 9E14 C7 9C D1 9C                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 9E18 DD 9C E7 9C
 129+ 9E1C F7 9C FD 9C  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 9E20 03 9D 09 9D
 130+ 9E24 0B 9D 12 9D  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 9E28 19 9D 21 9D
 131+ 9E2C 25 9D 2B 9D                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 9E30 2F 9D
 132+ 9E32 34 9D 36 9D  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 9E36 39 9D
 133+ 9E38 3B 9D 45 9D  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 9E3C 49 9D 4F 9D
 134+ 9E40 55 9D 5A 9D                      DW  WordShip,           WordMissile       ; 101
 135+ 9E44
 136+ 9E44              ; Phrases
 137+ 9E44 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 9E48 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 9E4B 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 9E4E 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 9E51 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 9E54 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 9E57 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 9E5A 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 9E5D 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 9E61 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 9E65 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 9E69 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 9E6D 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 9E71 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 9E74 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 9E77 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 9E7A 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 9E7D 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 9E80 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 9E83 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 9E86 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 9E89 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 9E8C 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 9E8F 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 9E92 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 9E96 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 9E99 64 65        TextEquipShip               DB  100,101          ;26
 164+ 9E9B
 165+ 9E9B 00           TextDummy					DB  0
 166+ 9E9C
 167+ 9E9C 44 9E 48 9E  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 9EA0 4B 9E
 168+ 9EA2 4E 9E 51 9E  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 9EA6 54 9E
 169+ 9EA8 57 9E 5A 9E  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 9EAC 5D 9E 61 9E  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 9EB0 65 9E 69 9E
 171+ 9EB4 6D 9E 71 9E  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 9EB8 74 9E
 172+ 9EBA 77 9E 7A 9E  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 9EBE 80 9E 7D 9E
 172+ 9EC2 89 9E 83 9E
 172+ 9EC6 86 9E 8C 9E
 173+ 9ECA 8F 9E        					DW  TextLightYears		                                            ; 21 23
 174+ 9ECC 92 9E 96 9E  					DW  Text0LightYears, TextMarketPrices
 175+ 9ED0 9B 9E        					DW  TextDummy;  25
 176+ 9ED2 00 00 00...  TextBuffer			DS	33
 177+ 9EF3
 178+ 9EF3              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ 9EF3              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ 9EF3
 181+ 9EF3              CapitaliseString:
 182+ 9EF3              ; ">CapitaliseString hl = address"
 183+ 9EF3              .CapLoop:
 184+ 9EF3 23           	inc		hl
 185+ 9EF4 7E           	ld		a,(hl)
 186+ 9EF5 FE 00        	cp		0
 187+ 9EF7 C8           	ret		z
 188+ 9EF8 FE 5B        	cp		'Z'+1
 189+ 9EFA 30 F7        	jr		nc,.CapLoop
 190+ 9EFC FE 41        	cp		'A'
 191+ 9EFE 38 F3        	jr		c,.CapLoop
 192+ 9F00              .LowerCase:
 193+ 9F00 C6 20        	add		a,'a'-'A'
 194+ 9F02 77           	ld		(hl),a
 195+ 9F03 18 EE        	jr		.CapLoop
 196+ 9F05
 197+ 9F05              WordIndexToAddress:
 198+ 9F05 21 76 9D     	ld		hl,WordIdx
 199+ 9F08 ED 31        	add		hl,a
 200+ 9F0A ED 31        	add		hl,a
 201+ 9F0C D5           	push	de
 202+ 9F0D 5E           	ld		e,(hl)
 203+ 9F0E 23           	inc		hl
 204+ 9F0F 56           	ld		d,(hl)
 205+ 9F10 EB           	ex		de,hl
 206+ 9F11 D1           	pop		de
 207+ 9F12 C9           	ret
 208+ 9F13
 209+ 9F13
 210+ 9F13              expandTokenToString:
 211+ 9F13              ; ">expandTokenToString a = texttoken"
 212+ 9F13 21 9C 9E     	ld		hl,TextTokens
 213+ 9F16 CD 4B 9A     	call	getTableText
 214+ 9F19 11 D2 9E     	ld		de,TextBuffer
 215+ 9F1C              .ReadLoop:
 216+ 9F1C 7E           	ld		a,(hl)
 217+ 9F1D FE 00        	cp		0
 218+ 9F1F 28 1B        	jr		z,.ReadDone
 219+ 9F21 E5           	push	hl
 220+ 9F22 D5           	push	de
 221+ 9F23 21 76 9D     	ld		hl,WordIdx
 222+ 9F26 CD 4B 9A     	call	getTableText
 223+ 9F29 D1           	pop		de
 224+ 9F2A              .WordExpandLoop:
 225+ 9F2A 7E           	ld		a,(hl)
 226+ 9F2B FE 00        	cp		0
 227+ 9F2D 28 05        	jr		z,.AddSpace
 228+ 9F2F              ;.GetChar:
 229+ 9F2F 12           	ld		(de),a
 230+ 9F30 13           	inc		de
 231+ 9F31 23           	inc		hl
 232+ 9F32 18 F6        	jr		.WordExpandLoop
 233+ 9F34              .AddSpace:
 234+ 9F34 3E 20        	ld		a,' '
 235+ 9F36 12           	ld		(de),a
 236+ 9F37 13           	inc		de
 237+ 9F38 E1           	pop		hl
 238+ 9F39 23           	inc		hl
 239+ 9F3A 18 E0        	jr		.ReadLoop
 240+ 9F3C              .ReadDone:
 241+ 9F3C 1B           	dec		de
 242+ 9F3D AF           	xor		a
 243+ 9F3E 12           	ld		(de),a
 244+ 9F3F C9           	ret
 245+ 9F40
# file closed: ./Tables/dictionary.asm
 890  9F40                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9F40 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9F44 53 45 49 54
   1+ 9F48 49 4C 45 54
   1+ 9F4C 53 54 4F 4E
   1+ 9F50 4C 4F 4E 55
   1+ 9F54 54 48 4E 4F
   2+ 9F58 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9F5B 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9F5F 45 5A 41 43
   3+ 9F63 45 42 49 53
   3+ 9F67 4F 55 53 45
   3+ 9F6B 53 41 52 4D
   3+ 9F6F 41 49 4E 44
   3+ 9F73 49 52 45 41
   4+ 9F77 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9F7B 54 45 4E 42
   4+ 9F7F 45 52 41 4C
   4+ 9F83 41 56 45 54
   4+ 9F87 49 45 44 4F
   4+ 9F8B 52 51 55 41
   4+ 9F8F 4E 54 45 49
   4+ 9F93 53 52 49 4F
   4+ 9F97 4E
   5+ 9F98
   6+ 9F98              ; TODO Moveinto galaxy data module
   7+ 9F98 00 00 00...  name_expanded	DS 32
   8+ 9FB8 00           				DB 0
   9+ 9FB9
  10+ 9FB9
  11+ 9FB9
  12+ 9FB9              NamingLoop:
  13+ 9FB9 3A C8 94     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 9FBC E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 9FBE FE 00        	cp		0					; 0 = skip 2 chars
  16+ 9FC0 28 12        	jr		z,.SkipPhrase
  17+ 9FC2 C6 0C        	add		a,12
  18+ 9FC4 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 9FC6 21 40 9F     	ld		hl,name_digrams
  20+ 9FC9 ED 31        	add		hl,a
  21+ 9FCB ED A0        	ldi
  22+ 9FCD 7E           	ld		a,(hl)
  23+ 9FCE FE 3F        	cp		'?'
  24+ 9FD0 28 02        	jr		z,.SkipPhrase
  25+ 9FD2              .AddExtra:
  26+ 9FD2 ED A0        	ldi
  27+ 9FD4              .SkipPhrase:
  28+ 9FD4 D5           	push	de
  29+ 9FD5 CD E9 97     	call	working_seed
  30+ 9FD8 D1           	pop		de
  31+ 9FD9 C9           	ret
  32+ 9FDA
  33+ 9FDA              ;GetDigramGalaxySeed:
  34+ 9FDA              ;	call	copy_galaxy_to_working
  35+ 9FDA              ;	jr		GetDigramWorkingSeed
  36+ 9FDA              ;GetDigramSystemSeed:
  37+ 9FDA              ;	call	copy_system_to_working
  38+ 9FDA              ;GetDigramWorkingSeed:
  39+ 9FDA              ;; ">GetDigram a = digram seed"
  40+ 9FDA              ;	ld		de,name_expanded
  41+ 9FDA              ;	ld		b,3
  42+ 9FDA              ;	ld		a,(WorkingSeeds)
  43+ 9FDA              ;	and		$40
  44+ 9FDA              ;	jr		z,.SmallSizeName
  45+ 9FDA              ;.LargeSizeName:
  46+ 9FDA              ;	call	NamingLoop
  47+ 9FDA              ;.SmallSizeName:
  48+ 9FDA              ;	call	NamingLoop
  49+ 9FDA              ;	call	NamingLoop
  50+ 9FDA              ;	call	NamingLoop
  51+ 9FDA              ;.DoneName:
  52+ 9FDA              ;	ex		de,hl
  53+ 9FDA              ;	ld		(hl),0
  54+ 9FDA              ;	ex		de,hl
  55+ 9FDA              ;	ret
  56+ 9FDA
  57+ 9FDA
  58+ 9FDA
  59+ 9FDA              ;GetDigramWorkingSeed:
  60+ 9FDA              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 9FDA              ;	ld		b,5					; working seed
  62+ 9FDA              ;	ld		de,name_expanded
  63+ 9FDA              ;.ExpansionLoop:
  64+ 9FDA              ;	push	bc
  65+ 9FDA              ;	ld		hl,WorkingSeeds
  66+ 9FDA              ;	ld		a,b
  67+ 9FDA              ;	add		hl,a
  68+ 9FDA              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 9FDA              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 9FDA              ;	cp		0					; 0 = skip 2 chars
  71+ 9FDA              ;	jr		z,.SkipPhrase
  72+ 9FDA              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 9FDA              ;	call	TT27
  74+ 9FDA              ;.SkipPhrase:
  75+ 9FDA              ;	push	de
  76+ 9FDA              ;	call	next_working_seed
  77+ 9FDA              ;	pop		de
  78+ 9FDA              ;	pop		bc
  79+ 9FDA              ;	djnz	GetDigramWorkingSeed
  80+ 9FDA              ;.DoneName:
  81+ 9FDA              ;	ex		de,hl
  82+ 9FDA              ;	ld		(hl),0
  83+ 9FDA              ;	ex		de,hl
  84+ 9FDA              ;	ret
  85+ 9FDA              ;
  86+ 9FDA              ;ExpandToken:
  87+ 9FDA              ;	DE = target
  88+ 9FDA              ;	a = token
  89+ 9FDA              ;
  90+ 9FDA              ;PlanetDigram:
  91+ 9FDA              ;	cp		&A0							; >- 160
  92+ 9FDA              ;	jr		c,MorePage4
  93+ 9FDA              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 9FDA              ;	asl		2							; Multiply by 2
  95+ 9FDA              ;	ld		hl, name_digrams2
  96+ 9FDA              ;	add		hl,a
  97+ 9FDA              ;	ld		a,(hl)
  98+ 9FDA              ;	call	ProcessTextToken
  99+ 9FDA              ;	inc		hl
 100+ 9FDA              ;	ld		a,(hl)
 101+ 9FDA              ;	cp		'?'
 102+ 9FDA              ;	ret		z
 103+ 9FDA              ;	call	ProcessTextToken
 104+ 9FDA              ;	ret
 105+ 9FDA              ;MorePage4:
 106+ 9FDA              ;	sub		$A0
 107+ 9FDA              ;ExtraTokenCheck:
 108+ 9FDA              ;	push	de							; save target address
 109+ 9FDA              ;	push	bc
 110+ 9FDA              ;	ld		b,a
 111+ 9FDA              ;	ld		hl,varV
 112+ 9FDA              ;	ld		(VarV),0400
 113+ 9FDA              ;	ld		(varV),a
 114+ 9FDA              ;	ld
 115+ 9FDA              ;
 116+ 9FDA              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 9FDA              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 9FDA              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 9FDA              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 9FDA              ;0A                      ASL A		      \ *= 2
 121+ 9FDA              ;A8                      TAY 		      \ digram index = 0to62
 122+ 9FDA              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 9FDA              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 9FDA              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 9FDA              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 9FDA              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 9FDA              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 9FDA              ;
 129+ 9FDA              ;	.TT47	\ more page4, subtract #160
 130+ 9FDA              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 9FDA              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 9FDA              ;AA                      TAX 		\ copy of word index
 133+ 9FDA              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 9FDA              ;85 22                   STA &22		\ V
 135+ 9FDA              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 9FDA              ;85 23                   STA &23		\ V+1
 137+ 9FDA              ;A0 00                   LDY #0
 138+ 9FDA              ;8A                      TXA 		\ token = word index
 139+ 9FDA              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 9FDA              ;	.TT51	\ counters Y letter, X token
 141+ 9FDA              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 9FDA              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 9FDA              ;C8                      INY 		\ letter count
 144+ 9FDA              ;D0 F9                   BNE TT51	\ loop Y
 145+ 9FDA              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 9FDA              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 9FDA              ;	.TT49	\ word ended
 148+ 9FDA              ;C8                      INY
 149+ 9FDA              ;D0 02                   BNE TT59    	\ next word
 150+ 9FDA              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 9FDA              ;	.TT59	\ next word
 152+ 9FDA              ;CA                      DEX 		\ token count
 153+ 9FDA              ;D0 ED                   BNE TT51	\ loop X token
 154+ 9FDA              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 9FDA              ;98                      TYA
 156+ 9FDA              ;48                      PHA 		\ store Yindex
 157+ 9FDA              ;A5 23                   LDA &23		\ V+1
 158+ 9FDA              ;48                      PHA 		\ correct pointer hi
 159+ 9FDA              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 9FDA              ;49 23                   EOR #&23	\ decode '#'
 161+ 9FDA              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 9FDA              ;68                      PLA 		\ restore this depth's Vhi
 163+ 9FDA              ;85 23                   STA &23		\ V+1
 164+ 9FDA              ;68                      PLA
 165+ 9FDA              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 9FDA              ;C8                      INY 		\ next letter
 167+ 9FDA              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 9FDA              ;E6 23                   INC &23		\ V+1
 169+ 9FDA              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 9FDA              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 9FDA              ;	.TT48 	\ rts
 172+ 9FDA              ;60                      RTS 		\ end of flight token printing TT27
 173+ 9FDA              ;
 174+ 9FDA              ;
 175+ 9FDA              ;
 176+ 9FDA              ;
 177+ 9FDA              ;
 178+ 9FDA              ;
 179+ 9FDA              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 9FDA              ;;AA                      TAX		\ copy token to count down
 181+ 9FDA              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 9FDA              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 9FDA              ;CA                      DEX
 184+ 9FDA              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 9FDA              ;CA                      DEX
 186+ 9FDA              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 9FDA              ;CA                      DEX
 188+ 9FDA              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 9FDA              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 9FDA              ;CA                      DEX
 191+ 9FDA              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 9FDA              ;CA                      DEX
 193+ 9FDA              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 9FDA              ;CA                      DEX
 195+ 9FDA              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 9FDA              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 9FDA              ;85 72                   STA &72	 	\ QQ17
 198+ 9FDA              ;60                      RTS
 199+ 9FDA              ;CA                      DEX 		\ skip Acc ==7
 200+ 9FDA              ;CA                      DEX
 201+ 9FDA              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 9FDA              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 9FDA              ;60                      RTS
 204+ 9FDA              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 9FDA              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 9FDA              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 9FDA              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 9FDA              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 9FDA              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 9FDA              ;C9 20                   CMP #32		\ < 32 ?
 211+ 9FDA              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 9FDA              ;		\ Token  < 14 or > 31
 213+ 9FDA              ;A6 72                   LDX &72	 	\ QQ17
 214+ 9FDA              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 9FDA              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 9FDA              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 9FDA              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 9FDA              ;	.TT42	\ Uppercase to lowercase
 219+ 9FDA              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 9FDA              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 9FDA              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 9FDA              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 9FDA              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 9FDA              ;	.TT44	\ print character as is with TT26
 225+ 9FDA              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 9FDA              ;
 227+ 9FDA              ;	.TT41	\ QQ17 bit7 set
 228+ 9FDA              ;24 72                   BIT &72		\ QQ17
 229+ 9FDA              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 9FDA              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 9FDA              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 9FDA              ;48                      PHA 		\ else store token Acc
 233+ 9FDA              ;8A                      TXA 		\ QQ17 copy
 234+ 9FDA              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 9FDA              ;85 72                   STA &72	 	\ QQ17
 236+ 9FDA              ;68                      PLA 		\ restore token
 237+ 9FDA              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 9FDA              ;
 239+ 9FDA              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 9FDA              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 9FDA              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 9FDA              ;
 243+ 9FDA              ;	.crlf	\ Acc == 9,  colon on right
 244+ 9FDA              ;A9 15                   LDA #21		\ on right
 245+ 9FDA              ;85 2C                   STA &2C		\ XC
 246+ 9FDA              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 9FDA              ;
 248+ 9FDA              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 9FDA              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 9FDA              ;F0 63                   BEQ TT48	\ rts
 251+ 9FDA              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 9FDA              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 9FDA              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 9FDA              ;48                      PHA 		\ push token
 255+ 9FDA              ;8A                      TXA 		\ QQ17 copy
 256+ 9FDA              ;29 BF                   AND #&BF	\ clear bit6
 257+ 9FDA              ;85 72                   STA &72	 	\ QQ17
 258+ 9FDA              ;68                      PLA 		\ pull token
 259+ 9FDA              ;	.TT74	\ TT26, print character.
 260+ 9FDA              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 9FDA              ;
 262+ 9FDA              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 9FDA              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 9FDA              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 9FDA              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 9FDA              ;0A                      ASL A		      \ *= 2
 267+ 9FDA              ;A8                      TAY 		      \ digram index = 0to62
 268+ 9FDA              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 9FDA              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 9FDA              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 9FDA              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 9FDA              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 9FDA              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 9FDA              ;
 275+ 9FDA              ;	.TT47	\ more page4, subtract #160
 276+ 9FDA              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 9FDA              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 9FDA              ;AA                      TAX 		\ copy of word index
 279+ 9FDA              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 9FDA              ;85 22                   STA &22		\ V
 281+ 9FDA              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 9FDA              ;85 23                   STA &23		\ V+1
 283+ 9FDA              ;A0 00                   LDY #0
 284+ 9FDA              ;8A                      TXA 		\ token = word index
 285+ 9FDA              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 9FDA              ;	.TT51	\ counters Y letter, X token
 287+ 9FDA              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 9FDA              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 9FDA              ;C8                      INY 		\ letter count
 290+ 9FDA              ;D0 F9                   BNE TT51	\ loop Y
 291+ 9FDA              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 9FDA              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 9FDA              ;	.TT49	\ word ended
 294+ 9FDA              ;C8                      INY
 295+ 9FDA              ;D0 02                   BNE TT59    	\ next word
 296+ 9FDA              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 9FDA              ;	.TT59	\ next word
 298+ 9FDA              ;CA                      DEX 		\ token count
 299+ 9FDA              ;D0 ED                   BNE TT51	\ loop X token
 300+ 9FDA              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 9FDA              ;98                      TYA
 302+ 9FDA              ;48                      PHA 		\ store Yindex
 303+ 9FDA              ;A5 23                   LDA &23		\ V+1
 304+ 9FDA              ;48                      PHA 		\ correct pointer hi
 305+ 9FDA              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 9FDA              ;49 23                   EOR #&23	\ decode '#'
 307+ 9FDA              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 9FDA              ;68                      PLA 		\ restore this depth's Vhi
 309+ 9FDA              ;85 23                   STA &23		\ V+1
 310+ 9FDA              ;68                      PLA
 311+ 9FDA              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 9FDA              ;C8                      INY 		\ next letter
 313+ 9FDA              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 9FDA              ;E6 23                   INC &23		\ V+1
 315+ 9FDA              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 9FDA              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 9FDA              ;	.TT48 	\ rts
 318+ 9FDA              ;60                      RTS 		\ end of flight token printing TT27
 319+ 9FDA              ;
 320+ 9FDA              ;
 321+ 9FDA              ;
# file closed: ./Tables/name_digrams.asm
 891  9FDA              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 892  9FDA
 893  9FDA              ; Include all maths libraries to test assembly
 894  9FDA                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ 9FDA              addhldesigned:
   2+ 9FDA CB 7C                bit     7,h
   3+ 9FDC 20 03                jr      nz,.noneghl
   4+ 9FDE CD 2C A4             call    negate16hl
   5+ 9FE1              .noneghl:
   6+ 9FE1 CB 7A                bit     7,d
   7+ 9FE3 20 03                jr      nz,.nonegde
   8+ 9FE5 CD 33 A4             call    negate16de
   9+ 9FE8              .nonegde:
  10+ 9FE8 19                   add     hl,de                       ; do 2'd c add
  11+ 9FE9 AF                   xor     a                           ; assume positive
  12+ 9FEA CB 7C                bit     7,h
  13+ 9FEC C8                   ret     z                           ; if not set then can exit early
  14+ 9FED CD 2C A4             call    negate16hl
  15+ 9FF0 3E FF                ld      a,$FF
  16+ 9FF2 C9                   ret
  17+ 9FF3
# file closed: ./Maths/addhldesigned.asm
 895  9FF3                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ 9FF3
   2+ 9FF3              ; a = value to add
   3+ 9FF3              ; b = offset (equivalent to regX)
   4+ 9FF3              ; returns INWK [x] set to new value
   5+ 9FF3              addINWKbasigned:
   6+ 9FF3 21 0B C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
   7+ 9FF6 4F           		ld      c,a                         ; preserve a
   8+ 9FF7 78           		ld		a,b
   9+ 9FF8 ED 31        		add		hl,a                        ; hl = INWK[x]
  10+ 9FFA 79                   ld      a,c                         ; get back a value
  11+ 9FFB E6 80                and     $80                         ; get sign bit from a
  12+ 9FFD 47                   ld      b,a                         ; now b = sign bit of a
  13+ 9FFE 79                   ld      a,c                         ; a = original value
  14+ 9FFF E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
  15+ A001              ; hl = unsigned version of INWK0[b]
  16+ A001              ; a = value to add, also in c which will optimise later code
  17+ A001              ; b = sign bit of a ( in old code was varT)
  18+ A001              addhlcsigned:
  19+ A001 5E                   ld      e,(hl)                      ; de = INKK value
  20+ A002 23                   inc     hl
  21+ A003 56                   ld      d,(hl)
  22+ A004 23                   inc     hl                          ; now pointing a sign
  23+ A005 7E                   ld      a,(hl)                      ; a = sign bit
  24+ A006 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
  25+ A007 A8                   xor     b                           ; a = resultant sign
  26+ A008 CB 7F                bit     7,a                         ; is it negative?
  27+ A00A 28 28                jr      z,.postivecalc
  28+ A00C              .negativecalc:
  29+ A00C 7C                   ld      a,h
  30+ A00D E6 7F                and     SignMask8Bit
  31+ A00F 67                   ld      h,a                         ; strip high bit
  32+ A010 DD 68                ld      ixl,b                       ; save sign bit from b into d
  33+ A012 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
  34+ A014 ED 42                sbc     hl,bc
  35+ A016 DD 45                ld      b,ixl                       ; get sign back
  36+ A018 EB                   ex      de,hl                       ; de = value hl = pointer to sign
  37+ A019 7E                   ld      a,(hl)                      ;
  38+ A01A E6 7F                and     SignMask8Bit
  39+ A01C DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
  40+ A01E F6 80                or      $80                         ; set bit 0
  41+ A020 A8                   xor     b                           ; flip bit on sign (var T)
  42+ A021 77                   ld      (hl),a
  43+ A022 2B                   dec     hl
  44+ A023 72                   ld      (hl),d
  45+ A024 2B                   dec     hl
  46+ A025 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
  47+ A026 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
  48+ A027 D8                   ret     c                           ; if carry was set then we can exit now
  49+ A028              .nocarry:
  50+ A028 CD 2C A4             call    negate16hl                  ; get hl back to positive, a is still inkw+2
  51+ A02B B0                   or      b                           ; b is still varT
  52+ A02C EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
  53+ A02D 73                   ld      (hl),e
  54+ A02E 23                   inc     hl
  55+ A02F 72                   ld      (hl),d
  56+ A030 23                   inc     hl
  57+ A031 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
  58+ A032 EB                   ex      de,hl                       ; hl = value de = pointer to sign
  59+ A033 C9                   ret
  60+ A034              .postivecalc:
  61+ A034 DD 68                ld      ixl,b
  62+ A036 06 00                ld      b,0
  63+ A038 19                   add     hl,de
  64+ A039 EB                   ex      de,hl
  65+ A03A DD B5                or      ixl                         ; we don;t need to recover b here
  66+ A03C 77                   ld      (hl),a                      ; push sign into INWK[x]
  67+ A03D 2B                   dec     hl
  68+ A03E 72                   ld      (hl),d
  69+ A03F 2B                   dec     hl
  70+ A040 73                   ld      (hl),e
  71+ A041 C9                   ret
  72+ A042
  73+ A042              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
  74+ A042              ;MVT1
  75+ A042              ;    S = bits 6 to 0 of A
  76+ A042              ;    A = sign bit => T
  77+ A042              ;    xor sign bit with ink[x] Sign
  78+ A042              ;    if negative thn its not an add
  79+ A042              ;
  80+ A042              ;        and h, 7F
  81+ A042              ;        b = 0
  82+ A042              ;        c = varS
  83+ A042              ;        subtract INW[X]hilo, bc
  84+ A042              ;        retain carry
  85+ A042              ;        get INKW[x]Sign
  86+ A042              ;        and 7F
  87+ A042              ;        subtract carry (so will go negtive if negative)
  88+ A042              ;        xor bit 7 of h with T to flip bit
  89+ A042              ;        write to INKW[x]Sign
  90+ A042              ;
  91+ A042              ;    else
  92+ A042              ;MV10.
  93+ A042              ;        add INWK[x]hi,lo, varS
  94+ A042              ;        or      sign bit
  95+ A042
  96+ A042
# file closed: ./Maths/addhlasigned.asm
 896  A042                  INCLUDE "./Maths/Utilities/AddDEtoCash.asm"
# file opened: ./Maths/Utilities/AddDEtoCash.asm
   1+ A042              ; Note its big endian
   2+ A042 2A F4 96     addDEtoCash:            ld      hl,(Cash)
   3+ A045 19                                   add     hl,de
   4+ A046 22 F4 96                             ld      (Cash),hl
   5+ A049 11 00 00                             ld      de,0
   6+ A04C 2A F6 96                             ld      hl,(Cash+2)
   7+ A04F ED 5A                                adc     hl,de
   8+ A051 22 F6 96                             ld      (Cash+2),hl
   9+ A054 C9                                   ret
  10+ A055
  11+ A055 2A F4 96     subDEfromCash:          ld      hl,(Cash)
  12+ A058 7C                                   ld      a,h
  13+ A059 B5                                   or      l
  14+ A05A 2A F6 96                             ld      hl,(Cash+2)
  15+ A05D B4                                   or      h
  16+ A05E B5                                   or      l
  17+ A05F C8                                   ret     z               ; No cash return
  18+ A060 B7                                   or      a
  19+ A061 2A F4 96                             ld      hl,(Cash)
  20+ A064 ED 52                                sbc     hl,de
  21+ A066 22 F4 96                             ld      (Cash),hl
  22+ A069 11 00 00                             ld      de,0
  23+ A06C 2A F6 96                             ld      hl,(Cash+2)
  24+ A06F ED 52                                sbc     hl,de
  25+ A071 22 F6 96                             ld      (Cash+2),hl
  26+ A074                                      JumpOnBitSet h,7,.ZeroCash
  26+ A074 CB 7C       >                        bit 	7,h
  26+ A076 C2 7A A0    >                        jp      nz,.ZeroCash
  27+ A079 C9                                   ret
  28+ A07A 21 00 00     .ZeroCash:              ld      hl,0
  29+ A07D 22 F4 96                             ld      (Cash),hl
  30+ A080 22 F6 96                             ld      (Cash+2),hl
  31+ A083 C9                                   ret
  32+ A084
# file closed: ./Maths/Utilities/AddDEtoCash.asm
 897  A084                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A084              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A084 2A D9 93                             ld  hl,(varRS)
   3+ A087 3A D8 93                             ld  a,(varQ)
   4+ A08A C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A08C 11 00 00                             ld  de,0        ; de = XY
   6+ A08F 47                                   ld  b,a         ; b = Q
   7+ A090                                      ShiftHLRight1
   7+ A090 CB 3C       >			   srl h
   7+ A092 CB 1D       >			   rr  l
   8+ A094 CB 20                                sla b
   9+ A096 30 03                                jr  nc,.LL126
  10+ A098 EB           .LL125:                 ex de,hl
  11+ A099 19                                   add hl,de
  12+ A09A EB                                   ex  de,hl       ; de = de + rs
  13+ A09B              .LL126:                 ShiftHLRight1
  13+ A09B CB 3C       >			   srl h
  13+ A09D CB 1D       >			   rr  l
  14+ A09F CB 20                                sla b
  15+ A0A1 38 F5                                jr      c,.LL125
  16+ A0A3 20 F6                                jr      nz,.LL126
  17+ A0A5 EB                                   ex      de,hl   ; hl = result
  18+ A0A6 D1 C1                                pop     bc,,de
  19+ A0A8 C9                                   ret
  20+ A0A9
  21+ A0A9
  22+ A0A9              MacroDEEquQmulASigned:  MACRO
  23+ A0A9 ~                                    ld      d,a                         ; save a into d
  24+ A0A9 ~                                    ld      a,(varQ)
  25+ A0A9 ~                                    ld      e,a
  26+ A0A9 ~                                    xor     d                           ; a = a xor var Q
  27+ A0A9 ~                                    and     SignOnly8Bit
  28+ A0A9 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ A0A9 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ A0A9 ~                                    and     SignMask8Bit
  31+ A0A9 ~                                    ld      d,a
  32+ A0A9 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ A0A9 ~                                    and     SignMask8Bit
  34+ A0A9 ~                                    ld      e,a
  35+ A0A9 ~                                    mul                                 ; de = a * Q
  36+ A0A9 ~                                    ld      a,d
  37+ A0A9 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ A0A9 ~                                    ld      d,a
  39+ A0A9                                      ENDM
  40+ A0A9
  41+ A0A9
  42+ A0A9
  43+ A0A9                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ A0A9              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ A0A9 57          >                        ld      d,a                         ; save a into d
  44+ A0AA 3A D8 93    >                        ld      a,(varQ)
  44+ A0AD 5F          >                        ld      e,a
  44+ A0AE AA          >                        xor     d                           ; a = a xor var Q
  44+ A0AF E6 80       >                        and     SignOnly8Bit
  44+ A0B1 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ A0B2 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ A0B3 E6 7F       >                        and     SignMask8Bit
  44+ A0B5 57          >                        ld      d,a
  44+ A0B6 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ A0B7 E6 7F       >                        and     SignMask8Bit
  44+ A0B9 5F          >                        ld      e,a
  44+ A0BA ED 30       >                        mul                                 ; de = a * Q
  44+ A0BC 7A          >                        ld      a,d
  44+ A0BD B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ A0BE 57          >                        ld      d,a
  45+ A0BF 2A D9 93     madDEaddRS:             ld		hl,(varR)
  46+ A0C2 CD CB A0                             call	madXAAddHLDESigned
  47+ A0C5 EB                                   ex      de,hl                       ; de = R.S + DE
  48+ A0C6                                      ClearCarryFlag
  48+ A0C6 B7          >				or a
  49+ A0C7 DD 6B                                ld      ixl,e
  50+ A0C9 7A                                   ld      a,d
  51+ A0CA C9                                   ret
  52+ A0CB
  53+ A0CB
  54+ A0CB 7C           madXAAddHLDESigned:     ld      a,h
  55+ A0CC E6 80                                and     SignOnly8Bit
  56+ A0CE 47                                   ld      b,a                         ;save sign bit in b
  57+ A0CF AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ A0D0                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ A0D0 FA E8 A0    >                        jp		m, .ADDHLDEOppSGN
  59+ A0D3 78           .ADDHLDESameSigns:       ld      a,b
  60+ A0D4 B2                                   or      d
  61+ A0D5                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ A0D5 FA DA A0    >                        jp		m, .ADDHLDESameNeg
  62+ A0D8 19                                   add     hl,de
  63+ A0D9 C9                                   ret
  64+ A0DA 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ A0DB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ A0DD 67                                   ld      h,a
  67+ A0DE 7A                                   ld      a,d
  68+ A0DF E6 7F                                and     SignMask8Bit
  69+ A0E1 57                                   ld      d,a
  70+ A0E2 19                                   add     hl,de
  71+ A0E3 3E 80                                ld      a,SignOnly8Bit
  72+ A0E5 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ A0E6 67                                   ld      h,a
  74+ A0E7 C9                                   ret
  75+ A0E8 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A0E9 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A0EB 67                                   ld      h,a
  78+ A0EC 7A                                   ld      a,d
  79+ A0ED E6 7F                                and     SignMask8Bit
  80+ A0EF 57                                   ld      d,a
  81+ A0F0 B7                                   or      a
  82+ A0F1 ED 52                                sbc     hl,de
  83+ A0F3 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A0F5 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A0F6 B4                                   or      h
  86+ A0F7 67                                   ld      h,a                         ; set the previou sign value
  87+ A0F8 C9                                   ret
  88+ A0F9              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A0F9 AF          >                xor a
  88+ A0FA 95          >                sub l
  88+ A0FB 6F          >                ld l,a
  88+ A0FC 9F          >                sbc a,a
  88+ A0FD 94          >                sub h
  88+ A0FE 67          >                ld h,a
  89+ A0FF 78                                   ld      a,b
  90+ A100 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A102 B4                                   or      h
  92+ A103 67                                   ld      h,a                         ; recover sign
  93+ A104 C9                                   ret
  94+ A105
  95+ A105
  96+ A105                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A105                  ;
  98+ A105                  ; enter : hl = 16-bit multiplier   = x
  99+ A105                  ;          e =  8-bit multiplicand = y
 100+ A105                  ;
 101+ A105                  ; exit  : ahl = 24-bit product
 102+ A105                  ;         carry reset
 103+ A105                  ;
 104+ A105                  ; uses  : af, de, hl
 105+ A105 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A106 63                                   ld h,e                      ; yl
 107+ A107 ED 30                                mul de                      ; xh*yl
 108+ A109 EB                                   ex de,hl
 109+ A10A ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A10C
 111+ A10C 7A                                   ld  a,d                     ; sum products
 112+ A10D 85                                   add a,l
 113+ A10E 57                                   ld  d,a
 114+ A10F EB                                   ex de,hl
 115+ A110
 116+ A110 7A                                   ld  a,d
 117+ A111 CE 00                                adc a,0
 118+ A113 C9                                   ret
 119+ A114
 120+ A114
 121+ A114
 122+ A114                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A114                 ;
 124+ A114                 ; enter : de = 16-bit multiplicand = y
 125+ A114                 ;         hl = 16-bit multiplicand = x
 126+ A114                 ;
 127+ A114                 ; exit  : dehl = 32-bit product
 128+ A114                 ;         carry reset
 129+ A114                 ;
 130+ A114                 ; uses  : af, bc, de, hl
 131+ A114
 132+ A114
 133+ A114
 134+ A114 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A115 4B                                   ld c,e                      ; y0
 136+ A116 5D                                   ld e,l                      ; x0
 137+ A117 6A                                   ld l,d
 138+ A118 E5                                   push hl                     ; x1 y1
 139+ A119 69                                   ld l,c                      ; y0
 140+ A11A              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A11A ED 30                                mul de                      ; y1*x0
 142+ A11C EB                                   ex de,hl
 143+ A11D ED 30                                mul de                      ; x1*y0
 144+ A11F
 145+ A11F AF                                   xor a                       ; zero A
 146+ A120 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A121 8F                                   adc a,a                     ; capture carry p3
 148+ A122
 149+ A122 59                                   ld e,c                      ; x0
 150+ A123 50                                   ld d,b                      ; y0
 151+ A124 ED 30                                mul de                      ; y0*x0
 152+ A126
 153+ A126 47                                   ld b,a                      ; carry from cross products
 154+ A127 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A128
 156+ A128 7A                                   ld a,d
 157+ A129 85                                   add a,l
 158+ A12A 67                                   ld h,a
 159+ A12B 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A12C
 161+ A12C D1                                   pop de
 162+ A12D ED 30                                mul de                      ; x1*y1
 163+ A12F
 164+ A12F EB                                   ex de,hl
 165+ A130 ED 4A                                adc hl,bc
 166+ A132 EB                                   ex de,hl                    ; de = final MSW
 167+ A133
 168+ A133 C9                                   ret
 169+ A134
 170+ A134              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A134              ; enter : de = 16-bit multiplicand
 172+ A134              ;         hl = 16-bit multiplicand
 173+ A134              ; exit  : hl = 16-bit product
 174+ A134              ;         carry reset
 175+ A134              ; maths is
 176+ A134              ;        hl = y , de= x
 177+ A134              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A134              ;        hl = yhih & xlo + x
 179+ A134              ;
 180+ A134              ;
 181+ A134              ; uses  : af, bc, de, hl
 182+ A134 C5           mulDEbyHL:              push    bc
 183+ A135 7A                                   ld a,d                      ; a = xh
 184+ A136 54                                   ld d,h                      ; d = yh
 185+ A137 67                                   ld h,a                      ; h = xh
 186+ A138 4B                                   ld c,e                      ; c = xl
 187+ A139 45                                   ld b,l                      ; b = yl
 188+ A13A ED 30                                mul                         ; yh * yl
 189+ A13C EB                                   ex de,hl
 190+ A13D ED 30                                mul                         ; xh * yl
 191+ A13F 19                                   add hl,de                   ; add cross products
 192+ A140 59                                   ld e,c
 193+ A141 50                                   ld d,b
 194+ A142 ED 30                                mul                         ; yl * xl
 195+ A144 7D                                   ld a,l                      ; cross products lsb
 196+ A145 82                                   add a,d                     ; add to msb final
 197+ A146 67                                   ld h,a
 198+ A147 6B                                   ld l,e                      ; hl = final
 199+ A148                                      ; 83 cycles, 19 bytes
 200+ A148 AF                                   xor a                       ; reset carry
 201+ A149 C1                                   pop     bc
 202+ A14A C9                                   ret
 203+ A14B
 204+ A14B              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 205+ A14B              ; enter : de = 16-bit multiplicand
 206+ A14B              ;         hl = 16-bit multiplicand
 207+ A14B              ; exit  : hl = 16-bit product
 208+ A14B              ;         carry reset
 209+ A14B              ;
 210+ A14B              ; uses  : af, bc, de, hl
 211+ A14B 00           mulDEbyHLSignByte       DB      0
 212+ A14C AF           mulDEbyHLSgnTo2c:       xor     a
 213+ A14D 32 4B A1                             ld      (mulDEbyHLSignByte),a
 214+ A150 7A           .SignDE:                ld      a,d
 215+ A151 ED 27 80                             test    $80
 216+ A154 28 08                                jr      z,.SignHL
 217+ A156 E6 7F        .NegativeDE:            and     $7F
 218+ A158 57                                   ld      d,a
 219+ A159 3E 80                                ld      a,$80
 220+ A15B 32 4B A1                             ld      (mulDEbyHLSignByte),a
 221+ A15E 7C           .SignHL:                ld      a,h
 222+ A15F ED 27 80                             test    $80
 223+ A162 28 0B                                jr      z,.AbsoluteMultiply
 224+ A164 E6 7F        .NegativeHL:            and     $7F
 225+ A166 67                                   ld      h,a
 226+ A167 3A 4B A1                             ld      a,(mulDEbyHLSignByte)
 227+ A16A EE 80                                xor     $80
 228+ A16C 32 4B A1                             ld      (mulDEbyHLSignByte),a
 229+ A16F CD 34 A1     .AbsoluteMultiply:      call    mulDEbyHL
 230+ A172 3A 4B A1     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 231+ A175 ED 27 80                             test    $80
 232+ A178 C8                                   ret     z
 233+ A179 AF           .Negateghl: 				xor 	a
 234+ A17A 95                                   sub 	l
 235+ A17B 6F                                   ld 		l,a
 236+ A17C 9F                                   sbc 	a,a
 237+ A17D 94                                   sub 	h
 238+ A17E 67                                   ld 		h,a
 239+ A17F C9                                   ret
 240+ A180
 241+ A180 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 242+ A181 32 4B A1                             ld      (mulDEbyHLSignByte),a
 243+ A184 7A           .SignDE:                ld      a,d
 244+ A185 ED 27 80                             test    $80
 245+ A188 28 08                                jr      z,.AbsoluteMultiply
 246+ A18A E6 7F        .NegativeDE:            and     $7F
 247+ A18C 57                                   ld      d,a
 248+ A18D 3E 80                                ld      a,$80
 249+ A18F 32 4B A1                             ld      (mulDEbyHLSignByte),a
 250+ A192 CD 34 A1     .AbsoluteMultiply:      call    mulDEbyHL
 251+ A195 3A 4B A1     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 252+ A198 ED 27 80                             test    $80
 253+ A19B C8                                   ret     z
 254+ A19C AF           .Negateghl:             xor 	a
 255+ A19D 95                                   sub 	l
 256+ A19E 6F                                   ld 		l,a
 257+ A19F 9F                                   sbc 	a,a
 258+ A1A0 94                                   sub 	h
 259+ A1A1 67                                   ld 		h,a
 260+ A1A2 C9                                   ret
 261+ A1A3
 262+ A1A3
# file closed: ./Maths/multiply.asm
 898  A1A3                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A1A3              ; "ASM_SQUA : TESTGOOD"
   2+ A1A3              ; "AP = A^2 A = low,P = hi"
   3+ A1A3
   4+ A1A3              inline_squde: MACRO
   5+ A1A3 ~            			ld	e,a
   6+ A1A3 ~            			ld  d,a
   7+ A1A3 ~            			mul
   8+ A1A3              			ENDM
   9+ A1A3
  10+ A1A3              inline_squa: MACRO
  11+ A1A3 ~            			ld	e,a
  12+ A1A3 ~            			ld  d,a
  13+ A1A3 ~            			mul
  14+ A1A3 ~            			ld	a,e
  15+ A1A3              			ENDM
  16+ A1A3
  17+ A1A3
  18+ A1A3              asm_squa:
  19+ A1A3 E6 7F        	and SignMask8Bit
  20+ A1A5              ; "ASM SQUA2 : TESTGOOD"
  21+ A1A5              ; "AP = A^2 A = low,P = hi singed"
  22+ A1A5              asm_squa2:
  23+ A1A5 5F           	ld e, a
  24+ A1A6 57           	ld d,a
  25+ A1A7 ED 30        	mul
  26+ A1A9 ED 53 7D 93  	ld (varP),de
  27+ A1AD 7B           	ld a,e
  28+ A1AE C9           	ret
# file closed: ./Maths/asm_square.asm
 899  A1AF                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A1AF              ; "ASM SQRT : TESTGOOD"
   2+ A1AF              ; "16-bit integer square root"
   3+ A1AF              ; "call with de = number to square root"
   4+ A1AF              ; "returns   hl = square root"
   5+ A1AF              ; "corrupts  bc, de"
   6+ A1AF              asm_sqrt:
   7+ A1AF 01 00 80     	ld bc,$8000
   8+ A1B2 61           	ld h,c
   9+ A1B3 69           	ld l,c
  10+ A1B4              .sqrloop:
  11+ A1B4 CB 38        	srl b
  12+ A1B6 CB 19        	rr c
  13+ A1B8 09           	add hl,bc
  14+ A1B9 EB           	ex de,hl
  15+ A1BA ED 52        	sbc hl,de
  16+ A1BC 38 04        	jr c,.sqrbit
  17+ A1BE EB           	ex de,hl
  18+ A1BF 09           	add hl,bc
  19+ A1C0 18 05        	jr .sqrfi
  20+ A1C2              .sqrbit:
  21+ A1C2 19           	add hl,de
  22+ A1C3 EB           	ex de,hl
  23+ A1C4 B7           	or a
  24+ A1C5 ED 42        	sbc hl,bc
  25+ A1C7              .sqrfi:
  26+ A1C7 CB 3C        	srl h
  27+ A1C9 CB 1D        	rr l
  28+ A1CB CB 38        	srl b
  29+ A1CD CB 19        	rr c
  30+ A1CF 30 E3        	jr nc,.sqrloop
  31+ A1D1 C9           	ret
  32+ A1D2
  33+ A1D2
  34+ A1D2              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A1D2 3A D8 93     	ld		a,(varQ)
  36+ A1D5 5F           	ld		e,a
  37+ A1D6 3A D9 93     	ld		a,(varR)
  38+ A1D9 57           	ld		d,a
  39+ A1DA CD AF A1     	call	asm_sqrt
  40+ A1DD 7D               ld      a,l
  41+ A1DE 32 D8 93     	ld		(varQ),a
  42+ A1E1 C9           	ret
  43+ A1E2
# file closed: ./Maths/asm_sqrt.asm
 900  A1E2                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A1E2              ; Divide 8-bit values
   2+ A1E2              ; In: Divide E by divider C
   3+ A1E2              ; Out: A = result, B = rest
   4+ A1E2              ;
   5+ A1E2              ;;;Div8:
   6+ A1E2              ;;;    xor a
   7+ A1E2              ;;;    ld b,8
   8+ A1E2              ;;;Div8_Loop:
   9+ A1E2              ;;;    rl e
  10+ A1E2              ;;;    rla
  11+ A1E2              ;;;    sub c
  12+ A1E2              ;;;    jr nc,Div8_NoAdd
  13+ A1E2              ;;;    add a,c
  14+ A1E2              ;;;Div8_NoAdd:
  15+ A1E2              ;;;    djnz Div8_Loop
  16+ A1E2              ;;;    ld b,a
  17+ A1E2              ;;;    ld a,e
  18+ A1E2              ;;;    rla
  19+ A1E2              ;;;    cpl
  20+ A1E2              ;;;    ret
  21+ A1E2
  22+ A1E2              ;;Inputs: DE is the numerator, BC is the divisor
  23+ A1E2              ;;Outputs: DE is the result
  24+ A1E2              ;;         A is a copy of E
  25+ A1E2              ;;         HL is the remainder
  26+ A1E2              ;;         BC is not changed
  27+ A1E2              ;; so DE = DE /BC
  28+ A1E2              ;140 bytes
  29+ A1E2              ;145cc
  30+ A1E2
  31+ A1E2              MacroDEDivBC:       MACRO
  32+ A1E2 ~                                rla
  33+ A1E2 ~                                adc     hl,hl
  34+ A1E2 ~                                sbc     hl,bc
  35+ A1E2 ~                                jr      nc,$+3
  36+ A1E2 ~                                add     hl,bc
  37+ A1E2                                  ENDM
  38+ A1E2
  39+ A1E2              DEequDEDivBC:
  40+ A1E2 AF               xor a
  41+ A1E3 ED 62            sbc hl,hl
  42+ A1E5 7A               ld a,d
  43+ A1E6                  MacroDEDivBC
  43+ A1E6 17          >                    rla
  43+ A1E7 ED 6A       >                    adc     hl,hl
  43+ A1E9 ED 42       >                    sbc     hl,bc
  43+ A1EB 30 01       >                    jr      nc,$+3
  43+ A1ED 09          >                    add     hl,bc
  44+ A1EE                  MacroDEDivBC
  44+ A1EE 17          >                    rla
  44+ A1EF ED 6A       >                    adc     hl,hl
  44+ A1F1 ED 42       >                    sbc     hl,bc
  44+ A1F3 30 01       >                    jr      nc,$+3
  44+ A1F5 09          >                    add     hl,bc
  45+ A1F6                  MacroDEDivBC
  45+ A1F6 17          >                    rla
  45+ A1F7 ED 6A       >                    adc     hl,hl
  45+ A1F9 ED 42       >                    sbc     hl,bc
  45+ A1FB 30 01       >                    jr      nc,$+3
  45+ A1FD 09          >                    add     hl,bc
  46+ A1FE                  MacroDEDivBC
  46+ A1FE 17          >                    rla
  46+ A1FF ED 6A       >                    adc     hl,hl
  46+ A201 ED 42       >                    sbc     hl,bc
  46+ A203 30 01       >                    jr      nc,$+3
  46+ A205 09          >                    add     hl,bc
  47+ A206                  MacroDEDivBC
  47+ A206 17          >                    rla
  47+ A207 ED 6A       >                    adc     hl,hl
  47+ A209 ED 42       >                    sbc     hl,bc
  47+ A20B 30 01       >                    jr      nc,$+3
  47+ A20D 09          >                    add     hl,bc
  48+ A20E                  MacroDEDivBC
  48+ A20E 17          >                    rla
  48+ A20F ED 6A       >                    adc     hl,hl
  48+ A211 ED 42       >                    sbc     hl,bc
  48+ A213 30 01       >                    jr      nc,$+3
  48+ A215 09          >                    add     hl,bc
  49+ A216                  MacroDEDivBC
  49+ A216 17          >                    rla
  49+ A217 ED 6A       >                    adc     hl,hl
  49+ A219 ED 42       >                    sbc     hl,bc
  49+ A21B 30 01       >                    jr      nc,$+3
  49+ A21D 09          >                    add     hl,bc
  50+ A21E                  MacroDEDivBC
  50+ A21E 17          >                    rla
  50+ A21F ED 6A       >                    adc     hl,hl
  50+ A221 ED 42       >                    sbc     hl,bc
  50+ A223 30 01       >                    jr      nc,$+3
  50+ A225 09          >                    add     hl,bc
  51+ A226 17               rla
  52+ A227 2F               cpl
  53+ A228 57               ld d,a
  54+ A229
  55+ A229 7B               ld a,e
  56+ A22A                  MacroDEDivBC
  56+ A22A 17          >                    rla
  56+ A22B ED 6A       >                    adc     hl,hl
  56+ A22D ED 42       >                    sbc     hl,bc
  56+ A22F 30 01       >                    jr      nc,$+3
  56+ A231 09          >                    add     hl,bc
  57+ A232                  MacroDEDivBC
  57+ A232 17          >                    rla
  57+ A233 ED 6A       >                    adc     hl,hl
  57+ A235 ED 42       >                    sbc     hl,bc
  57+ A237 30 01       >                    jr      nc,$+3
  57+ A239 09          >                    add     hl,bc
  58+ A23A                  MacroDEDivBC
  58+ A23A 17          >                    rla
  58+ A23B ED 6A       >                    adc     hl,hl
  58+ A23D ED 42       >                    sbc     hl,bc
  58+ A23F 30 01       >                    jr      nc,$+3
  58+ A241 09          >                    add     hl,bc
  59+ A242                  MacroDEDivBC
  59+ A242 17          >                    rla
  59+ A243 ED 6A       >                    adc     hl,hl
  59+ A245 ED 42       >                    sbc     hl,bc
  59+ A247 30 01       >                    jr      nc,$+3
  59+ A249 09          >                    add     hl,bc
  60+ A24A                  MacroDEDivBC
  60+ A24A 17          >                    rla
  60+ A24B ED 6A       >                    adc     hl,hl
  60+ A24D ED 42       >                    sbc     hl,bc
  60+ A24F 30 01       >                    jr      nc,$+3
  60+ A251 09          >                    add     hl,bc
  61+ A252                  MacroDEDivBC
  61+ A252 17          >                    rla
  61+ A253 ED 6A       >                    adc     hl,hl
  61+ A255 ED 42       >                    sbc     hl,bc
  61+ A257 30 01       >                    jr      nc,$+3
  61+ A259 09          >                    add     hl,bc
  62+ A25A                  MacroDEDivBC
  62+ A25A 17          >                    rla
  62+ A25B ED 6A       >                    adc     hl,hl
  62+ A25D ED 42       >                    sbc     hl,bc
  62+ A25F 30 01       >                    jr      nc,$+3
  62+ A261 09          >                    add     hl,bc
  63+ A262                  MacroDEDivBC
  63+ A262 17          >                    rla
  63+ A263 ED 6A       >                    adc     hl,hl
  63+ A265 ED 42       >                    sbc     hl,bc
  63+ A267 30 01       >                    jr      nc,$+3
  63+ A269 09          >                    add     hl,bc
  64+ A26A 17               rla
  65+ A26B 2F               cpl
  66+ A26C 5F               ld e,a
  67+ A26D C9               ret
  68+ A26E
  69+ A26E
  70+ A26E
  71+ A26E              ;divdide by 16 using undocumented instrunctions
  72+ A26E              ;Input: BC = Dividend, DE = Divisor, HL = 0
  73+ A26E              ;Output: BC = Quotient, HL = Remainder
  74+ A26E              ; Our use
  75+ A26E              ; BC = A0
  76+ A26E              ; DE = 0C
  77+ A26E              ; so BC = a * 256 / C
  78+ A26E              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  78+ A26E B9          >                        cp     c
  78+ A26F D2 9A A2    >                        jp		nc,DEV16ATooLarge
  79+ A272 47                                   ld      b,a
  80+ A273 59                                   ld      e,c
  81+ A274 0E 00                                ld      c,0
  82+ A276 16 00                                ld      d,0
  83+ A278 C3 85 A2                             jp      DIV16UNDOC
  84+ A27B 47           DIV16Amul256dQUNDOC:    ld      b,a
  85+ A27C 0E 00                                ld      c,0
  86+ A27E 21 D8 93                             ld      hl,varQ
  87+ A281 7E                                   ld      a,(hl)
  88+ A282 16 00                                ld      d,0
  89+ A284 5F                                   ld      e,a
  90+ A285              DIV16BCDivDEUNDOC:
  91+ A285 21 00 00     DIV16UNDOC:             ld      hl,0
  92+ A288 78                                   ld      a,b
  93+ A289 06 10                                ld      b,16
  94+ A28B CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  95+ A28D 17                                   rla			; ...
  96+ A28E ED 6A                                adc	hl,hl		; ...
  97+ A290 ED 52                                sbc	hl,de		; ...
  98+ A292 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  99+ A294 19                                   add	hl,de		; ...
 100+ A295 0D                                   dec	c		; ...
 101+ A296 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 102+ A298 47                                   ld   b,a
 103+ A299 C9                                   ret
 104+ A29A 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 105+ A29D C9                                   ret
 106+ A29E
 107+ A29E              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 108+ A29E 06 08        asm_div8:               ld b,8
 109+ A2A0 AF                                   xor a
 110+ A2A1 CB 21        div8_loop:	            sla c
 111+ A2A3 17                                   rla
 112+ A2A4 BA                                   cp d
 113+ A2A5 38 02                                jr c,div8_skip
 113+ A2A7
 114+ A2A7 0C                                   inc c
 115+ A2A8 92                                   sub d
 116+ A2A9 10 F6        div8_skip:	            djnz div8_loop
 117+ A2AB C9                                   ret
 118+ A2AC              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 119+ A2AC 06 10        asm_div16:              ld b,16
 120+ A2AE AF                                   xor a
 121+ A2AF CB 25        div16_loop:	            sla l
 122+ A2B1 CB 14                                rl	h
 123+ A2B3              ;    add hl,hl
 124+ A2B3 17                                   rla
 125+ A2B4 B9                                   cp c
 126+ A2B5 38 02                                jr c,div16_skip
 127+ A2B7 2C                                   inc l
 128+ A2B8 91                                   sub c
 129+ A2B9 10 F4        div16_skip:		        djnz div16_loop
 130+ A2BB C9                                   ret
 131+ A2BC              ;
 132+ A2BC              ; Divide 16-bit values (with 16-bit result)
 133+ A2BC              ; In: Divide BC by divider DE
 134+ A2BC              ; Out: BC = result, HL = rest
 135+ A2BC              ;
 136+ A2BC              HLDivC_Iteration: 	MACRO
 137+ A2BC ~            					add	hl,hl		; unroll 16 times
 138+ A2BC ~            					rla				; ...
 139+ A2BC ~            					cp	c			; ...
 140+ A2BC ~            					jr	1F
 141+ A2BC ~            					sub	c			; ...
 142+ A2BC ~            1:
 143+ A2BC ~            					inc	l			; ...
 144+ A2BC              					ENDM
 145+ A2BC
 146+ A2BC
 147+ A2BC
 148+ A2BC              ; ">div1616: BC = BC / DE. HL = remainder"
 149+ A2BC 21 00 00     Div1616:            ld hl,0
 150+ A2BF 78                               ld a,b
 151+ A2C0 06 08                            ld b,8
 152+ A2C2 17           .Div16_Loop1:       rla
 153+ A2C3 ED 6A                            adc hl,hl
 154+ A2C5 ED 52                            sbc hl,de
 155+ A2C7 30 01                            jr nc,.Div16_NoAdd1
 156+ A2C9 19                               add hl,de
 157+ A2CA 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 158+ A2CC 17                               rla
 159+ A2CD 2F                               cpl
 160+ A2CE 47                               ld b,a
 161+ A2CF 79                               ld a,c
 162+ A2D0 48                               ld c,b
 163+ A2D1 06 08                            ld b,8
 164+ A2D3 17           .Div16_Loop2:       rla
 165+ A2D4 ED 6A                            adc hl,hl
 166+ A2D6 ED 52                            sbc hl,de
 167+ A2D8 30 01                            jr nc,.Div16_NoAdd2
 168+ A2DA 19                               add hl,de
 169+ A2DB 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 170+ A2DD 17                               rla
 171+ A2DE 2F                               cpl
 172+ A2DF 41                               ld b,c
 173+ A2E0 4F                               ld c,a
 174+ A2E1 C9                               ret
 175+ A2E2
 176+ A2E2
 177+ A2E2
 178+ A2E2              BCDIVDE_Iteration: MACRO
 179+ A2E2 ~            				   rla
 180+ A2E2 ~            				   adc	hl,hl
 181+ A2E2 ~            				   add	hl,de
 182+ A2E2 ~            				   jr	c,1F
 183+ A2E2 ~            				   sbc	hl,de
 184+ A2E2 ~            1:
 185+ A2E2              				   ENDM
 186+ A2E2
 187+ A2E2
 188+ A2E2              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 189+ A2E2              ;BC/DE ==> BC, remainder in HL
 190+ A2E2              ;NOTE: BC/0 returns 0 as the quotient.
 191+ A2E2              ;min: 738cc
 192+ A2E2              ;max: 898cc
 193+ A2E2              ;avg: 818cc
 194+ A2E2              ;144 bytes
 195+ A2E2 AF           BC_Div_DE:              xor a
 196+ A2E3 67                                   ld h,a
 197+ A2E4 6F                                   ld l,a
 198+ A2E5 93                                   sub e
 199+ A2E6 5F                                   ld e,a
 200+ A2E7 9F                                   sbc a,a
 201+ A2E8 92                                   sub d
 202+ A2E9 57                                   ld d,a
 203+ A2EA 78                                   ld a,b
 204+ A2EB                                      BCDIVDE_Iteration
 204+ A2EB 17          >				   rla
 204+ A2EC ED 6A       >				   adc	hl,hl
 204+ A2EE 19          >				   add	hl,de
 204+ A2EF 38 02       >				   jr	c,1F
 204+ A2F1 ED 52       >				   sbc	hl,de
 204+ A2F3             >1:
 205+ A2F3                                      BCDIVDE_Iteration
 205+ A2F3 17          >				   rla
 205+ A2F4 ED 6A       >				   adc	hl,hl
 205+ A2F6 19          >				   add	hl,de
 205+ A2F7 38 02       >				   jr	c,1F
 205+ A2F9 ED 52       >				   sbc	hl,de
 205+ A2FB             >1:
 206+ A2FB                                      BCDIVDE_Iteration
 206+ A2FB 17          >				   rla
 206+ A2FC ED 6A       >				   adc	hl,hl
 206+ A2FE 19          >				   add	hl,de
 206+ A2FF 38 02       >				   jr	c,1F
 206+ A301 ED 52       >				   sbc	hl,de
 206+ A303             >1:
 207+ A303                                      BCDIVDE_Iteration
 207+ A303 17          >				   rla
 207+ A304 ED 6A       >				   adc	hl,hl
 207+ A306 19          >				   add	hl,de
 207+ A307 38 02       >				   jr	c,1F
 207+ A309 ED 52       >				   sbc	hl,de
 207+ A30B             >1:
 208+ A30B                                      BCDIVDE_Iteration
 208+ A30B 17          >				   rla
 208+ A30C ED 6A       >				   adc	hl,hl
 208+ A30E 19          >				   add	hl,de
 208+ A30F 38 02       >				   jr	c,1F
 208+ A311 ED 52       >				   sbc	hl,de
 208+ A313             >1:
 209+ A313                                      BCDIVDE_Iteration
 209+ A313 17          >				   rla
 209+ A314 ED 6A       >				   adc	hl,hl
 209+ A316 19          >				   add	hl,de
 209+ A317 38 02       >				   jr	c,1F
 209+ A319 ED 52       >				   sbc	hl,de
 209+ A31B             >1:
 210+ A31B                                      BCDIVDE_Iteration
 210+ A31B 17          >				   rla
 210+ A31C ED 6A       >				   adc	hl,hl
 210+ A31E 19          >				   add	hl,de
 210+ A31F 38 02       >				   jr	c,1F
 210+ A321 ED 52       >				   sbc	hl,de
 210+ A323             >1:
 211+ A323                                      BCDIVDE_Iteration
 211+ A323 17          >				   rla
 211+ A324 ED 6A       >				   adc	hl,hl
 211+ A326 19          >				   add	hl,de
 211+ A327 38 02       >				   jr	c,1F
 211+ A329 ED 52       >				   sbc	hl,de
 211+ A32B             >1:
 212+ A32B 17                                   rla
 213+ A32C 47                                   ld b,a
 214+ A32D
 215+ A32D 79                                   ld a,c
 216+ A32E                                      BCDIVDE_Iteration
 216+ A32E 17          >				   rla
 216+ A32F ED 6A       >				   adc	hl,hl
 216+ A331 19          >				   add	hl,de
 216+ A332 38 02       >				   jr	c,1F
 216+ A334 ED 52       >				   sbc	hl,de
 216+ A336             >1:
 217+ A336                                      BCDIVDE_Iteration
 217+ A336 17          >				   rla
 217+ A337 ED 6A       >				   adc	hl,hl
 217+ A339 19          >				   add	hl,de
 217+ A33A 38 02       >				   jr	c,1F
 217+ A33C ED 52       >				   sbc	hl,de
 217+ A33E             >1:
 218+ A33E                                      BCDIVDE_Iteration
 218+ A33E 17          >				   rla
 218+ A33F ED 6A       >				   adc	hl,hl
 218+ A341 19          >				   add	hl,de
 218+ A342 38 02       >				   jr	c,1F
 218+ A344 ED 52       >				   sbc	hl,de
 218+ A346             >1:
 219+ A346                                      BCDIVDE_Iteration
 219+ A346 17          >				   rla
 219+ A347 ED 6A       >				   adc	hl,hl
 219+ A349 19          >				   add	hl,de
 219+ A34A 38 02       >				   jr	c,1F
 219+ A34C ED 52       >				   sbc	hl,de
 219+ A34E             >1:
 220+ A34E                                      BCDIVDE_Iteration
 220+ A34E 17          >				   rla
 220+ A34F ED 6A       >				   adc	hl,hl
 220+ A351 19          >				   add	hl,de
 220+ A352 38 02       >				   jr	c,1F
 220+ A354 ED 52       >				   sbc	hl,de
 220+ A356             >1:
 221+ A356                                      BCDIVDE_Iteration
 221+ A356 17          >				   rla
 221+ A357 ED 6A       >				   adc	hl,hl
 221+ A359 19          >				   add	hl,de
 221+ A35A 38 02       >				   jr	c,1F
 221+ A35C ED 52       >				   sbc	hl,de
 221+ A35E             >1:
 222+ A35E                                      BCDIVDE_Iteration
 222+ A35E 17          >				   rla
 222+ A35F ED 6A       >				   adc	hl,hl
 222+ A361 19          >				   add	hl,de
 222+ A362 38 02       >				   jr	c,1F
 222+ A364 ED 52       >				   sbc	hl,de
 222+ A366             >1:
 223+ A366                                      BCDIVDE_Iteration
 223+ A366 17          >				   rla
 223+ A367 ED 6A       >				   adc	hl,hl
 223+ A369 19          >				   add	hl,de
 223+ A36A 38 02       >				   jr	c,1F
 223+ A36C ED 52       >				   sbc	hl,de
 223+ A36E             >1:
 224+ A36E 17                                   rla
 225+ A36F 4F                                   ld c,a
 226+ A370 C9                                   ret
 227+ A371
 228+ A371              ;Inputs:
 229+ A371              ;     DE,BC are 8.8 Fixed Point numbers
 230+ A371              ;Outputs:
 231+ A371              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 232+ A371              ;if DE is 0 : 122cc or 136cc if BC is negative
 233+ A371              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 234+ A371              ;Otherwise:
 235+ A371              ;min: 1107cc
 236+ A371              ;max: 1319cc
 237+ A371              ;avg: 1201cc
 238+ A371 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 239+ A372 AA                                   xor d
 240+ A373 F5                                   push af   ;sign bit is the result sign bit
 241+ A374              ; Now make sure the inputs are positive
 242+ A374 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 243+ A375 F2 7E A3                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 244+ A378 AF                                   xor a
 245+ A379 91                                   sub c
 246+ A37A 4F                                   ld c,a
 247+ A37B 9F                                   sbc a,a
 248+ A37C 90                                   sub b
 249+ A37D 47                                   ld b,a
 250+ A37E 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 251+ A37F B2                                   or d
 252+ A380 FA 89 A3                             jp m,BC_Div_DE_88_lbl2
 253+ A383 AF                                   xor a
 254+ A384 93                                   sub e
 255+ A385 5F                                   ld e,a
 256+ A386 9F                                   sbc a,a
 257+ A387 92                                   sub d
 258+ A388 57                                   ld d,a
 259+ A389 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 260+ A38A 28 1D                                jr z,div_fixed88_overflow
 261+ A38C 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 262+ A38E 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 263+ A38F 83                                   add a,e
 264+ A390 7A                                   ld a,d
 265+ A391 8C                                   adc a,h
 266+ A392 38 15                                jr c,div_fixed88_overflow
 267+ A394 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 268+ A395 79                                   ld a,c
 269+ A396 CD B1 A3                             call div_fixed88_sub
 270+ A399 4F                                   ld c,a
 271+ A39A 78                                   ld a,b      ;A is now 0
 272+ A39B CD B1 A3                             call div_fixed88_sub
 273+ A39E 51                                   ld d,c
 274+ A39F 5F                                   ld e,a
 275+ A3A0 F1                                   pop af
 276+ A3A1 F0                                   ret p
 277+ A3A2 AF                                   xor a
 278+ A3A3 93                                   sub e
 279+ A3A4 5F                                   ld e,a
 280+ A3A5 9F                                   sbc a,a
 281+ A3A6 92                                   sub d
 282+ A3A7 57                                   ld d,a
 283+ A3A8 C9                                   ret
 284+ A3A9
 285+ A3A9 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 286+ A3AC F1                                   pop af
 287+ A3AD F0                                   ret p
 288+ A3AE 13                                   inc de
 289+ A3AF 1C                                   inc e
 290+ A3B0 C9                                   ret
 291+ A3B1
 292+ A3B1              ;min: 456cc
 293+ A3B1              ;max: 536cc
 294+ A3B1              ;avg: 496cc
 295+ A3B1 06 08        div_fixed88_sub:        ld b,8
 296+ A3B3 17           BC_Div_DE_88_lbl3:      rla
 297+ A3B4 ED 6A                                adc hl,hl
 298+ A3B6 19                                   add hl,de
 299+ A3B7 38 02                                jr c,$+4
 300+ A3B9 ED 52                                sbc hl,de
 301+ A3BB 10 F6                                djnz BC_Div_DE_88_lbl3
 302+ A3BD 8F                                   adc a,a
 303+ A3BE C9                                   ret
 304+ A3BF
# file closed: ./Maths/asm_divide.asm
 901  A3BF                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ A3BF              asm_tis2:
   2+ A3BF              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ A3BF              ; ">DOES NOT DO SIGNED YET"
   4+ A3BF F5           	push af
   5+ A3C0 E6 7F            and SignMask8Bit
   6+ A3C2 57           	ld d,a				;; d = A
   7+ A3C3 3A D8 93     	ld a,(varQ)
   8+ A3C6 5F           	ld e,a
   9+ A3C7 7A           	ld a,d
  10+ A3C8 BB           	cp e
  11+ A3C9 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ A3CB 1E 60        	ld e, 96
  13+ A3CD ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ A3CF EB           	ex de,hl
  15+ A3D0 3A D8 93     	ld a,(varQ)
  16+ A3D3 4F           	ld c,a
  17+ A3D4 CD AC A2     	call asm_div16
  18+ A3D7 F1           	pop af
  19+ A3D8 E6 80        	and $80
  20+ A3DA B5           	or l
  21+ A3DB C9           	ret
  22+ A3DC              .tis2_set96:
  23+ A3DC F1           	pop af
  24+ A3DD E6 80        	and $80
  25+ A3DF F6 96        	or $96
  26+ A3E1 C9           	ret
  27+ A3E2
  28+ A3E2
  29+ A3E2              asm_unit_vector:
  30+ A3E2              squareregfx:
  31+ A3E2 3A 74 C0     	ld a,(UBnkXScaled)
  32+ A3E5 57           	ld d,a
  33+ A3E6 5F           	ld e,a
  34+ A3E7 ED 30        	mul
  35+ A3E9 EB           	ex de,hl
  36+ A3EA              squareregfy:
  37+ A3EA 3A 76 C0     	ld a, (UBnkYScaled)
  38+ A3ED 57           	ld d,a
  39+ A3EE 5F           	ld e,a
  40+ A3EF ED 30        	mul
  41+ A3F1 19           	add hl,de
  42+ A3F2              squareregfz:
  43+ A3F2 3A 78 C0     	ld a, (UBnkZScaled)
  44+ A3F5 57           	ld d,a
  45+ A3F6 5F           	ld e,a
  46+ A3F7 ED 30        	mul
  47+ A3F9 19           	add hl,de
  48+ A3FA EB           	ex de,hl			; de de to number to root
  49+ A3FB              hlequsquareroot:
  50+ A3FB CD AF A1     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ A3FE E5           	push hl				; save it for work 3 copies
  52+ A3FF E5           	push hl				; save it for work
  53+ A400 E5           	push hl				; save it for work
  54+ A401              normfx:
  55+ A401 3A 74 C0     	ld a,(UBnkXScaled)
  56+ A404 E1           	pop hl				; get copy #1
  57+ A405 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ A406 4F           	ld c,a
  59+ A407 CD BF A3     	call asm_tis2
  60+ A40A 32 74 C0     	ld (UBnkXScaled),a
  61+ A40D              normfy:
  62+ A40D 3A 76 C0     	ld a,(UBnkYScaled)
  63+ A410 E1           	pop hl				; get copy #2
  64+ A411 7D           	ld a,l
  65+ A412 4F           	ld c,a
  66+ A413 CD BF A3     	call asm_tis2
  67+ A416 32 76 C0     	ld (UBnkYScaled),a
  68+ A419              normfz:
  69+ A419 3A 78 C0     	ld a,(UBnkZScaled)
  70+ A41C E1           	pop hl				; get copy #2
  71+ A41D 7D           	ld a,l
  72+ A41E 4F           	ld c,a
  73+ A41F CD BF A3     	call asm_tis2
  74+ A422 32 78 C0     	ld (UBnkZScaled),a
  75+ A425              asm_unit_vector_end:
  76+ A425 C9           	ret
  77+ A426
# file closed: ./Maths/asm_unitvector.asm
 902  A426                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ A426              compare16HLDE:
   2+ A426              ; Input:
   3+ A426              ;       HL = 1st value
   4+ A426              ;       DE = 2nd value
   5+ A426              ; Output:
   6+ A426              ;       CF, ZF = results of comparison:
   7+ A426              ;
   8+ A426              ;               CF      ZF      Result
   9+ A426              ;               -----------------------------------
  10+ A426              ;               0       0       HL > DE
  11+ A426              ;               0       1       HL == DE
  12+ A426              ;               1       0       HL < DE
  13+ A426              ;               1       1       Impossible
  14+ A426              ;
  15+ A426 E5           		push    hl
  16+ A427 A7           		and     a
  17+ A428 ED 52        		sbc     hl,de
  18+ A42A E1           		pop     hl
  19+ A42B C9           		ret
  20+ A42C
# file closed: ./Maths/compare16.asm
 903  A42C                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ A42C              ;;----------------------------------------------------------------------------------------------------------------------
   2+ A42C              ;; 16-bit negate
   3+ A42C              negate16:
   4+ A42C              negate16hl:
   5+ A42C                      ; Input:
   6+ A42C                      ;       HL = value
   7+ A42C                      ; Output:
   8+ A42C                      ;       HL = -value
   9+ A42C                      ; Destroys:
  10+ A42C                      ;       AF
  11+ A42C                      ;
  12+ A42C AF           	xor 	a
  13+ A42D 95           	sub 	l
  14+ A42E 6F           	ld 		l,a
  15+ A42F 9F           	sbc 	a,a
  16+ A430 94           	sub 	h
  17+ A431 67           	ld 		h,a
  18+ A432 C9           	ret
  19+ A433
  20+ A433              negate16de:
  21+ A433 AF           	xor 	a
  22+ A434 93           	sub 	e
  23+ A435 5F           	ld 		e,a
  24+ A436 9F           	sbc 	a,a
  25+ A437 92           	sub 	d
  26+ A438 57           	ld 		d,a
  27+ A439 C9           	ret
  28+ A43A
  29+ A43A              negate16bc:
  30+ A43A AF           	xor 	a
  31+ A43B 91           	sub 	c
  32+ A43C 4F           	ld 		c,a
  33+ A43D 9F           	sbc 	a,a
  34+ A43E 90           	sub 	b
  35+ A43F 47           	ld 		b,a
  36+ A440 C9           	ret
  37+ A441
  38+ A441
  39+ A441              macronegate16hl:	MACRO
  40+ A441 ~            					xor 	a
  41+ A441 ~            					sub 	l
  42+ A441 ~            					ld 		l,a
  43+ A441 ~            					sbc 	a,a
  44+ A441 ~            					sub 	h
  45+ A441 ~            					ld 		h,a
  46+ A441              					ENDM
  47+ A441
  48+ A441              macronegate16de:	MACRO
  49+ A441 ~            					xor 	a
  50+ A441 ~                                sub 	e
  51+ A441 ~                                ld 		e,a
  52+ A441 ~                                sbc 	a,a
  53+ A441 ~                                sub 	d
  54+ A441 ~                                ld 		d,a
  55+ A441              					ENDM
  56+ A441              macronegate16bc:	MACRO
  57+ A441 ~            					xor 	a
  58+ A441 ~                                sub 	c
  59+ A441 ~                                ld 		c,a
  60+ A441 ~                                sbc 	a,a
  61+ A441 ~                                sub 	b
  62+ A441 ~                                ld 		b,a
  63+ A441              					ENDM
  64+ A441
  65+ A441              macronegate16ix:	MACRO
  66+ A441 ~            					xor 	a
  67+ A441 ~                                sub 	ixl
  68+ A441 ~                                ld 		ixl,a
  69+ A441 ~                                sbc 	a,a
  70+ A441 ~                                sub 	ixh
  71+ A441 ~                                ld 		ixh,a
  72+ A441              					ENDM
# file closed: ./Maths/negate16.asm
 904  A441                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ A441 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ A443                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ A443 BA          >                        cp     d
   2+ A444 D2 59 A4    >                        jp		nc,TISXAccGTEQ
   3+ A447 4F                                   ld			c,a
   4+ A448 CD 9E A2                             call		asm_div8
   5+ A44B 79                                   ld			a,c							; a = result
   6+ A44C CB 3F                                srl			a							; result / 4
   7+ A44E 47                                   ld			b,a							; t = t /4
   8+ A44F CB 3F                                srl			a							; result / 8
   9+ A451 80                                   add			a,b							; result /8 + result /4
  10+ A452 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ A453 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ A455 E6 80                                and			$80							; recover sign only
  13+ A457 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ A458 C9                                   ret
  15+ A459              TISXAccGTEQ:
  16+ A459              ;TI4:										;\ clean to +/- unity
  17+ A459 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ A45B E6 80                                and			$80							; copy of Acc
  19+ A45D F6 60                                or			$60							; unity
  20+ A45F C9                                   ret
  21+ A460
  22+ A460
  23+ A460
  24+ A460
  25+ A460              normaliseXX1596fast:
  26+ A460                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ A460 3A 74 C0     	ld		a,(XX15)		    ; XX15+0
  28+ A463 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ A465 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ A467              N96SQX:
  31+ A467              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ A467 5F          >			ld	e,a
  31+ A468 57          >			ld  d,a
  31+ A469 ED 30       >			mul
  32+ A46B 62           	ld		h,d					; h == varR d = varO e= varA
  33+ A46C 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ A46D              N96SQY:
  35+ A46D 3A 75 C0     	ld		a,(XX15+1)
  36+ A470 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ A472 E6 7F        	and		SignMask8Bit                 ; = abs
  38+ A474              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ A474 5F          >			ld	e,a
  38+ A475 57          >			ld  d,a
  38+ A476 ED 30       >			mul
  39+ A478 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ A479              N96SQZ:
  41+ A479 3A 76 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ A47C FD 67        	ld		iyh,a               ; iyh = signed
  43+ A47E E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ A480              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ A480 5F          >			ld	e,a
  44+ A481 57          >			ld  d,a
  44+ A482 ED 30       >			mul
  45+ A484              N96SQADD:
  46+ A484 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ A485 EB           	ex		de,hl				; hl => de ready for square root
  48+ A486              N96SQRT:
  49+ A486 CD AF A1     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ A489              N96NORMX:
  51+ A489 3A 74 C0     	ld		a,(XX15+0)
  52+ A48C E6 7F        	and		SignMask8Bit
  53+ A48E 4F           	ld		c,a
  54+ A48F 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ A490 CD 6D A6     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ A493 47           	ld		b,a				;++SGN
  57+ A494 DD 7C        	ld		a,ixh			;++SGN
  58+ A496 E6 80        	and		$80				;++SGN
  59+ A498 B0           	or		b				;++SGN
  60+ A499 32 74 C0     	ld		(XX15+0),a
  61+ A49C              N96NORMY:
  62+ A49C 3A 75 C0     	ld		a,(XX15+1)
  63+ A49F E6 7F        	and		SignMask8Bit
  64+ A4A1 4F           	ld		c,a
  65+ A4A2 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ A4A3 CD 6D A6     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ A4A6 47           	ld		b,a				;++SGN
  68+ A4A7 DD 7D        	ld		a,ixl			;++SGN
  69+ A4A9 E6 80        	and		$80				;++SGN
  70+ A4AB B0           	or		b				;++SGN
  71+ A4AC 32 75 C0     	ld		(XX15+1),a
  72+ A4AF              N96NORMZ:
  73+ A4AF 3A 76 C0     	ld		a,(XX15+2)
  74+ A4B2 E6 7F        	and		SignMask8Bit
  75+ A4B4 4F           	ld		c,a
  76+ A4B5 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ A4B6 CD 6D A6     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ A4B9 47           	ld		b,a				;++SGN
  79+ A4BA FD 7C        	ld		a,iyh			;++SGN
  80+ A4BC E6 80        	and		$80				;++SGN
  81+ A4BE B0           	or		b				;++SGN
  82+ A4BF 32 76 C0     	ld		(XX15+2),a
  83+ A4C2 C9           	ret
  84+ A4C3
  85+ A4C3              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  86+ A4C3 3A 74 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  87+ A4C6                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  87+ A4C6 5F          >			ld	e,a
  87+ A4C7 57          >			ld  d,a
  87+ A4C8 ED 30       >			mul
  88+ A4CA 7A                                   ld		a,d
  89+ A4CB 32 D9 93                             ld		(varR),a			; R	 \ hi sum later use b
  90+ A4CE 7B                                   ld		a,e
  91+ A4CF 32 D8 93                             ld		(varQ),a			; Q	 \ lo sum later use c
  92+ A4D2 32 7D 93                             ld		(varP),a			; P	 \ lo sum later just drop
  93+ A4D5 3A 75 C0                             ld		a,(XX15+1)
  94+ A4D8                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  94+ A4D8 5F          >			ld	e,a
  94+ A4D9 57          >			ld  d,a
  94+ A4DA ED 30       >			mul
  95+ A4DC 7A                                   ld		a,d
  96+ A4DD 32 F8 93                             ld		(varT),a			; T	 \ hi sum
  97+ A4E0 7B                                   ld		a,e
  98+ A4E1 32 7D 93                             ld		(varP),a			; P	 \ lo sum
  99+ A4E4 21 D8 93                             ld		hl,varQ
 100+ A4E7 8E                                   adc		a,(hl)				; +Q
 101+ A4E8 32 D8 93                             ld		(varQ),a			; =>Q
 102+ A4EB 3A F8 93                             ld		a,(varT)			;
 103+ A4EE 21 D9 93                             ld		hl,varR
 104+ A4F1 8E                                   adc		a,(hl)				;  R
 105+ A4F2 32 D9 93                             ld		(varR),a			; R
 106+ A4F5 3A 76 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 107+ A4F8                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 107+ A4F8 5F          >			ld	e,a
 107+ A4F9 57          >			ld  d,a
 107+ A4FA ED 30       >			mul
 108+ A4FC 7A                                   ld		a,d
 109+ A4FD 32 F8 93                             ld		(varT),a			; T	 \ hi sum
 110+ A500 7B                                   ld		a,e
 111+ A501 32 7D 93                             ld		(varP),a			; P	 \ lo sum
 112+ A504 21 D8 93                             ld		hl,varQ
 113+ A507 8E                                   adc		a,(hl)				; +Q
 114+ A508 32 D8 93                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 115+ A50B 3A F8 93                             ld		a,(varT)			; T temp Hi
 116+ A50E 21 D9 93                             ld		hl,varR
 117+ A511 8E                                   adc		a,(hl)				; +R
 118+ A512 32 D9 93                             ld		(varR),a			; R
 119+ A515 CD D2 A1                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 120+ A518 3A 74 C0                             ld		a,(XX15+0)
 121+ A51B CD 67 A6                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 122+ A51E 32 74 C0                             ld		(XX15+0),a
 123+ A521 3A 75 C0                             ld		a,(XX15+1)
 124+ A524 CD 67 A6                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 125+ A527 32 75 C0                             ld		(XX15+1),a
 126+ A52A 3A 75 C0                             ld		a,(XX15+1)
 127+ A52D CD 67 A6                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 128+ A530 32 75 C0                             ld		(XX15+1),a
 129+ A533 C9                                   ret
 130+ A534
 131+ A534
# file closed: ./Maths/normalise96.asm
 905  A534                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ A534              ;Number in hl to decimal ASCII
   2+ A534              ;Thanks to z80 Bits
   3+ A534              ;inputs:	hl = number to ASCII
   4+ A534              ;example: hl=300 outputs '00300'
   5+ A534              ;destroys: af, bc, hl, de used
   6+ A534              DispHLtoDE:
   7+ A534              ; "DispHL, writes HL to DE address"
   8+ A534 01 F0 D8     	ld	bc,-10000
   9+ A537 CD 4D A5     	call	Num1
  10+ A53A 01 18 FC     	ld	bc,-1000
  11+ A53D CD 4D A5     	call	Num1
  12+ A540 01 9C FF     	ld	bc,-100
  13+ A543 CD 4D A5     	call	Num1
  14+ A546 0E F6        	ld	c,-10
  15+ A548 CD 4D A5     	call	Num1
  16+ A54B 0E FF        	ld	c,-1
  17+ A54D              Num1:
  18+ A54D 3E 2F        	ld	a,'0'-1
  19+ A54F              .Num2:
  20+ A54F 3C           	inc	a
  21+ A550 09           	add	hl,bc
  22+ A551 38 FC        	jr	c,.Num2
  23+ A553 ED 42        	sbc	hl,bc
  24+ A555 12           	ld	(de),a
  25+ A556 13           	inc	de
  26+ A557 C9           	ret
  27+ A558
  28+ A558              DispAtoDE:
  29+ A558 26 00        	ld h,0
  30+ A55A 6F           	ld l,a
  31+ A55B C3 34 A5     	jp DispHLtoDE
  32+ A55E
  33+ A55E              DispPriceAtoDE:
  34+ A55E 26 00        	ld h,0
  35+ A560 6F           	ld l,a
  36+ A561 01 9C FF     	ld	bc,-100
  37+ A564 CD 74 A5     	call	.NumLeadBlank1
  38+ A567 0E F6        	ld	c,-10
  39+ A569 CD 4D A5     	call	Num1
  40+ A56C 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ A56E 12           	ld		(de),a					; we can optimse that later TODO
  42+ A56F 13           	inc		de						; with just an inc De
  43+ A570 0E FF        	ld	c,-1
  44+ A572 18 D9        	jr		Num1
  45+ A574              .NumLeadBlank1:
  46+ A574 3E 2F        	ld	a,'0'-1
  47+ A576              .NumLeadBlank2:
  48+ A576 3C           	inc	a
  49+ A577 09           	add	hl,bc
  50+ A578 38 FC        	jr	c,.NumLeadBlank2
  51+ A57A FE 30        	cp	'0'
  52+ A57C 20 02        	jr	nz,.DontBlank
  53+ A57E              .Blank:
  54+ A57E 3E 20        	ld	a,' '
  55+ A580              .DontBlank:
  56+ A580 ED 42        	sbc	hl,bc
  57+ A582 12           	ld	(de),a
  58+ A583 13           	inc	de
  59+ A584 C9           	ret
  60+ A585
  61+ A585              DispQtyAtoDE:
  62+ A585 FE 00        	cp	0
  63+ A587 28 23        	jr	z,.NoStock
  64+ A589 26 00        	ld h,0
  65+ A58B 6F           	ld l,a
  66+ A58C 01 9C FF     	ld	bc,-100
  67+ A58F CD 9B A5     	call	.NumLeadBlank1
  68+ A592 0E F6        	ld	c,-10
  69+ A594 CD 9B A5     	call	.NumLeadBlank1
  70+ A597 0E FF        	ld	c,-1
  71+ A599 18 B2        	jr		Num1
  72+ A59B              .NumLeadBlank1:
  73+ A59B 3E 2F        	ld	a,'0'-1
  74+ A59D              .NumLeadBlank2:
  75+ A59D 3C           	inc	a
  76+ A59E 09           	add	hl,bc
  77+ A59F 38 FC        	jr	c,.NumLeadBlank2
  78+ A5A1 FE 30        	cp	'0'
  79+ A5A3 20 02        	jr	nz,.DontBlank
  80+ A5A5              .Blank:
  81+ A5A5 3E 20        	ld	a,' '
  82+ A5A7              .DontBlank:
  83+ A5A7 ED 42        	sbc	hl,bc
  84+ A5A9 12           	ld	(de),a
  85+ A5AA 13           	inc	de
  86+ A5AB C9           	ret
  87+ A5AC              .NoStock:
  88+ A5AC 3E 20        	ld	a,' '
  89+ A5AE 12           	ld	(de),a
  90+ A5AF 13           	inc	de
  91+ A5B0 12           	ld	(de),a
  92+ A5B1 13           	inc	de
  93+ A5B2 3E 2D        	ld	a,'-'
  94+ A5B4 12           	ld	(de),a
  95+ A5B5 13           	inc de
  96+ A5B6 C9           	ret
  97+ A5B7
  98+ A5B7
  99+ A5B7              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ A5B7              ;### Input      DE,IX=32bit value, IY=destination address
 101+ A5B7              ;### Output     IY=last char in destination string
 102+ A5B7              ;### Destroyed AF,BC,DE,HL,IX
 103+ A5B7 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ A5BB 0A 00 00 00
 103+ A5BF 64 00 00 00
 103+ A5C3 E8 03 00 00
 103+ A5C7 10 27 00 00
 104+ A5CB A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ A5CF 40 42 0F 00
 104+ A5D3 80 96 98 00
 104+ A5D7 00 E1 F5 05
 104+ A5DB 00 CA 9A 3B
 105+ A5DF 00 00 00 00  clcn32z ds 4
 106+ A5E3
 107+ A5E3              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ A5E3 CD F2 A5     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ A5E6 FD 7E 00                             ld      a,(IY+0)
 110+ A5E9 FD 77 01                             ld      (IY+1),a
 111+ A5EC 3E 2E                                ld      a,"."
 112+ A5EE FD 77 00                             ld      (IY+0),a
 113+ A5F1 C9                                   ret
 114+ A5F2
 115+ A5F2 DD 22 DF A5  DispDEIXtoIY:           ld (clcn32z),ix
 116+ A5F6 ED 53 E1 A5                          ld (clcn32z+2),de
 117+ A5FA DD 21 DB A5                          ld ix,clcn32t+36
 118+ A5FE 06 09                                ld b,9
 119+ A600 0E 00                                ld c,0
 120+ A602 3E 30        .clcn321:               ld a,'0'
 121+ A604 B7                                   or a
 122+ A605 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ A608 DD 56 01                             ld d,(ix+1)
 124+ A60B 2A DF A5                             ld hl,(clcn32z)
 125+ A60E ED 52                                sbc hl,de
 126+ A610 22 DF A5                             ld (clcn32z),hl
 127+ A613 DD 5E 02                             ld e,(ix+2)
 128+ A616 DD 56 03                             ld d,(ix+3)
 129+ A619 2A E1 A5                             ld hl,(clcn32z+2)
 130+ A61C ED 52                                sbc hl,de
 131+ A61E 22 E1 A5                             ld (clcn32z+2),hl
 132+ A621 38 04                                jr c,.clcn325
 133+ A623 0C                                   inc c
 134+ A624 3C                                   inc a
 135+ A625 18 DE                                jr .clcn322
 136+ A627 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ A62A DD 56 01                             ld d,(ix+1)
 138+ A62D 2A DF A5                             ld hl,(clcn32z)
 139+ A630 19                                   add hl,de
 140+ A631 22 DF A5                             ld (clcn32z),hl
 141+ A634 DD 5E 02                             ld e,(ix+2)
 142+ A637 DD 56 03                             ld d,(ix+3)
 143+ A63A 2A E1 A5                             ld hl,(clcn32z+2)
 144+ A63D ED 5A                                adc hl,de
 145+ A63F 22 E1 A5                             ld (clcn32z+2),hl
 146+ A642 11 FC FF                             ld de,-4
 147+ A645 DD 19                                add ix,de
 148+ A647 0C                                   inc c
 149+ A648 0D                                   dec c
 150+ A649 28 05                                jr z,.clcn323
 151+ A64B FD 77 00                             ld (iy+0),a
 152+ A64E FD 23                                inc iy
 153+ A650 10 B0        .clcn323:               djnz .clcn321
 154+ A652 3A DF A5                             ld a,(clcn32z)
 155+ A655 C6 30                                add A,'0'
 156+ A657 FD 77 00                             ld (iy+0),a
 157+ A65A FD 36 01 00                          ld (iy+1),0
 158+ A65E C9                                   ret
 159+ A65F
# file closed: ./Maths/binary_to_decimal.asm
 906  A65F              ;INCLUDE "badd_ll38.asm"
 907  A65F              ;;INCLUDE "XX12equXX15byXX16.asm"
 908  A65F                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ A65F
   2+ A65F              ; USES 			A DE BC
   3+ A65F              ; DOES NOT USE 	HL
   4+ A65F              TIS2962C:		; two's compliment entry point, exits not 2's compliment
   5+ A65F CB 7F        	bit			7,a
   6+ A661 28 04        	jr			z,AequAdivQmul96
   7+ A663 ED 44        	neg										; revers 2s'c and just set neg bit
   8+ A665 CB FF        	set			7,a
   9+ A667              ; Note negative numbers are bit 7 set not 2's compliment
  10+ A667              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  11+ A667              TIS2:
  12+ A667 4F           	ld			c,a							; copy of Acc
  13+ A668 3A D8 93     	ld			a,(varQ)
  14+ A66B 57           	ld			d,a							; d = varQ
  15+ A66C 79           	ld			a,c							; recover a
  16+ A66D              AequAdivDmul96:
  17+ A66D 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  18+ A66E E6 7F        	and			SignMask8Bit				; ignore sign
  19+ A670              	JumpIfAGTENusng d, TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  19+ A670 BA          >                        cp     d
  19+ A671 D2 91 A6    >                        jp		nc,TIS2AccGTEQ
  20+ A674 06 FE        	ld			b,$FE						; division roll (replaced varT)
  21+ A676              TIS2RollTLoop:									; .TIL2	; roll T
  22+ A676 CB 27        	sla			a
  23+ A678              	JumpIfALTNusng d,TIS2SkipSub            ; a < d so don;t subtract
  23+ A678 BA          >                        cp      d
  23+ A679 DA 97 A6    >                        jp		c,TIS2SkipSub
  24+ A67C 9A           	sbc			a,d							; do subtraction with carry
  25+ A67D 37           	scf
  26+ A67E CB 10        	rl			b							; T rolled left to push bit out the end
  27+ A680 38 F4        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  28+ A682              TIS2SKIPCont:
  29+ A682 78           	ld			a,b							; T
  30+ A683 CB 3F        	srl			a							; result / 2
  31+ A685 CB 3F        	srl			a							; result / 4
  32+ A687 47           	ld			b,a							; t = t /4
  33+ A688 CB 3F        	srl			a							; result / 8
  34+ A68A 80           	add			a,b							; result /8 + result /4
  35+ A68B 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  36+ A68C 79           	ld			a,c							; copy of Acc to look at sign bit
  37+ A68D E6 80        	and			$80							; recover sign only
  38+ A68F B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  39+ A690 C9           	ret
  40+ A691              TIS2AccGTEQ:
  41+ A691              ;TI4:										;\ clean to +/- unity
  42+ A691 79           	ld			a,c
  43+ A692 E6 80        	and			$80							; copy of Acc
  44+ A694 F6 60        	or			$60							; unity
  45+ A696 C9           	ret
  46+ A697              TIS2SkipSub:
  47+ A697 B7           	or			a
  48+ A698 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ A69A 38 DA        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ A69C C3 82 A6     	jp			TIS2SKIPCont
  51+ A69F
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 909  A69F                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ A69F              fmltu:
   2+ A69F              AequAmulQdiv256:
   3+ A69F              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ A69F 57           	ld	d,a
   5+ A6A0 3A D8 93     	ld	a,(varQ)
   6+ A6A3 5F           	ld	e,a
   7+ A6A4 ED 30        	mul
   8+ A6A6 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ A6A7 C9           	ret
  10+ A6A8
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 910  A6A8                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ A6A8              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ A6A8              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ A6A8 21 B1 96     		ld		hl,varDustZ
   4+ A6AB FD 7D        		ld		a,iyl
   5+ A6AD ED 31        		add		hl,a
   6+ A6AF 7E           		ld		a,(hl)
   7+ A6B0 C3 BC A6     		jp		DV41
   8+ A6B3              DV42:										; travel step of dust particle front/rear
   9+ A6B3 21 B1 96     		ld		hl,varDustZ
  10+ A6B6 3A 07 93     		ld		a,(regY)
  11+ A6B9 ED 31        		add		hl,a
  12+ A6BB 7E           		ld		a,(hl)						; a = SZ[y]
  13+ A6BC              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ A6BC 5F           		ld		e,a							; using E as Q var replacement
  15+ A6BD 3A D4 93     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ A6C0              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ A6C0 06 08        		ld		b,8							; counter
  18+ A6C2 CB 27        		sla		a							;
  19+ A6C4 57           		ld		d,a							; use d for - p = delta * 2
  20+ A6C5 AF           		xor		a
  21+ A6C6              DVL4:										; counter x loop (b reg)
  22+ A6C6 CB 17        		rl		a							; a = a * 2
  23+ A6C8 38 03        		jr		c,DV8						; jump on carry
  24+ A6CA BB           		cp		e							; var Q
  25+ A6CB 38 02        		jr		c,DV5						; skip subtraction
  26+ A6CD              DV8:
  27+ A6CD 9B           		sbc		a,e							; a = a - q (with carry)
  28+ A6CE 37           		scf									;  carry gets set
  29+ A6CF              DV5:										; skipped subtraction
  30+ A6CF CB 12        		rl		d							; d (P hi)
  31+ A6D1 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ A6D3              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ A6D3              ; Note we are not going to call LL28+4 but inline code here:
  34+ A6D3 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ A6D5 4F           		ld		c,a							; use c as R var
  36+ A6D6              .RollRemainder:
  37+ A6D6 CB 27        		sla		a
  38+ A6D8 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ A6DA B8           		cp		b							; a < q?
  40+ A6DB 30 01        		jr		nc,.DontSBC
  41+ A6DD              .DoSBC:										; a is < q
  42+ A6DD 98           		sbc		a,b							; 	a -= q
  43+ A6DE              .DontSBC:
  44+ A6DE CB 11        		rl		c							; r << 1
  45+ A6E0 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ A6E2 79           		ld		a,c
  47+ A6E3 32 D9 93     		ld		(varR),a					; for backwards compat
  48+ A6E6 7A           		ld		a,d
  49+ A6E7 32 7D 93     		ld		(varP),a
  50+ A6EA C9           		ret									; R (c) left with remainder
  51+ A6EB              .Reduce:									; a geneated a carry
  52+ A6EB 98           		sbc		a,b							; a = a - (q +1)
  53+ A6EC 37           		scf									; set carry flag for rl
  54+ A6ED CB 11        		rl		c							; r << 1 briging in carry
  55+ A6EF 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ A6F1 79           		ld		a,c
  57+ A6F2 32 D9 93     		ld		(varR),a					; for backwards compat
  58+ A6F5 7A           		ld		a,d
  59+ A6F6 32 7D 93     		ld		(varP),a
  60+ A6F9 C9           		ret
  61+ A6FA              .AnswerTooBig:
  62+ A6FA 0E FF        		ld		c,$FF						; arse its too big
  63+ A6FC 79           		ld		a,c
  64+ A6FD 32 D9 93     		ld		(varR),a					; for backwards compat
  65+ A700 7A           		ld		a,d
  66+ A701 32 7D 93     		ld		(varP),a
  67+ A704 C9           		ret
  68+ A705
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 911  A705                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ A705
   2+ A705              asm_defmutl:
   3+ A705              AequDmulEdiv256usgn:
   4+ A705              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ A705 ED 30        	mul
   6+ A707 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ A708 C9           	ret
   8+ A709
   9+ A709
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 912  A709              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 913  A709              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 914  A709              ;INCLUDE "APequPmulX-MU11.asm"
 915  A709                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ A709              APequQmulA:
   2+ A709              asm_mult1:
   3+ A709              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ A709 FE 00        	cp	0
   5+ A70B 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ A70D 5F           	ld	e,a
   7+ A70E 3A D8 93     	ld	a,(varQ)
   8+ A711 57           	ld	d,a
   9+ A712 FE 00        	cp	0				; compare a
  10+ A714 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ A716 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ A717 E6 80        	and $80				; get the resultant sign and save into b
  13+ A719 47           	ld	b,a
  14+ A71A 7A           	ld	a,d
  15+ A71B E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ A71D 57           	ld	d,a
  17+ A71E 7B           	ld	a,e
  18+ A71F E6 7F        	and SignMask8Bit
  19+ A721 5F           	ld	e,a
  20+ A722 ED 30        	mul					; zxn de = d * e
  21+ A724 7B           	ld	a,e
  22+ A725 32 7D 93     	ld	(varP),a		; p = lo
  23+ A728 7A           	ld	a,d				; a = hi
  24+ A729 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ A72A 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ A72B C9           	ret
  27+ A72C              .mul0:
  28+ A72C AF           	xor	a
  29+ A72D 32 7D 93     	ld	(varP),a
  30+ A730 57           	ld	d,a
  31+ A731 5F           	ld  e,a
  32+ A732 C9           	ret
  33+ A733
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 916  A733                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ A733              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ A733              SAEquSRPlusAQ:
   3+ A733              ; Calculate the following between sign-magnitude numbers:
   4+ A733              ;   (S A) = (S R) + (A Q)
   5+ A733              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ A733              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ A733              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ A733              LL38:
   9+ A733              ;	ld		d,a
  10+ A733              ;	ld		a,(varQ)
  11+ A733              ;	ld		e,a
  12+ A733              ;	ld		a,(varS)
  13+ A733              ;	ld		h,a
  14+ A733              ;	ld		a,(varR)
  15+ A733              ;	ld		l,a
  16+ A733              ;	call	ADDHLDESignedv3
  17+ A733              ;	ld		a,h
  18+ A733              ;	ld		(varS),a
  19+ A733              ;	ld		a,l
  20+ A733              ;	ret
  21+ A733              ; calculation table
  22+ A733              ;   R     Q    Op            Sign calc
  23+ A733              ;	10    5    Add           +    sign same add R sign
  24+ A733              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ A733              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ A733              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ A733              ;   5    10    Add           +    sign same add R sign
  28+ A733              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ A733              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ A733              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ A733
  32+ A733              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ A733              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ A733              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ A733              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ A733
  37+ A733
  38+ A733              ; Calculate sign for Q from A and varS
  39+ A733 21 DA 93     	ld		hl,varS							;
  40+ A736 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ A737 FA 42 A7     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ A73A 3A D8 93     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ A73D 21 D9 93     	ld		hl,varR
  44+ A740 86           	add		a,(hl)							; a = Q + R
  45+ A741 C9           	ret										; Done carry set if overflow
  46+ A742              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ A742 3A D9 93     	ld		a,(varR)						; a = R
  48+ A745 21 D8 93     	ld		hl,varQ                         ; Q
  49+ A748              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ A748              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ A748 B7          >				or a
  51+ A749 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ A74A 38 01            jr      c,.LL39SignCorrection
  53+ A74C              ;--    jr      a,.LL39ResultZero
  54+ A74C              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ A74C              ;--	or		a								; Clear carry flag to say result is correct
  56+ A74C C9           	ret
  57+ A74D              .LL39SignCorrection:
  58+ A74D FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ A74F 28 0E            jr      z,.LL39ResultZero
  60+ A751 ED 44            neg                                     ; flip A 2'c value to positive
  61+ A753 08           	ex		af,af'							; save A temporarily
  62+ A754 3A DA 93     	ld		a,(varS)						; Flip Sign bit in varS
  63+ A757 EE 80        	xor		$80							    ;
  64+ A759 32 DA 93     	ld		(varS),a                        ; flip sign bit of a
  65+ A75C 08           	ex		af,af'                          ; get back a which is the result
  66+ A75D                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ A75D B7          >				or a
  67+ A75E C9           	ret
  68+ A75F              .LL39ResultZero:
  69+ A75F 32 DA 93         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ A762                  ClearCarryFlag                          ; clear carry
  70+ A762 B7          >				or a
  71+ A763 C9               ret
  72+ A764              ;--LL39SwapSubtraction:
  73+ A764              ;--	push	bc
  74+ A764              ;--	ld		b,a
  75+ A764              ;--	ld		a,(hl)
  76+ A764              ;--	sub		b
  77+ A764              ;--	pop		bc
  78+ A764              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ A764              ;--	ld		a,(varS)
  80+ A764              ;--	xor		$80
  81+ A764              ;--	ld		(varS),a
  82+ A764              ;--	ex		af,af'
  83+ A764              ;--	ret
  84+ A764
  85+ A764              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ A764              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ A764              ;;;;;   (S A) = (S R) + (A Q)
  88+ A764              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ A764              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ A764              ;;;;LL38:
  91+ A764              ;;;;; Calculate sign for Q from A and varS
  92+ A764              ;;;;	ld		hl,varS							;
  93+ A764              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ A764              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ A764              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ A764              ;;;;	ld		hl,varR
  97+ A764              ;;;;	add		a,(hl)							; a = Q + R
  98+ A764              ;;;;	ret										; Done
  99+ A764              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ A764              ;;;;	ld		hl,varQ                         ;
 101+ A764              ;;;;	ld		a,(hl)
 102+ A764              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ A764              ;;;;	ld		a,(varR)						;
 104+ A764              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ A764              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ A764              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ A764              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ A764              ;;;;	ret
 109+ A764              ;;;;.SignCorrection:
 110+ A764              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ A764              ;;;;	ex		af,af'							; save A temporarily
 112+ A764              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ A764              ;;;;	xor		$80							    ;
 114+ A764              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ A764              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ A764              ;;;;	ret
 117+ A764              ;;;;LL39Sub16Bit:
 118+ A764              ;;;;	ld		e,a
 119+ A764              ;;;;	ld		d,0
 120+ A764              ;;;;	ld		a,(varR)
 121+ A764              ;;;;	ld		l,a
 122+ A764              ;;;;	ld		h,0
 123+ A764              ;;;;	ClearCarryFlag
 124+ A764              ;;;;	sbc		hl,de
 125+ A764              ;;;;	jr		c,.SignCorrection16bit
 126+ A764              ;;;;	bit		7,h
 127+ A764              ;;;;	jr		z,.GoodToReturn
 128+ A764              ;;;;.Needtonegate:
 129+ A764              ;;;;	macronegate16hl
 130+ A764              ;;;;.GoodToReturn
 131+ A764              ;;;;	ld		a,l
 132+ A764              ;;;;	or		a
 133+ A764              ;;;;	ret
 134+ A764              ;;;;.SignCorrection16bit:
 135+ A764              ;;;;	macronegate16hl
 136+ A764              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ A764              ;;;;	xor		$80							    ;
 138+ A764              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ A764              ;;;;	ld		a,l
 140+ A764              ;;;;	ret
 141+ A764
 142+ A764
# file closed: ./Maths/Utilities/badd_ll38.asm
 917  A764                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ A764              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ A764              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ A764              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ A764
   5+ A764
   6+ A764              moveship4Yreg:
   7+ A764 3A 07 93     		ld		a,(regY)
   8+ A767 47           		ld		b,a
   9+ A768              moveship4breg:
  10+ A768              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ A768              MVS4PitchAlphaRollBeta:
  12+ A768              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ A768 3A 96 93     		ld		a,(ALPHA)					;  ALPHA
  14+ A76B 32 D8 93     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ A76E 21 0D C0     		ld		hl,UBnKxsgn
  16+ A771 78           		ld		a,b							; from
  17+ A772 ED 31        		add		hl,a
  18+ A774 7E           		ld		a,(hl)						; INWK+2,Y
  19+ A775 32 D9 93     		ld		(varR),a					; R  \ lo
  20+ A778 23           		inc		hl
  21+ A779 7E           		ld		a,(hl)						; INWK+3,Y
  22+ A77A 32 DA 93     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ A77D 2B           		dec		hl
  24+ A77E 2B           		dec		hl
  25+ A77F 2B           		dec		hl							;
  26+ A780 7E           		ld		a,(hl)						; INWK+0,Y
  27+ A781 32 7D 93     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ A784 23           		inc		hl
  29+ A785 7E           		ld		a,(hl)						; INWK+1,Y
  30+ A786 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ A788 CD A9 A0     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ A78B 23                   inc     hl
  33+ A78C 23                   inc     hl
  34+ A78D 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ A78E 2B                   dec     hl
  36+ A78F 3A 06 93             ld      a,(regX)
  37+ A792 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ A793 32 7D 93             ld      (varP),a                    ;  P
  39+ A796 2B                   dec     hl
  40+ A797 2B                   dec     hl
  41+ A798 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ A799 32 D9 93             ld      (varR),a                    ;  R	\ lo
  43+ A79C 23                   inc     hl
  44+ A79D 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ A79E 32 DA 93             ld      (varS),a                    ; S	\ hi
  46+ A7A1 23                   inc     hl
  47+ A7A2 23                   inc     hl
  48+ A7A3 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ A7A4 CD A9 A0             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ A7A7 2B                   dec     hl
  51+ A7A8 2B                   dec     hl
  52+ A7A9 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ A7AA 3A 06 93             ld      a,(regX)
  54+ A7AD 2B                   dec     hl
  55+ A7AE 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ A7AF 32 7D 93             ld      (varP),a                    ; P
  57+ A7B2 3A 88 93             ld      a,(BETA)                    ; BETA
  58+ A7B5 32 D8 93             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ A7B8 23                   inc     hl
  60+ A7B9 23                   inc     hl
  61+ A7BA 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ A7BB 32 D9 93             ld      (varR),a                    ; R	\ lo
  63+ A7BE 23                   inc     hl
  64+ A7BF 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ A7C0 32 DA 93             ld      (varS),a                    ; S	\ hi
  66+ A7C3 23                   inc     hl
  67+ A7C4 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ A7C5 32 7D 93             ld      (varP),a                    ; P	\ lo
  69+ A7C8 23                   inc     hl
  70+ A7C9 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ A7CA EE 80                xor     $80                         ; flip sign hi
  72+ A7CC CD A9 A0             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ A7CF 2B                   dec     hl
  74+ A7D0 2B                   dec     hl
  75+ A7D1 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ A7D2 3A 06 93             ld      a,(regX)
  77+ A7D5 2B                   dec     hl
  78+ A7D6 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ A7D7 32 7D 93             ld      (varP),a                    ; P
  80+ A7DA 23                   inc     hl
  81+ A7DB 23                   inc     hl
  82+ A7DC 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ A7DD 32 D9 93             ld      (varR),a                    ; R	\ lo
  84+ A7E0 23                   inc     hl
  85+ A7E1 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ A7E2 32 DA 93             ld      (varS),a                    ; S	\ hi
  87+ A7E5 2B                   dec     hl
  88+ A7E6 2B                   dec     hl
  89+ A7E7 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ A7E8 CD A9 A0             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ A7EB 23                   inc     hl
  92+ A7EC 23                   inc     hl
  93+ A7ED 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ A7EE 3A 06 93             ld      a,(regX)
  95+ A7F1 2B                   dec     hl
  96+ A7F2 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ A7F3 C9                   ret
  98+ A7F4
  99+ A7F4
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 918  A7F4              ;INCLUDE "MoveShip5-MVS5.asm"
 919  A7F4              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 920  A7F4              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 921  A7F4              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 922  A7F4                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ A7F4              ;;;LL28:
   2+ A7F4              ;;;    ld      c,a                         ;
   3+ A7F4              ;;;    ld      a,(varQ)                    ;
   4+ A7F4              ;;;    ld      b,a                         ;
   5+ A7F4              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ A7F4              ;;;RequAmul256divB:                        ;
   7+ A7F4              ;;;LL28Breg:
   8+ A7F4              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ A7F4              ;;;	cp		b							; Check A >= Q
  10+ A7F4              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ A7F4              ;;;.CalcRemainder:
  12+ A7F4              ;;;	ld		c, 	$FE						; set R to $FE
  13+ A7F4              ;;;.RollRemainder:
  14+ A7F4              ;;;	sla		a
  15+ A7F4              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ A7F4              ;;;	cp		b							; a < q?
  17+ A7F4              ;;;	jr		nc,.DontSBC
  18+ A7F4              ;;;.DoSBC:									; a is < q
  19+ A7F4              ;;;	sbc		a,b							; 	a -= q
  20+ A7F4              ;;;.DontSBC:
  21+ A7F4              ;;;	rl		c							; r << 1
  22+ A7F4              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ A7F4              ;;;    ld      a,c
  24+ A7F4              ;;;    ld      (varR),a
  25+ A7F4              ;;;	ret									; R (c) left with remainder
  26+ A7F4              ;;;.Reduce:								; a geneated a carry
  27+ A7F4              ;;;	sbc		a,b							; a = a - (q +1)
  28+ A7F4              ;;;	scf									; set carry flag for rl
  29+ A7F4              ;;;	rl		c							; r << 1 briging in carry
  30+ A7F4              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ A7F4              ;;;    ld      a,c
  32+ A7F4              ;;;    ld      (varR),a
  33+ A7F4              ;;;	ret
  34+ A7F4              ;;;.AnswerTooBig:
  35+ A7F4              ;;;	ld	    c,$FF							; arse its too big
  36+ A7F4              ;;;    ld      a,c
  37+ A7F4              ;;;    ld      (varR),a
  38+ A7F4              ;;;	ret
  39+ A7F4
  40+ A7F4              BCequAmul256DivC:
  41+ A7F4 59             ld    e,c
  42+ A7F5 67             ld    h,a
  43+ A7F6 2E 00          ld    l,0
  44+ A7F8              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ A7F8 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ A7F9 B7             or a                                   ; from this time on the carry is cleared
  47+ A7FA C8             ret z
  48+ A7FB 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ A7FE 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ A800              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ A800 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ A802 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ A803 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ A805 C9             ret
  55+ A806
  56+ A806              HL_Div_C:
  57+ A806              ; Integer divides HL by C
  58+ A806              ; Result in HL, remainder in A
  59+ A806              ; Clobbers F, B
  60+ A806 06 10                ld b,16
  61+ A808 AF                   xor a
  62+ A809              HL_Div_C_Loop:
  63+ A809 29                   add hl,hl
  64+ A80A 17                   rla
  65+ A80B B9                   cp c
  66+ A80C 38 02                jr c,HL_DivC_Skip
  67+ A80E 91                   sub c
  68+ A80F 2C                   inc l
  69+ A810              HL_DivC_Skip:
  70+ A810 10 F7                djnz HL_Div_C_Loop
  71+ A812 7D                   ld   a,l
  72+ A813 32 D9 93             ld  (varR),a
  73+ A816 C9                   ret
  74+ A817
  75+ A817
  76+ A817
  77+ A817              ; Entry point if varQ is populated with demoninator
  78+ A817              RequAmul256divQ:
  79+ A817              BFRDIV:
  80+ A817 F5           		push	af
  81+ A818 3A D8 93     		ld		a,(varQ)
  82+ A81B 4F           		ld		c,a
  83+ A81C F1           		pop		af
  84+ A81D FE 00        		cp		0
  85+ A81F CA 36 A8     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ A822              RequAmul256divC:
  87+ A822 2E 00        		ld		l,0
  88+ A824 67           		ld		h,a
  89+ A825              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ A825 06 10        		ld b,16
  91+ A827 AF           		xor a
  92+ A828              LOOPPOINT:
  93+ A828 29           		add hl,hl
  94+ A829 17           		rla
  95+ A82A B9           		cp c
  96+ A82B 38 02        		jr c,SKIPINCSUB
  97+ A82D 2C           		inc l
  98+ A82E 91           		sub c
  99+ A82F              SKIPINCSUB:
 100+ A82F 10 F7        		djnz LOOPPOINT
 101+ A831 7D           		ld		a,l
 102+ A832 32 D9 93     		ld 		(varR),a
 103+ A835 C9           		ret
 104+ A836              HLDIVC_0_BY:
 105+ A836 32 D9 93     		ld		(varR),a
 106+ A839 C9           		ret
 107+ A83A              ;	push	af
 108+ A83A              ;	ld		a,b
 109+ A83A              ;	ld		(varQ),a
 110+ A83A              ;	pop		af
 111+ A83A              ;RequAmul256divQ:
 112+ A83A              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ A83A              ;	ld		hl,varQ
 114+ A83A              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ A83A              ;	ld		b,$FE						; b = X
 116+ A83A              ;	ld		c,a							; c = R	div roll counter
 117+ A83A              ;LL31:									; roll R
 118+ A83A              ;	sla		a
 119+ A83A              ;	jr		c,LL29						; hop to Reduce
 120+ A83A              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ A83A              ;	sbc		a,(hl)						; a = a - Q
 122+ A83A              ;	rl		c							; rotate R left
 123+ A83A              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ A83A              ;	jr		LL2Good
 125+ A83A              ;LL29:									; Reduce
 126+ A83A              ;	sbc		a,(hl)
 127+ A83A              ;	scf
 128+ A83A              ;	rl		c							; roll a carry flag into R
 129+ A83A              ;	jr		c,LL31						;  loop R
 130+ A83A              ;	jr		LL2Good
 131+ A83A              ;LL2:
 132+ A83A              ;	ld		c,$FF
 133+ A83A              ;LL2Good:
 134+ A83A              ;	ld		a,c
 135+ A83A              ;	ld		(varR),a
 136+ A83A              ;	ret
 137+ A83A
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 923  A83A                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ A83A              RequAdivQ:
   2+ A83A              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ A83A              LL61:										; Handling division R=A/Q for case further down
   4+ A83A 4F           	ld		c,a								; c = A
   5+ A83B 3A D8 93     	ld		a,(varQ)						; test for divide by 0
   6+ A83E FE 00        	cp		0
   7+ A840 28 16        	jr		z,LL84							; divide by zero error
   8+ A842 57           	ld		d,a								; now we can do C/D
   9+ A843 06 08            ld b,8
  10+ A845 AF               xor a
  11+ A846              LL63:										; roll divide loop
  12+ A846 CB 21            sla c
  13+ A848 17               rla
  14+ A849 BA               cp d
  15+ A84A 38 02            jr c,LL64
  16+ A84C 0C               inc c
  17+ A84D 92               sub d
  18+ A84E              LL64:
  19+ A84E 10 F6            djnz LL63
  20+ A850 32 D7 93     	ld	(varU),a							; store remainder in U
  21+ A853 79           	ld	a,c
  22+ A854 32 D9 93     	ld	(varR),a							; store remainder in R
  23+ A857 C9               ret
  24+ A858              LL84:										; div error  R=U=#5
  25+ A858 3E 32        	ld		a,50
  26+ A85A 32 D9 93     	ld		(varR),a
  27+ A85D 32 D7 93     	ld		(varU),a
  28+ A860 C9           	ret
  29+ A861
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 924  A861              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
 925  A861                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ A861              asm_mult12:
   2+ A861              RSequQmulA:
   3+ A861              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ A861 CD 09 A7     	call APequQmulA
   5+ A864 08           	ex 	af,af'
   6+ A865 7A           	ld	a,d
   7+ A866 32 DA 93     	ld	(varS),a
   8+ A869 7B           	ld	a,e
   9+ A86A 32 D9 93     	ld	(varR),a
  10+ A86D 08           	ex 	af,af'
  11+ A86E C9           	ret
  12+ A86F
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 926  A86F              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 927  A86F                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ A86F              ;rotmap0xLo: DB	0				; INWK +9
   2+ A86F              ;rotmap0xHi: DB	0				; INWK +10
   3+ A86F              ;rotmat0yLo: DB	0				; INWK +11
   4+ A86F              ;rotmat0yHi: DB	0				; INWK +12
   5+ A86F              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ A86F              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ A86F              ;rotmap1xLo: DB	0				; INWK +15
   8+ A86F              ;rotmap1xHi:	DB	0				; INWK +16
   9+ A86F              ;rotmat1yLo:	DB	0				; INWK +17
  10+ A86F              ;rotmat1yHi:	DB	0				; INWK +18
  11+ A86F              ;rotmat1zLo:	DB	0				; INWK +19
  12+ A86F              ;rotmat1zHi:	DB	0				; INWK +20
  13+ A86F              ;rotmat2xLo: DB	0				; INWK +21
  14+ A86F              ;rotmat2xHi:	DB	0				; INWK +22
  15+ A86F              ;rotmat2yLo:	DB	0				; INWK +23
  16+ A86F              ;rotmat2yHi:	DB	0				; INWK +24
  17+ A86F              ;rotmat2zLo:	DB	0				; INWK +25
  18+ A86F              ;rotmat2zHi:	DB	0				; INWK +26
  19+ A86F              ;
  20+ A86F              ;rotmatFx	equ	rotmat0xHi
  21+ A86F              ;rotmatFy	equ	rotmat0yHi
  22+ A86F              ;rotmatFz	equ	rotmat0zHi
  23+ A86F              ;rotmatUx	equ	rotmat1xHi
  24+ A86F              ;rotmatUy	equ	rotmat1yHi
  25+ A86F              ;rotmatUz	equ	rotmat1zHi
  26+ A86F              ;
  27+ A86F              ;inwkarray			equ		INWK+10
  28+ A86F
  29+ A86F                  include "./Variables/CopyRotMattoXX15.asm"
# file opened: ././Variables/CopyRotMattoXX15.asm
   1++A86F              CopyRotMatNoseVtoXX15:
   2++A86F                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++A86F 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
   2++A872 32 74 C0    >               ld       (XX15VecX),a
   3++A875                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++A875 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
   3++A878 32 75 C0    >               ld       (XX15VecY),a
   4++A87B                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++A87B 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
   4++A87E 32 76 C0    >               ld       (XX15VecZ),a
   5++A881 C9                   ret
   6++A882
   7++A882              CopyRotMatRoofVtoXX15:
   8++A882                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++A882 3A 1B C0    >               ld       a,(UBnkrotmatRoofvX+1)
   8++A885 32 74 C0    >               ld       (XX15VecX),a
   9++A888                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++A888 3A 1D C0    >               ld       a,(UBnkrotmatRoofvY+1)
   9++A88B 32 75 C0    >               ld       (XX15VecY),a
  10++A88E                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++A88E 3A 1F C0    >               ld       a,(UBnkrotmatRoofvZ+1)
  10++A891 32 76 C0    >               ld       (XX15VecZ),a
  11++A894 C9                   ret
  12++A895
  13++A895              CopyRotMatSideVtoXX15:
  14++A895                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++A895 3A 15 C0    >               ld       a,(UBnkrotmatSidevX+1)
  14++A898 32 74 C0    >               ld       (XX15VecX),a
  15++A89B                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++A89B 3A 17 C0    >               ld       a,(UBnkrotmatSidevY+1)
  15++A89E 32 75 C0    >               ld       (XX15VecY),a
  16++A8A1                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++A8A1 3A 19 C0    >               ld       a,(UBnkrotmatSidevZ+1)
  16++A8A4 32 76 C0    >               ld       (XX15VecZ),a
  17++A8A7 C9                   ret
  18++A8A8
# file closed: ././Variables/CopyRotMattoXX15.asm
  30+ A8A8
  31+ A8A8                  include "./Variables/CopyXX15toRotMat.asm"
# file opened: ././Variables/CopyXX15toRotMat.asm
   1++A8A8              CopyXX15toRotMatNoseV:
   2++A8A8                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++A8A8 3A 74 C0    >               ld       a,(XX15VecX)
   2++A8AB 32 21 C0    >               ld       (UBnkrotmatNosevX+1),a
   3++A8AE                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++A8AE 3A 75 C0    >               ld       a,(XX15VecY)
   3++A8B1 32 23 C0    >               ld       (UBnkrotmatNosevY+1),a
   4++A8B4                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++A8B4 3A 76 C0    >               ld       a,(XX15VecZ)
   4++A8B7 32 25 C0    >               ld       (UBnkrotmatNosevZ+1),a
   5++A8BA C9                   ret
   6++A8BB
   7++A8BB              CopyXX15toRotMatRoofV:
   8++A8BB                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++A8BB 3A 74 C0    >               ld       a,(XX15VecX)
   8++A8BE 32 1B C0    >               ld       (UBnkrotmatRoofvX+1),a
   9++A8C1                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++A8C1 3A 75 C0    >               ld       a,(XX15VecY)
   9++A8C4 32 1D C0    >               ld       (UBnkrotmatRoofvY+1),a
  10++A8C7                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++A8C7 3A 76 C0    >               ld       a,(XX15VecZ)
  10++A8CA 32 1F C0    >               ld       (UBnkrotmatRoofvZ+1),a
  11++A8CD C9                   ret
  12++A8CE
  13++A8CE              CopyXX15toRotMatSideV:
  14++A8CE                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++A8CE 3A 74 C0    >               ld       a,(XX15VecX)
  14++A8D1 32 15 C0    >               ld       (UBnkrotmatSidevX+1),a
  15++A8D4                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++A8D4 3A 75 C0    >               ld       a,(XX15VecY)
  15++A8D7 32 17 C0    >               ld       (UBnkrotmatSidevY+1),a
  16++A8DA                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++A8DA 3A 76 C0    >               ld       a,(XX15VecZ)
  16++A8DD 32 19 C0    >               ld       (UBnkrotmatSidevZ+1),a
  17++A8E0 C9                   ret
  18++A8E1
# file closed: ././Variables/CopyXX15toRotMat.asm
  32+ A8E1
  33+ A8E1              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ A8E1              		; b = regX on entry
  35+ A8E1              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ A8E1 08           		ex		af,af'
  37+ A8E2 78           		ld		a,b
  38+ A8E3 32 D8 93     		ld		(varQ),a
  39+ A8E6 08           		ex		af,af'
  40+ A8E7 EE 80        		xor		$80							;	 flip sign of Acc
  41+ A8E9 CD A9 A0     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ A8EC              ; USES 				A BC E
  43+ A8EC              ; DOES NOT USE		D HL
  44+ A8EC              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ A8EC 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ A8ED E6 80        		and		SignOnly8Bit						; ..
  47+ A8EF 5F           		ld		e,a							; ..
  48+ A8F0 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ A8F1 E6 7F        		and		SignMask8Bit							; ..
  50+ A8F3 06 FE        		ld		b,$FE						; slide counter T1
  51+ A8F5              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ A8F5 CB 27        		sla		a
  53+ A8F7              		JumpIfALTNusng $60, TIS1SkipSub
  53+ A8F7 FE 60       >                        cp      $60
  53+ A8F9 DA 06 A9    >                        jp		c,TIS1SkipSub
  54+ A8FC DE 60        		sbc		a,$60							; subtract 96
  55+ A8FE 37           		scf
  56+ A8FF CB 10        		rl		b							;  T1
  57+ A901 38 F2        		jr		c,TIS1RollTLoop
  58+ A903              TIS1KIPCont:
  59+ A903 78           		ld		a,b							;   T1
  60+ A904 B3           		or		e							;   restore T sign
  61+ A905 C9           		ret
  62+ A906              TIS1SkipSub:
  63+ A906 B7           	or			a
  64+ A907 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ A909 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ A90B C3 03 A9     	jp			TIS1KIPCont
  67+ A90E
  68+ A90E              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ A90E              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ A90E
  71+ A90E
  72+ A90E
  73+ A90E
  74+ A90E              TidyRotYSmall:
  75+ A90E CD 3A AA     		call	CalcRoofvZ
  76+ A911 32 1F C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ A914 C3 48 A9     		jp		NormaliseRoofV
  78+ A917
  79+ A917              TidyRotXSmall:
  80+ A917 AF           		xor		a
  81+ A918 47           		ld		b,a
  82+ A919 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ A91C E6 60        		and		%01100000
  84+ A91E CA 0E A9     		jp		z,TidyRotYSmall
  85+ A921 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ A924 47           		ld		b,a							; b = regX for now
  87+ A925 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ A928 CD 00 AA     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ A92B 32 1D C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ A92E C3 48 A9     		jp		NormaliseRoofV
  91+ A931              TIDY:
  92+ A931              ORTHOGALISE:
  93+ A931              ;-- NormaliseNosev
  94+ A931 CD 6F A8     		call	CopyRotMatNoseVtoXX15
  95+ A934 CD 60 A4     		call	normaliseXX1596fast			; normalise z hi
  96+ A937 CD A8 A8     		call	CopyXX15toRotMatNoseV
  97+ A93A              .CheckNXSmall:
  98+ A93A 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
  99+ A93D E6 60        		and		%01100000					; check top two magnitude bits
 100+ A93F CA 17 A9     		jp		z,TidyRotXSmall
 101+ A942              .RotXIsBig:
 102+ A942 CD C6 A9             call	CalcRoofvX
 103+ A945 32 1B C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 104+ A948              NormaliseRoofV:
 105+ A948 CD 82 A8     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 106+ A94B CD 60 A4     		call	normaliseXX1596fast			; normalise roof
 107+ A94E              ;calc sidev x
 108+ A94E CD BB A8     		call	CopyXX15toRotMatRoofV		; get back normalised version
 109+ A951 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
 110+ A954 32 D8 93     		ld		(varQ),a					; q = nosev_y
 111+ A957 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 112+ A95A CD 61 A8     		call	RSequQmulA
 113+ A95D 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 114+ A960 47           		ld		b,a							; b = regX for now
 115+ A961 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 116+ A964 CD E1 A8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 117+ A967                      IfAIsZeroGoto NormSideXNoNeg
 117+ A967 FE 00       >				cp	0
 117+ A969 CA 6E A9    >				jp	z,NormSideXNoNeg
 118+ A96C EE 80        		xor		$80							; flip a to get -sidev_x
 119+ A96E              NormSideXNoNeg:
 120+ A96E 32 15 C0     		ld		(UBnkrotmatSidevX+1),a
 121+ A971              ;calc sidev y
 122+ A971 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 123+ A974 32 D8 93     		ld		(varQ),a
 124+ A977 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 125+ A97A CD 61 A8     		call	RSequQmulA
 126+ A97D 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 127+ A980 47           		ld		b,a							; b = regX for now
 128+ A981 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 129+ A984 CD E1 A8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 130+ A987                      IfAIsZeroGoto NormSideYNoNeg
 130+ A987 FE 00       >				cp	0
 130+ A989 CA 8E A9    >				jp	z,NormSideYNoNeg
 131+ A98C EE 80        		xor		$80							; flip a to get -sidev_y
 132+ A98E              NormSideYNoNeg:
 133+ A98E 32 23 C0     		ld		(UBnkrotmatNosevY+1),a
 134+ A991              ;calc sidev z
 135+ A991 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 136+ A994 32 D8 93     		ld		(varQ),a
 137+ A997 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 138+ A99A CD 61 A8     		call	RSequQmulA
 139+ A99D 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 140+ A9A0 47           		ld		b,a							; b = regX for now
 141+ A9A1 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 142+ A9A4 CD E1 A8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 143+ A9A7                      IfAIsZeroGoto NormSideZNoNeg
 143+ A9A7 FE 00       >				cp	0
 143+ A9A9 CA AE A9    >				jp	z,NormSideZNoNeg
 144+ A9AC EE 80        		xor		$80							; flip a to get -sidev_y
 145+ A9AE              NormSideZNoNeg:
 146+ A9AE 32 17 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 147+ A9B1              .ClearLoBytes:
 148+ A9B1 21 20 C0     		ld		hl,UBnkrotmatNosevX
 149+ A9B4 06 09        		ld		b,9
 150+ A9B6 AF                   xor     a
 151+ A9B7              .ClearLoLoop:
 152+ A9B7 77           		ld		(hl),a						; zero out lo bytes
 153+ A9B8 23           		inc		hl
 154+ A9B9 23           		inc		hl
 155+ A9BA 10 FB        		djnz	.ClearLoLoop
 156+ A9BC CD 95 A8     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 157+ A9BF CD 60 A4     		call	normaliseXX1596fast			; normalise roof
 158+ A9C2              ;calc sidev x
 159+ A9C2 CD CE A8     		call	CopyXX15toRotMatSideV		; get back normalised version
 160+ A9C5
 161+ A9C5 C9           		ret
 162+ A9C6
 163+ A9C6
 164+ A9C6
 165+ A9C6              ;;;;;;;;.CheckNYSmall:
 166+ A9C6              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 167+ A9C6              ;;;;;;;;		and		$7F
 168+ A9C6              ;;;;;;;;		cp		0
 169+ A9C6              ;;;;;;;;		jp		z,Tidy1RZ
 170+ A9C6              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 171+ A9C6              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 172+ A9C6              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 173+ A9C6              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 174+ A9C6              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 175+ A9C6              ;;;;;;;;.DoNZ:
 176+ A9C6              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 177+ A9C6              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 178+ A9C6              ;;;;;;;;NormaliseRoofv:
 179+ A9C6              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 180+ A9C6              ;;;;;;;;		push	bc
 181+ A9C6              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 182+ A9C6              ;;;;;;;;		pop		bc
 183+ A9C6              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 184+ A9C6              ;;;;;;;;ProcessSidev:
 185+ A9C6              ;;;;;;;;; -- SIDEV X
 186+ A9C6              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 187+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 188+ A9C6              ;;;;;;;;		push	bc
 189+ A9C6              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 190+ A9C6              ;;;;;;;;		pop		bc
 191+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 192+ A9C6              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 193+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 194+ A9C6              ;;;;;;;;		push	bc
 195+ A9C6              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 196+ A9C6              ;;;;;;;;		pop		bc
 197+ A9C6              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 198+ A9C6              ;;;;;;;;; -- SIDEV Y
 199+ A9C6              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 200+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 201+ A9C6              ;;;;;;;;		push	bc
 202+ A9C6              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 203+ A9C6              ;;;;;;;;		pop		bc
 204+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 205+ A9C6              ;;;;;;;;		ld		b,a
 206+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 207+ A9C6              ;;;;;;;;		push	bc
 208+ A9C6              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 209+ A9C6              ;;;;;;;;		pop		bc
 210+ A9C6              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 211+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 212+ A9C6              ;;;;;;;;		push	bc
 213+ A9C6              ;;;;;;;;; -- SIDEV Z
 214+ A9C6              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 215+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 216+ A9C6              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 217+ A9C6              ;;;;;;;;		pop		bc
 218+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 219+ A9C6              ;;;;;;;;		ld		b,a
 220+ A9C6              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 221+ A9C6              ;;;;;;;;		push	bc
 222+ A9C6              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 223+ A9C6              ;;;;;;;;		pop		bc
 224+ A9C6              ;;;;;;;;		ld		(sidev_z+1),a
 225+ A9C6              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 226+ A9C6              ;;;;;;;;		ld		hl,sidev_z
 227+ A9C6              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 228+ A9C6              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 229+ A9C6              ;;;;;;;;NormaliseSideV:
 230+ A9C6              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 231+ A9C6              ;;;;;;;;		push	bc
 232+ A9C6              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 233+ A9C6              ;;;;;;;;		pop		bc
 234+ A9C6              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 235+ A9C6              ;;;;;;;;
 236+ A9C6
 237+ A9C6
 238+ A9C6              CalcRoofvX:
 239+ A9C6              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 240+ A9C6              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 240+ A9C6 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 240+ A9C9 32 D8 93    >               ld       (varQ),a
 241+ A9CC 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 242+ A9CF CD 61 A8     		call	RSequQmulA						; rs = nosez hi * roofz hi
 243+ A9D2              		ldCopyByte UBnkrotmatNosevY+1,varQ
 243+ A9D2 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 243+ A9D5 32 D8 93    >               ld       (varQ),a
 244+ A9D8 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 245+ A9DB CD A9 A0     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 246+ A9DE 7A           		ld		a,d
 247+ A9DF E6 80        		and 	$80
 248+ A9E1 FD 67        		ld		iyh,a
 249+ A9E3              ;DEBUG		ld		c,a
 250+ A9E3 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 251+ A9E6 4F           		ld		c,a								; temp save
 252+ A9E7 E6 80        		and		$80
 253+ A9E9 FD AC        		xor		iyh								; flip from saved multiply sign result
 254+ A9EB FD 67        		ld		iyh,a							; save nosesev sign to iyh
 255+ A9ED 79           		ld		a,c								; recover a
 256+ A9EE E6 7F        		and		$7F								; a is unsigned nosev x
 257+ A9F0 42           		ld		b,d
 258+ A9F1 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 259+ A9F2 57           		ld		d,a								; de = nosev x hi
 260+ A9F3 1E 00        		ld		e,0
 261+ A9F5 CD E2 A2     		call	BC_Div_DE
 262+ A9F8 FD 7C        		ld		a,iyh							; get back sign from nosevx
 263+ A9FA EE 80        		xor		$80								; flip sign
 264+ A9FC E6 80        		and		$80								; keep sign bit only
 265+ A9FE B0           		or		b
 266+ A9FF C9           		ret
 267+ AA00
 268+ AA00
 269+ AA00              CalcRoofvY:
 270+ AA00              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 271+ AA00              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 271+ AA00 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 271+ AA03 32 D8 93    >               ld       (varQ),a
 272+ AA06 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 273+ AA09 CD 61 A8     		call	RSequQmulA
 274+ AA0C              		ldCopyByte UBnkrotmatNosevX+1,varQ
 274+ AA0C 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 274+ AA0F 32 D8 93    >               ld       (varQ),a
 275+ AA12 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 276+ AA15 CD A9 A0     		call	madXAequQmulAaddRS
 277+ AA18 7A           		ld		a,d
 278+ AA19 E6 80        		and 	$80
 279+ AA1B FD 67        		ld		iyh,a
 280+ AA1D 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 281+ AA20 4F           		ld		c,a								; temp save
 282+ AA21 E6 80        		and		$80
 283+ AA23 FD AC        		xor		iyh								; flip from saved multiply sign result
 284+ AA25 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 285+ AA27 79           		ld		a,c								; recover a
 286+ AA28 E6 7F        		and		$7F								; a is unsigned nosev x
 287+ AA2A 42           		ld		b,d
 288+ AA2B 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 289+ AA2C 57           		ld		d,a								; de = nosev x hi
 290+ AA2D 1E 00        		ld		e,0
 291+ AA2F CD E2 A2     		call	BC_Div_DE
 292+ AA32 FD 7C        		ld		a,iyh
 293+ AA34 EE 80        		xor		$80
 294+ AA36 E6 80        		and		$80
 295+ AA38 B0           		or		b
 296+ AA39 C9           		ret
 297+ AA3A
 298+ AA3A              CalcRoofvZ:
 299+ AA3A              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 300+ AA3A              		ldCopyByte UBnkrotmatNosevY+1,varQ
 300+ AA3A 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 300+ AA3D 32 D8 93    >               ld       (varQ),a
 301+ AA40 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 302+ AA43 CD 61 A8     		call	RSequQmulA						; rs = NOSEy * ROOFy
 303+ AA46              		ldCopyByte UBnkrotmatNosevX+1,varQ
 303+ AA46 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 303+ AA49 32 D8 93    >               ld       (varQ),a
 304+ AA4C 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 305+ AA4F CD A9 A0     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 306+ AA52 7A           		ld		a,d
 307+ AA53 E6 80        		and 	$80
 308+ AA55 FD 67        		ld		iyh,a
 309+ AA57 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 310+ AA5A 4F           		ld		c,a								; temp save
 311+ AA5B E6 80        		and		$80
 312+ AA5D FD AC        		xor		iyh								; flip from saved multiply sign result
 313+ AA5F FD 67        		ld		iyh,a							; save nosesev sign to iyh
 314+ AA61 79           		ld		a,c								; recover a
 315+ AA62 E6 7F        		and		$7F								; a is unsigned nosev x
 316+ AA64 42           		ld		b,d
 317+ AA65 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 318+ AA66 57           		ld		d,a								; de = nosev x hi
 319+ AA67 1E 00        		ld		e,0
 320+ AA69 CD E2 A2     		call	BC_Div_DE
 321+ AA6C FD 7C        		ld		a,iyh
 322+ AA6E EE 80        		xor		$80
 323+ AA70 E6 80        		and		$80
 324+ AA72 B0           		or		b
 325+ AA73 C9           		ret
 326+ AA74
 327+ AA74
 328+ AA74
 329+ AA74              ;;ProcessSidev:
 330+ AA74              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 331+ AA74              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 332+ AA74              ;;		push	bc
 333+ AA74              ;;		call	RSequQmulA					; RS = Q * A MULT12
 334+ AA74              ;;		pop		bc
 335+ AA74              ;;		ld		a,(UBnkrotmatNosevY+1)
 336+ AA74              ;;		ld		b,a							; set x (b) to value of nosev_z
 337+ AA74              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 338+ AA74              ;;		push	bc
 339+ AA74              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 340+ AA74              ;;		pop		bc
 341+ AA74              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 342+ AA74              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 343+ AA74              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 344+ AA74              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 345+ AA74              ;;		push	bc
 346+ AA74              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 347+ AA74              ;;		pop		bc
 348+ AA74              ;;		ld		a,(UBnkrotmatNosevZ+1)
 349+ AA74              ;;		ld		b,a
 350+ AA74              ;;		ld		a,(UBnkrotmatNosevY+1)
 351+ AA74              ;;		push	bc
 352+ AA74              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 353+ AA74              ;;		pop		bc
 354+ AA74              ;;		xor		$80							; a *= -1
 355+ AA74              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 356+ AA74              ;;		ld		a,(UBnkrotmatRoofvY+1)
 357+ AA74              ;;		push	bc
 358+ AA74              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 359+ AA74              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 360+ AA74              ;;		call	RSequQmulA					; RS = Q * A MULT12
 361+ AA74              ;;		pop		bc
 362+ AA74              ;;		ld		a,(UBnkrotmatNosevX+1)
 363+ AA74              ;;		ld		b,a
 364+ AA74              ;;		ld		a,(UBnkrotmatRoofvY+1)
 365+ AA74              ;;		push	bc
 366+ AA74              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 367+ AA74              ;;		pop		bc
 368+ AA74              ;;		xor		$80
 369+ AA74              ;;		ld		(UBnkrotmatSidevZ+1),a
 370+ AA74              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 371+ AA74              ;;		ld		hl,UBnkrotmatSidevZ
 372+ AA74              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 373+ AA74              ;;		ld		hl,UBnkrotmatNosevX
 374+ AA74
 375+ AA74
 376+ AA74
 377+ AA74
 378+ AA74
 379+ AA74
 380+ AA74              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 381+ AA74              ;;;;;;;;.ProcessRoofv:
 382+ AA74              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 383+ AA74              ;;;;;;;;		push	bc
 384+ AA74              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 385+ AA74              ;;;;;;;;		pop		bc
 386+ AA74              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 387+ AA74              ;;;;;;;;.ProcessSidev:
 388+ AA74              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 389+ AA74              ;;;;;;;;		push	bc
 390+ AA74              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 391+ AA74              ;;;;;;;;		pop		bc
 392+ AA74              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 393+ AA74
# file closed: ./Maths/Utilities/tidy.asm
 928  AA74                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ AA74
   2+ AA74              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ AA74 BA          >                        cp     d
   2+ AA75 D2 93 AA    >                        jp		nc,.Ll28Exit255
   3+ AA78 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ AA7A CB 27        .LL31:                  sla     a
   5+ AA7C 38 0D                                jr      c,.LL29
   6+ AA7E                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ AA7E BA          >                        cp      d
   6+ AA7F DA 84 AA    >                        jp		c,.SkipSub
   7+ AA82 92                                   sub     d
   8+ AA83                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ AA83 B7          >				or a
   9+ AA84 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ AA85 CB 13                                rl      e
  11+ AA87 38 F1                                jr      c,.LL31
  12+ AA89 7B                                   ld      a,e
  13+ AA8A C9                                   ret
  14+ AA8B 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ AA8C 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ AA8D CB 13                                rl      e                           ; rotate counter e left
  17+ AA8F 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ AA91 7B                                   ld      a,e                         ; stick result in a
  19+ AA92 C9                                   ret
  20+ AA93 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ AA95 C9                                   ret
  22+ AA96
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 929  AA96                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ AA96              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ AA96              TIS1:
   3+ AA96 08           		ex		af,af'
   4+ AA97 3A 06 93     		ld		a,(regX)
   5+ AA9A 47           		ld		b,a
   6+ AA9B 08           		ex		af,af'
   7+ AA9C              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ AA9C 08           		ex		af,af'
   9+ AA9D 78           		ld		a,b
  10+ AA9E 32 D8 93     		ld		(varQ),a
  11+ AAA1 08           		ex		af,af'
  12+ AAA2 EE 80        		xor		$80							;	 flip sign of Acc
  13+ AAA4 CD A9 A0     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ AAA7              ; USES 				A BC E
  15+ AAA7              ; DOES NOT USE		D HL
  16+ AAA7              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ AAA7 47           		ld		b,a
  18+ AAA8 E6 80        		and		$80							;	hi sign
  19+ AAAA 5F           		ld		e,a							;   e = varT
  20+ AAAB 78           		ld		a,b
  21+ AAAC E6 7F        		and		$7F							;	hi A7
  22+ AAAE 06 FE        		ld		b,$FE						;   slide counter
  23+ AAB0 48           		ld		c,b							;   c == T1 ::  T1
  24+ AAB1              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ AAB1 CB 27        		sla		a
  26+ AAB3 FE 60        		cp		$60							; max 96
  27+ AAB5 30 02        		jr		nc,.DV4
  28+ AAB7 DE 60        		sbc		a,$60							;  SBC #&60
  29+ AAB9              .DV4:										; skip subtraction
  30+ AAB9 CB 11        		rl		c							;  T1
  31+ AABB 38 F4        		jr		c,.DVL3
  32+ AABD 79           		ld		a,c							;   T1
  33+ AABE B3           		or		e							;   restore T sign
  34+ AABF C9           		ret
  35+ AAC0
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 930  AAC0              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 931  AAC0              ;INCLUDE "XHiYLoequPA-gc3.asm"
 932  AAC0              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 933  AAC0              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 934  AAC0              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 935  AAC0                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
 936  AAC0
 937  AAC0
 938  AAC0                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ AAC0              M_GETSETDRV             equ $89
   2+ AAC0              F_OPEN                  equ $9a
   3+ AAC0              F_CLOSE                 equ $9b
   4+ AAC0              F_READ                  equ $9d
   5+ AAC0              F_WRITE                 equ $9e
   6+ AAC0              F_SEEK                  equ $9f
   7+ AAC0
   8+ AAC0              FA_READ                 equ $01
   9+ AAC0              FA_APPEND               equ $06
  10+ AAC0              FA_OVERWRITE            equ $0C
  11+ AAC0
  12+ AAC0 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ AAC4 DD E5
  13+ AAC6 AF                                   xor	    a	; set drive. 0 is default
  14+ AAC7 CF                                   rst	    $08
  15+ AAC8 89                                   db	    $89
  16+ AAC9 32 D3 AA                             ld	    (DefaultDrive),a
  17+ AACC DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ AAD0 C1 F1
  18+ AAD2 C9                                   ret
  19+ AAD3 00           DefaultDrive:	        db	0
  20+ AAD4
  21+ AAD4              ; *******************************************************************************************************
  22+ AAD4              ;	Function:	Open a file read for reading/writing
  23+ AAD4              ;	In:		ix = filename
  24+ AAD4              ;			b  = Open filemode
  25+ AAD4              ;	ret		a  = handle, 0 on error
  26+ AAD4              ; *******************************************************************************************************
  27+ AAD4 E5 DD E5     fOpen:	                push	hl,,ix
  28+ AAD7 DD E5                                push	ix
  29+ AAD9 3A D3 AA                             ld	    a,(DefaultDrive)
  30+ AADC CF                                   rst	    $08
  31+ AADD 9A                                   db	    F_OPEN
  32+ AADE DD E1 E1                             pop	    hl,,ix
  33+ AAE1 C9                                   ret
  34+ AAE2
  35+ AAE2              ; *******************************************************************************************************
  36+ AAE2              ;	Function	Read bytes from the open file
  37+ AAE2              ;	In:		ix  = address to read into
  38+ AAE2              ;			bc  = amount to read
  39+ AAE2              ;	ret:		carry set = error
  40+ AAE2              ; *******************************************************************************************************
  41+ AAE2 B7           fRead:                  or   	a             ; is it zero?
  42+ AAE3 C8                                   ret  	z             ; if so return
  43+ AAE4 E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ AAE7 E1                                   pop		hl
  45+ AAE8 CF                                   rst	    $08
  46+ AAE9 9D                                   db	    F_READ
  47+ AAEA E1                                   pop	    hl
  48+ AAEB C9                                   ret
  49+ AAEC
  50+ AAEC              ; *******************************************************************************************************
  51+ AAEC              ;	Function	Read bytes from the open file
  52+ AAEC              ;	In:		ix  = address to read into
  53+ AAEC              ;			bc  = amount to read
  54+ AAEC              ;	ret:		carry set = error
  55+ AAEC              ; *******************************************************************************************************
  56+ AAEC B7           fWrite:                 or   	a             ; is it zero?
  57+ AAED C8                                   ret  	z             ; if so return
  58+ AAEE E5 DD E5                             push	hl,,ix
  59+ AAF1 E1                                   pop	    hl
  60+ AAF2 CF                                   rst	    $08
  61+ AAF3 9E                                   db	    F_WRITE
  62+ AAF4 E1                                   pop	    hl
  63+ AAF5 C9                                   ret
  64+ AAF6
  65+ AAF6              ; *******************************************************************************************************
  66+ AAF6              ;	Function:	Close open file
  67+ AAF6              ;	In:		a  = handle
  68+ AAF6              ;	ret		a  = handle, 0 on error
  69+ AAF6              ; *******************************************************************************************************
  70+ AAF6 B7           fClose:		            or   	a             ; is it zero?
  71+ AAF7 C8                                   ret  	z             ; if so return
  72+ AAF8 CF                                   rst	    $08
  73+ AAF9 9B                                   db	    F_CLOSE
  74+ AAFA C9                                   ret
  75+ AAFB
  76+ AAFB              ; *******************************************************************************************************
  77+ AAFB              ;	Function	Read bytes from the open file
  78+ AAFB              ;	In:		a   = file handle
  79+ AAFB              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ AAFB              ;			BCDE = bytes to seek
  81+ AAFB              ;	ret:		BCDE = file pos from start
  82+ AAFB              ; *******************************************************************************************************
  83+ AAFB DD E5 E5     fSeek:                  push	ix,,hl
  84+ AAFE CF                                   rst	    $08
  85+ AAFF 9F                                   db	    F_SEEK
  86+ AB00 E1 DD E1                             pop	    ix,,hl
  87+ AB03 C9                                   ret
  88+ AB04
  89+ AB04              ; *******************************************************************************************************
  90+ AB04              ; Init the file system
  91+ AB04              ; *******************************************************************************************************
  92+ AB04 CD C0 AA     InitFileSystem:         call    GetDefaultDrive
  93+ AB07 C9                                   ret
  94+ AB08
  95+ AB08              ; *******************************************************************************************************
  96+ AB08              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ AB08              ; In:		hl = file data pointer
  98+ AB08              ;		ix = address to load to
  99+ AB08              ; *******************************************************************************************************
 100+ AB08 CD C0 AA     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ AB0B C5 D5 F5                             push	bc,,de,,af
 102+ AB0E                                      ; get file size
 103+ AB0E 4E                                   ld	    c,(hl)
 104+ AB0F 2C                                   inc	    l
 105+ AB10 46                                   ld	    b,(hl)
 106+ AB11 2C                                   inc	    l
 107+ AB12 C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ AB15 E5                                   push	hl				; get name into ix
 109+ AB16 DD E1                                pop	    ix
 110+ AB18 06 01                                ld      b,FA_READ		; mode open for reading
 111+ AB1A CD D4 AA                             call    fOpen
 112+ AB1D 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ AB1F FE 00                                cp	    0				; was file handle 0?
 114+ AB21 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ AB23 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ AB26 F5                                   push	af				; remember handle
 117+ AB27 CD E2 AA                             call	fRead			; read data from A to address IX of length BC
 118+ AB2A 38 0C                                jr	    c,.error_reading
 119+ AB2C F1                                   pop	    af			    ; get handle back
 120+ AB2D CD F6 AA                             call	fClose			; close file
 121+ AB30 38 07                                jr	    c,.error_closing
 122+ AB32 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ AB35 C9                                   ret
 124+ AB36              ;
 125+ AB36              ; On error, display error code an lock up so we can see it
 126+ AB36              ;
 127+ AB36 DD E1        .error_opening:         pop	ix
 128+ AB38 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ AB39
 130+ AB39              .error_closing:
 131+ AB39 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ AB3A D1                                   pop	de
 133+ AB3B C1                                   pop	bc
 134+ AB3C C9                                   ret
 135+ AB3D
 136+ AB3D              ; *******************************************************************************************************
 137+ AB3D              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ AB3D              ; In:		hl = file data pointer
 139+ AB3D              ;		ix = address to save from
 140+ AB3D              ;		bc = size
 141+ AB3D              ; *******************************************************************************************************
 142+ AB3D CD C0 AA     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ AB40 C5 E5                                push	bc,,hl   			; store size& save address
 144+ AB42 E5                                   push	hl		        	; get name into ix
 145+ AB43 DD E1                                pop	    ix
 146+ AB45 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ AB47 CD D4 AA                             call    fOpen
 148+ AB4A 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ AB4C FE 00                                cp	    0			        ; was file handle 0?
 150+ AB4E 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ AB50 DD E1                                pop	    ix			        ; get save address back
 152+ AB52 C1                                   pop	    bc			        ; get size back
 153+ AB53 F5                                   push	af			        ; remember handle
 154+ AB54 CD EC AA                             call	fWrite			    ; read data from A to address IX of length BC
 155+ AB57 38 04                                jr	c,.error
 156+ AB59 F1                                   pop	af			            ; get handle back
 157+ AB5A CD F6 AA                             call	fClose			    ; close file
 158+ AB5D C9           .error:                 ret
 159+ AB5E              ;
 160+ AB5E              ; On error, display error code an lock up so we can see it
 161+ AB5E              ;
 162+ AB5E DD E1        .error_opening:         pop	ix
 163+ AB60 C1                                   pop	bc	; don't pop a, need error code
 164+ AB61 C9                                   ret
 165+ AB62
# file closed: ./Drive/drive_access.asm
 939  AB62
 940  AB62                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AB62 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AB66 41 4E 44 45
   1+ AB6A 52 00
   2+ AB6C 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AB70 4E 54 4F 52
   2+ AB74 59 00
   3+ AB76 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AB7A 65 6E 74 20
   3+ AB7E 53 79 73 74
   3+ AB82 65 6D 20 20
   3+ AB86 20 3A 00
   4+ AB89 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AB8D 72 73 70 61
   4+ AB91 63 65 20 53
   4+ AB95 79 73 74 65
   4+ AB99 6D 3A 00
   5+ AB9C 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ ABA0 69 74 69 6F
   5+ ABA4 6E 20 20 20
   5+ ABA8 3A 00
   6+ ABAA 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ ABAE 20 20 20 20
   6+ ABB2 20 20 20 20
   6+ ABB6 3A 00
   7+ ABB8 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ ABBC 20 20 20 20
   7+ ABC0 20 20 20 20
   7+ ABC4 3A 00
   8+ ABC6 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ ABCA 6C 20 53 74
   8+ ABCE 61 74 75 73
   8+ ABD2 3A 00
   9+ ABD4 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ ABD8 6E 67 20 20
   9+ ABDC 20 20 20 20
   9+ ABE0 3A 00
  10+ ABE2 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ ABE6 50 4D 45 4E
  10+ ABEA 54 3A 00
  11+ ABED
  12+ ABED 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ ABF1 20 4C 69 67
  12+ ABF5 68 74 20 59
  12+ ABF9 65 61 72 73
  12+ ABFD 00
  13+ ABFE 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AC02 58 58 58 58
  13+ AC06 58 58 00
  14+ AC09 2E           txt_cash_decimal        DB "."
  15+ AC0A 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AC0E 00
  16+ AC0F
  17+ AC0F              txt_status_colour		equ $FF
  18+ AC0F
  19+ AC0F              print_boiler_text_l2:
  20+ AC0F              ; ">print_boilder_text hl = text structure, b = message count"
  21+ AC0F              BoilerTextLoop:
  22+ AC0F C5           	push		bc			; Save Message Count loop value
  23+ AC10 4E           	ld			c,(hl)		; Get Row into b
  24+ AC11 23           	inc			hl
  25+ AC12 46           	ld			b,(hl)		; Get Col into b
  26+ AC13 23           	inc			hl
  27+ AC14 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ AC15 23           	inc			hl
  29+ AC16 56           	ld			d,(hl)		; Get text address Hi into E
  30+ AC17 23           	inc			hl
  31+ AC18 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AC19 EB           	ex			de,hl		; now hl = address of text data
  33+ AC1A 1E FF        	ld			e,txt_status_colour
  34+ AC1C                  MMUSelectLayer2
  34+ AC1C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ AC20 CD 80 E0     	call		l1_print_at
  36+ AC23 E1           	pop			hl
  37+ AC24 C1           	pop			bc
  38+ AC25 10 E8        	djnz		BoilerTextLoop
  39+ AC27 C9           	ret
  40+ AC28
  41+ AC28
  42+ AC28              print_boiler_text:
  43+ AC28              ; ">print_boilder_text hl = text structure, b = message count"
  44+ AC28              .BoilerTextLoop:
  45+ AC28 C5           	push		bc			; Save Message Count loop value
  46+ AC29 4E           	ld			c,(hl)		; Get Row into b
  47+ AC2A 23           	inc			hl
  48+ AC2B 46           	ld			b,(hl)		; Get Col into b
  49+ AC2C 23           	inc			hl
  50+ AC2D 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ AC2E 23           	inc			hl
  52+ AC2F 56           	ld			d,(hl)		; Get text address Hi into E
  53+ AC30 23           	inc			hl
  54+ AC31 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AC32 EB           	ex			de,hl		; now hl = address of text data
  56+ AC33 1E FF        	ld			e,txt_status_colour
  57+ AC35 C5           	push		bc
  58+ AC36 D1           	pop			de
  59+ AC37 CD 80 E0     	call		l1_print_at
  60+ AC3A E1           	pop			hl
  61+ AC3B C1           	pop			bc
  62+ AC3C 10 EA        	djnz		.BoilerTextLoop
  63+ AC3E C9           	ret
  64+ AC3F
  65+ AC3F              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++AC3F
   2++AC3F
   3++AC3F 3A F8 96     	ld		a,(Fuel)
   4++AC42 11 ED AB     	ld		de,txt_fuel_level
   5++AC45 0E 9C        	ld	c, -100
   6++AC47 CD 51 AC     	call	.Num1
   7++AC4A 0E F6        	ld	c,-10
   8++AC4C CD 51 AC     	call	.Num1
   9++AC4F 0E FF        	ld	c,-1
  10++AC51              .Num1:
  11++AC51 06 2F        	ld	b,'0'-1
  12++AC53              .Num2:
  13++AC53 04           	inc		b
  14++AC54 81           	add		a,c
  15++AC55 38 FC        	jr		c,.Num2
  16++AC57 91           	sub 	c
  17++AC58 C5           	push	bc
  18++AC59 F5           	push	af
  19++AC5A 79           	ld		a,c
  20++AC5B FE FF        	cp		-1
  21++AC5D CC 66 AC     	call	z,.InsertDot
  22++AC60 78           	ld		a,b
  23++AC61 12           	ld		(de),a
  24++AC62 13           	inc		de
  25++AC63 F1           	pop		af
  26++AC64 C1           	pop		bc
  27++AC65 C9           	ret
  28++AC66              .InsertDot:
  29++AC66 3E 2E        	ld		a,'.'
  30++AC68 12           	ld		(de),a
  31++AC69 13           	inc		de
  32++AC6A C9           	ret
  33++AC6B
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ AC6B
  67+ AC6B 2A F4 96     GetCash:                ld      hl,(Cash)
  68+ AC6E EB                                   ex      de,hl
  69+ AC6F DD 2A F6 96                          ld      ix,(Cash+2)
  70+ AC73 FD 21 FE AB                          ld		iy,txt_cash_amount
  71+ AC77 CD F2 A5                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AC7A FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AC7D 32 0A AC                             ld		(txt_cash_fraction),a
  74+ AC80 21 FF AB     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AC83 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AC84 FE 00                                cp		0
  77+ AC86 C8                                   ret		z
  78+ AC87 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AC8B C9                                   ret
  80+ AC8C
# file closed: ./Menus/common_menu.asm
 941  AC8C              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 942  AC8C              ;INCLUDE "./title_page.asm"
 943  AC8C
 944  AC8C              ; Blocks dependent on variables in Universe Banks
 945  AC8C              ; Bank 49
 946  AC8C              ;    SEG RESETUNIVSEG
 947  AC8C              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 948  AC8C              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 949  AC8C
 950  AC8C              ;	ORG ResetUniverseAddr
 951  AC8C              ;INCLUDE "./GameEngine/resetUniverse.asm"
 952  AC8C              ; Bank 50
 953  AC8C
 954  AC8C
 955  AC8C
 956  AC8C                  SLOT    MenuShrChtAddr
 957  AC8C                  PAGE    BankMenuShrCht
 958  AC8C              	ORG     MenuShrChtAddr,BankMenuShrCht
 959  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 D2 9E  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD 80 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 8D 94                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD CB E0                             call	sprite_local_cursor
  39+ C0EB 3A F8 96                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 5A E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B DA 94                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B 8D 94                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD D3 E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 96 94     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B DA 94                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 98 9F                             ld		hl,name_expanded
  65+ C127 CD F3 9E                             call	CapitaliseString
  66+ C12A 21 98 9F                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B DA 94                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B 8D 94                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD A6 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 62 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 96 94     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B DA 94                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 96 94     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 8D 94                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B DA 94                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A D6 94                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD F2 A5                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 26 A4                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 26 A4                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 26 A4                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c,.NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c,.NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 9A 97     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 96 94                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 98 9F                             ld		hl,name_expanded
 258+ C2C2 CD F3 9E                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 98 9F                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 98 9F                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 9E 93                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 9A 97     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 96 94     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 98 9F     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD F3 9E                             call	CapitaliseString
 333+ C34C 21 98 9F     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 DD 93                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD D4 8F                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 96 94                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 C4 93                             ld      de,SystemSeed
 359+ C388 CD 6D 97                             call    copy_seed
 360+ C38B 3A C5 93                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 8E 94     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A C7 93     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 8D 94                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A C5 93     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 8E 94                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A C7 93                             ld		a,(SystemSeed+3)
 390+ C3C5 21 8D 94                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A C9 93                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 14 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A DD 93                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 DD 93                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 47 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 53 E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 3F E1     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 E4 93                             ld      (MenuIdMax),a
 420+ C41E 2A 8D 94                             ld		hl,(PresentSystemX)
 421+ C421 22 DA 94                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 62 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD 13 9F                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 67 97     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A E2 93     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A DB 94     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                cp     1
 460+ C47E CA D8 C4    >                jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 DB 94                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A DB 94     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                cp     255
 467+ C48E CA D8 C4    >                jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 DB 94                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A DA 94     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                cp     2
 474+ C49E CA D8 C4    >                jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 DA 94                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A DA 94     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                cp     253
 481+ C4AE CA D8 C4    >                jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 DA 94                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A 8D 94     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 DA 94                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 3A 96 94     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 493+ C4C6                                      MMUSelectGalaxyA
 493+ C4C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 494+ C4C9 ED 4B DA 94                          ld      bc,(TargetPlanetX)
 495+ C4CD CD 60 FB                             call    find_nearest_to_bc
 496+ C4D0 ED 43 DA 94                          ld      (TargetPlanetX),bc
 497+ C4D4 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 498+ C4D7 C9                                   ret
 499+ C4D8              ;----------------------------------------------------------------------------------------------------------------------------------
 500+ C4D8 AF           src_BoundsLimit:        xor     a
 501+ C4D9 C9                                   ret
 502+ C4DA
# file closed: ./Menus/short_range_chart_menu.asm
 960  C4DA              ; Bank 51
 961  C4DA
 962  C4DA                  SLOT    MenuGalChtAddr
 963  C4DA                  PAGE    BankMenuGalCht
 964  C4DA              	ORG     MenuGalChtAddr
 965  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 D2 9E  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD 80 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B 8D 94  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 65 E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A F8 96     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 5A E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B DA 94  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 71 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 DD 93     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A 96 94         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 C4 93         ld      de,SystemSeed
  66+ C0F0 CD 6D 97     	call    copy_seed
  67+ C0F3 3A C7 93     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A C5 93     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A C8 93     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A DD 93     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 DD 93     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 47 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 53 E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 3F E1     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 E4 93         ld      (MenuIdMax),a
 106+ C168 2A 8D 94         ld      hl,(PresentSystemX)
 107+ C16B 22 DA 94         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 62 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD 13 9F     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A 96 94         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B DA 94      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD 80 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD CA 91         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A C7 91         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD 80 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD 5A 91                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD DD 91                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD F1 91     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A C9 91                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A C8 91     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 C8 91                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A 96 94                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 A8 91                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 DA 94                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD 80 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD 80 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A E2 93                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A DB 94     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                cp     1
 297+ C32F CA 89 C3    >                jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 DB 94                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A DB 94     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                cp     255
 304+ C33F CA 89 C3    >                jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 DB 94                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A DA 94     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                cp     2
 311+ C34F CA 89 C3    >                jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 DA 94                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A DA 94     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                cp     253
 318+ C35F CA 89 C3    >                jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 DA 94                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A 8D 94     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 DA 94                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A 96 94     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B DA 94                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 DA 94                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B DA 94  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD 7D E0                             call	sprite_ghc_move
 345+ C398 3A 96 94                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B DA 94                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 98 9F                             ld		hl,name_expanded
 356+ C3B5 CD F3 9E                             call	CapitaliseString
 357+ C3B8 21 98 9F                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 62 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A 96 94     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B 8D 94                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B DA 94                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB     fqp                        call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A D6 94                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD F2 A5                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD 26 A4                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD 26 A4                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD 26 A4                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 DD 93                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A 96 94     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A 8D 94                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 C9 94                             ld      de,PresentSystemSeeds
 442+ C479 CD 6D 97                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A DD 93                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 DD 93                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
 966  C495              ; Bank 52
 967  C495
 968  C495                  SLOT    MenuInventAddr
 969  C495                  PAGE    BankMenuInvent
 970  C495              	ORG     MenuInventAddr
 971  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD 80 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A F8 96     	ld		a,(Fuel)
   4++C136 11 ED AB     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 FF 96                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 4B 9A                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 76 9D                             ld		hl, WordIdx
 118+ C17A CD 4B 9A                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD 80 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD 80 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 4B 9A                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 76 9D                             ld		hl,WordIdx
 148+ C1C1 CD 4B 9A                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD 80 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A F6 96     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A F4 96                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 47 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 53 E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 3F E1     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 E4 93                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 3F E1                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 62 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 ED AB                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 972  C281
 973  C281              ; Bank 53
 974  C281
 975  C281                  SLOT    MenuSystemAddr
 976  C281                  PAGE    BankMenuSystem
 977  C281              	ORG     MenuSystemAddr
 978  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 D2 9E  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 98 9F  						DW $0280,name_expanded
   5+ C018 08 0B 02 9C  						DW $0B08,WordDistance
   6+ C01C 08 13 0B 9C  						DW $1308,WordEconomy
   7+ C020 08 1B 13 9C  						DW $1B08,WordGovernment
   8+ C024 08 23 1E 9C  						DW $2308,WordTechLevel
   9+ C028 08 2B 28 9C  						DW $2B08,WordPopulation
  10+ C02C 08 3B 43 9C  						DW $3B08,WordGross
  11+ C030 38 3B 49 9C  						DW $3B38,WordProductivity
  12+ C034 08 43 56 9C  						DW $4308,WordAverage
  13+ C038 48 43 5E 9C  						DW $4348,WordRadius
  14+ C03C 60 0B D2 9E  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 D2 9E  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 96 94     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B 8D 94                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD 80 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 47 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 53 E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 3F E1     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 E4 93                             ld		(MenuIdMax),a
 134+ C316 3A 96 94     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B DA 94  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 8D 94  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B DA 94  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A 8D 94                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 C3 94     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 62 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 13 9F                             call	expandTokenToString
 170+ C37B 3A 96 94     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 98 9F                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 98 9F                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A D6 94  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD E3 A5                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD 80 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 13 9F                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 13 9F                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 05 9F                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD 80 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD 80 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD E3 A5                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD 80 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 96 94     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD 80 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD F2 A5                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD 80 E0                             call	l1_print_at
 272+ C48F 3A 96 94     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD F2 A5                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD 80 E0                             call	l1_print_at
 289+ C4BC 3A 96 94     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD CD E0                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 979  C4F7
 980  C4F7              ; Bank 54
 981  C4F7
 982  C4F7                  SLOT    MenuMarketAddr
 983  C4F7                  PAGE    BankMenuMarket
 984  C4F7                  ORG     MenuMarketAddr
 985  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 D2 9E  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 98 9F  						DW $0220,name_expanded
   4+ C018 80 0B F2 9A  						DW $0B80,WordUnit
   5+ C01C B0 0B 3B 9D  						DW $0BB0,WordQuantity
   6+ C020 08 13 19 9D  						DW $1308,WordProduct
   7+ C024 60 13 21 9D  						DW $1360,WordUoM
   8+ C028 80 13 25 9D  						DW $1380,WordPrice
   9+ C02C B0 13 49 9D  						DW $13B0,WordStock
  10+ C030 E0 13 45 9D  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD 80 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A F6 96     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A F4 96                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A FE 96                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD 80 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD 80 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position
 249+ C28F 57                                   ld      d,a
 250+ C290 1E 08                                ld      e,8
 251+ C292 ED 30                                mul
 252+ C294 53                                   ld      d,e
 253+ C295 1E 00                                ld      e,0
 254+ C297 19                                   add     hl,de
 255+ C298 22 41 C0                             ld      (market_cursor),hl
 256+ C29B EB                                   ex      hl,de
 257+ C29C 21 43 C0                             ld      hl,market_blank_line
 258+ C29F                                      MMUSelectLayer1
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD 80 E0                             call	l1_print_at
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 FF 96                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 76 9D                             ld		hl,WordIdx
 273+ C2C5 CD 4B 9A                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD 80 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 76 9D                             ld		hl,WordIdx
 281+ C2DF CD 4B 9A                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD 80 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD 80 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD 80 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD 80 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 47 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 53 E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 3F E1     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 E4 93                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 62 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 62 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 62 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 62 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 62 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 62 E2                             call	l2_draw_horz_line
 340+ C3AA 3A 96 94     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 13 9F                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 349+ C3C2 21 08 20                             ld		hl,market_position
 350+ C3C5 22 41 C0                             ld		(market_cursor),hl
 351+ C3C8 F5           MarketLoop:	            push	af
 352+ C3C9 CD 8B C2                             call	PrintMarketItem
 353+ C3CC F1                                   pop		af
 354+ C3CD 3C                                   inc		a
 355+ C3CE FE 11                                cp		17
 356+ C3D0 20 F6                                jr		nz,MarketLoop
 357+ C3D2 AF           .InitialHighlight:      xor     a
 358+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 359+ C3D6 CD B3 C0                             call    mkt_highlight_row
 360+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 361+ C3DC 11 10 A8                             ld      de,$A810
 362+ C3DF                                      MMUSelectLayer1
 362+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 363+ C3E3 CD 80 E0                             call	l1_print_at
 364+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 365+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 366+ C3EC 11 10 B0                             ld      de,$B010
 367+ C3EF                                      MMUSelectLayer1
 367+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 368+ C3F3 CD 80 E0                             call	l1_print_at
 369+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 370+ C3F9 C9                                   ret
 371+ C3FA
 372+ C3FA
 373+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 374+ C3FA              ; Handles all the input whilst in the market menu
 375+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 376+ C3FC CD 5A 91                             call    is_key_pressed
 377+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 378+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 379+ C404 CD 5A 91                             call    is_key_pressed
 380+ C407 CC 2C C4                             call    z,mkt_DownPressed
 381+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 382+ C40C CD 5A 91                             call    is_key_pressed
 383+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 384+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 385+ C414 CD 5A 91                             call    is_key_pressed
 386+ C417 CC 80 C4                             call    z,mkt_RightPressed
 387+ C41A C9                                   ret
 388+ C41B
 389+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 390+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 391+ C41E FE 00                                cp      0
 392+ C420 C8                                   ret     z
 393+ C421 CD C3 C0                             call    mkt_lowlight_row
 394+ C424 21 74 C0                             ld      hl,mkt_selected_row
 395+ C427 35                                   dec     (hl)
 396+ C428 CD B3 C0                             call    mkt_highlight_row
 397+ C42B C9                                   ret
 398+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 399+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 400+ C42F FE 10                                cp      16
 401+ C431 C8                                   ret     z
 402+ C432 CD C3 C0                             call    mkt_lowlight_row
 403+ C435 21 74 C0                             ld      hl,mkt_selected_row
 404+ C438 34                                   inc     (hl)
 405+ C439 CD B3 C0                             call    mkt_highlight_row
 406+ C43C C9                                   ret
 407+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 409+ C440 21 FF 96                             ld      hl,CargoTonnes
 410+ C443 ED 31                                add     hl,a
 411+ C445 7E                                   ld      a,(hl)
 412+ C446 FE 00                                cp      0
 413+ C448 C8                                   ret     z
 414+ C449 35                                   dec     (hl)
 415+ C44A DD 21 00 E0                          ld      ix,StockFood
 416+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 417+ C451 16 08                                ld      d,8
 418+ C453 5F                                   ld      e,a
 419+ C454 ED 30                                mul
 420+ C456 DD 19                                add     ix,de
 421+ C458                                      MMUSelectStockTable
 421+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 422+ C45C DD 34 01                             inc     (ix+1)
 423+ C45F DD 7E 07                             ld      a,(ix+7)
 424+ C462 FE 30                                cp      48
 425+ C464 20 04                                jr      nz,.UnderATonne
 426+ C466 21 FE 96                             ld      hl,CargoRunningLoad
 427+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 428+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 429+ C46D 16 00                                ld      d,0
 430+ C46F 5F                                   ld      e,a
 431+ C470 CD 42 A0                             call    addDEtoCash
 432+ C473                                      ; DO ADD CASH
 433+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 434+ C476 CD 8B C2                             call    PrintMarketItem
 435+ C479 CD 69 C2                             call    MKT_DisplayCargo
 436+ C47C CD 7A C2                             call    MKT_DisplayCash
 437+ C47F C9                                   ret
 438+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 439+ C480              mkt_RightPressed:       MMUSelectStockTable
 439+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 440+ C484 DD 21 00 E0                          ld      ix,StockFood
 441+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 442+ C48B 16 08                                ld      d,8
 443+ C48D 5F                                   ld      e,a
 444+ C48E ED 30                                mul
 445+ C490 DD 19                                add     ix,de
 446+ C492 4F                                   ld      c,a
 447+ C493 DD 7E 01                             ld      a,(ix+1)
 448+ C496 FE 00                                cp      0
 449+ C498 C8                                   ret     z
 450+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 451+ C49C FE 30                                cp      48
 452+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 453+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 454+ C4A3 21 FF 96                             ld      hl,CargoTonnes
 455+ C4A6 ED 31                                add     hl,a
 456+ C4A8 7E                                   ld      a,(hl)
 457+ C4A9 FE C8                                cp      200
 458+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 459+ C4AC C3 B5 C4                             jp      .CheckCash
 460+ C4AF 2A FD 96     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 461+ C4B2 7C                                   ld      a,h
 462+ C4B3 BD                                   cp      l
 463+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 464+ C4B5 2A F6 96     .CheckCash:             ld      hl,(Cash+2)
 465+ C4B8 7C                                   ld      a,h
 466+ C4B9 B5                                   or      l
 467+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 468+ C4BC 2A F4 96                             ld      hl,(Cash)
 469+ C4BF 7C                                   ld      a,h
 470+ C4C0 FE 00                                cp      0
 471+ C4C2 20 07                                jr      nz,.MoreThanRequired
 472+ C4C4 DD 7E 02                             ld      a,(ix+2)
 473+ C4C7 BD                                   cp      l
 474+ C4C8 30 01                                jr      nc,.MoreThanRequired
 475+ C4CA C9                                   ret                         ; Insufficient Funds
 476+ C4CB 19           .MoreThanRequired:      add     hl,de
 477+ C4CC 7C                                   ld      a,h
 478+ C4CD B3                                   or      e
 479+ C4CE                                      ; check cash can we buy, and cargo capacity
 480+ C4CE DD 35 01                             dec     (ix+1)
 481+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 482+ C4D4 21 FF 96                             ld      hl,CargoTonnes
 483+ C4D7 ED 31                                add     hl,a
 484+ C4D9 34                                   inc     (hl)
 485+ C4DA DD 7E 07                             ld      a,(ix+7)
 486+ C4DD 47                                   ld      b,a
 487+ C4DE FE 30                                cp      48
 488+ C4E0 20 05                                jr      nz,.UnderOneTonne
 489+ C4E2 78                                   ld      a,b
 490+ C4E3 21 FE 96                             ld      hl,CargoRunningLoad
 491+ C4E6 34                                   inc     (hl)
 492+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 493+ C4EA 16 00                                ld      d,0
 494+ C4EC 5F                                   ld      e,a
 495+ C4ED CD 55 A0                             call    subDEfromCash
 496+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 497+ C4F3 CD 8B C2                             call    PrintMarketItem
 498+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 499+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 500+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 986  C4FD
 987  C4FD              ; Bank 66
 988  C4FD
 989  C4FD                  SLOT    DispMarketAddr
 990  C4FD                  PAGE    BankDispMarket
 991  C4FD                  ORG     DispMarketAddr
 992  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 D2 9E  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 98 9F  						DW $0220,name_expanded
   4+ C018 80 0B F2 9A  						DW $0B80,WordUnit
   5+ C01C B0 0B 3B 9D  						DW $0BB0,WordQuantity
   6+ C020 08 13 19 9D  						DW $1308,WordProduct
   7+ C024 60 13 21 9D  						DW $1360,WordUoM
   8+ C028 80 13 25 9D  						DW $1380,WordPrice
   9+ C02C B0 13 49 9D  						DW $13B0,WordStock
  10+ C030 E0 13 45 9D  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD 80 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A F6 96     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A F4 96                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	    ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A FE 96                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:       call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD 80 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD 80 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:        push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD 80 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 FF 96                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 76 9D                             ld		hl,WordIdx
 256+ C2A5 CD 4B 9A                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD 80 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 76 9D                             ld		hl,WordIdx
 264+ C2BF CD 4B 9A                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD 80 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD 80 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD 80 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD 80 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 47 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 53 E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 3F E1     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 E4 93                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 62 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 62 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 62 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 62 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 62 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 62 E2                             call	l2_draw_horz_line
 323+ C38A 3A 96 94     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 13 9F                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD 80 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD 80 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 993  C3D3
 994  C3D3              ; Bank 55
 995  C3D3
 996  C3D3                  SLOT    StockTableAddr
 997  C3D3                  PAGE    BankStockTable
 998  C3D3                  ORG     StockTableAddr
 999  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 67 97                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A B1 94                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A CF 94                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A B1 94                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A CF 94                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
1000  E113
1001  E113              ; Bank 57
1002  E113
1003  E113                  SLOT    LAYER2Addr
1004  E113                  PAGE    BankLAYER2
1005  E113                  ORG     LAYER2Addr
1006  E000
1007  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1008  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
1009  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
1010  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1011  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1012  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
1013  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 62 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 62 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 62 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B3 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B3 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1014  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a
  19+ E23E 7A                                   ld		a,d
  20+ E23F 32 31 E2                             ld 		(l2_horz_lenlo),a
  21+ E242 AF                                   xor 	a
  22+ E243 32 32 E2                             ld 		(l2_horz_lenhi),a
  23+ E246 60                                   ld		h,b
  24+ E247 69                                   ld		l,c
  25+ E248 22 36 E2                             ld		(l2_horz_target),hl
  26+ E24B 21 2A E2     .write_dma:             ld 		hl, l2_horz_line
  27+ E24E 06 10                                ld 		b, l2_horz_cmd_len
  28+ E250 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT
  29+ E252 ED B3                                otir
  30+ E254 C9                                   ret
  31+ E255
  32+ E255              ; "bc = left side row,col, d = length, e = color"
  33+ E255 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E256 C5                                   push 	bc							; save row col
  35+ E257 78                                   ld   	a,b
  36+ E258 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E25B C1                                   pop  	bc
  38+ E25C 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25D D1                                   pop  	de							; get length back
  40+ E25E CD 3A E2                             call    l2_draw_horz_dma
  41+ E261 C9                                   ret
  42+ E262
  43+ E262              ; "l2_draw_horz_line"
  44+ E262              ; "bc = left side row,col, d = length, e = color"
  45+ E262              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E262 7A           l2_draw_horz_line:      ld		a,d
  47+ E263 FE 00                                cp 		0							; if its zero length then just return
  48+ E265 C8           .zerolengthexit:        ret		z
  49+ E266 FE 01        .isitlen1:              cp 		1
  50+ E268 CA 8A E2                             jp 		z,.l2_draw_horz_line_1
  51+ E26B FE 0A        .longenoughtfordma:     cp  10
  52+ E26D C3 55 E2                             jp  l2_draw_horz_dma_bank
  53+ E270 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E272 78                                   ld   	a,b
  55+ E273 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E276 C1                                   pop  	bc
  57+ E277 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E278 69                                   ld   	l,c
  59+ E279 D1                                   pop  	de							; get length back
  60+ E27A 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E27B 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27C 82                                   add  	a,d
  63+ E27D 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27F 3E FF        .clipat255:             ld   	a,$FF
  65+ E281 91                                   sub  	c							; a holds clipped length
  66+ E282 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E283 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E285 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E286 23                                   inc hl
  70+ E287 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E289 C9                                   ret
  72+ E28A 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E28B C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28E
  75+ E28E              ; "l2_draw_horz_line_to"
  76+ E28E              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28E 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28F B9                                   cp 		c
  79+ E290 30 04                                jr		nc, .noswap
  80+ E292 28 07                                jr      z, .singlepixel
  81+ E294 51           .swap:                  ld		d,c
  82+ E295 4F                                   ld		c,a
  83+ E296 7A           .noswap:                ld		a,d
  84+ E297 91                                   sub		c
  85+ E298              ;                        dec		a							; so now its length not offset
  86+ E298 57                                   ld		d,a
  87+ E299 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E29B 7B           .singlepixel:           ld		a,e
  89+ E29C C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29F
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1015  E29F                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29F              ; ">l2_draw_vert_segment"
   2+ E29F              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29F              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29F 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2A0 FE 00        .emptylinecheck:	    cp 		0
   6+ E2A2 C8                                   ret		z
   7+ E2A3 FE 01        .justonepixel	        cp		1
   8+ E2A5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A7 73                                   ld		(hl),e
  10+ E2A8 C9                                   ret
  11+ E2A9              .multiplepixelsLoop:
  12+ E2A9 7C           .endofbankcheck:        ld   	a,h
  13+ E2AA FE 40                                cp   	64
  14+ E2AC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AD 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AF 15                                   dec		d
  18+ E2B0 C8                                   ret		z
  19+ E2B1 18 F6                                jr		.multiplepixelsLoop
  20+ E2B3
  21+ E2B3              ; ">l2_draw_vert_line"
  22+ E2B3              ; ">bc = row col d = length, e = color"
  23+ E2B3 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B6 D0                                   ret 	nc							; can't start off the screen
  26+ E2B7 7A           .emptylinecheck:        ld		a,d
  27+ E2B8 FE 00                                cp		0
  28+ E2BA C8                                   ret		z
  29+ E2BB FE 01                                cp		1
  30+ E2BD 20 04                                jr		nz,.multiplepixels
  31+ E2BF CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C2 C9                                   ret
  33+ E2C3              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C3 7A           .clipto192:             ld		a,d							; get length
  35+ E2C4 80                                   add		a,b							; a= row + length
  36+ E2C5 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C7 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C9 38 08                                jr		c, .noclipneeded
  39+ E2CB 78           .needtoclip             ld		a,b
  40+ E2CC 82                                   add		a,d
  41+ E2CD D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CF 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2D0 7A                                   ld		a,d
  44+ E2D1 94                                   sub		h
  45+ E2D2 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D3              ; so now BC = row col, d = length clipped, e = color
  47+ E2D3 78           .noclipneeded:          ld		a,b
  48+ E2D4 C5 D5                                push	bc,,de
  49+ E2D6 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D9               	 	; we now have poke address and a variable holding current bank number
  50+ E2D9 D1 C1                                pop		bc,,de
  51+ E2DB 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DC 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DD CD 9F E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2E0 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2E1 FE 00                                cp		0
  56+ E2E3 28 27                                jr		z, .doneplotting
  57+ E2E5 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E8 3C                                   inc		a
  59+ E2E9 06 00                                ld		b,0
  60+ E2EB C5 D5                                push	bc,,de
  61+ E2ED CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2F0 D1 C1                                pop     bc,,de
  63+ E2F2 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F3 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F4 CD 9F E2                             call	l2_draw_vert_segment
  66+ E2F7 7A                                   ld		a,d
  67+ E2F8 FE 00                                cp		0
  68+ E2FA 28 10                                jr		z,.doneplotting
  69+ E2FC 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FF 3C                                   inc		a
  71+ E300 06 00                                ld		b,0
  72+ E302 C5 D5                                push	bc,,de
  73+ E304 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E307 D1                                   pop		de
  75+ E308 E1                                   pop		hl							; hl = bc
  76+ E309 CD 9F E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30C C9           .doneplotting:	        ret
  78+ E30D
  79+ E30D              ; ">l2_draw_vert_line_to"
  80+ E30D              ; ">bc = row col d = to position, e = color"
  81+ E30D 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30E BA                                   cp		d
  83+ E30F 38 02                                jr		c, .noyswap
  84+ E311 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E312 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E313 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E314 90                                   sub		b
  88+ E315 3C                                   inc		a			; so now its length not offset
  89+ E316 57                                   ld		d,a
  90+ E317 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E319                                      ; no return needed
  92+ E319
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1016  E319                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E319
   2+ E319              l2_draw_box_to:
   3+ E319              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E319              ; ">NOT IMPLEMENTED YET"
   5+ E319 C9           	ret
   6+ E31A
   7+ E31A              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E31A              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E31A              l2decbstep	EQU $05
  10+ E31A              l2incbstep	EQU	$04
  11+ E31A              l2deccstep	EQU $0D
  12+ E31A              l2inccstep	EQU	$0C
  13+ E31A              		; l2 deltas are signed
  14+ E31A 00 00        l2deltaY	DW	0
  15+ E31C 00 00        l2deltaX	DW	0
  16+ E31E 00           l2deltaYsq	db	0
  17+ E31F 00           l2deltaXsq	db	0
  18+ E320 00           l2deltaYn	db	0
  19+ E321 00           l2deltaXn	db	0
  20+ E322 00           l2deltaYsqn	db	0
  21+ E323 00           l2deltaXsqn	db	0
  22+ E324 00           l2linecolor	db	0
  23+ E325 00 00        l2fraction	dw	0
  24+ E327 00 00        l2e2		dw	0
  25+ E329 00           l2way		db	0
  26+ E32A 00 00        l2targetPtr	dw	0
  27+ E32C              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32C 00 00 00...  l2targetArray1 ds	256
  29+ E42C 00 00 00...  l2targetArray2 ds	256
  30+ E52C              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52C              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52C              ;;    dx =  abs(x1-x0);
  33+ E52C              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52C              ;;    dy = -abs(y1-y0);
  35+ E52C              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52C              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52C              ;;    while (true)   /* loop */
  38+ E52C              ;;        plot(x0, y0);
  39+ E52C              ;;        if (x0==x1 && y0==y1) break;
  40+ E52C              ;;        e2 = 2*err;
  41+ E52C              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52C              ;;            err += dy;
  43+ E52C              ;;            x0 += sx;
  44+ E52C              ;;        end if
  45+ E52C              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52C              ;;            err += dx;
  47+ E52C              ;;            y0 += sy;
  48+ E52C              ;;        end if
  49+ E52C              ;;    end while
  50+ E52C              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52C              ; ">hl will be either l2targetArray1 or 2"
  52+ E52C              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52C FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52E 28 06                                jr		z,l2S_ItsArray1
  55+ E530 21 2C E4                             ld		hl,l2targetArray2
  56+ E533 C3 39 E5                             jp		l2S_setTarget
  57+ E536 21 2C E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E539 22 2A E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53C 32 24 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53F 21 00 00                             ld		hl,0                            ;
  62+ E542 22 1C E3                             ld		(l2deltaX),hl                   ;
  63+ E545 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E548 78           l2S_preSort:            ld		a,b								;
  65+ E549                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E549 BA          >                        cp      d
  65+ E54A DA 52 E5    >                        jp		c,l2S_noYSort
  66+ E54D              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54D 60          >                ld		h,b
  66+ E54E 69          >                ld		l,c
  67+ E54F EB                                   ex		de,hl                           ;
  68+ E550                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E550 44          >                ld		b,h
  68+ E551 4D          >                ld		c,l
  69+ E552 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E554 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E556 79           l2S_setXLen:            ld		a,c                             ;
  72+ E557                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E557 BB          >                        cp      e
  72+ E558 DA 64 E5    >                        jp		c,l2S_PosXLen
  73+ E55B 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55C 93                                   sub     e                               ;
  75+ E55D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E560 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E562 18 07                                jr		l2S_XINCDEC
  78+ E564 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E565 91                                   sub		c                               ;
  80+ E566 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E569 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E56B              l2S_XINCDEC:
  83+ E56B 32 D7 E5     	ld		(l2S_adjustCol),a				;
  84+ E56E 32 08 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E571              l2S_setYLen
  86+ E571 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E572 90           	sub		b
  88+ E573 32 1A E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E576              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E576              ldS_FracDYltDX:								;
  91+ E576 2A 1A E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E579 ED 5B 1C E3  	ld		de,(l2deltaX)
  93+ E57D              	ClearCarryFlag
  93+ E57D B7          >				or a
  94+ E57E ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E580 EB           	ex		de,hl
  96+ E581 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E583 FD 6B        	ld		iyl,e
  98+ E585 F2 AA E5     	jp		p,l2S_fracIsPositive
  99+ E588              l2S_fracIsNegative:
 100+ E588              	NegIY
 100+ E588 AF          >                xor a
 100+ E589 FD 95       >                sub iyl
 100+ E58B FD 6F       >                ld iyl,a
 100+ E58D 9F          >                sbc a,a
 100+ E58E FD 94       >                sub iyh
 100+ E590 FD 67       >                ld iyh,a
 101+ E592              	ShiftIYRight1
 101+ E592 FD 7C       >			   ld 	a,iyh
 101+ E594 CB 3F       >			   srl 	a
 101+ E596 FD 67       >			   ld	iyh,a
 101+ E598 FD 7D       >			   ld 	a,iyl
 101+ E59A 1F          >			   rra
 101+ E59B FD 6F       >			   ld	iyl,a
 102+ E59D              	NegIY
 102+ E59D AF          >                xor a
 102+ E59E FD 95       >                sub iyl
 102+ E5A0 FD 6F       >                ld iyl,a
 102+ E5A2 9F          >                sbc a,a
 102+ E5A3 FD 94       >                sub iyh
 102+ E5A5 FD 67       >                ld iyh,a
 103+ E5A7 C3 B5 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5AA              l2S_fracIsPositive:
 105+ E5AA              	ShiftIYRight1
 105+ E5AA FD 7C       >			   ld 	a,iyh
 105+ E5AC CB 3F       >			   srl 	a
 105+ E5AE FD 67       >			   ld	iyh,a
 105+ E5B0 FD 7D       >			   ld 	a,iyl
 105+ E5B2 1F          >			   rra
 105+ E5B3 FD 6F       >			   ld	iyl,a
 106+ E5B5              l2S_SkipCalcInc:
 107+ E5B5              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B5 2A 2A E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B8 78           	ld		a,b
 110+ E5B9 ED 31        	add		hl,a
 111+ E5BB 71           	ld		(hl),c
 112+ E5BC              l2S_CheckIfEnd:
 113+ E5BC DD 7C        	ld		a,ixh
 114+ E5BE              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BE B8          >                        cp     b
 114+ E5BF D2 C5 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C2 C3 C9 E5     	jp		l2S_Continue
 116+ E5C5              l2S_CheckXPos:
 117+ E5C5 79           	ld		a,c
 118+ E5C6              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C6 DD BD       >                   cp    ixl
 118+ E5C8 D0          >                   ret	 nc
 119+ E5C9              l2S_Continue:
 120+ E5C9              l2S_HNegative:
 121+ E5C9 FD 7C        	ld		a,iyh
 122+ E5CB CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CD 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CF              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CF 3A 1A E3     	ld		a,(l2deltaY)
 126+ E5D2 16 00        	ld		d,0
 127+ E5D4 5F           	ld		e,a
 128+ E5D5 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D7              l2S_adjustCol:
 130+ E5D7 00           	nop										; this is our inc/dec of X
 131+ E5D8 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5DA              l2S_ErrNotNegative:
 133+ E5DA FD 7C        	ld		a,iyh
 134+ E5DC FD B5        	or		iyl
 135+ E5DE              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DE FE 00       >				cp	0
 135+ E5E0 CA F9 E5    >				jp	z,l2S_ErrZero
 136+ E5E3              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E3              	lddeiy
 137+ E5E3 FD 54       >                ld		d,iyh
 137+ E5E5 FD 5D       >                ld		e,iyl
 138+ E5E7 EB           	ex		de,hl
 139+ E5E8 16 00        	ld		d,0
 140+ E5EA 3A 1C E3     	ld		a,(l2deltaX)
 141+ E5ED 5F           	ld		e,a
 142+ E5EE              	ClearCarryFlag
 142+ E5EE B7          >				or a
 143+ E5EF ED 52        	sbc		hl,de
 144+ E5F1 EB           	ex		de,hl
 145+ E5F2              	ldiyde
 145+ E5F2 FD 62       >                ld		iyh,d
 145+ E5F4 FD 6B       >                ld		iyl,e
 146+ E5F6              l2S_adjustRow:									; move Y down by one
 147+ E5F6 04           	inc		b
 148+ E5F7 18 BC        	jr		l2S_Loop
 149+ E5F9              l2S_ErrZero:
 150+ E5F9 2A 1C E3     	ld		hl,(l2deltaX)
 151+ E5FC EB           	ex		de,hl
 152+ E5FD 2A 1A E3     	ld		hl,(l2deltaY)
 153+ E600              	ClearCarryFlag
 153+ E600 B7          >				or a
 154+ E601 ED 52        	sbc		hl,de
 155+ E603 EB           	ex		de,hl
 156+ E604              	ldiyde
 156+ E604 FD 62       >                ld		iyh,d
 156+ E606 FD 6B       >                ld		iyl,e
 157+ E608              l2S_adjustCol2:
 158+ E608 00           	nop										; update X and Y
 159+ E609 04           	inc		b
 160+ E60A 18 A9        	jr		l2S_Loop
 161+ E60C
 162+ E60C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E60C 32 24 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60F 21 00 00                             ld		hl,0                            ;
 165+ E612 22 1C E3                             ld		(l2deltaX),hl                   ;
 166+ E615 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E618 78           l2D_preSort:            ld		a,b								;
 168+ E619                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E619 BA          >                        cp      d
 168+ E61A DA 22 E6    >                        jp		c,l2D_noYSort
 169+ E61D              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61D 60          >                ld		h,b
 169+ E61E 69          >                ld		l,c
 170+ E61F EB                                   ex		de,hl                           ;
 171+ E620                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E620 44          >                ld		b,h
 171+ E621 4D          >                ld		c,l
 172+ E622 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E624 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E626 79           l2D_setXLen:            ld		a,c                             ;
 175+ E627                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E627 BB          >                        cp      e
 175+ E628 DA 34 E6    >                        jp		c,l2D_PosXLen
 176+ E62B 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E62C 93                                   sub     e                               ;
 178+ E62D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E630 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E632 18 07                                jr		l2D_XINCDEC
 181+ E634 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E635 91                                   sub		c                               ;
 183+ E636 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E639 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E63B 32 AA E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63E 32 DB E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E641 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E642 90                                   sub		b
 189+ E643 32 1A E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E646              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E646 2A 1A E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E649 ED 5B 1C E3                          ld		de,(l2deltaX)
 193+ E64D                                      ClearCarryFlag
 193+ E64D B7          >				or a
 194+ E64E ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E650 EB                                   ex		de,hl
 196+ E651 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E653 FD 6B                                ld		iyl,e
 198+ E655 F2 7A E6                             jp		p,l2D_fracIsPositive
 199+ E658              l2D_fracIsNegative:     NegIY
 199+ E658 AF          >                xor a
 199+ E659 FD 95       >                sub iyl
 199+ E65B FD 6F       >                ld iyl,a
 199+ E65D 9F          >                sbc a,a
 199+ E65E FD 94       >                sub iyh
 199+ E660 FD 67       >                ld iyh,a
 200+ E662                                      ShiftIYRight1
 200+ E662 FD 7C       >			   ld 	a,iyh
 200+ E664 CB 3F       >			   srl 	a
 200+ E666 FD 67       >			   ld	iyh,a
 200+ E668 FD 7D       >			   ld 	a,iyl
 200+ E66A 1F          >			   rra
 200+ E66B FD 6F       >			   ld	iyl,a
 201+ E66D                                      NegIY
 201+ E66D AF          >                xor a
 201+ E66E FD 95       >                sub iyl
 201+ E670 FD 6F       >                ld iyl,a
 201+ E672 9F          >                sbc a,a
 201+ E673 FD 94       >                sub iyh
 201+ E675 FD 67       >                ld iyh,a
 202+ E677 C3 85 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E67A              l2D_fracIsPositive:     ShiftIYRight1
 203+ E67A FD 7C       >			   ld 	a,iyh
 203+ E67C CB 3F       >			   srl 	a
 203+ E67E FD 67       >			   ld	iyh,a
 203+ E680 FD 7D       >			   ld 	a,iyl
 203+ E682 1F          >			   rra
 203+ E683 FD 6F       >			   ld	iyl,a
 204+ E685              l2D_SkipCalcInc:
 205+ E685 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E687 3A 24 E3                             ld		a,(l2linecolor)     			;
 207+ E68A CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68D D1 C1                                pop     bc,,de
 209+ E68F DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E691                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E691 B8          >                        cp     b
 210+ E692 D2 98 E6    >                        jp		nc,l2D_CheckXPos
 211+ E695 C3 9C E6                             jp		l2D_Continue
 212+ E698 79           l2D_CheckXPos:          ld		a,c
 213+ E699                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E699 DD BD       >                  cp      ixl
 213+ E69B C8          >                  ret     z
 214+ E69C              l2D_Continue:
 215+ E69C FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69E CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6A0 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6A2 3A 1A E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A5 16 00                                ld		d,0
 220+ E6A7 5F                                   ld		e,a
 221+ E6A8 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6AA 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6AB 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AD FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AF FD B5                                or		iyl
 226+ E6B1                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6B1 FE 00       >				cp	0
 226+ E6B3 CA CC E6    >				jp	z,l2D_ErrZero
 227+ E6B6              l2D_ErrPositive:		lddeiy
 227+ E6B6 FD 54       >                ld		d,iyh
 227+ E6B8 FD 5D       >                ld		e,iyl
 228+ E6BA EB                                   ex		de,hl
 229+ E6BB 16 00                                ld		d,0
 230+ E6BD 3A 1C E3                             ld		a,(l2deltaX)
 231+ E6C0 5F                                   ld		e,a
 232+ E6C1                                      ClearCarryFlag
 232+ E6C1 B7          >				or a
 233+ E6C2 ED 52                                sbc		hl,de
 234+ E6C4 EB                                   ex		de,hl
 235+ E6C5                                      ldiyde
 235+ E6C5 FD 62       >                ld		iyh,d
 235+ E6C7 FD 6B       >                ld		iyl,e
 236+ E6C9 04           l2D_adjustRow:			inc		b
 237+ E6CA 18 B9                                jr		l2D_Loop
 238+ E6CC 2A 1C E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CF EB                                   ex		de,hl
 240+ E6D0 2A 1A E3                             ld		hl,(l2deltaY)
 241+ E6D3                                      ClearCarryFlag
 241+ E6D3 B7          >				or a
 242+ E6D4 ED 52                                sbc		hl,de
 243+ E6D6 EB                                   ex		de,hl
 244+ E6D7                                      ldiyde
 244+ E6D7 FD 62       >                ld		iyh,d
 244+ E6D9 FD 6B       >                ld		iyl,e
 245+ E6DB 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6DC 04                                   inc		b
 247+ E6DD 18 A6                                jr		l2D_Loop
 248+ E6DF              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DF
 250+ E6DF
 251+ E6DF
 252+ E6DF
 253+ E6DF              ;Loin:				; BBC version of line draw
 254+ E6DF              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DF              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DF              ;	ld		ixh,0							; ixh = s
 257+ E6DF              ;	ld		iyh,0							; iyh = swap
 258+ E6DF              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DF              ;LoinCalcDeltaX:
 260+ E6DF              ;	ld		a,e
 261+ E6DF              ;	sub		c								; a = deltaX
 262+ E6DF              ;	JumpIfPositive LoinPosDx
 263+ E6DF              ;LoinNegDx:
 264+ E6DF              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DF              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DF              ;LoinPosDx:
 267+ E6DF              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DF              ;LoinCalcDeltaY:
 269+ E6DF              ;	ld		a,d
 270+ E6DF              ;	sub		b								; a= deltaY
 271+ E6DF              ;	JumpIfPositive LoinPosDy
 272+ E6DF              ;LoinNegDy:
 273+ E6DF              ;	neg
 274+ E6DF              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DF              ;LoinPosDy:
 276+ E6DF              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DF              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DF              ;LoinSTPx:									; step along X
 279+ E6DF              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DF              ;LoinSTPxSwapCoords:
 281+ E6DF              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DF              ;	ld		a,l								; save l flags
 283+ E6DF              ;	ex		de,hl							; save de to hl
 284+ E6DF              ;	lddebc									; Point2 = point1
 285+ E6DF              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DF              ;	ld		l,a								; get back l flags
 287+ E6DF              ;LoinSTPxCorrectOrder:
 288+ E6DF              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DF              ;	ld		a,iyl							; get delta Y back
 290+ E6DF              ;	ld		iy1,$FE							; roll counter
 291+ E6DF              ;LionSTPxRollQ:
 292+ E6DF              ;	sla		a								; highest bit of delta-Y
 293+ E6DF              ;	jp		c,LoinSTPxSteep
 294+ E6DF              ;	cp		ixl								; compare with DeltaX
 295+ E6DF              ;	jp		cs,LoinSTPxShallow
 296+ E6DF              ;LoinSTPxSteep:								;; LI4
 297+ E6DF              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DF              ;	scf										; force carry flag set
 299+ E6DF              ;LoinSTPxShallow:							;; LI5
 300+ E6DF              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DF              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DF              ;	inc		ihl								; DeltaX += 1
 303+ E6DF              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DF              ;	ld		a,d
 305+ E6DF              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DF              ;	ld		a,iyh							; swap flag
 307+ E6DF              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DF              ;LoinSTPxX1Dec:
 309+ E6DF              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DF              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DF              ;	sub		b
 312+ E6DF              ;	if
 313+ E6DF              ;
 314+ E6DF              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DF              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DF              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DF              ;86 81                   STX &81		\ Q
 318+ E6DF              ;.LIL1	\ roll Q
 319+ E6DF              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DF              ;B0 04                   BCS LI4		\ steep
 321+ E6DF              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DF              ;90 03                   BCC LI5		\ shallow
 323+ E6DF              ;.LI4	\ steep
 324+ E6DF              ;E5 1B                   SBC &1B		\ P
 325+ E6DF              ;38                      SEC
 326+ E6DF              ;.LI5	\ shallow
 327+ E6DF              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DF              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DF              ;A6 1B                   LDX &1B		\ P
 330+ E6DF              ;E8                      INX 		\ Xreg is width
 331+ E6DF              ;A5 37                   LDA &37		\ Y2
 332+ E6DF              ;E5 35                   SBC &35		\ Y1
 333+ E6DF              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DF              ;A5 90                   LDA &90		\ SWAP
 335+ E6DF              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DF              ;CA                      DEX
 337+ E6DF              ;.LIL2	\ counter X width
 338+ E6DF              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DF              ;.LI6	\ Xreg correct
 342+ E6DF              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DF              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DF              ;66 82                   ROR &82		\ R
 345+ E6DF              ;A5 07                   LDA &07		\ SC
 346+ E6DF              ;69 08                   ADC #8		\ next column
 347+ E6DF              ;85 07                   STA &07		\ SC
 348+ E6DF              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DF              ;A5 83                   LDA &83		\ S
 350+ E6DF              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DF              ;85 83                   STA &83		\ S
 352+ E6DF              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DF              ;88                      DEY
 354+ E6DF              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DF              ;C6 08                   DEC &08		\ SC+1
 356+ E6DF              ;A0 07                   LDY #7
 357+ E6DF              ;.LIC2	\ skip Y adjustment
 358+ E6DF              ;CA                      DEX
 359+ E6DF              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DF              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DF              ;60                      RTS
 362+ E6DF              ;
 363+ E6DF              ;.DOWN	\ Line is going to the right and down
 364+ E6DF              ;A5 90                   LDA &90		\ SWAP
 365+ E6DF              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DF              ;CA                      DEX
 367+ E6DF              ;.LIL3	\ counter X width
 368+ E6DF              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DF              ;.LI9	\ no swap
 372+ E6DF              ;46 82                   LSR &82		\ R
 373+ E6DF              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DF              ;66 82                   ROR &82		\ R
 375+ E6DF              ;A5 07                   LDA &07		\ SC
 376+ E6DF              ;69 08                   ADC #8		\ next column
 377+ E6DF              ;85 07                   STA &07		\ SC
 378+ E6DF              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DF              ;A5 83                   LDA &83		\ S
 380+ E6DF              ;65 81                   ADC &81		\ Q
 381+ E6DF              ;85 83                   STA &83		\ S
 382+ E6DF              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DF              ;C8                      INY
 384+ E6DF              ;C0 08                   CPY #8
 385+ E6DF              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DF              ;E6 08                   INC &08		\ SC+1
 387+ E6DF              ;A0 00                   LDY #0
 388+ E6DF              ;.LIC3	\ skipped Y adjustment
 389+ E6DF              ;CA                      DEX
 390+ E6DF              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DF              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DF              ;60                      RTS
 393+ E6DF              ;
 394+ E6DF              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DF              ;A4 35                   LDY &35		\ Y1
 396+ E6DF              ;98                      TYA
 397+ E6DF              ;A6 34                   LDX &34		\ X1
 398+ E6DF              ;C4 37                   CPY &37		\ Y2
 399+ E6DF              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DF              ;C6 90                   DEC &90		\ SWAP
 401+ E6DF              ;A5 36                   LDA &36		\ X2
 402+ E6DF              ;85 34                   STA &34		\ X1
 403+ E6DF              ;86 36                   STX &36		\ X2
 404+ E6DF              ;AA                      TAX
 405+ E6DF              ;A5 37                   LDA &37		\ Y2
 406+ E6DF              ;85 35                   STA &35		\ Y1
 407+ E6DF              ;84 37                   STY &37		\ Y2
 408+ E6DF              ;A8                      TAY
 409+ E6DF              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DF              ;4A                      LSR A
 411+ E6DF              ;4A                      LSR A
 412+ E6DF              ;4A                      LSR A
 413+ E6DF              ;09 60                   ORA #&60
 414+ E6DF              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DF              ;8A                      TXA 		\ X1
 416+ E6DF              ;29 F8                   AND #&F8
 417+ E6DF              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DF              ;8A                      TXA
 419+ E6DF              ;29 07                   AND #7		\ mask index
 420+ E6DF              ;AA                      TAX
 421+ E6DF              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DF              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DF              ;A5 35                   LDA &35		\ Y1
 424+ E6DF              ;29 07                   AND #7
 425+ E6DF              ;A8                      TAY
 426+ E6DF              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DF              ;A2 01                   LDX #1		\ roll counter
 428+ E6DF              ;86 1B                   STX &1B	    	\ P
 429+ E6DF              ;.LIL4	\ roll P
 430+ E6DF              ;0A                      ASL A
 431+ E6DF              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DF              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DF              ;90 03                   BCC LI14	\ less than Q
 434+ E6DF              ;.LI13	\ do subtraction
 435+ E6DF              ;E5 81                   SBC &81		\ Q
 436+ E6DF              ;38                      SEC
 437+ E6DF              ;.LI14	\ less than Q
 438+ E6DF              ;26 1B                   ROL &1B		\ P
 439+ E6DF              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DF              ;A6 81                   LDX &81		\ Q
 441+ E6DF              ;E8                      INX 		\ adjust height
 442+ E6DF              ;A5 36                   LDA &36		\ X2
 443+ E6DF              ;E5 34                   SBC &34		\ X1
 444+ E6DF              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DF              ;18                      CLC
 446+ E6DF              ;A5 90                   LDA &90		\ SWAP
 447+ E6DF              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DF              ;CA                      DEX
 449+ E6DF              ;.LIL5	\ skipped first point, counter X
 450+ E6DF              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DF              ;.LI17	\ skipped first point
 454+ E6DF              ;88                      DEY
 455+ E6DF              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DF              ;C6 08                   DEC &08		\ SC+1
 457+ E6DF              ;A0 07                   LDY #7		\ new char
 458+ E6DF              ;	.LI16	\ skipped hi adjust
 459+ E6DF              ;A5 83                   LDA &83		\ S
 460+ E6DF              ;65 1B                   ADC &1B		\ P
 461+ E6DF              ;85 83                   STA &83		\ S
 462+ E6DF              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DF              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DF              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DF              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DF              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DF              ;69 08                   ADC #8		\ next char below
 468+ E6DF              ;85 07                   STA &07		\ SC
 469+ E6DF              ;.LIC5	\ same column
 470+ E6DF              ;CA                      DEX
 471+ E6DF              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DF              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DF              ;60                      RTS
 474+ E6DF              ;
 475+ E6DF              ;.LFT	\ going left
 476+ E6DF              ;A5 90                   LDA &90		\ SWAP
 477+ E6DF              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DF              ;CA                      DEX 		\ reduce height
 479+ E6DF              ;.LIL6	\ counter X height
 480+ E6DF              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DF              ;.LI18
 484+ E6DF              ;88                      DEY
 485+ E6DF              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DF              ;C6 08                   DEC &08		\ SC+1
 487+ E6DF              ;A0 07                   LDY #7		\ rest char row
 488+ E6DF              ;.LI19	\ skipped hi adjust
 489+ E6DF              ;A5 83                   LDA &83		\ S
 490+ E6DF              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DF              ;85 83                   STA &83		\ S
 492+ E6DF              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DF              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DF              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DF              ;26 82                   ROL &82		\ R
 496+ E6DF              ;A5 07                   LDA &07		\ SC
 497+ E6DF              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DF              ;85 07                   STA &07		\ SC
 499+ E6DF              ;18                      CLC
 500+ E6DF              ;.LIC6	\ no overflow
 501+ E6DF              ;CA                      DEX 		\ height
 502+ E6DF              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DF              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DF              ;.HL6
 505+ E6DF              ;60                      RTS 		\ end Line drawing
 506+ E6DF
 507+ E6DF
 508+ E6DF              ;;l2_draw_diagonalopt:
 509+ E6DF              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DF              ;;	push	af
 511+ E6DF              ;;	ld		a,b
 512+ E6DF              ;;	cp		d
 513+ E6DF              ;;	jr		z,.RegularDiagnonal
 514+ E6DF              ;;.CheckHorz:
 515+ E6DF              ;;	ld		a,c
 516+ E6DF              ;;	cp		e
 517+ E6DF              ;;	jr		z,.horizontalLine
 518+ E6DF              ;;.RegularDiagnonal:
 519+ E6DF              ;;	pop		af
 520+ E6DF              ;;	call diag
 521+ E6DF
 522+ E6DF
 523+ E6DF              ;;l2_signed_mul2a:
 524+ E6DF              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DF              ;;	TEST	$80
 526+ E6DF              ;;	jr		nz, .negativecalc
 527+ E6DF              ;;.positivecalc:
 528+ E6DF              ;;	ccf
 529+ E6DF              ;;	rla
 530+ E6DF              ;;	ret
 531+ E6DF              ;;.negativecalc:
 532+ E6DF              ;;	neg
 533+ E6DF              ;;	ccf
 534+ E6DF              ;;	rla
 535+ E6DF              ;;	neg
 536+ E6DF              ;;	ret
 537+ E6DF              ;;
 538+ E6DF              ;;l2_signed_mul2atohl:
 539+ E6DF              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DF              ;;	TEST	$80
 541+ E6DF              ;;	jr		nz, .negativecalc
 542+ E6DF              ;;.positivecalc:
 543+ E6DF              ;;	ld		hl,0
 544+ E6DF              ;;	ld		l,a
 545+ E6DF              ;;	add		hl,a
 546+ E6DF              ;;	ret
 547+ E6DF              ;;.negativecalc:
 548+ E6DF              ;;	neg
 549+ E6DF              ;;	ld		hl,0
 550+ E6DF              ;;	ld		l,a
 551+ E6DF              ;;	neghl
 552+ E6DF              ;;	ret
 553+ E6DF              ;;
 554+ E6DF              ;;l2_e2fractionby2:
 555+ E6DF              ;;	ld 		hl,(l2fraction)
 556+ E6DF              ;;	push	de
 557+ E6DF              ;;	ld		d,h
 558+ E6DF              ;;	ld		e,l
 559+ E6DF              ;;	add		hl,de
 560+ E6DF              ;;	pop		de
 561+ E6DF              ;;	ld		(l2e2),hl
 562+ E6DF              ;;	ret
 563+ E6DF
 564+ E6DF
 565+ E6DF
 566+ E6DF
 567+ E6DF
 568+ E6DF              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DF              ;;//.catchLoop:
 570+ E6DF              ;;//	jp .catchLoop
 571+ E6DF              ;;//.continue:
 572+ E6DF              ;;//    ld      A,D
 573+ E6DF              ;;//    sub     H
 574+ E6DF              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DF              ;;//.DXNegative:
 576+ E6DF              ;;//    neg
 577+ E6DF              ;;//.DXPositive:
 578+ E6DF              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DF              ;;//    ld      A,E
 580+ E6DF              ;;//    sub     L
 581+ E6DF              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DF              ;;//.DYNegative:
 583+ E6DF              ;;//    neg
 584+ E6DF              ;;//.DYPositive:
 585+ E6DF              ;;//    sub     B               ;|delta_y|
 586+ E6DF              ;;//	push	af
 587+ E6DF              ;;//	jr		c,.DeltaX
 588+ E6DF              ;;//.DeltaY
 589+ E6DF              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DF              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DF              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DF              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DF              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DF              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DF              ;;//.DeltaX:
 596+ E6DF              ;;//	ld		a,d
 597+ E6DF              ;;//	sub		h
 598+ E6DF              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DF              ;;//.TestDX:
 600+ E6DF              ;;//	ex		de,hl
 601+ E6DF              ;;//.TestDY:
 602+ E6DF              ;;//	ld		a,e
 603+ E6DF              ;;//	sub		l
 604+ E6DF              ;;//    ld      A,$01
 605+ E6DF              ;;//    jr      NC,.StoreA
 606+ E6DF              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DF              ;;//.StoreA:
 608+ E6DF              ;;//        ld      (l2way),A
 609+ E6DF              ;;//.InitLine:
 610+ E6DF              ;;//        ld      B,H
 611+ E6DF              ;;//        ld      C,L
 612+ E6DF              ;;//        ld      A,E
 613+ E6DF              ;;//        sub     L
 614+ E6DF              ;;//        jr      NC,.EndInit
 615+ E6DF              ;;//        ld      A,L
 616+ E6DF              ;;//        ld      L,E
 617+ E6DF              ;;//        ld      E,A
 618+ E6DF              ;;//.EndInit:
 619+ E6DF              ;;//        ld      A,E
 620+ E6DF              ;;//        sub     L
 621+ E6DF              ;;//        rla
 622+ E6DF              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DF              ;;//        add     A,H
 624+ E6DF              ;;//        sub     D
 625+ E6DF              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DF              ;;//        add     A,H
 627+ E6DF              ;;//        sub     D
 628+ E6DF              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DF              ;;//.Loop:
 630+ E6DF              ;;//        ld      A,B
 631+ E6DF              ;;//        sub     D
 632+ E6DF              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DF              ;;//        pop     AF
 634+ E6DF              ;;//        bit     7,A
 635+ E6DF              ;;//        push    AF
 636+ E6DF              ;;//        push    AF
 637+ E6DF              ;;//        push    BC
 638+ E6DF              ;;//        jr      Z,.DrawPoint
 639+ E6DF              ;;//        ld      A,B
 640+ E6DF              ;;//        ld      B,C
 641+ E6DF              ;;//        ld      C,A
 642+ E6DF              ;;//.DrawPoint:
 643+ E6DF              ;;//		push	hl
 644+ E6DF              ;;//		pushbcdeaf
 645+ E6DF              ;;//		ld		b,e
 646+ E6DF              ;;//		ld		c,d
 647+ E6DF              ;;//	ld 		a,(l2linecolor)
 648+ E6DF              ;;//	call	l2_plot_pixel
 649+ E6DF              ;;//		popafdebc
 650+ E6DF              ;;//		pop		hl
 651+ E6DF              ;;//        pop     BC
 652+ E6DF              ;;//        pop     AF
 653+ E6DF              ;;//.TestD:
 654+ E6DF              ;;//        bit     7,E
 655+ E6DF              ;;//        jr      NZ,.Case1
 656+ E6DF              ;;//.Case2:                          ;d >= 0
 657+ E6DF              ;;//        ld      A,E
 658+ E6DF              ;;//        add     A,H
 659+ E6DF              ;;//        ld      E,A
 660+ E6DF              ;;//        ld      A,(l2way)
 661+ E6DF              ;;//        add     A,C
 662+ E6DF              ;;//        ld      C,A
 663+ E6DF              ;;//        jr      .EndLoop
 664+ E6DF              ;;//.Case1:                          ;d < 0
 665+ E6DF              ;;//        ld      A,E
 666+ E6DF              ;;//        add     A,L
 667+ E6DF              ;;//        ld      E,A
 668+ E6DF              ;;//.EndLoop:
 669+ E6DF              ;;//        inc     B
 670+ E6DF              ;;//        jr      .Loop
 671+ E6DF              ;;//.EndLine:
 672+ E6DF              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DF              ;;//        pop     HL              ;can be removed
 674+ E6DF              ;;//        pop     DE              ;can be removed
 675+ E6DF              ;;//        ret
 676+ E6DF
 677+ E6DF              ;;	ld		(.l2yadjust),a
 678+ E6DF              ;;	call	calcdeltax:
 679+ E6DF              ;;	ld		(.l2xadjust),a
 680+ E6DF              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DF              ;;	push	hl
 682+ E6DF              ;;	push	de
 683+ E6DF              ;;	ld		hl,(l2deltaX)
 684+ E6DF              ;;	ld		de,(l2deltaY)
 685+ E6DF              ;;	add		hl,de
 686+ E6DF              ;;	ld		(l2fraction),hl
 687+ E6DF              ;;	pop		de
 688+ E6DF              ;;	pop		hl
 689+ E6DF              ;;.mainloop:
 690+ E6DF              ;;	push	bc
 691+ E6DF              ;;	push	de
 692+ E6DF              ;;	ld 		a,(l2linecolor)
 693+ E6DF              ;;	call	l2_plot_pixel
 694+ E6DF              ;;	pop		de
 695+ E6DF              ;;	pop		bc
 696+ E6DF              ;;.arewefinishedtest
 697+ E6DF              ;;	ld		a,b
 698+ E6DF              ;;	cp		d
 699+ E6DF              ;;	jr		nz,.notthereyet
 700+ E6DF              ;;	ld		a,c
 701+ E6DF              ;;	cp		e
 702+ E6DF              ;;	ret		z
 703+ E6DF              ;;.notthereyet:
 704+ E6DF              ;;	push	de
 705+ E6DF              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DF              ;;	pop		de
 707+ E6DF              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DF              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DF              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DF              ;;	or		a							;
 711+ E6DF              ;;	sbc		hl,de						;
 712+ E6DF              ;;	pop		de
 713+ E6DF              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DF              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DF              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DF              ;;.dodycalc:
 717+ E6DF              ;;	ld		hl,(l2fraction)
 718+ E6DF              ;;	push	de
 719+ E6DF              ;;	ld		de,(l2deltaY)
 720+ E6DF              ;;	add		hl,de
 721+ E6DF              ;;	ld		(l2fraction),de
 722+ E6DF              ;;	pop		de
 723+ E6DF              ;;.l2yadjust:
 724+ E6DF              ;;	nop
 725+ E6DF              ;;.skipdycalc:
 726+ E6DF              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DF              ;;	ld		hl,(l2e2)
 728+ E6DF              ;;	push	de							;
 729+ E6DF              ;;	ld		de,(l2deltaX)				;
 730+ E6DF              ;;	or		a							; clear carry flag
 731+ E6DF              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DF              ;;	pop		de
 733+ E6DF              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DF              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DF              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DF              ;;.dodxcalc:
 737+ E6DF              ;;	ld		hl,(l2fraction)
 738+ E6DF              ;;	push	de
 739+ E6DF              ;;	ld		de,(l2deltaX)
 740+ E6DF              ;;	add		hl,de
 741+ E6DF              ;;	ld		(l2fraction),de
 742+ E6DF              ;;	pop		de
 743+ E6DF              ;;.l2xadjust:
 744+ E6DF              ;;	nop
 745+ E6DF              ;;.skipdxcalc:
 746+ E6DF              ;;	jr 		.mainloop
 747+ E6DF
 748+ E6DF
 749+ E6DF              ;;/l2_draw_diagonalold:
 750+ E6DF              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DF              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DF              ;;/.sortycoords:
 753+ E6DF              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DF              ;;/	cp		d
 755+ E6DF              ;;/	jr		nc, .nocoordswap
 756+ E6DF              ;;/.swapcoords:
 757+ E6DF              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DF              ;;/	lddebc
 759+ E6DF              ;;/	ldbchl
 760+ E6DF              ;;/.nocoordswap:
 761+ E6DF              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DF              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DF              ;;/	ld		(l2deltaY),a
 764+ E6DF              ;;/	neg									; DEBUG
 765+ E6DF              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DF              ;;/	neg									; DEBUG
 767+ E6DF              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DF              ;;/    ld		a,c
 769+ E6DF              ;;/	cp		e
 770+ E6DF              ;;/	jr		c, .x1GTx0
 771+ E6DF              ;;/.x1LTx0
 772+ E6DF              ;;/	ld		a,c
 773+ E6DF              ;;/	sub		e
 774+ E6DF              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DF              ;;/	neg									; DEBUG
 776+ E6DF              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DF              ;;/	neg									; DEBUG
 778+ E6DF              ;;/	ld		a,l2incbstep
 779+ E6DF              ;;/	jr		.setlayershift0
 780+ E6DF              ;;/.x1GTx0:
 781+ E6DF              ;;/	ld		a,e
 782+ E6DF              ;;/	sub		c
 783+ E6DF              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DF              ;;/	neg									; DEBUG
 785+ E6DF              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DF              ;;/	neg									; DEBUG
 787+ E6DF              ;;/	ld		a,l2decbstep
 788+ E6DF              ;;/.setlayershift0:
 789+ E6DF              ;;/	ld		a,0
 790+ E6DF              ;;/	pushbcde
 791+ E6DF              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DF              ;;/	popdebc
 793+ E6DF              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DF              ;;/.dymuliplyby2:
 795+ E6DF              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DF              ;;/	call	l2_signed_mul2a
 797+ E6DF              ;;/	ld		(l2deltaYsq),a
 798+ E6DF              ;;/	neg									; DEBUG
 799+ E6DF              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DF              ;;/	neg									; DEBUG
 801+ E6DF              ;;/.dxmuliplyby2:
 802+ E6DF              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DF              ;;/	call	l2_signed_mul2a
 804+ E6DF              ;;/	ld		(l2deltaXsq),a
 805+ E6DF              ;;/	neg									; DEBUG
 806+ E6DF              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DF              ;;/	neg									; DEBUG
 808+ E6DF              ;;/.plotfirstpixel:
 809+ E6DF              ;;/	pushbcde
 810+ E6DF              ;;/	ld a,(l2linecolor)
 811+ E6DF              ;;/	call	l2_plot_pixel
 812+ E6DF              ;;/	popdebc
 813+ E6DF              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DF              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DF              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DF              ;;/	cp		(hl)
 817+ E6DF              ;;/	jp		m,	.signset
 818+ E6DF              ;;/.signclear:
 819+ E6DF              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DF              ;;/	jr		.dxGTdybranch
 821+ E6DF              ;;/.signset:
 822+ E6DF              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DF              ;;/.dxGTdybranch:
 824+ E6DF              ;;/	ld		a,(l2deltaYsq)
 825+ E6DF              ;;/	ld		hl,l2deltaX
 826+ E6DF              ;;/	sub		(hl)
 827+ E6DF              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DF              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DF              ;;/	ld		a,c
 830+ E6DF              ;;/	cp		e
 831+ E6DF              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DF              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DF              ;;/	ld		a,(l2fraction)
 834+ E6DF              ;;/	TEST	$80
 835+ E6DF              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DF              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DF              ;;/	ld		hl,l2deltaXsq
 838+ E6DF              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DF              ;;/	ld		(l2fraction),a
 840+ E6DF              ;;/.BranchAskipYstep:
 841+ E6DF              ;;/.l2stepx1:
 842+ E6DF              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DF              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DF              ;;/	ld		hl,l2deltaYsq
 845+ E6DF              ;;/	add		a,(hl)
 846+ E6DF              ;;/	ld		(l2fraction),a
 847+ E6DF              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DF              ;;/	pushbcde
 849+ E6DF              ;;/	ld a,(l2linecolor)
 850+ E6DF              ;;/	call	l2_plot_pixel
 851+ E6DF              ;;/	popdebc
 852+ E6DF              ;;/.BranchAloop:
 853+ E6DF              ;;/	jr		.BranchAwhile
 854+ E6DF              ;;/.dxLTEdybranch:
 855+ E6DF              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DF              ;;/	ld		hl, l2deltaY
 857+ E6DF              ;;/	sub		(hl)
 858+ E6DF              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DF              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DF              ;;/	ld		a,b
 861+ E6DF              ;;/	cp		d
 862+ E6DF              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DF              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DF              ;;/	ld		a,(l2fraction)
 865+ E6DF              ;;/	TEST	$80
 866+ E6DF              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DF              ;;/.l2stepx2
 868+ E6DF              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DF              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DF              ;;/	ld		hl,l2deltaYsq
 871+ E6DF              ;;/	sub		(hl)
 872+ E6DF              ;;/	ld		(l2fraction),a
 873+ E6DF              ;;/.BranchBskipYstep:
 874+ E6DF              ;;/	ld		hl, l2deltaYsq
 875+ E6DF              ;;/	add		a,(hl)
 876+ E6DF              ;;/	ld		(l2fraction),a
 877+ E6DF              ;;/	inc		b							; ++l2_vy0;
 878+ E6DF              ;;/.BranchBplotBCColA:
 879+ E6DF              ;;/	pushbcde
 880+ E6DF              ;;/	ld a,(l2linecolor)
 881+ E6DF              ;;/	call	l2_plot_pixel
 882+ E6DF              ;;/	popdebc
 883+ E6DF              ;;/.BranchBloop:
 884+ E6DF              ;;/	jr		.BranchBwhile
 885+ E6DF
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1017  E6DF                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DF
   2+ E6DF
   3+ E6DF
   4+ E6DF 00 00        l2trianglebc	        DW 0
   5+ E6E1 00 00        l2trianglede	        DW 0
   6+ E6E3 00 00        l2trianglehl	        DW 0
   7+ E6E5
   8+ E6E5              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E5 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E9 CD 0C E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6EC F1                                   pop		af
  12+ E6ED D1                                   pop		de						; swap DE and HL
  13+ E6EE E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6EF C1                                   pop		bc
  15+ E6F0 D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6F2 F5                                   push	af
  17+ E6F3 CD 0C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F6 F1                                   pop		af
  19+ E6F7 C1                                   pop		bc						; Now bc = original de
  20+ E6F8 D1                                   pop		de						; de = original hl
  21+ E6F9 CD 0C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6FC C9                                   ret
  23+ E6FD
  24+ E6FD
  25+ E6FD
  26+ E6FD
  27+ E6FD
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1018  E6FD                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6FD              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6FD              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6FD              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6FD DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FF 7D                                   ld		a,l
   6+ E700 32 24 E3                             ld		(l2linecolor),a
   7+ E703 79                                   ld		a,c
   8+ E704 BB                                   cp		e
   9+ E705 30 08                                jr		nc, .x2gtex1
  10+ E707 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E70A DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E70D 18 06                                jr		.storepoints
  13+ E70F DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E712 DD 2E 01                             ld		ixl,1
  15+ E715 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E718 DD 7C                                ld		a,ixh
  17+ E71A 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E71B 54                                   ld		d,h
  19+ E71C CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71F E1 D1 C1                             pop		bc,,de,,hl
  21+ E722 C5 E5                                push	bc,,hl
  22+ E724 54                                   ld		d,h                             ; now its bc -> he
  23+ E725 DD 7D                                ld		a,ixl
  24+ E727 CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E72A E1 C1                                pop		bc,,hl
  26+ E72C 50           .SaveForLoop:           ld		d,b
  27+ E72D 5C                                   ld		e,h								; save loop counters
  28+ E72E D5                                   push	de								; de = y0ycommon
  29+ E72F 21 2C E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E732 78                                   ld		a,b
  31+ E733 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E735 7E                                   ld		a,(hl)							;
  33+ E736 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E737 21 2C E4                             ld      hl,l2targetArray2
  35+ E73A 78                                   ld      a,b
  36+ E73B ED 31                                add     hl,a
  37+ E73D              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E73D 7E                                   ld		a,(hl)
  39+ E73E 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73F 3A 24 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E742 5F                                   ld		e,a								; de = to colour
  42+ E743 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E744 25                                   dec		h
  44+ E745 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E746 CD 8E E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E749 E1                                   pop		hl
  47+ E74A C1                                   pop		bc
  48+ E74B 04                                   inc		b								; down a rowc
  49+ E74C D1                                   pop		de								; de = from to (and b also = current)
  50+ E74D 14                                   inc		d
  51+ E74E 7B                                   ld		a,e								; while e >= d
  52+ E74F BA                                   cp		d
  53+ E750 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E752 C9                                   ret
  55+ E753
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1019  E753                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E753
   2+ E753 00 00        l2_circle_pos		DW 0
   3+ E755 00           l2_circle_colour	DB 0
   4+ E756 00           l2_circle_radius	DB 0
   5+ E757 00           l2_circle_x			DB 0
   6+ E758 00           l2_circle_y			DB 0
   7+ E759 00           l2_circle_d			DB 0
   8+ E75A
   9+ E75A              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E75A 7B           l2_draw_circle:     ld		a,e
  11+ E75B 32 01 E8                         ld		(.PlotPixel+1),a
  12+ E75E 7A                               ld		a,d								; get radius
  13+ E75F A7                               and		a
  14+ E760 C8                               ret		z
  15+ E761 FE 01                            cp		1
  16+ E763 CA 0D E8                         jp		z,CircleSinglepixel
  17+ E766 ED 43 90 E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E76A DD 67                            ld		ixh,a							; ixh = raidus
  19+ E76C DD 2E 00                         ld		ixl,0
  20+ E76F 26 00        .calcd:	            ld		h,0
  21+ E771 6F                               ld		l,a
  22+ E772 29                               add		hl,hl							; hl = r * 2
  23+ E773 EB                               ex		de,hl							; de = r * 2
  24+ E774 21 03 00                         ld		hl,3
  25+ E777 A7                               and		a
  26+ E778 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E77A 44                               ld		b,h
  28+ E77B 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E77C 21 01 00     .calcdelta:         ld		hl,1
  30+ E77F 16 00                            ld		d,0
  31+ E781 DD 5D                            ld		e,ixl
  32+ E783 A7                               and		a
  33+ E784 ED 52                            sbc		hl,de
  34+ E786 11 01 00     .Setde1:            ld		de,1
  35+ E789 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E78B DD BD                            cp		ixl
  37+ E78D D8                               ret		c
  38+ E78E D9           .ProcessLoop:	    exx
  39+ E78F 11 00 00     .Plot1:             ld		de,0
  40+ E792 7B                               ld		a,e
  41+ E793 DD 85                            add		a,ixl
  42+ E795 4F                               ld		c,a
  43+ E796 7A                               ld		a,d
  44+ E797 DD 84                            add		a,ixh
  45+ E799 47                               ld		b,a
  46+ E79A CD 00 E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E79D 7B           .Plot2:             ld 		a,e
  48+ E79E DD 95                            sub 	ixl
  49+ E7A0 4F                               ld 		c,a
  50+ E7A1 7A                               ld 		a,d
  51+ E7A2 DD 84                            add 	a,ixh
  52+ E7A4 47                               ld		b,a
  53+ E7A5 CD 00 E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A8 7B           .Plot3:             ld 		a,e
  55+ E7A9 DD 85                            add		a,ixl
  56+ E7AB 4F                               ld 		c,a
  57+ E7AC 7A                               ld 		a,d
  58+ E7AD DD 94                            sub 	ixh
  59+ E7AF 47                               ld 		b,a
  60+ E7B0 CD 00 E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7B3 7B           .Plot4:             ld 		a,e
  62+ E7B4 DD 95                            sub 	ixl
  63+ E7B6 4F                               ld 		c,a
  64+ E7B7 7A                               ld 		a,d
  65+ E7B8 DD 94                            sub 	ixh
  66+ E7BA 47                               ld 		b,a
  67+ E7BB CD 00 E8                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BE 7A           .Plot5:	            ld 		a,d
  69+ E7BF DD 85                            add 	a,ixl
  70+ E7C1 47                               ld 		b,a
  71+ E7C2 7B                               ld 		a,e
  72+ E7C3 DD 84                            add 	a,ixh
  73+ E7C5 4F                               ld 		c,a
  74+ E7C6 CD 00 E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C9 7A           .Plot6:	            ld 		a,d
  76+ E7CA DD 95                            sub 	ixl
  77+ E7CC 47                               ld 		b,a
  78+ E7CD 7B                               ld 		a,e
  79+ E7CE DD 84                            add 	a,ixh
  80+ E7D0 4F                               ld 		c,a
  81+ E7D1 CD 00 E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D4 7A           .Plot7:	            ld 		a,d
  83+ E7D5 DD 85                            add 	a,ixl
  84+ E7D7 47                               ld 		b,a
  85+ E7D8 7B                               ld 		a,e
  86+ E7D9 DD 94                            sub 	ixh
  87+ E7DB 4F                               ld 		c,a
  88+ E7DC CD 00 E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DF 7A           .Plot8:	            ld 		a,d
  90+ E7E0 DD 95                            sub 	ixl
  91+ E7E2 47                               ld		b,a
  92+ E7E3 7B                               ld 		a,e
  93+ E7E4 DD 94                            sub 	ixh
  94+ E7E6 4F                               ld 		c,a
  95+ E7E7 CD 00 E8                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7EA D9                               exx
  97+ E7EB CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7ED 28 03                            jr z,   .draw_circle_1
  99+ E7EF 19                               add hl,de			; Delta=Delta+D1
 100+ E7F0 18 05                            jr      .draw_circle_2		;
 101+ E7F2 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7F3 03                               inc     bc
 103+ E7F4 03                               inc     bc				; D2=D2+2
 104+ E7F5 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F7 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F8 03                               inc bc
 107+ E7F9 13                               inc de				; D1=D1+2
 108+ E7FA 13                               inc de
 109+ E7FB DD 2C                            inc ixl				; X=X+1
 110+ E7FD C3 89 E7                         jp      .CircleLoop
 111+ E800 3A 55 E7     .PlotPixel:         ld		a,(l2_circle_colour)
 112+ E803 D5 C5 E5                         push	de,,bc,,hl
 113+ E806 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E809 E1 C1 D1                         pop		de,,bc,,hl
 115+ E80C C9                               ret
 116+ E80D 7B           CircleSinglepixel:  ld		a,e
 117+ E80E CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E811 C9                               ret
 119+ E812
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1020  E812                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E812
   2+ E812 00           l2_circle_dblx		DB 0
   3+ E813 00           l2_circle_dbly		DB 0
   4+ E814
   5+ E814              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E814 7B           l2_draw_circle_fill:    ld		a,e
   7+ E815 32 AB E8                             ld		(.LineColour+1),a
   8+ E818 7A                                   ld		a,d								; get radius
   9+ E819 A7                                   and		a
  10+ E81A C8                                   ret		z
  11+ E81B FE 01                                cp		1
  12+ E81D CA 0D E8                             jp		z,CircleSinglepixel
  13+ E820 ED 43 4A E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E824 DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E826 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E829 26 00        .calcd:	                ld		h,0
  17+ E82B 6F                                   ld		l,a
  18+ E82C 29                                   add		hl,hl							; hl = r * 2
  19+ E82D EB                                   ex		de,hl							; de = r * 2
  20+ E82E 21 03 00                             ld		hl,3
  21+ E831 A7                                   and		a
  22+ E832 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E834 44                                   ld		b,h
  24+ E835 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E836 21 01 00     .calcdelta              ld		hl,1
  26+ E839 16 00                                ld		d,0
  27+ E83B DD 5D                                ld		e,ixl
  28+ E83D A7                                   and		a
  29+ E83E ED 52                                sbc		hl,de
  30+ E840 11 01 00     .Setde1	                ld		de,1
  31+ E843 DD 7C        .CircleLoop:            ld		a,ixh
  32+ E845 DD BD                                cp		ixl
  33+ E847 D8                                   ret		c
  34+ E848 D9           .ProcessLoop:	        exx
  35+ E849 11 00 00     .Line1:                 ld		de,0
  36+ E84C 7B                                   ld 		a,e
  37+ E84D DD 95                                sub 	ixl
  38+ E84F 4F                                   ld 		c,a
  39+ E850 7A                                   ld 		a,d
  40+ E851 DD 84                                add 	a,ixh
  41+ E853 47                                   ld		b,a
  42+ E854                                      ;; TODO ADD DOUBLE X CALC
  43+ E854 D5                                   push	de
  44+ E855 DD 55                                ld		d,ixl
  45+ E857 CB 22                                sla		d
  46+ E859 CD A6 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E85C D1                                   pop		de
  48+ E85D 7B           .Line2:                 ld 		a,e
  49+ E85E DD 95                                sub		ixl
  50+ E860 4F                                   ld 		c,a
  51+ E861 7A                                   ld 		a,d
  52+ E862 DD 94                                sub 	ixh
  53+ E864 47                                   ld 		b,a
  54+ E865                                      ;; TODO ADD DOUBLE X CALC
  55+ E865 D5                                   push	de
  56+ E866 DD 55                                ld		d,ixl
  57+ E868 CB 22                                sla		d
  58+ E86A CD A6 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E86D D1                                   pop		de
  60+ E86E 7B           .Line3:	                ld 		a,e
  61+ E86F DD 94                                sub		ixh
  62+ E871 4F                                   ld 		c,a
  63+ E872 7A                                   ld 		a,d
  64+ E873 DD 85                                add 	a,ixl
  65+ E875 47                                   ld 		b,a
  66+ E876                                      ;; TODO ADD DOUBLE Y CALC
  67+ E876 D5                                   push	de
  68+ E877 DD 54                                ld		d,ixh
  69+ E879 CB 22                                sla		d
  70+ E87B CD A6 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E87E D1                                   pop		de
  72+ E87F 7B           .Line4:	                ld 		a,e
  73+ E880 DD 94                                sub		ixh
  74+ E882 4F                                   ld 		c,a
  75+ E883 7A                                   ld 		a,d
  76+ E884 DD 95                                sub 	ixl
  77+ E886 47                                   ld 		b,a
  78+ E887                                      ;; TODO ADD DOUBLE Y CALC
  79+ E887 D5                                   push	de
  80+ E888 DD 54                                ld		d,ixh
  81+ E88A CB 22                                sla		d
  82+ E88C CD A6 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88F D1                                   pop		de
  84+ E890 D9                                   exx
  85+ E891 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E893 28 03                                jr z,.draw_circle_1
  87+ E895 19                                   add hl,de			; Delta=Delta+D1
  88+ E896 18 05                                jr .draw_circle_2		;
  89+ E898 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E899 03                                   inc bc
  91+ E89A 03                                   inc bc				; D2=D2+2
  92+ E89B DD 25                                dec ixh				; Y=Y-1
  93+ E89D 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E89E 03                                   inc bc
  95+ E89F 13                                   inc de				; D1=D1+2
  96+ E8A0 13                                   inc de
  97+ E8A1 DD 2C                                inc ixl				; X=X+1
  98+ E8A3 C3 43 E8                             jp .CircleLoop
  99+ E8A6 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8AA 3A 55 E7     .LineColour:	        ld		a,(l2_circle_colour)
 101+ E8AD 5F                                   ld      e,a
 102+ E8AE CD 62 E2                             call 	l2_draw_horz_line
 103+ E8B1 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8B5 C9                                   ret
 105+ E8B6
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1021  E8B6                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B6              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B6 08           l2_draw_any_line:       ex		af,af'
   3+ E8B7 79                                   ld		a,c
   4+ E8B8 BB                                   cp		e
   5+ E8B9 28 08                                jr		z,.HorizontalLine
   6+ E8BB 78                                   ld		a,b
   7+ E8BC BA                                   cp		d
   8+ E8BD 28 0A                                jr		z,.VerticalLine
   9+ E8BF              ; use jp and get a free ret instruction optimisation
  10+ E8BF 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8C0 C3 0C E6                             jp		l2_draw_diagonal
  12+ E8C3
  13+ E8C3 08           .HorizontalLine:        ex		af,af'
  14+ E8C4 53                                   ld		d,e				; set d as target right pixel
  15+ E8C5 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C6 C3 8E E2                             jp		l2_draw_horz_line_to
  17+ E8C9 08           .VerticalLine:          ex		af,af'
  18+ E8CA 5F                                   ld		e,a				; e holds colour on this call
  19+ E8CB C3 0D E3                             jp		l2_draw_vert_line_to
  20+ E8CE
  21+ E8CE
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1022  E8CE                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8CE              ; ClearLines (LL155)
   2+ E8CE              ;   y = 0
   3+ E8CE              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8CE              ;   exit if XX20 < 4
   5+ E8CE              ;   ++y
   6+ E8CE              ;   do
   7+ E8CE              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8CE              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8CE              ;		++y
  10+ E8CE              ;	until Y > XX20
  11+ E8CE
  12+ E8CE              clearLines:
  13+ E8CE              layer2_clearLines:
  14+ E8CE 3A F0 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8D1 47                                   ld		b,a
  16+ E8D2 21 FE C1                             ld		hl,UbnkLineArray
  17+ E8D5 C5           clearLinesLoop:         push	bc
  18+ E8D6 7E                                   ld		a,(hl)
  19+ E8D7 23                                   inc		hl
  20+ E8D8 4F                                   ld		c,a
  21+ E8D9 7E                                   ld		a,(hl)
  22+ E8DA 23                                   inc		hl
  23+ E8DB 47                                   ld		b,a
  24+ E8DC 7E                                   ld		a,(hl)
  25+ E8DD 23                                   inc		hl
  26+ E8DE 5F                                   ld		e,a
  27+ E8DF 7E                                   ld		a,(hl)
  28+ E8E0 23                                   inc		hl
  29+ E8E1 57                                   ld		d,a
  30+ E8E2 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E4 E5                                   push	hl
  32+ E8E5 CD B6 E8                             call    l2_draw_any_line
  33+ E8E8 E1                                   pop		hl
  34+ E8E9 C1                                   pop		bc
  35+ E8EA 10 E9                                djnz	clearLinesLoop
  36+ E8EC C9                                   ret
  37+ E8ED
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1023  E8ED                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8ED              ; ******************************************************************************
   2+ E8ED              ;
   3+ E8ED              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8ED              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8ED              ;
   6+ E8ED              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8ED              ;
   8+ E8ED              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8ED              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8ED              ;	before using line drawing.
  11+ E8ED              ;
  12+ E8ED              ;	The routine checks the range of specified coordinates which is the
  13+ E8ED              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8ED              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8ED              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8ED              ;	visible part will be drawn.
  17+ E8ED              ;
  18+ E8ED              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8ED              ;
  20+ E8ED              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8ED              ;
  22+ E8ED              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8ED              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8ED              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8ED              ;
  26+ E8ED              ;	OUT:	None.
  27+ E8ED              ;
  28+ E8ED              ;	Registers	used	by routine:
  29+ E8ED              ;		   N	:	B, loop counter
  30+ E8ED              ;		   i	:	line	balance variable
  31+ E8ED              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8ED              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8ED              ;	  (x0,y0)	:	(h,l)
  34+ E8ED              ;	  direc_x	:	d, horisontal step increment
  35+ E8ED              ;	  direc_y	:	e, vertical step increment
  36+ E8ED              ;		 ddx	:	b, horisontal step increment
  37+ E8ED              ;		 ddy	:	c, vertical step increment
  38+ E8ED              ;
  39+ E8ED              ;		DE, A work registers.
  40+ E8ED              ;
  41+ E8ED              ; The algorithm in pseudo-code:
  42+ E8ED              ;
  43+ E8ED              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8ED              ;	x = ABS x: y =	ABS y
  45+ E8ED              ;
  46+ E8ED              ;	if x	>= y
  47+ E8ED              ;		if x+y=0 then return
  48+ E8ED              ;		H = x
  49+ E8ED              ;		L = y
  50+ E8ED              ;		ddx = direc_x
  51+ E8ED              ;		ddy = 0
  52+ E8ED              ;	else
  53+ E8ED              ;		H = y
  54+ E8ED              ;		L = x
  55+ E8ED              ;		ddx = 0
  56+ E8ED              ;		ddy = direc_y
  57+ E8ED              ;	endif
  58+ E8ED              ;
  59+ E8ED              ;	B = H
  60+ E8ED              ;	i = INT(B/2)
  61+ E8ED              ;	FOR N=B TO 1 STEP -1
  62+ E8ED              ;		i = i + L
  63+ E8ED              ;		if i	< H
  64+ E8ED              ;			ix =	ddx
  65+ E8ED              ;			iy =	ddy
  66+ E8ED              ;		else
  67+ E8ED              ;			i = i - H
  68+ E8ED              ;			ix =	direc_x
  69+ E8ED              ;			iy =	direc_y
  70+ E8ED              ;		endif
  71+ E8ED              ;		x0 =	x0 +	ix
  72+ E8ED              ;		y0 =	y0 +	iy
  73+ E8ED              ;		plot	(x0,y0)
  74+ E8ED              ;	NEXT	N
  75+ E8ED              ;
  76+ E8ED              ;
  77+ E8ED              ;	Registers	changed after return:
  78+ E8ED              ;		..BCDEHL/IXIY/af......	same
  79+ E8ED              ;		AF....../..../..bcdehl	different
  80+ E8ED              ;
  81+ E8ED DF           line_gfx_colour db $DF
  82+ E8EE 00 00        line_gfx_coords	dw 0
  83+ E8F0              LineHLtoDE:
  84+ E8F0 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8F1 FE C0                                cp	192
  86+ E8F3 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F5 7A                                   ld	a,d
  88+ E8F6 FE C0                                cp	192
  89+ E8F8 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8FA 22 EE E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8FD E5                                   push	hl
  92+ E8FE D5                                   push	de
  93+ E8FF 6C                                   ld	l,h				; L = x0
  94+ E900 62                                   ld	h,d				; H = x1
  95+ E901 7C           distanceX:		        ld	a,h
  96+ E902 95                                   sub	l
  97+ E903 6F                                   ld	l,a
  98+ E904 26 00                                ld	h,0
  99+ E906 30 02                                jr	nc, distanceXDone
 100+ E908 26 FF                                ld	h,-1
 101+ E90A D1           distanceXDone:          pop	de
 102+ E90B E3                                   ex	(sp),hl			; L = y0
 103+ E90C 63                                   ld	h,e				; H = y1
 104+ E90D 7C           distanceY:		        ld	a,h
 105+ E90E 95                                   sub	l
 106+ E90F 6F                                   ld	l,a
 107+ E910 26 00                                ld	h,0
 108+ E912 30 02                                jr	nc, distanceYDone
 109+ E914 26 FF                                ld	h,-1
 110+ E916 D1           distanceYDone:          pop	de
 111+ E917 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E918 CD 1C E9                             call	DrawLineRelative			; draw line...
 113+ E91B C9           exit_line:              ret
 114+ E91C
 115+ E91C              ; ***************************************************************************
 116+ E91C              ;
 117+ E91C              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E91C              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E91C              ;
 120+ E91C              ; OUT: h - l distance in	HL
 121+ E91C              ;
 122+ E91C
 123+ E91C D5           DrawLineRelative:       push	de
 124+ E91D E5                                   push	hl
 125+ E91E D9                                   exx
 126+ E91F E1                                   pop	hl					; get relative	horisontal movement
 127+ E920 CD 8B E9                             call	sgn
 128+ E923 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E924 CD 98 E9                             call	absValue
 130+ E927 45                                   ld	b,l					; x = ABS(x)
 131+ E928 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E929 CD 8B E9                             call	sgn
 133+ E92C 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E92D CD 98 E9                             call	absValue
 135+ E930 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E931              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E931 C5                                   push	bc
 138+ E932 D9                                   exx
 139+ E933 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E934 7C                                   ld	a,h
 141+ E935 BD                                   cp	l
 142+ E936 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E938 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E939 28 4F                                jr	z, exit_draw		;		return
 145+ E93B D9           y_lessorequal_x:        exx						;	else
 146+ E93C 42                                   ld	b,d					;		ddx = direc_x
 147+ E93D 0E 00                                ld	c,0					;		ddy = 0
 148+ E93F D9                                   exx
 149+ E940 18 08                                jr	init_drawloop		; else
 150+ E942 7C           x_smaller_y:	        ld	a,h
 151+ E943 65                                   ld	h,l					;	H = y
 152+ E944 6F                                   ld	l,a					;	L = x
 153+ E945 D9                                   exx
 154+ E946 06 00                                ld	b,0					;	ddx = 0
 155+ E948 4B                                   ld	c,e					;	ddy = direc_y
 156+ E949 D9                                   exx
 157+ E94A 44           init_drawloop:	        ld	b,h
 158+ E94B 4C                                   ld	c,h					; B = H
 159+ E94C CB 39                                srl	c					; i = INT(B/2)
 160+ E94E              										; FOR N=B	TO 1	STEP	-1
 161+ E94E 79           drawloop:		        ld	a,c
 162+ E94F 85                                   add	a,l
 163+ E950 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E952 BC                                   cp	h
 165+ E953 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E955 4F                                   ld	c,a					;		i = i + L
 167+ E956 D9                                   exx
 168+ E957 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E958 D9                                   exx
 170+ E959 18 05                                jr	check_plot			;	else
 171+ E95B 94           i_greater:		        sub	h					;		i = i - H
 172+ E95C 4F                                   ld	c,a
 173+ E95D D9                                   exx
 174+ E95E D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E95F D9                                   exx						;	endif
 176+ E960 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E961 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E962 2A EE E8                             ld	hl,(line_gfx_coords)
 179+ E965 7D                                   ld	a,l
 180+ E966 83                                   add	a,e					;
 181+ E967 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E968 7A                                   ld	a,d
 183+ E969 3C                                   inc	a
 184+ E96A 84                                   add	a,h
 185+ E96B 38 04                                jr	c, check_range		;	check out	of range
 186+ E96D 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E96F 18 02                                jr	plot_point
 188+ E971 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E973
 190+ E973 3D           plot_point:             dec	a
 191+ E974 C5                                   push	bc
 192+ E975 F5                                   push	af
 193+ E976 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E977 4D                                   ld		c,l
 195+ E978 3A ED E8                             ld		a,(line_gfx_colour)
 196+ E97B ED 43 EE E8                          ld      (line_gfx_coords),bc
 197+ E97F CD FF E0                             call	l2_plot_pixel
 197+ E982
 198+ E982 F1                                   pop		af
 199+ E983 C1                                   pop		bc
 200+ E984 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E985 10 C7                                djnz	drawloop		; NEXT N
 202+ E987 18 01                                jr	exit_draw
 203+ E989
 204+ E989 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E98A C9           exit_draw:		        ret
 206+ E98B
 207+ E98B
 208+ E98B              ; ******************************************************************************
 209+ E98B              ;
 210+ E98B              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E98B              ;
 212+ E98B              ;	IN:		HL =	integer
 213+ E98B              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E98B              ;
 215+ E98B              ;	Registers	changed after return:
 216+ E98B              ;	..BCDEHL/IXIY	same
 217+ E98B              ;	AF....../....	different
 218+ E98B              ;
 219+ E98B 7C           sgn:				    ld	a,h
 220+ E98C B5                                   or	l
 221+ E98D C8                                   ret	z				; integer	is zero, return 0...
 222+ E98E CB 7C                                bit	7,h
 223+ E990 20 03                                jr	nz, negative_int
 224+ E992 3E 01                                ld	a,1
 225+ E994 C9                                   ret
 226+ E995 3E FF        negative_int:		    ld	a,-1
 227+ E997 C9                                   ret
 228+ E998
 229+ E998
 230+ E998              ; ******************************************************************************
 231+ E998              ;
 232+ E998              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E998              ;
 234+ E998              ;	IN:		HL =	integer
 235+ E998              ;	OUT:		HL =	converted	integer
 236+ E998              ;
 237+ E998              ;	Registers	changed after return:
 238+ E998              ;	A.BCDE../IXIY	same
 239+ E998              ;	.F....HL/....	different
 240+ E998              ;
 241+ E998 CB 7C        absValue:			    bit	7,h
 242+ E99A C8                                   ret	z				; integer	is positive...
 243+ E99B D5                                   push	de
 244+ E99C EB                                   ex	de,hl
 245+ E99D 21 00 00                             ld	hl,0
 246+ E9A0 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E9A1 ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9A3 D1                                   pop	de
 249+ E9A4 C9                                   ret
 250+ E9A5
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1024  E9A5              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1025  E9A5                  SLOT    CMDRDATAAddr
1026  E9A5                  PAGE    BankCmdrData
1027  E9A5                  ORG     CMDRDATAAddr, BankCmdrData
1028  E000                  INCLUDE "./Commander/CommanderData.asm"
# file opened: ./Commander/CommanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 83 94     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 8F 94                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 8D 94                             ld		(PresentSystemX),a
  19+ E03A 32 DA 94                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 8E 94                             ld		(PresentSystemY),a
  22+ E042 32 DB 94                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 9E 93                             ld		hl,IndexedWork
  25+ E048 CD 67 97                             call	copy_galaxy_to_system
  26+ E04B CD 27 98                             call	find_present_system
  27+ E04E CD 8A 97                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 F4 96                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 F6 96                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 F8 96                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 96 94                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 0F 97                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 19 97                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 8C 94                             ld		(VarTP),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 FA 96                             ld		(LaserList+1),a
  48+ E080 32 FB 96                             ld		(LaserList+2),a
  49+ E083 32 FC 96                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 F9 96                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 12 97                             ld		(ECMPresent),a
  54+ E08F 32 29 97                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 15 97                             ld		(EnergyBomb),a
  56+ E095 32 16 97                             ld		(ExtraEnergyUnit),a
  57+ E098 32 17 97                             ld		(DockingComputer),a
  58+ E09B 32 18 97                             ld		(GalacticHyperDrive),a
  59+ E09E 32 14 97                             ld		(EscapePod),a
  60+ E0A1 32 9F 94                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 B2 94                             ld		(KillTally),a
  62+ E0A7 3D                                   dec		a								; now a = 255
  63+ E0A8 32 B6 94                             ld		(ForeShield),a
  64+ E0AB 32 B7 94                             ld		(AftShield),a
  65+ E0AE 32 B8 94                             ld		(PlayerEnergy),a
  66+ E0B1 3E 14                                ld		a,20
  67+ E0B3 32 FD 96                             ld		(CargoBaySize),a
  68+ E0B6 CD BA E0                             call	ZeroCargo						; Clear out cargo
  69+ E0B9                                      ; more to DO
  70+ E0B9 C9                                   ret
  71+ E0BA
# file closed: ./Commander/CommanderData.asm
1029  E0BA                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0BA              ZeroCargo:
   2+ E0BA AF           		xor		a							;zero-out cargo, including gems.
   3+ E0BB 06 10        		ld		b,16						;all the way up to alien items
   4+ E0BD 21 FF 96     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C0              .ZeroLoop:
   6+ E0C0 77                   ld      (hl),a
   7+ E0C1 23           		inc		hl
   8+ E0C2 10 FC        		djnz	.ZeroLoop
   9+ E0C4 C9           		ret
  10+ E0C5
# file closed: ./Commander/zero_player_cargo.asm
1030  E0C5              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1031  E0C5                  SLOT    LAYER1Addr
1032  E0C5                  PAGE    BankLAYER1
1033  E0C5                  ORG     LAYER1Addr, BankLAYER1
1034  E000
1035  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD D4 8F                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1036  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls:                 xor		a
   2+ E048 21 00 40     l1_cls_to_a:            ld		hl,	$4000
   3+ E04B 11 00 18                             ld		de, $1800
   4+ E04E CD D4 8F                             call	memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_attr_cls:            xor		a
   8+ E053 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
   9+ E056 11 00 03                             ld		de, $0300
  10+ E059 CD D4 8F                             call	memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  14+ E060 ED 79                                out		(c),a
  15+ E062 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1037  E063                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E063              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E063 D5 E5        l1_print_char:          push	de,,hl
   3+ E065 ED 94                                pixelad								; hl = address of de
   4+ E067 E5                                   push	hl							; save hl for loop
   5+ E068 26 00                                ld		h,0
   6+ E06A 6F                                   ld		l,a
   7+ E06B 29                                   add		hl,hl						; * 2
   8+ E06C 29                                   add		hl,hl						; * 4
   9+ E06D 29                                   add		hl,hl						; * 8 to get byte address
  10+ E06E ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E072 EB                                   ex		de,hl						; save address into de
  12+ E073 E1                                   pop		hl							; get back hl for loop
  13+ E074 06 08                                ld		b,8							; do 8 rows
  14+ E076 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E077 13                                   inc		de							; next byte
  16+ E078 77                                   ld		(hl),a						; poke to screen
  17+ E079 ED 93                                pixeldn								; Down 1 row
  18+ E07B 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E07D E1 D1                                pop		de,,hl					    ; restore hl
  20+ E07F C9                                   ret
  21+ E080
  22+ E080              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E080              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E080              l1_print_at:
  25+ E080 7E           .PrintLoop:             ld		a,(hl)
  26+ E081 FE 00                                cp		0
  27+ E083 C8                                   ret		z
  28+ E084                                      CallIfAGTENusng " ", l1_print_char
  28+ E084 FE 20       >                        cp      " "
  28+ E086 D4 63 E0    >                        call	nc,l1_print_char
  29+ E089 23                                   inc		hl							; move 1 message character right
  30+ E08A 7B                                   ld		a,e
  31+ E08B C6 08                                add		a,8
  32+ E08D 5F                                   ld		e,a							; move 1 screen character right
  33+ E08E 18 F0                                jr		.PrintLoop
  34+ E090              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E090 C9                                   ret
  36+ E091
  37+ E091              ;l1_print_at_wrap:
  38+ E091              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E091              ;	ld      iyh,e
  40+ E091              ;.PrintLoop:
  41+ E091              ;	ld		a,(hl)
  42+ E091              ;	cp		0
  43+ E091              ;	ret		z
  44+ E091              ;.CountWordCharLen
  45+ E091              ;; Need to change to word wrap, so it will loop through string as before
  46+ E091              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E091              ;; if that is > 238 then force a premature line wrap
  48+ E091              ;
  49+ E091              ;
  50+ E091              ;    push    iy
  51+ E091              ;    call	l1_print_char
  52+ E091              ;    pop     iy
  53+ E091              ;	inc		hl							; move 1 message character right
  54+ E091              ;	ld		a,e
  55+ E091              ;    cp      238
  56+ E091              ;    jr      nc,.NextLine
  57+ E091              ;	add		a,8
  58+ E091              ;	ld		e,a							; move 1 screen character right
  59+ E091              ;	jr		.PrintLoop
  60+ E091              ;.Clearstackandfinish:
  61+ E091              ;	pop		de
  62+ E091              ;	ret
  63+ E091              ;.NextLine:
  64+ E091              ;    ld      a,(hl)
  65+ E091              ;    cp      " "
  66+ E091              ;    ld      e,iyh
  67+ E091              ;    ld      a,d
  68+ E091              ;    add     a,8
  69+ E091              ;    ld      d,a
  70+ E091              ;    jr		.PrintLoop
  71+ E091
  72+ E091              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E091 E5           L1LenWordAtHL:          push    hl
  74+ E092 D5                                   push    de
  75+ E093 7E           .CountLoop:             ld      a,(hl)
  76+ E094 FE 00                                cp      0
  77+ E096 28 0F                                jr      z,.CountDone
  78+ E098 FE 20                                cp      32
  79+ E09A 28 0B                                jr      z,.CountDone
  80+ E09C 7B                                   ld      a,e
  81+ E09D C6 08                                add     a,8
  82+ E09F 5F                                   ld      e,a
  83+ E0A0 FE EE                                cp      238
  84+ E0A2 30 07                                jr      nc,.TooLong
  85+ E0A4 23                                   inc     hl
  86+ E0A5 18 EC                                jr      .CountLoop
  87+ E0A7 D1           .CountDone:             pop     de
  88+ E0A8 E1                                   pop     hl
  89+ E0A9 AF                                   xor     a
  90+ E0AA C9                                   ret
  91+ E0AB D1           .TooLong                pop     de
  92+ E0AC E1                                   pop     hl
  93+ E0AD 3E FF                                ld      a,$FF
  94+ E0AF C9                                   ret
  95+ E0B0
  96+ E0B0 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0B1 FE 00                                cp      0
  98+ E0B3 C8                                   ret     z
  99+ E0B4 FE 20                                cp      32
 100+ E0B6 28 0F                                jr      z,.ItsASpace
 101+ E0B8 FD E5                                push    iy
 102+ E0BA CD 63 E0                             call	l1_print_char
 103+ E0BD FD E1                                pop     iy
 104+ E0BF 7B                                   ld      a,e
 105+ E0C0 C6 08                                add     a,8
 106+ E0C2 5F                                   ld      e,a
 107+ E0C3 23                                   inc     hl
 108+ E0C4 C3 B0 E0                             jp      L1PrintWordAtHL
 109+ E0C7 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E0C8 7B                                   ld      a,e
 111+ E0C9 C6 08                                add     a,8
 112+ E0CB 5F                                   ld      e,a
 113+ E0CC C9                                   ret
 114+ E0CD
 115+ E0CD
 116+ E0CD              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E0CD              ; Now has full word level wrapping
 118+ E0CD FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E0CF 7E           .PrintLoop:             ld		a,(hl)
 120+ E0D0 FE 00                                cp		0
 121+ E0D2 C8                                   ret		z
 122+ E0D3 CD 91 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E0D6 FE FF                                cp      $FF
 124+ E0D8 28 06                                jr      z,.WrapNextLine
 125+ E0DA CD B0 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E0DD              ; Need to change to word wrap, so it will loop through string as before
 127+ E0DD              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E0DD              ; if that is > 238 then force a premature line wrap
 129+ E0DD 18 F0                                jr		.PrintLoop
 130+ E0DF              .Clearstackandfinish:   ;op		de
 131+ E0DF C9                                   ret
 132+ E0E0              .WrapNextLine:
 133+ E0E0 FD 5C        .NextLine:              ld      e,iyh
 134+ E0E2 7A                                   ld      a,d
 135+ E0E3 C6 08                                add     a,8
 136+ E0E5 57                                   ld      d,a
 137+ E0E6 18 E7                                jr		.PrintLoop
 138+ E0E8
 139+ E0E8
# file closed: ./Layer1Graphics/layer1_print_at.asm
1038  E0E8              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1039  E0E8                  SLOT    ShipModelsAddr
1040  E0E8                  PAGE    BankShipModelsA
1041  E0E8              	ORG     ShipModelsAddr, BankShipModelsA
1042  E000                  DEFINE  SHIPBANKA 1
1043  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000                              DEFINE SHIPEQUATES
   3+ E000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   4+ E000              MissileLockLoOffset	    equ 1
   5+ E000              MissileLockHiOffset	    equ 2
   6+ E000              EdgeAddyOffset		    equ 3
   7+ E000              LineX4Offset		    equ 5
   8+ E000              GunVertexOffset		    equ 6
   9+ E000              ExplosionCtOffset	    equ 7
  10+ E000              VertexCtX6Offset	    equ 8
  11+ E000              EdgeCountOffset		    equ 9
  12+ E000              BountyLoOffset		    equ 10
  13+ E000              BountyHiOffset		    equ 11
  14+ E000              FaceCtX4Offset		    equ 12
  15+ E000              DotOffset			    equ 13
  16+ E000              EnergyOffset		    equ 14
  17+ E000              SpeedOffset			    equ 15
  18+ E000              FaceAddyOffset		    equ 16
  19+ E000              QOffset				    equ 18
  20+ E000              LaserOffset			    equ 19
  21+ E000              VerticiesAddyOffset     equ 20
  22+ E000              ShipTypeOffset          equ 22
  23+ E000              ShipNewBitsOffset       equ 23
  24+ E000              ShipDataLength          equ ShipNewBitsOffset+1
  25+ E000
  26+ E000              CobraTablePointer       equ 43
  27+ E000              ;29 faulty
  28+ E000              BankThreshold           equ 16
  29+ E000
  30+ E000                             ENDIF
  31+ E000
  32+ E000              ;GINF:
  33+ E000                                      IFDEF SHIPBANKA
  34+ E000              GetInfo:                                    ; gets pointer to ship data for ship type in a
  35+ E000              GetInfoA:                                   ; gets pointer to ship data for ship type in a
  36+ E000                                      ENDIF
  37+ E000                                      IFDEF SHIPBANKB
  38+ E000 ~            GetInfoB:
  39+ E000                                      ENDIF
  40+ E000                                      IFDEF SHIPBANKC
  41+ E000 ~            GetInfoC:
  42+ E000                                      ENDIF
  43+ E000 4F                                   ld          c,a
  44+ E001 CB 2F                                sra         a
  45+ E003 CB 2F                                sra         a
  46+ E005 CB 2F                                sra         a
  47+ E007 CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  48+ E009 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  49+ E00A 21 7B E0                             ld          hl,ShipModelBankA
  50+ E00D ED 31                                add         hl,a
  51+ E00F 7E                                   ld          a,(hl)
  52+ E010                                      MMUSelectShipModelA
  52+ E010 ED 92 57    >					 nextreg ShipModelMMU,	    a
  53+ E013 79                                   ld          a,c
  54+ E014 50                                   ld          d,b
  55+ E015 1E 10                                ld          e,16
  56+ E017 ED 30                                mul
  57+ E019 93                                   sub         a,e
  58+ E01A 21 7E E0                             ld          hl,ShipModelTable
  59+ E01D ED 31                                add         hl,a
  60+ E01F ED 31                                add         hl,a
  61+ E021 5E                                   ld          e,(hl)
  62+ E022 23                                   inc         hl
  63+ E023 56                                   ld          d,(hl)
  64+ E024 C9                                   ret
  65+ E025
  66+ E025
  67+ E025              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
  68+ E025                                      IFDEF SHIPBANKA
  69+ E025              CopyVerticesDataToUBnk:
  70+ E025              CopyVerticesDataToUBnkA:
  71+ E025                                      ENDIF
  72+ E025                                      IFDEF SHIPBANKB
  73+ E025 ~            CopyVerticesDataToUBnkB:
  74+ E025                                      ENDIF
  75+ E025                                      IFDEF SHIPBANKC
  76+ E025 ~            CopyVerticesDataToUBnkC:
  77+ E025                                      ENDIF
  78+ E025 2A 11 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  79+ E028 11 15 C3                             ld          de,UBnkHullVerticies
  80+ E02B 06 00                                ld          b,0
  81+ E02D 3A 05 C3                             ld			a,(VertexCtX6Addr)
  82+ E030 4F                                   ld          c,a
  83+ E031 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  84+ E032 CD FA 8F                             call        memcopy_dma
  85+ E035 C9                                   ret
  86+ E036
  87+ E036                                      IFDEF SHIPBANKA
  88+ E036              CopyEdgeDataToUBnk:
  89+ E036              CopyEdgeDataToUBnkA:
  90+ E036                                      ENDIF
  91+ E036                                      IFDEF SHIPBANKB
  92+ E036 ~            CopyEdgeDataToUBnkB:
  93+ E036                                      ENDIF
  94+ E036                                      IFDEF SHIPBANKC
  95+ E036 ~            CopyEdgeDataToUBnkC:
  96+ E036                                      ENDIF
  97+ E036 2A 00 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  98+ E039 11 41 C4                             ld          de,UBnkHullEdges
  99+ E03C 06 00                                ld          b,0
 100+ E03E 3A 02 C3                             ld			a,(LineX4Addr)
 101+ E041 4F                                   ld          c,a
 102+ E042 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 103+ E043 CD FA 8F                             call        memcopy_dma
 104+ E046 C9                                   ret
 105+ E047
 106+ E047                                      IFDEF SHIPBANKA
 107+ E047              CopyNormalDataToUBnk:
 108+ E047              CopyNormalDataToUBnkA:
 109+ E047                                      ENDIF
 110+ E047                                      IFDEF SHIPBANKB
 111+ E047 ~            CopyNormalDataToUBnkB:
 112+ E047                                      ENDIF
 113+ E047                                      IFDEF SHIPBANKC
 114+ E047 ~            CopyNormalDataToUBnkC:
 115+ E047                                      ENDIF
 116+ E047 2A 0D C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 117+ E04A 11 F1 C8                             ld          de,UBnkHullNormals
 118+ E04D 06 00                                ld          b,0
 119+ E04F 3A 09 C3                             ld          a,(FaceCtX4Addr)
 120+ E052 4F                                   ld          c,a
 121+ E053 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 122+ E054 CD FA 8F                             call        memcopy_dma
 123+ E057 C9                                   ret
 124+ E058
 125+ E058                                      IFDEF SHIPBANKA
 126+ E058              CopyShipDataToUBnk:
 127+ E058              CopyShipDataToUBnkA:
 128+ E058                                      ENDIF
 129+ E058                                      IFDEF SHIPBANKB
 130+ E058 ~            CopyShipDataToUBnkB:
 131+ E058                                      ENDIF
 132+ E058                                      IFDEF SHIPBANKC
 133+ E058 ~            CopyShipDataToUBnkC:
 134+ E058                                      ENDIF
 135+ E058 32 FC C2                             ld			(UbnkShipType),a			; mark ship type in bank
 136+ E05B 21 0E E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 137+ E05E ED 31                                add         hl,a
 138+ E060 ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 139+ E062 4E                                   ld          c,(hl)
 140+ E063 23                                   inc         hl
 141+ E064 46                                   ld          b,(hl)                      ; bc now equals length of data set
 142+ E065 CD 00 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 143+ E068 EB                                   ex          de,hl                       ; hl = address of Ship Data
 144+ E069 11 FD C2                             ld          de,UBnkHullCopy             ; Universe bank
 145+ E06C 01 18 00                             ld          bc,ShipDataLength
 146+ E06F ED B0                                ldir
 147+ E071 CD 25 E0                             call        CopyVerticesDataToUBnk
 148+ E074 CD 36 E0                             call        CopyEdgeDataToUBnk
 149+ E077 CD 47 E0                             call        CopyNormalDataToUBnk
 150+ E07A C9                                   ret
 151+ E07B
 152+ E07B              ; change to there are two banks
 153+ E07B              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 154+ E07B              ;
 155+ E07B
 156+ E07B
 157+ E07B
 158+ E07B
 159+ E07B              ; Ships in Bank A
 160+ E07B                                       IFDEF SHIPBANKA
 161+ E07B 3B           ShipModelBankA           DB BankShipModelsA
 162+ E07C 43                                    DB BankShipModelsB
 163+ E07D 44                                    DB BankShipModelsC
 164+ E07E                                       ENDIF
 165+ E07E                                       IFDEF SHIPBANKB
 166+ E07E ~            ShipModelBankB           DB BankShipModelsA
 167+ E07E ~                                     DB BankShipModelsB
 168+ E07E ~                                     DB BankShipModelsC
 169+ E07E                                       ENDIF
 170+ E07E                                       IFDEF SHIPBANKC
 171+ E07E ~            ShipModelBankC           DB BankShipModelsA
 172+ E07E ~                                     DB BankShipModelsB
 173+ E07E ~                                     DB BankShipModelsC
 174+ E07E                                       ENDIF
 175+ E07E                                       IFDEF SHIPBANKA
 176+ E07E 2E E1        ShipModelTableA:         DW Adder
 177+ E080 62 E2                                 DW Anaconda
 178+ E082 68 E3                                 DW Asp_Mk_2
 179+ E084 92 E4                                 DW Asteroid
 180+ E086 6C E5                                 DW Boa
 181+ E088 62 E6                                 DW Boulder
 182+ E08A 08 E7                                 DW Bushmaster
 183+ E08C D8 E7                                 DW CargoType5
 184+ E08E 84 E8                                 DW Chameleon
 185+ E090 B0 E9                                 DW CobraMk3
 186+ E092 3C EB                                 DW Cobra_Mk_1
 187+ E094 06 EC                                 DW Cobra_Mk_3_P
 188+ E096 92 ED                                 DW Constrictor
 189+ E098 98 EE                                 DW Coriolis
 190+ E09A B8 EF                                 DW Cougar
 191+ E09C BE F0                                 DW Dodo
 192+ E09E 1E E1                                 DW Dragon
 193+ E0A0 F8 E1                                 DW Escape_Pod
 194+ E0A2 50 E2                                 DW Fer_De_Lance
 195+ E0A4 6E E3                                 DW Gecko
 196+ E0A6 36 E4                                 DW Ghavial
 197+ E0A8 1E E5                                 DW Iguana
 198+ E0AA 14 E6                                 DW Krait
 199+ E0AC FE E6                                 DW Logo
 200+ E0AE 46 E1        ShipVertexTableA:        DW AdderVertices
 201+ E0B0 7A E2                                 DW AnacondaVertices
 202+ E0B2 80 E3                                 DW Asp_Mk_2Vertices
 203+ E0B4 AA E4                                 DW AsteroidVertices
 204+ E0B6 84 E5                                 DW BoaVertices
 205+ E0B8 7A E6                                 DW BoulderVertices
 206+ E0BA 20 E7                                 DW BushmasterVertices
 207+ E0BC F0 E7                                 DW CargoType5Vertices
 208+ E0BE 9C E8                                 DW ChameleonVertices
 209+ E0C0 C8 E9                                 DW CobraMk3Vertices
 210+ E0C2 54 EB                                 DW Cobra_Mk_1Vertices
 211+ E0C4 1E EC                                 DW Cobra_Mk_3_PVertices
 212+ E0C6 AA ED                                 DW ConstrictorVertices
 213+ E0C8 B0 EE                                 DW CoriolisVertices
 214+ E0CA D0 EF                                 DW CougarVertices
 215+ E0CC D6 F0                                 DW DodoVertices
 216+ E0CE B2 E1        ShipEdgeTableA:          DW AdderEdges
 217+ E0D0 D4 E2                                 DW AnacondaEdges
 218+ E0D2 F2 E3                                 DW Asp_Mk_2Edges
 219+ E0D4 E0 E4                                 DW AsteroidEdges
 220+ E0D6 D2 E5                                 DW BoaEdges
 221+ E0D8 A4 E6                                 DW BoulderEdges
 222+ E0DA 68 E7                                 DW BushmasterEdges
 223+ E0DC 2C E8                                 DW CargoType5Edges
 224+ E0DE 08 E9                                 DW ChameleonEdges
 225+ E0E0 70 EA                                 DW CobraMk3Edges
 226+ E0E2 96 EB                                 DW Cobra_Mk_1Edges
 227+ E0E4 C6 EC                                 DW Cobra_Mk_3_PEdges
 228+ E0E6 10 EE                                 DW ConstrictorEdges
 229+ E0E8 10 EF                                 DW CoriolisEdges
 230+ E0EA 42 F0                                 DW CougarEdges
 231+ E0EC 66 F1                                 DW DodoEdges
 232+ E0EE 26 E2        ShipNormalTableA:        DW AdderNormals
 233+ E0F0 38 E3                                 DW AnacondaNormals
 234+ E0F2 62 E4                                 DW Asp_Mk_2Normals
 235+ E0F4 34 E5                                 DW AsteroidNormals
 236+ E0F6 32 E6                                 DW BoaNormals
 237+ E0F8 E0 E6                                 DW BoulderNormals
 238+ E0FA B4 E7                                 DW BushmasterNormals
 239+ E0FC 68 E8                                 DW CargoType5Normals
 240+ E0FE 7C E9                                 DW ChameleonNormals
 241+ E100 08 EB                                 DW CobraMk3Normals
 242+ E102 DE EB                                 DW Cobra_Mk_1Normals
 243+ E104 5E ED                                 DW Cobra_Mk_3_PNormals
 244+ E106 70 EE                                 DW ConstrictorNormals
 245+ E108 80 EF                                 DW CoriolisNormals
 246+ E10A A6 F0                                 DW CougarNormals
 247+ E10C EE F1                                 DW DodoNormals
 248+ E10E 34 01        ShipModelSizeTableA:     DW AdderLen
 249+ E110 06 01                                 DW AnacondaLen
 250+ E112 2A 01                                 DW Asp_Mk_2Len
 251+ E114 DA 00                                 DW AsteroidLen
 252+ E116 F6 00                                 DW BoaLen
 253+ E118 A6 00                                 DW BoulderLen
 254+ E11A D0 00                                 DW BushmasterLen
 255+ E11C AC 00                                 DW CargoType5Len
 256+ E11E 2C 01                                 DW ChameleonLen
 257+ E120 8C 01                                 DW CobraMk3Len
 258+ E122 CA 00                                 DW Cobra_Mk_1Len
 259+ E124 8C 01                                 DW Cobra_Mk_3_PLen
 260+ E126 06 01                                 DW ConstrictorLen
 261+ E128 20 01                                 DW CoriolisLen
 262+ E12A 06 01                                 DW CougarLen
 263+ E12C 60 01                                 DW DodoLen
 264+ E12E                                       ENDIF
 265+ E12E                                       IFDEF SHIPBANKB
 266+ E12E ~            ShipModelTableB:         DW Dragon
 267+ E12E ~                                     DW Escape_Pod
 268+ E12E ~                                     DW Fer_De_Lance
 269+ E12E ~                                     DW Gecko
 270+ E12E ~                                     DW Ghavial
 271+ E12E ~                                     DW Iguana
 272+ E12E ~                                     DW Krait
 273+ E12E ~                                     DW Logo
 274+ E12E ~                                     DW Mamba
 275+ E12E ~                                     DW Missile
 276+ E12E ~                                     DW Monitor
 277+ E12E ~                                     DW Moray
 278+ E12E ~                                     DW Ophidian
 279+ E12E ~                                     DW Plate
 280+ E12E ~                                     DW Python
 281+ E12E ~                                     DW Python_P
 282+ E12E ~            ShipVertexTableB:        DW DragonVertices
 283+ E12E ~                                     DW Escape_PodVertices
 284+ E12E ~                                     DW Fer_De_LanceVertices
 285+ E12E ~                                     DW GeckoVertices
 286+ E12E ~                                     DW GhavialVertices
 287+ E12E ~                                     DW IguanaVertices
 288+ E12E ~                                     DW KraitVertices
 289+ E12E ~                                     DW LogoVertices
 290+ E12E ~                                     DW MambaVertices
 291+ E12E ~                                     DW MissileVertices
 292+ E12E ~                                     DW MonitorVertices
 293+ E12E ~                                     DW MorayVertices
 294+ E12E ~                                     DW OphidianVertices
 295+ E12E ~                                     DW PlateVertices
 296+ E12E ~                                     DW PythonVertices
 297+ E12E ~                                     DW Python_PVertices
 298+ E12E ~            ShipEdgeTableB:          DW DragonEdges
 299+ E12E ~                                     DW Escape_PodEdges
 300+ E12E ~                                     DW Fer_De_LanceEdges
 301+ E12E ~                                     DW GeckoEdges
 302+ E12E ~                                     DW GhavialEdges
 303+ E12E ~                                     DW IguanaEdges
 304+ E12E ~                                     DW KraitEdges
 305+ E12E ~                                     DW LogoEdges
 306+ E12E ~                                     DW MambaEdges
 307+ E12E ~                                     DW MissileEdges
 308+ E12E ~                                     DW MonitorEdges
 309+ E12E ~                                     DW MorayEdges
 310+ E12E ~                                     DW OphidianEdges
 311+ E12E ~                                     DW PlateEdges
 312+ E12E ~                                     DW PythonEdges
 313+ E12E ~                                     DW Python_PEdges
 314+ E12E ~            ShipNormalTableB:        DW DragonNormals
 315+ E12E ~                                     DW Escape_PodNormals
 316+ E12E ~                                     DW Fer_De_LanceNormals
 317+ E12E ~                                     DW GeckoNormals
 318+ E12E ~                                     DW GhavialNormals
 319+ E12E ~                                     DW IguanaNormals
 320+ E12E ~                                     DW KraitNormals
 321+ E12E ~                                     DW LogoNormals
 322+ E12E ~                                     DW MambaNormals
 323+ E12E ~                                     DW MissileNormals
 324+ E12E ~                                     DW MonitorNormals
 325+ E12E ~                                     DW MorayNormals
 326+ E12E ~                                     DW OphidianNormals
 327+ E12E ~                                     DW PlateNormals
 328+ E12E ~                                     DW PythonNormals
 329+ E12E ~                                     DW Python_PNormals
 330+ E12E ~            ShipModelSizeTableB:     DW DragonLen
 331+ E12E ~                                     DW Escape_PodLen
 332+ E12E ~                                     DW Fer_De_LanceLen
 333+ E12E ~                                     DW GeckoLen
 334+ E12E ~                                     DW GhavialLen
 335+ E12E ~                                     DW IguanaLen
 336+ E12E ~                                     DW KraitLen
 337+ E12E ~                                     DW LogoLen
 338+ E12E ~                                     DW MambaLen
 339+ E12E ~                                     DW MissileLen
 340+ E12E ~                                     DW MonitorLen
 341+ E12E ~                                     DW MorayLen
 342+ E12E ~                                     DW OphidianLen
 343+ E12E ~                                     DW PlateLen
 344+ E12E ~                                     DW PythonLen
 345+ E12E ~                                     DW Python_PLen
 346+ E12E                                       ENDIF
 347+ E12E                                       IFDEF SHIPBANKC
 348+ E12E ~            ShipModelTableC:         DW Rattler
 349+ E12E ~                                     DW Rock_Hermit
 350+ E12E ~                                     DW ShuttleType9
 351+ E12E ~                                     DW Shuttle_Mk_2
 352+ E12E ~                                     DW Sidewinder
 353+ E12E ~                                     DW Splinter
 354+ E12E ~                                     DW TestVector
 355+ E12E ~                                     DW Thargoid
 356+ E12E ~                                     DW Thargon
 357+ E12E ~                                     DW TransportType10
 358+ E12E ~                                     DW Viper
 359+ E12E ~                                     DW Worm
 360+ E12E ~                                     DW 0
 361+ E12E ~                                     DW 0
 362+ E12E ~                                     DW 0
 363+ E12E ~                                     DW 0
 364+ E12E ~            ShipVertexTableC:        DW RattlerVertices
 365+ E12E ~                                     DW Rock_HermitVertices
 366+ E12E ~                                     DW ShuttleType9Vertices
 367+ E12E ~                                     DW Shuttle_Mk_2Vertices
 368+ E12E ~                                     DW SidewinderVertices
 369+ E12E ~                                     DW SplinterVertices
 370+ E12E ~                                     DW TestVectorVertices
 371+ E12E ~                                     DW ThargoidVertices
 372+ E12E ~                                     DW ThargonVertices
 373+ E12E ~                                     DW TransportType10Vertices
 374+ E12E ~                                     DW ViperVertices
 375+ E12E ~                                     DW WormVertices
 376+ E12E ~                                     DW 0
 377+ E12E ~                                     DW 0
 378+ E12E ~                                     DW 0
 379+ E12E ~                                     DW 0
 380+ E12E ~            ShipEdgeTableC:          DW RattlerEdges
 381+ E12E ~                                     DW Rock_HermitEdges
 382+ E12E ~                                     DW ShuttleType9Edges
 383+ E12E ~                                     DW Shuttle_Mk_2Edges
 384+ E12E ~                                     DW SidewinderEdges
 385+ E12E ~                                     DW SplinterEdges
 386+ E12E ~                                     DW TestVectorEdges
 387+ E12E ~                                     DW ThargoidEdges
 388+ E12E ~                                     DW ThargonEdges
 389+ E12E ~                                     DW TransportType10Edges
 390+ E12E ~                                     DW ViperEdges
 391+ E12E ~                                     DW WormEdges
 392+ E12E ~                                     DW 0
 393+ E12E ~                                     DW 0
 394+ E12E ~                                     DW 0
 395+ E12E ~                                     DW 0
 396+ E12E ~            ShipNormalTableC:        DW RattlerNormals
 397+ E12E ~                                     DW Rock_HermitNormals
 398+ E12E ~                                     DW ShuttleType9Normals
 399+ E12E ~                                     DW Shuttle_Mk_2Normals
 400+ E12E ~                                     DW SidewinderNormals
 401+ E12E ~                                     DW SplinterNormals
 402+ E12E ~                                     DW TestVectorNormals
 403+ E12E ~                                     DW ThargoidNormals
 404+ E12E ~                                     DW ThargonNormals
 405+ E12E ~                                     DW TransportType10Normals
 406+ E12E ~                                     DW ViperNormals
 407+ E12E ~                                     DW WormNormals
 408+ E12E ~                                     DW 0
 409+ E12E ~                                     DW 0
 410+ E12E ~                                     DW 0
 411+ E12E ~                                     DW 0
 412+ E12E ~            ShipModelSizeTableC:     DW RattlerLen
 413+ E12E ~                                     DW Rock_HermitLen
 414+ E12E ~                                     DW ShuttleType9Len
 415+ E12E ~                                     DW Shuttle_Mk_2Len
 416+ E12E ~                                     DW SidewinderLen
 417+ E12E ~                                     DW SplinterLen
 418+ E12E ~                                     DW TestVectorLen
 419+ E12E ~                                     DW ThargoidLen
 420+ E12E ~                                     DW ThargonLen
 421+ E12E ~                                     DW TransportType10Len
 422+ E12E ~                                     DW ViperLen
 423+ E12E ~                                     DW WormLen
 424+ E12E ~                                     DW 0
 425+ E12E ~                                     DW 0
 426+ E12E ~                                     DW 0
 427+ E12E ~                                     DW 0
 428+ E12E                                       ENDIF
 429+ E12E
 430+ E12E
 431+ E12E                                      IFNDEF SHIPMODELTABLES
 432+ E12E                                      DEFINE SHIPMODELTABLES
 433+ E12E              ShipModelSizeTable:     EQU ShipModelSizeTableA
 434+ E12E              ShipModelBank:          EQU ShipModelBankA
 435+ E12E              ShipModelTable:         EQU ShipModelTableA
 436+ E12E              ShipVertexTable:        EQU ShipVertexTableA
 437+ E12E              ShipEdgeTable:          EQU ShipEdgeTableA
 438+ E12E              ShipNormalTable:        EQU ShipNormalTableA
 439+ E12E                                      ENDIF
 440+ E12E
 441+ E12E                                      IFDEF SHIPBANKA
 442+ E12E                                      include "Data/Ships/Adder.asm"
# file opened: ./Data/Ships/Adder.asm
   1++E12E 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E131 B2 E1                                DW AdderEdges
   3++E133 74                                   DB AdderEdgesSize
   4++E134 00 16                                DB $00, $16
   5++E136 6C                                   DB AdderVertSize
   6++E137 1D                                   DB AdderEdgesCnt
   7++E138 00 28                                DB $00, $28
   8++E13A 3C                                   DB AdderNormalsSize
   9++E13B 17 48 18                             DB $17, $48, $18
  10++E13E 26 E2                                DW AdderNormals
  11++E140 02 21                                DB $02, $21
  12++E142 46 E1                                DW AdderVertices
  13++E144 00 00                                DB 0,0                      ; Type and Tactics
  14++E146 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC
  14++E14A 01 BC
  15++E14C 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23
  15++E150 01 23
  16++E152 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45
  16++E156 23 45
  17++E158 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66
  17++E15C 45 66
  18++E15E 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E
  18++E162 56 7E
  19++E164 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE
  19++E168 78 AE
  20++E16A 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA
  20++E16E 89 AA
  21++E170 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC
  21++E174 9A BC
  22++E176 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D
  22++E17A 78 9D
  23++E17C 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D
  23++E180 46 7D
  24++E182 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD
  24++E186 09 BD
  25++E188 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D
  25++E18C 02 4D
  26++E18E 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE
  26++E192 1A CE
  27++E194 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E
  27++E198 13 5E
  28++E19A 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00
  28++E19E 00 00
  29++E1A0 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00
  29++E1A4 00 00
  30++E1A6 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00
  30++E1AA 00 00
  31++E1AC 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00
  31++E1B0 00 00
  32++E1B2              AdderVertSize:          equ $ - AdderVertices
  33++E1B2 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04
  34++E1B6 07 23 04 08                          DB $07, $23, $04, $08
  35++E1BA 1F 45 08 0C                          DB $1F, $45, $08, $0C
  36++E1BE 1F 56 0C 10                          DB $1F, $56, $0C, $10
  37++E1C2 1F 7E 10 14                          DB $1F, $7E, $10, $14
  38++E1C6 1F 8A 14 18                          DB $1F, $8A, $14, $18
  39++E1CA 1F 9A 18 1C                          DB $1F, $9A, $18, $1C
  40++E1CE 07 BC 1C 00                          DB $07, $BC, $1C, $00
  41++E1D2 1F 46 0C 24                          DB $1F, $46, $0C, $24
  42++E1D6 1F 7D 24 20                          DB $1F, $7D, $24, $20
  43++E1DA 1F 89 20 18                          DB $1F, $89, $20, $18
  44++E1DE 1F 0B 00 28                          DB $1F, $0B, $00, $28
  45++E1E2 1F 9B 1C 28                          DB $1F, $9B, $1C, $28
  46++E1E6 1F 02 04 2C                          DB $1F, $02, $04, $2C
  47++E1EA 1F 24 08 2C                          DB $1F, $24, $08, $2C
  48++E1EE 1F 1C 00 30                          DB $1F, $1C, $00, $30
  49++E1F2 1F AC 1C 30                          DB $1F, $AC, $1C, $30
  50++E1F6 1F 13 04 34                          DB $1F, $13, $04, $34
  51++E1FA 1F 35 08 34                          DB $1F, $35, $08, $34
  52++E1FE 1F 0D 28 2C                          DB $1F, $0D, $28, $2C
  53++E202 1F 1E 30 34                          DB $1F, $1E, $30, $34
  54++E206 1F 9D 20 28                          DB $1F, $9D, $20, $28
  55++E20A 1F 4D 24 2C                          DB $1F, $4D, $24, $2C
  56++E20E 1F AE 14 30                          DB $1F, $AE, $14, $30
  57++E212 1F 5E 10 34                          DB $1F, $5E, $10, $34
  58++E216 05 00 38 3C                          DB $05, $00, $38, $3C
  59++E21A 03 00 3C 40                          DB $03, $00, $3C, $40
  60++E21E 04 00 40 44                          DB $04, $00, $40, $44
  61++E222 03 00 44 38                          DB $03, $00, $44, $38
  62++E226              AdderEdgesSize:         equ $ - AdderEdges
  63++E226              AdderEdgesCnt:          equ AdderEdgesSize/4
  64++E226 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A
  65++E22A 5F 00 27 0A                          DB $5F, $00, $27, $0A
  66++E22E 1F 45 32 0D                          DB $1F, $45, $32, $0D
  67++E232 5F 45 32 0D                          DB $5F, $45, $32, $0D
  68++E236 1F 1E 34 00                          DB $1F, $1E, $34, $00
  69++E23A 5F 1E 34 00                          DB $5F, $1E, $34, $00
  70++E23E 3F 00 00 A0                          DB $3F, $00, $00, $A0
  71++E242 3F 00 00 A0                          DB $3F, $00, $00, $A0
  72++E246 3F 00 00 A0                          DB $3F, $00, $00, $A0
  73++E24A 9F 1E 34 00                          DB $9F, $1E, $34, $00
  74++E24E DF 1E 34 00                          DB $DF, $1E, $34, $00
  75++E252 9F 45 32 0D                          DB $9F, $45, $32, $0D
  76++E256 DF 45 32 0D                          DB $DF, $45, $32, $0D
  77++E25A 1F 00 1C 00                          DB $1F, $00, $1C, $00
  78++E25E 5F 00 1C 00                          DB $5F, $00, $1C, $00
  79++E262
  80++E262              AdderNormalsSize:       equ $ - AdderNormals
  81++E262              AdderLen:                equ $ - Adder
  82++E262
# file closed: ./Data/Ships/Adder.asm
 443+ E262                                      include "Data/Ships/Anaconda.asm"
# file opened: ./Data/Ships/Anaconda.asm
   1++E262 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E265 D4 E2                                DW AnacondaEdges
   3++E267 64                                   DB AnacondaEdgesSize
   4++E268 30 2E                                DB $30, $2E
   5++E26A 5A                                   DB AnacondaVertSize
   6++E26B 19                                   DB AnacondaEdgesCnt
   7++E26C 00 00                                DB $00, $00
   8++E26E 30                                   DB AnacondaNormalsSize
   9++E26F 24 FC 0E                             DB $24, $FC, $0E
  10++E272 38 E3                                DW AnacondaNormals
  11++E274 01 3F                                DB $01, $3F
  12++E276 7A E2                                DW AnacondaVertices
  13++E278 00 00                                DB 0,0                      ; Type and Tactics
  14++E27A 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55
  14++E27E 01 55
  15++E280 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22
  15++E284 01 22
  16++E286 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33
  16++E28A 02 33
  17++E28C 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44
  17++E290 03 44
  18++E292 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55
  18++E296 04 55
  19++E298 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66
  19++E29C 15 66
  20++E29E 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77
  20++E2A2 12 77
  21++E2A4 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88
  21++E2A8 23 88
  22++E2AA 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99
  22++E2AE 34 99
  23++E2B0 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA
  23++E2B4 45 AA
  24++E2B6 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF
  24++E2BA FF FF
  25++E2BC 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88
  25++E2C0 27 88
  26++E2C2 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF
  26++E2C6 FF FF
  27++E2C8 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA
  27++E2CC 49 AA
  28++E2CE 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF
  28++E2D2 FF FF
  29++E2D4              AnacondaVertSize:       equ $ - AnacondaVertices
  30++E2D4 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04
  31++E2D8 1E 02 04 08                          DB $1E, $02, $04, $08
  32++E2DC 1E 03 08 0C                          DB $1E, $03, $08, $0C
  33++E2E0 1E 04 0C 10                          DB $1E, $04, $0C, $10
  34++E2E4 1E 05 00 10                          DB $1E, $05, $00, $10
  35++E2E8 1D 15 00 14                          DB $1D, $15, $00, $14
  36++E2EC 1D 12 04 18                          DB $1D, $12, $04, $18
  37++E2F0 1D 23 08 1C                          DB $1D, $23, $08, $1C
  38++E2F4 1D 34 0C 20                          DB $1D, $34, $0C, $20
  39++E2F8 1D 45 10 24                          DB $1D, $45, $10, $24
  40++E2FC 1E 16 14 28                          DB $1E, $16, $14, $28
  41++E300 1E 17 18 28                          DB $1E, $17, $18, $28
  42++E304 1E 27 18 2C                          DB $1E, $27, $18, $2C
  43++E308 1E 28 1C 2C                          DB $1E, $28, $1C, $2C
  44++E30C 1F 38 1C 30                          DB $1F, $38, $1C, $30
  45++E310 1F 39 20 30                          DB $1F, $39, $20, $30
  46++E314 1E 49 20 34                          DB $1E, $49, $20, $34
  47++E318 1E 4A 24 34                          DB $1E, $4A, $24, $34
  48++E31C 1E 5A 24 38                          DB $1E, $5A, $24, $38
  49++E320 1E 56 14 38                          DB $1E, $56, $14, $38
  50++E324 1E 6B 28 38                          DB $1E, $6B, $28, $38
  51++E328 1F 7B 28 30                          DB $1F, $7B, $28, $30
  52++E32C 1F 78 2C 30                          DB $1F, $78, $2C, $30
  53++E330 1F 9A 30 34                          DB $1F, $9A, $30, $34
  54++E334 1F AB 30 38                          DB $1F, $AB, $30, $38
  55++E338              AnacondaEdgesSize:      equ $ - AnacondaEdges
  56++E338              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  57++E338 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31
  58++E33C BE 33 12 57                          DB $BE, $33, $12, $57
  59++E340 FE 4D 39 13                          DB $FE, $4D, $39, $13
  60++E344 5F 00 5A 10                          DB $5F, $00, $5A, $10
  61++E348 7E 4D 39 13                          DB $7E, $4D, $39, $13
  62++E34C 3E 33 12 57                          DB $3E, $33, $12, $57
  63++E350 3E 00 6F 14                          DB $3E, $00, $6F, $14
  64++E354 9F 61 48 18                          DB $9F, $61, $48, $18
  65++E358 DF 6C 44 22                          DB $DF, $6C, $44, $22
  66++E35C 5F 6C 44 22                          DB $5F, $6C, $44, $22
  67++E360 1F 61 48 18                          DB $1F, $61, $48, $18
  68++E364 1F 00 5E 12                          DB $1F, $00, $5E, $12
  69++E368              AnacondaNormalsSize:    equ $ - AnacondaNormals
  70++E368              AnacondaLen:            equ $ - Anaconda
  71++E368
# file closed: ./Data/Ships/Anaconda.asm
 444+ E368                                      include "Data/Ships/Asp_Mk_2.asm"
# file opened: ./Data/Ships/Asp_Mk_2.asm
   1++E368 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E36B F2 E3                                DW Asp_Mk_2Edges
   3++E36D 70                                   DB Asp_Mk_2EdgesSize
   4++E36E 20 1A                                DB $20, $1A
   5++E370 72                                   DB Asp_Mk_2VertSize
   6++E371 1C                                   DB Asp_Mk_2EdgesCnt
   7++E372 00 C8                                DB $00, $C8
   8++E374 30                                   DB Asp_Mk_2NormalsSize
   9++E375 28 96 28                             DB $28, $96, $28
  10++E378 62 E4                                DW Asp_Mk_2Normals
  11++E37A 01 29                                DB $01, $29
  12++E37C 80 E3                                DW Asp_Mk_2Vertices
  13++E37E 00 00                                DB 0,0                      ; Type and Tactics
  14++E380 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22
  14++E384 01 22
  15++E386 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB
  15++E38A 12 BB
  16++E38C 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB
  16++E390 16 BB
  17++E392 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79
  17++E396 16 79
  18++E398 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77
  18++E39C 01 77
  19++E39E 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB
  19++E3A2 25 BB
  20++E3A4 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A
  20++E3A8 25 8A
  21++E3AA 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88
  21++E3AE 02 88
  22++E3B0 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79
  22++E3B4 04 79
  23++E3B6 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A
  23++E3BA 04 8A
  24++E3BC 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69
  24++E3C0 34 69
  25++E3C2 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A
  25++E3C6 34 5A
  26++E3C8 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B
  26++E3CC 35 6B
  27++E3CE 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB
  27++E3D2 BB BB
  28++E3D4 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB
  28++E3D8 BB BB
  29++E3DA 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB
  29++E3DE BB BB
  30++E3E0 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB
  30++E3E4 BB BB
  31++E3E6 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04
  31++E3EA 04 04
  32++E3EC 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  32++E3F0 04 04
  33++E3F2              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  34++E3F2 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04
  35++E3F6 16 01 00 10                          DB $16, $01, $00, $10
  36++E3FA 16 02 00 1C                          DB $16, $02, $00, $1C
  37++E3FE 1F 1B 04 08                          DB $1F, $1B, $04, $08
  38++E402 1F 16 08 0C                          DB $1F, $16, $08, $0C
  39++E406 10 79 0C 20                          DB $10, $79, $0C, $20
  40++E40A 1F 04 20 24                          DB $1F, $04, $20, $24
  41++E40E 10 8A 18 24                          DB $10, $8A, $18, $24
  42++E412 1F 25 14 18                          DB $1F, $25, $14, $18
  43++E416 1F 2B 04 14                          DB $1F, $2B, $04, $14
  44++E41A 1F 17 0C 10                          DB $1F, $17, $0C, $10
  45++E41E 1F 07 10 20                          DB $1F, $07, $10, $20
  46++E422 1F 28 18 1C                          DB $1F, $28, $18, $1C
  47++E426 1F 08 1C 24                          DB $1F, $08, $1C, $24
  48++E42A 1F 6B 08 30                          DB $1F, $6B, $08, $30
  49++E42E 1F 5B 14 30                          DB $1F, $5B, $14, $30
  50++E432 16 36 28 30                          DB $16, $36, $28, $30
  51++E436 16 35 2C 30                          DB $16, $35, $2C, $30
  52++E43A 16 34 28 2C                          DB $16, $34, $28, $2C
  53++E43E 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  54++E442 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  55++E446 1F 69 0C 28                          DB $1F, $69, $0C, $28
  56++E44A 1F 49 20 28                          DB $1F, $49, $20, $28
  57++E44E 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  58++E452 09 BB 3C 38                          DB $09, $BB, $3C, $38
  59++E456 08 BB 38 40                          DB $08, $BB, $38, $40
  60++E45A 08 BB 40 34                          DB $08, $BB, $40, $34
  61++E45E 0A 04 48 44                          DB $0A, $04, $48, $44
  62++E462              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  63++E462              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  64++E462 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05
  65++E466 7F 08 26 07                          DB $7F, $08, $26, $07
  66++E46A FF 08 26 07                          DB $FF, $08, $26, $07
  67++E46E 36 00 18 01                          DB $36, $00, $18, $01
  68++E472 1F 00 2B 13                          DB $1F, $00, $2B, $13
  69++E476 BF 06 1C 02                          DB $BF, $06, $1C, $02
  70++E47A 3F 06 1C 02                          DB $3F, $06, $1C, $02
  71++E47E 5F 3B 40 1F                          DB $5F, $3B, $40, $1F
  72++E482 DF 3B 40 1F                          DB $DF, $3B, $40, $1F
  73++E486 1F 50 2E 32                          DB $1F, $50, $2E, $32
  74++E48A 9F 50 2E 32                          DB $9F, $50, $2E, $32
  75++E48E 3F 00 00 5A                          DB $3F, $00, $00, $5A
  76++E492              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  77++E492              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  78++E492
# file closed: ./Data/Ships/Asp_Mk_2.asm
 445+ E492                                      include "Data/Ships/Asteroid.asm"
# file opened: ./Data/Ships/Asteroid.asm
   1++E492 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E495 E0 E4                                DW AsteroidEdges
   3++E497 54                                   DB AsteroidEdgesSize
   4++E498 00 22                                DB $00, $22
   5++E49A 36                                   DB AsteroidVertSize
   6++E49B 15                                   DB AsteroidEdgesCnt
   7++E49C 00 05                                DB $00, $05
   8++E49E 38                                   DB AsteroidNormalsSize
   9++E49F 32 3C 1E                             DB $32, $3C, $1E
  10++E4A2 34 E5                                DW AsteroidNormals
  11++E4A4 01 00                                DB $01, $00
  12++E4A6 AA E4                                DW AsteroidVertices
  13++E4A8 00 00                                DB 0,0                      ; Type and Tactics
  14++E4AA 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF
  14++E4AE FF FF
  15++E4B0 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  15++E4B4 FF FF
  16++E4B6 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  16++E4BA FF FF
  17++E4BC 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  17++E4C0 FF FF
  18++E4C2 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  18++E4C6 65 DC
  19++E4C8 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  19++E4CC FF FF
  20++E4CE 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  20++E4D2 10 32
  21++E4D4 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  21++E4D8 FF FF
  22++E4DA 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  22++E4DE 98 BA
  23++E4E0              AsteroidVertSize:       equ $ - AsteroidVertices
  24++E4E0 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04
  25++E4E4 1F D6 00 10                          DB $1F, $D6, $00, $10
  26++E4E8 1F C5 0C 10                          DB $1F, $C5, $0C, $10
  27++E4EC 1F B4 08 0C                          DB $1F, $B4, $08, $0C
  28++E4F0 1F A3 04 08                          DB $1F, $A3, $04, $08
  29++E4F4 1F 32 04 18                          DB $1F, $32, $04, $18
  30++E4F8 1F 31 08 18                          DB $1F, $31, $08, $18
  31++E4FC 1F 41 08 14                          DB $1F, $41, $08, $14
  32++E500 1F 10 14 18                          DB $1F, $10, $14, $18
  33++E504 1F 60 00 14                          DB $1F, $60, $00, $14
  34++E508 1F 54 0C 14                          DB $1F, $54, $0C, $14
  35++E50C 1F 20 00 18                          DB $1F, $20, $00, $18
  36++E510 1F 65 10 14                          DB $1F, $65, $10, $14
  37++E514 1F A8 04 20                          DB $1F, $A8, $04, $20
  38++E518 1F 87 04 1C                          DB $1F, $87, $04, $1C
  39++E51C 1F D7 00 1C                          DB $1F, $D7, $00, $1C
  40++E520 1F DC 10 1C                          DB $1F, $DC, $10, $1C
  41++E524 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C
  42++E528 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  43++E52C 1F BA 08 20                          DB $1F, $BA, $08, $20
  44++E530 1F 98 1C 20                          DB $1F, $98, $1C, $20
  45++E534
  46++E534              AsteroidEdgesSize:      equ $ - AsteroidEdges
  47++E534              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  48++E534 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51
  49++E538 5F 09 42 51                          DB $5F, $09, $42, $51
  50++E53C 9F 48 40 1F                          DB $9F, $48, $40, $1F
  51++E540 DF 40 49 2F                          DB $DF, $40, $49, $2F
  52++E544 5F 2D 4F 41                          DB $5F, $2D, $4F, $41
  53++E548 1F 87 0F 23                          DB $1F, $87, $0F, $23
  54++E54C 1F 26 4C 46                          DB $1F, $26, $4C, $46
  55++E550 BF 42 3B 27                          DB $BF, $42, $3B, $27
  56++E554 FF 43 0F 50                          DB $FF, $43, $0F, $50
  57++E558 7F 42 0E 4B                          DB $7F, $42, $0E, $4B
  58++E55C FF 46 50 28                          DB $FF, $46, $50, $28
  59++E560 7F 3A 66 33                          DB $7F, $3A, $66, $33
  60++E564 3F 51 09 43                          DB $3F, $51, $09, $43
  61++E568 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F
  62++E56C              AsteroidNormalsSize:    equ $ - AsteroidNormals
  63++E56C              AsteroidLen:            equ $ - Asteroid
  64++E56C
# file closed: ./Data/Ships/Asteroid.asm
 446+ E56C                                      include "Data/Ships/Boa.asm"
# file opened: ./Data/Ships/Boa.asm
   1++E56C 05 13 24     Boa:	                DB $05, $13, $24
   2++E56F D2 E5                                DW BoaEdges
   3++E571 60                                   DB BoaEdgesSize
   4++E572 00 26                                DB $00, $26
   5++E574 4E                                   DB BoaVertSize
   6++E575 18                                   DB BoaEdgesCnt
   7++E576 00 00                                DB $00, $00
   8++E578 30                                   DB BoaNormalsSize
   9++E579 28 FA 18                             DB $28, $FA, $18
  10++E57C 32 E6                                DW BoaNormals
  11++E57E 00 1C                                DB $00, $1C
  12++E580 84 E5                                DW BoaVertices
  13++E582 00 00                                DB 0,0                      ; Type and Tactics
  14++E584 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  14++E588 FF FF
  15++E58A 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  15++E58E 02 33
  16++E590 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  16++E594 01 44
  17++E596 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  17++E59A 12 55
  18++E59C 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  18++E5A0 23 69
  19++E5A2 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  19++E5A6 03 6B
  20++E5A8 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  20++E5AC 04 8B
  21++E5AE 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  21++E5B2 14 8A
  22++E5B4 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  22++E5B8 15 7A
  23++E5BA 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  23++E5BE 25 79
  24++E5C0 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  24++E5C4 02 AA
  25++E5C6 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  25++E5CA 01 AA
  26++E5CC 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  26++E5D0 12 CC
  27++E5D2              BoaVertSize:            equ $ - BoaVertices
  28++E5D2 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  29++E5D6 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  30++E5DA 1F 79 00 24                          DB $1F, $79, $00, $24
  31++E5DE 1D 69 00 10                          DB $1D, $69, $00, $10
  32++E5E2 1D 8B 00 18                          DB $1D, $8B, $00, $18
  33++E5E6 1D 7A 00 20                          DB $1D, $7A, $00, $20
  34++E5EA 1F 36 10 14                          DB $1F, $36, $10, $14
  35++E5EE 1F 0B 14 18                          DB $1F, $0B, $14, $18
  36++E5F2 1F 48 18 1C                          DB $1F, $48, $18, $1C
  37++E5F6 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  38++E5FA 1F 57 20 24                          DB $1F, $57, $20, $24
  39++E5FE 1F 29 10 24                          DB $1F, $29, $10, $24
  40++E602 18 23 04 10                          DB $18, $23, $04, $10
  41++E606 18 03 04 14                          DB $18, $03, $04, $14
  42++E60A 18 25 0C 24                          DB $18, $25, $0C, $24
  43++E60E 18 15 0C 20                          DB $18, $15, $0C, $20
  44++E612 18 04 08 18                          DB $18, $04, $08, $18
  45++E616 18 14 08 1C                          DB $18, $14, $08, $1C
  46++E61A 16 02 04 28                          DB $16, $02, $04, $28
  47++E61E 16 01 08 2C                          DB $16, $01, $08, $2C
  48++E622 16 12 0C 30                          DB $16, $12, $0C, $30
  49++E626 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  50++E62A 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  51++E62E 0E 2C 30 28                          DB $0E, $2C, $30, $28
  52++E632              BoaEdgesSize:           equ $ - BoaEdges
  53++E632              BoaEdgesCnt:            equ BoaEdgesSize/4
  54++E632 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  55++E636 7F 00 2D 59                          DB $7F, $00, $2D, $59
  56++E63A BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  57++E63E 1F 00 28 00                          DB $1F, $00, $28, $00
  58++E642 7F 3E 20 14                          DB $7F, $3E, $20, $14
  59++E646 FF 3E 20 14                          DB $FF, $3E, $20, $14
  60++E64A 1F 00 17 06                          DB $1F, $00, $17, $06
  61++E64E DF 17 0F 09                          DB $DF, $17, $0F, $09
  62++E652 5F 17 0F 09                          DB $5F, $17, $0F, $09
  63++E656 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  64++E65A 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  65++E65E 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  66++E662              BoaNormalsSize:         equ $ - BoaNormals
  67++E662              BoaLen:                 equ $ - Boa
  68++E662
# file closed: ./Data/Ships/Boa.asm
 447+ E662                                      include "Data/Ships/Boulder.asm"
# file opened: ./Data/Ships/Boulder.asm
   1++E662 00 03 84     Boulder:	            DB $00, $03, $84
   2++E665 A4 E6                                DW BoulderEdges
   3++E667 3C                                   DB BoulderEdgesSize
   4++E668 00 0E                                DB $00, $0E
   5++E66A 2A                                   DB BoulderVertSize
   6++E66B 0F                                   DB BoulderEdgesCnt
   7++E66C 00 01                                DB $00, $01
   8++E66E 28                                   DB BoulderNormalsSize
   9++E66F 14 14 1E                             DB $14, $14, $1E
  10++E672 E0 E6                                DW BoulderNormals
  11++E674 02 00                                DB $02, $00
  12++E676 7A E6                                DW BoulderVertices
  13++E678 00 00                                DB 0,0                      ; Type and Tactics
  14++E67A 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  14++E67E 01 59
  15++E680 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  15++E684 12 56
  16++E686 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  16++E68A 23 67
  17++E68C 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  17++E690 34 78
  18++E692 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  18++E696 04 89
  19++E698 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  19++E69C FF FF
  20++E69E 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  20++E6A2 FF FF
  21++E6A4              BoulderVertSize:        equ $ - BoulderVertices
  22++E6A4 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  23++E6A8 1F 26 04 08                          DB $1F, $26, $04, $08
  24++E6AC 1F 37 08 0C                          DB $1F, $37, $08, $0C
  25++E6B0 1F 48 0C 10                          DB $1F, $48, $0C, $10
  26++E6B4 1F 09 10 00                          DB $1F, $09, $10, $00
  27++E6B8 1F 01 00 14                          DB $1F, $01, $00, $14
  28++E6BC 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E6C0 1F 23 08 14                          DB $1F, $23, $08, $14
  30++E6C4 1F 34 0C 14                          DB $1F, $34, $0C, $14
  31++E6C8 1F 04 10 14                          DB $1F, $04, $10, $14
  32++E6CC 1F 59 00 18                          DB $1F, $59, $00, $18
  33++E6D0 1F 56 04 18                          DB $1F, $56, $04, $18
  34++E6D4 1F 67 08 18                          DB $1F, $67, $08, $18
  35++E6D8 1F 78 0C 18                          DB $1F, $78, $0C, $18
  36++E6DC 1F 89 10 18                          DB $1F, $89, $10, $18
  37++E6E0              BoulderEdgesSize:       equ $ - BoulderEdges
  38++E6E0              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  39++E6E0 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  40++E6E4 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  41++E6E8 5F 20 2F 18                          DB $5F, $20, $2F, $18
  42++E6EC FF 03 27 07                          DB $FF, $03, $27, $07
  43++E6F0 FF 05 04 01                          DB $FF, $05, $04, $01
  44++E6F4 1F 31 54 08                          DB $1F, $31, $54, $08
  45++E6F8 3F 70 15 15                          DB $3F, $70, $15, $15
  46++E6FC 7F 4C 23 52                          DB $7F, $4C, $23, $52
  47++E700 3F 16 38 89                          DB $3F, $16, $38, $89
  48++E704 3F 28 6E 26                          DB $3F, $28, $6E, $26
  49++E708              BoulderNormalsSize:     equ $ - BoulderNormals
  50++E708              BoulderLen:             equ $ - Boulder
  51++E708
# file closed: ./Data/Ships/Boulder.asm
 448+ E708                                      include "Data/Ships/Bushmaster.asm"
# file opened: ./Data/Ships/Bushmaster.asm
   1++E708 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E70B 68 E7                                DW BushmasterEdges
   3++E70D 4C                                   DB BushmasterEdgesSize
   4++E70E 00 1E                                DB $00, $1E
   5++E710 48                                   DB BushmasterVertSize
   6++E711 13                                   DB BushmasterEdgesCnt
   7++E712 00 96                                DB $00, $96
   8++E714 24                                   DB BushmasterNormalsSize
   9++E715 14 4A 23                             DB $14, $4A, $23
  10++E718 B4 E7                                DW BushmasterNormals
  11++E71A 02 21                                DB $02, $21
  12++E71C 20 E7                                DW BushmasterVertices
  13++E71E 00 00                                DB 0,0                      ; Type and Tactics
  14++E720 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  14++E724 23 01
  15++E726 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  15++E72A 57 13
  16++E72C 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  16++E730 46 02
  17++E732 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  17++E736 45 01
  18++E738 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  18++E73C FF FF
  19++E73E 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  19++E742 88 45
  20++E744 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  20++E748 88 57
  21++E74A 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  21++E74E 88 46
  22++E750 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  22++E754 88 88
  23++E756 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  23++E75A 88 88
  24++E75C 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  24++E760 88 88
  25++E762 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  25++E766 88 88
  26++E768              BushmasterVertSize:     equ $ - BushmasterVertices
  27++E768 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  28++E76C 1F 02 00 08                          DB $1F, $02, $00, $08
  29++E770 1F 01 00 0C                          DB $1F, $01, $00, $0C
  30++E774 1F 23 00 10                          DB $1F, $23, $00, $10
  31++E778 1F 45 0C 14                          DB $1F, $45, $0C, $14
  32++E77C 1F 04 08 0C                          DB $1F, $04, $08, $0C
  33++E780 1F 15 04 0C                          DB $1F, $15, $04, $0C
  34++E784 1F 46 08 1C                          DB $1F, $46, $08, $1C
  35++E788 1F 57 04 18                          DB $1F, $57, $04, $18
  36++E78C 1F 26 08 10                          DB $1F, $26, $08, $10
  37++E790 1F 37 04 10                          DB $1F, $37, $04, $10
  38++E794 1F 48 14 1C                          DB $1F, $48, $14, $1C
  39++E798 1F 58 14 18                          DB $1F, $58, $14, $18
  40++E79C 1F 68 10 1C                          DB $1F, $68, $10, $1C
  41++E7A0 1F 78 10 18                          DB $1F, $78, $10, $18
  42++E7A4 0A 88 20 24                          DB $0A, $88, $20, $24
  43++E7A8 0A 88 24 28                          DB $0A, $88, $24, $28
  44++E7AC 0A 88 28 2C                          DB $0A, $88, $28, $2C
  45++E7B0 0A 88 2C 20                          DB $0A, $88, $2C, $20
  46++E7B4              BushmasterEdgesSize:    equ $ - BushmasterEdges
  47++E7B4              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  48++E7B4 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  49++E7B8 1F 17 58 1D                          DB $1F, $17, $58, $1D
  50++E7BC DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  51++E7C0 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  52++E7C4 BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  53++E7C8 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  54++E7CC FF 2A 55 07                          DB $FF, $2A, $55, $07
  55++E7D0 7F 2A 55 07                          DB $7F, $2A, $55, $07
  56++E7D4 3F 00 00 60                          DB $3F, $00, $00, $60
  57++E7D8              BushmasterNormalsSize:  equ $ - BushmasterNormals
  58++E7D8              BushmasterLen:          equ $ - Bushmaster
  59++E7D8
# file closed: ./Data/Ships/Bushmaster.asm
 449+ E7D8                                      include "Data/Ships/CargoType5.asm"
# file opened: ./Data/Ships/CargoType5.asm
   1++E7D8              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E7D8              ; Corrected pointers
   3++E7D8              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E7D8              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E7D8              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E7D8              ;;;				 Example of cargo
   7++E7D8              ;;;
   8++E7D8              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E7D8              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E7D8              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E7D8              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E7D8              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E7D8              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E7D8              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E7D8              ;;;		Edges
  16++E7D8              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E7D8              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E7D8              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E7D8              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E7D8              ;;;	  	Normals (Faces)
  21++E7D8              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E7D8              ;;;		Byte 1 = X Lo
  23++E7D8              ;;;		Byte 2 = Y Lo
  24++E7D8              ;;;		Byte 3 = Z Lo
  25++E7D8
  26++E7D8 00 90 01     CargoType5              DB $00, $90, $01
  27++E7DB 2C E8                                DW CargoType5Edges
  28++E7DD 3C                                   DB CargoType5EdgesSize
  29++E7DE 00 12 3C 0F                          DB $00,$12,CargoType5VertSize,CargoType5EdgesCnt
  30++E7E2 00 00 1C 0C                          DB $00,$00,$1C,$0C,$11,$0F
  30++E7E6 11 0F
  31++E7E8 68 E8                                DW CargoType5Normals
  32++E7EA 02 00                                DB $02,$00
  33++E7EC F0 E7                                DW CargoType5Vertices
  34++E7EE 00 00                                DB 0,0                      ; Type and Tactics
  35++E7F0              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  36++E7F0 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  36++E7F4 10 55
  37++E7F6 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  37++E7FA 10 22
  38++E7FC 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  38++E800 20 33
  39++E802 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  39++E806 30 44
  40++E808 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  40++E80C 40 55
  41++E80E 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  41++E812 51 66
  42++E814 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  42++E818 21 66
  43++E81A 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  43++E81E 32 66
  44++E820 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  44++E824 43 66
  45++E826 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  45++E82A 54 66
  46++E82C              CargoType5VertSize      equ $  - CargoType5Vertices
  47++E82C 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  47++E830 1F 20 04 08
  48++E834 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  48++E838 1F 40 0C 10
  49++E83C 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  49++E840 1F 51 00 14
  50++E844 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  50++E848 1F 32 08 1C
  51++E84C 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  51++E850 1F 54 10 24
  52++E854 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  52++E858 1F 62 18 1C
  53++E85C 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  53++E860 1F 64 20 24
  54++E864 1F 65 24 14                          DB $1F,$65,$24,$14
  55++E868              CargoType5EdgesSize     equ $  - CargoType5Edges
  56++E868              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  57++E868 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  58++E86C 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  58++E870 5F 00 12 30
  59++E874 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  59++E878 7F 00 12 30
  60++E87C 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  60++E880 9F 60 00 00
  61++E884              CargoType5NormalsSize   equ $  - CargoType5Normals
  62++E884              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/Ships/CargoType5.asm
 450+ E884                                      include "Data/Ships/Chameleon.asm"
# file opened: ./Data/Ships/Chameleon.asm
   1++E884 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E887 08 E9                                DW ChameleonEdges
   3++E889 74                                   DB ChameleonEdgesSize
   4++E88A 00 1A                                DB $00, $1A
   5++E88C 6C                                   DB ChameleonVertSize
   6++E88D 1D                                   DB ChameleonEdgesCnt
   7++E88E 00 C8                                DB $00, $C8
   8++E890 34                                   DB ChameleonNormalsSize
   9++E891 0A 64 1D                             DB $0A, $64, $1D
  10++E894 7C E9                                DW ChameleonNormals
  11++E896 01 23                                DB $01, $23
  12++E898 9C E8                                DW ChameleonVertices
  13++E89A 00 00                                DB 0,0                      ; Type and Tactics
  14++E89C 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  14++E8A0 25 01
  15++E8A2 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  15++E8A6 34 01
  16++E8A8 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  16++E8AC 8B 25
  17++E8AE 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  17++E8B2 68 22
  18++E8B4 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  18++E8B8 69 33
  19++E8BA 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  19++E8BE 9A 34
  20++E8C0 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  20++E8C4 7A 44
  21++E8C6 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  21++E8CA 7B 55
  22++E8CC 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  22++E8D0 36 02
  23++E8D2 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  23++E8D6 57 14
  24++E8D8 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  24++E8DC BC 88
  25++E8DE 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  25++E8E2 9C 68
  26++E8E4 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  26++E8E8 AC 99
  27++E8EA 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  27++E8EE BC 7A
  28++E8F0 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  28++E8F4 CC CC
  29++E8F6 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  29++E8FA CC CC
  30++E8FC 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  30++E900 CC CC
  31++E902 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  31++E906 CC CC
  32++E908              ChameleonVertSize:      equ $ - ChameleonVertices
  33++E908 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  34++E90C 1F 02 00 20                          DB $1F, $02, $00, $20
  35++E910 1F 15 00 24                          DB $1F, $15, $00, $24
  36++E914 1F 03 04 20                          DB $1F, $03, $04, $20
  37++E918 1F 14 04 24                          DB $1F, $14, $04, $24
  38++E91C 1F 34 04 14                          DB $1F, $34, $04, $14
  39++E920 1F 25 00 08                          DB $1F, $25, $00, $08
  40++E924 1F 26 0C 20                          DB $1F, $26, $0C, $20
  41++E928 1F 36 10 20                          DB $1F, $36, $10, $20
  42++E92C 1F 75 1C 24                          DB $1F, $75, $1C, $24
  43++E930 1F 74 18 24                          DB $1F, $74, $18, $24
  44++E934 1F 39 10 14                          DB $1F, $39, $10, $14
  45++E938 1F 4A 14 18                          DB $1F, $4A, $14, $18
  46++E93C 1F 28 08 0C                          DB $1F, $28, $08, $0C
  47++E940 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  48++E944 1F 8B 08 28                          DB $1F, $8B, $08, $28
  49++E948 1F 9A 14 30                          DB $1F, $9A, $14, $30
  50++E94C 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  51++E950 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  52++E954 1F 69 10 2C                          DB $1F, $69, $10, $2C
  53++E958 1F 7A 18 34                          DB $1F, $7A, $18, $34
  54++E95C 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  55++E960 1F BC 28 34                          DB $1F, $BC, $28, $34
  56++E964 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  57++E968 1F AC 30 34                          DB $1F, $AC, $30, $34
  58++E96C 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  59++E970 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  60++E974 0A CC 40 44                          DB $0A, $CC, $40, $44
  61++E978 0A CC 44 38                          DB $0A, $CC, $44, $38
  62++E97C              ChameleonEdgesSize:     equ $ - ChameleonEdges
  63++E97C              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  64++E97C 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  65++E980 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  66++E984 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  67++E988 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  68++E98C 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  69++E990 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  70++E994 1F 00 60 00                          DB $1F, $00, $60, $00
  71++E998 5F 00 60 00                          DB $5F, $00, $60, $00
  72++E99C BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  73++E9A0 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  74++E9A4 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  75++E9A8 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  76++E9AC 3F 00 00 60                          DB $3F, $00, $00, $60
  77++E9B0              ChameleonNormalsSize:   equ $ - ChameleonNormals
  78++E9B0              ChameleonLen:           equ $ - Chameleon
  79++E9B0
# file closed: ./Data/Ships/Chameleon.asm
 451+ E9B0                                      include "Data/Ships/CobraMk3.asm"
# file opened: ./Data/Ships/CobraMk3.asm
   1++E9B0              ; Corrected pointers
   2++E9B0              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9B0              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9B0              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9B0 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9B3 70 EA                                DW CobraMk3Edges
   7++E9B5 98                                   DB CobraMkEdgesSize
   8++E9B6 54 2A                                DB $54,$2A
   9++E9B8 A8                                   DB CobraMkVertSize
  10++E9B9 26                                   DB CobraMkEdgesCnt
  11++E9BA 00 00                                DB $00,$00
  12++E9BC 34                                   DB CobraMk3NormalsSize
  13++E9BD 32 96 1C                             DB $32,$96,$1C
  14++E9C0 08 EB                                DW CobraMk3Normals
  15++E9C2 01 13                                DB $01,$13
  16++E9C4 C8 E9                                DW CobraMk3Vertices
  17++E9C6 00 00                                DB 0,0                      ; Type and Tactics
  18++E9C8                                  ; missiles = 3
  19++E9C8 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  19++E9CC FF FF
  20++E9CE 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  20++E9D2 FF FF
  21++E9D4 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  21++E9D8 FF FF
  22++E9DA 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  22++E9DE 73 AA
  23++E9E0 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  23++E9E4 84 CC
  24++E9E6 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  24++E9EA FF FF
  25++E9EC 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  25++E9F0 FF FF
  26++E9F2 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  26++E9F6 98 CC
  27++E9F8 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  27++E9FC 97 AA
  28++E9FE 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  28++EA02 65 99
  29++EA04 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  29++EA08 A9 BB
  30++EA0A 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  30++EA0E B9 CC
  31++EA10 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  31++EA14 99 99
  32++EA16 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  32++EA1A 99 99
  33++EA1C 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  33++EA20 99 99
  34++EA22 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  34++EA26 99 99
  35++EA28 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  35++EA2C 99 99
  36++EA2E 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  36++EA32 99 99
  37++EA34 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  37++EA38 99 99
  38++EA3A 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  38++EA3E 99 99
  39++EA40 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  39++EA44 B0 BB
  40++EA46 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  40++EA4A B0 BB
  41++EA4C 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  41++EA50 99 99
  42++EA52 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  42++EA56 99 99
  43++EA58 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  43++EA5C 99 99
  44++EA5E 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  44++EA62 99 99
  45++EA64 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  45++EA68 99 99
  46++EA6A 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  46++EA6E 99 99
  47++EA70              CobraMkVertSize         equ $  - CobraMk3Vertices
  48++EA70 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  48++EA74 1F C4 00 10
  49++EA78 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  49++EA7C 1F A7 0C 20
  50++EA80 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  50++EA84 1F 98 18 1C
  51++EA88 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  51++EA8C 1F 95 14 24
  52++EA90 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  52++EA94 1F 51 08 14
  53++EA98 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  53++EA9C 1F 73 0C 14
  54++EAA0 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  54++EAA4 1F 10 04 08
  55++EAA8 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  55++EAAC 1F A9 20 28
  56++EAB0 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  56++EAB4 1F C9 1C 2C
  57++EAB8 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  57++EABC 1F CB 00 2C
  58++EAC0 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  58++EAC4 1D 42 00 18
  59++EAC8 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  59++EACC 14 99 30 34
  60++EAD0 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  60++EAD4 14 99 38 3C
  61++EAD8 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  61++EADC 13 99 3C 40
  62++EAE0 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  62++EAE4 13 99 34 48
  63++EAE8 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  63++EAEC 1E 65 08 24
  64++EAF0 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  64++EAF4 06 99 5C 60
  65++EAF8 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  65++EAFC 06 99 64 68
  66++EB00 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  66++EB04 08 99 64 6C
  67++EB08              CobraMkEdgesSize        equ $  - CobraMk3Edges
  68++EB08              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  69++EB08              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  70++EB08 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  71++EB0C 9F 12 37 10                          DB $9F,$12,$37,$10
  72++EB10 1F 12 37 10                          DB $1F,$12,$37,$10
  73++EB14 9F 10 34 0E                          DB $9F,$10,$34,$0E
  74++EB18 1F 10 34 0E                          DB $1F,$10,$34,$0E
  75++EB1C 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  76++EB20 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  77++EB24 9F 3D 66 00                          DB $9F,$3D,$66,$00
  78++EB28 1F 3D 66 00                          DB $1F,$3D,$66,$00
  79++EB2C 3F 00 00 50                          DB $3F,$00,$00,$50
  80++EB30 DF 07 2A 09                          DB $DF,$07,$2A,$09
  81++EB34 5F 00 1E 06                          DB $5F,$00,$1E,$06
  82++EB38 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  83++EB3C              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  84++EB3C              CobraMk3Len             equ $  - CobraMk3
  85++EB3C
# file closed: ./Data/Ships/CobraMk3.asm
 452+ EB3C                                      include "Data/Ships/Cobra_Mk_1.asm"
# file opened: ./Data/Ships/Cobra_Mk_1.asm
   1++EB3C 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB3F 96 EB                                DW Cobra_Mk_1Edges
   3++EB41 48                                   DB Cobra_Mk_1EdgesSize
   4++EB42 28 1A                                DB $28, $1A
   5++EB44 42                                   DB Cobra_Mk_1VertSize
   6++EB45 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB46 00 4B                                DB $00, $4B
   8++EB48 28                                   DB Cobra_Mk_1NormalsSize
   9++EB49 13 51 1A                             DB $13, $51, $1A
  10++EB4C DE EB                                DW Cobra_Mk_1Normals
  11++EB4E 02 22                                DB $02, $22
  12++EB50 54 EB                                DW Cobra_Mk_1Vertices
  13++EB52 00 00                                DB 0,0                      ; Type and Tactics
  14++EB54 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  14++EB58 01 23
  15++EB5A 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  15++EB5E 01 45
  16++EB60 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  16++EB64 23 88
  17++EB66 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  17++EB6A 45 99
  18++EB6C 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  18++EB70 26 78
  19++EB72 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  19++EB76 46 79
  20++EB78 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  20++EB7C 13 78
  21++EB7E 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  21++EB82 15 79
  22++EB84 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  22++EB88 02 46
  23++EB8A 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  23++EB8E 01 11
  24++EB90 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  24++EB94 01 11
  25++EB96              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  26++EB96 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  27++EB9A 1F 23 00 08                          DB $1F, $23, $00, $08
  28++EB9E 1F 38 08 18                          DB $1F, $38, $08, $18
  29++EBA2 1F 17 18 1C                          DB $1F, $17, $18, $1C
  30++EBA6 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  31++EBAA 1F 45 0C 04                          DB $1F, $45, $0C, $04
  32++EBAE 1F 28 08 10                          DB $1F, $28, $08, $10
  33++EBB2 1F 67 10 14                          DB $1F, $67, $10, $14
  34++EBB6 1F 49 14 0C                          DB $1F, $49, $14, $0C
  35++EBBA 14 02 00 20                          DB $14, $02, $00, $20
  36++EBBE 14 04 20 04                          DB $14, $04, $20, $04
  37++EBC2 10 26 10 20                          DB $10, $26, $10, $20
  38++EBC6 10 46 20 14                          DB $10, $46, $20, $14
  39++EBCA 1F 78 10 18                          DB $1F, $78, $10, $18
  40++EBCE 1F 79 14 1C                          DB $1F, $79, $14, $1C
  41++EBD2 14 13 00 18                          DB $14, $13, $00, $18
  42++EBD6 14 15 04 1C                          DB $14, $15, $04, $1C
  43++EBDA 02 01 28 24                          DB $02, $01, $28, $24
  44++EBDE              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  45++EBDE              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  46++EBDE 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  47++EBE2 5F 00 1B 03                          DB $5F, $00, $1B, $03
  48++EBE6 9F 08 2E 08                          DB $9F, $08, $2E, $08
  49++EBEA DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  50++EBEE 1F 08 2E 08                          DB $1F, $08, $2E, $08
  51++EBF2 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  52++EBF6 1F 00 31 00                          DB $1F, $00, $31, $00
  53++EBFA 3F 00 00 9A                          DB $3F, $00, $00, $9A
  54++EBFE BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  55++EC02 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  56++EC06              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  57++EC06              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  58++EC06
# file closed: ./Data/Ships/Cobra_Mk_1.asm
 453+ EC06                                      include "Data/Ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/Ships/Cobra_Mk_3_P.asm
   1++EC06 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC09 C6 EC                                DW Cobra_Mk_3_PEdges
   3++EC0B 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC0C 54 2A                                DB $54, $2A
   5++EC0E A8                                   DB Cobra_Mk_3_PVertSize
   6++EC0F 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC10 00 AF                                DB $00, $AF
   8++EC12 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC13 32 96 1C                             DB $32, $96, $1C
  10++EC16 5E ED                                DW Cobra_Mk_3_PNormals
  11++EC18 01 12                                DB $01, $12
  12++EC1A 1E EC                                DW Cobra_Mk_3_PVertices
  13++EC1C 00 00                                DB 0,0                      ; Type and Tactics
  14++EC1E 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  14++EC22 FF FF
  15++EC24 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  15++EC28 FF FF
  16++EC2A 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  16++EC2E FF FF
  17++EC30 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  17++EC34 73 AA
  18++EC36 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  18++EC3A 84 CC
  19++EC3C 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  19++EC40 FF FF
  20++EC42 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  20++EC46 FF FF
  21++EC48 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  21++EC4C 98 CC
  22++EC4E 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  22++EC52 97 AA
  23++EC54 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  23++EC58 65 99
  24++EC5A 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  24++EC5E A9 BB
  25++EC60 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  25++EC64 B9 CC
  26++EC66 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  26++EC6A 99 99
  27++EC6C 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  27++EC70 99 99
  28++EC72 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  28++EC76 99 99
  29++EC78 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  29++EC7C 99 99
  30++EC7E 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  30++EC82 99 99
  31++EC84 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  31++EC88 99 99
  32++EC8A 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  32++EC8E 99 99
  33++EC90 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  33++EC94 99 99
  34++EC96 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  34++EC9A B0 BB
  35++EC9C 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  35++ECA0 B0 BB
  36++ECA2 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  36++ECA6 99 99
  37++ECA8 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  37++ECAC 99 99
  38++ECAE 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  38++ECB2 99 99
  39++ECB4 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  39++ECB8 99 99
  40++ECBA 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  40++ECBE 99 99
  41++ECC0 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  41++ECC4 99 99
  42++ECC6              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  43++ECC6 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  44++ECCA 1F C4 00 10                          DB $1F, $C4, $00, $10
  45++ECCE 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  46++ECD2 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  47++ECD6 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  48++ECDA 1F 98 18 1C                          DB $1F, $98, $18, $1C
  49++ECDE 1F 96 18 24                          DB $1F, $96, $18, $24
  50++ECE2 1F 95 14 24                          DB $1F, $95, $14, $24
  51++ECE6 1F 97 14 20                          DB $1F, $97, $14, $20
  52++ECEA 1F 51 08 14                          DB $1F, $51, $08, $14
  53++ECEE 1F 62 08 18                          DB $1F, $62, $08, $18
  54++ECF2 1F 73 0C 14                          DB $1F, $73, $0C, $14
  55++ECF6 1F 84 10 18                          DB $1F, $84, $10, $18
  56++ECFA 1F 10 04 08                          DB $1F, $10, $04, $08
  57++ECFE 1F 20 00 08                          DB $1F, $20, $00, $08
  58++ED02 1F A9 20 28                          DB $1F, $A9, $20, $28
  59++ED06 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  60++ED0A 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  61++ED0E 1F BA 04 28                          DB $1F, $BA, $04, $28
  62++ED12 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  63++ED16 1D 31 04 14                          DB $1D, $31, $04, $14
  64++ED1A 1D 42 00 18                          DB $1D, $42, $00, $18
  65++ED1E 06 B0 50 54                          DB $06, $B0, $50, $54
  66++ED22 14 99 30 34                          DB $14, $99, $30, $34
  67++ED26 14 99 48 4C                          DB $14, $99, $48, $4C
  68++ED2A 14 99 38 3C                          DB $14, $99, $38, $3C
  69++ED2E 14 99 40 44                          DB $14, $99, $40, $44
  70++ED32 13 99 3C 40                          DB $13, $99, $3C, $40
  71++ED36 11 99 38 44                          DB $11, $99, $38, $44
  72++ED3A 13 99 34 48                          DB $13, $99, $34, $48
  73++ED3E 13 99 30 4C                          DB $13, $99, $30, $4C
  74++ED42 1E 65 08 24                          DB $1E, $65, $08, $24
  75++ED46 06 99 58 60                          DB $06, $99, $58, $60
  76++ED4A 06 99 5C 60                          DB $06, $99, $5C, $60
  77++ED4E 08 99 58 5C                          DB $08, $99, $58, $5C
  78++ED52 06 99 64 68                          DB $06, $99, $64, $68
  79++ED56 06 99 68 6C                          DB $06, $99, $68, $6C
  80++ED5A 08 99 64 6C                          DB $08, $99, $64, $6C
  81++ED5E              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  82++ED5E              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  83++ED5E 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  84++ED62 9F 12 37 10                          DB $9F, $12, $37, $10
  85++ED66 1F 12 37 10                          DB $1F, $12, $37, $10
  86++ED6A 9F 10 34 0E                          DB $9F, $10, $34, $0E
  87++ED6E 1F 10 34 0E                          DB $1F, $10, $34, $0E
  88++ED72 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  89++ED76 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  90++ED7A 9F 3D 66 00                          DB $9F, $3D, $66, $00
  91++ED7E 1F 3D 66 00                          DB $1F, $3D, $66, $00
  92++ED82 3F 00 00 50                          DB $3F, $00, $00, $50
  93++ED86 DF 07 2A 09                          DB $DF, $07, $2A, $09
  94++ED8A 5F 00 1E 06                          DB $5F, $00, $1E, $06
  95++ED8E 5F 07 2A 09                          DB $5F, $07, $2A, $09
  96++ED92              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  97++ED92              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  98++ED92
# file closed: ./Data/Ships/Cobra_Mk_3_P.asm
 454+ ED92                                      include "Data/Ships/Constrictor.asm"
# file opened: ./Data/Ships/Constrictor.asm
   1++ED92              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++ED92              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++ED92              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++ED92 F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++ED95 10 EE                                DW ConstrictorEdges
   6++ED97 60                                   DB ConstrictorEdgesSize
   7++ED98 00 2E                                DB $00,$2E
   8++ED9A 66                                   DB ConstrictorVertSize
   9++ED9B 18                                   DB ConstrictorEdgesCnt
  10++ED9C 18 00                                DB $18,$00
  11++ED9E 28                                   DB ConstrictorNormalsSize
  12++ED9F 2D C8 37                             DB $2D,$C8,$37
  13++EDA2 70 EE                                DW ConstrictorNormals
  14++EDA4 02 2F                                DB $02,$2F
  15++EDA6 AA ED                                DW ConstrictorVertices
  16++EDA8 00 00                                DB 0,0                      ; Type and Tactics
  17++EDAA                                  ; missiles = 3
  18++EDAA 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  18++EDAE 02 99
  19++EDB0 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  19++EDB4 01 99
  20++EDB6 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  20++EDBA 14 99
  21++EDBC 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  21++EDC0 45 89
  22++EDC2 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  22++EDC6 56 88
  23++EDC8 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  23++EDCC 67 88
  24++EDCE 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  24++EDD2 37 89
  25++EDD4 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  25++EDD8 23 99
  26++EDDA 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  26++EDDE FF FF
  27++EDE0 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  27++EDE4 FF FF
  28++EDE6 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  28++EDEA 99 99
  29++EDEC 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  29++EDF0 99 99
  30++EDF2 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  30++EDF6 99 99
  31++EDF8 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  31++EDFC 99 99
  32++EDFE 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  32++EE02 99 99
  33++EE04 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  33++EE08 99 99
  34++EE0A 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  34++EE0E 9F 01
  35++EE10              ConstrictorVertSize     equ $  - ConstrictorVertices
  36++EE10 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  36++EE14 1F 19 04 08
  37++EE18 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  37++EE1C 1F 02 00 20
  38++EE20 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  38++EE24 1F 23 1C 20
  39++EE28 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  39++EE2C 1F 49 08 0C
  40++EE30 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  40++EE34 1F 37 18 20
  41++EE38 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  41++EE3C 1F 56 10 24
  42++EE40 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  42++EE44 1F 58 0C 10
  43++EE48 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  43++EE4C 1F 78 14 18
  44++EE50 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  44++EE54 1F 06 20 24
  45++EE58 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  45++EE5C 05 99 30 38
  46++EE60 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  46++EE64 0A 99 2C 3C
  47++EE68 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  47++EE6C 12 99 2C 34
  48++EE70              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  49++EE70              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  50++EE70 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  50++EE74 9F 18 4B 14
  51++EE78 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  51++EE7C 1F 2C 4B 00
  52++EE80 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  52++EE84 9F 2C 4B 00
  53++EE88 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  53++EE8C 1F 2C 4B 00
  54++EE90 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  54++EE94 5F 00 1B 00
  55++EE98              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  56++EE98              ConstrictorLen          equ $  - Constrictor
  57++EE98
# file closed: ./Data/Ships/Constrictor.asm
 455+ EE98                                      include "Data/Ships/Coriolis.asm"
# file opened: ./Data/Ships/Coriolis.asm
   1++EE98 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EE9B 10 EF                                DW CoriolisEdges
   3++EE9D 70                                   DB CoriolisEdgesSize
   4++EE9E 00 36                                DB $00, $36
   5++EEA0 60                                   DB CoriolisVertSize
   6++EEA1 1C                                   DB CoriolisEdgesCnt
   7++EEA2 00 00                                DB $00, $00
   8++EEA4 38                                   DB CoriolisNormalsSize
   9++EEA5 78 F0 00                             DB $78, $F0, $00
  10++EEA8 80 EF                                DW CoriolisNormals
  11++EEAA 00 06                                DB $00, $06
  12++EEAC B0 EE                                DW CoriolisVertices
  13++EEAE 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++EEB0 A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  14++EEB4 10 62
  15++EEB6 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  15++EEBA 20 83
  16++EEBC A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  16++EEC0 30 74
  17++EEC2 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  17++EEC6 10 54
  18++EEC8 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  18++EECC 51 A6
  19++EECE A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  19++EED2 62 B8
  20++EED4 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  20++EED8 73 C8
  21++EEDA A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  21++EEDE 54 97
  22++EEE0 A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  22++EEE4 A6 DB
  23++EEE6 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  23++EEEA B8 DC
  24++EEEC A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  24++EEF0 97 DC
  25++EEF2 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  25++EEF6 95 DA
  26++EEF8 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  26++EEFC 00 00
  27++EEFE 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  27++EF02 00 00
  28++EF04 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  28++EF08 00 00
  29++EF0A 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  29++EF0E 00 00
  30++EF10              CoriolisVertSize:       equ $ - CoriolisVertices
  31++EF10 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  32++EF14 1F 20 00 04                          DB $1F, $20, $00, $04
  33++EF18 1F 30 04 08                          DB $1F, $30, $04, $08
  34++EF1C 1F 40 08 0C                          DB $1F, $40, $08, $0C
  35++EF20 1F 51 0C 10                          DB $1F, $51, $0C, $10
  36++EF24 1F 61 00 10                          DB $1F, $61, $00, $10
  37++EF28 1F 62 00 14                          DB $1F, $62, $00, $14
  38++EF2C 1F 82 14 04                          DB $1F, $82, $14, $04
  39++EF30 1F 83 04 18                          DB $1F, $83, $04, $18
  40++EF34 1F 73 08 18                          DB $1F, $73, $08, $18
  41++EF38 1F 74 08 1C                          DB $1F, $74, $08, $1C
  42++EF3C 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  43++EF40 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  44++EF44 1F DB 20 24                          DB $1F, $DB, $20, $24
  45++EF48 1F DC 24 28                          DB $1F, $DC, $24, $28
  46++EF4C 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  47++EF50 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  48++EF54 1F A6 10 20                          DB $1F, $A6, $10, $20
  49++EF58 1F B6 14 20                          DB $1F, $B6, $14, $20
  50++EF5C 1F B8 14 24                          DB $1F, $B8, $14, $24
  51++EF60 1F C8 18 24                          DB $1F, $C8, $18, $24
  52++EF64 1F C7 18 28                          DB $1F, $C7, $18, $28
  53++EF68 1F 97 1C 28                          DB $1F, $97, $1C, $28
  54++EF6C 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  55++EF70 1E 00 30 34                          DB $1E, $00, $30, $34
  56++EF74 1E 00 34 38                          DB $1E, $00, $34, $38
  57++EF78 1E 00 38 3C                          DB $1E, $00, $38, $3C
  58++EF7C 1E 00 3C 30                          DB $1E, $00, $3C, $30
  59++EF80              CoriolisEdgesSize:      equ $ - CoriolisEdges
  60++EF80              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  61++EF80 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  62++EF84 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  63++EF88 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  64++EF8C 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  65++EF90 DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  66++EF94 5F 00 A0 00                          DB $5F, $00, $A0, $00
  67++EF98 1F A0 00 00                          DB $1F, $A0, $00, $00
  68++EF9C 9F A0 00 00                          DB $9F, $A0, $00, $00
  69++EFA0 1F 00 A0 00                          DB $1F, $00, $A0, $00
  70++EFA4 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  71++EFA8 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  72++EFAC 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  73++EFB0 BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  74++EFB4 3F 00 00 A0                          DB $3F, $00, $00, $A0
  75++EFB8              CoriolisNormalsSize:    equ $ - CoriolisNormals
  76++EFB8              CoriolisLen:            equ $ - Coriolis
  77++EFB8
# file closed: ./Data/Ships/Coriolis.asm
 456+ EFB8                                      include "Data/Ships/Cougar.asm"
# file opened: ./Data/Ships/Cougar.asm
   1++EFB8 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFBB 42 F0                                DW CougarEdges
   3++EFBD 64                                   DB CougarEdgesSize
   4++EFBE 00 2A                                DB $00, $2A
   5++EFC0 72                                   DB CougarVertSize
   6++EFC1 19                                   DB CougarEdgesCnt
   7++EFC2 00 00                                DB $00, $00
   8++EFC4 18                                   DB CougarNormalsSize
   9++EFC5 22 FC 28                             DB $22, $FC, $28
  10++EFC8 A6 F0                                DW CougarNormals
  11++EFCA 02 34                                DB $02, $34
  12++EFCC D0 EF                                DW CougarVertices
  13++EFCE 00 00                                DB 0,0                      ; Type and Tactics
  14++EFD0 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  14++EFD4 02 44
  15++EFD6 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  15++EFDA 01 22
  16++EFDC 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  16++EFE0 01 55
  17++EFE2 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  17++EFE6 04 55
  18++EFE8 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  18++EFEC 12 35
  19++EFEE 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  19++EFF2 23 44
  20++EFF4 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  20++EFF8 34 55
  21++EFFA 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  21++EFFE 01 11
  22++F000 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  22++F004 01 11
  23++F006 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  23++F00A 34 44
  24++F00C 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  24++F010 34 44
  25++F012 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  25++F016 00 44
  26++F018 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  26++F01C 00 44
  27++F01E 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  27++F022 00 00
  28++F024 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  28++F028 44 44
  29++F02A 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  29++F02E 55 55
  30++F030 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  30++F034 55 55
  31++F036 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  31++F03A 55 55
  32++F03C 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  32++F040 55 55
  33++F042              CougarVertSize:         equ $ - CougarVertices
  34++F042 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  35++F046 1F 01 04 1C                          DB $1F, $01, $04, $1C
  36++F04A 1F 01 1C 20                          DB $1F, $01, $1C, $20
  37++F04E 1F 01 20 08                          DB $1F, $01, $20, $08
  38++F052 1E 05 08 0C                          DB $1E, $05, $08, $0C
  39++F056 1E 45 0C 18                          DB $1E, $45, $0C, $18
  40++F05A 1E 15 08 10                          DB $1E, $15, $08, $10
  41++F05E 1E 35 10 18                          DB $1E, $35, $10, $18
  42++F062 1F 34 18 28                          DB $1F, $34, $18, $28
  43++F066 1F 34 28 24                          DB $1F, $34, $28, $24
  44++F06A 1F 34 24 14                          DB $1F, $34, $24, $14
  45++F06E 1F 24 14 00                          DB $1F, $24, $14, $00
  46++F072 1B 04 00 0C                          DB $1B, $04, $00, $0C
  47++F076 1B 12 04 10                          DB $1B, $12, $04, $10
  48++F07A 1B 23 14 10                          DB $1B, $23, $14, $10
  49++F07E 1A 01 04 08                          DB $1A, $01, $04, $08
  50++F082 1A 34 14 18                          DB $1A, $34, $14, $18
  51++F086 14 00 30 34                          DB $14, $00, $30, $34
  52++F08A 12 00 34 2C                          DB $12, $00, $34, $2C
  53++F08E 12 44 2C 38                          DB $12, $44, $2C, $38
  54++F092 14 44 38 30                          DB $14, $44, $38, $30
  55++F096 12 55 3C 40                          DB $12, $55, $3C, $40
  56++F09A 14 55 40 48                          DB $14, $55, $40, $48
  57++F09E 12 55 48 44                          DB $12, $55, $48, $44
  58++F0A2 14 55 44 3C                          DB $14, $55, $44, $3C
  59++F0A6              CougarEdgesSize:        equ $ - CougarEdges
  60++F0A6              CougarEdgesCnt:         equ CougarEdgesSize/4
  61++F0A6 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  62++F0AA DF 10 2E 04                          DB $DF, $10, $2E, $04
  63++F0AE 5F 00 1B 05                          DB $5F, $00, $1B, $05
  64++F0B2 5F 10 2E 04                          DB $5F, $10, $2E, $04
  65++F0B6 1F 10 2E 04                          DB $1F, $10, $2E, $04
  66++F0BA 3E 00 00 A0                          DB $3E, $00, $00, $A0
  67++F0BE              CougarNormalsSize:      equ $ - CougarNormals
  68++F0BE              CougarLen:              equ $ - Cougar
  69++F0BE
# file closed: ./Data/Ships/Cougar.asm
 457+ F0BE                                      include "Data/Ships/Dodo.asm"
# file opened: ./Data/Ships/Dodo.asm
   1++F0BE 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0C1 66 F1                                DW DodoEdges
   3++F0C3 88                                   DB DodoEdgesSize
   4++F0C4 00 36                                DB $00, $36
   5++F0C6 90                                   DB DodoVertSize
   6++F0C7 22                                   DB DodoEdgesCnt
   7++F0C8 00 00                                DB $00, $00
   8++F0CA 30                                   DB DodoNormalsSize
   9++F0CB 7D F0 00                             DB $7D, $F0, $00
  10++F0CE EE F1                                DW DodoNormals
  11++F0D0 00 00                                DB $00, $00
  12++F0D2 D6 F0                                DW DodoVertices
  13++F0D4 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0D6 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  14++F0DA 01 55
  15++F0DC 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  15++F0E0 01 22
  16++F0E2 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  16++F0E6 02 33
  17++F0E8 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  17++F0EC 03 44
  18++F0EE 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  18++F0F2 04 55
  19++F0F4 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  19++F0F8 15 66
  20++F0FA E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  20++F0FE 12 77
  21++F100 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  21++F104 23 88
  22++F106 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  22++F10A 34 99
  23++F10C E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  23++F110 45 AA
  24++F112 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  24++F116 16 77
  25++F118 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  25++F11C 27 88
  26++F11E 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  26++F122 38 99
  27++F124 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  27++F128 49 AA
  28++F12A 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  28++F12E 56 AA
  29++F130 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  29++F134 67 BB
  30++F136 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  30++F13A 78 BB
  31++F13C 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  31++F140 89 BB
  32++F142 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  32++F146 9A BB
  33++F148 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  33++F14C 6A BB
  34++F14E 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  34++F152 00 00
  35++F154 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  35++F158 00 00
  36++F15A 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  36++F15E 00 00
  37++F160 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  37++F164 00 00
  38++F166              DodoVertSize:           equ $ - DodoVertices
  39++F166 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  40++F16A 1F 02 04 08                          DB $1F, $02, $04, $08
  41++F16E 1F 03 08 0C                          DB $1F, $03, $08, $0C
  42++F172 1F 04 0C 10                          DB $1F, $04, $0C, $10
  43++F176 1F 05 10 00                          DB $1F, $05, $10, $00
  44++F17A 1F 16 14 28                          DB $1F, $16, $14, $28
  45++F17E 1F 17 28 18                          DB $1F, $17, $28, $18
  46++F182 1F 27 18 2C                          DB $1F, $27, $18, $2C
  47++F186 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  48++F18A 1F 38 1C 30                          DB $1F, $38, $1C, $30
  49++F18E 1F 39 30 20                          DB $1F, $39, $30, $20
  50++F192 1F 49 20 34                          DB $1F, $49, $20, $34
  51++F196 1F 4A 34 24                          DB $1F, $4A, $34, $24
  52++F19A 1F 5A 24 38                          DB $1F, $5A, $24, $38
  53++F19E 1F 56 38 14                          DB $1F, $56, $38, $14
  54++F1A2 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  55++F1A6 1F 8B 40 44                          DB $1F, $8B, $40, $44
  56++F1AA 1F 9B 44 48                          DB $1F, $9B, $44, $48
  57++F1AE 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  58++F1B2 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  59++F1B6 1F 15 00 14                          DB $1F, $15, $00, $14
  60++F1BA 1F 12 04 18                          DB $1F, $12, $04, $18
  61++F1BE 1F 23 08 1C                          DB $1F, $23, $08, $1C
  62++F1C2 1F 34 0C 20                          DB $1F, $34, $0C, $20
  63++F1C6 1F 45 10 24                          DB $1F, $45, $10, $24
  64++F1CA 1F 67 28 3C                          DB $1F, $67, $28, $3C
  65++F1CE 1F 78 2C 40                          DB $1F, $78, $2C, $40
  66++F1D2 1F 89 30 44                          DB $1F, $89, $30, $44
  67++F1D6 1F 9A 34 48                          DB $1F, $9A, $34, $48
  68++F1DA 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  69++F1DE 1E 00 50 54                          DB $1E, $00, $50, $54
  70++F1E2 14 00 54 5C                          DB $14, $00, $54, $5C
  71++F1E6 17 00 5C 58                          DB $17, $00, $5C, $58
  72++F1EA 14 00 58 50                          DB $14, $00, $58, $50
  73++F1EE              DodoEdgesSize:          equ $ - DodoEdges
  74++F1EE              DodoEdgesCnt:           equ DodoEdgesSize/4
  75++F1EE 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  76++F1F2 1F 67 8E 58                          DB $1F, $67, $8E, $58
  77++F1F6 5F A9 37 59                          DB $5F, $A9, $37, $59
  78++F1FA 5F 00 B0 58                          DB $5F, $00, $B0, $58
  79++F1FE DF A9 37 59                          DB $DF, $A9, $37, $59
  80++F202 9F 67 8E 58                          DB $9F, $67, $8E, $58
  81++F206 3F 00 B0 58                          DB $3F, $00, $B0, $58
  82++F20A 3F A9 37 59                          DB $3F, $A9, $37, $59
  83++F20E 7F 67 8E 58                          DB $7F, $67, $8E, $58
  84++F212 FF 67 8E 58                          DB $FF, $67, $8E, $58
  85++F216 BF A9 37 59                          DB $BF, $A9, $37, $59
  86++F21A 3F 00 00 C4                          DB $3F, $00, $00, $C4
  87++F21E              DodoNormalsSize:        equ $ - DodoNormals
  88++F21E              DodoLen:                equ $ - Dodo
  89++F21E
# file closed: ./Data/Ships/Dodo.asm
 458+ F21E                                      ENDIF
 459+ F21E                                      IFDEF SHIPBANKB
 460+ F21E ~                                    include "Data/Ships/Dragon.asm"
 461+ F21E ~                                    include "Data/Ships/Escape_Pod.asm"
 462+ F21E ~                                    include "Data/Ships/Fer_De_Lance.asm"
 463+ F21E ~                                    include "Data/Ships/Gecko.asm"
 464+ F21E ~                                    include "Data/Ships/Ghavial.asm"
 465+ F21E ~                                    include "Data/Ships/Iguana.asm"
 466+ F21E ~                                    include "Data/Ships/Krait.asm"
 467+ F21E ~                                    include "Data/Ships/Logo.asm"
 468+ F21E ~                                    include "Data/Ships/Mamba.asm"
 469+ F21E ~                                    include "Data/Ships/Missile.asm"
 470+ F21E ~                                    include "Data/Ships/Monitor.asm"
 471+ F21E ~                                    include "Data/Ships/Moray.asm"
 472+ F21E ~                                    include "Data/Ships/Ophidian.asm"
 473+ F21E ~                                    include "Data/Ships/Plate.asm"
 474+ F21E ~                                    include "Data/Ships/Python.asm"
 475+ F21E ~                                    include "Data/Ships/Python_P.asm"
 476+ F21E                                      ENDIF
 477+ F21E                                      IFDEF SHIPBANKC
 478+ F21E ~                                    include "Data/Ships/Rattler.asm"
 479+ F21E ~                                    include "Data/Ships/Rock_Hermit.asm"
 480+ F21E ~                                    include "Data/Ships/ShuttleType9.asm"
 481+ F21E ~                                    include "Data/Ships/Shuttle_Mk_2.asm"
 482+ F21E ~                                    include "Data/Ships/Sidewinder.asm"
 483+ F21E ~                                    include "Data/Ships/Splinter.asm"
 484+ F21E ~                                    include "Data/Ships/TestVector.asm"
 485+ F21E ~                                    include "Data/Ships/Thargoid.asm"
 486+ F21E ~                                    include "Data/Ships/Thargon.asm"
 487+ F21E ~                                    include "Data/Ships/TransportType10.asm"
 488+ F21E ~                                    include "Data/Ships/Viper.asm"
 489+ F21E ~                                    include "Data/Ships/Worm.asm"
 490+ F21E                                      ENDIF
 491+ F21E
 492+ F21E
 493+ F21E              ; TODO Later reorg these offsets for better 16 bit read - Done
 494+ F21E              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 495+ F21E
 496+ F21E
 497+ F21E              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 498+ F21E              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 499+ F21E              ; Scoop: 0 = no scoop 1= scoop , anything more?
 500+ F21E              ; hull byte#1-2 area for missile lock, lo, hi
 501+ F21E              ; hull byte#3   edges data info offset lo
 502+ F21E              ; hull byte#4   faces data info offset lo
 503+ F21E              ; hull byte#5   4*maxlines+1 for ship lines stack
 504+ F21E              ; hull byte#6   gun vertex*4
 505+ F21E              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 506+ F21E              ; hull byte#8   vertices*6
 507+ F21E              ; hull byte#9	edge Count
 508+ F21E              ; hull bytes#10-11 bounty lo hi
 509+ F21E              ; hull byte#12  faces*4
 510+ F21E              ; hull byte#13  dot beyond distance
 511+ F21E              ; hull byte#14  energy
 512+ F21E              ; hull byte#15  speed (end of 4th row)
 513+ F21E              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 514+ F21E              ; hull byte#17  faces offset hi
 515+ F21E              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 516+ F21E              ; hull byte#19  laser|missile(=lower 3 bits)
 517+ F21E              ; hull byte#20  Added Vertices for 20,21
 518+ F21E
 519+ F21E              ; Optimised version to be applied to add data brought in to here:
 520+ F21E              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 521+ F21E              ; hull byte#1-2 area for missile lock, lo, hi
 522+ F21E              ; hull byte#3   edges data info offset lo
 523+ F21E              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 524+ F21E              ; hull byte#5   4*maxlines+1 for ship lines stack
 525+ F21E              ; hull byte#6   gun vertex*4
 526+ F21E              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 527+ F21E              ; hull byte#8   vertices*6
 528+ F21E              ; hull byte#9	edge Count
 529+ F21E              ; hull bytes#10-11 bounty lo hi
 530+ F21E              ; hull byte#12  faces*4
 531+ F21E              ; hull byte#13  dot beyond distance
 532+ F21E              ; hull byte#14  energy
 533+ F21E              ; hull byte#15  speed (end of 4th row)
 534+ F21E              ; hull byte#16  faces data info offset lo (was 4)
 535+ F21E              ; hull byte#17  faces offset hi
 536+ F21E              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 537+ F21E              ; hull bute#19  laser|missile(=lower 3 bits)
 538+ F21E              ; hull byte#20  Added Vertices for 20,21
 539+ F21E              ;
 540+ F21E              ; Vertex Data Structure
 541+ F21E              ; Byte 0 X1Lo
 542+ F21E              ; Byte 1 X1Hi
 543+ F21E              ; Byte 2 Y1Lo
 544+ F21E              ; Byte 3 Y1Hi
 545+ F21E              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 546+ F21E              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 547+ F21E              ;
 548+ F21E              ;
 549+ F21E              ; Edge Data Structure
 550+ F21E              ; Byte 0
 551+ F21E              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 552+ F21E              ; Byte 2 - Index to Vertex 1
 553+ F21E              ; Byte 3 - Index to Vertex 2
 554+ F21E              ;
 555+ F21E              ; Normal/Faces Data Structure
 556+ F21E              ;
 557+ F21E              ;
 558+ F21E              ;
 559+ F21E              ; Original Data:
 560+ F21E              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 561+ F21E              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 562+ F21E              ;		\ hull byte#1-2 area for missile lock, lo, hi
 563+ F21E              ;		\ hull byte#3   edges data info offset lo
 564+ F21E              ;		\ hull byte#4   faces data info offset lo
 565+ F21E              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 566+ F21E              ;		\ hull byte#6   gun vertex*4
 567+ F21E              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 568+ F21E              ;		\ hull byte#8   vertices*6
 569+ F21E              ;		\ hull bytes#10-11 bounty lo hi
 570+ F21E              ;		\ hull byte#12  faces*4
 571+ F21E              ;		\ hull byte#13  dot beyond distance
 572+ F21E              ;		\ hull byte#14  energy
 573+ F21E              ;		\ hull byte#15  speed (end of 4th row)
 574+ F21E              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 575+ F21E              ;		\ hull byte#17  faces offset hi
 576+ F21E              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 577+ F21E              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 578+ F21E              ; Corrected pointers
 579+ F21E              ; &565D \ Cargo cannister = Type 5
 580+ F21E              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 581+ F21E              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 582+ F21E              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 583+ F21E              ; Mapping Orginal to new
 584+ F21E              ; 0    => 0
 585+ F21E              ; 1-2  => 1-2
 586+ F21E              ; 3    => EQU Edges
 587+ F21E              ; 4    => EQU Normals
 588+ F21E              ; 5    => EQU EdgesCnt
 589+ F21E              ; 6    => 6
 590+ F21E              ; 7    => 7
 591+ F21E              ; 8    => EQU VertSize
 592+ F21E              ; 9    => EQU EdgesCnt
 593+ F21E              ; 10-11=> 10-11
 594+ F21E              ; 12   => EQU  NormalsSize
 595+ F21E              ; 13   => 13
 596+ F21E              ; 14   => 14
 597+ F21E              ; 15   => 15
 598+ F21E              ; 16   => EQU Edges
 599+ F21E              ; 17   => EQU Normals
 600+ F21E              ; 18   => 18
 601+ F21E              ; 19   => 19
# file closed: ./Data/ShipModels.asm
1044  F21E              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1045  F21E                  SLOT    ShipModelsAddr
1046  F21E                  PAGE    BankShipModelsB
1047  F21E              	ORG     ShipModelsAddr, BankShipModelsB
1048  E000                  UNDEFINE SHIPBANKA
1049  E000                  DEFINE   SHIPBANKB 1
1050  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000 ~                            DEFINE SHIPEQUATES
   3+ E000 ~            ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   4+ E000 ~            MissileLockLoOffset	    equ 1
   5+ E000 ~            MissileLockHiOffset	    equ 2
   6+ E000 ~            EdgeAddyOffset		    equ 3
   7+ E000 ~            LineX4Offset		    equ 5
   8+ E000 ~            GunVertexOffset		    equ 6
   9+ E000 ~            ExplosionCtOffset	    equ 7
  10+ E000 ~            VertexCtX6Offset	    equ 8
  11+ E000 ~            EdgeCountOffset		    equ 9
  12+ E000 ~            BountyLoOffset		    equ 10
  13+ E000 ~            BountyHiOffset		    equ 11
  14+ E000 ~            FaceCtX4Offset		    equ 12
  15+ E000 ~            DotOffset			    equ 13
  16+ E000 ~            EnergyOffset		    equ 14
  17+ E000 ~            SpeedOffset			    equ 15
  18+ E000 ~            FaceAddyOffset		    equ 16
  19+ E000 ~            QOffset				    equ 18
  20+ E000 ~            LaserOffset			    equ 19
  21+ E000 ~            VerticiesAddyOffset     equ 20
  22+ E000 ~            ShipTypeOffset          equ 22
  23+ E000 ~            ShipNewBitsOffset       equ 23
  24+ E000 ~            ShipDataLength          equ ShipNewBitsOffset+1
  25+ E000 ~
  26+ E000 ~            CobraTablePointer       equ 43
  27+ E000 ~            ;29 faulty
  28+ E000 ~            BankThreshold           equ 16
  29+ E000 ~
  30+ E000                             ENDIF
  31+ E000
  32+ E000              ;GINF:
  33+ E000                                      IFDEF SHIPBANKA
  34+ E000 ~            GetInfo:                                    ; gets pointer to ship data for ship type in a
  35+ E000 ~            GetInfoA:                                   ; gets pointer to ship data for ship type in a
  36+ E000                                      ENDIF
  37+ E000                                      IFDEF SHIPBANKB
  38+ E000              GetInfoB:
  39+ E000                                      ENDIF
  40+ E000                                      IFDEF SHIPBANKC
  41+ E000 ~            GetInfoC:
  42+ E000                                      ENDIF
  43+ E000 4F                                   ld          c,a
  44+ E001 CB 2F                                sra         a
  45+ E003 CB 2F                                sra         a
  46+ E005 CB 2F                                sra         a
  47+ E007 CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  48+ E009 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  49+ E00A 21 7B E0                             ld          hl,ShipModelBankA
  50+ E00D ED 31                                add         hl,a
  51+ E00F 7E                                   ld          a,(hl)
  52+ E010                                      MMUSelectShipModelA
  52+ E010 ED 92 57    >					 nextreg ShipModelMMU,	    a
  53+ E013 79                                   ld          a,c
  54+ E014 50                                   ld          d,b
  55+ E015 1E 10                                ld          e,16
  56+ E017 ED 30                                mul
  57+ E019 93                                   sub         a,e
  58+ E01A 21 7E E0                             ld          hl,ShipModelTable
  59+ E01D ED 31                                add         hl,a
  60+ E01F ED 31                                add         hl,a
  61+ E021 5E                                   ld          e,(hl)
  62+ E022 23                                   inc         hl
  63+ E023 56                                   ld          d,(hl)
  64+ E024 C9                                   ret
  65+ E025
  66+ E025
  67+ E025              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
  68+ E025                                      IFDEF SHIPBANKA
  69+ E025 ~            CopyVerticesDataToUBnk:
  70+ E025 ~            CopyVerticesDataToUBnkA:
  71+ E025                                      ENDIF
  72+ E025                                      IFDEF SHIPBANKB
  73+ E025              CopyVerticesDataToUBnkB:
  74+ E025                                      ENDIF
  75+ E025                                      IFDEF SHIPBANKC
  76+ E025 ~            CopyVerticesDataToUBnkC:
  77+ E025                                      ENDIF
  78+ E025 2A 11 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  79+ E028 11 15 C3                             ld          de,UBnkHullVerticies
  80+ E02B 06 00                                ld          b,0
  81+ E02D 3A 05 C3                             ld			a,(VertexCtX6Addr)
  82+ E030 4F                                   ld          c,a
  83+ E031 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  84+ E032 CD FA 8F                             call        memcopy_dma
  85+ E035 C9                                   ret
  86+ E036
  87+ E036                                      IFDEF SHIPBANKA
  88+ E036 ~            CopyEdgeDataToUBnk:
  89+ E036 ~            CopyEdgeDataToUBnkA:
  90+ E036                                      ENDIF
  91+ E036                                      IFDEF SHIPBANKB
  92+ E036              CopyEdgeDataToUBnkB:
  93+ E036                                      ENDIF
  94+ E036                                      IFDEF SHIPBANKC
  95+ E036 ~            CopyEdgeDataToUBnkC:
  96+ E036                                      ENDIF
  97+ E036 2A 00 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  98+ E039 11 41 C4                             ld          de,UBnkHullEdges
  99+ E03C 06 00                                ld          b,0
 100+ E03E 3A 02 C3                             ld			a,(LineX4Addr)
 101+ E041 4F                                   ld          c,a
 102+ E042 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 103+ E043 CD FA 8F                             call        memcopy_dma
 104+ E046 C9                                   ret
 105+ E047
 106+ E047                                      IFDEF SHIPBANKA
 107+ E047 ~            CopyNormalDataToUBnk:
 108+ E047 ~            CopyNormalDataToUBnkA:
 109+ E047                                      ENDIF
 110+ E047                                      IFDEF SHIPBANKB
 111+ E047              CopyNormalDataToUBnkB:
 112+ E047                                      ENDIF
 113+ E047                                      IFDEF SHIPBANKC
 114+ E047 ~            CopyNormalDataToUBnkC:
 115+ E047                                      ENDIF
 116+ E047 2A 0D C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 117+ E04A 11 F1 C8                             ld          de,UBnkHullNormals
 118+ E04D 06 00                                ld          b,0
 119+ E04F 3A 09 C3                             ld          a,(FaceCtX4Addr)
 120+ E052 4F                                   ld          c,a
 121+ E053 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 122+ E054 CD FA 8F                             call        memcopy_dma
 123+ E057 C9                                   ret
 124+ E058
 125+ E058                                      IFDEF SHIPBANKA
 126+ E058 ~            CopyShipDataToUBnk:
 127+ E058 ~            CopyShipDataToUBnkA:
 128+ E058                                      ENDIF
 129+ E058                                      IFDEF SHIPBANKB
 130+ E058              CopyShipDataToUBnkB:
 131+ E058                                      ENDIF
 132+ E058                                      IFDEF SHIPBANKC
 133+ E058 ~            CopyShipDataToUBnkC:
 134+ E058                                      ENDIF
 135+ E058 32 FC C2                             ld			(UbnkShipType),a			; mark ship type in bank
 136+ E05B 21 0E E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 137+ E05E ED 31                                add         hl,a
 138+ E060 ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 139+ E062 4E                                   ld          c,(hl)
 140+ E063 23                                   inc         hl
 141+ E064 46                                   ld          b,(hl)                      ; bc now equals length of data set
 142+ E065 CD 00 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 143+ E068 EB                                   ex          de,hl                       ; hl = address of Ship Data
 144+ E069 11 FD C2                             ld          de,UBnkHullCopy             ; Universe bank
 145+ E06C 01 18 00                             ld          bc,ShipDataLength
 146+ E06F ED B0                                ldir
 147+ E071 CD 25 E0                             call        CopyVerticesDataToUBnk
 148+ E074 CD 36 E0                             call        CopyEdgeDataToUBnk
 149+ E077 CD 47 E0                             call        CopyNormalDataToUBnk
 150+ E07A C9                                   ret
 151+ E07B
 152+ E07B              ; change to there are two banks
 153+ E07B              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 154+ E07B              ;
 155+ E07B
 156+ E07B
 157+ E07B
 158+ E07B
 159+ E07B              ; Ships in Bank A
 160+ E07B                                       IFDEF SHIPBANKA
 161+ E07B ~            ShipModelBankA           DB BankShipModelsA
 162+ E07B ~                                     DB BankShipModelsB
 163+ E07B ~                                     DB BankShipModelsC
 164+ E07B                                       ENDIF
 165+ E07B                                       IFDEF SHIPBANKB
 166+ E07B 3B           ShipModelBankB           DB BankShipModelsA
 167+ E07C 43                                    DB BankShipModelsB
 168+ E07D 44                                    DB BankShipModelsC
 169+ E07E                                       ENDIF
 170+ E07E                                       IFDEF SHIPBANKC
 171+ E07E ~            ShipModelBankC           DB BankShipModelsA
 172+ E07E ~                                     DB BankShipModelsB
 173+ E07E ~                                     DB BankShipModelsC
 174+ E07E                                       ENDIF
 175+ E07E                                       IFDEF SHIPBANKA
 176+ E07E ~            ShipModelTableA:         DW Adder
 177+ E07E ~                                     DW Anaconda
 178+ E07E ~                                     DW Asp_Mk_2
 179+ E07E ~                                     DW Asteroid
 180+ E07E ~                                     DW Boa
 181+ E07E ~                                     DW Boulder
 182+ E07E ~                                     DW Bushmaster
 183+ E07E ~                                     DW CargoType5
 184+ E07E ~                                     DW Chameleon
 185+ E07E ~                                     DW CobraMk3
 186+ E07E ~                                     DW Cobra_Mk_1
 187+ E07E ~                                     DW Cobra_Mk_3_P
 188+ E07E ~                                     DW Constrictor
 189+ E07E ~                                     DW Coriolis
 190+ E07E ~                                     DW Cougar
 191+ E07E ~                                     DW Dodo
 192+ E07E ~                                     DW Dragon
 193+ E07E ~                                     DW Escape_Pod
 194+ E07E ~                                     DW Fer_De_Lance
 195+ E07E ~                                     DW Gecko
 196+ E07E ~                                     DW Ghavial
 197+ E07E ~                                     DW Iguana
 198+ E07E ~                                     DW Krait
 199+ E07E ~                                     DW Logo
 200+ E07E ~            ShipVertexTableA:        DW AdderVertices
 201+ E07E ~                                     DW AnacondaVertices
 202+ E07E ~                                     DW Asp_Mk_2Vertices
 203+ E07E ~                                     DW AsteroidVertices
 204+ E07E ~                                     DW BoaVertices
 205+ E07E ~                                     DW BoulderVertices
 206+ E07E ~                                     DW BushmasterVertices
 207+ E07E ~                                     DW CargoType5Vertices
 208+ E07E ~                                     DW ChameleonVertices
 209+ E07E ~                                     DW CobraMk3Vertices
 210+ E07E ~                                     DW Cobra_Mk_1Vertices
 211+ E07E ~                                     DW Cobra_Mk_3_PVertices
 212+ E07E ~                                     DW ConstrictorVertices
 213+ E07E ~                                     DW CoriolisVertices
 214+ E07E ~                                     DW CougarVertices
 215+ E07E ~                                     DW DodoVertices
 216+ E07E ~            ShipEdgeTableA:          DW AdderEdges
 217+ E07E ~                                     DW AnacondaEdges
 218+ E07E ~                                     DW Asp_Mk_2Edges
 219+ E07E ~                                     DW AsteroidEdges
 220+ E07E ~                                     DW BoaEdges
 221+ E07E ~                                     DW BoulderEdges
 222+ E07E ~                                     DW BushmasterEdges
 223+ E07E ~                                     DW CargoType5Edges
 224+ E07E ~                                     DW ChameleonEdges
 225+ E07E ~                                     DW CobraMk3Edges
 226+ E07E ~                                     DW Cobra_Mk_1Edges
 227+ E07E ~                                     DW Cobra_Mk_3_PEdges
 228+ E07E ~                                     DW ConstrictorEdges
 229+ E07E ~                                     DW CoriolisEdges
 230+ E07E ~                                     DW CougarEdges
 231+ E07E ~                                     DW DodoEdges
 232+ E07E ~            ShipNormalTableA:        DW AdderNormals
 233+ E07E ~                                     DW AnacondaNormals
 234+ E07E ~                                     DW Asp_Mk_2Normals
 235+ E07E ~                                     DW AsteroidNormals
 236+ E07E ~                                     DW BoaNormals
 237+ E07E ~                                     DW BoulderNormals
 238+ E07E ~                                     DW BushmasterNormals
 239+ E07E ~                                     DW CargoType5Normals
 240+ E07E ~                                     DW ChameleonNormals
 241+ E07E ~                                     DW CobraMk3Normals
 242+ E07E ~                                     DW Cobra_Mk_1Normals
 243+ E07E ~                                     DW Cobra_Mk_3_PNormals
 244+ E07E ~                                     DW ConstrictorNormals
 245+ E07E ~                                     DW CoriolisNormals
 246+ E07E ~                                     DW CougarNormals
 247+ E07E ~                                     DW DodoNormals
 248+ E07E ~            ShipModelSizeTableA:     DW AdderLen
 249+ E07E ~                                     DW AnacondaLen
 250+ E07E ~                                     DW Asp_Mk_2Len
 251+ E07E ~                                     DW AsteroidLen
 252+ E07E ~                                     DW BoaLen
 253+ E07E ~                                     DW BoulderLen
 254+ E07E ~                                     DW BushmasterLen
 255+ E07E ~                                     DW CargoType5Len
 256+ E07E ~                                     DW ChameleonLen
 257+ E07E ~                                     DW CobraMk3Len
 258+ E07E ~                                     DW Cobra_Mk_1Len
 259+ E07E ~                                     DW Cobra_Mk_3_PLen
 260+ E07E ~                                     DW ConstrictorLen
 261+ E07E ~                                     DW CoriolisLen
 262+ E07E ~                                     DW CougarLen
 263+ E07E ~                                     DW DodoLen
 264+ E07E                                       ENDIF
 265+ E07E                                       IFDEF SHIPBANKB
 266+ E07E 1E E1        ShipModelTableB:         DW Dragon
 267+ E080 F8 E1                                 DW Escape_Pod
 268+ E082 50 E2                                 DW Fer_De_Lance
 269+ E084 6E E3                                 DW Gecko
 270+ E086 36 E4                                 DW Ghavial
 271+ E088 1E E5                                 DW Iguana
 272+ E08A 14 E6                                 DW Krait
 273+ E08C FE E6                                 DW Logo
 274+ E08E BA E8                                 DW Mamba
 275+ E090 EC E9                                 DW Missile
 276+ E092 EE EA                                 DW Monitor
 277+ E094 F4 EB                                 DW Moray
 278+ E096 D0 EC                                 DW Ophidian
 279+ E098 08 EE                                 DW Plate
 280+ E09A 46 EE                                 DW Python
 281+ E09C 3C EF                                 DW Python_P
 282+ E09E 36 E1        ShipVertexTableB:        DW DragonVertices
 283+ E0A0 10 E2                                 DW Escape_PodVertices
 284+ E0A2 68 E2                                 DW Fer_De_LanceVertices
 285+ E0A4 86 E3                                 DW GeckoVertices
 286+ E0A6 4E E4                                 DW GhavialVertices
 287+ E0A8 36 E5                                 DW IguanaVertices
 288+ E0AA 2C E6                                 DW KraitVertices
 289+ E0AC 16 E7                                 DW LogoVertices
 290+ E0AE D2 E8                                 DW MambaVertices
 291+ E0B0 04 EA                                 DW MissileVertices
 292+ E0B2 06 EB                                 DW MonitorVertices
 293+ E0B4 0C EC                                 DW MorayVertices
 294+ E0B6 E8 EC                                 DW OphidianVertices
 295+ E0B8 20 EE                                 DW PlateVertices
 296+ E0BA 5E EE                                 DW PythonVertices
 297+ E0BC 54 EF                                 DW Python_PVertices
 298+ E0BE 6C E1        ShipEdgeTableB:          DW DragonEdges
 299+ E0C0 28 E2                                 DW Escape_PodEdges
 300+ E0C2 DA E2                                 DW Fer_De_LanceEdges
 301+ E0C4 CE E3                                 DW GeckoEdges
 302+ E0C6 96 E4                                 DW GhavialEdges
 303+ E0C8 90 E5                                 DW IguanaEdges
 304+ E0CA 92 E6                                 DW KraitEdges
 305+ E0CC 12 E8                                 DW LogoEdges
 306+ E0CE 68 E9                                 DW MambaEdges
 307+ E0D0 6A EA                                 DW MissileEdges
 308+ E0D2 6C EB                                 DW MonitorEdges
 309+ E0D4 60 EC                                 DW MorayEdges
 310+ E0D6 60 ED                                 DW OphidianEdges
 311+ E0D8 32 EE                                 DW PlateEdges
 312+ E0DA A0 EE                                 DW PythonEdges
 313+ E0DC 96 EF                                 DW Python_PEdges
 314+ E0DE C0 E1        ShipNormalTableB:        DW DragonNormals
 315+ E0E0 40 E2                                 DW Escape_PodNormals
 316+ E0E2 46 E3                                 DW Fer_De_LanceNormals
 317+ E0E4 12 E4                                 DW GeckoNormals
 318+ E0E6 EE E4                                 DW GhavialNormals
 319+ E0E8 EC E5                                 DW IguanaNormals
 320+ E0EA E6 E6                                 DW KraitNormals
 321+ E0EC A6 E8                                 DW LogoNormals
 322+ E0EE D8 E9                                 DW MambaNormals
 323+ E0F0 CA EA                                 DW MissileNormals
 324+ E0F2 C8 EB                                 DW MonitorNormals
 325+ E0F4 AC EC                                 DW MorayNormals
 326+ E0F6 D8 ED                                 DW OphidianNormals
 327+ E0F8 42 EE                                 DW PlateNormals
 328+ E0FA 08 EF                                 DW PythonNormals
 329+ E0FC FE EF                                 DW Python_PNormals
 330+ E0FE DA 00        ShipModelSizeTableB:     DW DragonLen
 331+ E100 58 00                                 DW Escape_PodLen
 332+ E102 1E 01                                 DW Fer_De_LanceLen
 333+ E104 C8 00                                 DW GeckoLen
 334+ E106 E8 00                                 DW GhavialLen
 335+ E108 F6 00                                 DW IguanaLen
 336+ E10A EA 00                                 DW KraitLen
 337+ E10C BC 01                                 DW LogoLen
 338+ E10E 32 01                                 DW MambaLen
 339+ E110 02 01                                 DW MissileLen
 340+ E112 06 01                                 DW MonitorLen
 341+ E114 DC 00                                 DW MorayLen
 342+ E116 38 01                                 DW OphidianLen
 343+ E118 3E 00                                 DW PlateLen
 344+ E11A F6 00                                 DW PythonLen
 345+ E11C F6 00                                 DW Python_PLen
 346+ E11E                                       ENDIF
 347+ E11E                                       IFDEF SHIPBANKC
 348+ E11E ~            ShipModelTableC:         DW Rattler
 349+ E11E ~                                     DW Rock_Hermit
 350+ E11E ~                                     DW ShuttleType9
 351+ E11E ~                                     DW Shuttle_Mk_2
 352+ E11E ~                                     DW Sidewinder
 353+ E11E ~                                     DW Splinter
 354+ E11E ~                                     DW TestVector
 355+ E11E ~                                     DW Thargoid
 356+ E11E ~                                     DW Thargon
 357+ E11E ~                                     DW TransportType10
 358+ E11E ~                                     DW Viper
 359+ E11E ~                                     DW Worm
 360+ E11E ~                                     DW 0
 361+ E11E ~                                     DW 0
 362+ E11E ~                                     DW 0
 363+ E11E ~                                     DW 0
 364+ E11E ~            ShipVertexTableC:        DW RattlerVertices
 365+ E11E ~                                     DW Rock_HermitVertices
 366+ E11E ~                                     DW ShuttleType9Vertices
 367+ E11E ~                                     DW Shuttle_Mk_2Vertices
 368+ E11E ~                                     DW SidewinderVertices
 369+ E11E ~                                     DW SplinterVertices
 370+ E11E ~                                     DW TestVectorVertices
 371+ E11E ~                                     DW ThargoidVertices
 372+ E11E ~                                     DW ThargonVertices
 373+ E11E ~                                     DW TransportType10Vertices
 374+ E11E ~                                     DW ViperVertices
 375+ E11E ~                                     DW WormVertices
 376+ E11E ~                                     DW 0
 377+ E11E ~                                     DW 0
 378+ E11E ~                                     DW 0
 379+ E11E ~                                     DW 0
 380+ E11E ~            ShipEdgeTableC:          DW RattlerEdges
 381+ E11E ~                                     DW Rock_HermitEdges
 382+ E11E ~                                     DW ShuttleType9Edges
 383+ E11E ~                                     DW Shuttle_Mk_2Edges
 384+ E11E ~                                     DW SidewinderEdges
 385+ E11E ~                                     DW SplinterEdges
 386+ E11E ~                                     DW TestVectorEdges
 387+ E11E ~                                     DW ThargoidEdges
 388+ E11E ~                                     DW ThargonEdges
 389+ E11E ~                                     DW TransportType10Edges
 390+ E11E ~                                     DW ViperEdges
 391+ E11E ~                                     DW WormEdges
 392+ E11E ~                                     DW 0
 393+ E11E ~                                     DW 0
 394+ E11E ~                                     DW 0
 395+ E11E ~                                     DW 0
 396+ E11E ~            ShipNormalTableC:        DW RattlerNormals
 397+ E11E ~                                     DW Rock_HermitNormals
 398+ E11E ~                                     DW ShuttleType9Normals
 399+ E11E ~                                     DW Shuttle_Mk_2Normals
 400+ E11E ~                                     DW SidewinderNormals
 401+ E11E ~                                     DW SplinterNormals
 402+ E11E ~                                     DW TestVectorNormals
 403+ E11E ~                                     DW ThargoidNormals
 404+ E11E ~                                     DW ThargonNormals
 405+ E11E ~                                     DW TransportType10Normals
 406+ E11E ~                                     DW ViperNormals
 407+ E11E ~                                     DW WormNormals
 408+ E11E ~                                     DW 0
 409+ E11E ~                                     DW 0
 410+ E11E ~                                     DW 0
 411+ E11E ~                                     DW 0
 412+ E11E ~            ShipModelSizeTableC:     DW RattlerLen
 413+ E11E ~                                     DW Rock_HermitLen
 414+ E11E ~                                     DW ShuttleType9Len
 415+ E11E ~                                     DW Shuttle_Mk_2Len
 416+ E11E ~                                     DW SidewinderLen
 417+ E11E ~                                     DW SplinterLen
 418+ E11E ~                                     DW TestVectorLen
 419+ E11E ~                                     DW ThargoidLen
 420+ E11E ~                                     DW ThargonLen
 421+ E11E ~                                     DW TransportType10Len
 422+ E11E ~                                     DW ViperLen
 423+ E11E ~                                     DW WormLen
 424+ E11E ~                                     DW 0
 425+ E11E ~                                     DW 0
 426+ E11E ~                                     DW 0
 427+ E11E ~                                     DW 0
 428+ E11E                                       ENDIF
 429+ E11E
 430+ E11E
 431+ E11E                                      IFNDEF SHIPMODELTABLES
 432+ E11E ~                                    DEFINE SHIPMODELTABLES
 433+ E11E ~            ShipModelSizeTable:     EQU ShipModelSizeTableA
 434+ E11E ~            ShipModelBank:          EQU ShipModelBankA
 435+ E11E ~            ShipModelTable:         EQU ShipModelTableA
 436+ E11E ~            ShipVertexTable:        EQU ShipVertexTableA
 437+ E11E ~            ShipEdgeTable:          EQU ShipEdgeTableA
 438+ E11E ~            ShipNormalTable:        EQU ShipNormalTableA
 439+ E11E                                      ENDIF
 440+ E11E
 441+ E11E                                      IFDEF SHIPBANKA
 442+ E11E ~                                    include "Data/Ships/Adder.asm"
 443+ E11E ~                                    include "Data/Ships/Anaconda.asm"
 444+ E11E ~                                    include "Data/Ships/Asp_Mk_2.asm"
 445+ E11E ~                                    include "Data/Ships/Asteroid.asm"
 446+ E11E ~                                    include "Data/Ships/Boa.asm"
 447+ E11E ~                                    include "Data/Ships/Boulder.asm"
 448+ E11E ~                                    include "Data/Ships/Bushmaster.asm"
 449+ E11E ~                                    include "Data/Ships/CargoType5.asm"
 450+ E11E ~                                    include "Data/Ships/Chameleon.asm"
 451+ E11E ~                                    include "Data/Ships/CobraMk3.asm"
 452+ E11E ~                                    include "Data/Ships/Cobra_Mk_1.asm"
 453+ E11E ~                                    include "Data/Ships/Cobra_Mk_3_P.asm"
 454+ E11E ~                                    include "Data/Ships/Constrictor.asm"
 455+ E11E ~                                    include "Data/Ships/Coriolis.asm"
 456+ E11E ~                                    include "Data/Ships/Cougar.asm"
 457+ E11E ~                                    include "Data/Ships/Dodo.asm"
 458+ E11E                                      ENDIF
 459+ E11E                                      IFDEF SHIPBANKB
 460+ E11E                                      include "Data/Ships/Dragon.asm"
# file opened: ./Data/Ships/Dragon.asm
   1++E11E 00 66 50     Dragon:	                DB $00, $66, $50
   2++E121 6C E1                                DW DragonEdges
   3++E123 54                                   DB DragonEdgesSize
   4++E124 00 3C                                DB $00, $3C
   5++E126 36                                   DB DragonVertSize
   6++E127 15                                   DB DragonEdgesCnt
   7++E128 00 00                                DB $00, $00
   8++E12A 38                                   DB DragonNormalsSize
   9++E12B 20 F7 14                             DB $20, $F7, $14
  10++E12E C0 E1                                DW DragonNormals
  11++E130 00 47                                DB $00, $47
  12++E132 36 E1                                DW DragonVertices
  13++E134 00 00                                DB 0,0                      ; Type and Tactics
  14++E136 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  14++E13A 6B 05
  15++E13C D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  15++E140 67 01
  16++E142 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  16++E146 78 12
  17++E148 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  17++E14C CD 23
  18++E14E 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  18++E152 CD 89
  19++E154 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  19++E158 9A 34
  20++E15A D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  20++E15E AB 45
  21++E160 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  21++E164 FF FF
  22++E166 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E16A FF FF
  23++E16C              DragonVertSize:         equ $ - DragonVertices
  24++E16C 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  25++E170 1F 12 08 1C                          DB $1F, $12, $08, $1C
  26++E174 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  27++E178 1F 34 14 1C                          DB $1F, $34, $14, $1C
  28++E17C 1F 45 18 1C                          DB $1F, $45, $18, $1C
  29++E180 1F 50 00 1C                          DB $1F, $50, $00, $1C
  30++E184 1F 67 04 20                          DB $1F, $67, $04, $20
  31++E188 1F 78 08 20                          DB $1F, $78, $08, $20
  32++E18C 1F 89 10 20                          DB $1F, $89, $10, $20
  33++E190 1F 9A 14 20                          DB $1F, $9A, $14, $20
  34++E194 1F AB 18 20                          DB $1F, $AB, $18, $20
  35++E198 1F B6 00 20                          DB $1F, $B6, $00, $20
  36++E19C 1F 06 00 04                          DB $1F, $06, $00, $04
  37++E1A0 1F 17 04 08                          DB $1F, $17, $04, $08
  38++E1A4 1F 4A 14 18                          DB $1F, $4A, $14, $18
  39++E1A8 1F 5B 00 18                          DB $1F, $5B, $00, $18
  40++E1AC 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  41++E1B0 1F 8C 08 10                          DB $1F, $8C, $08, $10
  42++E1B4 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  43++E1B8 1F 9D 10 14                          DB $1F, $9D, $10, $14
  44++E1BC 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  45++E1C0              DragonEdgesSize:        equ $ - DragonEdges
  46++E1C0              DragonEdgesCnt:         equ DragonEdgesSize/4
  47++E1C0 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  48++E1C4 1F 21 5A 00                          DB $1F, $21, $5A, $00
  49++E1C8 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  50++E1CC BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  51++E1D0 9F 21 5A 00                          DB $9F, $21, $5A, $00
  52++E1D4 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  53++E1D8 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  54++E1DC 5F 21 5A 00                          DB $5F, $21, $5A, $00
  55++E1E0 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  56++E1E4 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  57++E1E8 DF 21 5A 00                          DB $DF, $21, $5A, $00
  58++E1EC DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  59++E1F0 3F 30 00 52                          DB $3F, $30, $00, $52
  60++E1F4 BF 30 00 52                          DB $BF, $30, $00, $52
  61++E1F8              DragonNormalsSize:      equ $ - DragonNormals
  62++E1F8              DragonLen:              equ $ - Dragon
  63++E1F8
# file closed: ./Data/Ships/Dragon.asm
 461+ E1F8                                      include "Data/Ships/Escape_Pod.asm"
# file opened: ./Data/Ships/Escape_Pod.asm
   1++E1F8 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E1FB 28 E2                                DW Escape_PodEdges
   3++E1FD 18                                   DB Escape_PodEdgesSize
   4++E1FE 00 16                                DB $00, $16
   5++E200 18                                   DB Escape_PodVertSize
   6++E201 06                                   DB Escape_PodEdgesCnt
   7++E202 00 00                                DB $00, $00
   8++E204 10                                   DB Escape_PodNormalsSize
   9++E205 08 11 08                             DB $08, $11, $08
  10++E208 40 E2                                DW Escape_PodNormals
  11++E20A 04 00                                DB $04, $00
  12++E20C 10 E2                                DW Escape_PodVertices
  13++E20E 00 00                                DB 0,0                      ; Type and Tactics
  14++E210 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  14++E214 12 33
  15++E216 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  15++E21A 02 33
  16++E21C 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  16++E220 01 33
  17++E222 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  17++E226 01 22
  18++E228              Escape_PodVertSize:     equ $ - Escape_PodVertices
  19++E228 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  20++E22C 1F 03 04 08                          DB $1F, $03, $04, $08
  21++E230 1F 01 08 0C                          DB $1F, $01, $08, $0C
  22++E234 1F 12 0C 00                          DB $1F, $12, $0C, $00
  23++E238 1F 13 00 08                          DB $1F, $13, $00, $08
  24++E23C 1F 02 0C 04                          DB $1F, $02, $0C, $04
  25++E240              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  26++E240              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  27++E240 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  28++E244 1F 27 67 1E                          DB $1F, $27, $67, $1E
  29++E248 5F 27 67 1E                          DB $5F, $27, $67, $1E
  30++E24C 9F 70 00 00                          DB $9F, $70, $00, $00
  31++E250              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  32++E250              Escape_PodLen:          equ $ - Escape_Pod
  33++E250
# file closed: ./Data/Ships/Escape_Pod.asm
 462+ E250                                      include "Data/Ships/Fer_De_Lance.asm"
# file opened: ./Data/Ships/Fer_De_Lance.asm
   1++E250 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E253 DA E2                                DW Fer_De_LanceEdges
   3++E255 6C                                   DB Fer_De_LanceEdgesSize
   4++E256 00 1A                                DB $00, $1A
   5++E258 72                                   DB Fer_De_LanceVertSize
   6++E259 1B                                   DB Fer_De_LanceEdgesCnt
   7++E25A 00 00                                DB $00, $00
   8++E25C 28                                   DB Fer_De_LanceNormalsSize
   9++E25D 28 A0 1E                             DB $28, $A0, $1E
  10++E260 46 E3                                DW Fer_De_LanceNormals
  11++E262 01 12                                DB $01, $12
  12++E264 68 E2                                DW Fer_De_LanceVertices
  13++E266 00 00                                DB 0,0                      ; Type and Tactics
  14++E268 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  14++E26C 01 59
  15++E26E 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  15++E272 12 99
  16++E274 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  16++E278 23 99
  17++E27A 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  17++E27E 34 99
  18++E280 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  18++E284 45 99
  19++E286 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  19++E28A 01 26
  20++E28C 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  20++E290 23 67
  21++E292 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  21++E296 34 78
  22++E298 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  22++E29C 04 58
  23++E29E 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  23++E2A2 06 78
  24++E2A4 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  24++E2A8 00 00
  25++E2AA 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  25++E2AE 00 00
  26++E2B0 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  26++E2B4 00 00
  27++E2B6 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  27++E2BA 00 00
  28++E2BC 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  28++E2C0 00 00
  29++E2C2 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  29++E2C6 00 00
  30++E2C8 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  30++E2CC 99 99
  31++E2CE 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  31++E2D2 99 99
  32++E2D4 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  32++E2D8 99 99
  33++E2DA              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  34++E2DA 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  35++E2DE 1F 29 04 08                          DB $1F, $29, $04, $08
  36++E2E2 1F 39 08 0C                          DB $1F, $39, $08, $0C
  37++E2E6 1F 49 0C 10                          DB $1F, $49, $0C, $10
  38++E2EA 1F 59 00 10                          DB $1F, $59, $00, $10
  39++E2EE 1C 01 00 14                          DB $1C, $01, $00, $14
  40++E2F2 1C 26 14 18                          DB $1C, $26, $14, $18
  41++E2F6 1C 37 18 1C                          DB $1C, $37, $18, $1C
  42++E2FA 1C 48 1C 20                          DB $1C, $48, $1C, $20
  43++E2FE 1C 05 00 20                          DB $1C, $05, $00, $20
  44++E302 0F 06 14 24                          DB $0F, $06, $14, $24
  45++E306 0B 67 18 24                          DB $0B, $67, $18, $24
  46++E30A 0B 78 1C 24                          DB $0B, $78, $1C, $24
  47++E30E 0F 08 20 24                          DB $0F, $08, $20, $24
  48++E312 0E 12 04 14                          DB $0E, $12, $04, $14
  49++E316 0E 23 08 18                          DB $0E, $23, $08, $18
  50++E31A 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  51++E31E 0E 45 10 20                          DB $0E, $45, $10, $20
  52++E322 08 00 28 2C                          DB $08, $00, $28, $2C
  53++E326 09 00 2C 30                          DB $09, $00, $2C, $30
  54++E32A 0B 00 28 30                          DB $0B, $00, $28, $30
  55++E32E 08 00 34 38                          DB $08, $00, $34, $38
  56++E332 09 00 38 3C                          DB $09, $00, $38, $3C
  57++E336 0B 00 34 3C                          DB $0B, $00, $34, $3C
  58++E33A 0C 99 40 44                          DB $0C, $99, $40, $44
  59++E33E 0C 99 40 48                          DB $0C, $99, $40, $48
  60++E342 08 99 44 48                          DB $08, $99, $44, $48
  61++E346              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  62++E346              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  63++E346 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  64++E34A 9F 44 00 18                          DB $9F, $44, $00, $18
  65++E34E BF 3F 00 25                          DB $BF, $3F, $00, $25
  66++E352 3F 00 00 68                          DB $3F, $00, $00, $68
  67++E356 3F 3F 00 25                          DB $3F, $3F, $00, $25
  68++E35A 1F 44 00 18                          DB $1F, $44, $00, $18
  69++E35E BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  70++E362 3C 00 2D 16                          DB $3C, $00, $2D, $16
  71++E366 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  72++E36A 5F 00 1C 00                          DB $5F, $00, $1C, $00
  73++E36E              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  74++E36E              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  75++E36E
# file closed: ./Data/Ships/Fer_De_Lance.asm
 463+ E36E                                      include "Data/Ships/Gecko.asm"
# file opened: ./Data/Ships/Gecko.asm
   1++E36E 00 26 49     Gecko:	                DB $00, $26, $49
   2++E371 CE E3                                DW GeckoEdges
   3++E373 44                                   DB GeckoEdgesSize
   4++E374 00 1A                                DB $00, $1A
   5++E376 48                                   DB GeckoVertSize
   6++E377 11                                   DB GeckoEdgesCnt
   7++E378 00 37                                DB $00, $37
   8++E37A 24                                   DB GeckoNormalsSize
   9++E37B 12 46 1E                             DB $12, $46, $1E
  10++E37E 12 E4                                DW GeckoNormals
  11++E380 03 10                                DB $03, $10
  12++E382 86 E3                                DW GeckoVertices
  13++E384 00 00                                DB 0,0                      ; Type and Tactics
  14++E386 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  14++E38A 03 45
  15++E38C 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  15++E390 01 23
  16++E392 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  16++E396 05 67
  17++E398 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  17++E39C 01 78
  18++E39E 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  18++E3A2 45 66
  19++E3A4 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  19++E3A8 12 88
  20++E3AA 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  20++E3AE 34 67
  21++E3B0 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  21++E3B4 23 78
  22++E3B6 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  22++E3BA 33 33
  23++E3BC 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  23++E3C0 33 33
  24++E3C2 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  24++E3C6 33 33
  25++E3C8 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  25++E3CC 33 33
  26++E3CE              GeckoVertSize:          equ $ - GeckoVertices
  27++E3CE 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  28++E3D2 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E3D6 1F 18 14 0C                          DB $1F, $18, $14, $0C
  30++E3DA 1F 07 0C 08                          DB $1F, $07, $0C, $08
  31++E3DE 1F 56 08 10                          DB $1F, $56, $08, $10
  32++E3E2 1F 45 10 00                          DB $1F, $45, $10, $00
  33++E3E6 1F 28 14 1C                          DB $1F, $28, $14, $1C
  34++E3EA 1F 37 1C 18                          DB $1F, $37, $1C, $18
  35++E3EE 1F 46 18 10                          DB $1F, $46, $18, $10
  36++E3F2 1D 05 00 08                          DB $1D, $05, $00, $08
  37++E3F6 1E 01 04 0C                          DB $1E, $01, $04, $0C
  38++E3FA 1D 34 00 18                          DB $1D, $34, $00, $18
  39++E3FE 1E 23 04 1C                          DB $1E, $23, $04, $1C
  40++E402 14 67 08 18                          DB $14, $67, $08, $18
  41++E406 14 78 0C 1C                          DB $14, $78, $0C, $1C
  42++E40A 10 33 20 28                          DB $10, $33, $20, $28
  43++E40E 11 33 24 2C                          DB $11, $33, $24, $2C
  44++E412              GeckoEdgesSize:             equ $ - GeckoEdges
  45++E412              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  46++E412 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  47++E416 1F 04 2D 08                          DB $1F, $04, $2D, $08
  48++E41A 5F 19 6C 13                          DB $5F, $19, $6C, $13
  49++E41E 5F 00 54 0C                          DB $5F, $00, $54, $0C
  50++E422 DF 19 6C 13                          DB $DF, $19, $6C, $13
  51++E426 9F 04 2D 08                          DB $9F, $04, $2D, $08
  52++E42A BF 58 10 D6                          DB $BF, $58, $10, $D6
  53++E42E 3F 00 00 BB                          DB $3F, $00, $00, $BB
  54++E432 3F 58 10 D6                          DB $3F, $58, $10, $D6
  55++E436              GeckoNormalsSize:       equ $ - GeckoNormals
  56++E436              GeckoLen:               equ $ - Gecko
  57++E436
# file closed: ./Data/Ships/Gecko.asm
 464+ E436                                      include "Data/Ships/Ghavial.asm"
# file opened: ./Data/Ships/Ghavial.asm
   1++E436 03 26 00     Ghavial:	DB $03, $26, $00
   2++E439 96 E4        	DW GhavialEdges
   3++E43B 58           	DB GhavialEdgesSize
   4++E43C 00 22        	DB $00, $22
   5++E43E 48           	DB GhavialVertSize
   6++E43F 16           	DB GhavialEdgesCnt
   7++E440 00 64        	DB $00, $64
   8++E442 30           	DB GhavialNormalsSize
   9++E443 0A 72 10     	DB $0A, $72, $10
  10++E446 EE E4        	DW GhavialNormals
  11++E448 00 27        	DB $00, $27
  12++E44A 4E E4        	DW GhavialVertices
  13++E44C 00 00                                DB 0,0                      ; Type and Tactics
  14++E44E
  15++E44E 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  15++E452 67 01
  16++E454 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  16++E458 6B 05
  17++E45A 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  17++E45E 23 01
  18++E460 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  18++E464 45 03
  19++E466 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  19++E46A 78 12
  20++E46C 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  20++E470 89 23
  21++E472 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  21++E476 AB 45
  22++E478 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  22++E47C 9A 34
  23++E47E 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  23++E482 FF FF
  24++E484 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  24++E488 00 00
  25++E48A 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  25++E48E 00 00
  26++E490 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  26++E494 00 00
  27++E496
  28++E496              GhavialVertSize: equ $ - GhavialVertices
  29++E496
  30++E496
  31++E496 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  32++E49A 1F 12 10 08  	DB $1F, $12, $10, $08
  33++E49E 1F 23 14 08  	DB $1F, $23, $14, $08
  34++E4A2 1F 30 0C 08  	DB $1F, $30, $0C, $08
  35++E4A6 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  36++E4AA 1F 45 18 0C  	DB $1F, $45, $18, $0C
  37++E4AE 1F 50 0C 04  	DB $1F, $50, $0C, $04
  38++E4B2 1F 67 00 20  	DB $1F, $67, $00, $20
  39++E4B6 1F 78 10 20  	DB $1F, $78, $10, $20
  40++E4BA 1F 89 14 20  	DB $1F, $89, $14, $20
  41++E4BE 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  42++E4C2 1F AB 18 20  	DB $1F, $AB, $18, $20
  43++E4C6 1F B6 04 20  	DB $1F, $B6, $04, $20
  44++E4CA 1F 06 04 00  	DB $1F, $06, $04, $00
  45++E4CE 1F 17 00 10  	DB $1F, $17, $00, $10
  46++E4D2 1F 28 10 14  	DB $1F, $28, $10, $14
  47++E4D6 1F 39 14 1C  	DB $1F, $39, $14, $1C
  48++E4DA 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  49++E4DE 1F 5B 18 04  	DB $1F, $5B, $18, $04
  50++E4E2 09 00 24 28  	DB $09, $00, $24, $28
  51++E4E6 09 00 28 2C  	DB $09, $00, $28, $2C
  52++E4EA 09 00 2C 24  	DB $09, $00, $2C, $24
  53++E4EE
  54++E4EE              GhavialEdgesSize: equ $ - GhavialEdges
  55++E4EE
  56++E4EE
  57++E4EE              GhavialEdgesCnt: equ GhavialEdgesSize/4
  58++E4EE
  59++E4EE
  60++E4EE 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  61++E4F2 1F 33 24 0C  	DB $1F, $33, $24, $0C
  62++E4F6 3F 33 1C 19  	DB $3F, $33, $1C, $19
  63++E4FA 3F 00 30 2A  	DB $3F, $00, $30, $2A
  64++E4FE BF 33 1C 19  	DB $BF, $33, $1C, $19
  65++E502 9F 33 24 0C  	DB $9F, $33, $24, $0C
  66++E506 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  67++E50A 5F 1C 38 07  	DB $5F, $1C, $38, $07
  68++E50E 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  69++E512 7F 00 33 26  	DB $7F, $00, $33, $26
  70++E516 FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  71++E51A DF 1C 38 07  	DB $DF, $1C, $38, $07
  72++E51E
  73++E51E              GhavialNormalsSize: equ $ - GhavialNormals
  74++E51E              GhavialLen: equ $ - Ghavial
  75++E51E
# file closed: ./Data/Ships/Ghavial.asm
 465+ E51E                                      include "Data/Ships/Iguana.asm"
# file opened: ./Data/Ships/Iguana.asm
   1++E51E 01 0D AC     Iguana:	DB $01, $0D, $AC
   2++E521 90 E5        	DW IguanaEdges
   3++E523 5C           	DB IguanaEdgesSize
   4++E524 00 1A        	DB $00, $1A
   5++E526 5A           	DB IguanaVertSize
   6++E527 17           	DB IguanaEdgesCnt
   7++E528 00 96        	DB $00, $96
   8++E52A 28           	DB IguanaNormalsSize
   9++E52B 0A 5A 21     	DB $0A, $5A, $21
  10++E52E EC E5        	DW IguanaNormals
  11++E530 01 23        	DB $01, $23
  12++E532 36 E5        	DW IguanaVertices
  13++E534 00 00                                DB 0,0                      ; Type and Tactics
  14++E536
  15++E536
  16++E536 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  16++E53A 23 01
  17++E53C 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  17++E540 46 02
  18++E542 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  18++E546 45 01
  19++E548 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  19++E54C 57 13
  20++E54E 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  20++E552 67 23
  21++E554 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  21++E558 89 46
  22++E55A 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  22++E55E 88 45
  23++E560 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  23++E564 89 57
  24++E566 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  24++E56A 99 67
  25++E56C 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  25++E570 11 00
  26++E572 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  26++E576 33 22
  27++E578 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  27++E57C 99 88
  28++E57E 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  28++E582 88 88
  29++E584 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  29++E588 99 88
  30++E58A 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  30++E58E 99 99
  31++E590
  32++E590              IguanaVertSize: equ $ - IguanaVertices
  33++E590
  34++E590
  35++E590
  36++E590 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  37++E594 1F 01 00 08  	DB $1F, $01, $00, $08
  38++E598 1F 13 00 0C  	DB $1F, $13, $00, $0C
  39++E59C 1F 23 00 10  	DB $1F, $23, $00, $10
  40++E5A0 1F 46 04 14  	DB $1F, $46, $04, $14
  41++E5A4 1F 45 08 18  	DB $1F, $45, $08, $18
  42++E5A8 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  43++E5AC 1F 67 10 20  	DB $1F, $67, $10, $20
  44++E5B0 1F 48 14 18  	DB $1F, $48, $14, $18
  45++E5B4 1F 58 18 1C  	DB $1F, $58, $18, $1C
  46++E5B8 1F 69 14 20  	DB $1F, $69, $14, $20
  47++E5BC 1F 79 1C 20  	DB $1F, $79, $1C, $20
  48++E5C0 1F 04 04 08  	DB $1F, $04, $04, $08
  49++E5C4 1F 15 08 0C  	DB $1F, $15, $08, $0C
  50++E5C8 1F 26 04 10  	DB $1F, $26, $04, $10
  51++E5CC 1F 37 0C 10  	DB $1F, $37, $0C, $10
  52++E5D0 1F 89 14 1C  	DB $1F, $89, $14, $1C
  53++E5D4 1E 01 08 24  	DB $1E, $01, $08, $24
  54++E5D8 1E 23 10 28  	DB $1E, $23, $10, $28
  55++E5DC 0A 88 2C 30  	DB $0A, $88, $2C, $30
  56++E5E0 0A 88 34 30  	DB $0A, $88, $34, $30
  57++E5E4 0A 99 2C 38  	DB $0A, $99, $2C, $38
  58++E5E8 0A 99 34 38  	DB $0A, $99, $34, $38
  59++E5EC
  60++E5EC              IguanaEdgesSize: equ $ - IguanaEdges
  61++E5EC
  62++E5EC
  63++E5EC              IguanaEdgesCnt: equ IguanaEdgesSize/4
  64++E5EC
  65++E5EC
  66++E5EC 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  67++E5F0 DF 33 4D 19  	DB $DF, $33, $4D, $19
  68++E5F4 1F 33 4D 19  	DB $1F, $33, $4D, $19
  69++E5F8 5F 33 4D 19  	DB $5F, $33, $4D, $19
  70++E5FC 9F 2A 55 00  	DB $9F, $2A, $55, $00
  71++E600 DF 2A 55 00  	DB $DF, $2A, $55, $00
  72++E604 1F 2A 55 00  	DB $1F, $2A, $55, $00
  73++E608 5F 2A 55 00  	DB $5F, $2A, $55, $00
  74++E60C BF 17 00 5D  	DB $BF, $17, $00, $5D
  75++E610 3F 17 00 5D  	DB $3F, $17, $00, $5D
  76++E614
  77++E614
  78++E614              IguanaNormalsSize: equ $ - IguanaNormals
  79++E614              IguanaLen: equ $ - Iguana
  80++E614
# file closed: ./Data/Ships/Iguana.asm
 466+ E614                                      include "Data/Ships/Krait.asm"
# file opened: ./Data/Ships/Krait.asm
   1++E614
   2++E614 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E617 92 E6                                DW KraitEdges
   4++E619 54                                   DB KraitEdgesSize
   5++E61A 00 12                                DB $00, $12
   6++E61C 66                                   DB KraitVertSize
   7++E61D 15                                   DB KraitEdgesCnt
   8++E61E 64 00                                DB $64,$00
   9++E620 18                                   DB KraitNormalsSize
  10++E621 14 50 1E                             DB $14, $50, $1E
  11++E624 E6 E6                                DW KraitNormals
  12++E626 02 10                                DB $02, $10
  13++E628 2C E6                                DW KraitVertices
  14++E62A 00 00                                DB 0,0                      ; Type and Tactics
  15++E62C 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  15++E630 01 23
  16++E632 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  16++E636 03 45
  17++E638 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  17++E63C 12 45
  18++E63E 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  18++E642 01 44
  19++E644 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  19++E648 23 55
  20++E64A 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  20++E64E 01 11
  21++E650 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  21++E654 23 33
  22++E656 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  22++E65A 00 33
  23++E65C 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  23++E660 00 33
  24++E662 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  24++E666 33 33
  25++E668 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  25++E66C 00 00
  26++E66E 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  26++E672 44 44
  27++E674 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  27++E678 44 44
  28++E67A 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  28++E67E 44 44
  29++E680 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  29++E684 55 55
  30++E686 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  30++E68A 55 55
  31++E68C 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  31++E690 55 55
  32++E692              KraitVertSize           equ $  - KraitVertices
  33++E692 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  33++E696 1F 12 00 08
  34++E69A 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  34++E69E 1F 23 00 10
  35++E6A2 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  35++E6A6 1F 25 10 08
  36++E6AA 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  36++E6AE 1F 04 0C 04
  37++E6B2 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  37++E6B6 1C 23 10 18
  38++E6BA 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  38++E6BE 09 00 1C 28
  39++E6C2 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  39++E6C6 09 33 1C 24
  40++E6CA 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  40++E6CE 08 44 2C 34
  41++E6D2 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  41++E6D6 07 44 30 2C
  42++E6DA 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  42++E6DE 08 55 3C 40
  43++E6E2 08 55 40 38                          DB $08, $55, $40, $38
  44++E6E6              KraitEdgesSize          equ $  - KraitEdges
  45++E6E6              KraitEdgesCnt           equ KraitEdgesSize/4
  46++E6E6 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  47++E6EA 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  47++E6EE DF 07 30 06
  48++E6F2 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  48++E6F6 3F 4D 00 9A
  49++E6FA BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  50++E6FE              KraitNormalsSize        equ $  - KraitNormals
  51++E6FE              KraitLen                equ $  - Krait
  52++E6FE
# file closed: ./Data/Ships/Krait.asm
 467+ E6FE                                      include "Data/Ships/Logo.asm"
# file opened: ./Data/Ships/Logo.asm
   1++E6FE 00 26 49     Logo:	DB $00, $26, $49
   2++E701 12 E8        	DW LogoEdges
   3++E703 94           	DB LogoEdgesSize
   4++E704 00 36        	DB $00, $36
   5++E706 FC           	DB LogoVertSize
   6++E707 25           	DB LogoEdgesCnt
   7++E708 00 00        	DB $00, $00
   8++E70A 14           	DB LogoNormalsSize
   9++E70B 63 FC 24     	DB $63, $FC, $24
  10++E70E A6 E8        	DW LogoNormals
  11++E710 01 00        	DB $01, $00
  12++E712 16 E7        	DW LogoVertices
  13++E714 00 00                                DB 0,0                      ; Type and Tactics
  14++E716
  15++E716 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  15++E71A 00 00
  16++E71C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  16++E720 00 00
  17++E722 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  17++E726 00 00
  18++E728 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  18++E72C 00 00
  19++E72E 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  19++E732 00 00
  20++E734 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  20++E738 00 00
  21++E73A 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  21++E73E 00 00
  22++E740 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  22++E744 00 00
  23++E746 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  23++E74A 00 00
  24++E74C 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  24++E750 00 00
  25++E752 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  25++E756 00 00
  26++E758 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  26++E75C 00 00
  27++E75E 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  27++E762 02 33
  28++E764 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  28++E768 02 44
  29++E76A 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  29++E76E 01 33
  30++E770 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  30++E774 02 33
  31++E776 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  31++E77A 02 44
  32++E77C 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  32++E780 01 44
  33++E782 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  33++E786 00 00
  34++E788 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E78C 00 00
  35++E78E 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E792 00 00
  36++E794 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  36++E798 00 00
  37++E79A 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  37++E79E 00 00
  38++E7A0 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  38++E7A4 00 00
  39++E7A6 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  39++E7AA 00 00
  40++E7AC 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  40++E7B0 00 00
  41++E7B2 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  41++E7B6 00 00
  42++E7B8 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  42++E7BC 00 00
  43++E7BE 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  43++E7C2 00 00
  44++E7C4 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  44++E7C8 00 00
  45++E7CA 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  45++E7CE 00 00
  46++E7D0 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  46++E7D4 00 00
  47++E7D6 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  47++E7DA 00 00
  48++E7DC 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  48++E7E0 00 00
  49++E7E2 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  49++E7E6 00 00
  50++E7E8 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  50++E7EC 00 00
  51++E7EE 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  51++E7F2 00 00
  52++E7F4 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  52++E7F8 00 00
  53++E7FA 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  53++E7FE 00 00
  54++E800 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  54++E804 00 00
  55++E806 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  55++E80A 00 00
  56++E80C 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  56++E810 00 00
  57++E812
  58++E812              LogoVertSize: equ $ - LogoVertices
  59++E812
  60++E812
  61++E812
  62++E812 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  63++E816 1F 00 04 08  	DB $1F, $00, $04, $08
  64++E81A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  65++E81E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  66++E822 1F 00 10 14  	DB $1F, $00, $10, $14
  67++E826 1F 00 14 18  	DB $1F, $00, $14, $18
  68++E82A 1F 00 18 1C  	DB $1F, $00, $18, $1C
  69++E82E 1F 00 1C 20  	DB $1F, $00, $1C, $20
  70++E832 1F 00 20 24  	DB $1F, $00, $20, $24
  71++E836 1F 00 24 28  	DB $1F, $00, $24, $28
  72++E83A 1F 00 28 2C  	DB $1F, $00, $28, $2C
  73++E83E 1F 00 2C 00  	DB $1F, $00, $2C, $00
  74++E842 1E 03 38 3C  	DB $1E, $03, $38, $3C
  75++E846 1E 01 3C 40  	DB $1E, $01, $3C, $40
  76++E84A 1E 04 40 44  	DB $1E, $04, $40, $44
  77++E84E 1E 01 44 38  	DB $1E, $01, $44, $38
  78++E852 1E 03 10 30  	DB $1E, $03, $10, $30
  79++E856 1E 22 30 34  	DB $1E, $22, $30, $34
  80++E85A 1E 04 34 20  	DB $1E, $04, $34, $20
  81++E85E 1E 11 20 10  	DB $1E, $11, $20, $10
  82++E862 1E 13 10 38  	DB $1E, $13, $10, $38
  83++E866 1E 13 30 3C  	DB $1E, $13, $30, $3C
  84++E86A 1E 24 34 40  	DB $1E, $24, $34, $40
  85++E86E 1E 14 20 44  	DB $1E, $14, $20, $44
  86++E872 1E 00 54 58  	DB $1E, $00, $54, $58
  87++E876 1E 00 58 60  	DB $1E, $00, $58, $60
  88++E87A 1E 00 60 64  	DB $1E, $00, $60, $64
  89++E87E 1E 00 5C 68  	DB $1E, $00, $5C, $68
  90++E882 1E 00 6C 70  	DB $1E, $00, $6C, $70
  91++E886 1E 00 70 74  	DB $1E, $00, $70, $74
  92++E88A 1E 00 78 7C  	DB $1E, $00, $78, $7C
  93++E88E 1E 00 80 84  	DB $1E, $00, $80, $84
  94++E892 1E 00 88 8C  	DB $1E, $00, $88, $8C
  95++E896 1E 00 90 94  	DB $1E, $00, $90, $94
  96++E89A 1E 00 94 9C  	DB $1E, $00, $94, $9C
  97++E89E 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  98++E8A2 1E 00 A4 98  	DB $1E, $00, $A4, $98
  99++E8A6
 100++E8A6              LogoEdgesSize: equ $ - LogoEdges
 101++E8A6
 102++E8A6
 103++E8A6              LogoEdgesCnt: equ LogoEdgesSize/4
 104++E8A6
 105++E8A6
 106++E8A6 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 107++E8AA 1F 00 04 0F  	DB $1F, $00, $04, $0F
 108++E8AE 3F 00 0D 34  	DB $3F, $00, $0D, $34
 109++E8B2 9F 51 51 00  	DB $9F, $51, $51, $00
 110++E8B6 1F 51 51 00  	DB $1F, $51, $51, $00
 111++E8BA
 112++E8BA
 113++E8BA              LogoNormalsSize: equ $ - LogoNormals
 114++E8BA              LogoLen: equ $ - Logo
 115++E8BA
# file closed: ./Data/Ships/Logo.asm
 468+ E8BA                                      include "Data/Ships/Mamba.asm"
# file opened: ./Data/Ships/Mamba.asm
   1++E8BA 01 13 24     Mamba:	DB $01, $13, $24
   2++E8BD 68 E9        	DW MambaEdges
   3++E8BF 70           	DB MambaEdgesSize
   4++E8C0 00 22        	DB $00, $22
   5++E8C2 96           	DB MambaVertSize
   6++E8C3 1C           	DB MambaEdgesCnt
   7++E8C4 00 96        	DB $00, $96
   8++E8C6 14           	DB MambaNormalsSize
   9++E8C7 19 5A 1E     	DB $19, $5A, $1E
  10++E8CA D8 E9        	DW MambaNormals
  11++E8CC 02 12        	DB $02, $12
  12++E8CE D2 E8        	DW MambaVertices
  13++E8D0 00 00                                DB 0,0                      ; Type and Tactics
  14++E8D2
  15++E8D2 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  15++E8D6 10 32
  16++E8D8 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  16++E8DC 20 44
  17++E8DE 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  17++E8E2 21 44
  18++E8E4 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  18++E8E8 31 44
  19++E8EA 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  19++E8EE 30 44
  20++E8F0 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  20++E8F4 11 11
  21++E8F6 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  21++E8FA 11 11
  22++E8FC 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  22++E900 11 11
  23++E902 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  23++E906 11 11
  24++E908 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  24++E90C 00 00
  25++E90E 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  25++E912 00 00
  26++E914 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  26++E918 00 00
  27++E91A 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  27++E91E 00 00
  28++E920 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  28++E924 00 00
  29++E926 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  29++E92A 00 00
  30++E92C 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  30++E930 44 44
  31++E932 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  31++E936 44 44
  32++E938 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  32++E93C 44 44
  33++E93E 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  33++E942 44 44
  34++E944 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  34++E948 44 44
  35++E94A 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  35++E94E 44 44
  36++E950 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  36++E954 44 44
  37++E956 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  37++E95A 44 44
  38++E95C 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  38++E960 44 44
  39++E962 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  39++E966 44 44
  40++E968
  41++E968              MambaVertSize: equ $ - MambaVertices
  42++E968
  43++E968
  44++E968
  45++E968 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  46++E96C 1F 30 00 10  	DB $1F, $30, $00, $10
  47++E970 1F 40 04 10  	DB $1F, $40, $04, $10
  48++E974 1E 42 04 08  	DB $1E, $42, $04, $08
  49++E978 1E 41 08 0C  	DB $1E, $41, $08, $0C
  50++E97C 1E 43 0C 10  	DB $1E, $43, $0C, $10
  51++E980 0E 11 14 18  	DB $0E, $11, $14, $18
  52++E984 0C 11 18 1C  	DB $0C, $11, $18, $1C
  53++E988 0D 11 1C 20  	DB $0D, $11, $1C, $20
  54++E98C 0C 11 14 20  	DB $0C, $11, $14, $20
  55++E990 14 00 24 2C  	DB $14, $00, $24, $2C
  56++E994 10 00 24 30  	DB $10, $00, $24, $30
  57++E998 10 00 28 34  	DB $10, $00, $28, $34
  58++E99C 14 00 28 38  	DB $14, $00, $28, $38
  59++E9A0 0E 00 34 38  	DB $0E, $00, $34, $38
  60++E9A4 0E 00 2C 30  	DB $0E, $00, $2C, $30
  61++E9A8 0D 44 3C 40  	DB $0D, $44, $3C, $40
  62++E9AC 0E 44 44 48  	DB $0E, $44, $44, $48
  63++E9B0 0C 44 3C 48  	DB $0C, $44, $3C, $48
  64++E9B4 0C 44 40 44  	DB $0C, $44, $40, $44
  65++E9B8 07 44 50 54  	DB $07, $44, $50, $54
  66++E9BC 05 44 50 60  	DB $05, $44, $50, $60
  67++E9C0 05 44 54 60  	DB $05, $44, $54, $60
  68++E9C4 07 44 4C 58  	DB $07, $44, $4C, $58
  69++E9C8 05 44 4C 5C  	DB $05, $44, $4C, $5C
  70++E9CC 05 44 58 5C  	DB $05, $44, $58, $5C
  71++E9D0 1E 21 00 08  	DB $1E, $21, $00, $08
  72++E9D4 1E 31 00 0C  	DB $1E, $31, $00, $0C
  73++E9D8
  74++E9D8              MambaEdgesSize: equ $ - MambaEdges
  75++E9D8
  76++E9D8
  77++E9D8              MambaEdgesCnt: equ MambaEdgesSize/4
  78++E9D8
  79++E9D8
  80++E9D8 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  81++E9DC 1E 00 18 02  	DB $1E, $00, $18, $02
  82++E9E0 9E 20 40 10  	DB $9E, $20, $40, $10
  83++E9E4 1E 20 40 10  	DB $1E, $20, $40, $10
  84++E9E8 3E 00 00 7F  	DB $3E, $00, $00, $7F
  85++E9EC
  86++E9EC              MambaNormalsSize: equ $ - MambaNormals
  87++E9EC              MambaLen: equ $ - Mamba
  88++E9EC
# file closed: ./Data/Ships/Mamba.asm
 469+ E9EC                                      include "Data/Ships/Missile.asm"
# file opened: ./Data/Ships/Missile.asm
   1++E9EC 00 06 40     Missile:	DB $00, $06, $40
   2++E9EF 6A EA        	DW MissileEdges
   3++E9F1 60           	DB MissileEdgesSize
   4++E9F2 00 0A        	DB $00, $0A
   5++E9F4 66           	DB MissileVertSize
   6++E9F5 18           	DB MissileEdgesCnt
   7++E9F6 00 00        	DB $00, $00
   8++E9F8 24           	DB MissileNormalsSize
   9++E9F9 0E 02 2C     	DB $0E, $02, $2C
  10++E9FC CA EA        	DW MissileNormals
  11++E9FE 02 00        	DB $02, $00
  12++EA00 04 EA        	DW MissileVertices
  13++EA02 01 00            DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA04
  15++EA04 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  15++EA08 10 32
  16++EA0A 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  16++EA0E 21 54
  17++EA10 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  17++EA14 32 74
  18++EA16 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  18++EA1A 30 76
  19++EA1C 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  19++EA20 10 65
  20++EA22 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  20++EA26 74 88
  21++EA28 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  21++EA2C 54 88
  22++EA2E 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  22++EA32 65 88
  23++EA34 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  23++EA38 76 88
  24++EA3A 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  24++EA3E 74 88
  25++EA40 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  25++EA44 54 88
  26++EA46 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  26++EA4A 65 88
  27++EA4C 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  27++EA50 76 88
  28++EA52 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  28++EA56 76 77
  29++EA58 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  29++EA5C 65 66
  30++EA5E 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  30++EA62 74 77
  31++EA64 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  31++EA68 54 55
  32++EA6A
  33++EA6A              MissileVertSize: equ $ - MissileVertices
  34++EA6A
  35++EA6A
  36++EA6A
  37++EA6A 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  38++EA6E 1F 32 00 08  	DB $1F, $32, $00, $08
  39++EA72 1F 30 00 0C  	DB $1F, $30, $00, $0C
  40++EA76 1F 10 00 10  	DB $1F, $10, $00, $10
  41++EA7A 1F 24 04 08  	DB $1F, $24, $04, $08
  42++EA7E 1F 51 04 10  	DB $1F, $51, $04, $10
  43++EA82 1F 60 0C 10  	DB $1F, $60, $0C, $10
  44++EA86 1F 73 08 0C  	DB $1F, $73, $08, $0C
  45++EA8A 1F 74 08 14  	DB $1F, $74, $08, $14
  46++EA8E 1F 54 04 18  	DB $1F, $54, $04, $18
  47++EA92 1F 65 10 1C  	DB $1F, $65, $10, $1C
  48++EA96 1F 76 0C 20  	DB $1F, $76, $0C, $20
  49++EA9A 1F 86 1C 20  	DB $1F, $86, $1C, $20
  50++EA9E 1F 87 14 20  	DB $1F, $87, $14, $20
  51++EAA2 1F 84 14 18  	DB $1F, $84, $14, $18
  52++EAA6 1F 85 18 1C  	DB $1F, $85, $18, $1C
  53++EAAA 08 85 18 28  	DB $08, $85, $18, $28
  54++EAAE 08 87 14 24  	DB $08, $87, $14, $24
  55++EAB2 08 87 20 30  	DB $08, $87, $20, $30
  56++EAB6 08 85 1C 2C  	DB $08, $85, $1C, $2C
  57++EABA 08 74 24 3C  	DB $08, $74, $24, $3C
  58++EABE 08 54 28 40  	DB $08, $54, $28, $40
  59++EAC2 08 76 30 34  	DB $08, $76, $30, $34
  60++EAC6 08 65 2C 38  	DB $08, $65, $2C, $38
  61++EACA
  62++EACA              MissileEdgesSize: equ $ - MissileEdges
  63++EACA
  64++EACA
  65++EACA              MissileEdgesCnt: equ MissileEdgesSize/4
  66++EACA
  67++EACA
  68++EACA 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  69++EACE 5F 00 40 10  	DB $5F, $00, $40, $10
  70++EAD2 1F 40 00 10  	DB $1F, $40, $00, $10
  71++EAD6 1F 00 40 10  	DB $1F, $00, $40, $10
  72++EADA 1F 20 00 00  	DB $1F, $20, $00, $00
  73++EADE 5F 00 20 00  	DB $5F, $00, $20, $00
  74++EAE2 9F 20 00 00  	DB $9F, $20, $00, $00
  75++EAE6 1F 00 20 00  	DB $1F, $00, $20, $00
  76++EAEA 3F 00 00 B0  	DB $3F, $00, $00, $B0
  77++EAEE
  78++EAEE
  79++EAEE              MissileNormalsSize: equ $ - MissileNormals
  80++EAEE              MissileLen: equ $ - Missile
  81++EAEE
# file closed: ./Data/Ships/Missile.asm
 470+ EAEE                                      include "Data/Ships/Monitor.asm"
# file opened: ./Data/Ships/Monitor.asm
   1++EAEE 04 36 00     Monitor:	            DB $04, $36, $00
   2++EAF1 6C EB                                DW MonitorEdges
   3++EAF3 5C                                   DB MonitorEdgesSize
   4++EAF4 00 2A                                DB $00, $2A
   5++EAF6 66                                   DB MonitorVertSize
   6++EAF7 17                                   DB MonitorEdgesCnt
   7++EAF8 01 90                                DB $01, $90
   8++EAFA 2C                                   DB MonitorNormalsSize
   9++EAFB 28 84 10                             DB $28, $84, $10
  10++EAFE C8 EB                                DW MonitorNormals
  11++EB00 00 37                                DB $00, $37
  12++EB02 06 EB                                DW MonitorVertices
  13++EB04 00 00                                DB 0,0                      ; Type and Tactics
  14++EB06
  15++EB06 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  15++EB0A FF FF
  16++EB0C 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  16++EB10 23 01
  17++EB12 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  17++EB16 50 34
  18++EB18 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  18++EB1C 78 12
  19++EB1E 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  19++EB22 96 45
  20++EB24 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  20++EB28 AA 28
  21++EB2A 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  21++EB2E AA 49
  22++EB30 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  22++EB34 AA 23
  23++EB36 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  23++EB3A AA 34
  24++EB3C 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  24++EB40 AA 89
  25++EB42 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  25++EB46 89 67
  26++EB48 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  26++EB4C 00 00
  27++EB4E 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  27++EB52 00 00
  28++EB54 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  28++EB58 77 77
  29++EB5A 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  29++EB5E 77 77
  30++EB60 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  30++EB64 66 66
  31++EB66 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  31++EB6A 66 66
  32++EB6C              MonitorVertSize:        equ $ - MonitorVertices
  33++EB6C 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  34++EB70 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  35++EB74 1F 23 04 1C                          DB $1F, $23, $04, $1C
  36++EB78 1F 34 08 20                          DB $1F, $34, $08, $20
  37++EB7C 1F 45 08 10                          DB $1F, $45, $08, $10
  38++EB80 1F 50 00 08                          DB $1F, $50, $00, $08
  39++EB84 1F 03 04 08                          DB $1F, $03, $04, $08
  40++EB88 1F 67 00 28                          DB $1F, $67, $00, $28
  41++EB8C 1F 78 0C 28                          DB $1F, $78, $0C, $28
  42++EB90 1F 89 24 28                          DB $1F, $89, $24, $28
  43++EB94 1F 96 10 28                          DB $1F, $96, $10, $28
  44++EB98 1F 17 00 0C                          DB $1F, $17, $00, $0C
  45++EB9C 1F 28 0C 14                          DB $1F, $28, $0C, $14
  46++EBA0 1F 49 18 10                          DB $1F, $49, $18, $10
  47++EBA4 1F 56 10 00                          DB $1F, $56, $10, $00
  48++EBA8 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  49++EBAC 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  50++EBB0 1F 4A 20 18                          DB $1F, $4A, $20, $18
  51++EBB4 1F 8A 14 24                          DB $1F, $8A, $14, $24
  52++EBB8 1F 9A 18 24                          DB $1F, $9A, $18, $24
  53++EBBC 0A 00 2C 30                          DB $0A, $00, $2C, $30
  54++EBC0 0A 77 34 38                          DB $0A, $77, $34, $38
  55++EBC4 0A 66 3C 40                          DB $0A, $66, $3C, $40
  56++EBC8              MonitorEdgesSize:       equ $ - MonitorEdges
  57++EBC8              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  58++EBC8 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  59++EBCC 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  60++EBD0 3F 36 1C 10                          DB $3F, $36, $1C, $10
  61++EBD4 3F 00 39 1C                          DB $3F, $00, $39, $1C
  62++EBD8 BF 36 1C 10                          DB $BF, $36, $1C, $10
  63++EBDC 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  64++EBE0 DF 26 2F 12                          DB $DF, $26, $2F, $12
  65++EBE4 5F 26 2F 12                          DB $5F, $26, $2F, $12
  66++EBE8 7F 27 30 0D                          DB $7F, $27, $30, $0D
  67++EBEC FF 27 30 0D                          DB $FF, $27, $30, $0D
  68++EBF0 3F 00 00 40                          DB $3F, $00, $00, $40
  69++EBF4              MonitorNormalsSize:     equ $ - MonitorNormals
  70++EBF4              MonitorLen:             equ $ - Monitor
  71++EBF4
# file closed: ./Data/Ships/Monitor.asm
 471+ EBF4                                      include "Data/Ships/Moray.asm"
# file opened: ./Data/Ships/Moray.asm
   1++EBF4 01 03 84     Moray:	                DB $01, $03, $84
   2++EBF7 60 EC                                DW MorayEdges
   3++EBF9 4C                                   DB MorayEdgesSize
   4++EBFA 00 1A                                DB $00, $1A
   5++EBFC 54                                   DB MorayVertSize
   6++EBFD 13                                   DB MorayEdgesCnt
   7++EBFE 00 32                                DB $00, $32
   8++EC00 24                                   DB MorayNormalsSize
   9++EC01 28 59 19                             DB $28, $59, $19
  10++EC04 AC EC                                DW MorayNormals
  11++EC06 02 2A                                DB $02, $2A
  12++EC08 0C EC                                DW MorayVertices
  13++EC0A 00 00                                DB 0,0                      ; Type and Tactics
  14++EC0C
  15++EC0C 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  15++EC10 02 78
  16++EC12 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  16++EC16 01 67
  17++EC18 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  17++EC1C FF FF
  18++EC1E 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  18++EC22 13 66
  19++EC24 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  19++EC28 25 88
  20++EC2A 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  20++EC2E 45 78
  21++EC30 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  21++EC34 34 67
  22++EC36 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  22++EC3A 44 44
  23++EC3C 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  23++EC40 44 44
  24++EC42 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  24++EC46 44 44
  25++EC48 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  25++EC4C 00 00
  26++EC4E 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  26++EC52 00 00
  27++EC54 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  27++EC58 00 00
  28++EC5A 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  28++EC5E 00 00
  29++EC60              MorayVertSize:          equ $ - MorayVertices
  30++EC60 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  31++EC64 1F 16 04 0C                          DB $1F, $16, $04, $0C
  32++EC68 18 36 0C 18                          DB $18, $36, $0C, $18
  33++EC6C 18 47 14 18                          DB $18, $47, $14, $18
  34++EC70 18 58 10 14                          DB $18, $58, $10, $14
  35++EC74 1F 28 00 10                          DB $1F, $28, $00, $10
  36++EC78 0F 67 04 18                          DB $0F, $67, $04, $18
  37++EC7C 0F 78 00 14                          DB $0F, $78, $00, $14
  38++EC80 0F 02 00 08                          DB $0F, $02, $00, $08
  39++EC84 0F 01 04 08                          DB $0F, $01, $04, $08
  40++EC88 11 13 08 0C                          DB $11, $13, $08, $0C
  41++EC8C 11 25 08 10                          DB $11, $25, $08, $10
  42++EC90 0D 45 08 14                          DB $0D, $45, $08, $14
  43++EC94 0D 34 08 18                          DB $0D, $34, $08, $18
  44++EC98 05 44 1C 20                          DB $05, $44, $1C, $20
  45++EC9C 07 44 1C 24                          DB $07, $44, $1C, $24
  46++ECA0 07 44 20 24                          DB $07, $44, $20, $24
  47++ECA4 05 00 28 2C                          DB $05, $00, $28, $2C
  48++ECA8 05 00 30 34                          DB $05, $00, $30, $34
  49++ECAC              MorayEdgesSize:         equ $ - MorayEdges
  50++ECAC              MorayEdgesCnt:          equ MorayEdgesSize/4
  51++ECAC 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  52++ECB0 9F 0A 31 07                          DB $9F, $0A, $31, $07
  53++ECB4 1F 0A 31 07                          DB $1F, $0A, $31, $07
  54++ECB8 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  55++ECBC 78 00 34 4E                          DB $78, $00, $34, $4E
  56++ECC0 78 3B 1C 65                          DB $78, $3B, $1C, $65
  57++ECC4 DF 48 63 32                          DB $DF, $48, $63, $32
  58++ECC8 5F 00 53 1E                          DB $5F, $00, $53, $1E
  59++ECCC 5F 48 63 32                          DB $5F, $48, $63, $32
  60++ECD0
  61++ECD0              MorayNormalsSize:       equ $ - MorayNormals
  62++ECD0              MorayLen:               equ $ - Moray
  63++ECD0
# file closed: ./Data/Ships/Moray.asm
 472+ ECD0                                      include "Data/Ships/Ophidian.asm"
# file opened: ./Data/Ships/Ophidian.asm
   1++ECD0 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ECD3 60 ED                                DW OphidianEdges
   3++ECD5 78                                   DB OphidianEdgesSize
   4++ECD6 00 3C                                DB $00, $3C
   5++ECD8 78                                   DB OphidianVertSize
   6++ECD9 1E                                   DB OphidianEdgesCnt
   7++ECDA 00 32                                DB $00, $32
   8++ECDC 30                                   DB OphidianNormalsSize
   9++ECDD 14 40 22                             DB $14, $40, $22
  10++ECE0 D8 ED                                DW OphidianNormals
  11++ECE2 01 1A                                DB $01, $1A
  12++ECE4 E8 EC                                DW OphidianVertices
  13++ECE6 00 00                                DB 0,0                      ; Type and Tactics
  14++ECE8
  15++ECE8 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  15++ECEC 68 02
  16++ECEE 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  16++ECF2 67 01
  17++ECF4 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  17++ECF8 22 01
  18++ECFA 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  18++ECFE 8A 24
  19++ED00 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  19++ED04 79 13
  20++ED06 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  20++ED0A FF FF
  21++ED0C 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  21++ED10 9B 35
  22++ED12 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  22++ED16 AB 45
  23++ED18 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  23++ED1C BB 4A
  24++ED1E 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  24++ED22 FF FF
  25++ED24 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  25++ED28 FF FF
  26++ED2A 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  26++ED2E BB 39
  27++ED30 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  27++ED34 FF FF
  28++ED36 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  28++ED3A FF FF
  29++ED3C 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  29++ED40 BB 9A
  30++ED42 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  30++ED46 FF FF
  31++ED48 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  31++ED4C BB BB
  32++ED4E 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  32++ED52 BB BB
  33++ED54 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  33++ED58 BB BB
  34++ED5A 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  34++ED5E BB BB
  35++ED60
  36++ED60              OphidianVertSize:       equ $ - OphidianVertices
  37++ED60 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  38++ED64 1F 01 04 08                          DB $1F, $01, $04, $08
  39++ED68 1F 02 00 08                          DB $1F, $02, $00, $08
  40++ED6C 1F 12 08 14                          DB $1F, $12, $08, $14
  41++ED70 1F 13 10 14                          DB $1F, $13, $10, $14
  42++ED74 1F 24 0C 14                          DB $1F, $24, $0C, $14
  43++ED78 1F 35 14 18                          DB $1F, $35, $14, $18
  44++ED7C 1F 45 14 1C                          DB $1F, $45, $14, $1C
  45++ED80 1F 28 00 0C                          DB $1F, $28, $00, $0C
  46++ED84 1F 17 04 10                          DB $1F, $17, $04, $10
  47++ED88 1F 39 10 2C                          DB $1F, $39, $10, $2C
  48++ED8C 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  49++ED90 1F 67 04 3C                          DB $1F, $67, $04, $3C
  50++ED94 1F 68 00 3C                          DB $1F, $68, $00, $3C
  51++ED98 1F 79 10 3C                          DB $1F, $79, $10, $3C
  52++ED9C 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  53++EDA0 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  54++EDA4 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  55++EDA8 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  56++EDAC 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  57++EDB0 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  58++EDB4 1F AB 20 38                          DB $1F, $AB, $20, $38
  59++EDB8 10 BB 40 44                          DB $10, $BB, $40, $44
  60++EDBC 10 BB 44 48                          DB $10, $BB, $44, $48
  61++EDC0 10 BB 48 4C                          DB $10, $BB, $48, $4C
  62++EDC4 10 BB 4C 40                          DB $10, $BB, $4C, $40
  63++EDC8 10 39 30 34                          DB $10, $39, $30, $34
  64++EDCC 10 39 2C 30                          DB $10, $39, $2C, $30
  65++EDD0 10 4A 28 24                          DB $10, $4A, $28, $24
  66++EDD4 10 4A 24 20                          DB $10, $4A, $24, $20
  67++EDD8              OphidianEdgesSize:      equ $ - OphidianEdges
  68++EDD8              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  69++EDD8
  70++EDD8 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  71++EDDC 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  72++EDE0 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  73++EDE4 1F 10 22 02                          DB $1F, $10, $22, $02
  74++EDE8 9F 10 22 02                          DB $9F, $10, $22, $02
  75++EDEC 3F 00 25 03                          DB $3F, $00, $25, $03
  76++EDF0 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  77++EDF4 5F 0A 14 02                          DB $5F, $0A, $14, $02
  78++EDF8 DF 0A 14 02                          DB $DF, $0A, $14, $02
  79++EDFC 7F 12 20 02                          DB $7F, $12, $20, $02
  80++EE00 FF 12 20 02                          DB $FF, $12, $20, $02
  81++EE04 3F 00 00 25                          DB $3F, $00, $00, $25
  82++EE08
  83++EE08              OphidianNormalsSize:    equ $ - OphidianNormals
  84++EE08              OphidianLen:            equ $ - Ophidian
  85++EE08
# file closed: ./Data/Ships/Ophidian.asm
 473+ EE08                                      include "Data/Ships/Plate.asm"
# file opened: ./Data/Ships/Plate.asm
   1++EE08 80 00 64     Plate:	DB $80, $00, $64
   2++EE0B 32 EE        	DW PlateEdges
   3++EE0D 10           	DB PlateEdgesSize
   4++EE0E 00 0A        	DB $00, $0A
   5++EE10 12           	DB PlateVertSize
   6++EE11 04           	DB PlateEdgesCnt
   7++EE12 00 00        	DB $00, $00
   8++EE14 04           	DB PlateNormalsSize
   9++EE15 05 10 10     	DB $05, $10, $10
  10++EE18 42 EE        	DW PlateNormals
  11++EE1A 03 00        	DB $03, $00
  12++EE1C 20 EE        	DW PlateVertices
  13++EE1E 00 00                                DB 0,0                      ; Type and Tactics
  14++EE20
  15++EE20
  16++EE20 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  16++EE24 FF FF
  17++EE26 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  17++EE2A FF FF
  18++EE2C 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  18++EE30 FF FF
  19++EE32
  20++EE32              PlateVertSize: equ $ - PlateVertices
  21++EE32
  22++EE32
  23++EE32
  24++EE32 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  25++EE36 10 FF 04 08  	DB $10, $FF, $04, $08
  26++EE3A 14 FF 08 0C  	DB $14, $FF, $08, $0C
  27++EE3E 10 FF 0C 00  	DB $10, $FF, $0C, $00
  28++EE42
  29++EE42              PlateEdgesSize: equ $ - PlateEdges
  30++EE42
  31++EE42
  32++EE42              PlateEdgesCnt: equ PlateEdgesSize/4
  33++EE42
  34++EE42
  35++EE42 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  36++EE46
  37++EE46
  38++EE46              PlateNormalsSize: equ $ - PlateNormals
  39++EE46              PlateLen: equ $ - Plate
  40++EE46
# file closed: ./Data/Ships/Plate.asm
 474+ EE46                                      include "Data/Ships/Python.asm"
# file opened: ./Data/Ships/Python.asm
   1++EE46              ;\ -> &5BA1 \ Python = Type 12
   2++EE46 05 00 19     Python:                 DB $05, $00, $19
   3++EE49 A0 EE                                DW PythonEdges
   4++EE4B 68                                   DB PythonEdgesSize
   5++EE4C 00 2A                                DB $00,$2A
   6++EE4E 42                                   DB PythonVertSize
   7++EE4F 1A                                   DB PythonEdgesCnt
   8++EE50 00 00                                DB $00,$00
   9++EE52 34                                   DB PythonNormalsSize
  10++EE53 28 FA 14                             DB $28,$FA,$14
  11++EE56 08 EF                                DW PythonNormals
  12++EE58 00 1B                                DB $00, $1B
  13++EE5A 5E EE                                DW PythonVertices
  14++EE5C 00 00                                DB 0,0                      ; Type and Tactics
  15++EE5E
  16++EE5E 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  16++EE62 10 32
  17++EE64 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  17++EE68 10 54
  18++EE6A 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  18++EE6E FF FF
  19++EE70 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  19++EE74 FF FF
  20++EE76 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  20++EE7A 54 98
  21++EE7C 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  21++EE80 89 CC
  22++EE82 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  22++EE86 B8 CC
  23++EE88 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  23++EE8C A9 CC
  24++EE8E 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  24++EE92 32 76
  25++EE94 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  25++EE98 76 BA
  26++EE9A 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  26++EE9E BA CC
  27++EEA0              PythonVertSize          equ $  - PythonVertices
  28++EEA0 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  28++EEA4 1F 20 00 0C
  29++EEA8 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  29++EEAC 1E 10 00 04
  30++EEB0 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  30++EEB4 1D 51 04 08
  31++EEB8 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  31++EEBC 1D 40 04 0C
  32++EEC0 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  32++EEC4 1D A7 08 24
  33++EEC8 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  33++EECC 1D B6 0C 24
  34++EED0 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  34++EED4 05 BB 0C 28
  35++EED8 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  35++EEDC 05 AA 08 28
  36++EEE0 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  36++EEE4 1F B8 0C 18
  37++EEE8 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  37++EEEC 1F C9 14 1C
  38++EEF0 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  38++EEF4 1D CB 18 28
  39++EEF8 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  39++EEFC 1D BA 24 28
  40++EF00 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  40++EF04 1D 76 20 24
  41++EF08              PythonEdgesSize         equ $  - PythonEdges
  42++EF08              PythonEdgesCnt          equ PythonEdgesSize/4
  43++EF08 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  43++EF0C 1E 1B 28 0B
  44++EF10 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  44++EF14 5E 1B 28 0B
  45++EF18 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  45++EF1C 1E 13 26 00
  46++EF20 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  46++EF24 5E 13 26 00
  47++EF28 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  47++EF2C 3E 19 25 0B
  48++EF30 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  48++EF34 FE 19 25 0B
  49++EF38 3E 00 00 70                          DB $3E, $00, $00, $70
  50++EF3C              PythonNormalsSize       equ $  - PythonNormals
  51++EF3C              PythonLen               equ $  - Python
  52++EF3C
# file closed: ./Data/Ships/Python.asm
 475+ EF3C                                      include "Data/Ships/Python_P.asm"
# file opened: ./Data/Ships/Python_P.asm
   1++EF3C 02 19 00     Python_P:	DB $02, $19, $00
   2++EF3F 96 EF        	DW Python_PEdges
   3++EF41 68           	DB Python_PEdgesSize
   4++EF42 00 2A        	DB $00, $2A
   5++EF44 42           	DB Python_PVertSize
   6++EF45 1A           	DB Python_PEdgesCnt
   7++EF46 00 C8        	DB $00, $C8
   8++EF48 34           	DB Python_PNormalsSize
   9++EF49 28 FA 14     	DB $28, $FA, $14
  10++EF4C FE EF        	DW Python_PNormals
  11++EF4E 00 1B        	DB $00, $1B
  12++EF50 54 EF        	DW Python_PVertices
  13++EF52 00 00                                DB 0,0                      ; Type and Tactics
  14++EF54
  15++EF54 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  15++EF58 10 32
  16++EF5A 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  16++EF5E 10 54
  17++EF60 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  17++EF64 FF FF
  18++EF66 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  18++EF6A FF FF
  19++EF6C 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  19++EF70 54 98
  20++EF72 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  20++EF76 89 CC
  21++EF78 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  21++EF7C B8 CC
  22++EF7E 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  22++EF82 A9 CC
  23++EF84 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  23++EF88 32 76
  24++EF8A 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  24++EF8E 76 BA
  25++EF90 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  25++EF94 BA CC
  26++EF96
  27++EF96              Python_PVertSize: equ $ - Python_PVertices
  28++EF96
  29++EF96
  30++EF96
  31++EF96 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  32++EF9A 1F 20 00 0C  	DB $1F, $20, $00, $0C
  33++EF9E 1F 31 00 08  	DB $1F, $31, $00, $08
  34++EFA2 1F 10 00 04  	DB $1F, $10, $00, $04
  35++EFA6 1F 59 08 10  	DB $1F, $59, $08, $10
  36++EFAA 1F 51 04 08  	DB $1F, $51, $04, $08
  37++EFAE 1F 37 08 20  	DB $1F, $37, $08, $20
  38++EFB2 1F 40 04 0C  	DB $1F, $40, $04, $0C
  39++EFB6 1F 62 0C 20  	DB $1F, $62, $0C, $20
  40++EFBA 1F A7 08 24  	DB $1F, $A7, $08, $24
  41++EFBE 1F 84 0C 10  	DB $1F, $84, $0C, $10
  42++EFC2 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  43++EFC6 07 88 0C 14  	DB $07, $88, $0C, $14
  44++EFCA 07 BB 0C 28  	DB $07, $BB, $0C, $28
  45++EFCE 07 99 08 14  	DB $07, $99, $08, $14
  46++EFD2 07 AA 08 28  	DB $07, $AA, $08, $28
  47++EFD6 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  48++EFDA 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  49++EFDE 1F C8 14 18  	DB $1F, $C8, $14, $18
  50++EFE2 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  51++EFE6 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  52++EFEA 1F CB 18 28  	DB $1F, $CB, $18, $28
  53++EFEE 1F 98 10 14  	DB $1F, $98, $10, $14
  54++EFF2 1F BA 24 28  	DB $1F, $BA, $24, $28
  55++EFF6 1F 54 04 10  	DB $1F, $54, $04, $10
  56++EFFA 1F 76 20 24  	DB $1F, $76, $20, $24
  57++EFFE
  58++EFFE              Python_PEdgesSize: equ $ - Python_PEdges
  59++EFFE
  60++EFFE
  61++EFFE              Python_PEdgesCnt: equ Python_PEdgesSize/4
  62++EFFE
  63++EFFE
  64++EFFE 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  65++F002 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  66++F006 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  67++F00A 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  68++F00E 9F 13 26 00  	DB $9F, $13, $26, $00
  69++F012 1F 13 26 00  	DB $1F, $13, $26, $00
  70++F016 DF 13 26 00  	DB $DF, $13, $26, $00
  71++F01A 5F 13 26 00  	DB $5F, $13, $26, $00
  72++F01E BF 19 25 0B  	DB $BF, $19, $25, $0B
  73++F022 3F 19 25 0B  	DB $3F, $19, $25, $0B
  74++F026 7F 19 25 0B  	DB $7F, $19, $25, $0B
  75++F02A FF 19 25 0B  	DB $FF, $19, $25, $0B
  76++F02E 3F 00 00 70  	DB $3F, $00, $00, $70
  77++F032
  78++F032
  79++F032              Python_PNormalsSize: equ $ - Python_PNormals
  80++F032              Python_PLen: equ $ - Python_P
  81++F032
# file closed: ./Data/Ships/Python_P.asm
 476+ F032                                      ENDIF
 477+ F032                                      IFDEF SHIPBANKC
 478+ F032 ~                                    include "Data/Ships/Rattler.asm"
 479+ F032 ~                                    include "Data/Ships/Rock_Hermit.asm"
 480+ F032 ~                                    include "Data/Ships/ShuttleType9.asm"
 481+ F032 ~                                    include "Data/Ships/Shuttle_Mk_2.asm"
 482+ F032 ~                                    include "Data/Ships/Sidewinder.asm"
 483+ F032 ~                                    include "Data/Ships/Splinter.asm"
 484+ F032 ~                                    include "Data/Ships/TestVector.asm"
 485+ F032 ~                                    include "Data/Ships/Thargoid.asm"
 486+ F032 ~                                    include "Data/Ships/Thargon.asm"
 487+ F032 ~                                    include "Data/Ships/TransportType10.asm"
 488+ F032 ~                                    include "Data/Ships/Viper.asm"
 489+ F032 ~                                    include "Data/Ships/Worm.asm"
 490+ F032                                      ENDIF
 491+ F032
 492+ F032
 493+ F032              ; TODO Later reorg these offsets for better 16 bit read - Done
 494+ F032              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 495+ F032
 496+ F032
 497+ F032              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 498+ F032              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 499+ F032              ; Scoop: 0 = no scoop 1= scoop , anything more?
 500+ F032              ; hull byte#1-2 area for missile lock, lo, hi
 501+ F032              ; hull byte#3   edges data info offset lo
 502+ F032              ; hull byte#4   faces data info offset lo
 503+ F032              ; hull byte#5   4*maxlines+1 for ship lines stack
 504+ F032              ; hull byte#6   gun vertex*4
 505+ F032              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 506+ F032              ; hull byte#8   vertices*6
 507+ F032              ; hull byte#9	edge Count
 508+ F032              ; hull bytes#10-11 bounty lo hi
 509+ F032              ; hull byte#12  faces*4
 510+ F032              ; hull byte#13  dot beyond distance
 511+ F032              ; hull byte#14  energy
 512+ F032              ; hull byte#15  speed (end of 4th row)
 513+ F032              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 514+ F032              ; hull byte#17  faces offset hi
 515+ F032              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 516+ F032              ; hull byte#19  laser|missile(=lower 3 bits)
 517+ F032              ; hull byte#20  Added Vertices for 20,21
 518+ F032
 519+ F032              ; Optimised version to be applied to add data brought in to here:
 520+ F032              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 521+ F032              ; hull byte#1-2 area for missile lock, lo, hi
 522+ F032              ; hull byte#3   edges data info offset lo
 523+ F032              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 524+ F032              ; hull byte#5   4*maxlines+1 for ship lines stack
 525+ F032              ; hull byte#6   gun vertex*4
 526+ F032              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 527+ F032              ; hull byte#8   vertices*6
 528+ F032              ; hull byte#9	edge Count
 529+ F032              ; hull bytes#10-11 bounty lo hi
 530+ F032              ; hull byte#12  faces*4
 531+ F032              ; hull byte#13  dot beyond distance
 532+ F032              ; hull byte#14  energy
 533+ F032              ; hull byte#15  speed (end of 4th row)
 534+ F032              ; hull byte#16  faces data info offset lo (was 4)
 535+ F032              ; hull byte#17  faces offset hi
 536+ F032              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 537+ F032              ; hull bute#19  laser|missile(=lower 3 bits)
 538+ F032              ; hull byte#20  Added Vertices for 20,21
 539+ F032              ;
 540+ F032              ; Vertex Data Structure
 541+ F032              ; Byte 0 X1Lo
 542+ F032              ; Byte 1 X1Hi
 543+ F032              ; Byte 2 Y1Lo
 544+ F032              ; Byte 3 Y1Hi
 545+ F032              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 546+ F032              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 547+ F032              ;
 548+ F032              ;
 549+ F032              ; Edge Data Structure
 550+ F032              ; Byte 0
 551+ F032              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 552+ F032              ; Byte 2 - Index to Vertex 1
 553+ F032              ; Byte 3 - Index to Vertex 2
 554+ F032              ;
 555+ F032              ; Normal/Faces Data Structure
 556+ F032              ;
 557+ F032              ;
 558+ F032              ;
 559+ F032              ; Original Data:
 560+ F032              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 561+ F032              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 562+ F032              ;		\ hull byte#1-2 area for missile lock, lo, hi
 563+ F032              ;		\ hull byte#3   edges data info offset lo
 564+ F032              ;		\ hull byte#4   faces data info offset lo
 565+ F032              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 566+ F032              ;		\ hull byte#6   gun vertex*4
 567+ F032              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 568+ F032              ;		\ hull byte#8   vertices*6
 569+ F032              ;		\ hull bytes#10-11 bounty lo hi
 570+ F032              ;		\ hull byte#12  faces*4
 571+ F032              ;		\ hull byte#13  dot beyond distance
 572+ F032              ;		\ hull byte#14  energy
 573+ F032              ;		\ hull byte#15  speed (end of 4th row)
 574+ F032              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 575+ F032              ;		\ hull byte#17  faces offset hi
 576+ F032              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 577+ F032              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 578+ F032              ; Corrected pointers
 579+ F032              ; &565D \ Cargo cannister = Type 5
 580+ F032              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 581+ F032              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 582+ F032              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 583+ F032              ; Mapping Orginal to new
 584+ F032              ; 0    => 0
 585+ F032              ; 1-2  => 1-2
 586+ F032              ; 3    => EQU Edges
 587+ F032              ; 4    => EQU Normals
 588+ F032              ; 5    => EQU EdgesCnt
 589+ F032              ; 6    => 6
 590+ F032              ; 7    => 7
 591+ F032              ; 8    => EQU VertSize
 592+ F032              ; 9    => EQU EdgesCnt
 593+ F032              ; 10-11=> 10-11
 594+ F032              ; 12   => EQU  NormalsSize
 595+ F032              ; 13   => 13
 596+ F032              ; 14   => 14
 597+ F032              ; 15   => 15
 598+ F032              ; 16   => EQU Edges
 599+ F032              ; 17   => EQU Normals
 600+ F032              ; 18   => 18
 601+ F032              ; 19   => 19
# file closed: ./Data/ShipModels.asm
1051  F032              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1052  F032                  SLOT    ShipModelsAddr
1053  F032                  PAGE    BankShipModelsC
1054  F032              	ORG     ShipModelsAddr, BankShipModelsC
1055  E000                  UNDEFINE SHIPBANKB
1056  E000                  DEFINE   SHIPBANKC 1
1057  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000 ~                            DEFINE SHIPEQUATES
   3+ E000 ~            ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   4+ E000 ~            MissileLockLoOffset	    equ 1
   5+ E000 ~            MissileLockHiOffset	    equ 2
   6+ E000 ~            EdgeAddyOffset		    equ 3
   7+ E000 ~            LineX4Offset		    equ 5
   8+ E000 ~            GunVertexOffset		    equ 6
   9+ E000 ~            ExplosionCtOffset	    equ 7
  10+ E000 ~            VertexCtX6Offset	    equ 8
  11+ E000 ~            EdgeCountOffset		    equ 9
  12+ E000 ~            BountyLoOffset		    equ 10
  13+ E000 ~            BountyHiOffset		    equ 11
  14+ E000 ~            FaceCtX4Offset		    equ 12
  15+ E000 ~            DotOffset			    equ 13
  16+ E000 ~            EnergyOffset		    equ 14
  17+ E000 ~            SpeedOffset			    equ 15
  18+ E000 ~            FaceAddyOffset		    equ 16
  19+ E000 ~            QOffset				    equ 18
  20+ E000 ~            LaserOffset			    equ 19
  21+ E000 ~            VerticiesAddyOffset     equ 20
  22+ E000 ~            ShipTypeOffset          equ 22
  23+ E000 ~            ShipNewBitsOffset       equ 23
  24+ E000 ~            ShipDataLength          equ ShipNewBitsOffset+1
  25+ E000 ~
  26+ E000 ~            CobraTablePointer       equ 43
  27+ E000 ~            ;29 faulty
  28+ E000 ~            BankThreshold           equ 16
  29+ E000 ~
  30+ E000                             ENDIF
  31+ E000
  32+ E000              ;GINF:
  33+ E000                                      IFDEF SHIPBANKA
  34+ E000 ~            GetInfo:                                    ; gets pointer to ship data for ship type in a
  35+ E000 ~            GetInfoA:                                   ; gets pointer to ship data for ship type in a
  36+ E000                                      ENDIF
  37+ E000                                      IFDEF SHIPBANKB
  38+ E000 ~            GetInfoB:
  39+ E000                                      ENDIF
  40+ E000                                      IFDEF SHIPBANKC
  41+ E000              GetInfoC:
  42+ E000                                      ENDIF
  43+ E000 4F                                   ld          c,a
  44+ E001 CB 2F                                sra         a
  45+ E003 CB 2F                                sra         a
  46+ E005 CB 2F                                sra         a
  47+ E007 CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  48+ E009 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  49+ E00A 21 7B E0                             ld          hl,ShipModelBankA
  50+ E00D ED 31                                add         hl,a
  51+ E00F 7E                                   ld          a,(hl)
  52+ E010                                      MMUSelectShipModelA
  52+ E010 ED 92 57    >					 nextreg ShipModelMMU,	    a
  53+ E013 79                                   ld          a,c
  54+ E014 50                                   ld          d,b
  55+ E015 1E 10                                ld          e,16
  56+ E017 ED 30                                mul
  57+ E019 93                                   sub         a,e
  58+ E01A 21 7E E0                             ld          hl,ShipModelTable
  59+ E01D ED 31                                add         hl,a
  60+ E01F ED 31                                add         hl,a
  61+ E021 5E                                   ld          e,(hl)
  62+ E022 23                                   inc         hl
  63+ E023 56                                   ld          d,(hl)
  64+ E024 C9                                   ret
  65+ E025
  66+ E025
  67+ E025              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
  68+ E025                                      IFDEF SHIPBANKA
  69+ E025 ~            CopyVerticesDataToUBnk:
  70+ E025 ~            CopyVerticesDataToUBnkA:
  71+ E025                                      ENDIF
  72+ E025                                      IFDEF SHIPBANKB
  73+ E025 ~            CopyVerticesDataToUBnkB:
  74+ E025                                      ENDIF
  75+ E025                                      IFDEF SHIPBANKC
  76+ E025              CopyVerticesDataToUBnkC:
  77+ E025                                      ENDIF
  78+ E025 2A 11 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  79+ E028 11 15 C3                             ld          de,UBnkHullVerticies
  80+ E02B 06 00                                ld          b,0
  81+ E02D 3A 05 C3                             ld			a,(VertexCtX6Addr)
  82+ E030 4F                                   ld          c,a
  83+ E031 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  84+ E032 CD FA 8F                             call        memcopy_dma
  85+ E035 C9                                   ret
  86+ E036
  87+ E036                                      IFDEF SHIPBANKA
  88+ E036 ~            CopyEdgeDataToUBnk:
  89+ E036 ~            CopyEdgeDataToUBnkA:
  90+ E036                                      ENDIF
  91+ E036                                      IFDEF SHIPBANKB
  92+ E036 ~            CopyEdgeDataToUBnkB:
  93+ E036                                      ENDIF
  94+ E036                                      IFDEF SHIPBANKC
  95+ E036              CopyEdgeDataToUBnkC:
  96+ E036                                      ENDIF
  97+ E036 2A 00 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  98+ E039 11 41 C4                             ld          de,UBnkHullEdges
  99+ E03C 06 00                                ld          b,0
 100+ E03E 3A 02 C3                             ld			a,(LineX4Addr)
 101+ E041 4F                                   ld          c,a
 102+ E042 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 103+ E043 CD FA 8F                             call        memcopy_dma
 104+ E046 C9                                   ret
 105+ E047
 106+ E047                                      IFDEF SHIPBANKA
 107+ E047 ~            CopyNormalDataToUBnk:
 108+ E047 ~            CopyNormalDataToUBnkA:
 109+ E047                                      ENDIF
 110+ E047                                      IFDEF SHIPBANKB
 111+ E047 ~            CopyNormalDataToUBnkB:
 112+ E047                                      ENDIF
 113+ E047                                      IFDEF SHIPBANKC
 114+ E047              CopyNormalDataToUBnkC:
 115+ E047                                      ENDIF
 116+ E047 2A 0D C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 117+ E04A 11 F1 C8                             ld          de,UBnkHullNormals
 118+ E04D 06 00                                ld          b,0
 119+ E04F 3A 09 C3                             ld          a,(FaceCtX4Addr)
 120+ E052 4F                                   ld          c,a
 121+ E053 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 122+ E054 CD FA 8F                             call        memcopy_dma
 123+ E057 C9                                   ret
 124+ E058
 125+ E058                                      IFDEF SHIPBANKA
 126+ E058 ~            CopyShipDataToUBnk:
 127+ E058 ~            CopyShipDataToUBnkA:
 128+ E058                                      ENDIF
 129+ E058                                      IFDEF SHIPBANKB
 130+ E058 ~            CopyShipDataToUBnkB:
 131+ E058                                      ENDIF
 132+ E058                                      IFDEF SHIPBANKC
 133+ E058              CopyShipDataToUBnkC:
 134+ E058                                      ENDIF
 135+ E058 32 FC C2                             ld			(UbnkShipType),a			; mark ship type in bank
 136+ E05B 21 0E E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 137+ E05E ED 31                                add         hl,a
 138+ E060 ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 139+ E062 4E                                   ld          c,(hl)
 140+ E063 23                                   inc         hl
 141+ E064 46                                   ld          b,(hl)                      ; bc now equals length of data set
 142+ E065 CD 00 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 143+ E068 EB                                   ex          de,hl                       ; hl = address of Ship Data
 144+ E069 11 FD C2                             ld          de,UBnkHullCopy             ; Universe bank
 145+ E06C 01 18 00                             ld          bc,ShipDataLength
 146+ E06F ED B0                                ldir
 147+ E071 CD 25 E0                             call        CopyVerticesDataToUBnk
 148+ E074 CD 36 E0                             call        CopyEdgeDataToUBnk
 149+ E077 CD 47 E0                             call        CopyNormalDataToUBnk
 150+ E07A C9                                   ret
 151+ E07B
 152+ E07B              ; change to there are two banks
 153+ E07B              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 154+ E07B              ;
 155+ E07B
 156+ E07B
 157+ E07B
 158+ E07B
 159+ E07B              ; Ships in Bank A
 160+ E07B                                       IFDEF SHIPBANKA
 161+ E07B ~            ShipModelBankA           DB BankShipModelsA
 162+ E07B ~                                     DB BankShipModelsB
 163+ E07B ~                                     DB BankShipModelsC
 164+ E07B                                       ENDIF
 165+ E07B                                       IFDEF SHIPBANKB
 166+ E07B ~            ShipModelBankB           DB BankShipModelsA
 167+ E07B ~                                     DB BankShipModelsB
 168+ E07B ~                                     DB BankShipModelsC
 169+ E07B                                       ENDIF
 170+ E07B                                       IFDEF SHIPBANKC
 171+ E07B 3B           ShipModelBankC           DB BankShipModelsA
 172+ E07C 43                                    DB BankShipModelsB
 173+ E07D 44                                    DB BankShipModelsC
 174+ E07E                                       ENDIF
 175+ E07E                                       IFDEF SHIPBANKA
 176+ E07E ~            ShipModelTableA:         DW Adder
 177+ E07E ~                                     DW Anaconda
 178+ E07E ~                                     DW Asp_Mk_2
 179+ E07E ~                                     DW Asteroid
 180+ E07E ~                                     DW Boa
 181+ E07E ~                                     DW Boulder
 182+ E07E ~                                     DW Bushmaster
 183+ E07E ~                                     DW CargoType5
 184+ E07E ~                                     DW Chameleon
 185+ E07E ~                                     DW CobraMk3
 186+ E07E ~                                     DW Cobra_Mk_1
 187+ E07E ~                                     DW Cobra_Mk_3_P
 188+ E07E ~                                     DW Constrictor
 189+ E07E ~                                     DW Coriolis
 190+ E07E ~                                     DW Cougar
 191+ E07E ~                                     DW Dodo
 192+ E07E ~                                     DW Dragon
 193+ E07E ~                                     DW Escape_Pod
 194+ E07E ~                                     DW Fer_De_Lance
 195+ E07E ~                                     DW Gecko
 196+ E07E ~                                     DW Ghavial
 197+ E07E ~                                     DW Iguana
 198+ E07E ~                                     DW Krait
 199+ E07E ~                                     DW Logo
 200+ E07E ~            ShipVertexTableA:        DW AdderVertices
 201+ E07E ~                                     DW AnacondaVertices
 202+ E07E ~                                     DW Asp_Mk_2Vertices
 203+ E07E ~                                     DW AsteroidVertices
 204+ E07E ~                                     DW BoaVertices
 205+ E07E ~                                     DW BoulderVertices
 206+ E07E ~                                     DW BushmasterVertices
 207+ E07E ~                                     DW CargoType5Vertices
 208+ E07E ~                                     DW ChameleonVertices
 209+ E07E ~                                     DW CobraMk3Vertices
 210+ E07E ~                                     DW Cobra_Mk_1Vertices
 211+ E07E ~                                     DW Cobra_Mk_3_PVertices
 212+ E07E ~                                     DW ConstrictorVertices
 213+ E07E ~                                     DW CoriolisVertices
 214+ E07E ~                                     DW CougarVertices
 215+ E07E ~                                     DW DodoVertices
 216+ E07E ~            ShipEdgeTableA:          DW AdderEdges
 217+ E07E ~                                     DW AnacondaEdges
 218+ E07E ~                                     DW Asp_Mk_2Edges
 219+ E07E ~                                     DW AsteroidEdges
 220+ E07E ~                                     DW BoaEdges
 221+ E07E ~                                     DW BoulderEdges
 222+ E07E ~                                     DW BushmasterEdges
 223+ E07E ~                                     DW CargoType5Edges
 224+ E07E ~                                     DW ChameleonEdges
 225+ E07E ~                                     DW CobraMk3Edges
 226+ E07E ~                                     DW Cobra_Mk_1Edges
 227+ E07E ~                                     DW Cobra_Mk_3_PEdges
 228+ E07E ~                                     DW ConstrictorEdges
 229+ E07E ~                                     DW CoriolisEdges
 230+ E07E ~                                     DW CougarEdges
 231+ E07E ~                                     DW DodoEdges
 232+ E07E ~            ShipNormalTableA:        DW AdderNormals
 233+ E07E ~                                     DW AnacondaNormals
 234+ E07E ~                                     DW Asp_Mk_2Normals
 235+ E07E ~                                     DW AsteroidNormals
 236+ E07E ~                                     DW BoaNormals
 237+ E07E ~                                     DW BoulderNormals
 238+ E07E ~                                     DW BushmasterNormals
 239+ E07E ~                                     DW CargoType5Normals
 240+ E07E ~                                     DW ChameleonNormals
 241+ E07E ~                                     DW CobraMk3Normals
 242+ E07E ~                                     DW Cobra_Mk_1Normals
 243+ E07E ~                                     DW Cobra_Mk_3_PNormals
 244+ E07E ~                                     DW ConstrictorNormals
 245+ E07E ~                                     DW CoriolisNormals
 246+ E07E ~                                     DW CougarNormals
 247+ E07E ~                                     DW DodoNormals
 248+ E07E ~            ShipModelSizeTableA:     DW AdderLen
 249+ E07E ~                                     DW AnacondaLen
 250+ E07E ~                                     DW Asp_Mk_2Len
 251+ E07E ~                                     DW AsteroidLen
 252+ E07E ~                                     DW BoaLen
 253+ E07E ~                                     DW BoulderLen
 254+ E07E ~                                     DW BushmasterLen
 255+ E07E ~                                     DW CargoType5Len
 256+ E07E ~                                     DW ChameleonLen
 257+ E07E ~                                     DW CobraMk3Len
 258+ E07E ~                                     DW Cobra_Mk_1Len
 259+ E07E ~                                     DW Cobra_Mk_3_PLen
 260+ E07E ~                                     DW ConstrictorLen
 261+ E07E ~                                     DW CoriolisLen
 262+ E07E ~                                     DW CougarLen
 263+ E07E ~                                     DW DodoLen
 264+ E07E                                       ENDIF
 265+ E07E                                       IFDEF SHIPBANKB
 266+ E07E ~            ShipModelTableB:         DW Dragon
 267+ E07E ~                                     DW Escape_Pod
 268+ E07E ~                                     DW Fer_De_Lance
 269+ E07E ~                                     DW Gecko
 270+ E07E ~                                     DW Ghavial
 271+ E07E ~                                     DW Iguana
 272+ E07E ~                                     DW Krait
 273+ E07E ~                                     DW Logo
 274+ E07E ~                                     DW Mamba
 275+ E07E ~                                     DW Missile
 276+ E07E ~                                     DW Monitor
 277+ E07E ~                                     DW Moray
 278+ E07E ~                                     DW Ophidian
 279+ E07E ~                                     DW Plate
 280+ E07E ~                                     DW Python
 281+ E07E ~                                     DW Python_P
 282+ E07E ~            ShipVertexTableB:        DW DragonVertices
 283+ E07E ~                                     DW Escape_PodVertices
 284+ E07E ~                                     DW Fer_De_LanceVertices
 285+ E07E ~                                     DW GeckoVertices
 286+ E07E ~                                     DW GhavialVertices
 287+ E07E ~                                     DW IguanaVertices
 288+ E07E ~                                     DW KraitVertices
 289+ E07E ~                                     DW LogoVertices
 290+ E07E ~                                     DW MambaVertices
 291+ E07E ~                                     DW MissileVertices
 292+ E07E ~                                     DW MonitorVertices
 293+ E07E ~                                     DW MorayVertices
 294+ E07E ~                                     DW OphidianVertices
 295+ E07E ~                                     DW PlateVertices
 296+ E07E ~                                     DW PythonVertices
 297+ E07E ~                                     DW Python_PVertices
 298+ E07E ~            ShipEdgeTableB:          DW DragonEdges
 299+ E07E ~                                     DW Escape_PodEdges
 300+ E07E ~                                     DW Fer_De_LanceEdges
 301+ E07E ~                                     DW GeckoEdges
 302+ E07E ~                                     DW GhavialEdges
 303+ E07E ~                                     DW IguanaEdges
 304+ E07E ~                                     DW KraitEdges
 305+ E07E ~                                     DW LogoEdges
 306+ E07E ~                                     DW MambaEdges
 307+ E07E ~                                     DW MissileEdges
 308+ E07E ~                                     DW MonitorEdges
 309+ E07E ~                                     DW MorayEdges
 310+ E07E ~                                     DW OphidianEdges
 311+ E07E ~                                     DW PlateEdges
 312+ E07E ~                                     DW PythonEdges
 313+ E07E ~                                     DW Python_PEdges
 314+ E07E ~            ShipNormalTableB:        DW DragonNormals
 315+ E07E ~                                     DW Escape_PodNormals
 316+ E07E ~                                     DW Fer_De_LanceNormals
 317+ E07E ~                                     DW GeckoNormals
 318+ E07E ~                                     DW GhavialNormals
 319+ E07E ~                                     DW IguanaNormals
 320+ E07E ~                                     DW KraitNormals
 321+ E07E ~                                     DW LogoNormals
 322+ E07E ~                                     DW MambaNormals
 323+ E07E ~                                     DW MissileNormals
 324+ E07E ~                                     DW MonitorNormals
 325+ E07E ~                                     DW MorayNormals
 326+ E07E ~                                     DW OphidianNormals
 327+ E07E ~                                     DW PlateNormals
 328+ E07E ~                                     DW PythonNormals
 329+ E07E ~                                     DW Python_PNormals
 330+ E07E ~            ShipModelSizeTableB:     DW DragonLen
 331+ E07E ~                                     DW Escape_PodLen
 332+ E07E ~                                     DW Fer_De_LanceLen
 333+ E07E ~                                     DW GeckoLen
 334+ E07E ~                                     DW GhavialLen
 335+ E07E ~                                     DW IguanaLen
 336+ E07E ~                                     DW KraitLen
 337+ E07E ~                                     DW LogoLen
 338+ E07E ~                                     DW MambaLen
 339+ E07E ~                                     DW MissileLen
 340+ E07E ~                                     DW MonitorLen
 341+ E07E ~                                     DW MorayLen
 342+ E07E ~                                     DW OphidianLen
 343+ E07E ~                                     DW PlateLen
 344+ E07E ~                                     DW PythonLen
 345+ E07E ~                                     DW Python_PLen
 346+ E07E                                       ENDIF
 347+ E07E                                       IFDEF SHIPBANKC
 348+ E07E 1E E1        ShipModelTableC:         DW Rattler
 349+ E080 2C E2                                 DW Rock_Hermit
 350+ E082 06 E3                                 DW ShuttleType9
 351+ E084 3C E4                                 DW Shuttle_Mk_2
 352+ E086 5E E5                                 DW Sidewinder
 353+ E088 0A E6                                 DW Splinter
 354+ E08A 62 E6                                 DW TestVector
 355+ E08C C4 E6                                 DW Thargoid
 356+ E08E E4 E7                                 DW Thargon
 357+ E090 90 E8                                 DW TransportType10
 358+ E092 76 EA                                 DW Viper
 359+ E094 54 EB                                 DW Worm
 360+ E096 00 00                                 DW 0
 361+ E098 00 00                                 DW 0
 362+ E09A 00 00                                 DW 0
 363+ E09C 00 00                                 DW 0
 364+ E09E 36 E1        ShipVertexTableC:        DW RattlerVertices
 365+ E0A0 44 E2                                 DW Rock_HermitVertices
 366+ E0A2 1E E3                                 DW ShuttleType9Vertices
 367+ E0A4 54 E4                                 DW Shuttle_Mk_2Vertices
 368+ E0A6 76 E5                                 DW SidewinderVertices
 369+ E0A8 22 E6                                 DW SplinterVertices
 370+ E0AA 7A E6                                 DW TestVectorVertices
 371+ E0AC DC E6                                 DW ThargoidVertices
 372+ E0AE FC E7                                 DW ThargonVertices
 373+ E0B0 A8 E8                                 DW TransportType10Vertices
 374+ E0B2 8E EA                                 DW ViperVertices
 375+ E0B4 6C EB                                 DW WormVertices
 376+ E0B6 00 00                                 DW 0
 377+ E0B8 00 00                                 DW 0
 378+ E0BA 00 00                                 DW 0
 379+ E0BC 00 00                                 DW 0
 380+ E0BE 90 E1        ShipEdgeTableC:          DW RattlerEdges
 381+ E0C0 7A E2                                 DW Rock_HermitEdges
 382+ E0C2 90 E3                                 DW ShuttleType9Edges
 383+ E0C4 BA E4                                 DW Shuttle_Mk_2Edges
 384+ E0C6 B2 E5                                 DW SidewinderEdges
 385+ E0C8 3A E6                                 DW SplinterEdges
 386+ E0CA A4 E6                                 DW TestVectorEdges
 387+ E0CC 54 E7                                 DW ThargoidEdges
 388+ E0CE 38 E8                                 DW ThargonEdges
 389+ E0D0 86 E9                                 DW TransportType10Edges
 390+ E0D2 E8 EA                                 DW ViperEdges
 391+ E0D4 A8 EB                                 DW WormEdges
 392+ E0D6 00 00                                 DW 0
 393+ E0D8 00 00                                 DW 0
 394+ E0DA 00 00                                 DW 0
 395+ E0DC 00 00                                 DW 0
 396+ E0DE F8 E1        ShipNormalTableC:        DW RattlerNormals
 397+ E0E0 CE E2                                 DW Rock_HermitNormals
 398+ E0E2 08 E4                                 DW ShuttleType9Normals
 399+ E0E4 2A E5                                 DW Shuttle_Mk_2Normals
 400+ E0E6 EE E5                                 DW SidewinderNormals
 401+ E0E8 52 E6                                 DW SplinterNormals
 402+ E0EA B4 E6                                 DW TestVectorNormals
 403+ E0EC BC E7                                 DW ThargoidNormals
 404+ E0EE 74 E8                                 DW ThargonNormals
 405+ E0F0 3E EA                                 DW TransportType10Normals
 406+ E0F2 38 EB                                 DW ViperNormals
 407+ E0F4 E8 EB                                 DW WormNormals
 408+ E0F6 00 00                                 DW 0
 409+ E0F8 00 00                                 DW 0
 410+ E0FA 00 00                                 DW 0
 411+ E0FC 00 00                                 DW 0
 412+ E0FE 0E 01        ShipModelSizeTableC:     DW RattlerLen
 413+ E100 DA 00                                 DW Rock_HermitLen
 414+ E102 36 01                                 DW ShuttleType9Len
 415+ E104 22 01                                 DW Shuttle_Mk_2Len
 416+ E106 AC 00                                 DW SidewinderLen
 417+ E108 58 00                                 DW SplinterLen
 418+ E10A 62 00                                 DW TestVectorLen
 419+ E10C 20 01                                 DW ThargoidLen
 420+ E10E AC 00                                 DW ThargonLen
 421+ E110 E6 01                                 DW TransportType10Len
 422+ E112 DE 00                                 DW ViperLen
 423+ E114 B4 00                                 DW WormLen
 424+ E116 00 00                                 DW 0
 425+ E118 00 00                                 DW 0
 426+ E11A 00 00                                 DW 0
 427+ E11C 00 00                                 DW 0
 428+ E11E                                       ENDIF
 429+ E11E
 430+ E11E
 431+ E11E                                      IFNDEF SHIPMODELTABLES
 432+ E11E ~                                    DEFINE SHIPMODELTABLES
 433+ E11E ~            ShipModelSizeTable:     EQU ShipModelSizeTableA
 434+ E11E ~            ShipModelBank:          EQU ShipModelBankA
 435+ E11E ~            ShipModelTable:         EQU ShipModelTableA
 436+ E11E ~            ShipVertexTable:        EQU ShipVertexTableA
 437+ E11E ~            ShipEdgeTable:          EQU ShipEdgeTableA
 438+ E11E ~            ShipNormalTable:        EQU ShipNormalTableA
 439+ E11E                                      ENDIF
 440+ E11E
 441+ E11E                                      IFDEF SHIPBANKA
 442+ E11E ~                                    include "Data/Ships/Adder.asm"
 443+ E11E ~                                    include "Data/Ships/Anaconda.asm"
 444+ E11E ~                                    include "Data/Ships/Asp_Mk_2.asm"
 445+ E11E ~                                    include "Data/Ships/Asteroid.asm"
 446+ E11E ~                                    include "Data/Ships/Boa.asm"
 447+ E11E ~                                    include "Data/Ships/Boulder.asm"
 448+ E11E ~                                    include "Data/Ships/Bushmaster.asm"
 449+ E11E ~                                    include "Data/Ships/CargoType5.asm"
 450+ E11E ~                                    include "Data/Ships/Chameleon.asm"
 451+ E11E ~                                    include "Data/Ships/CobraMk3.asm"
 452+ E11E ~                                    include "Data/Ships/Cobra_Mk_1.asm"
 453+ E11E ~                                    include "Data/Ships/Cobra_Mk_3_P.asm"
 454+ E11E ~                                    include "Data/Ships/Constrictor.asm"
 455+ E11E ~                                    include "Data/Ships/Coriolis.asm"
 456+ E11E ~                                    include "Data/Ships/Cougar.asm"
 457+ E11E ~                                    include "Data/Ships/Dodo.asm"
 458+ E11E                                      ENDIF
 459+ E11E                                      IFDEF SHIPBANKB
 460+ E11E ~                                    include "Data/Ships/Dragon.asm"
 461+ E11E ~                                    include "Data/Ships/Escape_Pod.asm"
 462+ E11E ~                                    include "Data/Ships/Fer_De_Lance.asm"
 463+ E11E ~                                    include "Data/Ships/Gecko.asm"
 464+ E11E ~                                    include "Data/Ships/Ghavial.asm"
 465+ E11E ~                                    include "Data/Ships/Iguana.asm"
 466+ E11E ~                                    include "Data/Ships/Krait.asm"
 467+ E11E ~                                    include "Data/Ships/Logo.asm"
 468+ E11E ~                                    include "Data/Ships/Mamba.asm"
 469+ E11E ~                                    include "Data/Ships/Missile.asm"
 470+ E11E ~                                    include "Data/Ships/Monitor.asm"
 471+ E11E ~                                    include "Data/Ships/Moray.asm"
 472+ E11E ~                                    include "Data/Ships/Ophidian.asm"
 473+ E11E ~                                    include "Data/Ships/Plate.asm"
 474+ E11E ~                                    include "Data/Ships/Python.asm"
 475+ E11E ~                                    include "Data/Ships/Python_P.asm"
 476+ E11E                                      ENDIF
 477+ E11E                                      IFDEF SHIPBANKC
 478+ E11E                                      include "Data/Ships/Rattler.asm"
# file opened: ./Data/Ships/Rattler.asm
   1++E11E 02 17 70     Rattler:	DB $02, $17, $70
   2++E121 90 E1                    DW RattlerEdges
   3++E123 68                       DB RattlerEdgesSize
   4++E124 00 2A                    DB $00, $2A
   5++E126 5A                       DB RattlerVertSize
   6++E127 1A                       DB RattlerEdgesCnt
   7++E128 00 96                    DB $00, $96
   8++E12A 34                       DB RattlerNormalsSize
   9++E12B 0A 71 1F                 DB $0A, $71, $1F
  10++E12E F8 E1                    DW RattlerNormals
  11++E130 01 22                    DB $01, $22
  12++E132 36 E1                    DW RattlerVertices
  13++E134 00 00                                DB 0,0                      ; Type and Tactics
  14++E136
  15++E136
  16++E136 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  16++E13A 89 23
  17++E13C 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  17++E140 9A 34
  18++E142 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  18++E146 78 12
  19++E148 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  19++E14C AB 45
  20++E14E 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  20++E152 67 01
  21++E154 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  21++E158 CC 5B
  22++E15A 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  22++E15E CC 06
  23++E160 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  23++E164 FF FF
  24++E166 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  24++E16A FF FF
  25++E16C 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  25++E170 CC CC
  26++E172 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  26++E176 CC CC
  27++E178 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  27++E17C CC CC
  28++E17E 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  28++E182 CC CC
  29++E184 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  29++E188 CC CC
  30++E18A 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  30++E18E CC CC
  31++E190
  32++E190              RattlerVertSize: equ $ - RattlerVertices
  33++E190
  34++E190
  35++E190 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  36++E194 1F 17 08 10  	DB $1F, $17, $08, $10
  37++E198 1F 28 00 08  	DB $1F, $28, $00, $08
  38++E19C 1F 39 00 04  	DB $1F, $39, $00, $04
  39++E1A0 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  40++E1A4 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  41++E1A8 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  42++E1AC 1F 6C 18 20  	DB $1F, $6C, $18, $20
  43++E1B0 1F 01 10 1C  	DB $1F, $01, $10, $1C
  44++E1B4 1F 67 10 20  	DB $1F, $67, $10, $20
  45++E1B8 1F 12 08 1C  	DB $1F, $12, $08, $1C
  46++E1BC 1F 78 08 20  	DB $1F, $78, $08, $20
  47++E1C0 1F 23 00 1C  	DB $1F, $23, $00, $1C
  48++E1C4 1F 89 00 20  	DB $1F, $89, $00, $20
  49++E1C8 1F 34 04 1C  	DB $1F, $34, $04, $1C
  50++E1CC 1F 9A 04 20  	DB $1F, $9A, $04, $20
  51++E1D0 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  52++E1D4 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  53++E1D8 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  54++E1DC 1F BC 14 20  	DB $1F, $BC, $14, $20
  55++E1E0 0A CC 24 28  	DB $0A, $CC, $24, $28
  56++E1E4 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  57++E1E8 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  58++E1EC 0A CC 30 34  	DB $0A, $CC, $30, $34
  59++E1F0 0A CC 34 38  	DB $0A, $CC, $34, $38
  60++E1F4 0A CC 38 30  	DB $0A, $CC, $38, $30
  61++E1F8
  62++E1F8              RattlerEdgesSize: equ $ - RattlerEdges
  63++E1F8
  64++E1F8
  65++E1F8              RattlerEdgesCnt: equ RattlerEdgesSize/4
  66++E1F8
  67++E1F8
  68++E1F8 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  69++E1FC 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  70++E200 9F 09 5D 12  	DB $9F, $09, $5D, $12
  71++E204 1F 09 5D 12  	DB $1F, $09, $5D, $12
  72++E208 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  73++E20C 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  74++E210 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  75++E214 DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  76++E218 DF 09 5D 12  	DB $DF, $09, $5D, $12
  77++E21C 5F 09 5D 12  	DB $5F, $09, $5D, $12
  78++E220 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  79++E224 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  80++E228 3F 00 00 60  	DB $3F, $00, $00, $60
  81++E22C
  82++E22C              RattlerNormalsSize: equ $ - RattlerNormals
  83++E22C              RattlerLen: equ $ - Rattler
  84++E22C
# file closed: ./Data/Ships/Rattler.asm
 479+ E22C                                      include "Data/Ships/Rock_Hermit.asm"
# file opened: ./Data/Ships/Rock_Hermit.asm
   1++E22C 07 19 00     Rock_Hermit:	DB $07, $19, $00
   2++E22F 7A E2        	DW Rock_HermitEdges
   3++E231 54           	DB Rock_HermitEdgesSize
   4++E232 00 32        	DB $00, $32
   5++E234 36           	DB Rock_HermitVertSize
   6++E235 15           	DB Rock_HermitEdgesCnt
   7++E236 00 00        	DB $00, $00
   8++E238 38           	DB Rock_HermitNormalsSize
   9++E239 32 B4 1E     	DB $32, $B4, $1E
  10++E23C CE E2        	DW Rock_HermitNormals
  11++E23E 01 02        	DB $01, $02
  12++E240 44 E2        	DW Rock_HermitVertices
  13++E242 00 00                                DB 0,0                      ; Type and Tactics
  14++E244
  15++E244
  16++E244 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  16++E248 FF FF
  17++E24A 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  17++E24E FF FF
  18++E250 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  18++E254 FF FF
  19++E256 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  19++E25A FF FF
  20++E25C 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  20++E260 65 DC
  21++E262 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  21++E266 FF FF
  22++E268 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  22++E26C 10 32
  23++E26E 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  23++E272 FF FF
  24++E274 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  24++E278 98 BA
  25++E27A
  26++E27A
  27++E27A              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  28++E27A
  29++E27A
  30++E27A
  31++E27A 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  32++E27E 1F D6 00 10  	DB $1F, $D6, $00, $10
  33++E282 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  34++E286 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  35++E28A 1F A3 04 08  	DB $1F, $A3, $04, $08
  36++E28E 1F 32 04 18  	DB $1F, $32, $04, $18
  37++E292 1F 31 08 18  	DB $1F, $31, $08, $18
  38++E296 1F 41 08 14  	DB $1F, $41, $08, $14
  39++E29A 1F 10 14 18  	DB $1F, $10, $14, $18
  40++E29E 1F 60 00 14  	DB $1F, $60, $00, $14
  41++E2A2 1F 54 0C 14  	DB $1F, $54, $0C, $14
  42++E2A6 1F 20 00 18  	DB $1F, $20, $00, $18
  43++E2AA 1F 65 10 14  	DB $1F, $65, $10, $14
  44++E2AE 1F A8 04 20  	DB $1F, $A8, $04, $20
  45++E2B2 1F 87 04 1C  	DB $1F, $87, $04, $1C
  46++E2B6 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  47++E2BA 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  48++E2BE 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  49++E2C2 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  50++E2C6 1F BA 08 20  	DB $1F, $BA, $08, $20
  51++E2CA 1F 98 1C 20  	DB $1F, $98, $1C, $20
  52++E2CE
  53++E2CE              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  54++E2CE
  55++E2CE
  56++E2CE              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  57++E2CE
  58++E2CE
  59++E2CE 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  60++E2D2 5F 09 42 51  	DB $5F, $09, $42, $51
  61++E2D6 9F 48 40 1F  	DB $9F, $48, $40, $1F
  62++E2DA DF 40 49 2F  	DB $DF, $40, $49, $2F
  63++E2DE 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  64++E2E2 1F 87 0F 23  	DB $1F, $87, $0F, $23
  65++E2E6 1F 26 4C 46  	DB $1F, $26, $4C, $46
  66++E2EA BF 42 3B 27  	DB $BF, $42, $3B, $27
  67++E2EE FF 43 0F 50  	DB $FF, $43, $0F, $50
  68++E2F2 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  69++E2F6 FF 46 50 28  	DB $FF, $46, $50, $28
  70++E2FA 7F 3A 66 33  	DB $7F, $3A, $66, $33
  71++E2FE 3F 51 09 43  	DB $3F, $51, $09, $43
  72++E302 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  73++E306
  74++E306
  75++E306              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  76++E306              Rock_HermitLen: equ $ - Rock_Hermit
  77++E306
# file closed: ./Data/Ships/Rock_Hermit.asm
 480+ E306                                      include "Data/Ships/ShuttleType9.asm"
# file opened: ./Data/Ships/ShuttleType9.asm
   1++E306 0F 09 C4     ShuttleType9:	DB $0F, $09, $C4
   2++E309 90 E3        	DW ShuttleType9Edges
   3++E30B 78           	DB ShuttleType9EdgesSize
   4++E30C 00 26        	DB $00, $26
   5++E30E 72           	DB ShuttleType9VertSize
   6++E30F 1E           	DB ShuttleType9EdgesCnt
   7++E310 00 00        	DB $00, $00
   8++E312 34           	DB ShuttleType9NormalsSize
   9++E313 16 20 08     	DB $16, $20, $08
  10++E316 08 E4        	DW ShuttleType9Normals
  11++E318 02 00        	DB $02, $00
  12++E31A 1E E3        	DW ShuttleType9Vertices
  13++E31C 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E31E
  15++E31E
  16++E31E 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  16++E322 FF FF
  17++E324 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  17++E328 FF FF
  18++E32A 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  18++E32E FF FF
  19++E330 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  19++E334 FF FF
  20++E336 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  20++E33A 12 39
  21++E33C 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  21++E340 34 59
  22++E342 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  22++E346 56 79
  23++E348 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  23++E34C 17 89
  24++E34E 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  24++E352 99 99
  25++E354 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  25++E358 99 99
  26++E35A 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  26++E35E 99 99
  27++E360 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  27++E364 99 99
  28++E366 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  28++E36A 0A BC
  29++E36C 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  29++E370 FF 02
  30++E372 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  30++E376 01 F4
  31++E378 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  31++E37C A1 3F
  32++E37E 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  32++E382 6B 23
  33++E384 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  33++E388 F8 C0
  34++E38A 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  34++E38E 4F 18
  35++E390
  36++E390              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  37++E390
  38++E390
  39++E390
  40++E390 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  41++E394 1F 4A 04 08  	DB $1F, $4A, $04, $08
  42++E398 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  43++E39C 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  44++E3A0 1F 18 00 1C  	DB $1F, $18, $00, $1C
  45++E3A4 18 12 00 10  	DB $18, $12, $00, $10
  46++E3A8 1F 23 04 10  	DB $1F, $23, $04, $10
  47++E3AC 18 34 04 14  	DB $18, $34, $04, $14
  48++E3B0 1F 45 08 14  	DB $1F, $45, $08, $14
  49++E3B4 0C 56 08 18  	DB $0C, $56, $08, $18
  50++E3B8 1F 67 0C 18  	DB $1F, $67, $0C, $18
  51++E3BC 18 78 0C 1C  	DB $18, $78, $0C, $1C
  52++E3C0 1F 39 10 14  	DB $1F, $39, $10, $14
  53++E3C4 1F 59 14 18  	DB $1F, $59, $14, $18
  54++E3C8 1F 79 18 1C  	DB $1F, $79, $18, $1C
  55++E3CC 1F 19 10 1C  	DB $1F, $19, $10, $1C
  56++E3D0 10 0C 00 30  	DB $10, $0C, $00, $30
  57++E3D4 10 0A 04 30  	DB $10, $0A, $04, $30
  58++E3D8 10 AB 08 30  	DB $10, $AB, $08, $30
  59++E3DC 10 BC 0C 30  	DB $10, $BC, $0C, $30
  60++E3E0 10 99 20 24  	DB $10, $99, $20, $24
  61++E3E4 07 99 24 28  	DB $07, $99, $24, $28
  62++E3E8 09 99 28 2C  	DB $09, $99, $28, $2C
  63++E3EC 07 99 20 2C  	DB $07, $99, $20, $2C
  64++E3F0 05 BB 34 38  	DB $05, $BB, $34, $38
  65++E3F4 08 BB 38 3C  	DB $08, $BB, $38, $3C
  66++E3F8 07 BB 34 3C  	DB $07, $BB, $34, $3C
  67++E3FC 05 AA 40 44  	DB $05, $AA, $40, $44
  68++E400 08 AA 44 48  	DB $08, $AA, $44, $48
  69++E404 07 AA 40 48  	DB $07, $AA, $40, $48
  70++E408              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  71++E408              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  72++E408
  73++E408 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  74++E40C 5F 00 4A 04  	DB $5F, $00, $4A, $04
  75++E410 DF 33 33 17  	DB $DF, $33, $33, $17
  76++E414 9F 4A 00 04  	DB $9F, $4A, $00, $04
  77++E418 9F 33 33 17  	DB $9F, $33, $33, $17
  78++E41C 1F 00 4A 04  	DB $1F, $00, $4A, $04
  79++E420 1F 33 33 17  	DB $1F, $33, $33, $17
  80++E424 1F 4A 00 04  	DB $1F, $4A, $00, $04
  81++E428 5F 33 33 17  	DB $5F, $33, $33, $17
  82++E42C 3F 00 00 6B  	DB $3F, $00, $00, $6B
  83++E430 9F 29 29 5A  	DB $9F, $29, $29, $5A
  84++E434 1F 29 29 5A  	DB $1F, $29, $29, $5A
  85++E438 5F 37 37 28  	DB $5F, $37, $37, $28
  86++E43C
  87++E43C
  88++E43C              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  89++E43C              ShuttleType9Len: equ $ - ShuttleType9
  90++E43C
# file closed: ./Data/Ships/ShuttleType9.asm
 481+ E43C                                      include "Data/Ships/Shuttle_Mk_2.asm"
# file opened: ./Data/Ships/Shuttle_Mk_2.asm
   1++E43C 0F 09 C4     Shuttle_Mk_2:	DB $0F, $09, $C4
   2++E43F BA E4        	DW Shuttle_Mk_2Edges
   3++E441 70           	DB Shuttle_Mk_2EdgesSize
   4++E442 00 26        	DB $00, $26
   5++E444 66           	DB Shuttle_Mk_2VertSize
   6++E445 1C           	DB Shuttle_Mk_2EdgesCnt
   7++E446 00 00        	DB $00, $00
   8++E448 34           	DB Shuttle_Mk_2NormalsSize
   9++E449 0A 20 09     	DB $0A, $20, $09
  10++E44C 2A E5        	DW Shuttle_Mk_2Normals
  11++E44E 02 00        	DB $02, $00
  12++E450 54 E4        	DW Shuttle_Mk_2Vertices
  13++E452 00 00                                DB 0,0                      ; Type and Tactics
  14++E454
  15++E454
  16++E454 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  16++E458 23 01
  17++E45A 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  17++E45E 34 00
  18++E460 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  18++E464 15 00
  19++E466 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  19++E46A 26 11
  20++E46C 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  20++E470 37 22
  21++E472 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  21++E476 58 04
  22++E478 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  22++E47C 69 15
  23++E47E 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  23++E482 7A 26
  24++E484 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  24++E488 7B 34
  25++E48A 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  25++E48E BC 48
  26++E490 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  26++E494 9C 58
  27++E496 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  27++E49A AC 69
  28++E49C 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  28++E4A0 BC 7A
  29++E4A2 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  29++E4A6 CC CC
  30++E4A8 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  30++E4AC CC CC
  31++E4AE 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  31++E4B2 CC CC
  32++E4B4 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  32++E4B8 CC CC
  33++E4BA
  34++E4BA              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  35++E4BA
  36++E4BA
  37++E4BA
  38++E4BA 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  39++E4BE 1F 12 00 0C  	DB $1F, $12, $00, $0C
  40++E4C2 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E4C6 1F 30 00 04  	DB $1F, $30, $00, $04
  42++E4CA 1F 04 04 14  	DB $1F, $04, $04, $14
  43++E4CE 1F 05 08 14  	DB $1F, $05, $08, $14
  44++E4D2 1F 15 08 18  	DB $1F, $15, $08, $18
  45++E4D6 1F 16 0C 18  	DB $1F, $16, $0C, $18
  46++E4DA 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  47++E4DE 1F 27 10 1C  	DB $1F, $27, $10, $1C
  48++E4E2 1F 37 10 20  	DB $1F, $37, $10, $20
  49++E4E6 1F 34 04 20  	DB $1F, $34, $04, $20
  50++E4EA 1F 48 14 24  	DB $1F, $48, $14, $24
  51++E4EE 1F 58 14 28  	DB $1F, $58, $14, $28
  52++E4F2 1F 59 18 28  	DB $1F, $59, $18, $28
  53++E4F6 1F 69 18 2C  	DB $1F, $69, $18, $2C
  54++E4FA 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  55++E4FE 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  56++E502 1F 7B 20 30  	DB $1F, $7B, $20, $30
  57++E506 1F 4B 20 24  	DB $1F, $4B, $20, $24
  58++E50A 1F 8C 24 28  	DB $1F, $8C, $24, $28
  59++E50E 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  60++E512 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  61++E516 1F BC 30 24  	DB $1F, $BC, $30, $24
  62++E51A 0A CC 34 38  	DB $0A, $CC, $34, $38
  63++E51E 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  64++E522 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  65++E526 0A CC 40 34  	DB $0A, $CC, $40, $34
  66++E52A
  67++E52A              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  68++E52A
  69++E52A
  70++E52A              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  71++E52A
  72++E52A
  73++E52A 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  74++E52E DF 27 27 4E  	DB $DF, $27, $27, $4E
  75++E532 5F 27 27 4E  	DB $5F, $27, $27, $4E
  76++E536 1F 27 27 4E  	DB $1F, $27, $27, $4E
  77++E53A 1F 00 60 00  	DB $1F, $00, $60, $00
  78++E53E 9F 60 00 00  	DB $9F, $60, $00, $00
  79++E542 5F 00 60 00  	DB $5F, $00, $60, $00
  80++E546 1F 60 00 00  	DB $1F, $60, $00, $00
  81++E54A BF 42 42 16  	DB $BF, $42, $42, $16
  82++E54E FF 42 42 16  	DB $FF, $42, $42, $16
  83++E552 7F 42 42 16  	DB $7F, $42, $42, $16
  84++E556 3F 42 42 16  	DB $3F, $42, $42, $16
  85++E55A 3F 00 00 60  	DB $3F, $00, $00, $60
  86++E55E
  87++E55E
  88++E55E              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  89++E55E              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  90++E55E
# file closed: ./Data/Ships/Shuttle_Mk_2.asm
 482+ E55E                                      include "Data/Ships/Sidewinder.asm"
# file opened: ./Data/Ships/Sidewinder.asm
   1++E55E 00 10 81     Sidewinder:	DB $00, $10, $81
   2++E561 B2 E5        	DW SidewinderEdges
   3++E563 3C           	DB SidewinderEdgesSize
   4++E564 00 1E        	DB $00, $1E
   5++E566 3C           	DB SidewinderVertSize
   6++E567 0F           	DB SidewinderEdgesCnt
   7++E568 00 32        	DB $00, $32
   8++E56A 1C           	DB SidewinderNormalsSize
   9++E56B 14 46 25     	DB $14, $46, $25
  10++E56E EE E5        	DW SidewinderNormals
  11++E570 02 10        	DB $02, $10
  12++E572 76 E5        	DW SidewinderVertices
  13++E574 00 00                                DB 0,0                      ; Type and Tactics
  14++E576
  15++E576 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  15++E57A 10 54
  16++E57C 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  16++E580 20 65
  17++E582 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  17++E586 32 66
  18++E588 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  18++E58C 31 44
  19++E58E 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  19++E592 10 32
  20++E594 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  20++E598 43 65
  21++E59A 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  21++E59E 33 33
  22++E5A0 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  22++E5A4 33 33
  23++E5A6 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  23++E5AA 33 33
  24++E5AC 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  24++E5B0 33 33
  25++E5B2
  26++E5B2
  27++E5B2              SidewinderVertSize: equ $ - SidewinderVertices
  28++E5B2
  29++E5B2
  30++E5B2
  31++E5B2 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  32++E5B6 1F 62 04 08  	DB $1F, $62, $04, $08
  33++E5BA 1F 20 04 10  	DB $1F, $20, $04, $10
  34++E5BE 1F 10 00 10  	DB $1F, $10, $00, $10
  35++E5C2 1F 41 00 0C  	DB $1F, $41, $00, $0C
  36++E5C6 1F 31 0C 10  	DB $1F, $31, $0C, $10
  37++E5CA 1F 32 08 10  	DB $1F, $32, $08, $10
  38++E5CE 1F 43 0C 14  	DB $1F, $43, $0C, $14
  39++E5D2 1F 63 08 14  	DB $1F, $63, $08, $14
  40++E5D6 1F 65 04 14  	DB $1F, $65, $04, $14
  41++E5DA 1F 54 00 14  	DB $1F, $54, $00, $14
  42++E5DE 0F 33 18 1C  	DB $0F, $33, $18, $1C
  43++E5E2 0C 33 1C 20  	DB $0C, $33, $1C, $20
  44++E5E6 0C 33 18 24  	DB $0C, $33, $18, $24
  45++E5EA 0C 33 20 24  	DB $0C, $33, $20, $24
  46++E5EE
  47++E5EE              SidewinderEdgesSize: equ $ - SidewinderEdges
  48++E5EE
  49++E5EE
  50++E5EE              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  51++E5EE
  52++E5EE
  53++E5EE 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  54++E5F2 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  55++E5F6 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  56++E5FA 3F 00 00 70  	DB $3F, $00, $00, $70
  57++E5FE DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  58++E602 5F 00 20 08  	DB $5F, $00, $20, $08
  59++E606 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  60++E60A
  61++E60A
  62++E60A              SidewinderNormalsSize: equ $ - SidewinderNormals
  63++E60A              SidewinderLen: equ $ - Sidewinder
  64++E60A
# file closed: ./Data/Ships/Sidewinder.asm
 483+ E60A                                      include "Data/Ships/Splinter.asm"
# file opened: ./Data/Ships/Splinter.asm
   1++E60A B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E60D 3A E6                                DW SplinterEdges
   3++E60F 18                                   DB SplinterEdgesSize
   4++E610 00 16                                DB $00, $16
   5++E612 18                                   DB SplinterVertSize
   6++E613 06                                   DB SplinterEdgesCnt
   7++E614 00 00                                DB $00, $00
   8++E616 10                                   DB SplinterNormalsSize
   9++E617 08 14 0A                             DB $08, $14, $0A
  10++E61A 52 E6                                DW SplinterNormals
  11++E61C 05 00                                DB $05, $00
  12++E61E 22 E6                                DW SplinterVertices
  13++E620 00 00                                DB 0,0                      ; Type and Tactics
  14++E622
  15++E622 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  15++E626 12 33
  16++E628 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  16++E62C 02 33
  17++E62E 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  17++E632 01 33
  18++E634 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  18++E638 01 22
  19++E63A              SplinterVertSize:       equ $ - SplinterVertices
  20++E63A 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  21++E63E 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E642 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E646 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E64A 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E64E 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E652              SplinterEdgesSize:      equ $ - SplinterEdges
  27++E652              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  28++E652 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  29++E656 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E65A 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E65E 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E662              SplinterNormalsSize:    equ $ - SplinterNormals
  33++E662              SplinterLen:            equ $ - Splinter
  34++E662
# file closed: ./Data/Ships/Splinter.asm
 484+ E662                                      include "Data/Ships/TestVector.asm"
# file opened: ./Data/Ships/TestVector.asm
   1++E662 03 41 23     TestVector:             DB $03, $41, $23
   2++E665 A4 E6                                DW TestVectorEdges
   3++E667 10                                   DB TestVectorEdgesSize
   4++E668 54 2A                                DB $54,$2A
   5++E66A 2A                                   DB TestVectorVertSize
   6++E66B 04                                   DB TestVectorEdgesCnt
   7++E66C 00 00                                DB $00,$00
   8++E66E 10                                   DB TestVectorNormalsSize
   9++E66F 32 96 1C                             DB $32,$96,$1C
  10++E672 B4 E6                                DW TestVectorNormals
  11++E674 04 01                                DB $04,$01
  12++E676 7A E6                                DW TestVectorVertices
  13++E678 00 00                                DB 0,0                      ; Type and Tactics
  14++E67A
  15++E67A 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  15++E67E 00 00
  16++E680 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  16++E684 00 00
  17++E686 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  17++E68A 01 01
  18++E68C 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  18++E690 01 01
  19++E692 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  19++E696 02 02
  20++E698 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  20++E69C 02 02
  21++E69E 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  21++E6A2 03 03
  22++E6A4              TestVectorVertSize      equ $  - TestVectorVertices
  23++E6A4 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  24++E6A8 1F 00 08 0C                          DB $1F,$00,$08,$0C
  25++E6AC 1F 00 10 14                          DB $1F,$00,$10,$14
  26++E6B0 1F 00 18 18                          DB $1F,$00,$18,$18
  27++E6B4              TestVectorEdgesSize     equ $  - TestVectorEdges
  28++E6B4              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  29++E6B4              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  30++E6B4 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  31++E6B8 1F 10 00 00                          DB $1F,$10,$00,$00
  32++E6BC 1F 00 00 10                          DB $1F,$00,$00,$10
  33++E6C0 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E6C4              TestVectorNormalsSize   equ $  - TestVectorNormals
  35++E6C4              TestVectorLen           equ $  - TestVector
  36++E6C4
# file closed: ./Data/Ships/TestVector.asm
 485+ E6C4                                      include "Data/Ships/Thargoid.asm"
# file opened: ./Data/Ships/Thargoid.asm
   1++E6C4 00 26 49     Thargoid:	DB $00, $26, $49
   2++E6C7 54 E7                    DW ThargoidEdges
   3++E6C9 68                       DB ThargoidEdgesSize
   4++E6CA 3C 26                    DB $3C, $26
   5++E6CC 78                       DB ThargoidVertSize
   6++E6CD 1A                       DB ThargoidEdgesCnt
   7++E6CE 01 F4                    DB $01, $F4
   8++E6D0 28                       DB ThargoidNormalsSize
   9++E6D1 37 F0 27                 DB $37, $F0, $27
  10++E6D4 BC E7                    DW ThargoidNormals
  11++E6D6 02 16                    DB $02, $16
  12++E6D8 DC E6                    DW ThargoidVertices
  13++E6DA 00 00                    DB 0,0                      ; Type and Tactics
  14++E6DC
  15++E6DC 20 30 30 5F  ThargoidVertices:	DB $20, $30, $30, $5F, $40, $88
  15++E6E0 40 88
  16++E6E2 20 44 00 5F                      DB $20, $44, $00, $5F, $10, $44
  16++E6E6 10 44
  17++E6E8 20 30 30 7F                      DB $20, $30, $30, $7F, $21, $44
  17++E6EC 21 44
  18++E6EE 20 00 44 3F                      DB $20, $00, $44, $3F, $32, $44
  18++E6F2 32 44
  19++E6F4 20 30 30 3F                      DB $20, $30, $30, $3F, $43, $55
  19++E6F8 43 55
  20++E6FA 20 44 00 1F                      DB $20, $44, $00, $1F, $54, $66
  20++E6FE 54 66
  21++E700 20 30 30 1F                      DB $20, $30, $30, $1F, $64, $77
  21++E704 64 77
  22++E706 20 00 44 1F                      DB $20, $00, $44, $1F, $74, $88
  22++E70A 74 88
  23++E70C 18 74 74 DF                      DB $18, $74, $74, $DF, $80, $99
  23++E710 80 99
  24++E712 18 A4 00 DF                      DB $18, $A4, $00, $DF, $10, $99
  24++E716 10 99
  25++E718 18 74 74 FF                      DB $18, $74, $74, $FF, $21, $99
  25++E71C 21 99
  26++E71E 18 00 A4 BF                      DB $18, $00, $A4, $BF, $32, $99
  26++E722 32 99
  27++E724 18 74 74 BF                      DB $18, $74, $74, $BF, $53, $99
  27++E728 53 99
  28++E72A 18 A4 00 9F                      DB $18, $A4, $00, $9F, $65, $99
  28++E72E 65 99
  29++E730 18 74 74 9F                      DB $18, $74, $74, $9F, $76, $99
  29++E734 76 99
  30++E736 18 00 A4 9F                      DB $18, $00, $A4, $9F, $87, $99
  30++E73A 87 99
  31++E73C 18 40 50 9E                      DB $18, $40, $50, $9E, $99, $99
  31++E740 99 99
  32++E742 18 40 50 BE                      DB $18, $40, $50, $BE, $99, $99
  32++E746 99 99
  33++E748 18 40 50 FE                      DB $18, $40, $50, $FE, $99, $99
  33++E74C 99 99
  34++E74E 18 40 50 DE                      DB $18, $40, $50, $DE, $99, $99
  34++E752 99 99
  35++E754
  36++E754              ThargoidVertSize: equ $ - ThargoidVertices
  37++E754
  38++E754
  39++E754
  40++E754 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C
  41++E758 1F 40 00 04  	DB $1F, $40, $00, $04
  42++E75C 1F 41 04 08  	DB $1F, $41, $04, $08
  43++E760 1F 42 08 0C  	DB $1F, $42, $08, $0C
  44++E764 1F 43 0C 10  	DB $1F, $43, $0C, $10
  45++E768 1F 54 10 14  	DB $1F, $54, $10, $14
  46++E76C 1F 64 14 18  	DB $1F, $64, $14, $18
  47++E770 1F 74 18 1C  	DB $1F, $74, $18, $1C
  48++E774 1F 80 00 20  	DB $1F, $80, $00, $20
  49++E778 1F 10 04 24  	DB $1F, $10, $04, $24
  50++E77C 1F 21 08 28  	DB $1F, $21, $08, $28
  51++E780 1F 32 0C 2C  	DB $1F, $32, $0C, $2C
  52++E784 1F 53 10 30  	DB $1F, $53, $10, $30
  53++E788 1F 65 14 34  	DB $1F, $65, $14, $34
  54++E78C 1F 76 18 38  	DB $1F, $76, $18, $38
  55++E790 1F 87 1C 3C  	DB $1F, $87, $1C, $3C
  56++E794 1F 98 20 3C  	DB $1F, $98, $20, $3C
  57++E798 1F 90 20 24  	DB $1F, $90, $20, $24
  58++E79C 1F 91 24 28  	DB $1F, $91, $24, $28
  59++E7A0 1F 92 28 2C  	DB $1F, $92, $28, $2C
  60++E7A4 1F 93 2C 30  	DB $1F, $93, $2C, $30
  61++E7A8 1F 95 30 34  	DB $1F, $95, $30, $34
  62++E7AC 1F 96 34 38  	DB $1F, $96, $34, $38
  63++E7B0 1F 97 38 3C  	DB $1F, $97, $38, $3C
  64++E7B4 1E 99 40 44  	DB $1E, $99, $40, $44
  65++E7B8 1E 99 48 4C  	DB $1E, $99, $48, $4C
  66++E7BC
  67++E7BC              ThargoidEdgesSize: equ $ - ThargoidEdges
  68++E7BC
  69++E7BC              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  70++E7BC
  71++E7BC 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  72++E7C0 7F 67 3C 19  	DB $7F, $67, $3C, $19
  73++E7C4 7F 67 19 3C  	DB $7F, $67, $19, $3C
  74++E7C8 3F 67 19 3C  	DB $3F, $67, $19, $3C
  75++E7CC 1F 40 00 00  	DB $1F, $40, $00, $00
  76++E7D0 3F 67 3C 19  	DB $3F, $67, $3C, $19
  77++E7D4 1F 67 3C 19  	DB $1F, $67, $3C, $19
  78++E7D8 1F 67 19 3C  	DB $1F, $67, $19, $3C
  79++E7DC 5F 67 19 3C  	DB $5F, $67, $19, $3C
  80++E7E0 9F 30 00 00  	DB $9F, $30, $00, $00
  81++E7E4
  82++E7E4
  83++E7E4              ThargoidNormalsSize: equ $ - ThargoidNormals
  84++E7E4              ThargoidLen: equ $ - Thargoid
  85++E7E4
# file closed: ./Data/Ships/Thargoid.asm
 486+ E7E4                                      include "Data/Ships/Thargon.asm"
# file opened: ./Data/Ships/Thargon.asm
   1++E7E4 F0 06 40     Thargon:	DB $F0, $06, $40
   2++E7E7 38 E8        	DW ThargonEdges
   3++E7E9 3C           	DB ThargonEdgesSize
   4++E7EA 00 12        	DB $00, $12
   5++E7EC 3C           	DB ThargonVertSize
   6++E7ED 0F           	DB ThargonEdgesCnt
   7++E7EE 00 32        	DB $00, $32
   8++E7F0 1C           	DB ThargonNormalsSize
   9++E7F1 14 14 1E     	DB $14, $14, $1E
  10++E7F4 74 E8        	DW ThargonNormals
  11++E7F6 02 10        	DB $02, $10
  12++E7F8 FC E7        	DW ThargonVertices
  13++E7FA 00 00                                DB 0,0                      ; Type and Tactics
  14++E7FC
  15++E7FC
  16++E7FC 09 00 28 9F  ThargonVertices:	DB $09, $00, $28, $9F, $01, $55
  16++E800 01 55
  17++E802 09 26 0C DF  	DB $09, $26, $0C, $DF, $01, $22
  17++E806 01 22
  18++E808 09 18 20 FF  	DB $09, $18, $20, $FF, $02, $33
  18++E80C 02 33
  19++E80E 09 18 20 BF  	DB $09, $18, $20, $BF, $03, $44
  19++E812 03 44
  20++E814 09 26 0C 9F  	DB $09, $26, $0C, $9F, $04, $55
  20++E818 04 55
  21++E81A 09 00 08 3F  	DB $09, $00, $08, $3F, $15, $66
  21++E81E 15 66
  22++E820 09 0A 0F 7F  	DB $09, $0A, $0F, $7F, $12, $66
  22++E824 12 66
  23++E826 09 06 1A 7F  	DB $09, $06, $1A, $7F, $23, $66
  23++E82A 23 66
  24++E82C 09 06 1A 3F  	DB $09, $06, $1A, $3F, $34, $66
  24++E830 34 66
  25++E832 09 0A 0F 3F  	DB $09, $0A, $0F, $3F, $45, $66
  25++E836 45 66
  26++E838
  27++E838              ThargonVertSize: equ $ - ThargonVertices
  28++E838
  29++E838
  30++E838 1F 10 00 04  ThargonEdges:	DB $1F, $10, $00, $04
  31++E83C 1F 20 04 08  	DB $1F, $20, $04, $08
  32++E840 1F 30 08 0C  	DB $1F, $30, $08, $0C
  33++E844 1F 40 0C 10  	DB $1F, $40, $0C, $10
  34++E848 1F 50 00 10  	DB $1F, $50, $00, $10
  35++E84C 1F 51 00 14  	DB $1F, $51, $00, $14
  36++E850 1F 21 04 18  	DB $1F, $21, $04, $18
  37++E854 1F 32 08 1C  	DB $1F, $32, $08, $1C
  38++E858 1F 43 0C 20  	DB $1F, $43, $0C, $20
  39++E85C 1F 54 10 24  	DB $1F, $54, $10, $24
  40++E860 1F 61 14 18  	DB $1F, $61, $14, $18
  41++E864 1F 62 18 1C  	DB $1F, $62, $18, $1C
  42++E868 1F 63 1C 20  	DB $1F, $63, $1C, $20
  43++E86C 1F 64 20 24  	DB $1F, $64, $20, $24
  44++E870 1F 65 24 14  	DB $1F, $65, $24, $14
  45++E874
  46++E874              ThargonEdgesSize: equ $ - ThargonEdges
  47++E874
  48++E874
  49++E874              ThargonEdgesCnt: equ ThargonEdgesSize/4
  50++E874
  51++E874
  52++E874 9F 24 00 00  ThargonNormals:	DB $9F, $24, $00, $00
  53++E878 5F 14 05 07  	DB $5F, $14, $05, $07
  54++E87C 7F 2E 2A 0E  	DB $7F, $2E, $2A, $0E
  55++E880 3F 24 00 68  	DB $3F, $24, $00, $68
  56++E884 3F 2E 2A 0E  	DB $3F, $2E, $2A, $0E
  57++E888 1F 14 05 07  	DB $1F, $14, $05, $07
  58++E88C 1F 24 00 00  	DB $1F, $24, $00, $00
  59++E890
  60++E890
  61++E890              ThargonNormalsSize: equ $ - ThargonNormals
  62++E890              ThargonLen: equ $ - Thargon
  63++E890
# file closed: ./Data/Ships/Thargon.asm
 487+ E890                                      include "Data/Ships/TransportType10.asm"
# file opened: ./Data/Ships/TransportType10.asm
   1++E890 00 09 C4     TransportType10:	DB $00, $09, $C4
   2++E893 86 E9        	DW TransportType10Edges
   3++E895 B8           	DB TransportType10EdgesSize
   4++E896 30 1A        	DB $30, $1A
   5++E898 DE           	DB TransportType10VertSize
   6++E899 2E           	DB TransportType10EdgesCnt
   7++E89A 00 00        	DB $00, $00
   8++E89C 38           	DB TransportType10NormalsSize
   9++E89D 10 20 0A     	DB $10, $20, $0A
  10++E8A0 3E EA        	DW TransportType10Normals
  11++E8A2 02 00        	DB $02, $00
  12++E8A4 A8 E8        	DW TransportType10Vertices
  13++E8A6 00 00                                DB 0,0                      ; Type and Tactics
  14++E8A8
  15++E8A8 00 0A 1A 3F  TransportType10Vertices:	DB $00, $0A, $1A, $3F, $06, $77
  15++E8AC 06 77
  16++E8AE 19 04 1A BF  	DB $19, $04, $1A, $BF, $01, $77
  16++E8B2 01 77
  17++E8B4 1C 03 1A FF  	DB $1C, $03, $1A, $FF, $01, $22
  17++E8B8 01 22
  18++E8BA 19 08 1A FF  	DB $19, $08, $1A, $FF, $02, $33
  18++E8BE 02 33
  19++E8C0 1A 08 1A 7F  	DB $1A, $08, $1A, $7F, $03, $44
  19++E8C4 03 44
  20++E8C6 1D 03 1A 7F  	DB $1D, $03, $1A, $7F, $04, $55
  20++E8CA 04 55
  21++E8CC 1A 04 1A 3F  	DB $1A, $04, $1A, $3F, $05, $66
  21++E8D0 05 66
  22++E8D2 00 06 0C 13  	DB $00, $06, $0C, $13, $FF, $FF
  22++E8D6 FF FF
  23++E8D8 1E 01 0C DF  	DB $1E, $01, $0C, $DF, $17, $89
  23++E8DC 17 89
  24++E8DE 21 08 0C DF  	DB $21, $08, $0C, $DF, $12, $39
  24++E8E2 12 39
  25++E8E4 21 08 0C 5F  	DB $21, $08, $0C, $5F, $34, $5A
  25++E8E8 34 5A
  26++E8EA 1E 01 0C 5F  	DB $1E, $01, $0C, $5F, $56, $AB
  26++E8EE 56 AB
  27++E8F0 0B 02 1E DF  	DB $0B, $02, $1E, $DF, $89, $CD
  27++E8F4 89 CD
  28++E8F6 0D 08 1E DF  	DB $0D, $08, $1E, $DF, $39, $DD
  28++E8FA 39 DD
  29++E8FC 0E 08 1E 5F  	DB $0E, $08, $1E, $5F, $3A, $DD
  29++E900 3A DD
  30++E902 0B 02 1E 5F  	DB $0B, $02, $1E, $5F, $AB, $CD
  30++E906 AB CD
  31++E908 05 06 02 87  	DB $05, $06, $02, $87, $77, $77
  31++E90C 77 77
  32++E90E 12 03 02 87  	DB $12, $03, $02, $87, $77, $77
  32++E912 77 77
  33++E914 05 07 07 A7  	DB $05, $07, $07, $A7, $77, $77
  33++E918 77 77
  34++E91A 12 04 07 A7  	DB $12, $04, $07, $A7, $77, $77
  34++E91E 77 77
  35++E920 0B 06 0E A7  	DB $0B, $06, $0E, $A7, $77, $77
  35++E924 77 77
  36++E926 0B 05 07 A7  	DB $0B, $05, $07, $A7, $77, $77
  36++E92A 77 77
  37++E92C 05 07 0E 27  	DB $05, $07, $0E, $27, $66, $66
  37++E930 66 66
  38++E932 12 04 0E 27  	DB $12, $04, $0E, $27, $66, $66
  38++E936 66 66
  39++E938 0B 05 07 27  	DB $0B, $05, $07, $27, $66, $66
  39++E93C 66 66
  40++E93E 05 06 03 27  	DB $05, $06, $03, $27, $66, $66
  40++E942 66 66
  41++E944 12 03 03 27  	DB $12, $03, $03, $27, $66, $66
  41++E948 66 66
  42++E94A 0B 04 08 07  	DB $0B, $04, $08, $07, $66, $66
  42++E94E 66 66
  43++E950 0B 05 03 27  	DB $0B, $05, $03, $27, $66, $66
  43++E954 66 66
  44++E956 10 08 0D E6  	DB $10, $08, $0D, $E6, $33, $33
  44++E95A 33 33
  45++E95C 10 08 10 C6  	DB $10, $08, $10, $C6, $33, $33
  45++E960 33 33
  46++E962 11 08 0D 66  	DB $11, $08, $0D, $66, $33, $33
  46++E966 33 33
  47++E968 11 08 10 46  	DB $11, $08, $10, $46, $33, $33
  47++E96C 33 33
  48++E96E 0D 03 1A E8  	DB $0D, $03, $1A, $E8, $00, $00
  48++E972 00 00
  49++E974 0D 03 1A 68  	DB $0D, $03, $1A, $68, $00, $00
  49++E978 00 00
  50++E97A 09 03 1A 25  	DB $09, $03, $1A, $25, $00, $00
  50++E97E 00 00
  51++E980 08 03 1A A5  	DB $08, $03, $1A, $A5, $00, $00
  51++E984 00 00
  52++E986
  53++E986              TransportType10VertSize: equ $ - TransportType10Vertices
  54++E986
  55++E986
  56++E986
  57++E986 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04
  58++E98A 1F 01 04 08  	DB $1F, $01, $04, $08
  59++E98E 1F 02 08 0C  	DB $1F, $02, $08, $0C
  60++E992 1F 03 0C 10  	DB $1F, $03, $0C, $10
  61++E996 1F 04 10 14  	DB $1F, $04, $10, $14
  62++E99A 1F 05 14 18  	DB $1F, $05, $14, $18
  63++E99E 1F 06 00 18  	DB $1F, $06, $00, $18
  64++E9A2 10 67 00 1C  	DB $10, $67, $00, $1C
  65++E9A6 1F 17 04 20  	DB $1F, $17, $04, $20
  66++E9AA 0B 12 08 24  	DB $0B, $12, $08, $24
  67++E9AE 1F 23 0C 24  	DB $1F, $23, $0C, $24
  68++E9B2 1F 34 10 28  	DB $1F, $34, $10, $28
  69++E9B6 0B 45 14 28  	DB $0B, $45, $14, $28
  70++E9BA 1F 56 18 2C  	DB $1F, $56, $18, $2C
  71++E9BE 11 78 1C 20  	DB $11, $78, $1C, $20
  72++E9C2 11 19 20 24  	DB $11, $19, $20, $24
  73++E9C6 11 5A 28 2C  	DB $11, $5A, $28, $2C
  74++E9CA 11 6B 1C 2C  	DB $11, $6B, $1C, $2C
  75++E9CE 13 BC 1C 3C  	DB $13, $BC, $1C, $3C
  76++E9D2 13 8C 1C 30  	DB $13, $8C, $1C, $30
  77++E9D6 10 89 20 30  	DB $10, $89, $20, $30
  78++E9DA 1F 39 24 34  	DB $1F, $39, $24, $34
  79++E9DE 1F 3A 28 38  	DB $1F, $3A, $28, $38
  80++E9E2 10 AB 2C 3C  	DB $10, $AB, $2C, $3C
  81++E9E6 1F 9D 30 34  	DB $1F, $9D, $30, $34
  82++E9EA 1F 3D 34 38  	DB $1F, $3D, $34, $38
  83++E9EE 1F AD 38 3C  	DB $1F, $AD, $38, $3C
  84++E9F2 1F CD 30 3C  	DB $1F, $CD, $30, $3C
  85++E9F6 07 77 40 44  	DB $07, $77, $40, $44
  86++E9FA 07 77 48 4C  	DB $07, $77, $48, $4C
  87++E9FE 07 77 4C 50  	DB $07, $77, $4C, $50
  88++EA02 07 77 48 50  	DB $07, $77, $48, $50
  89++EA06 07 77 50 54  	DB $07, $77, $50, $54
  90++EA0A 07 66 58 5C  	DB $07, $66, $58, $5C
  91++EA0E 07 66 5C 60  	DB $07, $66, $5C, $60
  92++EA12 07 66 60 58  	DB $07, $66, $60, $58
  93++EA16 07 66 64 68  	DB $07, $66, $64, $68
  94++EA1A 07 66 68 6C  	DB $07, $66, $68, $6C
  95++EA1E 07 66 64 6C  	DB $07, $66, $64, $6C
  96++EA22 07 66 6C 70  	DB $07, $66, $6C, $70
  97++EA26 06 33 74 78  	DB $06, $33, $74, $78
  98++EA2A 06 33 7C 80  	DB $06, $33, $7C, $80
  99++EA2E 08 00 84 88  	DB $08, $00, $84, $88
 100++EA32 05 00 88 8C  	DB $05, $00, $88, $8C
 101++EA36 05 00 8C 90  	DB $05, $00, $8C, $90
 102++EA3A 05 00 90 84  	DB $05, $00, $90, $84
 103++EA3E
 104++EA3E              TransportType10EdgesSize: equ $ - TransportType10Edges
 105++EA3E
 106++EA3E
 107++EA3E              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 108++EA3E
 109++EA3E
 110++EA3E 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67
 111++EA42 BF 6F 30 07  	DB $BF, $6F, $30, $07
 112++EA46 FF 69 3F 15  	DB $FF, $69, $3F, $15
 113++EA4A 5F 00 22 00  	DB $5F, $00, $22, $00
 114++EA4E 7F 69 3F 15  	DB $7F, $69, $3F, $15
 115++EA52 3F 6F 30 07  	DB $3F, $6F, $30, $07
 116++EA56 1F 08 20 03  	DB $1F, $08, $20, $03
 117++EA5A 9F 08 20 03  	DB $9F, $08, $20, $03
 118++EA5E 93 08 22 0B  	DB $93, $08, $22, $0B
 119++EA62 9F 4B 20 4F  	DB $9F, $4B, $20, $4F
 120++EA66 1F 4B 20 4F  	DB $1F, $4B, $20, $4F
 121++EA6A 13 08 22 0B  	DB $13, $08, $22, $0B
 122++EA6E 1F 00 26 11  	DB $1F, $00, $26, $11
 123++EA72 1F 00 00 79  	DB $1F, $00, $00, $79
 124++EA76
 125++EA76
 126++EA76              TransportType10NormalsSize: equ $ - TransportType10Normals
 127++EA76              TransportType10Len: equ $ - TransportType10
 128++EA76
# file closed: ./Data/Ships/TransportType10.asm
 488+ EA76                                      include "Data/Ships/Viper.asm"
# file opened: ./Data/Ships/Viper.asm
   1++EA76              ; Mapping Orginal to new
   2++EA76              ; 0    => 0
   3++EA76              ; 1-2  => 1-2
   4++EA76              ; 3    => EQU Edges
   5++EA76              ; 4    => EQU Normals
   6++EA76              ; 5    => EQU EdgesCnt
   7++EA76              ; 6    => 6
   8++EA76              ; 7    => 7
   9++EA76              ; 8    => EQU VertSize
  10++EA76              ; 9    => EQU EdgesCnt
  11++EA76              ; 10-11=> 10-11
  12++EA76              ; 12   => EQU  NormalsSize
  13++EA76              ; 13   => 13
  14++EA76              ; 14   => 14
  15++EA76              ; 15   => 15
  16++EA76              ; 16   => EQU Edges
  17++EA76              ; 17   => EQU Normals
  18++EA76              ; 18   => 18
  19++EA76              ; 19   => 19
  20++EA76              ;\ -> &5C93  \ Viper = Type 16
  21++EA76 00 F9 15     Viper:                  DB $00, $F9, $15
  22++EA79 E8 EA                                DW ViperEdges
  23++EA7B 50                                   DB ViperEdgesSize
  24++EA7C 00 2A                                DB $00,$2A
  25++EA7E 5A                                   DB ViperVertSize
  26++EA7F 14                                   DB ViperEdgesCnt
  27++EA80 00 00                                DB $00,$00
  28++EA82 1C                                   DB ViperNormalsSize
  29++EA83 17 64 20                             DB $17, $64, $20
  30++EA86 38 EB                                DW ViperNormals
  31++EA88 01 11                                DB $01, $11
  32++EA8A 8E EA                                DW ViperVertices
  33++EA8C 00 00                                DB 0,0                      ; Type and Tactics
  34++EA8E
  35++EA8E 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  35++EA92 21 43
  36++EA94 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  36++EA98 10 22
  37++EA9A 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  37++EA9E 43 55
  38++EAA0 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  38++EAA4 42 66
  39++EAA6 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  39++EAAA 31 66
  40++EAAC 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  40++EAB0 54 66
  41++EAB2 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  41++EAB6 35 66
  42++EAB8 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  42++EABC 20 66
  43++EABE 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  43++EAC2 10 66
  44++EAC4 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  44++EAC8 66 66
  45++EACA 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  45++EACE 66 66
  46++EAD0 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  46++EAD4 66 66
  47++EAD6 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  47++EADA 66 66
  48++EADC 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  48++EAE0 66 66
  49++EAE2 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  49++EAE6 66 66
  50++EAE8              ViperVertSize           equ $  - ViperVertices
  51++EAE8 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  51++EAEC 1E 21 00 04
  52++EAF0 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  52++EAF4 1F 31 00 10
  53++EAF8 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  53++EAFC 1E 10 04 20
  54++EB00 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  54++EB04 1E 53 08 18
  55++EB08 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  55++EB0C 1E 65 14 18
  56++EB10 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  56++EB14 1E 63 10 18
  57++EB18 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  57++EB1C 1E 46 0C 14
  58++EB20 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  58++EB24 12 66 24 34
  59++EB28 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  59++EB2C 12 66 28 38
  60++EB30 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  60++EB34 10 66 30 34
  61++EB38              ViperEdgesSize          equ $  - ViperEdges
  62++EB38              ViperEdgesCnt           equ ViperEdgesSize/4
  63++EB38 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  63++EB3C 9F 16 21 0B
  64++EB40 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  64++EB44 DF 16 21 0B
  65++EB48 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  65++EB4C 5F 00 20 00
  66++EB50 3F 00 00 30                          DB $3F, $00, $00, $30
  67++EB54              ViperNormalsSize        equ $  - ViperNormals
  68++EB54              ViperLen                equ $  - Viper
  69++EB54
# file closed: ./Data/Ships/Viper.asm
 489+ EB54                                      include "Data/Ships/Worm.asm"
# file opened: ./Data/Ships/Worm.asm
   1++EB54 00 26 49     Worm:	                DB $00, $26, $49
   2++EB57 A8 EB                                DW WormEdges
   3++EB59 40                                   DB WormEdgesSize
   4++EB5A 00 12                                DB $00, $12
   5++EB5C 3C                                   DB WormVertSize
   6++EB5D 10                                   DB WormEdgesCnt
   7++EB5E 00 00                                DB $00, $00
   8++EB60 20                                   DB WormNormalsSize
   9++EB61 13 1E 17                             DB $13, $1E, $17
  10++EB64 E8 EB                                DW WormNormals
  11++EB66 03 08                                DB $03, $08
  12++EB68 6C EB                                DW WormVertices
  13++EB6A 00 00                                DB 0,0                      ; Type and Tactics
  14++EB6C 0A 0A 23 5F  WormVertices:	DB $0A, $0A, $23, $5F, $02, $77
  14++EB70 02 77
  15++EB72 0A 0A 23 DF  	DB $0A, $0A, $23, $DF, $03, $77
  15++EB76 03 77
  16++EB78 05 06 0F 1F  	DB $05, $06, $0F, $1F, $01, $24
  16++EB7C 01 24
  17++EB7E 05 06 0F 9F  	DB $05, $06, $0F, $9F, $01, $35
  17++EB82 01 35
  18++EB84 0F 0A 19 5F  	DB $0F, $0A, $19, $5F, $24, $77
  18++EB88 24 77
  19++EB8A 0F 0A 19 DF  	DB $0F, $0A, $19, $DF, $35, $77
  19++EB8E 35 77
  20++EB90 1A 0A 19 7F  	DB $1A, $0A, $19, $7F, $46, $77
  20++EB94 46 77
  21++EB96 1A 0A 19 FF  	DB $1A, $0A, $19, $FF, $56, $77
  21++EB9A 56 77
  22++EB9C 08 0E 19 3F  	DB $08, $0E, $19, $3F, $14, $66
  22++EBA0 14 66
  23++EBA2 08 0E 19 BF  	DB $08, $0E, $19, $BF, $15, $66
  23++EBA6 15 66
  24++EBA8
  25++EBA8              WormVertSize: equ $ - WormVertices
  26++EBA8
  27++EBA8
  28++EBA8 1F 07 00 04  WormEdges:	DB $1F, $07, $00, $04
  29++EBAC 1F 37 04 14  	DB $1F, $37, $04, $14
  30++EBB0 1F 57 14 1C  	DB $1F, $57, $14, $1C
  31++EBB4 1F 67 1C 18  	DB $1F, $67, $1C, $18
  32++EBB8 1F 47 18 10  	DB $1F, $47, $18, $10
  33++EBBC 1F 27 10 00  	DB $1F, $27, $10, $00
  34++EBC0 1F 02 00 08  	DB $1F, $02, $00, $08
  35++EBC4 1F 03 04 0C  	DB $1F, $03, $04, $0C
  36++EBC8 1F 24 10 08  	DB $1F, $24, $10, $08
  37++EBCC 1F 35 14 0C  	DB $1F, $35, $14, $0C
  38++EBD0 1F 14 08 20  	DB $1F, $14, $08, $20
  39++EBD4 1F 46 20 18  	DB $1F, $46, $20, $18
  40++EBD8 1F 15 0C 24  	DB $1F, $15, $0C, $24
  41++EBDC 1F 56 24 1C  	DB $1F, $56, $24, $1C
  42++EBE0 1F 01 08 0C  	DB $1F, $01, $08, $0C
  43++EBE4 1F 16 20 24  	DB $1F, $16, $20, $24
  44++EBE8
  45++EBE8              WormEdgesSize: equ $ - WormEdges
  46++EBE8
  47++EBE8
  48++EBE8              WormEdgesCnt: equ WormEdgesSize/4
  49++EBE8
  50++EBE8
  51++EBE8 1F 00 58 46  WormNormals:	DB $1F, $00, $58, $46
  52++EBEC 1F 00 45 0E  	DB $1F, $00, $45, $0E
  53++EBF0 1F 46 42 23  	DB $1F, $46, $42, $23
  54++EBF4 9F 46 42 23  	DB $9F, $46, $42, $23
  55++EBF8 1F 40 31 0E  	DB $1F, $40, $31, $0E
  56++EBFC 9F 40 31 0E  	DB $9F, $40, $31, $0E
  57++EC00 3F 00 00 C8  	DB $3F, $00, $00, $C8
  58++EC04 5F 00 50 00  	DB $5F, $00, $50, $00
  59++EC08
  60++EC08
  61++EC08              WormNormalsSize: equ $ - WormNormals
  62++EC08              WormLen: equ $ - Worm
  63++EC08
# file closed: ./Data/Ships/Worm.asm
 490+ EC08                                      ENDIF
 491+ EC08
 492+ EC08
 493+ EC08              ; TODO Later reorg these offsets for better 16 bit read - Done
 494+ EC08              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 495+ EC08
 496+ EC08
 497+ EC08              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 498+ EC08              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 499+ EC08              ; Scoop: 0 = no scoop 1= scoop , anything more?
 500+ EC08              ; hull byte#1-2 area for missile lock, lo, hi
 501+ EC08              ; hull byte#3   edges data info offset lo
 502+ EC08              ; hull byte#4   faces data info offset lo
 503+ EC08              ; hull byte#5   4*maxlines+1 for ship lines stack
 504+ EC08              ; hull byte#6   gun vertex*4
 505+ EC08              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 506+ EC08              ; hull byte#8   vertices*6
 507+ EC08              ; hull byte#9	edge Count
 508+ EC08              ; hull bytes#10-11 bounty lo hi
 509+ EC08              ; hull byte#12  faces*4
 510+ EC08              ; hull byte#13  dot beyond distance
 511+ EC08              ; hull byte#14  energy
 512+ EC08              ; hull byte#15  speed (end of 4th row)
 513+ EC08              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 514+ EC08              ; hull byte#17  faces offset hi
 515+ EC08              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 516+ EC08              ; hull byte#19  laser|missile(=lower 3 bits)
 517+ EC08              ; hull byte#20  Added Vertices for 20,21
 518+ EC08
 519+ EC08              ; Optimised version to be applied to add data brought in to here:
 520+ EC08              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 521+ EC08              ; hull byte#1-2 area for missile lock, lo, hi
 522+ EC08              ; hull byte#3   edges data info offset lo
 523+ EC08              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 524+ EC08              ; hull byte#5   4*maxlines+1 for ship lines stack
 525+ EC08              ; hull byte#6   gun vertex*4
 526+ EC08              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 527+ EC08              ; hull byte#8   vertices*6
 528+ EC08              ; hull byte#9	edge Count
 529+ EC08              ; hull bytes#10-11 bounty lo hi
 530+ EC08              ; hull byte#12  faces*4
 531+ EC08              ; hull byte#13  dot beyond distance
 532+ EC08              ; hull byte#14  energy
 533+ EC08              ; hull byte#15  speed (end of 4th row)
 534+ EC08              ; hull byte#16  faces data info offset lo (was 4)
 535+ EC08              ; hull byte#17  faces offset hi
 536+ EC08              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 537+ EC08              ; hull bute#19  laser|missile(=lower 3 bits)
 538+ EC08              ; hull byte#20  Added Vertices for 20,21
 539+ EC08              ;
 540+ EC08              ; Vertex Data Structure
 541+ EC08              ; Byte 0 X1Lo
 542+ EC08              ; Byte 1 X1Hi
 543+ EC08              ; Byte 2 Y1Lo
 544+ EC08              ; Byte 3 Y1Hi
 545+ EC08              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 546+ EC08              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 547+ EC08              ;
 548+ EC08              ;
 549+ EC08              ; Edge Data Structure
 550+ EC08              ; Byte 0
 551+ EC08              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 552+ EC08              ; Byte 2 - Index to Vertex 1
 553+ EC08              ; Byte 3 - Index to Vertex 2
 554+ EC08              ;
 555+ EC08              ; Normal/Faces Data Structure
 556+ EC08              ;
 557+ EC08              ;
 558+ EC08              ;
 559+ EC08              ; Original Data:
 560+ EC08              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 561+ EC08              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 562+ EC08              ;		\ hull byte#1-2 area for missile lock, lo, hi
 563+ EC08              ;		\ hull byte#3   edges data info offset lo
 564+ EC08              ;		\ hull byte#4   faces data info offset lo
 565+ EC08              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 566+ EC08              ;		\ hull byte#6   gun vertex*4
 567+ EC08              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 568+ EC08              ;		\ hull byte#8   vertices*6
 569+ EC08              ;		\ hull bytes#10-11 bounty lo hi
 570+ EC08              ;		\ hull byte#12  faces*4
 571+ EC08              ;		\ hull byte#13  dot beyond distance
 572+ EC08              ;		\ hull byte#14  energy
 573+ EC08              ;		\ hull byte#15  speed (end of 4th row)
 574+ EC08              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 575+ EC08              ;		\ hull byte#17  faces offset hi
 576+ EC08              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 577+ EC08              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 578+ EC08              ; Corrected pointers
 579+ EC08              ; &565D \ Cargo cannister = Type 5
 580+ EC08              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 581+ EC08              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 582+ EC08              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 583+ EC08              ; Mapping Orginal to new
 584+ EC08              ; 0    => 0
 585+ EC08              ; 1-2  => 1-2
 586+ EC08              ; 3    => EQU Edges
 587+ EC08              ; 4    => EQU Normals
 588+ EC08              ; 5    => EQU EdgesCnt
 589+ EC08              ; 6    => 6
 590+ EC08              ; 7    => 7
 591+ EC08              ; 8    => EQU VertSize
 592+ EC08              ; 9    => EQU EdgesCnt
 593+ EC08              ; 10-11=> 10-11
 594+ EC08              ; 12   => EQU  NormalsSize
 595+ EC08              ; 13   => 13
 596+ EC08              ; 14   => 14
 597+ EC08              ; 15   => 15
 598+ EC08              ; 16   => EQU Edges
 599+ EC08              ; 17   => EQU Normals
 600+ EC08              ; 18   => 18
 601+ EC08              ; 19   => 19
# file closed: ./Data/ShipModels.asm
1058  EC08              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1059  EC08                  SLOT    SpritemembankAddr
1060  EC08                  PAGE    BankSPRITE
1061  EC08              	ORG     SpritemembankAddr, BankSPRITE
1062  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              glactic_pattern_1					equ 0
  19+ E000              glactic_hyper_pattern_1             equ 2
  20+ E000              local_pattern_1                     equ 4
  21+ E000              local_hyper_pattern_1               equ 6
  22+ E000
  23+ E000              spritecursoroffset					equ 17
  24+ E000
  25+ E000
  26+ E000
  27+ E000
  28+ E000              sprite_big:
  29+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  30+ E000              .SetAnchor:
  31+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  32+ E001 F5           	push	af									; save id for next few
  33+ E002 D5           	push	de
  34+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  35+ E006              ; write out X position bits 1 to 8
  36+ E006 79           	ld		a,c
  37+ E007 21 11 00         ld      hl,spritecursoroffset
  38+ E00A ED 31        	add		hl,a                                ; hl = full x position
  39+ E00C 7D           	ld		a,l
  40+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  41+ E010              ; write out Y position bits 1 to 8
  42+ E010 EB           	ex		de,hl								; de = full x position
  43+ E011 78           	ld		a,b
  44+ E012 21 11 00         ld      hl,spritecursoroffset
  45+ E015 ED 31        	add		hl,a
  46+ E017 7D           	ld		a,l                                 ; hl = full y position
  47+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  48+ E01B              ; write out MSB of X as its an anchor
  49+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  50+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  51+ E01F              ; write out sprite pattern
  52+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  53+ E020 7B           	ld		a,e
  54+ E021 F6 C0        	or		%11000000							;
  55+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  56+ E026              ; write out msb of y in h must be bit 0 only
  57+ E026 3E 00        	ld		a,%00000000							; big unified composite
  58+ E028 B4           	or		h									; MSB Y
  59+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  60+ E02C              .BigSprite1:
  61+ E02C F1           	pop		af
  62+ E02D 3C           	inc		a
  63+ E02E F5           	push	af
  64+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  65+ E032 3E 10        	ld		a,16
  66+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  67+ E037 AF           	xor 	a
  68+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  69+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  70+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
  71+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  72+ E043 3E 41        	ld		a,%01000001							; big unified composite
  73+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  74+ E048              .BigSprite2:
  75+ E048 F1           	pop		af
  76+ E049 3C           	inc		a
  77+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  78+ E04D AF           	xor		a
  79+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  80+ E051 3E 10        	ld		a,16
  81+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  82+ E056 AF           	xor		a
  83+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  84+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
  85+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  86+ E05F 3E 41        	ld		a,%01000001							; big unified composite
  87+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  88+ E064 C9           	ret
  89+ E065
  90+ E065              sprite_galactic_cursor:
  91+ E065              ; ">sprite_galactic_cursor BC = rowcol"
  92+ E065 16 00        	ld		d,galactic_cursor_sprite
  93+ E067 1E 00        	ld		e,0
  94+ E069 78           	ld		a,b
  95+ E06A C6 18        	add		a,galactic_chart_y_offset
  96+ E06C 47           	ld		b,a
  97+ E06D CD 00 E0     	call	sprite_big
  97+ E070
  98+ E070 C9           	ret
  99+ E071
 100+ E071              sprite_galactic_hyper_cursor:
 101+ E071              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 102+ E071 78           	ld		a,b
 103+ E072 C6 18        	add		a,galactic_chart_y_offset
 104+ E074 47           	ld		b,a
 105+ E075 16 04        	ld		d,galactic_hyper_sprite
 106+ E077 1E 03        	ld		e,3
 107+ E079 CD 00 E0     	call	sprite_big
 107+ E07C
 108+ E07C C9           	ret
 109+ E07D
 110+ E07D              sprite_ghc_move:
 111+ E07D 3E 04        	ld		a,galactic_hyper_sprite
 112+ E07F ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 113+ E082              ; write out X position bits 1 to 8
 114+ E082 79           	ld		a,c
 115+ E083 21 11 00         ld      hl,spritecursoroffset
 116+ E086 ED 31        	add		hl,a                                ; hl = full x position
 117+ E088 7D           	ld		a,l
 118+ E089 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 119+ E08C              ; write out Y position bits 1 to 8
 120+ E08C EB           	ex		de,hl								; de = full x position
 121+ E08D 78               ld      a,b
 122+ E08E C6 18        	add		a,galactic_chart_y_offset
 123+ E090 47           	ld		b,a
 124+ E091 78           	ld		a,b
 125+ E092 21 11 00         ld      hl,spritecursoroffset
 126+ E095 ED 31        	add		hl,a
 127+ E097 7D           	ld		a,l                                 ; hl = full y position
 128+ E098 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 129+ E09B              ; write out MSB of X as its an anchor
 130+ E09B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 131+ E09C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 132+ E09F              ; write out msb of y in h must be bit 0 only
 133+ E09F 3E 00        	ld		a,%00000000							; big unified composite
 134+ E0A1 B2           	or		d									; MSB Y
 135+ E0A2 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E0A5 C9               ret
 137+ E0A6
 138+ E0A6
 139+ E0A6              sprite_lhc_move:
 140+ E0A6              ;DBG:jp DBG
 141+ E0A6              ;DBX:
 142+ E0A6 3E 0A        	ld		a,local_hyper_sprite
 143+ E0A8 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 144+ E0AB              ; write out X position bits 1 to 8
 145+ E0AB 79           	ld		a,c
 146+ E0AC 21 11 00         ld      hl,spritecursoroffset
 147+ E0AF ED 31        	add		hl,a                                ; hl = full x position
 148+ E0B1 7D           	ld		a,l
 149+ E0B2 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 150+ E0B5              ; write out Y position bits 1 to 8
 151+ E0B5 EB           	ex		de,hl								; de = full x position
 152+ E0B6 78           	ld		a,b
 153+ E0B7 21 11 00         ld      hl,spritecursoroffset
 154+ E0BA ED 31        	add		hl,a
 155+ E0BC 7D           	ld		a,l                                 ; hl = full y position
 156+ E0BD ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 157+ E0C0              ; write out MSB of X as its an anchor
 158+ E0C0 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 159+ E0C1 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 160+ E0C4              ; write out msb of y in h must be bit 0 only
 161+ E0C4 3E 00        	ld		a,%00000000							; big unified composite
 162+ E0C6 B2           	or		d									; MSB Y
 163+ E0C7 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 164+ E0CA C9               ret
 165+ E0CB
 166+ E0CB              sprite_local_cursor:
 167+ E0CB              ; "sprite_local_cursor BC = rowcol"
 168+ E0CB 16 07        	ld		d,local_cursor_sprite
 169+ E0CD 1E 06        	ld		e,6
 170+ E0CF CD 00 E0     	call	sprite_big
 171+ E0D2 C9           	ret
 172+ E0D3
 173+ E0D3              sprite_local_hyper_cursor:
 174+ E0D3              ; "sprite_local_hyper_cursor BC = rowcol"
 175+ E0D3 16 0A        	ld		d,local_hyper_sprite
 176+ E0D5 1E 09        	ld		e,9
 177+ E0D7 CD 00 E0     	call	sprite_big
 178+ E0DA C9           	ret
 179+ E0DB
 180+ E0DB
 181+ E0DB              sprite_galactic_hide:
 182+ E0DB ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 183+ E0DF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 184+ E0E3 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 185+ E0E7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 186+ E0EB ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 187+ E0EF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 188+ E0F3 C9           	ret
 189+ E0F4
 190+ E0F4              sprite_galactic_hyper_hide:
 191+ E0F4 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 192+ E0F8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 193+ E0FC ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 194+ E100 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 195+ E104 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 196+ E108 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 197+ E10C C9           	ret
 198+ E10D
 199+ E10D              sprite_local_hide:
 200+ E10D ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 201+ E111 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 202+ E115 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 203+ E119 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 204+ E11D ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 205+ E121 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 206+ E125 C9           	ret
 207+ E126
 208+ E126              sprite_local_hyper_hide:
 209+ E126 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 210+ E12A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 211+ E12E ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 212+ E132 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 213+ E136 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 214+ E13A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 215+ E13E C9           	ret
 216+ E13F
 217+ E13F              sprite_cls_cursors:
 218+ E13F CD DB E0     	call	sprite_galactic_hide
 219+ E142 CD F4 E0     	call	sprite_galactic_hyper_hide
 220+ E145 CD 0D E1     	call	sprite_local_hide
 221+ E148 CD 26 E1     	call	sprite_local_hyper_hide
 222+ E14B C9           	ret
 223+ E14C
 224+ E14C              init_sprites:
 225+ E14C CD 3F E1     	call		sprite_cls_cursors
 226+ E14F ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 227+ E153 C9           	ret
 228+ E154
# file closed: ./Layer3Sprites/sprite_routines.asm
1063  E154                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E154              sprite_load_sprite_data:
   2+ E154 01 3B 30     	ld			bc, $303B; SPRITE_SLOT_PORT
   3+ E157 AF           	xor			a
   4+ E158 ED 79        	out			(c),a							; Prime slot upload
   5+ E15A 11 00 0C     	ld			de,12	* 256						; nbr of sprites to upload
   6+ E15D 21 6B E1     	ld			hl,Sprite1						; sprites are stored contiguous
   7+ E160              SpriteLoadLoop:
   8+ E160 01 5B 00     	ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   9+ E163 ED 90        	outinb											; do final 256th sprite
  10+ E165 1B           	dec			de
  11+ E166 7A           	ld			a,d
  12+ E167 B3           	or			e
  13+ E168 20 F6        	jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  14+ E16A C9           	ret
  15+ E16B
# file closed: ./Layer3Sprites/sprite_load.asm
1064  E16B                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E16B              Sprite1:
   2+ E16B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E16F E3 E3 E3 E3
   2+ E173 E3 E3 E3 E3
   2+ E177 E3 E3 E3 E3
   3+ E17B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E17F E3 E3 E3 E3
   3+ E183 E3 E3 E3 E3
   3+ E187 E3 E3 E3 E3
   4+ E18B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E18F E3 E3 E3 E3
   4+ E193 E3 E3 E3 E3
   4+ E197 E3 E3 E3 E3
   5+ E19B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E19F E3 E3 E3 E3
   5+ E1A3 E3 E3 E3 E3
   5+ E1A7 E3 E3 E3 E3
   6+ E1AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E1AF E3 E3 E3 E3
   6+ E1B3 E3 E3 E3 E3
   6+ E1B7 E3 E3 E3 E3
   7+ E1BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E1BF E3 E3 E3 E3
   7+ E1C3 E3 E3 E3 E3
   7+ E1C7 E3 E3 E3 E3
   8+ E1CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E1CF E3 E3 E3 E3
   8+ E1D3 E3 E3 E3 E3
   8+ E1D7 E3 E3 E3 E3
   9+ E1DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E1DF E3 E3 E3 E3
   9+ E1E3 E3 E3 E3 E3
   9+ E1E7 E3 E3 E3 E3
  10+ E1EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E1EF E3 E3 E3 E3
  10+ E1F3 E3 E3 E3 E3
  10+ E1F7 E3 E3 E3 90
  11+ E1FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E1FF E3 E3 E3 E3
  11+ E203 E3 E3 E3 E3
  11+ E207 E3 E3 E3 B4
  12+ E20B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E20F E3 E3 E3 E3
  12+ E213 E3 E3 E3 E3
  12+ E217 E3 E3 E3 B4
  13+ E21B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E21F E3 E3 E3 E3
  13+ E223 E3 E3 E3 E3
  13+ E227 E3 E3 E3 D8
  14+ E22B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E22F E3 E3 E3 E3
  14+ E233 E3 E3 E3 E3
  14+ E237 E3 E3 E3 D8
  15+ E23B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E23F E3 E3 E3 E3
  15+ E243 E3 E3 E3 E3
  15+ E247 E3 E3 E3 FC
  16+ E24B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E24F E3 E3 E3 E3
  16+ E253 E3 E3 E3 E3
  16+ E257 E3 E3 E3 FC
  17+ E25B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E25F E3 E3 E3 E3
  17+ E263 90 B4 B4 D8
  17+ E267 D8 FC FC E3
  18+ E26B
  19+ E26B
  20+ E26B
  21+ E26B              Sprite2:
  22+ E26B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E26F E3 E3 E3 E3
  22+ E273 E3 E3 E3 E3
  22+ E277 E3 E3 E3 E3
  23+ E27B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E27F E3 E3 E3 E3
  23+ E283 E3 E3 E3 E3
  23+ E287 E3 E3 E3 E3
  24+ E28B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E28F E3 E3 E3 E3
  24+ E293 E3 E3 E3 E3
  24+ E297 E3 E3 E3 E3
  25+ E29B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E29F E3 E3 E3 E3
  25+ E2A3 E3 E3 E3 E3
  25+ E2A7 E3 E3 E3 E3
  26+ E2AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E2AF E3 E3 E3 E3
  26+ E2B3 E3 E3 E3 E3
  26+ E2B7 E3 E3 E3 E3
  27+ E2BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E2BF E3 E3 E3 E3
  27+ E2C3 E3 E3 E3 E3
  27+ E2C7 E3 E3 E3 E3
  28+ E2CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E2CF E3 E3 E3 E3
  28+ E2D3 E3 E3 E3 E3
  28+ E2D7 E3 E3 E3 E3
  29+ E2DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E2DF E3 E3 E3 E3
  29+ E2E3 E3 E3 E3 E3
  29+ E2E7 E3 E3 E3 E3
  30+ E2EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E2EF E3 E3 E3 E3
  30+ E2F3 E3 E3 E3 E3
  30+ E2F7 E3 E3 E3 E3
  31+ E2FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E2FF E3 E3 E3 E3
  31+ E303 E3 E3 E3 E3
  31+ E307 E3 E3 E3 E3
  32+ E30B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E30F E3 E3 E3 E3
  32+ E313 E3 E3 E3 E3
  32+ E317 E3 E3 E3 E3
  33+ E31B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E31F E3 E3 E3 E3
  33+ E323 E3 E3 E3 E3
  33+ E327 E3 E3 E3 E3
  34+ E32B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E32F E3 E3 E3 E3
  34+ E333 E3 E3 E3 E3
  34+ E337 E3 E3 E3 E3
  35+ E33B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E33F E3 E3 E3 E3
  35+ E343 E3 E3 E3 E3
  35+ E347 E3 E3 E3 E3
  36+ E34B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E34F E3 E3 E3 E3
  36+ E353 E3 E3 E3 E3
  36+ E357 E3 E3 E3 E3
  37+ E35B FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E35F B4 B4 90 E3
  37+ E363 E3 E3 E3 E3
  37+ E367 E3 E3 E3 E3
  38+ E36B
  39+ E36B
  40+ E36B
  41+ E36B              Sprite3:
  42+ E36B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E36F E3 E3 E3 E3
  42+ E373 E3 E3 E3 E3
  42+ E377 E3 E3 E3 FC
  43+ E37B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E37F E3 E3 E3 E3
  43+ E383 E3 E3 E3 E3
  43+ E387 E3 E3 E3 FC
  44+ E38B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E38F E3 E3 E3 E3
  44+ E393 E3 E3 E3 E3
  44+ E397 E3 E3 E3 D8
  45+ E39B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E39F E3 E3 E3 E3
  45+ E3A3 E3 E3 E3 E3
  45+ E3A7 E3 E3 E3 D8
  46+ E3AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E3AF E3 E3 E3 E3
  46+ E3B3 E3 E3 E3 E3
  46+ E3B7 E3 E3 E3 B4
  47+ E3BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E3BF E3 E3 E3 E3
  47+ E3C3 E3 E3 E3 E3
  47+ E3C7 E3 E3 E3 B4
  48+ E3CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E3CF E3 E3 E3 E3
  48+ E3D3 E3 E3 E3 E3
  48+ E3D7 E3 E3 E3 90
  49+ E3DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E3DF E3 E3 E3 E3
  49+ E3E3 E3 E3 E3 E3
  49+ E3E7 E3 E3 E3 E3
  50+ E3EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E3EF E3 E3 E3 E3
  50+ E3F3 E3 E3 E3 E3
  50+ E3F7 E3 E3 E3 E3
  51+ E3FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E3FF E3 E3 E3 E3
  51+ E403 E3 E3 E3 E3
  51+ E407 E3 E3 E3 E3
  52+ E40B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E40F E3 E3 E3 E3
  52+ E413 E3 E3 E3 E3
  52+ E417 E3 E3 E3 E3
  53+ E41B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E41F E3 E3 E3 E3
  53+ E423 E3 E3 E3 E3
  53+ E427 E3 E3 E3 E3
  54+ E42B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E42F E3 E3 E3 E3
  54+ E433 E3 E3 E3 E3
  54+ E437 E3 E3 E3 E3
  55+ E43B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E43F E3 E3 E3 E3
  55+ E443 E3 E3 E3 E3
  55+ E447 E3 E3 E3 E3
  56+ E44B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E44F E3 E3 E3 E3
  56+ E453 E3 E3 E3 E3
  56+ E457 E3 E3 E3 E3
  57+ E45B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E45F E3 E3 E3 E3
  57+ E463 E3 E3 E3 E3
  57+ E467 E3 E3 E3 E3
  58+ E46B
  59+ E46B
  60+ E46B
  61+ E46B              Sprite4:
  62+ E46B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E46F E3 E3 E3 E3
  62+ E473 E3 E3 E3 E3
  62+ E477 E3 E3 E3 E3
  63+ E47B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E47F E3 E3 E3 E3
  63+ E483 E3 E3 E3 E3
  63+ E487 E3 E3 E3 E3
  64+ E48B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E48F E3 E3 E3 E3
  64+ E493 E3 E3 E3 E3
  64+ E497 E3 E3 E3 E3
  65+ E49B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E49F E3 E3 E3 E3
  65+ E4A3 E3 E3 E3 E3
  65+ E4A7 E3 E3 E3 E3
  66+ E4AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E4AF E3 E3 E3 E3
  66+ E4B3 E3 E3 E3 E3
  66+ E4B7 E3 E3 E3 E3
  67+ E4BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E4BF E3 E3 E3 E3
  67+ E4C3 E3 E3 E3 E3
  67+ E4C7 E3 E3 E3 E3
  68+ E4CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E4CF E3 E3 E3 E3
  68+ E4D3 E3 E3 E3 E3
  68+ E4D7 E3 E3 E3 E3
  69+ E4DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E4DF E3 E3 E3 E3
  69+ E4E3 E3 E3 E3 E3
  69+ E4E7 E3 E3 E3 E3
  70+ E4EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E4EF E3 E3 E3 E3
  70+ E4F3 E3 E3 E3 E3
  70+ E4F7 E3 E3 E3 E3
  71+ E4FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E4FF E3 E3 E3 E3
  71+ E503 E3 E3 E3 E3
  71+ E507 E3 E3 E3 E3
  72+ E50B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E50F E3 E3 E3 E3
  72+ E513 E3 E3 E3 E3
  72+ E517 E3 E3 E3 E3
  73+ E51B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E51F E3 E3 E3 E3
  73+ E523 E3 E3 E3 E3
  73+ E527 E3 E3 E3 12
  74+ E52B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E52F E3 E3 E3 E3
  74+ E533 E3 E3 E3 E3
  74+ E537 E3 E3 E3 16
  75+ E53B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E53F E3 E3 E3 E3
  75+ E543 E3 E3 E3 E3
  75+ E547 E3 E3 E3 1A
  76+ E54B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E54F E3 E3 E3 E3
  76+ E553 E3 E3 E3 E3
  76+ E557 E3 E3 E3 1F
  77+ E55B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E55F E3 E3 E3 E3
  77+ E563 E3 E3 E3 12
  77+ E567 16 1A 1F E3
  78+ E56B
  79+ E56B
  80+ E56B
  81+ E56B              Sprite5:
  82+ E56B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E56F E3 E3 E3 E3
  82+ E573 E3 E3 E3 E3
  82+ E577 E3 E3 E3 E3
  83+ E57B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E57F E3 E3 E3 E3
  83+ E583 E3 E3 E3 E3
  83+ E587 E3 E3 E3 E3
  84+ E58B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E58F E3 E3 E3 E3
  84+ E593 E3 E3 E3 E3
  84+ E597 E3 E3 E3 E3
  85+ E59B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E59F E3 E3 E3 E3
  85+ E5A3 E3 E3 E3 E3
  85+ E5A7 E3 E3 E3 E3
  86+ E5AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E5AF E3 E3 E3 E3
  86+ E5B3 E3 E3 E3 E3
  86+ E5B7 E3 E3 E3 E3
  87+ E5BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E5BF E3 E3 E3 E3
  87+ E5C3 E3 E3 E3 E3
  87+ E5C7 E3 E3 E3 E3
  88+ E5CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E5CF E3 E3 E3 E3
  88+ E5D3 E3 E3 E3 E3
  88+ E5D7 E3 E3 E3 E3
  89+ E5DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E5DF E3 E3 E3 E3
  89+ E5E3 E3 E3 E3 E3
  89+ E5E7 E3 E3 E3 E3
  90+ E5EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E5EF E3 E3 E3 E3
  90+ E5F3 E3 E3 E3 E3
  90+ E5F7 E3 E3 E3 E3
  91+ E5FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E5FF E3 E3 E3 E3
  91+ E603 E3 E3 E3 E3
  91+ E607 E3 E3 E3 E3
  92+ E60B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E60F E3 E3 E3 E3
  92+ E613 E3 E3 E3 E3
  92+ E617 E3 E3 E3 E3
  93+ E61B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E61F E3 E3 E3 E3
  93+ E623 E3 E3 E3 E3
  93+ E627 E3 E3 E3 E3
  94+ E62B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E62F E3 E3 E3 E3
  94+ E633 E3 E3 E3 E3
  94+ E637 E3 E3 E3 E3
  95+ E63B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E63F E3 E3 E3 E3
  95+ E643 E3 E3 E3 E3
  95+ E647 E3 E3 E3 E3
  96+ E64B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E64F E3 E3 E3 E3
  96+ E653 E3 E3 E3 E3
  96+ E657 E3 E3 E3 E3
  97+ E65B 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E65F E3 E3 E3 E3
  97+ E663 E3 E3 E3 E3
  97+ E667 E3 E3 E3 E3
  98+ E66B
  99+ E66B
 100+ E66B
 101+ E66B              Sprite6:
 102+ E66B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E66F E3 E3 E3 E3
 102+ E673 E3 E3 E3 E3
 102+ E677 E3 E3 E3 1F
 103+ E67B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E67F E3 E3 E3 E3
 103+ E683 E3 E3 E3 E3
 103+ E687 E3 E3 E3 1A
 104+ E68B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E68F E3 E3 E3 E3
 104+ E693 E3 E3 E3 E3
 104+ E697 E3 E3 E3 16
 105+ E69B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E69F E3 E3 E3 E3
 105+ E6A3 E3 E3 E3 E3
 105+ E6A7 E3 E3 E3 12
 106+ E6AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E6AF E3 E3 E3 E3
 106+ E6B3 E3 E3 E3 E3
 106+ E6B7 E3 E3 E3 E3
 107+ E6BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E6BF E3 E3 E3 E3
 107+ E6C3 E3 E3 E3 E3
 107+ E6C7 E3 E3 E3 E3
 108+ E6CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E6CF E3 E3 E3 E3
 108+ E6D3 E3 E3 E3 E3
 108+ E6D7 E3 E3 E3 E3
 109+ E6DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E6DF E3 E3 E3 E3
 109+ E6E3 E3 E3 E3 E3
 109+ E6E7 E3 E3 E3 E3
 110+ E6EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E6EF E3 E3 E3 E3
 110+ E6F3 E3 E3 E3 E3
 110+ E6F7 E3 E3 E3 E3
 111+ E6FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E6FF E3 E3 E3 E3
 111+ E703 E3 E3 E3 E3
 111+ E707 E3 E3 E3 E3
 112+ E70B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ E70F E3 E3 E3 E3
 112+ E713 E3 E3 E3 E3
 112+ E717 E3 E3 E3 E3
 113+ E71B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ E71F E3 E3 E3 E3
 113+ E723 E3 E3 E3 E3
 113+ E727 E3 E3 E3 E3
 114+ E72B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ E72F E3 E3 E3 E3
 114+ E733 E3 E3 E3 E3
 114+ E737 E3 E3 E3 E3
 115+ E73B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ E73F E3 E3 E3 E3
 115+ E743 E3 E3 E3 E3
 115+ E747 E3 E3 E3 E3
 116+ E74B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ E74F E3 E3 E3 E3
 116+ E753 E3 E3 E3 E3
 116+ E757 E3 E3 E3 E3
 117+ E75B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ E75F E3 E3 E3 E3
 117+ E763 E3 E3 E3 E3
 117+ E767 E3 E3 E3 E3
 118+ E76B
 119+ E76B
 120+ E76B
 121+ E76B              Sprite7:
 122+ E76B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ E76F E3 E3 E3 E3
 122+ E773 E3 E3 E3 E3
 122+ E777 E3 E3 E3 E3
 123+ E77B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ E77F E3 E3 E3 E3
 123+ E783 E3 E3 E3 E3
 123+ E787 E3 E3 E3 09
 124+ E78B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ E78F E3 E3 E3 E3
 124+ E793 E3 E3 E3 E3
 124+ E797 E3 E3 E3 09
 125+ E79B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ E79F E3 E3 E3 E3
 125+ E7A3 E3 E3 E3 E3
 125+ E7A7 E3 E3 E3 2C
 126+ E7AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ E7AF E3 E3 E3 E3
 126+ E7B3 E3 E3 E3 E3
 126+ E7B7 E3 E3 E3 2C
 127+ E7BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ E7BF E3 E3 E3 E3
 127+ E7C3 E3 E3 E3 E3
 127+ E7C7 E3 E3 E3 50
 128+ E7CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ E7CF E3 E3 E3 E3
 128+ E7D3 E3 E3 E3 E3
 128+ E7D7 E3 E3 E3 50
 129+ E7DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ E7DF E3 E3 E3 E3
 129+ E7E3 E3 E3 E3 E3
 129+ E7E7 E3 E3 E3 50
 130+ E7EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ E7EF E3 E3 E3 E3
 130+ E7F3 E3 E3 E3 E3
 130+ E7F7 E3 E3 E3 15
 131+ E7FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ E7FF E3 E3 E3 E3
 131+ E803 E3 E3 E3 E3
 131+ E807 E3 E3 E3 15
 132+ E80B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ E80F E3 E3 E3 E3
 132+ E813 E3 E3 E3 E3
 132+ E817 E3 E3 E3 15
 133+ E81B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ E81F E3 E3 E3 E3
 133+ E823 E3 E3 E3 E3
 133+ E827 E3 E3 E3 7C
 134+ E82B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ E82F E3 E3 E3 E3
 134+ E833 E3 E3 E3 E3
 134+ E837 E3 E3 E3 7C
 135+ E83B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ E83F E3 E3 E3 E3
 135+ E843 E3 E3 E3 E3
 135+ E847 E3 E3 E3 7C
 136+ E84B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ E84F E3 E3 E3 E3
 136+ E853 E3 E3 E3 E3
 136+ E857 E3 E3 E3 7C
 137+ E85B E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ E85F 2C 50 50 50
 137+ E863 15 15 15 7C
 137+ E867 7C 7C 7C E3
 138+ E86B
 139+ E86B
 140+ E86B
 141+ E86B              Sprite8:
 142+ E86B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ E86F E3 E3 E3 E3
 142+ E873 E3 E3 E3 E3
 142+ E877 E3 E3 E3 E3
 143+ E87B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ E87F E3 E3 E3 E3
 143+ E883 E3 E3 E3 E3
 143+ E887 E3 E3 E3 E3
 144+ E88B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ E88F E3 E3 E3 E3
 144+ E893 E3 E3 E3 E3
 144+ E897 E3 E3 E3 E3
 145+ E89B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ E89F E3 E3 E3 E3
 145+ E8A3 E3 E3 E3 E3
 145+ E8A7 E3 E3 E3 E3
 146+ E8AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ E8AF E3 E3 E3 E3
 146+ E8B3 E3 E3 E3 E3
 146+ E8B7 E3 E3 E3 E3
 147+ E8BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ E8BF E3 E3 E3 E3
 147+ E8C3 E3 E3 E3 E3
 147+ E8C7 E3 E3 E3 E3
 148+ E8CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ E8CF E3 E3 E3 E3
 148+ E8D3 E3 E3 E3 E3
 148+ E8D7 E3 E3 E3 E3
 149+ E8DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ E8DF E3 E3 E3 E3
 149+ E8E3 E3 E3 E3 E3
 149+ E8E7 E3 E3 E3 E3
 150+ E8EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ E8EF E3 E3 E3 E3
 150+ E8F3 E3 E3 E3 E3
 150+ E8F7 E3 E3 E3 E3
 151+ E8FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ E8FF E3 E3 E3 E3
 151+ E903 E3 E3 E3 E3
 151+ E907 E3 E3 E3 E3
 152+ E90B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ E90F E3 E3 E3 E3
 152+ E913 E3 E3 E3 E3
 152+ E917 E3 E3 E3 E3
 153+ E91B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ E91F E3 E3 E3 E3
 153+ E923 E3 E3 E3 E3
 153+ E927 E3 E3 E3 E3
 154+ E92B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ E92F E3 E3 E3 E3
 154+ E933 E3 E3 E3 E3
 154+ E937 E3 E3 E3 E3
 155+ E93B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ E93F E3 E3 E3 E3
 155+ E943 E3 E3 E3 E3
 155+ E947 E3 E3 E3 E3
 156+ E94B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ E94F E3 E3 E3 E3
 156+ E953 E3 E3 E3 E3
 156+ E957 E3 E3 E3 E3
 157+ E95B 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ E95F 15 15 15 50
 157+ E963 50 50 2C 2C
 157+ E967 09 09 E3 E3
 158+ E96B
 159+ E96B
 160+ E96B
 161+ E96B              Sprite9:
 162+ E96B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ E96F E3 E3 E3 E3
 162+ E973 E3 E3 E3 E3
 162+ E977 E3 E3 E3 7C
 163+ E97B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ E97F E3 E3 E3 E3
 163+ E983 E3 E3 E3 E3
 163+ E987 E3 E3 E3 7C
 164+ E98B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ E98F E3 E3 E3 E3
 164+ E993 E3 E3 E3 E3
 164+ E997 E3 E3 E3 7C
 165+ E99B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ E99F E3 E3 E3 E3
 165+ E9A3 E3 E3 E3 E3
 165+ E9A7 E3 E3 E3 7C
 166+ E9AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ E9AF E3 E3 E3 E3
 166+ E9B3 E3 E3 E3 E3
 166+ E9B7 E3 E3 E3 15
 167+ E9BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ E9BF E3 E3 E3 E3
 167+ E9C3 E3 E3 E3 E3
 167+ E9C7 E3 E3 E3 15
 168+ E9CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ E9CF E3 E3 E3 E3
 168+ E9D3 E3 E3 E3 E3
 168+ E9D7 E3 E3 E3 15
 169+ E9DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ E9DF E3 E3 E3 E3
 169+ E9E3 E3 E3 E3 E3
 169+ E9E7 E3 E3 E3 50
 170+ E9EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ E9EF E3 E3 E3 E3
 170+ E9F3 E3 E3 E3 E3
 170+ E9F7 E3 E3 E3 50
 171+ E9FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ E9FF E3 E3 E3 E3
 171+ EA03 E3 E3 E3 E3
 171+ EA07 E3 E3 E3 50
 172+ EA0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ EA0F E3 E3 E3 E3
 172+ EA13 E3 E3 E3 E3
 172+ EA17 E3 E3 E3 2C
 173+ EA1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ EA1F E3 E3 E3 E3
 173+ EA23 E3 E3 E3 E3
 173+ EA27 E3 E3 E3 2C
 174+ EA2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ EA2F E3 E3 E3 E3
 174+ EA33 E3 E3 E3 E3
 174+ EA37 E3 E3 E3 09
 175+ EA3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ EA3F E3 E3 E3 E3
 175+ EA43 E3 E3 E3 E3
 175+ EA47 E3 E3 E3 09
 176+ EA4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EA4F E3 E3 E3 E3
 176+ EA53 E3 E3 E3 E3
 176+ EA57 E3 E3 E3 E3
 177+ EA5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ EA5F E3 E3 E3 E3
 177+ EA63 E3 E3 E3 E3
 177+ EA67 E3 E3 E3 E3
 178+ EA6B
 179+ EA6B
 180+ EA6B
 181+ EA6B              Sprite10:
 182+ EA6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ EA6F E3 E3 E3 E3
 182+ EA73 E3 E3 E3 E3
 182+ EA77 E3 E3 E3 E3
 183+ EA7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ EA7F E3 E3 E3 E3
 183+ EA83 E3 E3 E3 E3
 183+ EA87 E3 E3 E3 44
 184+ EA8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ EA8F E3 E3 E3 E3
 184+ EA93 E3 E3 E3 E3
 184+ EA97 E3 E3 E3 64
 185+ EA9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ EA9F E3 E3 E3 E3
 185+ EAA3 E3 E3 E3 E3
 185+ EAA7 E3 E3 E3 64
 186+ EAAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EAAF E3 E3 E3 E3
 186+ EAB3 E3 E3 E3 E3
 186+ EAB7 E3 E3 E3 64
 187+ EABB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EABF E3 E3 E3 E3
 187+ EAC3 E3 E3 E3 E3
 187+ EAC7 E3 E3 E3 A8
 188+ EACB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EACF E3 E3 E3 E3
 188+ EAD3 E3 E3 E3 E3
 188+ EAD7 E3 E3 E3 A8
 189+ EADB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EADF E3 E3 E3 E3
 189+ EAE3 E3 E3 E3 E3
 189+ EAE7 E3 E3 E3 A8
 190+ EAEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EAEF E3 E3 E3 E3
 190+ EAF3 E3 E3 E3 E3
 190+ EAF7 E3 E3 E3 CC
 191+ EAFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EAFF E3 E3 E3 E3
 191+ EB03 E3 E3 E3 E3
 191+ EB07 E3 E3 E3 CC
 192+ EB0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EB0F E3 E3 E3 E3
 192+ EB13 E3 E3 E3 E3
 192+ EB17 E3 E3 E3 CC
 193+ EB1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EB1F E3 E3 E3 E3
 193+ EB23 E3 E3 E3 E3
 193+ EB27 E3 E3 E3 EC
 194+ EB2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EB2F E3 E3 E3 E3
 194+ EB33 E3 E3 E3 E3
 194+ EB37 E3 E3 E3 EC
 195+ EB3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EB3F E3 E3 E3 E3
 195+ EB43 E3 E3 E3 E3
 195+ EB47 E3 E3 E3 EC
 196+ EB4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EB4F E3 E3 E3 E3
 196+ EB53 E3 E3 E3 E3
 196+ EB57 E3 E3 E3 EC
 197+ EB5B E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EB5F 64 A8 A8 A8
 197+ EB63 CC CC CC EC
 197+ EB67 EC EC EC E3
 198+ EB6B
 199+ EB6B
 200+ EB6B
 201+ EB6B              Sprite11:
 202+ EB6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EB6F E3 E3 E3 E3
 202+ EB73 E3 E3 E3 E3
 202+ EB77 E3 E3 E3 E3
 203+ EB7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EB7F E3 E3 E3 E3
 203+ EB83 E3 E3 E3 E3
 203+ EB87 E3 E3 E3 E3
 204+ EB8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EB8F E3 E3 E3 E3
 204+ EB93 E3 E3 E3 E3
 204+ EB97 E3 E3 E3 E3
 205+ EB9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EB9F E3 E3 E3 E3
 205+ EBA3 E3 E3 E3 E3
 205+ EBA7 E3 E3 E3 E3
 206+ EBAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EBAF E3 E3 E3 E3
 206+ EBB3 E3 E3 E3 E3
 206+ EBB7 E3 E3 E3 E3
 207+ EBBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EBBF E3 E3 E3 E3
 207+ EBC3 E3 E3 E3 E3
 207+ EBC7 E3 E3 E3 E3
 208+ EBCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EBCF E3 E3 E3 E3
 208+ EBD3 E3 E3 E3 E3
 208+ EBD7 E3 E3 E3 E3
 209+ EBDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EBDF E3 E3 E3 E3
 209+ EBE3 E3 E3 E3 E3
 209+ EBE7 E3 E3 E3 E3
 210+ EBEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EBEF E3 E3 E3 E3
 210+ EBF3 E3 E3 E3 E3
 210+ EBF7 E3 E3 E3 E3
 211+ EBFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EBFF E3 E3 E3 E3
 211+ EC03 E3 E3 E3 E3
 211+ EC07 E3 E3 E3 E3
 212+ EC0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EC0F E3 E3 E3 E3
 212+ EC13 E3 E3 E3 E3
 212+ EC17 E3 E3 E3 E3
 213+ EC1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EC1F E3 E3 E3 E3
 213+ EC23 E3 E3 E3 E3
 213+ EC27 E3 E3 E3 E3
 214+ EC2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EC2F E3 E3 E3 E3
 214+ EC33 E3 E3 E3 E3
 214+ EC37 E3 E3 E3 E3
 215+ EC3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EC3F E3 E3 E3 E3
 215+ EC43 E3 E3 E3 E3
 215+ EC47 E3 E3 E3 E3
 216+ EC4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EC4F E3 E3 E3 E3
 216+ EC53 E3 E3 E3 E3
 216+ EC57 E3 E3 E3 E3
 217+ EC5B EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EC5F CC CC CC A8
 217+ EC63 A8 A8 64 64
 217+ EC67 64 44 E3 E3
 218+ EC6B
 219+ EC6B
 220+ EC6B
 221+ EC6B              Sprite12:
 222+ EC6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EC6F E3 E3 E3 E3
 222+ EC73 E3 E3 E3 E3
 222+ EC77 E3 E3 E3 EC
 223+ EC7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EC7F E3 E3 E3 E3
 223+ EC83 E3 E3 E3 E3
 223+ EC87 E3 E3 E3 EC
 224+ EC8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EC8F E3 E3 E3 E3
 224+ EC93 E3 E3 E3 E3
 224+ EC97 E3 E3 E3 EC
 225+ EC9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EC9F E3 E3 E3 E3
 225+ ECA3 E3 E3 E3 E3
 225+ ECA7 E3 E3 E3 EC
 226+ ECAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ ECAF E3 E3 E3 E3
 226+ ECB3 E3 E3 E3 E3
 226+ ECB7 E3 E3 E3 CC
 227+ ECBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ ECBF E3 E3 E3 E3
 227+ ECC3 E3 E3 E3 E3
 227+ ECC7 E3 E3 E3 CC
 228+ ECCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ ECCF E3 E3 E3 E3
 228+ ECD3 E3 E3 E3 E3
 228+ ECD7 E3 E3 E3 CC
 229+ ECDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ ECDF E3 E3 E3 E3
 229+ ECE3 E3 E3 E3 E3
 229+ ECE7 E3 E3 E3 A8
 230+ ECEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ ECEF E3 E3 E3 E3
 230+ ECF3 E3 E3 E3 E3
 230+ ECF7 E3 E3 E3 A8
 231+ ECFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ ECFF E3 E3 E3 E3
 231+ ED03 E3 E3 E3 E3
 231+ ED07 E3 E3 E3 A8
 232+ ED0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ ED0F E3 E3 E3 E3
 232+ ED13 E3 E3 E3 E3
 232+ ED17 E3 E3 E3 64
 233+ ED1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ ED1F E3 E3 E3 E3
 233+ ED23 E3 E3 E3 E3
 233+ ED27 E3 E3 E3 64
 234+ ED2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ ED2F E3 E3 E3 E3
 234+ ED33 E3 E3 E3 E3
 234+ ED37 E3 E3 E3 64
 235+ ED3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ ED3F E3 E3 E3 E3
 235+ ED43 E3 E3 E3 E3
 235+ ED47 E3 E3 E3 44
 236+ ED4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ ED4F E3 E3 E3 E3
 236+ ED53 E3 E3 E3 E3
 236+ ED57 E3 E3 E3 E3
 237+ ED5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ ED5F E3 E3 E3 E3
 237+ ED63 E3 E3 E3 E3
 237+ ED67 E3 E3 E3 E3
 238+ ED6B
# file closed: ./Layer3Sprites/SpriteSheet.asm
1065  ED6B              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1066  ED6B                  SLOT    ConsoleImageAddr
1067  ED6B                  PAGE    BankConsole
1068  ED6B              	ORG     ConsoleImageAddr, BankConsole
1069  E000
1070  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 00 00
  67+ E808 00 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 00 00
  68+ E828 00 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 00 00
  69+ E848 00 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
# file closed: ./Images/ConsoleImageData.asm
1071  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1072  E900                  SLOT    ViewFrontAddr
1073  E900                  PAGE    BankFrontView
1074  E900                  ORG     ViewFrontAddr
1075  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 98 93                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 99 93                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A 94 93                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 97 93     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 96 93                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 C9                                   ret
  22+ C038
  23+ C038              ; Do the same for pitch
  24+ C038
  25+ C038              draw_front_view:        MMUSelectLayer1
  25+ C038 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  26+ C03C CD 47 E0                             call    l1_cls
  27+ C03F CD 52 E0                             call    l1_attr_cls
  28+ C042                                      MMUSelectLayer2
  28+ C042 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  29+ C046 CD 02 E0                             call     asm_l2_double_buffer_on
  30+ C049                                      MMUSelectSpriteBank
  30+ C049 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  31+ C04D CD 3F E1                             call    sprite_cls_cursors
  32+ C050                                      MMUSelectConsoleBank
  32+ C050 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  33+ C054 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  34+ C057 11 00 E0                             ld          de,ConsoleImageData
  35+ C05A 01 00 08                             ld          bc, ScreenL1BottomLen
  36+ C05D CD FA 8F                             call        memcopy_dma
  37+ C060 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  38+ C063 11 00 E8                             ld          de,ConsoleAttributes
  39+ C066 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  40+ C069 CD FA 8F                             call        memcopy_dma
  41+ C06C CD 5C 8C                             call        InitialiseStars
  42+ C06F AF                                   xor         a
  43+ C070 32 E9 93                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  44+ C073 C9                                   ret
  45+ C074
  46+ C074              dampenRate:             equ     $04
  47+ C074 04           dampenRcounter:         DB      dampenRate
  48+ C075 04           dampenPcounter:         DB      dampenRate
  49+ C076 AF           input_front_view:       xor         a
  50+ C077 2A 5F 90                             ld      hl,(addr_Pressed_Accellerate)
  51+ C07A 7E                                   ld      a,(hl)
  52+ C07B                                      IfAIsZeroGoto     TestDecellerate
  52+ C07B FE 00       >				cp	0
  52+ C07D CA 99 C0    >				jp	z,TestDecellerate
  53+ C080 3A D3 93                             ld      a,(SHIPMAXSPEED)
  54+ C083 57                                   ld      d,a
  55+ C084 3A D4 93                             ld      a,(DELTA)
  56+ C087                                      JumpIfAGTENusng d,TestDecellerate
  56+ C087 BA          >                        cp     d
  56+ C088 D2 99 C0    >                        jp		nc,TestDecellerate
  57+ C08B 3C                                   inc     a
  58+ C08C 32 D4 93                             ld      (DELTA),a
  59+ C08F 2A D5 93                             ld      hl,(DELT4Lo)
  60+ C092 ED 34 04 00                          add     hl,4
  61+ C096 22 D5 93                             ld      (DELT4Lo),hl
  62+ C099 2A 61 90     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
  63+ C09C 7E                                   ld      a,(hl)
  64+ C09D                                      IfAIsZeroGoto   TestLeftPressed
  64+ C09D FE 00       >				cp	0
  64+ C09F CA B8 C0    >				jp	z,TestLeftPressed
  65+ C0A2 3A D4 93                             ld      a,(DELTA)
  66+ C0A5                                      IfAIsZeroGoto   TestLeftPressed
  66+ C0A5 FE 00       >				cp	0
  66+ C0A7 CA B8 C0    >				jp	z,TestLeftPressed
  67+ C0AA 3D                                   dec     a
  68+ C0AB 32 D4 93                             ld      (DELTA),a
  69+ C0AE 2A D5 93                             ld      hl,(DELT4Lo)
  70+ C0B1 2B                                   dec     hl
  71+ C0B2 2B                                   dec     hl
  72+ C0B3 2B                                   dec     hl
  73+ C0B4 2B                                   dec     hl
  74+ C0B5 22 D5 93                             ld      (DELT4Lo),hl
  75+ C0B8 2A 57 90     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
  76+ C0BB 7E                                   ld      a,(hl)
  77+ C0BC                                      IfAIsZeroGoto   TestRightPressed
  77+ C0BC FE 00       >				cp	0
  77+ C0BE CA D1 C0    >				jp	z,TestRightPressed
  78+ C0C1 3A 94 93                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  79+ C0C4 21 9B 93                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
  80+ C0C7 BE                                   cp      (hl)
  81+ C0C8 28 07                                jr      z,TestRightPressed
  82+ C0CA                                      ;break
  83+ C0CA 3D                                   dec     a                                   ; increase joystick roll
  84+ C0CB 32 94 93                             ld      (JSTX),a
  85+ C0CE CD 10 C0                             call    draw_front_calc_alpha
  86+ C0D1 2A 59 90     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
  87+ C0D4 7E                                   ld      a,(hl)
  88+ C0D5                                      IfAIsZeroGoto   .DampenRoll
  88+ C0D5 FE 00       >				cp	0
  88+ C0D7 CA EC C0    >				jp	z,.DampenRoll
  89+ C0DA 3A 94 93                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  90+ C0DD 21 9A 93                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
  91+ C0E0 BE                                   cp      (hl)
  92+ C0E1 28 23                                jr      z,TestDivePressed                   ; if its held then we don't dampen
  93+ C0E3                                      ;break
  94+ C0E3 3C                                   inc     a                                   ; increase joystick roll
  95+ C0E4 32 94 93     .UpdateAlphRoll:        ld      (JSTX),a
  96+ C0E7 CD 10 C0                             call    draw_front_calc_alpha
  97+ C0EA 18 1A                                jr      TestDivePressed
  98+ C0EC 21 74 C0     .DampenRoll:            ld      hl,dampenRcounter
  99+ C0EF 35                                   dec     (hl)
 100+ C0F0 20 14                                jr      nz,TestDivePressed
 101+ C0F2 3E 04                                ld      a,dampenRate
 102+ C0F4 77                                   ld      (hl),a
 103+ C0F5 3A 94 93                             ld      a,(JSTX)
 104+ C0F8 FE 00                                cp      0
 105+ C0FA 28 0A                                jr      z, TestDivePressed
 106+ C0FC CB 7F                                bit     7,a
 107+ C0FE 28 03                                jr      z,.PosRollDampen
 108+ C100 3C           .NegRollDampen:         inc     a
 109+ C101 18 01                                jr      .ApplyRollDampen
 110+ C103 3D           .PosRollDampen:         dec     a
 111+ C104 18 DE        .ApplyRollDampen:       jr      .UpdateAlphRoll
 112+ C106              ; Dive and Climb input
 113+ C106 2A 5B 90     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 114+ C109 7E                                   ld      a,(hl)
 115+ C10A                                      IfAIsZeroGoto   TestClimbPressed
 115+ C10A FE 00       >				cp	0
 115+ C10C CA 3E C1    >				jp	z,TestClimbPressed
 116+ C10F 3A 89 93                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 117+ C112 21 8E 93                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 118+ C115 BE                                   cp      (hl)
 119+ C116 28 26                                jr      z,TestClimbPressed
 120+ C118                                      ;break
 121+ C118 3D                                   dec     a                                   ; increase joystick roll
 122+ C119 32 89 93                             ld      (JSTY),a
 123+ C11C 47                                   ld      b,a                                 ; b = current roll
 124+ C11D E6 80                                and     $80                                 ; a= sign of current rol
 125+ C11F 32 8B 93                             ld      (BET2),a                            ; set sign
 126+ C122 EE 80                                xor     $80
 127+ C124 32 8C 93                             ld      (BET2FLIP),a                        ; and oppsite sign
 128+ C127 3A 89 93                             ld      a,(JSTY)
 129+ C12A                                      JumpOnBitClear a,7,.PositiveClimb
 129+ C12A CB 7F       >                        bit 	7,a
 129+ C12C CA 31 C1    >                        jp      z,.PositiveClimb
 130+ C12F ED 44        .NegativeClimb:         neg
 131+ C131 CB 3F        .PositiveClimb          srl     a
 132+ C133 CB 3F                                srl     a
 133+ C135 FE 08                                cp      8
 134+ C137 38 02                                jr      c,.NotIncreasedDamp
 135+ C139 CB 3F        .IncreasedDamp          srl     a
 136+ C13B 32 8A 93     .NotIncreasedDamp:      ld      (BET1),a
 137+ C13E 2A 5D 90     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 138+ C141 7E                                   ld      a,(hl)
 139+ C142                                      IfAIsZeroGoto   .DampenPitch
 139+ C142 FE 00       >				cp	0
 139+ C144 CA 78 C1    >				jp	z,.DampenPitch
 140+ C147 3A 89 93                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 141+ C14A 21 8D 93                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 142+ C14D BE                                   cp      (hl)
 143+ C14E 28 42                                jr      z,ForwardViewDoneKeys
 144+ C150                                      ;break
 145+ C150 3C                                   inc     a                                   ; increase joystick roll
 146+ C151 32 89 93     .UpdateAlphPitch:       ld      (JSTY),a
 147+ C154 47                                   ld      b,a                                 ; b = current roll
 148+ C155 E6 80                                and     $80                                 ; a= sign of current rol
 149+ C157 32 8B 93                             ld      (BET2),a                            ; set sign
 150+ C15A EE 80                                xor     $80
 151+ C15C 32 8C 93                             ld      (BET2FLIP),a                        ; and oppsite sign
 152+ C15F 3A 89 93                             ld      a,(JSTY)
 153+ C162                                      JumpOnBitClear a,7,.PositiveClimb
 153+ C162 CB 7F       >                        bit 	7,a
 153+ C164 CA 69 C1    >                        jp      z,.PositiveClimb
 154+ C167 ED 44        .NegativeClimb:         neg
 155+ C169 CB 3F        .PositiveClimb          srl     a
 156+ C16B CB 3F                                srl     a
 157+ C16D FE 08                                cp      8
 158+ C16F 38 02                                jr      c,.NotIncreasedDamp
 159+ C171 CB 3F        .IncreasedDamp          srl     a
 160+ C173 32 8A 93     .NotIncreasedDamp:      ld      (BET1),a
 161+ C176 18 1A                                jr      ForwardViewDoneKeys
 162+ C178 21 75 C0     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 163+ C17B 35                                   dec     (hl)
 164+ C17C 20 14                                jr      nz,ForwardViewDoneKeys
 165+ C17E 3E 04                                ld      a,dampenRate
 166+ C180 77                                   ld      (hl),a
 167+ C181 3A 89 93                             ld      a,(JSTY)
 168+ C184 FE 00                                cp      0
 169+ C186 28 0A                                jr      z,ForwardViewDoneKeys
 170+ C188 CB 7F                                bit     7,a
 171+ C18A 28 03                                jr      z,.PosPitchDampen
 172+ C18C 3C           .NegPitchDampen:        inc     a
 173+ C18D 18 01                                jr      .ApplyPitchDampen
 174+ C18F 3D           .PosPitchDampen:        dec     a
 175+ C190 18 BF        .ApplyPitchDampen:      jr      .UpdateAlphPitch
 176+ C192 C9           ForwardViewDoneKeys:    ret
 177+ C193
 178+ C193
 179+ C193
 180+ C193
 181+ C193
 182+ C193
 183+ C193
# file closed: ./Views/Front_View.asm
1076  C193              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1077  C193                  SLOT    MenuStatusAddr
1078  C193                  PAGE    BankMenuStatus
1079  C193                  ORG     MenuStatusAddr
1080  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 62 AB  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 83 94  						DW $0290,CommanderName
   5+ C018 08 0B 76 AB  						DW $0B08,txt_present_system
   6+ C01C 08 13 89 AB  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 9C AB  						DW $1B08,txt_condition
   8+ C024 08 23 AA AB  						DW $2308,txt_fuel
   9+ C028 08 2B B8 AB  						DW $2B08,txt_cash
  10+ C02C 08 33 C6 AB  						DW $3308,txt_legal_status
  11+ C030 08 3B D4 AB  						DW $3B08,txt_rating
  12+ C034 08 4B E2 AB  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/L2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/L2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/L2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A F6 96     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A F4 96                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     EQ_CARGO_BAY
 156+ CD95 3A 96 94     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD D4 8F                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 170+ CDB5 DD 21 11 97                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A 96 94     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B 8D 94                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A 96 94     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B DA 94                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 49 99                             ld		hl, ConditionNameIdx
 223+ CE45 CD 4B 9A                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD 3F AC     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 ED AB                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A 9F 94     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 2A 9B                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 39 9B     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 30 9B     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B B2 94  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 56 9A                             call	getRankIndex
 260+ CEA9 21 35 9A                             ld		hl, RankingNameIdx
 261+ CEAC CD 4B 9A                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 47 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c,.FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD 80 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A E9 93     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 1D                                jr			z,.PlayerIsDocked
 304+ CEFF 21 58 94     .PlayerNotDocked:	    ld			hl, SpaceStationPresent+1				; address of first Non station
 305+ CF02 3E 01                                ld			a,1										; condition green
 306+ CF04 06 1E                                ld			b,JunkCount- (SpaceStationPresent+1) +1	; so should be 30
 307+ CF06 86           .countShipsLoop:	    add			a,(hl)
 308+ CF07 23                                   inc			hl
 309+ CF08 10 FC                                djnz		.countShipsLoop
 310+ CF0A FE 00                                cp			0
 311+ CF0C 0E 01                                ld          c,1
 312+ CF0E 28 0A                                jr			z,.PlayerColour
 313+ CF10 3A B8 94     .NoShipsAround:         ld			a,(PlayerEnergy)
 314+ CF13 FE 80                                cp			$80
 315+ CF15 3E 01                                ld          a,1
 316+ CF17 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 317+ CF19 C9                                   ret
 318+ CF1A 79           .PlayerColour:          ld          a,c
 319+ CF1B C9                                   ret
 320+ CF1C AF           .PlayerIsDocked:        xor			a
 321+ CF1D C9                                   ret
 322+ CF1E
 323+ CF1E              ;;;PrintEquipment:         ld		a,(hl)
 324+ CF1E              ;;;                        cp		0
 325+ CF1E              ;;;                        ret		z
 326+ CF1E              ;;;                        ld		a,b
 327+ CF1E              ;;;PrintEquipmentDirect:	call	expandTokenToString
 328+ CF1E              ;;;                        ld		hl,TextBuffer
 329+ CF1E              ;;;                        ld		de,(equipment_cursor)
 330+ CF1E              ;;;                        call	l1_print_at
 331+ CF1E              ;;;                        ld		bc,(equipment_cursor)
 332+ CF1E              ;;;                        ld		a,b
 333+ CF1E              ;;;                        add		a,8
 334+ CF1E              ;;;                        ld		b,a
 335+ CF1E              ;;;                        ld		(equipment_cursor),bc
 336+ CF1E              ;;;                        cp		equipmax_row
 337+ CF1E              ;;;                        jr		c,.SkipColUpdate
 338+ CF1E              ;;;.ColUpdate:             ld		hl,equipment_position2
 339+ CF1E              ;;;                        ld		(equipment_cursor),hl
 340+ CF1E              ;;;                        ret
 341+ CF1E              ;;;.SkipColUpdate:	        ld		a,b
 342+ CF1E              ;;;                        ld		(equipment_cursor+1), a
 343+ CF1E              ;;;                        ret
 344+ CF1E
 345+ CF1E              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF1E
   2++CF1E                  MMUSelectLayer1
   2++CF1E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF22 CD 47 E0     	call	l1_cls
   4++CF25 3E 07        	ld		a,7
   5++CF27 CD 53 E0     	call	l1_attr_cls_to_a
   6++CF2A                  MMUSelectLayer2
   6++CF2A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF2E CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF31 CD C9 E0     	call	l2_cls	; Get some space
   9++CF34              	MMUSelectSpriteBank
   9++CF34 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF38 CD 3F E1     	call    sprite_cls_cursors
  11++CF3B
  12++CF3B
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 346+ CF3B 3E 08                                ld		a,8
 347+ CF3D 32 E4 93                             ld		(MenuIdMax),a
 348+ CF40 01 01 01     .Drawbox:               ld		bc,$0101
 349+ CF43 11 FD BE                             ld		de,$BEFD
 350+ CF46 3E C0                                ld		a,$C0
 351+ CF48                                      MMUSelectLayer2
 351+ CF48 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ CF4C CD F6 E1                             call	l2_draw_box
 353+ CF4F 01 01 0A                             ld		bc,$0A01
 354+ CF52 11 C0 FE                             ld		de,$FEC0
 355+ CF55 CD 62 E2                             call	l2_draw_horz_line
 356+ CF58 CD 95 CD     .equipment              call    STAT_buffer_list
 357+ CF5B CD BC CE                             call    draw_STAT_items
 358+ CF5E CD F3 CD                             call    draw_STAT_maintext
 359+ CF61 C9                                   ret
 360+ CF62
 361+ CF62              ;----------------------------------------------------------------------------------------------------------------------------------
 362+ CF62              ; Handles all the input whilst in the market menu
 363+ CF62 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 364+ CF64 CD 5A 91                             call    is_key_pressed
 365+ CF67 CC 73 CF                             call    z,STAT_UpPressed
 366+ CF6A 3E 4C                                ld      a,c_Pressed_CursorDown
 367+ CF6C CD 5A 91                             call    is_key_pressed
 368+ CF6F CC 85 CF                             call    z,STAT_DownPressed
 369+ CF72 C9                                   ret
 370+ CF73
 371+ CF73              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ CF73 AF           STAT_UpPressed:         xor     a
 373+ CF74 32 3A C0                             ld      (STAT_selected_row),a
 374+ CF77 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ CF7A FE 00                                cp      0
 376+ CF7C C8                                   ret     z
 377+ CF7D 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ CF7E 32 3B C0                             ld      (STAT_current_topItem),a
 379+ CF81 CD BC CE                             call    draw_STAT_items
 380+ CF84 C9                                   ret
 381+ CF85              ;----------------------------------------------------------------------------------------------------------------------------------
 382+ CF85 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 383+ CF87 32 3A C0                             ld      (STAT_selected_row),a
 384+ CF8A 3A 3C C0                             ld      a,(STAT_current_end)
 385+ CF8D 47                                   ld      b,a                             ; This check is if the current list is < one screen
 386+ CF8E 05                                   dec     b
 387+ CF8F 3A 3A C0                             ld      a,(STAT_selected_row)
 388+ CF92 B8                                   cp      b
 389+ CF93 C8                                   ret     z
 390+ CF94 FE 09                                cp      STAT_eqip_window_len-1
 391+ CF96 28 05                                jr      z, .check_scroll_down
 392+ CF98 21 3A C0                             ld      hl,STAT_selected_row
 393+ CF9B 34                                   inc     (hl)
 394+ CF9C C9                                   ret
 395+ CF9D 47           .check_scroll_down:     ld      b,a
 396+ CF9E 3A 3B C0                             ld      a,(STAT_current_topItem)
 397+ CFA1 80                                   add     b
 398+ CFA2 3C                                   inc     a
 399+ CFA3 21 3C C0                             ld      hl,STAT_current_end
 400+ CFA6                                      ReturnIfAGTEusng      (hl)
 400+ CFA6 BE          >				  cp    (hl)
 400+ CFA7 D0          >                  ret	 nc
 401+ CFA8 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 402+ CFAB 34                                   inc     (hl)
 403+ CFAC CD BC CE                             call    draw_STAT_items
 404+ CFAF C9                                   ret
 405+ CFB0
# file closed: ./Menus/status_menu.asm
1081  CFB0
1082  CFB0              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1083  CFB0
1084  CFB0                  SLOT    MenuEquipSAddr
1085  CFB0                  PAGE    BankMenuEquipS
1086  CFB0                  ORG     MenuEquipSAddr
1087  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 98 9F  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD 80 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A F6 96     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A F4 96                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD 80 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD D4 8F                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 47 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c,.FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD 80 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 47 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 53 E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 3F E1     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 E4 93                             ld      (MenuIdMax),a
 380+ D40C 3A 96 94     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 8D 94                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 62 E2                             call	l2_draw_horz_line
 398+ D441 3A 96 94     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 13 9F                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 5A 91                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 5A 91                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 5A 91                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 5A 91                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >				  cp    (hl)
 481+ D4EA D0          >                  ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 96 94     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 42 A0                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 0F 97                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 F9 96     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 42 A0                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A 96 94     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 9E 94     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A F6 96     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A F4 96                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 0F 97     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 F8 96    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 9E 94     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 F9 96                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 42 A0                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 0F 97                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 0F 97     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 F9 96                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 55 A0                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1088  D651
1089  D651
1090  D651                  SLOT    LaunchShipAddr
1091  D651                  PAGE    BankLaunchShip
1092  D651                  ORG     LaunchShipAddr
1093  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087              init_countdown          EQU $FF
  33+ C087 00           launch_countdown        DB  $0000
  34+ C088 0E C0        launch_table_idx        DW launchdraw_table
  35+ C08A 00           current_offsetX         db 0
  36+ C08B 00           current_offsetY         db 0
  37+ C08C
  38+ C08C
  39+ C08C              LaunchTubeEdges         MMUSelectLayer2
  39+ C08C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ C090 01 00 00                             ld      bc,$0000
  41+ C093 11 92 01                             ld      de,$0192
  42+ C096 78           .drawLoop1              ld      a,b
  43+ C097 FE 80                                cp      128
  44+ C099 28 25                                jr      z,.DoneEdge
  45+ C09B F5                                   push    af
  46+ C09C C5 D5 C5 D5                          push    bc,,de,,bc,,de
  47+ C0A0 CD 55 E2                             call    l2_draw_horz_dma_bank
  48+ C0A3 D1 C1                                pop     bc,,de
  49+ C0A5 3E FF                                ld      a,$FF
  50+ C0A7 92                                   sub     d
  51+ C0A8 4F                                   ld      c,a
  52+ C0A9 0C                                   inc     c
  53+ C0AA CD 55 E2                             call    l2_draw_horz_dma_bank
  54+ C0AD D1 C1                                pop     bc,,de
  55+ C0AF 78                                   ld      a,b
  56+ C0B0 FE 40                                cp      64
  57+ C0B2 30 06                                jr      nc,.ReduceLoop
  58+ C0B4 14                                   inc     d
  59+ C0B5 14                                   inc     d
  60+ C0B6 F1                                   pop     af
  61+ C0B7 04                                   inc     b
  62+ C0B8 18 DC                                jr      .drawLoop1
  63+ C0BA 15           .ReduceLoop:            dec     d
  64+ C0BB 15                                   dec     d
  65+ C0BC F1                                   pop     af
  66+ C0BD 04                                   inc     b
  67+ C0BE 18 D6                                jr      .drawLoop1
  68+ C0C0 3E 80        .DoneEdge:              ld      a,$80
  69+ C0C2 01 00 00                             ld      bc,$0000                        ; Top Left
  70+ C0C5 11 FF 80                             ld      de,$80FF                        ; Bottom Right
  71+ C0C8 CD 0C E6                             call    l2_draw_diagonal
  72+ C0CB 3E 80                                ld      a,$80
  73+ C0CD 01 00 80                             ld      bc,$8000                        ; Botom Left
  74+ C0D0 11 FF 00                             ld      de,$00FF                        ; Top Right
  75+ C0D3 CD 0C E6                             call    l2_draw_diagonal
  76+ C0D6
  77+ C0D6 01 00 00                             ld      bc,$0000
  78+ C0D9 11 80 00                             ld      DE,$0080
  79+ C0DC 26 60                                ld      h,$60
  80+ C0DE 2E 55                                ld      l,$55
  81+ C0E0 C9                                   ret
  82+ C0E1
  83+ C0E1              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
  83+ C0E1 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  84+ C0E5 21 00 50                             ld      hl,ScreenL1Bottom
  85+ C0E8 11 00 E0                             ld      de,ConsoleImageData
  86+ C0EB 01 00 08                             ld      bc, ScreenL1BottomLen
  87+ C0EE CD FA 8F                             call    memcopy_dma
  88+ C0F1 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  89+ C0F4 11 00 E8                             ld      de,ConsoleAttributes
  90+ C0F7 01 00 01                             ld      bc, ScreenL1AttrBtmLen
  91+ C0FA CD FA 8F                             call    memcopy_dma
  92+ C0FD C9                                   ret
  93+ C0FE
  94+ C0FE              draw_launch_ship:       MMUSelectLayer1
  94+ C0FE ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  95+ C102 CD 47 E0                             call    l1_cls
  96+ C105 CD 52 E0                             call    l1_attr_cls
  97+ C108                                      MMUSelectSpriteBank
  97+ C108 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  98+ C10C CD 3F E1                             call    sprite_cls_cursors
  99+ C10F                                      MMUSelectLayer2
  99+ C10F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 100+ C113 CD 02 E0                             call    asm_l2_double_buffer_on
 101+ C116 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 102+ C118 32 72 E0                             ld      (l2_cls_byte),a
 103+ C11B CD 92 E0                             call    l2_set_color_upper2
 104+ C11E 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 105+ C120 32 72 E0                             ld      (l2_cls_byte),a
 106+ C123 CD BE E0                             call    l2_cls_lower_third
 107+ C126 CD 8C C0                             call    LaunchTubeEdges
 108+ C129 CD E1 C0                             call    LaunchConsole
 109+ C12C              .NextBuffer:            MMUSelectLayer2
 109+ C12C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110+ C130 CD DD E0                             call    l2_flip_buffers
 111+ C133 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 112+ C135 32 72 E0                             ld      (l2_cls_byte),a
 113+ C138 CD 92 E0                             call    l2_set_color_upper2
 114+ C13B 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 115+ C13D 32 72 E0                             ld      (l2_cls_byte),a
 116+ C140 CD BE E0                             call    l2_cls_lower_third
 117+ C143 CD 8C C0                             call    LaunchTubeEdges
 118+ C146 CD E1 C0                             call    LaunchConsole
 119+ C149 3E FF        .SetUpTimers:           ld      a,init_countdown
 120+ C14B 32 87 C0                             ld      (launch_countdown),a
 121+ C14E 21 0E C0                             ld      hl,launchdraw_table
 122+ C151 22 88 C0                             ld      (launch_table_idx),hl
 123+ C154 AF                                   xor     a
 124+ C155 32 8A C0                             ld      (current_offsetX),a
 125+ C158 32 8B C0                             ld      (current_offsetY),a
 126+ C15B AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 127+ C15C
 128+ C15C                                      MaxThrottle
 128+ C15C 3A D3 93    >                        ld      a,(SHIPMAXSPEED)
 128+ C15F 32 D4 93    >                        ld      (DELTA),a
 128+ C162 57          >                        ld      d,a
 128+ C163 1E 04       >                        ld      e,4
 128+ C165 ED 30       >                        mul
 128+ C167 ED 53 D5 93 >                        ld      (DELT4Lo),de
 129+ C16B                                      ZeroThrottle; DEBUG
 129+ C16B AF          >                        xor     a
 129+ C16C 32 D4 93    >                        ld      (DELTA),a
 129+ C16F 32 D5 93    >                        ld      (DELT4Lo),a
 129+ C172 32 D6 93    >                        ld      (DELT4Lo+1),a
 130+ C175 C9                                   ret
 131+ C176
 132+ C176 CD 8C C0     loop_launch_ship:       call    LaunchTubeEdges
 133+ C179 3E FF                                ld      a,init_countdown
 134+ C17B 32 87 C0                             ld      (launch_countdown),a
 135+ C17E 2A 88 C0                             ld      hl,(launch_table_idx)
 136+ C181 4E                                   ld      c,(hl)
 137+ C182 79                                   ld      a,c
 138+ C183 FE FF                                cp      $FF
 139+ C185 28 1E                                jr      z,.FinishedLaunch
 140+ C187 23                                   inc     hl
 141+ C188 46                                   ld      b,(hl)                 ; bc = top left
 142+ C189 23                                   inc     hl
 143+ C18A 5E                                   ld      e,(hl)
 144+ C18B 23                                   inc     hl
 145+ C18C 56                                   ld      d,(hl)                 ;de = width and height
 146+ C18D 23                                   inc     hl
 147+ C18E 7E                                   ld      a,(hl)
 148+ C18F 23                                   inc     hl
 149+ C190 22 88 C0                             ld      (launch_table_idx),hl
 150+ C193 67                                   ld      h,a
 151+ C194 C5 D5                                push    bc,,de
 152+ C196                                      MMUSelectLayer2
 152+ C196 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 153+ C19A CD E6 E1                             call    l2_draw_fill_box
 154+ C19D D1 C1                                pop     bc,,de
 155+ C19F 3E 80                                ld      a,$80
 156+ C1A1 CD F6 E1                             call    l2_draw_box
 157+ C1A4 C9                                   ret
 158+ C1A5 3E 09        .FinishedLaunch:        ld      a,ScreenFront
 159+ C1A7 32 4A 83                             ld      (ScreenTransitionForced),a
 160+ C1AA C9                                   ret
 161+ C1AB
 162+ C1AB
 163+ C1AB
# file closed: ./Transitions/launch_ship.asm
1094  C1AB
1095  C1AB              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1096  C1AB                  SLOT    UniverseBankAddr
1097  C1AB                  PAGE    BankUNIVDATA0
1098  C1AB              	ORG	    UniverseBankAddr,BankUNIVDATA0
1099  C000                  INCLUDE "./Universe/univ_ship_data.asm"
# file opened: ./Universe/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   8+ C000              ; This means each gets its own line list, inwork etc
   9+ C000
  10+ C000              ; "Runtime Ship Data paged into in Bank 7"
  11+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  11+ C004 65 72 73 65
  11+ C008 20 50 47
  12+ C00B              ; NOTE we can cheat and pre allocate segs just using a DS for now
  13+ C00B
  14+ C00B              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  15+ C00B              ; Universe map substibute for INWK
  16+ C00B              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  17+ C00B                                      INCLUDE "./Variables/ShipPosVars.asm"
# file opened: ././Variables/ShipPosVars.asm
   1++C00B              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00B 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00C 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00D 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00E 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C00F 00           UbnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C010 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C011 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C012 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C013 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C014
  12++C014              INWKxlo                     equ UBnKxlo
  13++C014              INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  14++C014              INWKxsgn                    equ UBnKzsgn                ; INWK+2
  15++C014              INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  16++C014              INWKyhi                     equ UbnKyhi                 ; Y Hi???
  17++C014              INWKysgn                    equ UBnKysgn                ; INWK +5
  18++C014              INWKzlo                     equ UBnKzlo                 ; INWK +6
  19++C014              INWKzhi                     equ UBnKzhi                 ; INWK +7
  20++C014              INWKzsgn                    equ UBnKzsgn                ; INWK +8
# file closed: ././Variables/ShipPosVars.asm
  18+ C014                                      INCLUDE "./Variables/RotationMatrixVars.asm"
# file opened: ././Variables/RotationMatrixVars.asm
   1++C014              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C014              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C014 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
   4++C016              UBnkrotmatSidev             equ UBnkrotmatSidevX
   5++C016 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
   6++C018 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
   7++C01A 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
   8++C01C              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
   9++C01C 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  10++C01E 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  11++C020 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  12++C022              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  13++C022 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  14++C024 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  15++C026
# file closed: ././Variables/RotationMatrixVars.asm
  19+ C026                                      INCLUDE "./Variables/AIRuntimeData.asm"
# file opened: ././Variables/AIRuntimeData.asm
   1++C026              ; -- Ship AI data
   2++C026
   3++C026 00           UBnkspeed                   DB  0                       ; INWK +27
   4++C027 00           UBnkAccel                   DB  0                       ; INWK +28
   5++C028 00           UBnkrotXCounter             DB  0                       ; INWK +29
   6++C029 00           UBnkrotZCounter             DB  0                       ; INWK +30
   7++C02A 00           UBnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
   8++C02B              ; Flags work as follows:
   9++C02B              ; 7 - Flag ship to be killed with debris
  10++C02B              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  11++C02B              ; 5 - Ship is exploding if set
  12++C02B              ; 4 -
  13++C02B              ; 3 - Display state - Plot as a Dot
  14++C02B              ; 2 - Nbr of Missiles bit 2
  15++C02B              ; 1 - Nbr of Missiles bit 1
  16++C02B              ; 0 - Nbr of Missiles bit 0
  17++C02B 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  18++C02C 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  19++C02D 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  20++C02E 00           UbnKEnergy                  DB  0                       ; INWK +35
  21++C02F              ; Flags work as follows:
  22++C02F              ;Bit	Description
  23++C02F              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  24++C02F              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  25++C02F              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  26++C02F              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  27++C02F              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  28++C02F              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  29++C02F              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  30++C02F              ;                       Hostile ships will attack us on sight; there are quite a few of them
  31++C02F              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  32++C02F              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  33++C02F              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  34++C02F              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  35++C02F              ;#4	Docking flag        * 0 = not docking * 1 = docking
  36++C02F              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  37++C02F              ;                       This flag is randomly set for traders when they are spawned
  38++C02F              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  39++C02F              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  40++C02F              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  41++C02F              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  42++C02F              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  43++C02F              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  44++C02F              ;                       Ships that are cops: Viper, Transporter
  45++C02F              ;#7	Scooped, docked, escape pod flag
  46++C02F              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  47++C02F              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  48++C02F              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  49++C02F
# file closed: ././Variables/AIRuntimeData.asm
  20+ C02F
  21+ C02F              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  22+ C02F              ;                    [roofv x y z ] roof vector (up)
  23+ C02F              ;                    [sidev x y z ] side vector (right)
  24+ C02F              ;INWKspeed                   equ UBnkspeed               ; INWK +27UBnkTransmat2zLo  DB  0               ; XX16+16
  25+ C02F              ;INWKAccel                   equ UBnkAccel               ; INWK +28          UBnkTransmat2zHi    DB  0               ; XX16+17
  26+ C02F              rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  27+ C02F              rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  28+ C02F              ;--explDsp                     equ UBnkexplDsp             ; INWK +31 clear exploding/display state|missiles UBnkDrawCam0xHi   DB  0               ; XX18+1
  29+ C02F              ;--aiatkecm                    equ UBnkaiatkecm            ; INWK +32 ai_attack_univ_ecm i.e. AI typeUBnkDrawCam0xSgn      DB  0               ; XX18+2
  30+ C02F              ;INWKDrawCam0yLo             equ UBnkDrawCam0yLo         ; INWK +33UBnkDrawCam0yLo   DB  0               ; XX18+3
  31+ C02F              ;INWKDrawCam0yHi             equ UBnkDrawCam0yHi         ; INWK +34UBnkDrawCam0yHi   DB  0               ; XX18+4
  32+ C02F              ;INWKEnergy                  equ UbnKEnergy              ; INWK +35UBnkDrawCam0ySgn      DB  0               ; XX18+5
  33+ C02F              ;UBnkDrawCam0ySgn    equ UbnKEnergy              ; Reycles but not a good idea TODO
  34+ C02F              ;INWKNewb                    equ UbnKNewb                ; INWK +36 INWK+36 \ NEWB bit 7 remove ship?UBnkDrawCam0zLo     DB  0               ; XX18+6
  35+ C02F                                      INCLUDE "./Variables/XX16Vars.asm"
# file opened: ././Variables/XX16Vars.asm
   1++C02F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C02F 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C031              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C031 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C033 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C035 00 00        UBnkTransmatRoofvX          DW 0
   7++C037              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C037 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C039 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03B 00 00        UBnkTransmatNosevX          DW 0
  11++C03D              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C03D 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C03F 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C041 00 00        UbnkTransmatTransX          DW 0
  15++C043 00 00        UbnkTransmatTransY          DW 0
  16++C045 00 00        UbnkTransmatTransZ          DW 0
  17++C047              XX16                        equ UBnkTransmatSidev
  18++C047              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C047 00 00        UbnkTransInvRow0x0          DW 0
  20++C049 00 00        UbnkTransInvRow0x1          DW 0
  21++C04B 00 00        UbnkTransInvRow0x2          DW 0
  22++C04D 00 00        UbnkTransInvRow0x3          DW 0
  23++C04F 00 00        UbnkTransInvRow1y0          DW 0
  24++C051 00 00        UbnkTransInvRow1y1          DW 0
  25++C053 00 00        UbnkTransInvRow1y2          DW 0
  26++C055 00 00        UbnkTransInvRow1y3          DW 0
  27++C057 00 00        UbnkTransInvRow2z0          DW 0
  28++C059 00 00        UbnkTransInvRow2z1          DW 0
  29++C05B 00 00        UbnkTransInvRow2z2          DW 0
  30++C05D 00 00        UbnkTransInvRow2z3          DW 0
  31++C05F
  32++C05F              XX16Inv             equ UbnkTransInvRow0x0
  33++C05F
# file closed: ././Variables/XX16Vars.asm
  36+ C05F                                      INCLUDE "./Variables/XX25Vars.asm"
# file opened: ././Variables/XX25Vars.asm
   1++C05F              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C05F 00           UbnkProjxLo                 DB  0
   3++C060 00           UbnkProjxHi                 DB  0
   4++C061 00           UbnkProjxSgn                DB  0
   5++C062              UbnkProjx                   EQU UbnkProjxLo
   6++C062 00           UbnkProjyLo                 DB  0
   7++C063 00           UbnkProjyHi                 DB  0
   8++C064 00           UbnkProjySgn                DB  0
   9++C065              UbnkProjy                   EQU UbnkProjyLo
  10++C065 00           UbnkProjzLo                 DB  0
  11++C066 00           UbnkProjzHi                 DB  0
  12++C067 00           UbnkProjzSgn                DB  0
  13++C068              UbnkProjz                   EQU UbnkProjzLo
  14++C068              XX25                        EQU UbnkProjxLo
  15++C068
# file closed: ././Variables/XX25Vars.asm
  37+ C068                                      INCLUDE "./Variables/XX18Vars.asm"
# file opened: ././Variables/XX18Vars.asm
   1++C068              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C068 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C069 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C06A 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C06B              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C06B 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C06C 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C06D 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C06E              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C06E 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C06F 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C070 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C071              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C071              XX18                        equ UBnkDrawCam0xLo
  15++C071
# file closed: ././Variables/XX18Vars.asm
  38+ C071
  39+ C071              ; Used to make 16 bit reads a little cleaner in source code
  40+ C071 00 00 00     UbnkZPoint                  DS  3
  41+ C074              UbnkZPointLo                equ UbnkZPoint
  42+ C074              UbnkZPointHi                equ UbnkZPoint+1
  43+ C074              UbnkZPointSign              equ UbnkZPoint+2
  44+ C074                                      INCLUDE "./Variables/XX15Vars.asm"
# file opened: ././Variables/XX15Vars.asm
   1++C074              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C074 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C075 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C076 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C077 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C078 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C079 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C07A
   9++C07A              XX15                        equ UBnkXScaled
  10++C07A              XX15VecX                    equ XX15
  11++C07A              XX15VecY                    equ XX15+1
  12++C07A              XX15VecZ                    equ XX15+2
  13++C07A              UbnkXPoint                  equ XX15
  14++C07A              UbnkXPointLo                equ XX15+0
  15++C07A              UbnkXPointHi                equ XX15+1
  16++C07A              UbnkXPointSign              equ XX15+2
  17++C07A              UbnkYPoint                  equ XX15+3
  18++C07A              UbnkYPointLo                equ XX15+3
  19++C07A              UbnkYPointHi                equ XX15+4
  20++C07A              UbnkYPointSign              equ XX15+5
  21++C07A              ; Repurposed XX15 pre clip plines
  22++C07A              UbnkPreClipX1               equ XX15+0
  23++C07A              UbnkPreClipY1               equ XX15+2
  24++C07A              UbnkPreClipX2               equ XX15+4
  25++C07A              UbnkPreClipY2               equ XX15+6
  26++C07A              ; Repurposed XX15 post clip lines
  27++C07A              UBnkNewX1                   equ XX15+0
  28++C07A              UBnkNewY1                   equ XX15+1
  29++C07A              UBnkNewX2                   equ XX15+2
  30++C07A              UBnkNewY2                   equ XX15+3
  31++C07A              ; Repurposed XX15
  32++C07A              regXX15fx                   equ UBnkXScaled
  33++C07A              regXX15fxSgn                equ UBnkXScaledSign
  34++C07A              regXX15fy                   equ UBnkYScaled
  35++C07A              regXX15fySgn                equ UBnkYScaledSign
  36++C07A              regXX15fz                   equ UBnkZScaled
  37++C07A              regXX15fzSgn                equ UBnkZScaledSign
  38++C07A              ; Repurposed XX15
  39++C07A              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C07A              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C07A              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C07A              ; After clipping the coords are two 8 bit pairs
  43++C07A              UBnkPoint1Clipped           equ UBnkXScaled
  44++C07A              UBnkPoint2Clipped           equ UBnkYScaled
  45++C07A              ; Repurposed XX15 when plotting lines
  46++C07A              ; Repurposed XX15 before calling clip routine
  47++C07A              UBnkX1                      equ XX15
  48++C07A              UBnKx1Lo                    equ XX15
  49++C07A              UBnKx1Hi                    equ XX15+1
  50++C07A              UBnkY1                      equ XX15+2
  51++C07A              UbnKy1Lo                    equ XX15+2
  52++C07A              UBnkY1Hi                    equ XX15+3
  53++C07A              UBnkX2                      equ XX15+4
  54++C07A              UBnkX2Lo                    equ XX15+4
  55++C07A              UBnkX2Hi                    equ XX15+5
  56++C07A
# file closed: ././Variables/XX15Vars.asm
  45+ C07A                                      INCLUDE "./Variables/XX12Vars.asm"
# file opened: ././Variables/XX12Vars.asm
   1++C07A              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07A              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07A 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C07B 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C07C 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C07D 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C07E 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C07F 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C080 00 00 00...  XX12Save                    DS  6
  10++C086 00 00 00...  XX12Save2                   DS  6
  11++C08C              XX12                        equ UBnkXX12xLo
  12++C08C              varXX12                     equ UBnkXX12xLo
  13++C08C              ; Repurposed XX12 when plotting lines
  14++C08C              UBnkY2                      equ XX12+0
  15++C08C              UbnKy2Lo                    equ XX12+0
  16++C08C              UBnkY2Hi                    equ XX12+1
  17++C08C              UBnkDeltaXLo                equ XX12+2
  18++C08C              UBnkDeltaXHi                equ XX12+3
  19++C08C              UBnkDeltaYLo                equ XX12+4
  20++C08C              UBnkDeltaYHi                equ XX12+5
  21++C08C              UbnkGradient                equ XX12+2
  22++C08C              UBnkTemp1                   equ XX12+2
  23++C08C              UBnkTemp1Lo                 equ XX12+2
  24++C08C              UBnkTemp1Hi                 equ XX12+3
  25++C08C              UBnkTemp2                   equ XX12+3
  26++C08C              UBnkTemp2Lo                 equ XX12+3
  27++C08C              UBnkTemp2Hi                 equ XX12+4
  28++C08C
# file closed: ././Variables/XX12Vars.asm
  46+ C08C
  47+ C08C
  48+ C08C              ; Post clipping the results are now 8 bit
  49+ C08C 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  50+ C08D
  51+ C08D 00           UBnkProjectedY              DB  0
  52+ C08E 00           UBnkProjectedX              DB  0
  53+ C08F              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  54+ C08F 00 00 00...  XX15Save                    DS  8
  55+ C097 00 00 00...  XX15Save2                   DS  8
  56+ C09F 00           VarBackface                 DB 0
  57+ C0A0              ; Heap (or array) information for lines and normals
  58+ C0A0              ; Coords are stored XY,XY,XY,XY
  59+ C0A0              ; Normals
  60+ C0A0              ; This needs re-oprganising now.
  61+ C0A0              ; Runtime Calculation Store
  62+ C0A0
  63+ C0A0              FaceArraySize               equ 30
  64+ C0A0              EdgeHeapSize                equ 40
  65+ C0A0              NodeArraySize               equ 40
  66+ C0A0              LineArraySize               equ 50
  67+ C0A0              ; Storage arrays for data
  68+ C0A0              ; Structure of arrays
  69+ C0A0              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  70+ C0A0              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  71+ C0A0              ; NodeArray         -  4 bytes per element      0           1            2          3
  72+ C0A0              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  73+ C0A0              ; Line Array        -  4 bytes per eleement     0           1            2          3
  74+ C0A0              ;                                               X1          Y1           X2         Y2
  75+ C0A0 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  76+ C0BE 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  77+ C15E 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  78+ C1FE 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  79+ C2C6              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  80+ C2C6 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  81+ C2EE              ; Array current Lengths
  82+ C2EE 00           UbnkFaceVisArrayLen         DS 1
  83+ C2EF 00           UBnkNodeArrayLen            DS 1
  84+ C2F0 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  85+ C2F1 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  86+ C2F2              XX20                        equ UbnkLineArrayLen
  87+ C2F2              varXX20                     equ UbnkLineArrayLen
  88+ C2F2
  89+ C2F2
  90+ C2F2 00           UbnkEdgeHeapSize            DS 1
  91+ C2F3 00           UbnkEdgeHeapBytes           DS 1
  92+ C2F4 00           UBnkLinesHeapLen            DS 1
  93+ C2F5 00           UbnKEdgeHeapCounter         DS 1
  94+ C2F6 00           UbnKEdgeRadius              DS 1
  95+ C2F7 00           UbnKEdgeShipType            DS 1
  96+ C2F8 00           UbnKEdgeExplosionType       DS 1
  97+ C2F9
  98+ C2F9              ; Node heap is used to write out transformed Vertexs
  99+ C2F9
 100+ C2F9              ; Lines
 101+ C2F9 00 00 00     UBnkXX19                    DS  3
 102+ C2FC
 103+ C2FC
 104+ C2FC              ; Used to make 16 bit reads a little cleaner in source code
 105+ C2FC
 106+ C2FC              ;rotmatFx            equ rotmat0xHi
 107+ C2FC              ;rotmatFy            equ rotmat0yHi
 108+ C2FC              ;rotmatFz            equ rotmat0zHi
 109+ C2FC              ;rotmatUx            equ rotmat1xHi
 110+ C2FC              ;rotmatUy            equ rotmat1yHi
 111+ C2FC              ;rotmatUz            equ rotmat1zHi
 112+ C2FC
 113+ C2FC 00           UbnkShipType                DB  0
 114+ C2FD
 115+ C2FD 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 116+ C315              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 117+ C315              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 118+ C315              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 119+ C315              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 120+ C315              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 121+ C315              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 122+ C315              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 123+ C315              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 124+ C315              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 125+ C315              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 126+ C315              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 127+ C315              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 128+ C315              DotAddr                     equ UBnkHullCopy + DotOffset
 129+ C315              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 130+ C315              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 131+ C315              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 132+ C315              QAddr                       equ UBnkHullCopy + QOffset
 133+ C315              LaserAddr                   equ UBnkHullCopy + LaserOffset
 134+ C315              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 135+ C315              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 136+ C315              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 137+ C315              ; Static Ship Data. This is copied in when creating the universe object
 138+ C315              XX0                         equ UBnkHullCopy        ; general hull index pointer
 139+ C315 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 140+ C441 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 141+ C8F1 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 142+ CA1D 0C           OrthagCountdown             DB  12
 143+ CA1E
 144+ CA1E              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 145+ CA1E              UBnk_Data_len               EQU $ - StartOfUniv
 146+ CA1E
 147+ CA1E
 148+ CA1E 47           RequAby256DivQOLD:      ld      b,a ;.LL28  BFRDIV R=A*256/Q   byte from remainder of division
 149+ CA1F 3A D8 93                             ld      a,(varQ)
 150+ CA22 4F                                   ld      c,a
 151+ CA23 78                                   ld      a,b
 152+ CA24
 153+ CA24
 154+ CA24 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 155+ CA27 11 1E 0A                             ld      de,UBnk_Data_len
 156+ CA2A AF                                   xor     a
 157+ CA2B CD D4 8F                             call    memfill_dma
 158+ CA2E C9                                   ret
 159+ CA2F
 160+ CA2F              ;divdide by 16 using undocumented instrunctions
 161+ CA2F              ;Input: BC = Dividend, DE = Divisor, HL = 0
 162+ CA2F              ;Output: BC = Quotient, HL = Remainder
 163+ CA2F 47           PROJ256mulAdivQ:        ld      b,a
 164+ CA30 0E 00                                ld      c,0
 165+ CA32 16 00                                ld      d,0
 166+ CA34 3A D8 93                             ld      a,(varQ)
 167+ CA37 5F                                   ld      e,a
 168+ CA38 21 00 00     PROJDIV16UNDOC:         ld      hl,0
 169+ CA3B 78                                   ld      a,b
 170+ CA3C 06 10                                ld      b,16
 171+ CA3E CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
 172+ CA40 17                                   rla             ; ...
 173+ CA41 ED 6A                                adc     hl,hl       ; ...
 174+ CA43 ED 52                                sbc     hl,de       ; ...
 175+ CA45 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
 176+ CA47 19                                   add     hl,de       ; ...
 177+ CA48 0D                                   dec     c       ; ...
 178+ CA49 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
 179+ CA4B 79                                   ld      a,c
 180+ CA4C 32 D9 93                             ld      (varR),a
 181+ CA4F C9                                   ret
 182+ CA50              ;
 183+ CA50                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 184+ CA50              ;Output: BC = Quotient, HL = Remainder
 185+ CA50
 186+ CA50              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 187+ CA50              ;OUTPUTS:   cahl = quotient cde = divisor
 188+ CA50 32 7F 93     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 189+ CA53                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 189+ CA53 2A 11 C0    >               ld       hl,(UBnKzlo)
 189+ CA56 22 D8 93    >               ld       (varQ),hl
 190+ CA59 3A 13 C0                             ld      a,(UBnKzsgn)                    ;
 191+ CA5C 32 DA 93                             ld      (varS),a                        ; S = inkw z sign
 192+ CA5F ED 5B 7D 93  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 193+ CA63 7B                                   ld      a,e                             ; num lo
 194+ CA64 F6 01                                or      1                               ; must be at least 1
 195+ CA66 32 7D 93                             ld      (varP),a                        ; store
 196+ CA69 5F                                   ld      e,a                             ; update DE too
 197+ CA6A 3A 7F 93                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 198+ CA6D 21 DA 93                             ld      hl,varS                         ; hl = address of VarS
 199+ CA70 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 200+ CA71 E6 80                                and     $80                             ;
 201+ CA73 32 F8 93                             ld      (varT),a                        ; T = Sign bit of A
 202+ CA76 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 203+ CA79 3A 7F 93                             ld      a,(varPhi2)                     ;
 204+ CA7C E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 205+ CA7E              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 205+ CA7E FE 40       >                        cp     $40
 205+ CA80 D2 8E CA    >                        jp		nc,DV14
 206+ CA83                                      ShiftDELeft1                            ; de (or P,P1) > 1
 206+ CA83 CB 23       >			   sla e
 206+ CA85 CB 12       >			   rl  d
 207+ CA87 CB 17                                rl      a                               ; and accumulator as 3rd byte
 208+ CA89 FD 2C                                inc     iyl
 209+ CA8B C2 7E CA                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 210+ CA8E 32 7F 93     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 211+ CA91 ED 53 7D 93                          ld      (varP),de                       ; store off the value so far
 212+ CA95 3A DA 93                             ld      a,(varS)                        ; zsign
 213+ CA98 E6 7F                                and     $7F                             ; denom sg7
 214+ CA9A                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 215+ CA9A 2A D8 93                             ld      hl,(varQ)                       ; demon lo
 216+ CA9D FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 217+ CA9F                                      ShiftHLLeft1
 217+ CA9F CB 25       >			   sla l
 217+ CAA1 CB 14       >			   rl  h
 218+ CAA3 CB 17                                rl      a                               ; mulitply QRS by 2
 219+ CAA5 F2 9D CA                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 220+ CAA8 22 D8 93     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 221+ CAAB 32 D8 93                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 222+ CAAE 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 223+ CAB0 32 D9 93                             ld      (varR),a                        ;  R
 224+ CAB3 3A 7F 93                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 225+ CAB6 CD 2F CA                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 226+ CAB9 3E 00                                ld      a,0
 227+ CABB 32 F0 93                             ld      (varKp1),a
 228+ CABE 32 F1 93                             ld      (varKp2),a
 229+ CAC1 32 F2 93                             ld      (varKp3),a                      ; clear out K+1 to K+3
 230+ CAC4 FD 7D                                ld      a,iyl                           ; Y counter for scale
 231+ CAC6                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 231+ CAC6 CB 7F       >                        bit 	7,a
 231+ CAC8 CA F3 CA    >                        jp      z,DV12
 232+ CACB 3A D9 93                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 233+ CACE ED 5B EF 93                          ld      de,(varK)                       ; d= k1
 234+ CAD2 2A F3 93                             ld      hl,(varK2)                      ; h = k3, l = k2
 235+ CAD5 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 236+ CAD6 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 237+ CAD8 CB 12                                rl      d                               ; k1
 238+ CADA CB 15                                rl      l                               ; k2
 239+ CADC CB 14                                rl      h                               ; k3
 240+ CADE FD 2C                                inc     iyl
 241+ CAE0 20 F4                                jr      nz,DVL8                         ;
 242+ CAE2 ED 53 EF 93  DVL8Save:               ld      (varK),de
 243+ CAE6 22 F3 93                             ld      (varK2),hl                      ; save back K0 to k3
 244+ CAE9 3A F8 93                             ld      a,(varT)
 245+ CAEC 4F                                   ld      c,a                             ; get varT into c reg
 246+ CAED 7C                                   ld      a,h                             ; a= k3 (sign)
 247+ CAEE B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 248+ CAEF 32 02 94                             ld      (varK3),a                       ; load sign bit back into K3
 249+ CAF2 C9                                   ret
 250+ CAF3              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 250+ CAF3 FE 00       >				cp	0
 250+ CAF5 CA 0C CB    >				jp	z,DV13
 251+ CAF8 3A D9 93                             ld      a,(varR)                        ; Reduce Remainder
 252+ CAFB CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 253+ CAFD FD 2D                                dec     iyl
 254+ CAFF C2 FB CA                             jp      nz,DVL10                        ; loop y reduce until y is zero
 255+ CB02 32 EF 93                             ld      (varK),a                        ; k Lo
 256+ CB05                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 256+ CB05 3A F8 93    >               ld       a,(varT)
 256+ CB08 32 F2 93    >               ld       (varKp3),a
 257+ CB0B C9                                   ret
 258+ CB0C              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 258+ CB0C 3A D9 93    >               ld       a,(varR)
 258+ CB0F 32 EF 93    >               ld       (varK),a
 259+ CB12                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 259+ CB12 3A F8 93    >               ld       a,(varT)
 259+ CB15 32 F2 93    >               ld       (varKp3),a
 260+ CB18 C9                                   ret
 261+ CB19
 262+ CB19
 263+ CB19 CD 50 CA     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 264+ CB1C 3A F2 93                             ld      a,(varKp3)
 265+ CB1F E6 7F                                and     $7F
 266+ CB21 21 F1 93                             ld      hl,varKp2
 267+ CB24 B6                                   or      (hl)
 268+ CB25 C2 3A CB                             jp      nz,PL44TooBig
 269+ CB28 3A F0 93                             ld      a,(varKp1)
 270+ CB2B FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 271+ CB2D 30 0B                                jr      nc,PL44TooBig
 272+ CB2F                                      ClearCarryFlag                          ; we have a good result regardless
 272+ CB2F B7          >				or a
 273+ CB30 2A EF 93                             ld      hl,(varK)                       ; get K (0 1)
 274+ CB33 3A F2 93                             ld      a,(varKp3)                      ; if sign bit high?
 275+ CB36 CB 7F                                bit     7,a
 276+ CB38 C8                                   ret     z                               ; no so we can just return
 277+ CB39 C9           PL44:                   ret
 278+ CB3A 37           PL44TooBig:             scf
 279+ CB3B C9                                   ret
 280+ CB3C
 281+ CB3C                                      include "./Maths/ADDHLDESignBC.asm"
# file opened: ././Maths/ADDHLDESignBC.asm
   1++CB3C              ;; calcs HLB + DEC where B and C are signs
   2++CB3C              ;; result HL with A as sign
   3++CB3C              ;; special handling if result is zero forcign sign bit to be zero
   4++CB3C 78           ADDHLDESignBC:          ld      a,b
   5++CB3D E6 80                                and     SignOnly8Bit
   6++CB3F A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7++CB40                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7++CB40 FA 4E CB    >                        jp		m, ADDHLDEsBCOppSGN
   8++CB43 78           ADDHLDEsBCSameSigns:    ld      a,b
   9++CB44 B1                                   or      c
  10++CB45                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10++CB45 FA 4A CB    >                        jp		m, ADDHLDEsBCSameNeg
  11++CB48 19                                   add     hl,de                       ; both positive so a will already be zero
  12++CB49 C9                                   ret
  13++CB4A 19           ADDHLDEsBCSameNeg:      add     hl,de
  14++CB4B 78                                   ld      a,b
  15++CB4C B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16++CB4D C9                                   ret
  17++CB4E B7           ADDHLDEsBCOppSGN:       or      a
  18++CB4F ED 52                                sbc     hl,de
  19++CB51 38 02                                jr      c,ADDHLDEsBCOppInvert
  20++CB53 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21++CB54 C9                                   ret
  22++CB55              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22++CB55 AF          >                xor a
  22++CB56 95          >                sub l
  22++CB57 6F          >                ld l,a
  22++CB58 9F          >                sbc a,a
  22++CB59 94          >                sub h
  22++CB5A 67          >                ld h,a
  23++CB5B 78                                   ld      a,b
  24++CB5C EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25++CB5E C9                                   ret
  26++CB5F
# file closed: ././Maths/ADDHLDESignBC.asm
 282+ CB5F
 283+ CB5F 7C           ADDHLDESignedv3:        ld      a,h
 284+ CB60 E6 80                                and     SignOnly8Bit
 285+ CB62 47                                   ld      b,a                         ;save sign bit in b
 286+ CB63 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 287+ CB64                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 287+ CB64 FA 7C CB    >                        jp		m, ADDHLDEOppSGN
 288+ CB67 78           ADDHLDESameSigns:       ld      a,b
 289+ CB68 B2                                   or      d
 290+ CB69                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 290+ CB69 FA 6E CB    >                        jp		m, ADDHLDESameNeg
 291+ CB6C 19                                   add     hl,de
 292+ CB6D C9                                   ret
 293+ CB6E 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 294+ CB6F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 295+ CB71 67                                   ld      h,a
 296+ CB72 7A                                   ld      a,d
 297+ CB73 E6 7F                                and     SignMask8Bit
 298+ CB75 57                                   ld      d,a
 299+ CB76 19                                   add     hl,de
 300+ CB77 3E 80                                ld      a,SignOnly8Bit
 301+ CB79 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 302+ CB7A 67                                   ld      h,a
 303+ CB7B C9                                   ret
 304+ CB7C 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 305+ CB7D E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 306+ CB7F 67                                   ld      h,a
 307+ CB80 7A                                   ld      a,d
 308+ CB81 E6 7F                                and     SignMask8Bit
 309+ CB83 57                                   ld      d,a
 310+ CB84 B7                                   or      a
 311+ CB85 ED 52                                sbc     hl,de
 312+ CB87 38 04                                jr      c,ADDHLDEOppInvert
 313+ CB89 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 314+ CB8A B4                                   or      h
 315+ CB8B 67                                   ld      h,a                         ; set the previou sign value
 316+ CB8C C9                                   ret
 317+ CB8D              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 317+ CB8D AF          >                xor a
 317+ CB8E 95          >                sub l
 317+ CB8F 6F          >                ld l,a
 317+ CB90 9F          >                sbc a,a
 317+ CB91 94          >                sub h
 317+ CB92 67          >                ld h,a
 318+ CB93 78                                   ld      a,b
 319+ CB94 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 320+ CB96 B4                                   or      h
 321+ CB97 67                                   ld      h,a                         ; recover sign
 322+ CB98 C9                                   ret
 323+ CB99
 324+ CB99              ; we could cheat, flip the sign of DE and just add but its not very optimised
 325+ CB99 7C           SUBHLDESignedv3:        ld      a,h
 326+ CB9A E6 80                                and     SignOnly8Bit
 327+ CB9C 47                                   ld      b,a                         ;save sign bit in b
 328+ CB9D AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 329+ CB9E                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 329+ CB9E FA CC CB    >                        jp		m, SUBHLDEOppSGN
 330+ CBA1 78           SUBHLDESameSigns:       ld      a,b
 331+ CBA2 B2                                   or      d
 332+ CBA3                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 332+ CBA3 FA AD CB    >                        jp		m, SUBHLDESameNeg
 333+ CBA6 B7                                   or      a
 334+ CBA7 ED 52                                sbc     hl,de
 335+ CBA9                                      JumpIfNegative SUBHLDESameOvrFlw
 335+ CBA9 FA C0 CB    >                        jp		m, SUBHLDESameOvrFlw
 336+ CBAC C9                                   ret
 337+ CBAD 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 338+ CBAE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 339+ CBB0 67                                   ld      h,a
 340+ CBB1 7A                                   ld      a,d
 341+ CBB2 E6 7F                                and     SignMask8Bit
 342+ CBB4 57                                   ld      d,a
 343+ CBB5 B7                                   or      a
 344+ CBB6 ED 52                                sbc     hl,de
 345+ CBB8                                      JumpIfNegative SUBHLDESameOvrFlw
 345+ CBB8 FA C0 CB    >                        jp		m, SUBHLDESameOvrFlw
 346+ CBBB 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 347+ CBBC F6 80                                or      SignOnly8Bit
 348+ CBBE 67                                   ld      h,a
 349+ CBBF C9                                   ret
 350+ CBC0              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 350+ CBC0 AF          >                xor a
 350+ CBC1 95          >                sub l
 350+ CBC2 6F          >                ld l,a
 350+ CBC3 9F          >                sbc a,a
 350+ CBC4 94          >                sub h
 350+ CBC5 67          >                ld h,a
 351+ CBC6 78                                   ld      a,b
 352+ CBC7 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 353+ CBC9 B4                                   or      h
 354+ CBCA 67                                   ld      h,a                         ; recover sign
 355+ CBCB C9                                   ret
 356+ CBCC B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 357+ CBCD 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 358+ CBCE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 359+ CBD0 67                                   ld      h,a
 360+ CBD1 7A                                   ld      a,d
 361+ CBD2 E6 7F                                and     SignMask8Bit
 362+ CBD4 57                                   ld      d,a
 363+ CBD5 19                                   add     hl,de
 364+ CBD6 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 365+ CBD7 B4                                   or      h
 366+ CBD8 67                                   ld      h,a                         ; set the previou sign value
 367+ CBD9 C9                                   ret
 368+ CBDA
 369+ CBDA
 370+ CBDA              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 370+ CBDA CB 7C       >                        bit 	7,h
 370+ CBDC C2 ED CB    >                        jp      nz,SBCHLDEhlNeg
 371+ CBDF              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 371+ CBDF CB 7C       >                        bit 	7,h
 371+ CBE1 C2 ED CB    >                        jp      nz,SBCHLDEhlNeg
 372+ CBE4 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 373+ CBE6 C9                                   ret
 374+ CBE7 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 375+ CBE9 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 376+ CBEA CB FA                                set     7,d
 377+ CBEC C9                                   ret
 378+ CBED CB BC        SBCHLDEhlNeg:           res     7,h
 379+ CBEF                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 379+ CBEF CB 7A       >                        bit 	7,d
 379+ CBF1 C2 F9 CB    >                        jp      nz,SBCHLDEhlNegdeNeg
 380+ CBF4 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 381+ CBF6 CB FC                                set     7,h
 382+ CBF8 C9                                   ret
 383+ CBF9 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 384+ CBFB 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 385+ CBFC CB FA                                set     7,d
 386+ CBFE CB FC                                set     7,h
 387+ CC00 C9                                   ret
 388+ CC01
 389+ CC01              ; Roate around axis
 390+ CC01              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 391+ CC01              ; so the axis x1 points to roofv  x , y or z
 392+ CC01              ;             x2           nosev or sidev  x, y or z
 393+ CC01              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 394+ CC01              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 395+ CC01              ; var RAT2 gives direction
 396+ CC01              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 397+ CC01              ;-Set up S R -----------------------------------------
 398+ CC01              ; optimised we don't deal with sign here just the value of roof axis / 512
 399+ CC01 2A 02 93     MVS5XRotateXAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 400+ CC04 5E                                   ld      e,(hl)
 401+ CC05 23                                   inc     hl
 402+ CC06 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 403+ CC07 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 404+ CC08 7C                                   ld      a,h
 405+ CC09 E6 80                                and     SignOnly8Bit
 406+ CC0B FD 67                                ld      iyh,a           ; iyh = sign Axis1
 407+ CC0D 7C                                   ld      a,h
 408+ CC0E E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 409+ CC10 CB 3F                                srl     a               ; a = Axis1/2
 410+ CC12 5F                                   ld      e,a             ;
 411+ CC13 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 412+ CC15 57                                   ld      d,a             ; de = signed Axis1 / 512
 413+ CC16 B7                                   or      a               ; clear carry
 414+ CC17 CD 99 CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 415+ CC1A              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 416+ CC1A E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 417+ CC1B 7D                                   ld      a,l
 418+ CC1C 32 D9 93                             ld      (varR),a
 419+ CC1F 7C                                   ld      a,h
 420+ CC20 32 DA 93                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 421+ CC23              ;-calculate roofv latter half of calc
 422+ CC23 2A 04 93                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 423+ CC26 5E                                   ld      e,(hl)
 424+ CC27 23                                   inc     hl
 425+ CC28 56                                   ld      d,(hl)          ; de = value of roof axis
 426+ CC29 7A                                   ld      a,d
 427+ CC2A E6 80                                and     SignOnly8Bit
 428+ CC2C FD 67                                ld      iyh,a           ; save sign
 429+ CC2E 7A                                   ld      a,d
 430+ CC2F E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 431+ CC31 57                                   ld      d,a             ; de = abs (nosev)
 432+ CC32                                      ShiftDERight1
 432+ CC32 CB 3A       >			   srl d
 432+ CC34 CB 1B       >			   rr  e
 433+ CC36                                      ShiftDERight1
 433+ CC36 CB 3A       >			   srl d
 433+ CC38 CB 1B       >			   rr  e
 434+ CC3A                                      ShiftDERight1
 434+ CC3A CB 3A       >			   srl d
 434+ CC3C CB 1B       >			   rr  e
 435+ CC3E                                      ShiftDERight1           ; de = nosev /16 unsigned
 435+ CC3E CB 3A       >			   srl d
 435+ CC40 CB 1B       >			   rr  e
 436+ CC42 3A EE 93                             ld      a,(varRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 437+ CC45 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 438+ CC47 E6 80                                and     SignOnly8Bit
 439+ CC49 B2                                   or      d
 440+ CC4A 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 441+ CC4B              ;;; ld      a,e
 442+ CC4B              ;;;     or      iyh
 443+ CC4B              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 444+ CC4B              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 445+ CC4B E1                                   pop     hl              ; get back RS POP ID 1
 446+ CC4C                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 447+ CC4C              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 448+ CC4C CD 5F CB                             call    ADDHLDESignedv3 ; do add using hl and de
 449+ CC4F E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 450+ CC50              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 451+ CC50              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 452+ CC50 2A 04 93                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 453+ CC53 5E                               ld      e,(hl)
 454+ CC54 23                               inc     hl
 455+ CC55 56                               ld      d,(hl)
 456+ CC56 EB                               ex      de,hl
 457+ CC57 7C                               ld      a,h
 458+ CC58 E6 80                            and     $80
 459+ CC5A FD 67                            ld      iyh,a
 460+ CC5C 7C                               ld      a,h
 461+ CC5D E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 462+ CC5F CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 463+ CC61 5F                               ld      e,a
 464+ CC62 FD 7C                            ld      a,iyh
 465+ CC64 57                               ld      d,a
 466+ CC65 B7                               or      a               ; clear carry
 467+ CC66 CD 99 CB                         call    SUBHLDESignedv3
 468+ CC69              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 469+ CC69 E5                               push    hl              ; save hl on stack  PUSH ID 3
 470+ CC6A 7D                               ld      a,l
 471+ CC6B 32 7D 93                         ld      (varP),a        ; p = low of resuilt
 472+ CC6E 7C                               ld      a,h
 473+ CC6F E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 474+ CC71 32 F8 93                         ld      (varT),a        ; t = high of result
 475+ CC74              ;-- Set up TQ
 476+ CC74 2A 02 93                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 477+ CC77              ;   ld      hl,(varAxis2)   ; work on nosev again
 478+ CC77 5E                               ld      e,(hl)
 479+ CC78 23                               inc     hl
 480+ CC79 56                               ld      d,(hl)
 481+ CC7A 7A                               ld      a,d
 482+ CC7B E6 80                            and     $80
 483+ CC7D FD 67                            ld      iyh,a           ; save sign
 484+ CC7F 7A                               ld      a,d
 485+ CC80 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 486+ CC82 57                               ld      d,a             ; de = abs (nosev)
 487+ CC83                                  ShiftDERight1
 487+ CC83 CB 3A       >			   srl d
 487+ CC85 CB 1B       >			   rr  e
 488+ CC87                                  ShiftDERight1
 488+ CC87 CB 3A       >			   srl d
 488+ CC89 CB 1B       >			   rr  e
 489+ CC8B                                  ShiftDERight1
 489+ CC8B CB 3A       >			   srl d
 489+ CC8D CB 1B       >			   rr  e
 490+ CC8F                                  ShiftDERight1           ; de = nosev /16 unsigned
 490+ CC8F CB 3A       >			   srl d
 490+ CC91 CB 1B       >			   rr  e
 491+ CC93 3A EE 93                         ld      a,(varRAT2)
 492+ CC96 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 493+ CC98 E6 80                            and     $80
 494+ CC9A B2                               or      d
 495+ CC9B 57                               ld      d,a
 496+ CC9C              ;;; ld      a,e
 497+ CC9C              ;;;     or      iyh
 498+ CC9C              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 499+ CC9C E1                               pop     hl              ; get back RS   POP ID 3
 500+ CC9D              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 501+ CC9D CD 99 CB                         call    SUBHLDESignedv3 ; do add using hl and de
 502+ CCA0              ;-- Update nosev ---------------------------------------
 503+ CCA0 EB                               ex      de,hl           ; save hl to de
 504+ CCA1 2A 04 93                         ld      hl,(varAxis2)
 505+ CCA4 73                               ld      (hl),e
 506+ CCA5 23                               inc     hl
 507+ CCA6 72                               ld      (hl),d          ; copy result into nosev
 508+ CCA7              ;-- Update roofv ---------------------------------------
 509+ CCA7 D1                               pop     de              ; get calc saved on stack POP ID 2
 510+ CCA8 2A 02 93                         ld      hl,(varAxis1)
 511+ CCAB 73                               ld      (hl),e
 512+ CCAC 23                               inc     hl
 513+ CCAD 72                               ld      (hl),d          ; copy result into nosev
 514+ CCAE C9                               ret
 515+ CCAF
 516+ CCAF                                  include "Universe/InitialiseOrientation.asm"
# file opened: ./Universe/InitialiseOrientation.asm
   1++CCAF              InitialiseOrientation:
   2++CCAF              ZI1:
   3++CCAF              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++CCAF              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCAF              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   6++CCAF 21 00 00         ld      hl, 0
   7++CCB2 22 16 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCB5 22 18 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCB8 22 1A C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCBB 22 1E C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCBE 22 20 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCC1 22 22 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CCC4 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CCC7                  ;ld      hl,1
  15++CCC7 22 14 C0         ld      (UBnkrotmatSidevX),hl
  16++CCCA 22 1C C0         ld      (UBnkrotmatRoofvY),hl
  17++CCCD 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CCD0 22 24 C0         ld      (UBnkrotmatNosevZ),hl
  19++CCD3 C9               ret
  20++CCD4
# file closed: ./Universe/InitialiseOrientation.asm
 517+ CCD4              ;----------------------------------------------------------------------------------------------------------------------------------
 518+ CCD4              OrientateVertex:
 519+ CCD4
 520+ CCD4              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 521+ CCD4              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 522+ CCD4              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 523+ CCD4              ;
 524+ CCD4
 525+ CCD4              ;----------------------------------------------------------------------------------------------------------------------------------
 526+ CCD4              TransposeVertex:
 527+ CCD4              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 528+ CCD4              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 529+ CCD4              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 530+ CCD4              VectorToVertex:
 531+ CCD4              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 532+ CCD4              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 533+ CCD4              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 534+ CCD4
 535+ CCD4              Project:
 536+ CCD4 2A 0B C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 537+ CCD7 22 7D 93                             ld      (varP),hl
 538+ CCDA 3A 0D C0                             ld      a,(UBnKxsgn)
 539+ CCDD CD 19 CB                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 540+ CCE0 D8                                   ret     c                               ; carry means don't print
 541+ CCE1 2A EF 93                             ld      hl,(varK)                       ; hl = k (0 1)
 542+ CCE4                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 543+ CCE4 3E 80                                ld      a,ViewCenterX
 544+ CCE6 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 545+ CCE8 22 02 94                             ld      (varK3),hl                      ; K3 = X position on screen
 546+ CCEB 2A 0E C0     ProjectY:               ld      hl,(UBnKylo)
 547+ CCEE 22 7D 93                             ld      (varP),hl
 548+ CCF1 3A 10 C0                             ld      a,(UBnKysgn)
 549+ CCF4 CD 19 CB                             call    PLS6
 550+ CCF7 D8                                   ret     c
 551+ CCF8 2A EF 93                             ld      hl,(varK)                       ; hl = k (0 1)
 552+ CCFB 3E 40                                ld      a,ViewCenterY
 553+ CCFD ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 554+ CCFF 22 08 94                             ld      (varK4),hl                      ; K3 = X position on screen
 555+ CD02 C9                                   ret
 556+ CD03              ;--------------------------------------------------------------------------------------------------------
 557+ CD03                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CD03              ;
   2++CD03              ; EraseOldLines:
   3++CD03              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CD03              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CD03              ;	 	loop + 4
   6++CD03              ; Return
   7++CD03
   8++CD03              EraseOldLines:
   9++CD03              EE51:										; if bit3 set draw lines in XX19 heap
  10++CD03              	ReturnOnMemBitClear UBnkexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CD03 3A 2A C0    >                        ld     a,(UBnkexplDsp)
  10++CD06 CB 5F       >                        bit 	3,a
  10++CD08 C8          >                        ret		z
  11++CD09 CB DF        	set		3,a
  12++CD0B 32 2A C0     	ld		(UBnkexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CD0E C3 CE E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CD11              ; We use the ret from the clearLines so not needed here
  15++CD11
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 558+ CD11                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CD11              ;TrimToScreenGrad:
   2++CD11              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CD11              ;ret
   4++CD11              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CD11              ;TODO        bit     7,a
   6++CD11              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CD11              ;TODO        ld      a,h
   8++CD11              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CD11              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CD11              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CD11
  12++CD11              ;18                      CLC
  13++CD11              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CD11              ;85 36                   STA &36			 \ XX15+2
  15++CD11              ;98                      TYA 			 \ step Y1 hi
  16++CD11              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CD11              ;85 37                   STA &37			 \ XX15+3
  18++CD11              ;A9 00                   LDA #0			 \ xleft min
  19++CD11              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CD11              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CD11              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CD11              ;	.LL119	\ x1 hi +ve from LL118
  23++CD11              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CD11              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CD11              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CD11              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CD11              ;8A                      TXA 			 \ step Y1 lo
  28++CD11              ;18                      CLC
  29++CD11              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CD11              ;85 36                   STA &36			 \ XX15+2
  31++CD11              ;98                      TYA 			 \ step Y1 hi
  32++CD11              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CD11              ;85 37                   STA &37			 \ XX15+3
  34++CD11              ;A2 FF                   LDX #&FF		 \ xright max
  35++CD11              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CD11              ;E8                      INX 			 \ X = 0
  37++CD11              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CD11              ;	.LL134	\ Ytrim
  39++CD11              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CD11              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CD11              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CD11              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CD11              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CD11              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CD11              ;8A                      TXA 			 \ step X1 lo
  46++CD11              ;18                      CLC
  47++CD11              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CD11              ;85 34                   STA &34			 \ XX15+0
  49++CD11              ;98                      TYA 			 \ step X1 hi
  50++CD11              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CD11              ;85 35                   STA &35			 \ XX15+1
  52++CD11              ;A9 00                   LDA #0			 \ Y bottom min
  53++CD11              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CD11              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CD11              ;	.LL135	\ y1 hi +ve from LL134
  56++CD11              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CD11              ;38                      SEC
  58++CD11              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CD11              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CD11              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CD11              ;E9 00                   SBC #0			 \ any hi
  62++CD11              ;85 83                   STA &83			 \ S
  63++CD11              ;90 16                   BCC LL136		 \ failed, rts
  64++CD11              ;	.LL139
  65++CD11              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CD11              ;8A                      TXA 			 \ step X1 lo
  67++CD11              ;18                      CLC
  68++CD11              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CD11              ;85 34                   STA &34			 \ XX15+0
  70++CD11              ;98                      TYA 			 \ step X1 hi
  71++CD11              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CD11              ;85 35                   STA &35			 \ XX15+1
  73++CD11              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CD11              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CD11              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CD11              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CD11              ;	.LL136	\ rts
  78++CD11              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CD11              ;
  80++CD11
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 559+ CD11                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CD11              ;--------------------------------------------------------------------------------------------------------------------
   2++CD11
   3++CD11 00           clipDx                  DB      0           ; also XX12+2
   4++CD12 00           clipDxHigh              DB      0           ; also XX12+3
   5++CD13 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CD14 00           clipDy                  DB      0           ; also XX12+4
   7++CD15 00           clipDyHigh              DB      0           ; also XX12+5
   8++CD16 00           clipGradient            DB      0
   9++CD17 00           clipDxySign             DB      0
  10++CD18              varX12p3                equ     clipDxySign
  11++CD18 00           clipXGTY                DB      0
  12++CD19 00           clipFlags               DB      0
  13++CD1A 00           SWAP                    DB      0
  14++CD1B 00 00        varYX                   DW      0
  15++CD1D              ;varRegX                 DB      0
  16++CD1D              ;varXX12p2               DB      0
  17++CD1D 00           clipXX13                 DB      0
  18++CD1E
  19++CD1E
  20++CD1E              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CD1E              ;ClipXX15XX12Line:
  22++CD1E ED 4B 76 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CD22 DD 2A 7A C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CD26 2A 74 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CD29 ED 5B 78 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CD2D AF                                   xor     a
  27++CD2E 32 1A CD                             ld      (SWAP),a                    ; SWAP = 0
  28++CD31 7A                                   ld      a,d                         ; A = X2Hi
  29++CD32 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CD35                                      ;       push    af
  31++CD35                                      ;       ld      a,iyh
  32++CD35                                      ;       ld      (regX),a
  33++CD35                                      ;       pop     af
  34++CD35 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CD37 20 0A                                jr      nz, .LL107
  36++CD39 DD 7D                                ld      a,ixl
  37++CD3B ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CD3E 20 03                                jr      nz,.LL107
  39++CD40 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CD43                                      ;        push    af
  41++CD43                                      ;        ld      a,iyh
  42++CD43                                      ;        ld      (regX),a
  43++CD43                                      ;        pop     af
  44++CD43              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CD43              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CD43 FD 7C        .LL107                  ld      a,iyh
  47++CD45 32 1D CD                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CD48 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CD49 B0                                   or      b                           ;
  50++CD4A 20 27                                jr      nz,.LL83                    ;
  51++CD4C 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CD4D ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CD50 20 21                                jr      nz,.LL83
  54++CD52              ; If we get here, (x1, y1) is on-screen
  55++CD52 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CD54 FE 00                                cp      0
  57++CD56 20 15                                jr      nz, .LL108
  58++CD58              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CD58 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CD59 32 75 C0                             ld      (UBnkNewY1),a
  61++CD5C DD 7D                                ld      a,ixl
  62++CD5E 32 77 C0                             ld      (UBnkNewY2),a
  63++CD61 7D                                   ld      a,l
  64++CD62 32 74 C0                             ld      (UBnkNewX1),a
  65++CD65 7B                                   ld      a,e
  66++CD66 32 76 C0                             ld      (UBnkNewX2),a
  67++CD69                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CD69 B7          >				or a
  68++CD6A C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CD6B              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CD6B 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CD6C C9                                   ret
  72++CD6D FD 7C        .LL108:                 ld      a,iyh
  73++CD6F B7                                   or      a
  74++CD70 1F                                   rra
  75++CD71 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CD73                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CD73                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CD73                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CD73                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CD73 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CD75 ED 27 80                             test    $80                         ;
  82++CD78 28 28                                jr      z, .LL115                   ;
  83++CD7A 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CD7B A2                                   and     d
  85++CD7C                                      JumpIfNegative  .PointsOutofBounds
  85++CD7C FA 6B CD    >                        jp		m, .PointsOutofBounds
  86++CD7F 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CD80 DD A4                                and     ixh
  88++CD82                                      JumpIfNegative  .PointsOutofBounds
  88++CD82 FA 6B CD    >                        jp		m, .PointsOutofBounds
  89++CD85 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CD86 3D                                   dec     a
  91++CD87 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CD89                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CD89                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CD89                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CD89                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CD89 7A                                   ld      a,d                         ; a = x2 hi
  97++CD8A 3D                                   dec     a
  98++CD8B FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CD8D                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CD8D F2 6B CD    >                        jp		p, .PointsOutofBounds
 100++CD90              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CD90 DD 7C                                ld      a,ixh
 102++CD92 3D                                   dec     a
 103++CD93 FD 6F                                ld      iyl,a
 104++CD95 78                                   ld      a,b
 105++CD96 3D                                   dec     a
 106++CD97 FD B5                                or      iyl
 107++CD99                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CD99 F2 6B CD    >                        jp		p, .PointsOutofBounds
 108++CD9C 79                                   ld      a,c
 109++CD9D DD A5                                and     ixl
 110++CD9F                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CD9F FA 6B CD    >                        jp		m, .PointsOutofBounds
 111++CDA2              ; Clip line: calulate the line's gradient
 112++CDA2              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CDA2              .LL115:                 ClearCarryFlag
 113++CDA2 B7          >				or a
 114++CDA3 E5 D5        .CalcDX:                push    hl,,de
 115++CDA5 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CDA6 ED 52                                sbc     hl,de
 117++CDA8                                     ; pop     de                          ; we need de back
 118++CDA8 22 11 CD                             ld      (clipDx),hl
 119++CDAB 7C                                   ld      a,h
 120++CDAC 32 13 CD                             ld      (clipDxHighNonABS),a
 121++CDAF                                     ; ld      a,e                         ;a = x2 lo
 122++CDAF                                     ; sbc     a,l                         ;a= a - x1
 123++CDAF                                     ; ld      (clipDx),a
 124++CDAF                                     ; ld      a,d
 125++CDAF                                     ; sbc     a,h
 126++CDAF                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CDAF                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CDAF              .CalcDy:                ClearCarryFlag
 128++CDAF B7          >				or a
 129++CDB0 DD E5 E1                             ld      hl,ix
 130++CDB3 ED 42                                sbc     hl,bc
 131++CDB5 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CDB7 22 14 CD                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CDBA 7C           .CalcQuadrant:          ld      a,h
 134++CDBB                                     ; ld      a,ixl
 135++CDBB                                     ; sbc     c
 136++CDBB                                     ; ld      (clipDy),a
 137++CDBB                                     ; ld      a,ixh
 138++CDBB                                     ; sbc     a,b
 139++CDBB                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CDBB                                     ; pop     hl
 141++CDBB
 142++CDBB              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CDBB                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CDBB 21 12 CD                             ld      hl,clipDxHigh
 145++CDBE AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CDBF 32 DA 93                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CDC2 32 17 CD                             ld      (clipDxySign),a
 148++CDC5 3A 15 CD     .AbsDy:                 ld      a,(clipDyHigh)
 149++CDC8 ED 27 80                             test    $80
 150++CDCB 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CDCD 2A 14 CD                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CDD0                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CDD0 AF          >					xor 	a
 152++CDD1 93          >                    sub 	e
 152++CDD2 5F          >                    ld 		e,a
 152++CDD3 9F          >                    sbc 	a,a
 152++CDD4 92          >                    sub 	d
 152++CDD5 57          >                    ld 		d,a
 153++CDD6 22 14 CD                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CDD9 2A 11 CD     .LL110:                 ld      hl,(clipDx)
 155++CDDC 3A 12 CD                             ld      a,(clipDxHigh)
 156++CDDF ED 27 80                             test    $80                         ; is it a negative X
 157++CDE2 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CDE4                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CDE4                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CDE4 AF          >					xor 	a
 159++CDE5 95          >					sub 	l
 159++CDE6 6F          >					ld 		l,a
 159++CDE7 9F          >					sbc 	a,a
 159++CDE8 94          >					sub 	h
 159++CDE9 67          >					ld 		h,a
 160++CDEA                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CDEA              .LL111:               ;  push    de
 162++CDEA                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CDEA                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CDEA 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CDEB B2                                   or      d
 166++CDEC 28 0A                                jr      z,.CalculateDelta
 166++CDEE
 167++CDEE                                      ShiftDERight1
 167++CDEE CB 3A       >			   srl d
 167++CDF0 CB 1B       >			   rr  e
 168++CDF2                                      ShiftHLRight1
 168++CDF2 CB 3C       >			   srl h
 168++CDF4 CB 1D       >			   rr  l
 169++CDF6 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CDF8              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CDF8                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CDF8              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CDF8 AF           .LL113:                 xor     a
 174++CDF9 32 F8 93                             ld      (varT),a                    ; t = 0
 175++CDFC 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CDFD                                      JumpIfALTNusng  e, .LL114           ;
 176++CDFD BB          >                        cp      e
 176++CDFE DA 0E CE    >                        jp		c,.LL114
 177++CE01              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CE01 32 D8 93     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CE04 57                                   ld      d,a                         ; d = also Q for calc
 180++CE05 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CE06 CD 74 AA                             call    LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CE09 32 D9 93                             ld      (varR),a                    ;
 183++CE0C 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CE0E              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CE0E 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CE0F 57                                   ld      d,a
 187++CE10 32 D8 93                             ld      (varQ),a
 188++CE13 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CE14 CD 74 AA                             call    LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CE17 32 D9 93                             ld      (varR),a                    ;
 191++CE1A 21 F8 93                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CE1D 35                                   dec     (hl)
 193++CE1E D1           .LL116:                 pop     de                          ; get back X2
 194++CE1F E1                                   pop     hl                          ; get back X1 into hl,
 195++CE20 3A D9 93                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CE23 32 16 CD                             ld      (clipGradient),a
 197++CE26 FD 6F                                ld      iyl,a
 198++CE28                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CE28                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CE28                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CE28                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CE28 3A DA 93                             ld      a,(varS)
 203++CE2B 32 17 CD                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CE2E                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CE2E FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CE30 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CE32 28 05                                jr      z,.LL138                    ;
 208++CE34 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CE37 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CE39              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CE39 CD 60 CE     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CE3C FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CE3E ED 27 80                             test    $80
 214++CE41 28 1A                                jr      z,.LL124
 215++CE43              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CE43 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CE44 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CE45 C2 6B CD                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CE48 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CE49 FA 6B CD                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CE4C              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CE4C              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CE4C EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CE4D DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CE4F C5                                   push    bc
 226++CE50 DD E1                                pop     ix
 227++CE52 C1                                   pop     bc
 228++CE53 CD 60 CE                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CE56 3A 1A CD                             ld      a,(SWAP)
 230++CE59 3D                                   dec     a
 231++CE5A 32 1A CD                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CE5D C3 58 CD     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CE60
 234++CE60              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CE60              ; iyh still holds XX13 iyl still holds gradient
 236++CE60 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CE61 ED 27 80                             test    $80
 238++CE64 28 17                                jr      z,.LL119
 239++CE66 32 DA 93     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CE69 E5 D5 C5                             push    hl,,de,,bc
 241++CE6C CD E2 CE                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CE6F                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CE6F                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CE6F C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CE72 2A 1B CD                             ld      hl,(varYX)
 246++CE75              ;                        ex      hl,de
 247++CE75                                  ;    ld      hl,bc
 248++CE75 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CE76 44 4D                                ld      bc,hl
 250++CE78 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CE7B               ;                       pop     de
 252++CE7B 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CE7D FE 00        .LL119:                 cp      0
 254++CE7F 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CE81 3D                                   dec     a
 256++CE82 32 DA 93                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CE85 E5 D5 C5                             push    hl,,de,,bc
 258++CE88 CD E2 CE                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CE8B                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CE8B                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CE8B C1 D1 E1                             pop     hl,,de,,bc
 262++CE8E                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CE8E 2A 1B CD                             ld      hl,(varYX)
 264++CE91                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CE91 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CE92 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CE94                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CE94                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CE94                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CE94 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CE97                                    ;  pop     de
 272++CE97              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CE97 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CE98 ED 27 80                             test    $80                         ;
 275++CE9B 28 1A                                jr      z,.LL135                    ;
 276++CE9D 32 DA 93                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CEA0 79                                   ld      a,c                         ; Set R = y1_lo
 278++CEA1 32 D9 93                             ld      (varR),a                    ;
 279++CEA4 E5 D5 C5                             push    hl,,de,,bc
 280++CEA7 CD 09 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CEAA                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CEAA                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CEAA C1 D1 E1                             pop     hl,,de,,bc
 284++CEAD D5                                   push    de
 285++CEAE EB                                   ex      hl,de                       ; de = x1
 286++CEAF 2A 1B CD                             ld      hl,(varYX)                  ; hl = varYX
 287++CEB2 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CEB3 D1                                   pop     de                          ; de = x2 again
 289++CEB4 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CEB7 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CEB8 E6 80                                and     $80
 292++CEBA B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CEBB C8                                   ret     z
 294++CEBC E5                                   push    hl
 295++CEBD 60 69                                ld      hl,bc
 296++CEBF 01 80 00                             ld      bc,128
 297++CEC2 B7                                   or      a
 298++CEC3 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CEC5 22 D9 93                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CEC8 7C                                   ld      a,h
 301++CEC9 E1                                   pop     hl
 302++CECA ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CECD C0                                   ret     nz
 304++CECE              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CECE E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CED1 CD 09 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CED4                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CED4                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CED4 C1 D1 E1                             pop     hl,,de,,bc
 310++CED7 D5                                   push    de
 311++CED8 EB                                   ex      hl,de
 312++CED9 2A 1B CD                             ld      hl,(varYX)
 313++CEDC 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CEDD 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CEE0 D1                                   pop     de
 316++CEE1 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CEE2
 318++CEE2
 319++CEE2              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CEE2              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CEE2              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CEE2              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CEE2 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CEE3 32 D9 93                             ld      (varR),a
 325++CEE6 CD 51 CF                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CEE9 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CEEA C5                                   push    bc
 328++CEEB 47                                   ld      b,a
 329++CEEC 3A F8 93                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CEEF FE 00                                cp      0
 331++CEF1 78                                   ld      a,b
 332++CEF2 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CEF3 20 23                                jr      nz, LL121
 334++CEF5              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CEF5 3A 16 CD     LL122:                  ld      a,(clipGradient)
 336++CEF8 32 D8 93                             ld      (varQ),a; optimise
 337++CEFB CD 84 A0                             call    HLequSRmulQdiv256
 338++CEFE 22 1B CD                             ld      (varYX),hl
 339++CF01 F1                                   pop     af
 340++CF02 ED 27 80                             test    $80
 341++CF05 CA 44 CF                             jp      z,LL133
 342++CF08 C9                                   ret
 343++CF09              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CF09              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CF09              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CF09              ;
 347++CF09              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CF09              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CF09              ;                          LL128                Contains an RTS
 350++CF09 CD 51 CF     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CF0C F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CF0D C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CF0E 47                                   ld      b,a
 354++CF0F 3A F8 93                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CF12 FE 00                                cp      0
 356++CF14 78                                   ld      a,b
 357++CF15 C1                                   pop     bc
 358++CF16 20 DD                                jr      nz, LL122
 359++CF18              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CF18 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CF1B 2A D9 93                             ld      hl,(varRS)                  ; hl = RS
 362++CF1E 3A D8 93                             ld      a,(varQ)
 363++CF21 47                                   ld      b,a                         ; b = q
 364++CF22              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CF22 CB 25       >			   sla l
 364++CF24 CB 14       >			   rl  h
 365++CF26 7C                                   ld      a,h
 366++CF27 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CF29                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CF29 B8          >                        cp      b
 367++CF2A DA 35 CF    >                        jp		c,.LL132
 368++CF2D 3F           .LL131:                 ccf                                 ; compliment carry
 369++CF2E 98                                   sbc     a,b                         ; q
 370++CF2F 67                                   ld      h,a                         ; h (s)
 371++CF30 7D                                   ld      a,l                         ; r
 372++CF31 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CF33 37                                   scf                                 ; set carry for next rolls
 374++CF34 3F                                   ccf
 375++CF35              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CF35 CB 13       >               rl  e
 375++CF37 CB 12       >               rl  d
 376++CF39 38 E7                                jr      c,.LL130                    ;
 377++CF3B ED 53 1B CD                          ld      (varYX),de
 378++CF3F F1                                   pop     af              ; get back sign
 379++CF40 ED 27 80                             test    $80
 380++CF43 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CF44 2A 1B CD     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CF47                                      NegHL
 382++CF47 AF          >                xor a
 382++CF48 95          >                sub l
 382++CF49 6F          >                ld l,a
 382++CF4A 9F          >                sbc a,a
 382++CF4B 94          >                sub h
 382++CF4C 67          >                ld h,a
 383++CF4D 22 1B CD                             ld      (varYX),hl
 384++CF50 C9           LL128:                  ret
 385++CF51              ; Do the following, in this order:  Q = XX12+2
 386++CF51              ;                                   A = S EOR XX12+3
 387++CF51              ;                                   (S R) = |S R|
 388++CF51              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CF51 3A 16 CD     LL129:                  ld      a,(clipGradient)
 390++CF54 32 D8 93                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CF57 3A DA 93                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CF5A E5 F5                                push    hl,,af
 393++CF5C ED 27 80                             test    $80
 394++CF5F 28 0C                                jr      z,.LL127
 395++CF61 2A D9 93                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CF64                                      NegHL
 396++CF64 AF          >                xor a
 396++CF65 95          >                sub l
 396++CF66 6F          >                ld l,a
 396++CF67 9F          >                sbc a,a
 396++CF68 94          >                sub h
 396++CF69 67          >                ld h,a
 397++CF6A 22 D9 93                             ld      (varRS),hl
 398++CF6D 21 17 CD     .LL127:                 ld      hl,clipDxySign
 399++CF70 F1                                   pop     af
 400++CF71 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CF72 E1                                   pop     hl
 402++CF73 C9                                   ret
 403++CF74
# file closed: ././ModelRender/CLIP-LL145.asm
 560+ CF74              ;--------------------------------------------------------------------------------------------------------
 561+ CF74                                      include "./Variables/CopyRotmatToTransMat.asm"
# file opened: ././Variables/CopyRotmatToTransMat.asm
   1++CF74              ; Set TransMatTo
   2++CF74              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CF74              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CF74              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CF74              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CF74              CopyRotmatToTransMat:                       ; Tested
   7++CF74              LL15_CopyRotMat:                            ; unrolled loop
   8++CF74 21 14 C0             ld      hl,UBnkrotmatSidevX
   9++CF77 11 2F C0             ld      de,UBnkTransmatSidevX
  10++CF7A                      SixLDIInstrunctions
  10++CF7A ED A0       >                        ldi
  10++CF7C ED A0       >                        ldi
  10++CF7E ED A0       >                        ldi
  10++CF80 ED A0       >                        ldi
  10++CF82 ED A0       >                        ldi
  10++CF84 ED A0       >                        ldi
  11++CF86 21 1A C0             ld      hl,UBnkrotmatRoofvX
  12++CF89 11 35 C0             ld      de, UBnkTransmatRoofvX
  13++CF8C                      SixLDIInstrunctions
  13++CF8C ED A0       >                        ldi
  13++CF8E ED A0       >                        ldi
  13++CF90 ED A0       >                        ldi
  13++CF92 ED A0       >                        ldi
  13++CF94 ED A0       >                        ldi
  13++CF96 ED A0       >                        ldi
  14++CF98 21 20 C0             ld      hl,UBnkrotmatNosevX
  15++CF9B 11 3B C0             ld      de, UBnkTransmatNosevX
  16++CF9E                      SixLDIInstrunctions
  16++CF9E ED A0       >                        ldi
  16++CFA0 ED A0       >                        ldi
  16++CFA2 ED A0       >                        ldi
  16++CFA4 ED A0       >                        ldi
  16++CFA6 ED A0       >                        ldi
  16++CFA8 ED A0       >                        ldi
  17++CFAA C9                   ret
  18++CFAB
# file closed: ././Variables/CopyRotmatToTransMat.asm
 562+ CFAB              ;--------------------------------------------------------------------------------------------------------
 563+ CFAB 21 A0 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 564+ CFAE ED 31                                add     hl,a
 565+ CFB0 3E FF                                ld      a,$FF
 566+ CFB2 77                                   ld      (hl),a
 567+ CFB3 C9                                   ret
 568+ CFB4              ;--------------------------------------------------------------------------------------------------------
 569+ CFB4 21 A0 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 570+ CFB7 ED 31                                add     hl,a
 571+ CFB9 AF                                   xor     a
 572+ CFBA 77                                   ld      (hl),a
 573+ CFBB C9                                   ret
 574+ CFBC              ;--------------------------------------------------------------------------------------------------------
 575+ CFBC 3A 09 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 576+ CFBF CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 577+ CFC1 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 578+ CFC3 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 579+ CFC4 21 A0 C0                             ld      hl,UbnkFaceVisArray
 580+ CFC7 3E FF                                ld      a,$FF
 581+ CFC9              SetAllFacesVisibleLoop:
 582+ CFC9 77           EE30:                   ld      (hl),a
 583+ CFCA 23                                   inc     hl
 584+ CFCB 10 FC                                djnz    SetAllFacesVisibleLoop
 585+ CFCD C9                                   ret
 586+ CFCE              ;--------------------------------------------------------------------------------------------------------
 587+ CFCE 3A 09 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 588+ CFD1 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 589+ CFD3 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 590+ CFD5 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 591+ CFD6 06 10                                ld      b,16
 592+ CFD8 21 A0 C0                             ld      hl,UbnkFaceVisArray
 593+ CFDB 3E 00                                ld      a,$00
 594+ CFDD 77           SetAllFacesHiddenLoop:  ld      (hl),a
 595+ CFDE 23                                   inc     hl
 596+ CFDF 10 FC                                djnz    SetAllFacesHiddenLoop
 597+ CFE1 C9                                   ret
 598+ CFE2
 599+ CFE2              ;;;;X = normal scale
 600+ CFE2              ;;;;ZtempHi = zhi
 601+ CFE2              ;;;;......................................................
 602+ CFE2              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 603+ CFE2              ;;;;  Loop                                              ::LL90
 604+ CFE2              ;;;;     inc X
 605+ CFE2              ;;;;     divide X, Y & ZtempHiLo by 2
 606+ CFE2              ;;;;  Until ZtempHi = 0
 607+ CFE2              ;;;;......................................................
 608+ CFE2              ;-LL21---------------------------------------------------------------------------------------------------
 609+ CFE2                                      include "Universe/NormaliseTransMat.asm"
# file opened: ./Universe/NormaliseTransMat.asm
   1++CFE2              ;divdide by 16 using undocumented instrunctions
   2++CFE2              Norm256mulAdivQ:
   3++CFE2 47               ld      b,a
   4++CFE3 0E 00            ld      c,0
   5++CFE5 16 00            ld      d,0
   6++CFE7 3A D8 93         ld      a,(varQ)
   7++CFEA 5F               ld      e,a
   8++CFEB              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CFEB              ;Output: BC = Quotient, HL = Remainder
  10++CFEB              NormDIV16UNDOC:
  11++CFEB 21 00 00         ld      hl,0
  12++CFEE 78               ld      a,b
  13++CFEF 06 10            ld      b,16
  14++CFF1              NormDIV16UNDOCLOOP:
  15++CFF1 CB 31        	sll	    c		; unroll 16 times
  16++CFF3 17           	rla	    		; ...
  17++CFF4 ED 6A        	adc	    hl,hl		; ...
  18++CFF6 ED 52        	sbc	    hl,de		; ...
  19++CFF8 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CFFA 19           	add	    hl,de		; ...
  21++CFFB 0D           	dec	    c		; ...
  22++CFFC              NormDIV16UNDOCSKIP:
  23++CFFC 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CFFE 79               ld      a,c
  25++CFFF 32 D9 93         ld      (varR),a
  26++D002 C9               ret
  27++D003
  28++D003              ; Tested OK
  29++D003              NormaliseTransMat:
  30++D003              ;LL21
  31++D003 21 40 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D006 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D008 79                   ld      a,c
  34++D009 32 D8 93             ld      (varQ),a                    ; set up varQ
  35++D00C 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D00E              LL21Loop:
  37++D00E 56                   ld      d,(hl)
  38++D00F 2B                   dec     hl
  39++D010 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D011                      ShiftDELeft1                        ; De = DE * 2
  40++D011 CB 23       >			   sla e
  40++D013 CB 12       >			   rl  d
  41++D015 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D016 E5           		push	hl
  43++D017 C5           		push	bc
  44++D018 CD E2 CF             call    Norm256mulAdivQ
  45++D01B              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D01B 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D01C C1           		pop		bc
  48++D01D E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D01E 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D01F 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D020 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D022 C9                   ret
  53++D023
# file closed: ./Universe/NormaliseTransMat.asm
 610+ D023              ;-LL91---------------------------------------------------------------------------------------------------
 611+ D023
 612+ D023              ; Now we have
 613+ D023              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 614+ D023              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 615+ D023              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 616+ D023              ;
 617+ D023              ;--------------------------------------------------------------------------------------------------------
 618+ D023                                      include "Universe/InverseXX16.asm"
# file opened: ./Universe/InverseXX16.asm
   1++D023              ; TESTEDOK
   2++D023
   3++D023              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D023              ;        ld      a,(XX17)
   5++D023              ;        ld      ixl,a
   6++D023              ;        ld      ixh,9
   7++D023              ;        ld      hl,UBnkTransInv0x
   8++D023              ;        ld      a,(hl)
   9++D023              ;ScaleNode:
  10++D023              ;        ld      b,ixl
  11++D023              ;ScaleNodeLoop:
  12++D023              ;        sla      a
  13++D023              ;        djnz    ScaleNodeLoop
  14++D023              ;        ld      (hl),a
  15++D023              ;        inc     hl
  16++D023              ;        inc     hl
  17++D023              ;        dec     ixh
  18++D023              ;        jr      nz,ScaleNode
  19++D023              ;        ret
  20++D023
  21++D023
  22++D023              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D023              ; we coudl combine this with move to transmat later as an optimisation
  24++D023              ; INPUT - All Scaled
  25++D023              ;  They transmat has already been put into side, roof nose order
  26++D023              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D023              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D023              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D023              ; OUTPUT
  30++D023              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D023              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D023              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D023              ; First all side values become compoment 0 of each vector
  34++D023 2A 2F C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D026 ED 5B 35 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D02A ED 4B 3B C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D02E 22 47 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D031 ED 53 49 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D035 ED 43 4B C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D039 2A 31 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D03C ED 5B 37 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D040 ED 4B 3D C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D044 22 4F C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D047 ED 53 51 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D04B ED 43 53 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D04F 2A 33 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D052 ED 5B 39 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D056 ED 4B 3F C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D05A 22 57 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D05D ED 53 59 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D061 ED 43 5B C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D065 C9                   ret
  53++D066
  54++D066
# file closed: ./Universe/InverseXX16.asm
 619+ D066              ;--------------------------------------------------------------------------------------------------------
 620+ D066              ;--------------------------------------------------------------------------------------------------------
 621+ D066              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 622+ D066              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 623+ D066              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 624+ D066              ; Returns
 625+ D066              ;
 626+ D066              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 627+ D066              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 628+ D066              ;
 629+ D066              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 630+ D066              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 631+ D066              ;
 632+ D066              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 633+ D066              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 634+ D066              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 635+ D066 ~                                    ld      c,0
 636+ D066 ~                                    ld      a,param3                      ;
 637+ D066 ~                                    bit     7,a
 638+ D066 ~                                    jr      z,.val2Pos
 639+ D066 ~            ;HandleSignebits
 640+ D066 ~                                    neg
 641+ D066 ~                                    ld      c,$80
 642+ D066 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 643+ D066 ~                                    ld      a,param2                        ; A = XX16 element
 644+ D066 ~                                    bit     7,a
 645+ D066 ~                                    jr      z,.val1Pos
 646+ D066 ~            ;HandleSignebits
 647+ D066 ~                                    neg
 648+ D066 ~                                    ld      b,a
 649+ D066 ~                                    ld      a,c
 650+ D066 ~                                    xor     $80
 651+ D066 ~                                    ld      c,a
 652+ D066 ~                                    ld      a,b
 653+ D066 ~            .val1Pos:               ld      d,a
 654+ D066 ~            ;AequAmulQdiv256:
 655+ D066 ~                                    mul
 656+ D066 ~                                    ld      a,c
 657+ D066 ~                                    bit     7,a
 658+ D066 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 659+ D066 ~                                    jr      z,.resultPos
 660+ D066 ~                                    neg
 661+ D066 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 662+ D066                                      ENDM
 663+ D066
 664+ D066              AequN1xorN2:            MACRO  param1,param2
 665+ D066 ~                                    ld      a,(param1)
 666+ D066 ~                                    xor     param2
 667+ D066                                      ENDM
 668+ D066
 669+ D066              N0equN1byN2div256:      MACRO param1,param2,param3
 670+ D066 ~                                    ld      a,param3                        ;
 671+ D066 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 672+ D066 ~                                    ld      a,param2                        ; A = XX16 element
 673+ D066 ~                                    ld      d,a
 674+ D066 ~                                    mul
 675+ D066 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 676+ D066 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 677+ D066                                      ENDM
 678+ D066
 679+ D066               ; TESTEDOK
 680+ D066              XX12DotOneRow:
 681+ D066              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 681+ D066 3A 74 C0    >                        ld      a,(UBnkXScaled)                        ;
 681+ D069 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 681+ D06A 7E          >                        ld      a,(hl)                        ; A = XX16 element
 681+ D06B 57          >                        ld      d,a
 681+ D06C ED 30       >                        mul
 681+ D06E 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 681+ D06F 32 F8 93    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 682+ D072 23                                   inc     hl                                  ; move to sign byte
 683+ D073              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 683+ D073 3A 75 C0    >                        ld      a,(UBnkXScaledSign)
 683+ D076 AE          >                        xor     (hl)
 684+ D077 32 DA 93                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 685+ D07A 23                                   inc     hl
 686+ D07B              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 686+ D07B 3A 76 C0    >                        ld      a,(UBnkYScaled)                        ;
 686+ D07E 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 686+ D07F 7E          >                        ld      a,(hl)                        ; A = XX16 element
 686+ D080 57          >                        ld      d,a
 686+ D081 ED 30       >                        mul
 686+ D083 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 686+ D084 32 D8 93    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 687+ D087                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 687+ D087 3A F8 93    >               ld       a,(varT)
 687+ D08A 32 D9 93    >               ld       (varR),a
 688+ D08D 23                                   inc     hl
 689+ D08E                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 689+ D08E 3A 77 C0    >                        ld      a,(UBnkYScaledSign)
 689+ D091 AE          >                        xor     (hl)
 690+ D092              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 691+ D092 E5           STequSRplusAQ           push    hl
 692+ D093 CD 33 A7                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 693+ D096 E1                                   pop     hl
 694+ D097 32 F8 93                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 695+ D09A 23                                   inc     hl
 696+ D09B              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 696+ D09B 3A 78 C0    >                        ld      a,(UBnkZScaled)                        ;
 696+ D09E 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 696+ D09F 7E          >                        ld      a,(hl)                        ; A = XX16 element
 696+ D0A0 57          >                        ld      d,a
 696+ D0A1 ED 30       >                        mul
 696+ D0A3 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 696+ D0A4 32 D8 93    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 697+ D0A7                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 697+ D0A7 3A F8 93    >               ld       a,(varT)
 697+ D0AA 32 D9 93    >               ld       (varR),a
 698+ D0AD 23                                   inc     hl
 699+ D0AE                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 699+ D0AE 3A 79 C0    >                        ld      a,(UBnkZScaledSign)
 699+ D0B1 AE          >                        xor     (hl)
 700+ D0B2              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 701+ D0B2 CD 33 A7                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 702+ D0B5              ; Now we exit with A = result S = Sign
 703+ D0B5 C9                                   ret
 704+ D0B6
 705+ D0B6              ; added where sign is separate byte
 706+ D0B6              ;;;XX12DotOneRowV2:
 707+ D0B6              ;;;XX12CalcXV2:
 708+ D0B6              ;;;        ld      a,(hl)
 709+ D0B6              ;;;        ld      de,(UBnkXScaled)
 710+ D0B6              ;;;        ld      b,d
 711+ D0B6              ;;;        ld      d,a
 712+ D0B6              ;;;        mul
 713+ D0B6              ;;;        ld      a,e
 714+ D0B6              ;;;        ld      (varT),a
 715+ D0B6              ;;;XX12CalcXSignV2:
 716+ D0B6              ;;;        inc     hl
 717+ D0B6              ;;;        ld      a,(hl)
 718+ D0B6              ;;;        xor     b
 719+ D0B6              ;;;        ld      (varS),a
 720+ D0B6              ;;;XX12CalcYV2:
 721+ D0B6              ;;;        inc     hl
 722+ D0B6              ;;;        ld      de,(UBnkYScaled)
 723+ D0B6              ;;;        ld      b,d
 724+ D0B6              ;;;        ld      d,a
 725+ D0B6              ;;;        mul
 726+ D0B6              ;;;        ld      a,e
 727+ D0B6              ;;;        ld      (varQ),a
 728+ D0B6              ;;;        ld      a,(varT)
 729+ D0B6              ;;;        ld      (varR),a
 730+ D0B6              ;;;XX12CalcYSignV2:
 731+ D0B6              ;;;        inc     hl
 732+ D0B6              ;;;        ld      a,(hl)
 733+ D0B6              ;;;        xor     b
 734+ D0B6              ;;;        ld      (varS),a
 735+ D0B6              ;;;XX12CalcXPlusYV2:
 736+ D0B6              ;;;        push    hl
 737+ D0B6              ;;;        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 738+ D0B6              ;;;        pop     hl
 739+ D0B6              ;;;        ld      (varT),a                            ; var S already holds sign
 740+ D0B6              ;;;       ret
 741+ D0B6
 742+ D0B6
 743+ D0B6              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 744+ D0B6              ;TESTED OK
 745+ D0B6              XX12EquXX15DotProductXX16:
 746+ D0B6              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 747+ D0B6 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 748+ D0B9 21 2F C0                             ld      hl,UBnkTransmatSidevX
 749+ D0BC CD 66 D0                             call    XX12DotOneRow
 750+ D0BF 32 7A C0                             ld      (UBnkXX12xLo),a
 751+ D0C2 3A DA 93                             ld      a,(varS)
 752+ D0C5 32 7B C0                             ld      (UBnkXX12xSign),a
 753+ D0C8 21 35 C0                             ld      hl,UBnkTransmatRoofvX
 754+ D0CB CD 66 D0                             call    XX12DotOneRow
 755+ D0CE 32 7C C0                             ld      (UBnkXX12yLo),a
 756+ D0D1 3A DA 93                             ld      a,(varS)
 757+ D0D4 32 7D C0                             ld      (UBnkXX12ySign),a
 758+ D0D7 21 3B C0                             ld      hl,UBnkTransmatNosevX
 759+ D0DA CD 66 D0                             call    XX12DotOneRow
 760+ D0DD 32 7E C0                             ld      (UBnkXX12zLo),a
 761+ D0E0 3A DA 93                             ld      a,(varS)
 762+ D0E3 32 7F C0                             ld      (UBnkXX12zSign),a
 763+ D0E6 C9                                   ret
 764+ D0E7              ;--------------------------------------------------------------------------------------------------------
 765+ D0E7                                      include "./Variables/CopyXX12ScaledToXX18.asm"
# file opened: ././Variables/CopyXX12ScaledToXX18.asm
   1++D0E7              CopyXX12ScaledToXX18:
   2++D0E7              CopyResultToDrawCam:
   3++D0E7                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D0E7 3A 7A C0    >               ld       a,(XX12)
   3++D0EA 32 68 C0    >               ld       (XX18),a
   4++D0ED                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D0ED 3A 7B C0    >               ld       a,(XX12+1)
   4++D0F0 32 6A C0    >               ld       (XX18+2),a
   5++D0F3                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D0F3 3A 7C C0    >               ld       a,(XX12+2)
   5++D0F6 32 6B C0    >               ld       (XX18+3),a
   6++D0F9                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D0F9 3A 7D C0    >               ld       a,(XX12+3)
   6++D0FC 32 6D C0    >               ld       (XX18+5),a
   7++D0FF                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D0FF 3A 7E C0    >               ld       a,(XX12+4)
   7++D102 32 6E C0    >               ld       (XX18+6),a
   8++D105                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D105 3A 7F C0    >               ld       a,(XX12+5)
   8++D108 32 70 C0    >               ld       (XX18+8),a
   9++D10B C9                   ret
  10++D10C
# file closed: ././Variables/CopyXX12ScaledToXX18.asm
 766+ D10C                                      include "./Variables/CopyXX12toXX15.asm"
# file opened: ././Variables/CopyXX12toXX15.asm
   1++D10C              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D10C 3A 7A C0    >               ld       a,(UBnkXX12xLo)
   1++D10F 32 74 C0    >               ld       (UBnkXScaled),a
   2++D112                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D112 3A 7B C0    >               ld       a,(UBnkXX12xSign)
   2++D115 32 75 C0    >               ld       (UBnkXScaledSign),a
   3++D118                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D118 3A 7C C0    >               ld       a,(UBnkXX12yLo)
   3++D11B 32 76 C0    >               ld       (UBnkYScaled),a
   4++D11E                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D11E 3A 7D C0    >               ld       a,(UBnkXX12ySign)
   4++D121 32 77 C0    >               ld       (UBnkYScaledSign),a
   5++D124                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D124 3A 7E C0    >               ld       a,(UBnkXX12zLo)
   5++D127 32 78 C0    >               ld       (UBnkZScaled),a
   6++D12A                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D12A 3A 7F C0    >               ld       a,(UBnkXX12zSign)
   6++D12D 32 79 C0    >               ld       (UBnkZScaledSign),a
   7++D130 C9                                   ret
   8++D131
# file closed: ././Variables/CopyXX12toXX15.asm
 767+ D131                                      include "./Variables/CopyXX18toXX15.asm"
# file opened: ././Variables/CopyXX18toXX15.asm
   1++D131              CopyXX18toXX15:
   2++D131              CopyDrawCamToScaled:
   3++D131                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D131 3A 68 C0    >               ld       a,(UBnkDrawCam0xLo)
   3++D134 32 74 C0    >               ld       (UBnkXScaled),a
   4++D137                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D137 3A 6A C0    >               ld       a,(UBnkDrawCam0xSgn)
   4++D13A 32 75 C0    >               ld       (UBnkXScaledSign),a
   5++D13D                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D13D 3A 6B C0    >               ld       a,(UBnkDrawCam0yLo)
   5++D140 32 76 C0    >               ld       (UBnkYScaled),a
   6++D143                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D143 3A 6D C0    >               ld       a,(UBnkDrawCam0ySgn)
   6++D146 32 77 C0    >               ld       (UBnkYScaledSign),a
   7++D149                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D149 3A 6E C0    >               ld       a,(UBnkDrawCam0zLo)
   7++D14C 32 78 C0    >               ld       (UBnkZScaled),a
   8++D14F                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D14F 3A 70 C0    >               ld       a,(UBnkDrawCam0zSgn)
   8++D152 32 79 C0    >               ld       (UBnkZScaledSign),a
   9++D155 C9                   ret
  10++D156
# file closed: ././Variables/CopyXX18toXX15.asm
 768+ D156                                      include "./Variables/CopyXX18ScaledToXX15.asm"
# file opened: ././Variables/CopyXX18ScaledToXX15.asm
   1++D156 21 0B C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D159 11 68 C0                             ld      de,UBnkDrawCam0xLo
   3++D15C                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D15C ED A0       >		                ldi
   3++D15E ED A0       >		                ldi
   3++D160 ED A0       >		                ldi
   3++D162 ED A0       >		                ldi
   3++D164 ED A0       >		                ldi
   3++D166 ED A0       >		                ldi
   3++D168 ED A0       >		                ldi
   3++D16A ED A0       >		                ldi
   3++D16C ED A0       >		                ldi
   4++D16E C9                                   ret
   5++D16F
   6++D16F              CopyCameraToXX15Signed:
   7++D16F 2A 68 C0             ld  hl,(UBnkDrawCam0xLo)
   8++D172 3A 6A C0             ld  a,(UBnkDrawCam0xSgn)
   9++D175 B4                   or  h
  10++D176 67                   ld  h,a
  11++D177 22 74 C0             ld  (UBnkXScaled),hl
  12++D17A 2A 6B C0             ld  hl,(UBnkDrawCam0yLo)
  13++D17D 3A 6D C0             ld  a,(UBnkDrawCam0ySgn)
  14++D180 B4                   or  h
  15++D181 67                   ld  h,a
  16++D182 22 76 C0             ld  (UBnkYScaled),hl
  17++D185 2A 6E C0             ld  hl,(UBnkDrawCam0zLo)
  18++D188 3A 70 C0             ld  a,(UBnkDrawCam0zSgn)
  19++D18B B4                   or  h
  20++D18C 67                   ld  h,a
  21++D18D 22 78 C0             ld  (UBnkZScaled),hl
  22++D190 C9                   ret
  23++D191
  24++D191              CopyXX18ScaledToXX15:
  25++D191              CopyDrawCamToScaledMatrix:
  26++D191                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D191 3A 70 C0    >               ld       a,(UBnkDrawCam0zSgn)
  26++D194 32 79 C0    >               ld       (UBnkZScaledSign),a
  27++D197                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D197 3A 68 C0    >               ld       a,(UBnkDrawCam0xLo)
  27++D19A 32 74 C0    >               ld       (UBnkXScaled),a
  28++D19D                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D19D 3A 6A C0    >               ld       a,(UBnkDrawCam0xSgn)
  28++D1A0 32 75 C0    >               ld       (UBnkXScaledSign),a
  29++D1A3                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D1A3 3A 6B C0    >               ld       a,(UBnkDrawCam0yLo)
  29++D1A6 32 76 C0    >               ld       (UBnkYScaled),a
  30++D1A9                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D1A9 3A 6D C0    >               ld       a,(UBnkDrawCam0ySgn)
  30++D1AC 32 77 C0    >               ld       (UBnkYScaledSign),a
  31++D1AF                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D1AF 3A 6E C0    >               ld       a,(UBnkDrawCam0zLo)
  31++D1B2 32 78 C0    >               ld       (UBnkZScaled),a
  32++D1B5 C9                   ret
  33++D1B6
  34++D1B6              CopyXX15ToXX18Scaled:
  35++D1B6              CopyScaledMatrixToDrawCam:
  36++D1B6                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D1B6 3A 79 C0    >               ld       a,(UBnkZScaledSign)
  36++D1B9 32 70 C0    >               ld       (UBnkDrawCam0zSgn),a
  37++D1BC                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D1BC 3A 74 C0    >               ld       a,(UBnkXScaled)
  37++D1BF 32 68 C0    >               ld       (UBnkDrawCam0xLo),a
  38++D1C2                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D1C2 3A 75 C0    >               ld       a,(UBnkXScaledSign)
  38++D1C5 32 6A C0    >               ld       (UBnkDrawCam0xSgn),a
  39++D1C8                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D1C8 3A 76 C0    >               ld       a,(UBnkYScaled)
  39++D1CB 32 6B C0    >               ld       (UBnkDrawCam0yLo),a
  40++D1CE                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D1CE 3A 77 C0    >               ld       a,(UBnkYScaledSign)
  40++D1D1 32 6D C0    >               ld       (UBnkDrawCam0ySgn),a
  41++D1D4                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D1D4 3A 78 C0    >               ld       a,(UBnkZScaled)
  41++D1D7 32 6E C0    >               ld       (UBnkDrawCam0zLo),a
  42++D1DA C9                   ret
  43++D1DB
  44++D1DB
  45++D1DB              XX15EquXX15AddXX18:
  46++D1DB              LL94Z:
  47++D1DB 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D1DD 16 00                ld      d,0                                                     ;
  49++D1DF 3A 78 C0             ld      a,(UBnkZScaled)                                         ;
  50++D1E2 6F                   ld      l,a                                                     ;
  51++D1E3 3A 79 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D1E6 47                   ld      b,a                                                     ;
  53++D1E7 3A 6E C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D1EA 5F                   ld      e,a                                                     ;
  55++D1EB 3A 70 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D1EE 4F                   ld      c,a                                                     ;
  57++D1EF CD 3C CB             call    ADDHLDESignBC                                           ;
  58++D1F2 47                   ld      b,a                                                     ;
  59++D1F3 7C                   ld      a,h                                                     ;
  60++D1F4 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D1F5 32 79 C0             ld      (UBnkZScaledSign),a                                     ;
  62++D1F8 7D                   ld      a,l                                                     ;
  63++D1F9 32 78 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D1FC              LL94X:
  65++D1FC 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D1FE 16 00                ld      d,0                                                     ;
  67++D200 3A 74 C0             ld      a,(UBnkXScaled)                                         ;
  68++D203 6F                   ld      l,a                                                     ;
  69++D204 3A 75 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D207 47                   ld      b,a                                                     ;
  71++D208 3A 68 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D20B 5F                   ld      e,a                                                     ;
  73++D20C 3A 6A C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D20F 4F                   ld      c,a                                                     ;
  75++D210 CD 3C CB             call    ADDHLDESignBC                                           ;
  76++D213 47                   ld      b,a                                                     ;
  77++D214 7C                   ld      a,h                                                     ;
  78++D215 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D216 32 75 C0             ld      (UBnkXScaledSign),a                                     ;
  80++D219 7D                   ld      a,l                                                     ;
  81++D21A 32 74 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D21D              LL94Y:
  83++D21D 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D21F 16 00                ld      d,0                                                     ;
  85++D221 3A 76 C0             ld      a,(UBnkYScaled)                                         ;
  86++D224 6F                   ld      l,a                                                     ;
  87++D225 3A 77 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D228 47                   ld      b,a                                                     ;
  89++D229 3A 6B C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D22C 5F                   ld      e,a                                                     ;
  91++D22D 3A 6D C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D230 4F                   ld      c,a                                                     ;
  93++D231 CD 3C CB             call    ADDHLDESignBC                                           ;
  94++D234 47                   ld      b,a                                                     ;
  95++D235 7C                   ld      a,h                                                     ;
  96++D236 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D237 32 77 C0             ld      (UBnkYScaledSign),a                                     ;
  98++D23A 7D                   ld      a,l                                                     ;
  99++D23B 32 76 C0             ld      (UBnkYScaled),a                                         ;
 100++D23E C9                   ret
 101++D23F
# file closed: ././Variables/CopyXX18ScaledToXX15.asm
 769+ D23F                                      include "./Variables/CopyXX12ToScaled.asm"
# file opened: ././Variables/CopyXX12ToScaled.asm
   1++D23F              CopyXX12ToScaled:
   2++D23F              CopyResultToScaled:
   3++D23F                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D23F 3A 7A C0    >               ld       a,(XX12+0)
   3++D242 32 74 C0    >               ld       (UBnkXScaled),a
   4++D245                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D245 3A 7C C0    >               ld       a,(XX12+2)
   4++D248 32 76 C0    >               ld       (UBnkYScaled),a
   5++D24B                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D24B 3A 7E C0    >               ld       a,(XX12+4)
   5++D24E 32 78 C0    >               ld       (UBnkZScaled),a
   6++D251 C9                   ret
   7++D252
# file closed: ././Variables/CopyXX12ToScaled.asm
 770+ D252              ;--------------------------------------------------------------------------------------------------------
 771+ D252                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D252              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D252              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D252              ;;; S = XX12 XSign Xor XX15 XSign
   4++D252              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D252              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D252              ;;; R = T
   7++D252              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D252              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D252              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D252              ;;; Q = A * Q /256 usigned (zdot)
  11++D252              ;;; R = T
  12++D252              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D252
  14++D252
  15++D252
  16++D252
  17++D252
  18++D252              MacroAequDxEdiv256usgn:	MACRO
  19++D252 ~            						mul
  20++D252 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D252              						ENDM
  22++D252              DotProductXX12XX15:
  23++D252 3A 7A C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D255                      IfAIsZeroGoto dotxskipzero
  24++D255 FE 00       >				cp	0
  24++D257 CA 75 D2    >				jp	z,dotxskipzero
  25++D25A 5F                   ld          e,a
  26++D25B 3A 74 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D25E 57                   ld          d,a                     ; de = xx12 x signed
  28++D25F                      IfAIsZeroGoto dotxskipzero
  28++D25F FE 00       >				cp	0
  28++D261 CA 75 D2    >				jp	z,dotxskipzero
  29++D264 ED 30        		mul
  30++D266 42                   ld          b,d                     ; b = result
  31++D267 3A 7B C0             ld          a,(UBnkXX12xSign)
  32++D26A 21 75 C0             ld          hl,UBnkXScaledSign
  33++D26D AE                   xor         (hl)
  34++D26E E6 80                and         $80                     ; so sign bit only
  35++D270 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D272 C3 79 D2             jp          dotmuly
  37++D275              dotxskipzero:
  38++D275 AF                   xor         a
  39++D276 47                   ld          b,a
  40++D277 FD 67                ld          iyh,a
  41++D279              dotmuly:
  42++D279              ; now we have b = XX12 x &d  norm x signed
  43++D279 3A 7C C0             ld          a,(UBnkXX12yLo)
  44++D27C                      IfAIsZeroGoto dotyskipzero
  44++D27C FE 00       >				cp	0
  44++D27E CA 9E D2    >				jp	z,dotyskipzero
  45++D281 5F                   ld          e,a
  46++D282 3A 76 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D285                      IfAIsZeroGoto dotyskipzero
  47++D285 FE 00       >				cp	0
  47++D287 CA 9E D2    >				jp	z,dotyskipzero
  48++D28A 57                   ld          d,a                     ; de = xx12 x signed
  49++D28B ED 30                mul
  50++D28D 4A                   ld          c,d                     ; c = result
  51++D28E DD 69                ld          ixl,c
  52++D290 3A 7D C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D293 21 77 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D296 AE                   xor         (hl)                    ; XX15+3
  55++D297 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D299 DD 67                ld          ixh,a
  57++D29B C3 A2 D2             jp          dotaddxy
  58++D29E              dotyskipzero:
  59++D29E AF                   xor         a
  60++D29F 4F                   ld          c,a
  61++D2A0 DD 67                ld          ixh,a
  62++D2A2              dotaddxy:
  63++D2A2              ; Optimise later as this is 16 bit
  64++D2A2 26 00                ld          h,0                     ;
  65++D2A4 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D2A5 16 00                ld          d,0                     ;
  67++D2A7 59                   ld          e,c                     ; de = ylo + yscaled
  68++D2A8 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D2AA 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D2AB CD 3C CB             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D2AE 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D2AF 3A 7E C0             ld          a,(UBnkXX12zLo)         ;
  73++D2B2                      IfAIsZeroGoto dotzskipzero
  73++D2B2 FE 00       >				cp	0
  73++D2B4 CA DA D2    >				jp	z,dotzskipzero
  74++D2B7 5F                   ld          e,a                     ;
  75++D2B8 3A 78 C0             ld          a,(UBnkZScaled)         ;
  76++D2BB                      IfAIsZeroGoto dotzskipzero
  76++D2BB FE 00       >				cp	0
  76++D2BD CA DA D2    >				jp	z,dotzskipzero
  77++D2C0 57                   ld          d,a
  78++D2C1 ED 30                mul
  79++D2C3 E5                   push        hl                      ; save prev result
  80++D2C4 3A 79 C0             ld          a,(UBnkZScaledSign)
  81++D2C7 21 7F C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D2CA AE                   xor         (hl)                    ; hi sign
  83++D2CB E6 80                and         $80                     ; a = sign of multiply
  84++D2CD 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D2CE E1                   pop         hl
  86++D2CF 5A                   ld          e,d
  87++D2D0 16 00                ld          d,0
  88++D2D2 CD 3C CB             call ADDHLDESignBC
  89++D2D5 32 DA 93             ld          (varS),a
  90++D2D8 7D                   ld          a,l
  91++D2D9 C9                   ret                                 ; returns with A = value, varS = sign
  92++D2DA              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D2DA 78                   ld          a,b
  94++D2DB 32 DA 93             ld          (varS),a
  95++D2DE 7D                   ld          a,l
  96++D2DF C9                   ret
  97++D2E0              ;;;;       DotProductXX12XX15:
  98++D2E0              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D2E0              ;;;;       ld          e,a
 100++D2E0              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D2E0              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D2E0              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D2E0              ;;;;		mul
 104++D2E0              ;;;;       ld          b,d                     ; b as var T
 105++D2E0              ;;;;       ld          a,(UBnkXX12xSign)
 106++D2E0              ;;;;       ld          hl,UBnkXScaledSign
 107++D2E0              ;;;;       xor         (hl)
 108++D2E0              ;;;;       and         $80                     ; so sign bit only
 109++D2E0              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D2E0              ;;;; now we have b = XX12 x & norm x signed
 111++D2E0              ;;;; by here B = xlo & xscaled C = result sign
 112++D2E0              ;;;;       ld          a,(UBnkXX12yLo)
 113++D2E0              ;;;;       ld          e,a
 114++D2E0              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D2E0              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D2E0              ;;;;       mul
 117++D2E0              ;;;;       ld          a,d
 118++D2E0              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D2E0              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D2E0              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D2E0              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D2E0              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D2E0              ;;;;       xor         (hl)                    ; XX15+3
 124++D2E0              ;;;;       and         $80
 125++D2E0              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D2E0              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D2E0              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D2E0              ;;;;       ld          e,a                     ; use e as var Q
 129++D2E0              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D2E0              ;;;;       ld          d,a
 131++D2E0              ;;;;       mul
 132++D2E0              ;;;;       ld          a,d
 133++D2E0              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D2E0              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D2E0              ;;;;       ld          a,(UBnkZScaledSign)
 136++D2E0              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D2E0              ;;;;       xor         (hl)                    ; hi sign
 138++D2E0              ;;;;       and         $80
 139++D2E0              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D2E0              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D2E0
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 772+ D2E0              ;--------------------------------------------------------------------------------------------------------
 773+ D2E0              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 774+ D2E0                                      include "Universe/ScaleNormal.asm"
# file opened: ./Universe/ScaleNormal.asm
   1++D2E0              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D2E0              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D2E0              ScaleNormal:
   4++D2E0              LL93:
   5++D2E0 3A DF 93             ld      a,(XX17)                    ; scale--
   6++D2E3 DD 6F        		ld		ixl,a
   7++D2E5 3A 78 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D2E8 DD 2D        		dec		ixl
   9++D2EA F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D2EB              ScaleLoop:
  11++D2EB              LL933:
  12++D2EB 21 74 C0             ld      hl,XX15
  13++D2EE CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D2F0 23                   inc     hl							; looking at XX15 x sign now
  15++D2F1 23                   inc     hl							; looking at XX15 y Lo now
  16++D2F2 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D2F4 23           		inc		hl							; looking at XX15 y sign now
  18++D2F5 23           		inc		hl							; looking at XX15 z Lo now
  19++D2F6 CB 3E        		srl		(hl)
  20++D2F8 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D2F9 DD 2D                dec     ixl                         ; reduce scale
  22++D2FB F2 EB D2             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D2FE C9                   ret
  24++D2FF
# file closed: ./Universe/ScaleNormal.asm
 775+ D2FF              ;--------------------------------------------------------------------------------------------------------
 776+ D2FF                                      include "Universe/ScaleObjectDistance.asm"
# file opened: ./Universe/ScaleObjectDistance.asm
   1++D2FF              ScaleObjectDistance:
   2++D2FF              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D2FF 3A 0F C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D302 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D303              LL90:                                       ; scaling object distance
   6++D303 3A 6F C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D306 47                   ld      b,a                         ; z_hi (yReg)
   8++D307                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D307 FE 00       >                 cp     0
   8++D309 C8          >                 ret    z
   9++D30A              LL90Loop:
  10++D30A              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D30A 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D30B                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D30B 2A 6B C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D30E CB 3C       >                    srl   h
  12++D310 CB 1D       >                    rr    l
  12++D312 22 6B C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D315                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D315 2A 68 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D318 CB 3C       >                    srl   h
  13++D31A CB 1D       >                    rr    l
  13++D31C 22 68 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D31F                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D31F 2A 6E C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D322 CB 3C       >                    srl   h
  14++D324 CB 1D       >                    rr    l
  14++D326 22 6E C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D329 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D32A                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D32A FE 00       >				cp	0
  16++D32C C2 0A D3    >				jp	nz,LL90Loop
  17++D32F C9                   ret
  18++D330
# file closed: ./Universe/ScaleObjectDistance.asm
 777+ D330              ;--------------------------------------------------------------------------------------------------------
 778+ D330
 779+ D330              ; Backface cull
 780+ D330              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 781+ D330              ; normal vector = cross product of ship ccordinates
 782+ D330              ;
 783+ D330
 784+ D330                                      include "./Variables/CopyFaceToXX15.asm"
# file opened: ././Variables/CopyFaceToXX15.asm
   1++D330 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D331 47                                   ld      b,a                                                    ;;;
   3++D332 E6 80                                and     $80
   4++D334 32 75 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D337 78                                   ld      a,b
   6++D338 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D33A 47                                   ld      b,a
   8++D33B E6 80                                and     $80
   9++D33D 32 77 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D340 78                                   ld      a,b
  11++D341 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D343 E6 80                                and     $80
  13++D345 32 79 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D348 23                                   inc     hl                          ; move to X ccord
  15++D349 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D34A 32 74 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D34D 23                                   inc     hl                                                                                                                 ;;;
  18++D34E 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D34F 32 76 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D352 23                                   inc     hl                                                                                                                 ;;;
  21++D353 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D354 32 78 C0                             ld      (UBnkZScaled),a
  23++D357 C9                                   ret
  24++D358
# file closed: ././Variables/CopyFaceToXX15.asm
 785+ D358                                      include "./Variables/CopyFaceToXX12.asm"
# file opened: ././Variables/CopyFaceToXX12.asm
   1++D358 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D359 47                                   ld      b,a                         ; save sign bits to b
   3++D35A E6 80                                and     $80
   4++D35C 32 7B C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D35F 78                                   ld      a,b
   6++D360 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D362 47                                   ld      b,a
   8++D363 E6 80                                and     $80
   9++D365 32 7D C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D368 78                                   ld      a,b
  11++D369 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D36B E6 80                                and     $80
  13++D36D 32 7F C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D370 23                                   inc     hl                          ; move to X ccord
  15++D371 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D372 32 7A C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D375 23                                   inc     hl                                                                                                                 ;;;
  18++D376 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D377 32 7C C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D37A 23                                   inc     hl                                                                                                                 ;;;
  21++D37B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D37C 32 7E C0                             ld      (UBnkXX12zLo),a
  23++D37F C9                                   ret
  24++D380
# file closed: ././Variables/CopyFaceToXX12.asm
 786+ D380              ;--------------------------------------------------------------
 787+ D380              ; Original loginc in EE29 (LL9 4 of 12)
 788+ D380              ; Enters with XX4 = z distnace scaled to 1 .. 31
 789+ D380              ; get number of faces * 4      FaceCntX4
 790+ D380              ; return if no faces
 791+ D380              ; get Face Normal scale factor FaceScale (XX17)
 792+ D380              ; get ship pos z hi     (XX18)
 793+ D380              ; While Z hi <> 0
 794+ D380              ;    FaceScale = FaceScale + 1           (XX17)
 795+ D380              ;    Ship pos y = ship pos y / 2         (XX18)
 796+ D380              ;    ship pos x = ship pos x / 2         (XX18)
 797+ D380              ;    ship pos z = ship pos z / 2         (XX18)
 798+ D380              ; Loop
 799+ D380              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 800+ D380              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 801+ D380              ; Copy XX12 into XX18
 802+ D380              ; For each face
 803+ D380              ;     Get Face sign and visibility distance byte
 804+ D380              ;     if normal visibility range  < XX4
 805+ D380              ;        Get Face data into XX12
 806+ D380              ;        if FaceScale (XX17) >= 4
 807+ D380              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 808+ D380              ;        else
 809+ D380              ;           Copy FaceScale scaled to X  (XX17)
 810+ D380              ;LabelOverflowLoop:
 811+ D380              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 812+ D380              ;           While X >= 0
 813+ D380              ;              X--                                                                                                  ::LL93
 814+ D380              ;              if  x >= 0
 815+ D380              ;                  XX15x = XX15x / 2
 816+ D380              ;                  XX15y = XX15y / 2
 817+ D380              ;                  XX15y = XX15y / 2
 818+ D380              ;           loop
 819+ D380              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 820+ D380              ;           if A > 256 (i.e. was overflow)
 821+ D380              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 822+ D380              ;               X = 1
 823+ D380              ;               Goto LabelOverflowLoop
 824+ D380              ;           else
 825+ D380              ;              Scaled (XX15) Z = AddZ
 826+ D380              ;           endif
 827+ D380              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 828+ D380              ;           if A > 256 (i.e. was overflow)
 829+ D380              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 830+ D380              ;               X = 1
 831+ D380              ;               Goto LabelOverflowLoop
 832+ D380              ;           else
 833+ D380              ;              Scaled (XX15) X = AddX
 834+ D380              ;           endif
 835+ D380              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 836+ D380              ;           if A > 256 (i.e. was overflow)
 837+ D380              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 838+ D380              ;               X = 1
 839+ D380              ;               Goto LabelOverflowLoop
 840+ D380              ;           else
 841+ D380              ;              Scaled (XX15) Y = AddY
 842+ D380              ;           endif
 843+ D380              ;        endif
 844+ D380              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 845+ D380              ;        if dot product < 0
 846+ D380              ;           set face visible
 847+ D380              ;        else
 848+ D380              ;           set face invisible
 849+ D380              ;        end if
 850+ D380              ;     else
 851+ D380              ;       Set FaceVisibility to true
 852+ D380              ;     end if
 853+ D380              ; Next Face
 854+ D380
 855+ D380 DD 25        ScaleDownXX15byIXH:     dec     ixh
 856+ D382 F8                                   ret     m
 857+ D383 21 74 C0                             ld      hl,UBnkXScaled
 858+ D386 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 859+ D388 23                                   inc     hl                          ; looking at XX15 x sign now
 860+ D389 23                                   inc     hl                          ; looking at XX15 y Lo now
 861+ D38A CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 862+ D38C 23                                   inc     hl                          ; looking at XX15 y sign now
 863+ D38D 23                                   inc     hl                          ; looking at XX15 z Lo now
 864+ D38E CB 3E                                srl     (hl)
 865+ D390 C3 80 D3                             jp      ScaleDownXX15byIXH
 866+ D393 C9                                   ret
 867+ D394
 868+ D394 21 68 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 869+ D397 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 870+ D399 23                                   inc     hl                          ; looking at XX18 x sign now
 871+ D39A 23                                   inc     hl                          ; looking at XX18 y Lo now
 872+ D39B CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 873+ D39D 23                                   inc     hl                          ; looking at XX18 y sign now
 874+ D39E 23                                   inc     hl                          ; looking at XX18 z Lo now
 875+ D39F CB 3E                                srl     (hl)
 876+ D3A1 C9                                   ret
 877+ D3A2
 878+ D3A2              ;line of sight vector = [x y z] + face normal vector
 879+ D3A2
 880+ D3A2              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 881+ D3A2              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 882+ D3A2              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 883+ D3A2              ;
 884+ D3A2              ;--------------------------------------------------------------
 885+ D3A2              ; line of sight (eye outwards dot face normal vector < 0
 886+ D3A2              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 887+ D3A2              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 888+ D3A2              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 889+ D3A2
 890+ D3A2              RotateXX15ByTransMatXX16:
 891+ D3A2 21 2F C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 892+ D3A5 CD 14 88                             call    XX12ProcessOneRow
 893+ D3A8 47                                   ld      b,a                                 ; get
 894+ D3A9 7D                                   ld      a,l
 895+ D3AA B0                                   or      b
 896+ D3AB 32 7B C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 897+ D3AE 7D                                   ld      a,l
 898+ D3AF 32 7A C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 899+ D3B2
 900+ D3B2 21 35 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 901+ D3B5 CD 14 88                             call    XX12ProcessOneRow
 902+ D3B8 47                                   ld      b,a                                 ; get
 903+ D3B9 7D                                   ld      a,l
 904+ D3BA B0                                   or      b
 905+ D3BB 32 7D C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 906+ D3BE 7D                                   ld      a,l
 907+ D3BF 32 7C C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 908+ D3C2
 909+ D3C2 21 3B C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 910+ D3C5 CD 14 88                             call    XX12ProcessOneRow
 911+ D3C8 47                                   ld      b,a                                 ; get
 912+ D3C9 7D                                   ld      a,l
 913+ D3CA B0                                   or      b
 914+ D3CB 32 7F C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 915+ D3CE 7D                                   ld      a,l
 916+ D3CF 32 7E C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 917+ D3D2 C9                                   ret
 918+ D3D3
 919+ D3D3                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D3D3 00           CurrentNormIdx  DB 0
   2++D3D4              ; SomeFacesVisible:
   3++D3D4              ; EE29:
   4++D3D4
   5++D3D4              ;   Backface cull logic  line of sight vector . face normal vector
   6++D3D4              ;       line of sight vector . face normal vector
   7++D3D4              ;       => line of sight vector = [x y z] + face normal vector
   8++D3D4              ;       Where [x y z] =
   9++D3D4              ;                                               [ [x y z] . sidev ]
  10++D3D4              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D3D4              ;                                               [ [x y z] . nosev ]
  12++D3D4              ;
  13++D3D4              ;   so project the [x y z] vector into the face's normal space
  14++D3D4              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D3D4              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D3D4              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D3D4              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D3D4              ;
  19++D3D4              ;                         [ [x y z] . sidev + normal_x ]
  20++D3D4              ;                       = [ [x y z] . roofv + normal_y ]
  21++D3D4              ;                         [ [x y z] . nosev + normal_z ]
  22++D3D4              ;
  23++D3D4              ; so
  24++D3D4              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D3D4              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D3D4              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D3D4              ;
  28++D3D4              ; where face is visible if visibility < 0
  29++D3D4              ;
  30++D3D4              ;   so we set XX15 to [x y z] . sidev
  31++D3D4              ;                     [x y z] . roofv
  32++D3D4              ;                     [x y z] . nosev
  33++D3D4              ;
  34++D3D4
  35++D3D4
  36++D3D4
  37++D3D4 3A 6F C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D3D7                                      IfAIsZeroGoto .ScaleDone            ;
  38++D3D7 FE 00       >				cp	0
  38++D3D9 CA 06 D4    >				jp	z,.ScaleDone
  39++D3DC 2A 68 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D3DF ED 5B 6B C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D3E3 ED 4B 6E C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D3E7 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D3E9                                      ShiftHLRight1                       ; divide cam position by 2
  43++D3E9 CB 3C       >			   srl h
  43++D3EB CB 1D       >			   rr  l
  44++D3ED                                      ShiftDERight1                       ;
  44++D3ED CB 3A       >			   srl d
  44++D3EF CB 1B       >			   rr  e
  45++D3F1                                      ShiftBCRight1                       ;
  45++D3F1 CB 38       >			   srl b
  45++D3F3 CB 19       >			   rr  c
  46++D3F5 78                                   ld      a,b                         ; loop if not scaled down
  47++D3F6                                      IfANotZeroGoto .ScaleNormalLoop     ;
  47++D3F6 FE 00       >				cp	0
  47++D3F8 C2 E7 D3    >				jp	nz,.ScaleNormalLoop
  48++D3FB 22 68 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D3FE ED 53 6B C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D402 ED 43 6E C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D406 FD 7D        .ScaleDone:             ld      a,iyl
  52++D408 32 DF 93                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D40B C9                                   ret
  54++D40C
  55++D40C              ;;--BackFaceCull:
  56++D40C              ;;--;debug:jp debug
  57++D40C              ;;--; DEBUG  force for now
  58++D40C              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D40C              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D40C              ;;--;
  61++D40C              ;;--; DEBUG
  62++D40C              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D40C              ;;--                       ; break
  64++D40C              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D40C              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D40C              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D40C              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D40C              ;;--
  69++D40C              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D40C              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D40C              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D40C              ;;--                        call    ScaleDrawcam
  73++D40C              ;;--                        call    CopyDrawCamToScaled
  74++D40C              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D40C              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D40C              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D40C              ;;--                        ld      (varV),hl
  78++D40C              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D40C              ;;--                        srl     a                                                       ;
  80++D40C              ;;--                        srl     a                                                       ;
  81++D40C              ;;--                        ld      b,a                                                     ;
  82++D40C              ;;--                        xor     a
  83++D40C              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D40C              ;;--ProcessNormalsLoop:     push    hl
  85++D40C              ;;--                        push    bc
  86++D40C              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D40C              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D40C              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D40C              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D40C              ;;--                        jp      .FaceVisible
  91++D40C              ;;--; This bit needs to be added to force face visible
  92++D40C              ;;--.LL87:                  call    CopyFaceToXX12
  93++D40C              ;;--                        ld      a,(XX17)
  94++D40C              ;;--                        JumpIfALTNusng 4,.LL92
  95++D40C              ;;--.LL143:                 call    CopyXX18toXX15
  96++D40C              ;;--                        jp      .LL89
  97++D40C              ;;--.Ovflw:                 ld      a,(XX18)
  98++D40C              ;;--                        srl     a
  99++D40C              ;;--                        ld      (XX18),a
 100++D40C              ;;--                        ld      a,(XX18+6)
 101++D40C              ;;--                        srl     a
 102++D40C              ;;--                        ld      (XX18+6),a
 103++D40C              ;;--                        ld      a,(XX18+3)
 104++D40C              ;;--                        srl     a
 105++D40C              ;;--                        ld      (XX18+3),a
 106++D40C              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D40C              ;;--.LL92:                   ld      b,a
 108++D40C              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D40C              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D40C              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D40C              ;;--.LL93                   dec     b
 112++D40C              ;;--                        jp      m, .LL94
 113++D40C              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D40C              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D40C              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D40C              ;;--                        dec     b
 117++D40C              ;;--                        jp      p,.LL93Loop
 118++D40C              ;;--; Add normal to XX15
 119++D40C              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D40C              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D40C              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D40C              ;;--                        ld      a,(XX18+8)
 123++D40C              ;;--                        call    SAEquSRPlusAQ
 124++D40C              ;;--                        jp      c,.Ovflw
 125++D40C              ;;--                        ld      (UBnkZScaled),a
 126++D40C              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D40C              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D40C              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D40C              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D40C              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D40C              ;;--                        call    SAEquSRPlusAQ
 132++D40C              ;;--                        jp      c,.Ovflw
 133++D40C              ;;--                        ld      (UBnkXScaled),a
 134++D40C              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D40C              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D40C              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D40C              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D40C              ;;--                        call    SAEquSRPlusAQ
 139++D40C              ;;--                        jp      c,.Ovflw
 140++D40C              ;;--                        ld      (UBnkYScaled),a
 141++D40C              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D40C              ;;--; calculate dot product:
 143++D40C              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D40C              ;;--                        ld      a,(UBnkXScaled)
 145++D40C              ;;--                        call    AequAmulQdiv256
 146++D40C              ;;--                        ld      (varT),a
 147++D40C              ;;--                        ld      a,(UBnkXX12xSign)
 148++D40C              ;;--                        ld      hl,UBnkXScaledSign
 149++D40C              ;;--                        xor     (hl)
 150++D40C              ;;--                        ld      (varS),a
 151++D40C              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D40C              ;;--                        ld      a,(UBnkYScaled)
 153++D40C              ;;--                        call    AequAmulQdiv256
 154++D40C              ;;--                        ld      (varQ),a
 155++D40C              ;;--                        ldCopyByte  varT,varR
 156++D40C              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D40C              ;;--                        ld      hl, UBnkYScaledSign
 158++D40C              ;;--                        xor     (hl)
 159++D40C              ;;--                        call    SAEquSRPlusAQ
 160++D40C              ;;--                        ld      (varT),a
 161++D40C              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D40C              ;;--                        ld      a,  (UBnkZScaled)
 163++D40C              ;;--                        call    AequAmulQdiv256
 164++D40C              ;;--                        ld      (varQ),a
 165++D40C              ;;--                        ldCopyByte  varT, varR
 166++D40C              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D40C              ;;--                        ld      hl, UBnkXX12zSign
 168++D40C              ;;--                        xor     (hl)
 169++D40C              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D40C              ;;--                        test    $80
 171++D40C              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D40C              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D40C              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D40C              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D40C              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D40C              ;;--                        call        SetFaceAVisible
 177++D40C              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D40C              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D40C              ;;--                        pop         bc
 180++D40C              ;;--                        pop         hl                      ; get normal data pointer back
 181++D40C              ;;--                        ld          a,4
 182++D40C              ;;--                        add         hl,a                    ; move to next normal entry
 183++D40C              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D40C              ;;--                        dec         b
 185++D40C              ;;--                        jp          nz,ProcessNormalsLoop
 186++D40C              ;;--                        ret
 187++D40C
 188++D40C
 189++D40C
 190++D40C
 191++D40C              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D40C              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D40C              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D40C              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D40C              ;;;;;                        test    $80
 196++D40C              ;;;;;                        jp      nz, FaceVisible
 197++D40C              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D40C              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D40C              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D40C              ;;;;;                        IfAIsZeroGoto .ScaleDone            ;
 201++D40C              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D40C              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D40C              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D40C              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D40C              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D40C              ;;;;;                        ShiftDERight1                       ;
 207++D40C              ;;;;;                        ShiftBCRight1                       ;
 208++D40C              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D40C              ;;;;;                        IfANotZeroGoto .ScaleNormalLoop     ;
 210++D40C              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D40C              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D40C              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D40C              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D40C              ;;;;;.ScaleDone:             ld      a,iyl
 215++D40C              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D40C              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D40C              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D40C              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D40C              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D40C              ;;;;;
 221++D40C              ;;;;;
 222++D40C              ;;;;;
 223++D40C              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D40C              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D40C              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D40C              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D40C              ;;;;;                        ld      (varV),hl
 228++D40C              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D40C              ;;;;;                        srl     a                                                       ;
 230++D40C              ;;;;;                        srl     a                                                       ;
 231++D40C              ;;;;;                        ld      b,a                                                     ;
 232++D40C              ;;;;;                        xor     a
 233++D40C              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D40C              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D40C              ;;;;;                        push    bc
 236++D40C              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D40C              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D40C              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D40C              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D40C              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D40C              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D40C              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D40C              ;;;;;                        jp      .LL89
 244++D40C              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D40C              ;;;;;                        srl     a
 246++D40C              ;;;;;                        ld      (XX18),a
 247++D40C              ;;;;;                        ld      a,(XX18+6)
 248++D40C              ;;;;;                        srl     a
 249++D40C              ;;;;;                        ld      (XX18+6),a
 250++D40C              ;;;;;                        ld      a,(XX18+3)
 251++D40C              ;;;;;                        srl     a
 252++D40C              ;;;;;                        ld      (XX18+3),a
 253++D40C              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D40C              ;;;;;.LL92:                  ld      b,a
 255++D40C              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D40C              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D40C              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D40C              ;;;;;.LL93                   dec     b
 259++D40C              ;;;;;                        jp      m, .LL94
 260++D40C              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D40C              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D40C              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D40C              ;;;;;                        dec     b
 264++D40C              ;;;;;                        jp      p,.LL93Loop
 265++D40C              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D40C              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D40C              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D40C              ;;;;;                        ld      a,(XX18+8)
 269++D40C              ;;;;;                        call    SAEquSRPlusAQ
 270++D40C              ;;;;;                        jp      c,.Ovflw
 271++D40C              ;;;;;                        ld      (UBnkZScaled),a
 272++D40C              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D40C              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D40C              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D40C              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D40C              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D40C              ;;;;;                        call    SAEquSRPlusAQ
 278++D40C              ;;;;;                        jp      c,.Ovflw
 279++D40C              ;;;;;                        ld      (UBnkXScaled),a
 280++D40C              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D40C              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D40C              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D40C              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D40C              ;;;;;                        call    SAEquSRPlusAQ
 285++D40C              ;;;;;                        jp      c,.Ovflw
 286++D40C              ;;;;;                        ld      (UBnkYScaled),a
 287++D40C              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D40C              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D40C              ;;;;;                        ld      a,(UBnkXScaled)
 290++D40C              ;;;;;                        call    AequAmulQdiv256
 291++D40C              ;;;;;                        ld      (varT),a
 292++D40C              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D40C              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D40C              ;;;;;                        xor     (hl)
 295++D40C              ;;;;;                        ld      (varS),a
 296++D40C              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D40C              ;;;;;                        ld      a,(UBnkYScaled)
 298++D40C              ;;;;;                        call    AequAmulQdiv256
 299++D40C              ;;;;;                        ld      (varQ),a
 300++D40C              ;;;;;                        ldCopyByte  varT,varR
 301++D40C              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D40C              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D40C              ;;;;;                        xor     (hl)
 304++D40C              ;;;;;                        call    SAEquSRPlusAQ
 305++D40C              ;;;;;                        ld      (varT),a
 306++D40C              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D40C              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D40C              ;;;;;                        call    AequAmulQdiv256
 309++D40C              ;;;;;                        ld      (varQ),a
 310++D40C              ;;;;;                        ldCopyByte  varT, varR
 311++D40C              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D40C              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D40C              ;;;;;                        xor     (hl)
 314++D40C              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D40C              ;;;;;                        test    $80
 316++D40C              ;;;;;                        jr      nz,.FaceVisible
 317++D40C              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D40C              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D40C              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D40C              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D40C              ;;;;;                        call    SetFaceAVisible
 322++D40C              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D40C              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D40C              ;;;;;                        pop         bc
 325++D40C              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D40C              ;;;;;                        ld          a,4
 327++D40C              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D40C              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D40C              ;;;;;                        dec         b
 330++D40C              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D40C              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D40C              ;;;;;
 333++D40C
 334++D40C              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 334++D40C 3A 09 C3    >                   ld   a,(FaceCtX4Addr)
 334++D40F FE 00       >                   cp     0
 334++D411 C8          >                   ret    z
 335++D412                                     ; break
 336++D412 CD 74 CF                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 337++D415 CD 29 86                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 338++D418 CD 56 D1                             call    LoadCraftToCamera           ; XX18 = camera
 339++D41B                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 340++D41B 3A 0F C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 341++D41E FD 6F                                ld      iyl,a                       ; iyl = scale factor
 342++D420              ; By this point XX18 = scaled draw cam and iyl = scale factor
 343++D420 CD D4 D3                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 344++D423 CD 6F D1                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 345++D426 CD FF 88     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 346++D429 CD E7 D0                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 347++D42C 21 F1 C8     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 348++D42F 22 82 93                             ld      (varV),hl
 349++D432 3A 09 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 350++D435 CB 3F                                srl     a                                                       ;
 351++D437 CB 3F                                srl     a                                                       ;
 352++D439 47                                   ld      b,a                                                     ;
 353++D43A AF                                   xor     a
 354++D43B 32 D3 D3                             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 355++D43E E5           .ProcessNormalsLoop:     push    hl
 356++D43F C5                                   push    bc
 357++D440 7E           .LL86:                  ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 358++D441 E6 1F                                and     $1F                                                     ;     if normal visibility range  < XX4
 359++D443                                      JumpIfAGTENusng c,.FaceVisible                                  ; commented out for debuggging the skip
 359++D443 B9          >                        cp     c
 359++D444 D2 89 D5    >                        jp		nc,.FaceVisible
 360++D447              ; This bit needs to be added to force face visible
 361++D447 CD 58 D3     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 362++D44A 3A DF 93                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 363++D44D 47                                   ld      b,a
 364++D44E                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 364++D44E FE 04       >                        cp      4
 364++D450 DA 8B D4    >                        jp		c,.ScaleNormByXX17
 365++D453 CD 31 D1     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 366++D456 C3 1A D5                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 367++D459 3A 68 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 368++D45C CB 3F                                srl     a                           ; which is held in XX18
 369++D45E 32 68 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 370++D461 3A 6E C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 371++D464 CB 3F                                srl     a                           ; .
 372++D466 32 6E C0                             ld      (UBnkDrawCam0zLo),a         ; .
 373++D469 3A 6B C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 374++D46C CB 3F                                srl     a                           ; .
 375++D46E 32 6B C0                             ld      (UBnkDrawCam0yLo),a        ; .
 376++D471 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 377++D473                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 377++D473 3A 74 C0    >                    ld      a,(UBnkXScaled)
 377++D476 CB 3F       >                    srl     a
 377++D478 32 74 C0    >                    ld      (UBnkXScaled),a
 378++D47B                                      ShiftMem8Right1 UBnkYScaled         ;
 378++D47B 3A 76 C0    >                    ld      a,(UBnkYScaled)
 378++D47E CB 3F       >                    srl     a
 378++D480 32 76 C0    >                    ld      (UBnkYScaled),a
 379++D483                                      ShiftMem8Right1 UBnkZScaled         ;
 379++D483 3A 78 C0    >                    ld      a,(UBnkZScaled)
 379++D486 CB 3F       >                    srl     a
 379++D488 32 78 C0    >                    ld      (UBnkZScaled),a
 380++D48B              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 381++D48B              .ScaleNormByXX17:       ;ld      b,a
 382++D48B CD 0C D1                             call    CopyXX12toXX15
 383++D48E 05           .LL93                   dec     b
 384++D48F FA AE D4                             jp      m, .ScaledNorm
 385++D492              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 385++D492 3A 74 C0    >                    ld      a,(UBnkXScaled)
 385++D495 CB 3F       >                    srl     a
 385++D497 32 74 C0    >                    ld      (UBnkXScaled),a
 386++D49A                                      ShiftMem8Right1 UBnkYScaled        ;
 386++D49A 3A 76 C0    >                    ld      a,(UBnkYScaled)
 386++D49D CB 3F       >                    srl     a
 386++D49F 32 76 C0    >                    ld      (UBnkYScaled),a
 387++D4A2                                      ShiftMem8Right1 UBnkZScaled        ;
 387++D4A2 3A 78 C0    >                    ld      a,(UBnkZScaled)
 387++D4A5 CB 3F       >                    srl     a
 387++D4A7 32 78 C0    >                    ld      (UBnkZScaled),a
 388++D4AA 05                                   dec     b                          ;
 389++D4AB F2 92 D4                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 390++D4AE              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 391++D4AE              ; Add normal to XX15
 392++D4AE              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 393++D4AE              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 394++D4AE              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 395++D4AE              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 396++D4AE              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 396++D4AE 3A 78 C0    >               ld       a,(UBnkZScaled)
 396++D4B1 32 D9 93    >               ld       (varR),a
 397++D4B4                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 397++D4B4 3A 7F C0    >               ld       a,(UBnkXX12zSign)
 397++D4B7 32 DA 93    >               ld       (varS),a
 398++D4BA                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 398++D4BA 3A 6E C0    >               ld       a,(UBnkDrawCam0zLo)
 398++D4BD 32 D8 93    >               ld       (varQ),a
 399++D4C0 3A 70 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 400++D4C3 CD 33 A7                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 401++D4C6 DA 59 D4                             jp      c,.Ovflw
 402++D4C9 32 78 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 403++D4CC                                      ldCopyByte  varS, UBnkZScaledSign   ;
 403++D4CC 3A DA 93    >               ld       a,(varS)
 403++D4CF 32 79 C0    >               ld       (UBnkZScaledSign),a
 404++D4D2                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 404++D4D2 3A 74 C0    >               ld       a,(UBnkXScaled)
 404++D4D5 32 D9 93    >               ld       (varR),a
 405++D4D8                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 405++D4D8 3A 7B C0    >               ld       a,(UBnkXX12xSign)
 405++D4DB 32 DA 93    >               ld       (varS),a
 406++D4DE                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 406++D4DE 3A 68 C0    >               ld       a,(UBnkDrawCam0xLo)
 406++D4E1 32 D8 93    >               ld       (varQ),a
 407++D4E4 3A 6A C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 408++D4E7 CD 33 A7                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 409++D4EA DA 59 D4                             jp      c,.Ovflw
 410++D4ED 32 74 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 411++D4F0                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 411++D4F0 3A DA 93    >               ld       a,(varS)
 411++D4F3 32 75 C0    >               ld       (UBnkXScaledSign),a
 412++D4F6                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 412++D4F6 3A 76 C0    >               ld       a,(UBnkYScaled)
 412++D4F9 32 D9 93    >               ld       (varR),a
 413++D4FC                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 413++D4FC 3A 7D C0    >               ld       a,(UBnkXX12ySign)
 413++D4FF 32 DA 93    >               ld       (varS),a
 414++D502                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 414++D502 3A 6B C0    >               ld       a,(UBnkDrawCam0yLo)
 414++D505 32 D8 93    >               ld       (varQ),a
 415++D508 3A 6D C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 416++D50B CD 33 A7                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 417++D50E DA 59 D4                             jp      c,.Ovflw                    ; .
 418++D511 32 76 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 419++D514                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 419++D514 3A DA 93    >               ld       a,(varS)
 419++D517 32 77 C0    >               ld       (UBnkYScaledSign),a
 420++D51A              ; calculate dot product LL89
 421++D51A              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 421++D51A 3A 7A C0    >               ld       a,(UBnkXX12xLo)
 421++D51D 32 D8 93    >               ld       (varQ),a
 422++D520 3A 74 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 423++D523 CD 9F A6                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 424++D526 32 F8 93                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 425++D529 3A 7B C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 426++D52C 21 75 C0                             ld      hl,UBnkXScaledSign          ; .
 427++D52F AE                                   xor     (hl)                        ; .
 428++D530 32 DA 93                             ld      (varS),a                    ; .
 429++D533                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 429++D533 3A 7C C0    >               ld       a,(UBnkXX12yLo)
 429++D536 32 D8 93    >               ld       (varQ),a
 430++D539 3A 76 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 431++D53C CD 9F A6                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 432++D53F 32 D8 93                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 433++D542                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 433++D542 3A F8 93    >               ld       a,(varT)
 433++D545 32 D9 93    >               ld       (varR),a
 434++D548 3A 7D C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 435++D54B 21 77 C0                             ld      hl, UBnkYScaledSign         ; .
 436++D54E AE                                   xor     (hl)                        ; .
 437++D54F CD 33 A7                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 438++D552 32 F8 93                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 439++D555                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 439++D555 3A 7E C0    >               ld       a,(UBnkXX12zLo)
 439++D558 32 D8 93    >               ld       (varQ),a
 440++D55B 3A 78 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 441++D55E CD 9F A6                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 442++D561 32 D8 93                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 443++D564                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 443++D564 3A F8 93    >               ld       a,(varT)
 443++D567 32 D9 93    >               ld       (varR),a
 444++D56A 3A 79 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 445++D56D 21 7F C0                             ld      hl, UBnkXX12zSign           ; .
 446++D570 AE                                   xor     (hl)                        ; .
 447++D571 CD 33 A7                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 448++D574 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 449++D576 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 450++D578 3A DA 93                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 451++D57B ED 27 80                             test    $80                         ; this should test S not A
 452++D57E 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 453++D580 3A D3 D3     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 454++D583 CD B4 CF                             call        SetFaceAHidden                                      ;           set face invisible
 455++D586 C3 8F D5                             jp          .ProcessNormalLoopEnd                                ;        end if
 456++D589 3A D3 D3     .FaceVisible:            ld          a,(CurrentNormIdx)
 457++D58C CD AB CF                             call        SetFaceAVisible
 458++D58F 21 D3 D3     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 459++D592 34                                   inc         (hl)                    ; move index pointer up by one
 460++D593 C1                                   pop         bc
 461++D594 E1                                   pop         hl                      ; get normal data pointer back
 462++D595 3E 04                                ld          a,4
 463++D597 ED 31                                add         hl,a                    ; move to next normal entry
 464++D599 22 82 93                             ld          (varV),hl               ; save as we need it again
 465++D59C 05                                   dec         b
 466++D59D C2 3E D4                             jp          nz,.ProcessNormalsLoop
 467++D5A0 C9                                   ret
 468++D5A1
# file closed: ././ModelRender/BackfaceCull.asm
 920+ D5A1              ;--------------------------------------------------------------------------------------------------------
 921+ D5A1              ; Process edges
 922+ D5A1              ; .....................................................
 923+ D5A1              TransposeNodeVal:   MACRO arg0?
 924+ D5A1 ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 925+ D5A1 ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 926+ D5A1 ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 927+ D5A1 ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 928+ D5A1 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 929+ D5A1 ~            NodeXPositive\1
 929+ D5A1 ~
 930+ D5A1 ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 931+ D5A1 ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 932+ D5A1 ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 933+ D5A1 ~                    ld          h,0                                 ; but we don;t want the sign
 934+ D5A1 ~                    add         hl,bc                               ; its a 16 bit add
 935+ D5A1 ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 936+ D5A1 ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 937+ D5A1 ~                    ld          (UbnkXPointSign),a
 938+ D5A1 ~                    jp          FinishedThisNode\1
 939+ D5A1 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 940+ D5A1 ~            NodeNegative\1
 940+ D5A1 ~
 941+ D5A1 ~            LL52\1
 941+ D5A1 ~                                                              ;
 942+ D5A1 ~                    ld          hl,(UBnK\0lo)                       ; Coord
 943+ D5A1 ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 944+ D5A1 ~                    ld          b,0                                 ; XX12 lo byte only
 945+ D5A1 ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 946+ D5A1 ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 947+ D5A1 ~            NodeXNegSignChange\1
 947+ D5A1 ~
 948+ D5A1 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 949+ D5A1 ~                    call        negate16hl                          ; Convert back to positive and flip sign
 950+ D5A1 ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 951+ D5A1 ~                    xor         $80                                 ; Flip bit 7
 952+ D5A1 ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 953+ D5A1 ~            SetAndMop\1
 953+ D5A1 ~
 954+ D5A1 ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 955+ D5A1 ~            FinishedThisNode\1
 956+ D5A1                                  ENDM
 957+ D5A1
 958+ D5A1              ;------------------------------------------------------------------------------------------------------------------------------
 959+ D5A1              CopyByteAtNextHL:   MACRO targetaddr
 960+ D5A1 ~                                inc         hl                                  ; vertex byte#1
 961+ D5A1 ~                                ld          a,(hl)                              ;
 962+ D5A1 ~                                ld          (targetaddr),a                     ; XX15+2 = (V),Y
 963+ D5A1                                  ENDM
 964+ D5A1              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 965+ D5A1
 966+ D5A1              TransposeXX12NodeToXX15:
 967+ D5A1                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 967+ D5A1 3A 0D C0    >               ld       a,(UBnKxsgn)
 967+ D5A4 32 76 C0    >               ld       (UbnkXPointSign),a
 968+ D5A7 ED 4B 7A C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 969+ D5AB A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 970+ D5AC FA C2 D5             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 971+ D5AF              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 972+ D5AF              NodeXPositiveX:
 973+ D5AF 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 974+ D5B0 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 975+ D5B2 2A 0B C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 976+ D5B5 26 00                ld          h,0                                 ; but we don;t want the sign
 977+ D5B7 09                   add         hl,bc                               ; its a 16 bit add
 978+ D5B8 22 74 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 979+ D5BB AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 980+ D5BC 32 76 C0             ld          (UbnkXPointSign),a
 981+ D5BF C3 DE D5             jp          FinishedThisNodeX
 982+ D5C2              ; If we get here then _sign and vertv_ have different signs so do subtract
 983+ D5C2              NodeNegativeX:
 984+ D5C2              LL52X:                                                 ;
 985+ D5C2 2A 0B C0             ld          hl,(UBnKxlo)                       ; Coord
 986+ D5C5 ED 4B 7A C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 987+ D5C9 06 00                ld          b,0                                 ; XX12 lo byte only
 988+ D5CB ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 989+ D5CD F2 DB D5             jp          p,SetAndMopX                       ; if result is positive skip to write back
 990+ D5D0              NodeXNegSignChangeX:
 991+ D5D0              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 992+ D5D0 CD 2C A4             call        negate16hl                          ; Convert back to positive and flip sign
 993+ D5D3 3A 76 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 994+ D5D6 EE 80                xor         $80                                 ; Flip bit 7
 995+ D5D8 32 76 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 996+ D5DB              SetAndMopX:
 997+ D5DB 22 0B C0             ld          (UBnKxlo),hl                       ; XX15+0
 998+ D5DE              FinishedThisNodeX:
 999+ D5DE
1000+ D5DE              LL53:
1001+ D5DE
1002+ D5DE                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1002+ D5DE 3A 10 C0    >               ld       a,(UBnKysgn)
1002+ D5E1 32 79 C0    >               ld       (UbnkYPointSign),a
1003+ D5E4 ED 4B 7C C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1004+ D5E8 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1005+ D5E9 FA FF D5             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1006+ D5EC              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1007+ D5EC              NodeXPositiveY:
1008+ D5EC 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1009+ D5ED 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1010+ D5EF 2A 0E C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1011+ D5F2 26 00                ld          h,0                                 ; but we don;t want the sign
1012+ D5F4 09                   add         hl,bc                               ; its a 16 bit add
1013+ D5F5 22 77 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1014+ D5F8 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1015+ D5F9 32 76 C0             ld          (UbnkXPointSign),a
1016+ D5FC C3 1B D6             jp          FinishedThisNodeY
1017+ D5FF              ; If we get here then _sign and vertv_ have different signs so do subtract
1018+ D5FF              NodeNegativeY:
1019+ D5FF              LL52Y:                                                 ;
1020+ D5FF 2A 0E C0             ld          hl,(UBnKylo)                       ; Coord
1021+ D602 ED 4B 7C C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1022+ D606 06 00                ld          b,0                                 ; XX12 lo byte only
1023+ D608 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1024+ D60A F2 18 D6             jp          p,SetAndMopY                       ; if result is positive skip to write back
1025+ D60D              NodeXNegSignChangeY:
1026+ D60D              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1027+ D60D CD 2C A4             call        negate16hl                          ; Convert back to positive and flip sign
1028+ D610 3A 79 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1029+ D613 EE 80                xor         $80                                 ; Flip bit 7
1030+ D615 32 79 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1031+ D618              SetAndMopY:
1032+ D618 22 0E C0             ld          (UBnKylo),hl                       ; XX15+0
1033+ D61B              FinishedThisNodeY:
1034+ D61B
1035+ D61B
1036+ D61B              TransposeZ:
1037+ D61B              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1038+ D61B 3A 7F C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1039+ D61E                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1039+ D61E CB 7F       >                        bit 	7,a
1039+ D620 C2 34 D6    >                        jp      nz,NegativeNodeZ
1040+ D623 3A 7E C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1041+ D626 2A 11 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1042+ D629 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1043+ D62B 7D                   ld          a,l
1044+ D62C 32 F8 93             ld          (varT),a                            ;                                                                           ;;;
1045+ D62F 7C                   ld          a,h
1046+ D630 32 D7 93             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1047+ D633 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1048+ D634              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1049+ D634              NegativeNodeZ:
1050+ D634              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1051+ D634 2A 11 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1052+ D637 ED 4B 7E C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1053+ D63B 06 00                ld          b,0                                 ; upper byte will be garbage
1054+ D63D                      ClearCarryFlag
1054+ D63D B7          >				or a
1055+ D63E ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1056+ D640 7D                   ld          a,l
1057+ D641 32 F8 93             ld          (varT),a                            ; t = result low
1058+ D644 7C                   ld          a,h
1059+ D645 32 D7 93             ld          (varU),a                            ; u = result high
1060+ D648 E2 55 D6             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1061+ D64B              LL56Overflow:
1062+ D64B FE 00                cp          0                                   ; is varU 0?
1063+ D64D 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1064+ D64F 3A F8 93             ld          a,(varT)                            ; T \ restore z lo
1065+ D652                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1065+ D652 FE 04       >                   cp    4
1065+ D654 D0          >                   ret	 nc
1066+ D655              MakeNodeClose:
1067+ D655              LL140:                                                  ; else make node close
1068+ D655 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1069+ D656 32 D7 93             ld          (varU),a                            ; U
1070+ D659 3E 04                ld          a,4                                 ; lo
1071+ D65B 32 F8 93             ld          (varT),a                            ; T
1072+ D65E C9                   ret
1073+ D65F              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1074+ D65F              ProcessVisibleNode:
1075+ D65F              RotateNode:                                                                                                                         ;;;
1076+ D65F CD B6 D0             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1077+ D662              LL52LL53LL54LL55
1078+ D662              TransposeNode:
1079+ D662 CD A1 D5             call        TransposeXX12NodeToXX15
1080+ D665
1081+ D665              ; ......................................................                                                         ;;;
1082+ D665              NodeAdditionsDone:
1083+ D665              Scale16BitTo8Bit:
1084+ D665              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1085+ D665 3A D7 93             ld          a,(varU)                            ; U \ z hi
1086+ D668 21 75 C0             ld          hl,UbnkXPointHi
1087+ D66B B6                   or          (hl)                                ; XX15+1    \ x hi
1088+ D66C 21 78 C0             ld          hl,UbnkYPointHi
1089+ D66F B6                   or          (hl)                                ; XX15+4    \ y hi
1090+ D670              AreXYZHiAllZero:
1091+ D670 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1092+ D672              DivideXYZBy2:
1093+ D672                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1093+ D672 2A 74 C0    >                    ld    hl,(UbnkXPoint)
1093+ D675 CB 3C       >                    srl   h
1093+ D677 CB 1D       >                    rr    l
1093+ D679 22 74 C0    >                    ld    (UbnkXPoint),hl
1094+ D67C                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1094+ D67C 2A 77 C0    >                    ld    hl,(UbnkYPoint)
1094+ D67F CB 3C       >                    srl   h
1094+ D681 CB 1D       >                    rr    l
1094+ D683 22 77 C0    >                    ld    (UbnkYPoint),hl
1095+ D686 3A D7 93             ld          a,(varU)                            ; U \ z hi
1096+ D689 67                   ld          h,a
1097+ D68A 3A F8 93             ld          a,(varT)                            ; T \ z lo
1098+ D68D 6F                   ld          l,a
1099+ D68E                      ShiftHLRight1
1099+ D68E CB 3C       >			   srl h
1099+ D690 CB 1D       >			   rr  l
1100+ D692 7C                   ld          a,h
1101+ D693 32 D7 93             ld          (varU),a
1102+ D696 7D                   ld          a,l
1103+ D697 32 F8 93             ld          (varT),a                            ; T \ z lo
1104+ D69A C3 65 D6             jp          Scale16BitTo8Bit                    ; loop U
1105+ D69D              NodeScalingDone:
1106+ D69D              LL60:                                                   ; hi U rolled to 0, exited loop above.
1107+ D69D              ProjectNodeToScreen:
1108+ D69D                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1108+ D69D 3A F8 93    >               ld       a,(varT)
1108+ D6A0 32 D8 93    >               ld       (varQ),a
1109+ D6A3 3A 74 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1110+ D6A6 21 D8 93             ld          hl,varQ
1111+ D6A9 BE                   cp          (hl)                                ; Q
1112+ D6AA                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1112+ D6AA DA B3 D6    >                        jp		c,DoSmallAngle
1113+ D6AD CD 3A A8             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1114+ D6B0 C3 BB D6             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1115+ D6B3              DoSmallAngle:                                           ; small x angle
1116+ D6B3              LL69:
1117+ D6B3              ; TODO check if we need to retain BC as this trashes it
1118+ D6B3              ;Input: BC = Dividend, DE = Divisor, HL = 0
1119+ D6B3              ;Output: BC = Quotient, HL = Remainder
1120+ D6B3 47                   ld      b,a
1121+ D6B4 CD 85 A2             call    DIV16UNDOC
1122+ D6B7 79                   ld      a,c
1123+ D6B8 32 D9 93             ld      (varR),a
1124+ D6BB               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1125+ D6BB              SkipSmallAngle:
1126+ D6BB              ScaleX:
1127+ D6BB              LL65:                                                   ; both continue for scaling based on z
1128+ D6BB 3A 76 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1129+ D6BE                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1129+ D6BE CB 7F       >                        bit 	7,a
1129+ D6C0 C2 D3 D6    >                        jp      nz,NegativeXPoint
1130+ D6C3              ; ......................................................
1131+ D6C3              PositiveXPoint:
1132+ D6C3 3A D9 93             ld          a,(varR)
1133+ D6C6 6F                   ld          l,a
1134+ D6C7 3A D7 93             ld          a,(varU)
1135+ D6CA 67                   ld          h,a
1136+ D6CB 3E 80                ld          a,ScreenCenterX
1137+ D6CD ED 31                add         hl,a
1138+ D6CF EB                   ex          de,hl
1139+ D6D0 C3 E3 D6             jp          StoreXPoint
1140+ D6D3              NegativeXPoint:
1141+ D6D3              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1142+ D6D3 3A D9 93             ld          a,(varR)
1143+ D6D6 6F                   ld          l,a
1144+ D6D7 3A D7 93             ld          a,(varU)
1145+ D6DA 67                   ld          h,a
1146+ D6DB 0E 80                ld          c,ScreenCenterX
1147+ D6DD 06 00                ld          b,0
1148+ D6DF                      ClearCarryFlag
1148+ D6DF B7          >				or a
1149+ D6E0 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1150+ D6E2 EB                   ex          de,hl
1151+ D6E3              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1152+ D6E3 FD 73 00             ld          (iy+0),e                            ; Update X Point
1153+ D6E6 FD 72 01             ld          (iy+1),d                            ; Update X Point
1154+ D6E9 FD 23                inc         iy
1155+ D6EB FD 23                inc         iy
1156+ D6ED              ; ......................................................
1157+ D6ED              LL66:
1158+ D6ED              ProcessYPoint:
1159+ D6ED AF                   xor         a                                   ; y hi = 0
1160+ D6EE 32 D7 93             ld          (varU),a                            ; U
1161+ D6F1                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1161+ D6F1 3A F8 93    >               ld       a,(varT)
1161+ D6F4 32 D8 93    >               ld       (varQ),a
1162+ D6F7 3A 77 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1163+ D6FA 21 D8 93             ld          hl,varQ
1164+ D6FD BE                   cp          (hl)                                ; Q
1165+ D6FE                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1165+ D6FE DA 07 D7    >                        jp		c,SmallYHop
1166+ D701              SmallYPoint:
1167+ D701 CD 3A A8             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1168+ D704 C3 0A D7             jp          SkipYScale                          ; LL68 hop over small y yangle
1169+ D707              SmallYHop:
1170+ D707              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1171+ D707 CD 17 A8             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1172+ D70A              SkipYScale:
1173+ D70A              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1174+ D70A 3A 79 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1175+ D70D CB 7F                bit         7,a
1176+ D70F C2 22 D7             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1177+ D712              PositiveYPoint:
1178+ D712 3A D9 93             ld          a,(varR)
1179+ D715 6F                   ld          l,a
1180+ D716 3A D7 93             ld          a,(varU)
1181+ D719 67                   ld          h,a
1182+ D71A 3E 60                ld          a,ScreenHeightHalf
1183+ D71C ED 31                add         hl,a
1184+ D71E EB                   ex          de,hl
1185+ D71F C3 32 D7             jp          LL50
1186+ D722              NegativeYPoint:
1187+ D722              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1188+ D722 3A D9 93             ld          a,(varR)
1189+ D725 6F                   ld          l,a
1190+ D726 3A D7 93             ld          a,(varU)
1191+ D729 67                   ld          h,a
1192+ D72A 0E 60                ld          c,ScreenHeightHalf
1193+ D72C 06 00                ld          b,0
1194+ D72E                      ClearCarryFlag
1194+ D72E B7          >				or a
1195+ D72F ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1196+ D731 EB                   ex          de,hl
1197+ D732              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1198+ D732 FD 73 00             ld          (iy+0),e                            ; Update X Point
1199+ D735 FD 72 01             ld          (iy+1),d                            ; Update X Point
1200+ D738 FD 23                inc         iy
1201+ D73A FD 23                inc         iy
1202+ D73C C9                   ret
1203+ D73D              ;--------------------------------------------------------------------------------------------------------
1204+ D73D              ;;;     Byte 0 = X magnitide with origin at middle of ship
1205+ D73D              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1206+ D73D              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1207+ D73D              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1208+ D73D              CopyNodeToXX15:
1209+ D73D                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1209+ D73D 7E          >               ld       a,(hl)
1209+ D73E 32 74 C0    >               ld       (UBnkXScaled),a
1210+ D741 23                   inc         hl
1211+ D742                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1211+ D742 7E          >               ld       a,(hl)
1211+ D743 32 76 C0    >               ld       (UBnkYScaled),a
1212+ D746 23                   inc         hl
1213+ D747                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1213+ D747 7E          >               ld       a,(hl)
1213+ D748 32 78 C0    >               ld       (UBnkZScaled),a
1214+ D74B 23                   inc         hl
1215+ D74C              PopulateXX15SignBits:
1216+ D74C              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1217+ D74C 7E                   ld          a,(hl)
1218+ D74D 4F                   ld          c,a                                 ; copy sign and visibility to c
1219+ D74E 47                   ld          b,a
1220+ D74F E6 80                and         $80                                 ; keep high 3 bits
1221+ D751 32 75 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1222+ D754 78                   ld          a,b
1223+ D755 E6 40                and         $40
1224+ D757 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1225+ D759 32 77 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1226+ D75C 78                   ld          a,b
1227+ D75D E6 20                and         $20
1228+ D75F CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1229+ D761 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1230+ D763 32 79 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1231+ D766 79                   ld          a,c                                 ; returns a with visibility sign byte
1232+ D767 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1233+ D769 32 F8 93             ld          (varT),a                            ; and store in varT as its needed later
1234+ D76C C9                   ret
1235+ D76D
1236+ D76D              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1237+ D76D              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1238+ D76D              ;..............................................................................................................................
1239+ D76D              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1240+ D76D              LL48GetScale:
1241+ D76D 3A 0E 93             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1242+ D770 5F                   ld          e,a
1243+ D771 CD 3D D7             call        CopyNodeToXX15
1244+ D774              LL48GetVertices:
1245+ D774              LL48GetVertSignAndVisDist:
1246+ D774                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1246+ D774 BB          >                        cp      e
1246+ D775 DA B6 D7    >                        jp		c,NodeIsNotVisible
1247+ D778              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1248+ D778                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1248+ D778 23          >                    inc         hl                                  ; vertex byte#1
1248+ D779 7E          >                    ld          a,(hl)                              ;
1248+ D77A 32 7D 93    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1249+ D77D 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1250+ D77E E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1251+ D780 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1252+ D781                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1252+ D781 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
1252+ D784 ED 31       >                    add         hl,a
1252+ D786 7E          >                    ld          a,(hl)
1253+ D787 E1                   pop         hl                                  ;                                                                           ;;;
1254+ D788                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1254+ D788 FE 00       >				cp	0
1254+ D78A C2 BC D7    >				jp	nz,NodeIsVisible
1255+ D78D              CheckFace2:                                                                                                                         ;;;
1256+ D78D 7A                   ld          a,d                                                                                                             ;;;
1257+ D78E ED 23                swapnib                                                                                                                     ;;;
1258+ D790 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1259+ D792                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1259+ D792 FE 00       >				cp	0
1259+ D794 C2 BC D7    >				jp	nz,NodeIsVisible
1260+ D797              CheckFace3:                                                                                                                         ;;;
1261+ D797                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1261+ D797 23          >                    inc         hl                                  ; vertex byte#1
1261+ D798 7E          >                    ld          a,(hl)                              ;
1261+ D799 32 7D 93    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1262+ D79C 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1263+ D79D E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1264+ D79F E5                   push        hl                                  ; we need to save HL                                                        ;;;
1265+ D7A0                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1265+ D7A0 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
1265+ D7A3 ED 31       >                    add         hl,a
1265+ D7A5 7E          >                    ld          a,(hl)
1266+ D7A6 E1                   pop         hl                                  ;                                                                           ;;;
1267+ D7A7                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1267+ D7A7 FE 00       >				cp	0
1267+ D7A9 C2 BC D7    >				jp	nz,NodeIsVisible
1268+ D7AC              CheckFace4:                                                                                                                         ;;;
1269+ D7AC 7A                   ld          a,d                                                                                                             ;;;
1270+ D7AD ED 23                swapnib                                                                                                                     ;;;
1271+ D7AF E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1272+ D7B1                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1272+ D7B1 FE 00       >				cp	0
1272+ D7B3 C2 BC D7    >				jp	nz,NodeIsVisible
1273+ D7B6              NodeIsNotVisible:                                                                                                                   ;;;
1274+ D7B6 01 04 00             ld          bc,4
1275+ D7B9 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1276+ D7BB                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1277+ D7BB C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1278+ D7BC              NodeIsVisible:
1279+ D7BC              LL49:
1280+ D7BC CD 5F D6             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1281+ D7BF C9                   ret
1282+ D7C0
1283+ D7C0
1284+ D7C0              ProjectNodeToEye:
1285+ D7C0 ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1286+ D7C4 79           	ld			a,c                                 ;  so no need for a negative check
1287+ D7C5 32 D8 93     	ld			(varQ),a		                    ; VarQ = z
1288+ D7C8 3A 74 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1289+ D7CB CD 6E A2     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1290+ D7CE 3A 75 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1291+ D7D1                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1291+ D7D1 CB 7F       >                        bit 	7,a
1291+ D7D3 C2 DE D7    >                        jp      nz,EyeNegativeXPoint
1292+ D7D6              EyePositiveXPoint:									; x was positive result
1293+ D7D6 2E 80            ld          l,ScreenCenterX						;
1294+ D7D8 26 00            ld          h,0
1295+ D7DA 09               add         hl,bc								; hl = Screen Centre + X
1296+ D7DB C3 E5 D7         jp          EyeStoreXPoint
1297+ D7DE              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1298+ D7DE 2E 80            ld          l,ScreenCenterX
1299+ D7E0 26 00            ld          h,0
1300+ D7E2                  ClearCarryFlag
1300+ D7E2 B7          >				or a
1301+ D7E3 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1302+ D7E5              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1303+ D7E5 EB               ex          de,hl
1304+ D7E6 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1305+ D7E9 FD 72 01         ld          (iy+1),d                            ; Update X Point
1306+ D7EC              EyeProcessYPoint:
1307+ D7EC ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1308+ D7F0 79           	ld			a,c
1309+ D7F1 32 D8 93     	ld			(varQ),a
1310+ D7F4 3A 76 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1311+ D7F7 CD 6E A2     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1312+ D7FA 3A 77 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1313+ D7FD                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1313+ D7FD CB 7F       >                        bit 	7,a
1313+ D7FF C2 0A D8    >                        jp      nz,EyeNegativeYPoint
1314+ D802              EyePositiveYPoint:									; Y is positive so above the centre line
1315+ D802 2E 60            ld          l,ScreenCenterY
1316+ D804                  ClearCarryFlag
1316+ D804 B7          >				or a
1317+ D805 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1318+ D807 C3 0F D8         jp          EyeStoreYPoint
1319+ D80A              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1320+ D80A 2E 60            ld          l,ScreenCenterY
1321+ D80C 26 00            ld          h,0
1322+ D80E 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1323+ D80F              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1324+ D80F EB               ex          de,hl
1325+ D810 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1326+ D813 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1327+ D816 C9               ret
1328+ D817
1329+ D817
1330+ D817
1331+ D817              ; Pitch and roll are 2 phases
1332+ D817              ; 1 - we apply our pitch and roll to the ship position
1333+ D817              ;       x -> x + alpha * (y - alpha * x)
1334+ D817              ;       y -> y - alpha * x - beta * z
1335+ D817              ;       z -> z + beta * (y - alpha * x - beta * z)
1336+ D817              ; which can be simplified as:
1337+ D817              ;       1. K2 = y - alpha * x
1338+ D817              ;       2. z = z + beta * K2
1339+ D817              ;       3. y = K2 - beta * z
1340+ D817              ;       4. x = x + alpha * y
1341+ D817              ; 2 - we apply our patch and roll to the ship orientation
1342+ D817              ;      Roll calculations:
1343+ D817              ;
1344+ D817              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1345+ D817              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1346+ D817              ;      Pitch calculations:
1347+ D817              ;
1348+ D817              ;        nosev_y = nosev_y - beta * nosev_z_hi
1349+ D817              ;        nosev_z = nosev_z + beta * nosev_y_hi
1350+ D817
1351+ D817
1352+ D817              ApplyMyRollToVector:    MACRO vectorX, vectorY
1353+ D817 ~                                    ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1354+ D817 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
1355+ D817 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
1356+ D817 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
1357+ D817 ~                                    xor $80                             ;
1358+ D817 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1359+ D817 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1360+ D817 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
1361+ D817 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
1362+ D817 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1363+ D817 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1364+ D817                                      ENDM
1365+ D817
1366+ D817              ApplyMyRollToNosevY:    ApplyMyRollToVector UBnkrotmatNosevX, UBnkrotmatNosevY
1366+ D817             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1366+ D817 3A 96 93    >               ld       a,(ALPHA)
1366+ D81A 32 D8 93    >               ld       (varQ),a
1366+ D81D             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
1366+ D81D 2A 22 C0    >               ld       hl,(UBnkrotmatNosevY)
1366+ D820 22 D9 93    >               ld       (varR),hl
1366+ D823             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
1366+ D823 3A 20 C0    >               ld       a,(UBnkrotmatNosevX)
1366+ D826 32 7D 93    >               ld       (varP),a
1366+ D829 3A 21 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
1366+ D82C EE 80       >                        xor $80                             ;
1366+ D82E CD A9 A0    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1366+ D831 ED 53 22 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1366+ D835             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
1366+ D835 2A 20 C0    >               ld       hl,(UBnkrotmatNosevX)
1366+ D838 22 D9 93    >               ld       (varR),hl
1366+ D83B 3A 23 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
1366+ D83E CD A9 A0    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1366+ D841 ED 53 20 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1367+ D845 C9                                   ret
1368+ D846
1369+ D846              ApplyMyRollToSidevY:    ApplyMyRollToVector UBnkrotmatSidevX, UBnkrotmatSidevY
1369+ D846             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1369+ D846 3A 96 93    >               ld       a,(ALPHA)
1369+ D849 32 D8 93    >               ld       (varQ),a
1369+ D84C             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
1369+ D84C 2A 16 C0    >               ld       hl,(UBnkrotmatSidevY)
1369+ D84F 22 D9 93    >               ld       (varR),hl
1369+ D852             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
1369+ D852 3A 14 C0    >               ld       a,(UBnkrotmatSidevX)
1369+ D855 32 7D 93    >               ld       (varP),a
1369+ D858 3A 15 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
1369+ D85B EE 80       >                        xor $80                             ;
1369+ D85D CD A9 A0    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1369+ D860 ED 53 16 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1369+ D864             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
1369+ D864 2A 14 C0    >               ld       hl,(UBnkrotmatSidevX)
1369+ D867 22 D9 93    >               ld       (varR),hl
1369+ D86A 3A 17 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
1369+ D86D CD A9 A0    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1369+ D870 ED 53 14 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1370+ D874 C9                                   ret
1371+ D875
1372+ D875              ApplyMyRollToRoofvY:    ApplyMyRollToVector UBnkrotmatRoofvX, UBnkrotmatRoofvY
1372+ D875             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1372+ D875 3A 96 93    >               ld       a,(ALPHA)
1372+ D878 32 D8 93    >               ld       (varQ),a
1372+ D87B             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
1372+ D87B 2A 1C C0    >               ld       hl,(UBnkrotmatRoofvY)
1372+ D87E 22 D9 93    >               ld       (varR),hl
1372+ D881             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
1372+ D881 3A 1A C0    >               ld       a,(UBnkrotmatRoofvX)
1372+ D884 32 7D 93    >               ld       (varP),a
1372+ D887 3A 1B C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
1372+ D88A EE 80       >                        xor $80                             ;
1372+ D88C CD A9 A0    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1372+ D88F ED 53 1C C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1372+ D893             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
1372+ D893 2A 1A C0    >               ld       hl,(UBnkrotmatRoofvX)
1372+ D896 22 D9 93    >               ld       (varR),hl
1372+ D899 3A 1D C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
1372+ D89C CD A9 A0    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1372+ D89F ED 53 1A C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1373+ D8A3 C9                                   ret
1374+ D8A4
1375+ D8A4
1376+ D8A4              ; 1> (-a)-(-b)=  if ABS(a)> ABS(B), 1A> (ABS(a)-abs(b))*-1 Else 1B> (ABS(b)-abs(a))
1377+ D8A4              ; 2> (+a)-(+b)=  if ABS(a) > ABS(B),2A>  ABS(a)- abs (B)   else 2B> (ABS(B) - abs(A) * -1
1378+ D8A4              ; 3> (-a)-(+b)=  3A> (ABS(a) + ABS(b)) * -1
1379+ D8A4              ; 4> (+a)-(-b)=  4A> ABS(a) + ABS(b)
1380+ D8A4 47           AHLequUbnkYminusAHL:    ld      b,a                 ; b =sign of subtraction
1381+ D8A5 EB                                   ex      de,hl               ; de = amount to subtract
1382+ D8A6 2A 0E C0                             ld      hl,(UBnKylo)        ; hl = unsigned Y position
1383+ D8A9 3A 10 C0                             ld      a,(UBnKysgn)        ; ahl = signed Y corrodinate
1384+ D8AC 4F                                   ld      c,a                 ; we may need the sign later
1385+ D8AD A8                                   xor     b                   ; now we need to see if signs were different or same
1386+ D8AE                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1386+ D8AE FA CF D8    >                        jp		m, .SignsDifferent
1387+ D8B1 CD 26 A4     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1388+ D8B4 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1389+ D8B6 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1390+ D8B9 7C                                   ld      a,h
1391+ D8BA B5                                   or      l
1392+ D8BB 28 02                                jr      z,.HLGTDEZero
1393+ D8BD 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1394+ D8BE C9                                   ret
1395+ D8BF AF           .HLGTDEZero:            xor     a
1396+ D8C0 C9                                   ret                         ; if the result was zero set sign to zero too
1397+ D8C1 EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1398+ D8C2 B7 ED 52                             sub     hl,de               ;
1399+ D8C5 7C                                   ld      a,h
1400+ D8C6 B5                                   or      l
1401+ D8C7 28 04                                jr      z,.HLLTDEZero
1402+ D8C9 79                                   ld      a,c
1403+ D8CA EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1404+ D8CC C9                                   ret
1405+ D8CD AF           .HLLTDEZero:            xor     a
1406+ D8CE C9                                   ret
1407+ D8CF 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1408+ D8D0 7C                                   ld      a,h
1409+ D8D1 B5                                   or      l
1410+ D8D2 28 F9                                jr      z,.HLLTDEZero
1411+ D8D4 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1412+ D8D5 C9                                   ret
1413+ D8D6
1414+ D8D6              ;----------------------------------------------------------------------------------------------------------
1415+ D8D6 47           AHLequKminusAHL:        ld      b,a                 ; b =sign of subtraction
1416+ D8D7 EB                                   ex      de,hl               ; de = amount to subtract
1417+ D8D8 2A F0 93                             ld      hl,(varKp1)         ; Ahl = K
1418+ D8DB 3A F2 93                             ld      a,(varKp3)          ;
1419+ D8DE 4F                                   ld      c,a                 ; we may need the sign later
1420+ D8DF A8                                   xor     b                   ; now we need to see if signs were different or same
1421+ D8E0                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1421+ D8E0 FA 01 D9    >                        jp		m, .SignsDifferent
1422+ D8E3 CD 26 A4     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1423+ D8E6 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1424+ D8E8 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1425+ D8EB 7C                                   ld      a,h
1426+ D8EC B5                                   or      l
1427+ D8ED 28 02                                jr      z,.HLGTDEZero
1428+ D8EF 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1429+ D8F0 C9                                   ret
1430+ D8F1 AF           .HLGTDEZero:            xor     a
1431+ D8F2 C9                                   ret                         ; if the result was zero set sign to zero too
1432+ D8F3 EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1433+ D8F4 B7 ED 52                             sub     hl,de               ;
1434+ D8F7 7C                                   ld      a,h
1435+ D8F8 B5                                   or      l
1436+ D8F9 28 04                                jr      z,.HLLTDEZero
1437+ D8FB 79                                   ld      a,c
1438+ D8FC EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1439+ D8FE C9                                   ret
1440+ D8FF AF           .HLLTDEZero:            xor     a
1441+ D900 C9                                   ret
1442+ D901 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1443+ D902 7C                                   ld      a,h
1444+ D903 B5                                   or      l
1445+ D904 28 F9                                jr      z,.HLLTDEZero
1446+ D906 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1447+ D907 C9                                   ret
1448+ D908              ;-------------------------------------------------------------------------------------------------------------
1449+ D908
1450+ D908 47           AHLequUbnkZplusAHL:     ld      b,a                 ; b =sign of subtraction
1451+ D909 EB                                   ex      de,hl               ; de = amount to subtract
1452+ D90A 2A 11 C0                             ld      hl,(UBnKzlo)        ; hl = unsigned Y position
1453+ D90D 3A 13 C0                             ld      a,(UBnKzsgn)        ; ahl = signed Y corrodinate
1454+ D910 4F                                   ld      c,a                 ; we may need the sign later
1455+ D911 A8                                   xor     b                   ; now we need to see if signs were different or same
1456+ D912                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1456+ D912 FA 20 D9    >                        jp		m, .SignsDifferent
1457+ D915 19           .SignsTheSame:          add     hl,de
1458+ D916 7C                                   ld      a,h
1459+ D917 B5                                   or      l
1460+ D918 28 02                                jr      z,.HLGTDEZero
1461+ D91A 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1462+ D91B C9                                   ret
1463+ D91C AF           .HLGTDEZero:            xor     a
1464+ D91D C9                                   ret                         ; if the result was zero set sign to zero too
1465+ D91E AF           .HLLTDEZero:            xor     a
1466+ D91F C9                                   ret
1467+ D920 CD 26 A4     .SignsDifferent:        call    compare16HLDE       ; if signs were the saem tehn
1468+ D923 38 09                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1469+ D925 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1470+ D928 7C                                   ld      a,h
1471+ D929 B5                                   or      l
1472+ D92A 28 F0                                jr      z,.HLGTDEZero
1473+ D92C 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1474+ D92D C9                                   ret
1475+ D92E EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1476+ D92F B7 ED 52                             sub     hl,de               ;
1477+ D932 7C                                   ld      a,h
1478+ D933 B5                                   or      l
1479+ D934 28 E8                                jr      z,.HLLTDEZero
1480+ D936 79                                   ld      a,c
1481+ D937 EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1482+ D939 C9                                   ret
1483+ D93A
1484+ D93A
1485+ D93A
1486+ D93A              ; Full version
1487+ D93A              ; 1. K2 = y - alpha * x
1488+ D93A              ; 2. z = z + beta * K2
1489+ D93A              ; 3. y = K2 - beta * z
1490+ D93A              ; 4. x = x + alpha * y
1491+ D93A
1492+ D93A
1493+ D93A                                      MACRO   APPequPosPlusAPP Position, PositionSign
1494+ D93A ~                                    push    bc
1495+ D93A ~                                    ld      c,a                         ; save original value of a into c
1496+ D93A ~                                    ld      a,(PositionSign)
1497+ D93A ~                                    ld      b,a
1498+ D93A ~                                    ld      a,c
1499+ D93A ~                                    xor     b                           ; a = a xor x postition sign
1500+ D93A ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1501+ D93A ~            ; Signs are the same to we just add and take which ever sign
1502+ D93A ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1503+ D93A ~                                    ld      hl,(Position)
1504+ D93A ~                                    add     hl,de
1505+ D93A ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1506+ D93A ~                                    ld      a,c                         ; and a = original sign as they were both the same
1507+ D93A ~                                    pop     bc
1508+ D93A ~                                    ret
1509+ D93A ~            ; Signs are opposite so we subtract
1510+ D93A ~            .MV50:                  ld      de,(varPp1)
1511+ D93A ~                                    ld      hl,(Position)
1512+ D93A ~                                    or      a
1513+ D93A ~                                    sbc     hl,de
1514+ D93A ~                                    jr      c,.MV51                     ; if the result was negative then negate result
1515+ D93A ~                                    ld      a,c                         ; get back the original sign
1516+ D93A ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
1517+ D93A ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1518+ D93A ~                                    pop     bc
1519+ D93A ~                                    ret
1520+ D93A ~            .MV51:                  NegHL
1521+ D93A ~                                    ld      (varPp1),hl
1522+ D93A ~                                    ld      a,c                         ; the original sign will still be good
1523+ D93A ~                                    pop     bc
1524+ D93A ~                                    ret
1525+ D93A                                      ENDM
1526+ D93A
1527+ D93A
1528+ D93A              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
1528+ D93A C5          >                        push    bc
1528+ D93B 4F          >                        ld      c,a                         ; save original value of a into c
1528+ D93C 3A 0D C0    >                        ld      a,(UBnKxsgn)
1528+ D93F 47          >                        ld      b,a
1528+ D940 79          >                        ld      a,c
1528+ D941 A8          >                        xor     b                           ; a = a xor x postition sign
1528+ D942 FA 53 D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1528+ D945             >; Signs are the same to we just add and take which ever sign
1528+ D945 ED 5B 7E 93 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1528+ D949 2A 0B C0    >                        ld      hl,(UBnKxlo)
1528+ D94C 19          >                        add     hl,de
1528+ D94D 22 7E 93    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1528+ D950 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1528+ D951 C1          >                        pop     bc
1528+ D952 C9          >                        ret
1528+ D953             >; Signs are opposite so we subtract
1528+ D953 ED 5B 7E 93 >.MV50:                  ld      de,(varPp1)
1528+ D957 2A 0B C0    >                        ld      hl,(UBnKxlo)
1528+ D95A B7          >                        or      a
1528+ D95B ED 52       >                        sbc     hl,de
1528+ D95D 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1528+ D95F 79          >                        ld      a,c                         ; get back the original sign
1528+ D960 22 7E 93    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1528+ D963 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1528+ D965 C1          >                        pop     bc
1528+ D966 C9          >                        ret
1528+ D967             >.MV51:                  NegHL
1528+ D967 AF          >                xor a
1528+ D968 95          >                sub l
1528+ D969 6F          >                ld l,a
1528+ D96A 9F          >                sbc a,a
1528+ D96B 94          >                sub h
1528+ D96C 67          >                ld h,a
1528+ D96D 22 7E 93    >                        ld      (varPp1),hl
1528+ D970 79          >                        ld      a,c                         ; the original sign will still be good
1528+ D971 C1          >                        pop     bc
1528+ D972 C9          >                        ret
1529+ D973
1530+ D973              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
1530+ D973 C5          >                        push    bc
1530+ D974 4F          >                        ld      c,a                         ; save original value of a into c
1530+ D975 3A 10 C0    >                        ld      a,(UBnKysgn)
1530+ D978 47          >                        ld      b,a
1530+ D979 79          >                        ld      a,c
1530+ D97A A8          >                        xor     b                           ; a = a xor x postition sign
1530+ D97B FA 8C D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1530+ D97E             >; Signs are the same to we just add and take which ever sign
1530+ D97E ED 5B 7E 93 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1530+ D982 2A 0E C0    >                        ld      hl,(UBnKylo)
1530+ D985 19          >                        add     hl,de
1530+ D986 22 7E 93    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1530+ D989 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1530+ D98A C1          >                        pop     bc
1530+ D98B C9          >                        ret
1530+ D98C             >; Signs are opposite so we subtract
1530+ D98C ED 5B 7E 93 >.MV50:                  ld      de,(varPp1)
1530+ D990 2A 0E C0    >                        ld      hl,(UBnKylo)
1530+ D993 B7          >                        or      a
1530+ D994 ED 52       >                        sbc     hl,de
1530+ D996 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1530+ D998 79          >                        ld      a,c                         ; get back the original sign
1530+ D999 22 7E 93    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1530+ D99C EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1530+ D99E C1          >                        pop     bc
1530+ D99F C9          >                        ret
1530+ D9A0             >.MV51:                  NegHL
1530+ D9A0 AF          >                xor a
1530+ D9A1 95          >                sub l
1530+ D9A2 6F          >                ld l,a
1530+ D9A3 9F          >                sbc a,a
1530+ D9A4 94          >                sub h
1530+ D9A5 67          >                ld h,a
1530+ D9A6 22 7E 93    >                        ld      (varPp1),hl
1530+ D9A9 79          >                        ld      a,c                         ; the original sign will still be good
1530+ D9AA C1          >                        pop     bc
1530+ D9AB C9          >                        ret
1531+ D9AC
1532+ D9AC              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
1532+ D9AC C5          >                        push    bc
1532+ D9AD 4F          >                        ld      c,a                         ; save original value of a into c
1532+ D9AE 3A 13 C0    >                        ld      a,(UBnKzsgn)
1532+ D9B1 47          >                        ld      b,a
1532+ D9B2 79          >                        ld      a,c
1532+ D9B3 A8          >                        xor     b                           ; a = a xor x postition sign
1532+ D9B4 FA C5 D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1532+ D9B7             >; Signs are the same to we just add and take which ever sign
1532+ D9B7 ED 5B 7E 93 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1532+ D9BB 2A 11 C0    >                        ld      hl,(UBnKzlo)
1532+ D9BE 19          >                        add     hl,de
1532+ D9BF 22 7E 93    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1532+ D9C2 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1532+ D9C3 C1          >                        pop     bc
1532+ D9C4 C9          >                        ret
1532+ D9C5             >; Signs are opposite so we subtract
1532+ D9C5 ED 5B 7E 93 >.MV50:                  ld      de,(varPp1)
1532+ D9C9 2A 11 C0    >                        ld      hl,(UBnKzlo)
1532+ D9CC B7          >                        or      a
1532+ D9CD ED 52       >                        sbc     hl,de
1532+ D9CF 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1532+ D9D1 79          >                        ld      a,c                         ; get back the original sign
1532+ D9D2 22 7E 93    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1532+ D9D5 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1532+ D9D7 C1          >                        pop     bc
1532+ D9D8 C9          >                        ret
1532+ D9D9             >.MV51:                  NegHL
1532+ D9D9 AF          >                xor a
1532+ D9DA 95          >                sub l
1532+ D9DB 6F          >                ld l,a
1532+ D9DC 9F          >                sbc a,a
1532+ D9DD 94          >                sub h
1532+ D9DE 67          >                ld h,a
1532+ D9DF 22 7E 93    >                        ld      (varPp1),hl
1532+ D9E2 79          >                        ld      a,c                         ; the original sign will still be good
1532+ D9E3 C1          >                        pop     bc
1532+ D9E4 C9          >                        ret
1533+ D9E5
1534+ D9E5              ; rollWork holds Alpha intermidate results
1535+ D9E5 00 00 00     rollWork      DS 3
1536+ D9E8              rollWorkp1    equ rollWork
1537+ D9E8              rollWorkp2    equ rollWork+1
1538+ D9E8              rollWorkp3    equ rollWork+2
1539+ D9E8
1540+ D9E8
1541+ D9E8              ;----------------------------------------------------------------------------------------------------------------------------------
1542+ D9E8              ; based on MVEIT part 4 of 9
1543+ D9E8 3A 97 93     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
1544+ D9EB 21 8A 93                             ld      hl,BET1                     ; and pitch
1545+ D9EE B6                                   or      (hl)
1546+ D9EF CA A0 DA                             jp      z,.NoRotation               ; if both zero then don't compute
1547+ D9F2                                      ;break
1548+ D9F2              ; P[210] = x * alph (we use P[2]P[1] later as result/256
1549+ D9F2 5F                                   ld      e,a                         ; e = roll magnitude
1550+ D9F3 2A 0B C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
1551+ D9F6 CD 05 A1                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
1552+ D9F9 32 7F 93                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
1553+ D9FC 22 7D 93                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
1554+ D9FF              ; A = Flip sign
1555+ D9FF 3A 99 93                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
1556+ DA02 21 0D C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
1557+ DA05 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
1558+ DA06              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
1559+ DA06 CD 73 D9                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
1560+ DA09              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
1561+ DA09 32 E7 D9                             ld      (rollWorkp3),a               ; k2+3 = sign of result
1562+ DA0C 22 E5 D9                             ld      (rollWorkp1),hl             ; k2+1,2 = result
1563+ DA0F              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
1564+ DA0F 3A 8A 93                             ld      a,(BET1)                    ; a = magnitude of pitch
1565+ DA12 5F                                   ld      e,a
1566+ DA13 CD 05 A1                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
1567+ DA16 32 7F 93                             ld      (varPp2),a                   ; save highest byte in P2
1568+ DA19 22 7D 93                             ld      (varP),hl
1569+ DA1C              ; Fetch sign of previosu cal and xor with BETA inverted
1570+ DA1C 3A E7 D9                             ld      a,(rollWorkp3)
1571+ DA1F 5F                                   ld      e,a
1572+ DA20 3A 8B 93                             ld      a,(BET2)
1573+ DA23 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
1574+ DA24              ; Z = P[210] =Z + APP
1575+ DA24 CD AC D9                             call    APPequZPosPlusAPP           ; MVT6
1576+ DA27 32 13 C0                             ld      (UBnKzsgn),a                ; save result back into z
1577+ DA2A 22 11 C0                             ld      (UBnKzlo),hl
1578+ DA2D              ; A[P1]P[0] = z * Beta
1579+ DA2D 3A 8A 93                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
1580+ DA30 5F                                   ld      e,a
1581+ DA31 CD 05 A1                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
1582+ DA34 32 7F 93                             ld      (varPp2),a                  ; P2 = high byte of result
1583+ DA37 22 7D 93                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
1584+ DA3A              ; A xor BET2,Zsign
1585+ DA3A 3A E7 D9                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
1586+ DA3D 32 10 C0                             ld      (UBnKysgn),a                ; save result back into y
1587+ DA40 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
1588+ DA41 3A 8B 93                             ld      a,(BET2)                    ;
1589+ DA44 AB                                   xor     e                           ;
1590+ DA45 5F                                   ld      e,a                         ; now xor it with z sign too
1591+ DA46 3A 13 C0                             ld      a,(UBnKzsgn)                ;
1592+ DA49 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
1593+ DA4A F2 59 DA                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
1594+ DA4D 2A 7E 93                             ld      hl,(varPp1)
1595+ DA50 ED 5B E5 D9                          ld      de,(rollWorkp1)
1596+ DA54 B7                                   or      a
1597+ DA55 19                                   add     hl,de
1598+ DA56 C3 73 DA                             jp      .MV44
1599+ DA59 2A E5 D9     .MV43:                  ld      hl,(rollWorkp1)
1600+ DA5C ED 5B 7E 93                          ld      de,(varPp1)
1601+ DA60 B7                                   or      a
1602+ DA61 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
1603+ DA63 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
1604+ DA65                                      NegHL
1604+ DA65 AF          >                xor a
1604+ DA66 95          >                sub l
1604+ DA67 6F          >                ld l,a
1604+ DA68 9F          >                sbc a,a
1604+ DA69 94          >                sub h
1604+ DA6A 67          >                ld h,a
1605+ DA6B 3A 10 C0                             ld      a,(UBnKysgn)                ; flip sign bit
1606+ DA6E EE 80                                xor     SignOnly8Bit
1607+ DA70 32 10 C0                             ld      (UBnKysgn),a
1608+ DA73              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
1609+ DA73 22 0E C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
1610+ DA76 3A 97 93                             ld      a,(ALP1)                    ; get roll magnitude
1611+ DA79 5F                                   ld      e,a
1612+ DA7A 2A 0E C0                             ld      hl,(UBnKylo)
1613+ DA7D CD 05 A1                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
1614+ DA80 32 7F 93                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
1615+ DA83 22 7D 93                             ld      (varP),hl
1616+ DA86 3A 98 93                             ld      a,(ALP2)
1617+ DA89 5F                                   ld      e,a
1618+ DA8A 3A 10 C0                             ld      a,(UBnKysgn)
1619+ DA8D AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
1620+ DA8E CD 3A D9                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
1621+ DA91 32 0D C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
1622+ DA94 22 0B C0                             ld      (UBnKxlo),hl
1623+ DA97                                      ;break
1624+ DA97                                      ; if its not a sun then apply to local orientation
1625+ DA97
1626+ DA97 CD 17 D8                             call    ApplyMyRollToNosevY
1627+ DA9A CD 46 D8                             call    ApplyMyRollToSidevY
1628+ DA9D CD 75 D8                             call    ApplyMyRollToRoofvY
1629+ DAA0 3A D4 93     .NoRotation:            ld      a,(DELTA)                   ; get speed
1630+ DAA3 16 00                                ld      d,0
1631+ DAA5 5F                                   ld      e,a                         ; de = speed in low byte
1632+ DAA6 2A 11 C0                             ld      hl,(UBnKzlo)                ; hl = z position
1633+ DAA9 3A 13 C0                             ld      a,(UBnKzsgn)                ; b = z sign
1634+ DAAC 47                                   ld      b,a                         ;
1635+ DAAD 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
1636+ DAAF CD 3C CB                             call    ADDHLDESignBC               ; update speed
1637+ DAB2 22 11 C0                             ld      (UBnKzlo),hl                ; write back to zpos
1638+ DAB5 32 13 C0                             ld      (UBnKzsgn),a                ;
1639+ DAB8 C9                                   ret
1640+ DAB9              ; .....................................................
1641+ DAB9              ; Process Nodes does the following:
1642+ DAB9              ; for each node:
1643+ DAB9              ;     see if node >
1644+ DAB9 00           PNXX20DIV6          DB      0
1645+ DABA 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1646+ DABC 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1647+ DABE 00           PNLASTNORM          DB      0
1648+ DABF              ProcessNodes:
1649+ DABF AF               xor     a
1650+ DAC0 32 F0 C2         ld      (UbnkLineArrayLen),a
1651+ DAC3 CD 74 CF         call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1652+ DAC6 CD 29 86         call    ScaleXX16Matrix197               ;#02; Normalise XX16
1653+ DAC9 CD 56 D1         call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1654+ DACC CD 23 D0         call    InverseXX16                      ;#11; Invert rotation matrix
1655+ DACF 21 15 C3         ld      hl,UBnkHullVerticies
1656+ DAD2 3A 05 C3         ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1657+ DAD5              GetActualVertexCount:
1658+ DAD5 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1659+ DAD6 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1660+ DAD7 16 06            ld      d,6
1661+ DAD9 CD 9E A2         call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1662+ DADC 41               ld      b,c                              ; c = number of vertices
1663+ DADD FD 21 BE C0      ld      iy,UBnkNodeArray
1664+ DAE1              LL48:
1665+ DAE1              PointLoop:
1666+ DAE1 C5           	push	bc                                  ; save counters
1667+ DAE2 E5           	push	hl                                  ; save verticies list pointer
1668+ DAE3 FD E5        	push	iy                                  ; save Screen plot array pointer
1669+ DAE5 78               ld      a,b
1670+ DAE6                  ;break
1671+ DAE6 CD 3D D7         call    CopyNodeToXX15                      ; copy verices at hl to xx15
1672+ DAE9 3A 75 C0     	ld		a,(UBnkXScaledSign)
1673+ DAEC CD CE 88     	call    XX12EquNodeDotOrientation
1674+ DAEF CD 30 89     	call    TransposeXX12ByShipToXX15
1675+ DAF2 CD A9 86     	call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1676+ DAF5 FD E1        	pop		iy                                  ; get back screen plot array pointer
1677+ DAF7 CD C0 D7     	call    ProjectNodeToEye                     ; set up screen plot list entry
1678+ DAFA                 ; ld      hl,UbnkLineArrayLen
1679+ DAFA                ;  inc     (hl)                                ; another node done
1680+ DAFA              ReadyForNextPoint:
1681+ DAFA FD E5        	push	iy                                  ; copy screen plot pointer to hl
1682+ DAFC E1           	pop		hl
1683+ DAFD 3E 04        	ld		a,4
1684+ DAFF ED 31        	add		hl,a
1685+ DB01 E5           	push	hl                                  ; write it back at iy + 4
1686+ DB02 FD E1        	pop		iy								    ; and put it in iy again
1687+ DB04 E1           	pop		hl                                  ; get hl back as vertex list
1688+ DB05 3E 06        	ld		a,6
1689+ DB07 ED 31        	add 	hl,a                                ; and move to next vertex
1690+ DB09 C1           	pop		bc                                  ; get counter back
1691+ DB0A 10 D5        	djnz	PointLoop
1692+ DB0C              ; ......................................................
1693+ DB0C C9               ret
1694+ DB0D              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1695+ DB0D              ;  Entering Here we have the following:
1696+ DB0D              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1697+ DB0D              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1698+ DB0D              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1699+ DB0D              ;
1700+ DB0D              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1701+ DB0D              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1702+ DB0D              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1703+ DB0D              ;--------------------------------------------------------------------------------------------------------
1704+ DB0D              AddLaserBeamLine:
1705+ DB0D              ; this code is a bag of shit and needs re-writing
1706+ DB0D              GetGunVertexNode:
1707+ DB0D 3A 03 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1708+ DB10 21 BE C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1709+ DB13 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1710+ DB15 FD 2E 00             ld          iyl,0
1711+ DB18              MoveX1PointToXX15:
1712+ DB18 4E                   ld          c,(hl)                              ;
1713+ DB19 23                   inc         hl
1714+ DB1A 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1715+ DB1B 23                   inc         hl
1716+ DB1C ED 43 74 C0          ld          (UBnkX1),bc
1717+ DB20 0C                   inc         c
1718+ DB21 C8                   ret         z                                   ; was c 255?
1719+ DB22 04                   inc         b
1720+ DB23 C8                   ret         z                                   ; was c 255?
1721+ DB24              MoveY1PointToXX15:
1722+ DB24 4E                   ld          c,(hl)                              ;
1723+ DB25 23                   inc         hl
1724+ DB26 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1725+ DB27 23                   inc         hl
1726+ DB28 ED 43 76 C0          ld          (UBnkY1),bc
1727+ DB2C              SetX2PointToXX15:
1728+ DB2C 01 00 00             ld          bc,0                                ; set X2 to 0
1729+ DB2F ED 43 78 C0          ld          (UBnkX2),bc
1730+ DB33 3A 11 C0             ld          a,(UBnKzlo)
1731+ DB36 4F                   ld          c,a
1732+ DB37              SetY2PointToXX15:
1733+ DB37 ED 43 7A C0          ld          (UBnkY2),bc                         ; set Y2to 0
1734+ DB3B 3A 0D C0             ld          a,(UBnKxsgn)
1735+ DB3E                      JumpOnBitClear a,7,LL74SkipDec
1735+ DB3E CB 7F       >                        bit 	7,a
1735+ DB40 CA 48 DB    >                        jp      z,LL74SkipDec
1736+ DB43              LL74DecX2:
1737+ DB43 3E FF                ld          a,$FF
1738+ DB45 32 78 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1739+ DB48              LL74SkipDec:
1740+ DB48 CD 1E CD             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1741+ DB4B 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1742+ DB4D              ; Here we are usign hl to replace VarU as index
1743+ DB4D 2A DB 93             ld          hl,(varU16)
1744+ DB50 3A 74 C0             ld          a,(UBnKx1Lo)
1745+ DB53 77                   ld          (hl),a
1746+ DB54 23                   inc         hl
1747+ DB55 3A 76 C0             ld          a,(UbnKy1Lo)
1748+ DB58 77                   ld          (hl),a
1749+ DB59 23                   inc         hl
1750+ DB5A 3A 78 C0             ld          a,(UBnkX2Lo)
1751+ DB5D 77                   ld          (hl),a
1752+ DB5E 23                   inc         hl
1753+ DB5F 3A 7A C0             ld          a,(UbnKy2Lo)
1754+ DB62 77                   ld          (hl),a
1755+ DB63 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1756+ DB65 23                   inc         hl
1757+ DB66 FD 2C                inc         iyl                                 ; ready for next byte
1758+ DB68 22 DB 93             ld          (varU16),hl
1759+ DB6B C9                   ret
1760+ DB6C
1761+ DB6C                  INCLUDE "PrepLines.asm"
# file opened: ./Universe/PrepLines.asm
   1++DB6C              ;--------------------------------------------------------------------------------------------------------
   2++DB6C                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DB6C              ;--------------------------------------------------------------------------------------------------------
   2++DB6C              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DB6C 21 BE C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DB6F ED 31                                add         hl,a                                ; hl = address of Node
   5++DB71 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DB72 11 74 C0                             ld          de,UBnkX1
   7++DB75 ED A0                                ldi                                             ; x1 lo
   8++DB77 ED A0                                ldi                                             ; x1 hi
   9++DB79 ED A0                                ldi                                             ; y1 lo
  10++DB7B ED A0                                ldi                                             ; y1 hi
  11++DB7D C9                                   ret
  12++DB7E
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DB7E                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DB7E              ;--------------------------------------------------------------------------------------------------------
   2++DB7E              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DB7E 21 BE C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DB81 ED 31                                add         hl,a                                ; hl = address of Node
   5++DB83 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DB84 11 78 C0                             ld          de,UBnkX2
   7++DB87 ED A0                                ldi                                             ; x1 lo
   8++DB89 ED A0                                ldi                                             ; x1 hi
   9++DB8B ED A0                                ldi                                             ; y1 lo
  10++DB8D ED A0                                ldi                                             ; y1 hi
  11++DB8F C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DB90                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DB90              ;--------------------------------------------------------------------------------------------------------
   2++DB90              GetFaceAtA:         MACRO
   3++DB90 ~                                ld          hl,UbnkFaceVisArray
   4++DB90 ~                                add         hl,a
   5++DB90 ~                                ld          a,(hl)                              ; get face visibility
   6++DB90                                  ENDM
   7++DB90
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DB90              ;--------------------------------------------------------------------------------------------------------
   6++DB90              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DB90               ;   DEFINE NOBACKFACECULL 1
   8++DB90 00           PLEDGECTR           DB          0
   9++DB91
  10++DB91              PrepLines:
  11++DB91              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DB91
  13++DB91              ; TODO add in onced DOEXP is finished
  14++DB91              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DB91              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DB91              ;        or          8
  17++DB91              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DB91              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DB91              ;EE31:                                                   ; no explosion
  20++DB91              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DB91              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DB91              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DB91              ;
  24++DB91              ;--------------------------------------------------------------------------------------------------------
  25++DB91              InitialiseLineRead:
  26++DB91                      ;break
  27++DB91                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DB91 AF          >               xor      a
  27++DB92 32 F0 C2    >               ld       (UbnkLineArrayLen),a
  28++DB95                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DB95 AF          >               xor      a
  28++DB96 32 F1 C2    >               ld       (UbnkLineArrayBytes),a
  29++DB99                      ldWriteZero PLEDGECTR
  29++DB99 AF          >               xor      a
  29++DB9A 32 90 DB    >               ld       (PLEDGECTR),a
  30++DB9D 3A 06 C3             ld          a,(EdgeCountAddr)
  31++DBA0 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DBA2 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DBA5 21 FE C1             ld          hl,UbnkLineArray                    ; head of array
  34++DBA8 22 DB 93             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DBAB                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DBAB 3A 06 C3    >               ld       a,(EdgeCountAddr)
  35++DBAE 32 DF 93    >               ld       (XX17),a
  36++DBB1 3A 2A C0             ld          a,(UBnkexplDsp)                     ; get explosion status
  37++DBB4                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DBB4 CB 77       >                        bit 	6,a
  37++DBB6 CA BE DB    >                        jp      z,CalculateNewLines
  38++DBB9 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DBBB 32 2A C0             ld          (UBnkexplDsp),a                     ; INWK+31
  40++DBBE              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DBBE              ; NOw we can calculate hull after including laser line
  42++DBBE              CalculateNewLines:
  43++DBBE              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DBBE              CheckEdgesForVisibility:
  45++DBBE 21 41 C4             ld          hl,UBnkHullEdges
  46++DBC1                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DBC1 22 82 93             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DBC4 3A 02 C3             ld          a,(LineX4Addr)
  49++DBC7 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DBC8              LL75Loop:                                               ; count Visible edges
  51++DBC8              IsEdgeInVisibilityRange:
  52++DBC8 2A 82 93             ld          hl,(varV)
  53++DBCB E5                   push        hl
  54++DBCC FD E1                pop         iy
  55++DBCE                      IFDEF NOBACKFACECULL
  56++DBCE ~                        jp          VisibileEdge; DEBUGTODO
  57++DBCE                      ENDIF
  58++DBCE 3A 0E 93             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DBD1 57                   ld          d,a                                 ; d holds copy of XX4
  60++DBD2              ; Get Edge Byte 0
  61++DBD2 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DBD5                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DBD5 BA          >                        cp      d
  62++DBD6 DA 2A DC    >                        jp		c,LL78EdgeNotVisible
  63++DBD9              EdgeMayBeVisibile:
  64++DBD9              ; Get Edge Byte 1
  65++DBD9              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DBD9 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DBDC 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DBDD E6 0F                and         $0F                                 ;
  69++DBDF                      GetFaceAtA
  69++DBDF 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
  69++DBE2 ED 31       >                    add         hl,a
  69++DBE4 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DBE5              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DBE5                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
  71++DBE5 FE 00       >				cp	0
  71++DBE7 C2 FC DB    >				jp	nz,VisibileEdge
  72++DBEA              IsFace2Visibile:
  73++DBEA 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DBEB ED 23                swapnib                                         ;
  75++DBED E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DBEF E5                   push        hl
  77++DBF0                      GetFaceAtA
  77++DBF0 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
  77++DBF3 ED 31       >                    add         hl,a
  77++DBF5 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DBF6 E1                   pop         hl
  79++DBF7                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
  79++DBF7 FE 00       >				cp	0
  79++DBF9 CA 2A DC    >				jp	z,LL78EdgeNotVisible
  80++DBFC              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DBFC              ;LL79--Visible edge--------------------------------------
  82++DBFC              ; Get Edge Byte 2
  83++DBFC FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DBFF CD 6C DB             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DC02 FD 7E 03             ld          a,(IY+3)
  86++DC05 CD 7E DB             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DC08 CD 1E CD             call        ClipLine
  88++DC0B 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DC0D              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DC0D ED 5B DB 93          ld          de,(varU16)                         ; clipped edges heap address
  91++DC11 21 74 C0             ld          hl,UBnkNewX1
  92++DC14                      FourLDIInstrunctions
  92++DC14 ED A0       >                        ldi
  92++DC16 ED A0       >                        ldi
  92++DC18 ED A0       >                        ldi
  92++DC1A ED A0       >                        ldi
  93++DC1C ED 53 DB 93          ld          (varU16),de                         ; update U16 with current address
  94++DC20 21 F0 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DC23 34                   inc         (hl)
  96++DC24 7E                   ld          a,(hl)
  97++DC25                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DC25 FE 32       >                        cp     LineArraySize
  97++DC27 D2 40 DC    >                        jp		nc,CompletedLineGeneration
  98++DC2A              ; If we hit here we skip the write of line arryay u16
  99++DC2A              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DC2A              LL78:
 101++DC2A 2A 82 93             ld          hl,(varV)                           ; varV is current edge address
 102++DC2D 3E 04                ld          a,4
 103++DC2F ED 31                add         hl,a
 104++DC31 22 82 93             ld          (varV),hl
 105++DC34 21 90 DB             ld          hl,PLEDGECTR                        ;
 106++DC37 34                   inc         (hl)                                ;
 107++DC38 7E                   ld          a,(hl)                              ; current edge index ++
 108++DC39                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DC39 21 DF 93    >                  ld    hl,XX17
 108++DC3C BE          >                  cp    (hl)
 108++DC3D C2 C8 DB    >                  jp      nz,LL75Loop
 109++DC40              CompletedLineGeneration:
 110++DC40              LL81:
 111++DC40              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DC40 3A F0 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DC43 CB 27                sla         a
 114++DC45 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DC47 32 F1 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DC4A              ExitEdgeDataLoop:
 117++DC4A C9                   ret
 118++DC4B
# file closed: ./Universe/PrepLines.asm
1762+ DC4B
1763+ DC4B              UnivBankSize  EQU $ - StartOfUniv
1764+ DC4B
# file closed: ./Universe/univ_ship_data.asm
1100  DC4B
1101  DC4B                  SLOT    UniverseBankAddr
1102  DC4B                  PAGE    BankUNIVDATA1
1103  DC4B              	ORG	UniverseBankAddr,BankUNIVDATA1
1104  C000 FF           UNIVDATABlock1      DB $FF
1105  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1106  E000
1107  E000                  SLOT    UniverseBankAddr
1108  E000                  PAGE    BankUNIVDATA2
1109  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1110  C000 FF           UNIVDATABlock2      DB $FF
1111  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1112  E000
1113  E000                  SLOT    UniverseBankAddr
1114  E000                  PAGE    BankUNIVDATA3
1115  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1116  C000 FF           UNIVDATABlock3      DB $FF
1117  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1118  E000
1119  E000                  SLOT    UniverseBankAddr
1120  E000                  PAGE    BankUNIVDATA4
1121  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1122  C000 FF           UNIVDATABlock4      DB $FF
1123  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1124  E000
1125  E000                  SLOT    UniverseBankAddr
1126  E000                  PAGE    BankUNIVDATA5
1127  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1128  C000 FF           UNIVDATABlock5      DB $FF
1129  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1130  E000
1131  E000                  SLOT    UniverseBankAddr
1132  E000                  PAGE    BankUNIVDATA6
1133  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1134  C000 FF           UNIVDATABlock6      DB $FF
1135  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1136  E000
1137  E000                  SLOT    UniverseBankAddr
1138  E000                  PAGE    BankUNIVDATA7
1139  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1140  C000 FF           UNIVDATABlock7      DB $FF
1141  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1142  E000
1143  E000                  SLOT    UniverseBankAddr
1144  E000                  PAGE    BankUNIVDATA8
1145  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1146  C000 FF           UNIVDATABlock8      DB $FF
1147  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1148  E000
1149  E000                  SLOT    UniverseBankAddr
1150  E000                  PAGE    BankUNIVDATA8
1151  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1152  C000 FF           UNIVDATABlock9      DB $FF
1153  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1154  E000
1155  E000                  SLOT    UniverseBankAddr
1156  E000                  PAGE    BankUNIVDATA10
1157  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1158  C000 FF           UNIVDATABlock10     DB $FF
1159  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1160  E000
1161  E000                  SLOT    UniverseBankAddr
1162  E000                  PAGE    BankUNIVDATA11
1163  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1164  C000 FF           UNIVDATABlock11     DB $FF
1165  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1166  E000
1167  E000                  SLOT    UniverseBankAddr
1168  E000                  PAGE    BankUNIVDATA12
1169  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1170  C000 FF           UNIVDATABlock12     DB $FF
1171  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1172  E000
1173  E000                  SLOT    GalaxyDataAddr
1174  E000                  PAGE    BankGalaxyData0
1175  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1176  E000                  INCLUDE "./Universe/galaxy_data.asm"
# file opened: ./Universe/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 A5 9A 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D 5A 9D 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 8A 9A 9B 9A                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 A1 9A 00 00
 316+ F41D B1 9A B8 9A                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 A5 9A AA 9A                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D 90 9A 97 9A                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 BF 9A C6 9A                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D 24 9B BF 9A                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 F2 9A 00 00
 321+ F445 FE 9A 06 9B                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D 1B 9B 62 9D                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 74 9A D1 9A                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 CB 9A 00 00
 324+ F45D 85 9A D1 9A                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 CB 9A 00 00
 325+ F465 80 9A D1 9A                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 CB 9A 00 00
 326+ F46D 7A 9A D1 9A                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 CB 9A 00 00
 327+ F475 74 9A D7 9A                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 CB 9A 00 00
 328+ F47D 85 9A D7 9A                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 CB 9A 00 00
 329+ F485 80 9A D7 9A                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 CB 9A 00 00
 330+ F48D 7A 9A D7 9A                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 CB 9A 00 00
 331+ F495 74 9A E4 9A                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 CB 9A 00 00
 332+ F49D 85 9A E4 9A                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 CB 9A 00 00
 333+ F4A5 80 9A E4 9A                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 CB 9A 00 00
 334+ F4AD 7A 9A E4 9A                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 CB 9A 00 00
 335+ F4B5 74 9A 6D 9D                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 CB 9A 00 00
 336+ F4BD 85 9A 6D 9D                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 CB 9A 00 00
 337+ F4C5 80 9A 6D 9D                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 CB 9A 00 00
 338+ F4CD 7A 9A 6D 9D                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 CB 9A 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD 82 97     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD 9A 97     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 98 9F     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A C3 94                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD B9 9F     .LargeSizeName:         call	NamingLoop
 401+ F690 CD B9 9F     .SmallSizeName:         call	NamingLoop
 402+ F693 CD B9 9F                             call	NamingLoop
 403+ F696 CD B9 9F                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A C5 94     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A C6 94                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A C7 94                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A C8 94                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 0F 97     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A F8 96     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A 9E 94     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD 34 A1                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 C4 93     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 C3 94             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 C3 94             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 C4 93     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 C4 93     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 C4 93     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:  ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 DD 93                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A DD 93                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 DD 93                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c,nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c,nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                   cp    2
1156+ FBCF D8          >                   ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      IfANotZeroGoto find_nearest_loop
1164+ FBDE FE 00       >				cp	0
1164+ FBE0 C2 6E FB    >				jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD AF A1                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 D6 94                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 D6 94                             ld      (Distance),a
1229+ FC51 32 D7 94                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds, this needs to chagne to galaxyresultseed or galayxworkingseed
1233+ FC55 AF           galaxy_system_under_cursor:xor     a
1234+ FC56 32 DD 93                             ld		(XSAV),a
1235+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1236+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1237+ FC60 DD E5                                push    ix
1238+ FC62 7D                                   ld      a,l
1239+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1240+ FC66 20 14                                jr      nz,.ItsNotThisX
1241+ FC68 7C                                   ld      a,h
1242+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1243+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1244+ FC6E DD E5                                push    ix
1245+ FC70 E1                                   pop     hl
1246+ FC71 11 C3 94                             ld      de,WorkingSeeds
1247+ FC74 CD 6D 97                             call    copy_seed
1248+ FC77 3E FF                                ld      a,$FF
1249+ FC79 DD E1                                pop     ix
1250+ FC7B C9                                   ret
1251+ FC7C E1           .ItsNotThisX:           pop     hl
1252+ FC7D ED 34 08 00                          add     hl,8
1253+ FC81 E5                                   push    hl
1254+ FC82 DD E1                                pop     ix
1255+ FC84 3A DD 93                             ld		a,(XSAV)
1256+ FC87 3D                                   dec		a
1257+ FC88 32 DD 93                             ld      (XSAV),a
1258+ FC8B FE 00                                cp		0
1259+ FC8D C8                                   ret		z
1260+ FC8E 18 CD                                jr		.GCCounterLoop
1261+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1262+ FC90 21 C4 93     SeedGalaxy:             ld      hl,SystemSeed
1263+ FC93 11 10 E0                             ld      de,galaxy_master_seed
1264+ FC96 ED A0                                ldi
1265+ FC98 ED A0                                ldi
1266+ FC9A ED A0                                ldi
1267+ FC9C ED A0                                ldi
1268+ FC9E ED A0                                ldi
1269+ FCA0 ED A0                                ldi
1270+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data
1271+ FCA6 AF                                   xor		a
1272+ FCA7 32 DD 93                             ld		(XSAV),a
1273+ FCAA DD E5        SeedGalaxyLoop:         push    ix
1274+ FCAC D1                                   pop     de
1275+ FCAD 21 C4 93                             ld      hl,SystemSeed
1276+ FCB0 CD 6D 97                             call    copy_seed
1277+ FCB3 DD E5                                push    ix
1278+ FCB5 E1                                   pop     hl
1279+ FCB6 ED 34 08 00                          add     hl,8
1280+ FCBA E5                                   push    hl
1281+ FCBB DD E1                                pop     ix
1282+ FCBD CD A2 97                             call    next_system_seed
1283+ FCC0 3A DD 93                             ld		a,(XSAV)
1284+ FCC3 3D                                   dec		a
1285+ FCC4 FE 00                                cp		0
1286+ FCC6 C8                                   ret		z
1287+ FCC7 32 DD 93                             ld		(XSAV),a
1288+ FCCA 18 DE                                jr      SeedGalaxyLoop
1289+ FCCC C9                                   ret
1290+ FCCD
1291+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1292+ FCCD
# file closed: ./Universe/galaxy_data.asm
1177  FCCD
1178  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1179  FCCD
1180  FCCD
1181  FCCD                  SLOT    GalaxyDataAddr
1182  FCCD                  PAGE    BankGalaxyData1
1183  FCCD              	ORG GalaxyDataAddr, BankGalaxyData1
1184  E000 FF           GALAXYDATABlock1         DB $FF
1185  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1186  0000
1187  0000                  SLOT    GalaxyDataAddr
1188  0000                  PAGE    BankGalaxyData2
1189  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1190  E000 FF           GALAXYDATABlock2         DB $FF
1191  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1192  0000                  SLOT    GalaxyDataAddr
1193  0000                  PAGE    BankGalaxyData3
1194  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1195  E000 FF           GALAXYDATABlock3         DB $FF
1196  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1197  0000                  SLOT    GalaxyDataAddr
1198  0000                  PAGE    BankGalaxyData4
1199  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1200  E000 FF           GALAXYDATABlock4         DB $FF
1201  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1202  0000                  SLOT    GalaxyDataAddr
1203  0000                  PAGE    BankGalaxyData5
1204  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1205  E000 FF           GALAXYDATABlock5         DB $FF
1206  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1207  0000                  SLOT    GalaxyDataAddr
1208  0000                  PAGE    BankGalaxyData6
1209  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1210  E000 FF           GALAXYDATABlock6         DB $FF
1211  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1212  0000                  SLOT    GalaxyDataAddr
1213  0000                  PAGE    BankGalaxyData7
1214  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1215  E000 FF           GALAXYDATABlock7         DB $FF
1216  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1217  0000
1218  0000
1219  0000
1220  0000
1221  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1222  0000                  SAVENEX CFG  0,0,0,1
1223  0000                  SAVENEX AUTO
1224  0000                  SAVENEX CLOSE
1225  0000
# file closed: eliteNext.asm
