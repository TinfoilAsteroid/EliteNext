# file opened: eliteNext.asm
   1  0000              Fcoc DEVICE ZXSPECTRUMNEXT
   2  0000               DEVICE ZXSPECTRUMNEXT
   3  0000               DEVICE ZXSPECTRUMNEXT
   4  0000               DEFINE  DOUBLEBUFFER 1
   5  0000               CSPECTMAP eliteNext.map
   6  0000               OPT --zxnext=cspect --syntax=a
   7  0000
   8  0000              DEBUGSEGSIZE   equ 1
   9  0000              DEBUGLOGSUMMARY equ 1
  10  0000              ;DEBUGLOGDETAIL equ 1
  11  0000
  12  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  13  0000              ; Game Defines
  14  0000              ScreenLocal     EQU 0
  15  0000              ScreenGalactic  EQU ScreenLocal + 1
  16  0000              ScreenMarket    EQU ScreenGalactic + 1
  17  0000              ScreenMarketDsp EQU ScreenMarket + 1
  18  0000              ScreenStatus    EQU ScreenMarketDsp + 1
  19  0000              ScreenInvent    EQU ScreenStatus + 1
  20  0000              ScreenPlanet    EQU ScreenInvent + 1
  21  0000              ScreenEquip     EQU ScreenPlanet + 1
  22  0000              ScreenLaunch    EQU ScreenEquip + 1
  23  0000              ScreenFront     EQU ScreenLaunch + 1
  24  0000              ScreenAft       EQU ScreenFront+1
  25  0000              ScreenLeft      EQU ScreenAft+1
  26  0000              ScreenRight     EQU ScreenLeft+1
  27  0000              ScreenDocking   EQU ScreenRight+1
  28  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  29  0000              ; Colour Defines
  30  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED             EQU 224
   3+ 0000              L2ColourRED_MED         EQU 128
   4+ 0000              L2ColourRED_DRK         EQU  32
   5+ 0000              L2ColourRED_1           EQU L2ColourRED_MED
   6+ 0000              L2ColourRED_2           EQU  96
   7+ 0000              L2ColourRED_3           EQU  64
   8+ 0000              L2ColourRED_4           EQU L2ColourRED_DRK
   9+ 0000              L2ColourDARK_RED        EQU L2ColourRED_DRK
  10+ 0000              L2ColourYELLOW          EQU 252
  11+ 0000              L2ColourYELLOW_MED      EQU 144
  12+ 0000              L2ColourYELLOW_DRK      EQU  72
  13+ 0000              L2ColourYELLOW_1	    EQU L2ColourYELLOW_MED
  14+ 0000              L2ColourYELLOW_2        EQU L2ColourYELLOW_DRK
  15+ 0000              L2ColourGREEN           EQU  29
  16+ 0000              L2ColourGREEN_MED       EQU  16
  17+ 0000              L2ColourGREEN_DRK       EQU   8
  18+ 0000              L2ColourGREEN_1		    EQU L2ColourGREEN
  19+ 0000              L2ColourGREEN_2		    EQU L2ColourGREEN_MED
  20+ 0000              L2ColourGREEN_3		    EQU L2ColourGREEN_DRK
  21+ 0000              L2ColourWHITE           EQU 255
  22+ 0000              L2ColourWHITE_MED       EQU 146
  23+ 0000              L2ColourWHITE_DRK       EQU  73
  24+ 0000              L2ColourWHITE_1         EQU L2ColourWHITE_MED
  25+ 0000              L2ColourWHITE_2         EQU L2ColourWHITE_DRK
  26+ 0000              L2ColourGREY_1		    EQU 146
  27+ 0000              L2ColourGREY_2		    EQU 109
  28+ 0000              L2ColourGREY_3		    EQU  73
  29+ 0000              L2ColourGREY_4		    EQU  37
  30+ 0000              L2ColourMAGENTA         EQU 218
  31+ 0000              L2ColourMAGENTA_MED     EQU 130
  32+ 0000              L2ColourMAGENTA_DRK     EQU  65
  33+ 0000              L2ColourORANGE          EQU 236
  34+ 0000              L2ColourORANGE_MED      EQU 168
  35+ 0000              L2ColourORANGE_DRK      EQU  68
  36+ 0000              L2ColourBLUE            EQU   3
  37+ 0000              L2ColourBLUE_MED        EQU   2
  38+ 0000              L2ColourBLUE_DRK        EQU   1
  39+ 0000              L2ColourBLUE_1          EQU 111
  40+ 0000              L2ColourBLUE_2		    EQU  39
  41+ 0000              L2ColourBLUE_3		    EQU L2ColourBLUE_MED
  42+ 0000              L2ColourBLUE_4		    EQU L2ColourBLUE_DRK
  43+ 0000              L2ColourCYAN            EQU  31
  44+ 0000              L2ColourCYAN_MED        EQU  18
  45+ 0000              L2ColourCYAN_DRK        EQU   9
  46+ 0000              L2ColourPURPLE          EQU 109
  47+ 0000              L2ColourPURPLE_MED      EQU  66
  48+ 0000              L2ColourPURPLE_DRK      EQU  33
  49+ 0000              L2ColourPINK_1		    EQU 231
  50+ 0000              L2ColourPINK_2		    EQU 226
  51+ 0000              L2ColourPINK_3		    EQU 225
  52+ 0000              L2ColourPINK_4		    EQU 224
  53+ 0000              L2ColourTRANSPARENT     EQU $E3
  54+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  31  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  32  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  33  0000              ; Total screen list
  34  0000              ; Local Chart
  35  0000              ; Galactic Chart
  36  0000              ; Market Prices
  37  0000              ; Inventory
  38  0000              ; Comander status
  39  0000              ; System Data
  40  0000              ; Mission Briefing
  41  0000              ; missio completion
  42  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  43  0000              ; Pause Menu (only place you can load from )
  44  0000              ; byint and selling equipment
  45  0000              ; bying and selling stock
  46  0000
  47  0000                  INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  48  0000                  INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  49  0000                  INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              UniverseBankAddr	    equ $c000
  25+ 0000              LaunchShipAddr          equ $c000
  26+ 0000              membank7 			    equ $e000
  27+ 0000              L1membankAddr   	    equ $e000
  28+ 0000              L2membankAddr   	    equ $e000
  29+ 0000              ShipModelsAddr	        equ $e000
  30+ 0000              SpritemembankAddr       equ $e000
  31+ 0000              ResetUniverseAddr       equ $e000
  32+ 0000              StockTableAddr	        equ $e000
  33+ 0000              CMDRDATAAddr            equ $e000
  34+ 0000              LAYER2Addr              equ $e000
  35+ 0000              LAYER1Addr              equ $e000
  36+ 0000              SPRITEAddr              equ $e000
  37+ 0000              ConsoleImageAddr        equ $e000
  38+ 0000              GalaxyDataAddr          equ $e000
  39+ 0000
  40+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  41+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  42+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  43+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  44+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  45+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  46+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  53+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  54+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  55+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  56+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  57+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  58+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  60+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  61+ 0000
  62+ 0000              BankResetUniv           equ 49
  63+ 0000              BankMenuShrCht          equ 50
  64+ 0000              BankMenuGalCht          equ 51
  65+ 0000              BankMenuInvent          equ 52
  66+ 0000              BankMenuSystem          equ 53
  67+ 0000              BankMenuMarket          equ 54
  68+ 0000              BankStockTable          equ 55
  69+ 0000              BankCmdrData            equ 56
  70+ 0000              BankLAYER2              equ 57
  71+ 0000              BankLAYER1              equ 58
  72+ 0000              BankShipModels1         equ 59
  73+ 0000              BankSPRITE              equ 60
  74+ 0000              BankConsole             equ 61
  75+ 0000              BankFrontView           equ 62
  76+ 0000              BankMenuStatus          equ 63
  77+ 0000              BankMenuEquipS          equ 64
  78+ 0000              BankLaunchShip          equ 65
  79+ 0000              BankDispMarket          equ 66
  80+ 0000              BankShipModels2         equ 67
  81+ 0000              BankShipModels3         equ 68
  82+ 0000              BankShipModels4         equ 69
  83+ 0000
  84+ 0000              BankUNIVDATA0           equ 70
  85+ 0000              BankUNIVDATA1           equ 71
  86+ 0000              BankUNIVDATA2           equ 72
  87+ 0000              BankUNIVDATA3           equ 73
  88+ 0000              BankUNIVDATA4           equ 74
  89+ 0000              BankUNIVDATA5           equ 75
  90+ 0000              BankUNIVDATA6           equ 76
  91+ 0000              BankUNIVDATA7           equ 77
  92+ 0000              BankUNIVDATA8           equ 78
  93+ 0000              BankUNIVDATA9           equ 79
  94+ 0000              BankUNIVDATA10          equ 80
  95+ 0000              BankUNIVDATA11          equ 81
  96+ 0000              BankUNIVDATA12          equ 82
  97+ 0000
  98+ 0000              BankGalaxyData0         equ 91
  99+ 0000              BankGalaxyData1         equ 92
 100+ 0000              BankGalaxyData2         equ 93
 101+ 0000              BankGalaxyData3         equ 94
 102+ 0000              BankGalaxyData4         equ 95
 103+ 0000              BankGalaxyData5         equ 96
 104+ 0000              BankGalaxyData6         equ 97
 105+ 0000              BankGalaxyData7         equ 98
 106+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  50  0000                  INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  51  0000                  INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipDataLength          equ ShipNewBitsOffset+1
  23+ 0000
  24+ 0000              CobraTablePointer       equ 43
  25+ 0000              ;29 faulty
  26+ 0000              BankThreshold           equ 16
  27+ 0000
  28+ 0000              ShipTableALast          equ 23
  29+ 0000              ShipTableBLast          equ 39
  30+ 0000              ShipTableCLast          equ 55
  31+ 0000
# file closed: ./Data/ShipModelEquates.asm
  52  0000                  INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipBank1:  MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipBank2:  MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipBank3:  MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  29+ 0000              					 ENDM
  30+ 0000              MMUSelectShipBank4:  MACRO
  31+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectShipBankA   MACRO
  35+ 0000 ~            					 nextreg ShipModelMMU,	    a
  36+ 0000              					 ENDM
  37+ 0000
  38+ 0000              MMUSelectShipBankN:  MACRO value
  39+ 0000 ~            					 nextreg ShipModelMMU,	    value
  40+ 0000              					 ENDM
  41+ 0000
  42+ 0000              MMUSelectCmdrData:	 MACRO
  43+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  44+ 0000              					 ENDM
  45+ 0000
  46+ 0000              MMUSelectStockTable: MACRO
  47+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  48+ 0000              					 ENDM
  49+ 0000
  50+ 0000              MMUSelectCpySrcA:    MACRO
  51+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  52+ 0000              					 ENDM
  53+ 0000
  54+ 0000              MMUSelectCpySrcN:    MACRO value
  55+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  56+ 0000              					 ENDM
  57+ 0000
  58+ 0000              MMUSelectUniverseA:  MACRO
  59+ 0000 ~                                 add    a,BankUNIVDATA0
  60+ 0000 ~                                 nextreg UniverseMMU,       a
  61+ 0000                                   ENDM
  62+ 0000
  63+ 0000              MMUSelectUniverseN:  MACRO value
  64+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  65+ 0000                                   ENDM
  66+ 0000
  67+ 0000              MMUSelectGalaxyA:    MACRO
  68+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectGalaxyN:    MACRO value
  72+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  73+ 0000                                   ENDM
  74+ 0000              MMUSelectGalaxyACopy:MACRO
  75+ 0000 ~                                 nextreg UniverseMMU,       a
  76+ 0000                                   ENDM
  77+ 0000
  78+ 0000              MMUSelectUniverseAbs:MACRO value
  79+ 0000 ~                                 nextreg UniverseMMU,       value
  80+ 0000                                   ENDM
  81+ 0000
  82+ 0000              MMUSelectMenuGalCht: MACRO
  83+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  84+ 0000              					 ENDM
  85+ 0000
  86+ 0000              MMUSelectMenuShrCht: MACRO
  87+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  88+ 0000              					 ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuInvent: MACRO
  91+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuSystem: MACRO
  95+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuMarket: MACRO
  99+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectMenuStatus: MACRO
 103+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectViewFront:  MACRO
 107+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 108+ 0000              					 ENDM
 109+ 0000
 110+ 0000              MMUSelectScreenA:    MACRO
 111+ 0000 ~                                 nextreg ScreenBankMMU,		a
 112+ 0000              					 ENDM
 113+ 0000
# file closed: ./Macros/MMUMacros.asm
  53  0000                  INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000              ShiftMem16Right1:   MACRO memaddr
  58+ 0000 ~                                ld    hl,(memaddr)
  59+ 0000 ~                                srl   h
  60+ 0000 ~                                rr    l
  61+ 0000 ~                                ld    (memaddr),hl
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000              ShiftMem8Right1:    MACRO memaddr
  65+ 0000 ~                                ld      a,(memaddr)
  66+ 0000 ~                                srl     a
  67+ 0000 ~                                ld      (memaddr),a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000
  71+ 0000              ShiftMem8Left1A:    MACRO memaddr
  72+ 0000 ~                                ld      a,(memaddr)
  73+ 0000 ~                                sla     a
  74+ 0000 ~                                ld      (memaddr),a
  75+ 0000                                  ENDM
  76+ 0000
# file closed: ./Macros/ShiftMacros.asm
  54  0000                  INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
# file closed: ./Macros/CopyByteMacros.asm
  55  0000                  INCLUDE "./Macros/GeneralMacros.asm"
# file opened: ./Macros/GeneralMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  15+ 0000 ~                                    ld      a,(mem)
  16+ 0000 ~                                    bit 	bitnbr,a
  17+ 0000 ~                                    jp      nz,target
  18+ 0000                                      ENDM
  19+ 0000
  20+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  21+ 0000 ~                                    ld      a,(mem)
  22+ 0000 ~                                    bit 	bitnbr,a
  23+ 0000 ~                                    jp      z,target
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  28+ 0000 ~                                    bit 	bitnbr,reg
  29+ 0000 ~                                    jp      nz,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  33+ 0000 ~                                    bit 	bitnbr,reg
  34+ 0000 ~                                    jp      z,target
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
  38+ 0000 ~                                    bit 	bitnbr,reg
  39+ 0000 ~                                    ret     nz
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  43+ 0000 ~                                    ld   a,(mem)
  44+ 0000 ~                                    bit 	bitnbr,a
  45+ 0000 ~                                    ret     nz
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  49+ 0000 ~                                    bit 	bitnbr,reg
  50+ 0000 ~                                    ret		z
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  54+ 0000 ~                                    ld     a,(mem)
  55+ 0000 ~                                    bit 	bitnbr,a
  56+ 0000 ~                                    ret		z
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              JumpIfAGTEusng:         MACRO
  60+ 0000 ~                                    jp		nc,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              JumpIfAGTENusng:        MACRO reg,target
  64+ 0000 ~                                    cp     reg
  65+ 0000 ~                                    jp		nc,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
  69+ 0000 ~                                    ld      hl,mem
  70+ 0000 ~                                    cp      (hl)
  71+ 0000 ~                                    jp		nc,target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              JumpIfALTMemusng:       MACRO mem,target
  75+ 0000 ~                                    ld      hl,mem
  76+ 0000 ~                                    cp      (hl)
  77+ 0000 ~                                    jp		c,target
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              CallIfAGTENusng:        MACRO   reg,target
  81+ 0000 ~                                    cp      reg
  82+ 0000 ~                                    call	nc,target
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              CallIfALTNusng:         MACRO   reg,target
  86+ 0000 ~                                    cp      reg
  87+ 0000 ~                                    call	c,target
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  91+ 0000 ~                                    ld     a,(mem)
  92+ 0000 ~                                    cp     value
  93+ 0000 ~                                    jp	  nc,target
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
  97+ 0000 ~                                    ld   a,(mem)
  98+ 0000 ~                                    ld   hl,address
  99+ 0000 ~                                    cp   (hl)
 100+ 0000 ~                                    jp	  nc,target
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 104+ 0000 ~                                    ld   a,(mem)
 105+ 0000 ~                                    ld   hl,address
 106+ 0000 ~                                    cp   (hl)
 107+ 0000 ~                                    jp	  z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
 111+ 0000 ~                                    ld   a,(mem)
 112+ 0000 ~                                    ld   hl,address
 113+ 0000 ~                                    cp   (hl)
 114+ 0000 ~                                    call    z,target
 115+ 0000                                      ENDM
 116+ 0000
 117+ 0000              JumpIfALTusng:          MACRO target
 118+ 0000 ~                                    jp		c,target
 119+ 0000                                      ENDM
 120+ 0000
 121+ 0000              JumpIfALTNusng:         MACRO value, target
 122+ 0000 ~                                    cp      value
 123+ 0000 ~                                    jp		c, target
 124+ 0000                                      ENDM
 125+ 0000
 126+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 127+ 0000 ~                                    ld      a,(mem)
 128+ 0000 ~                                    cp      value
 129+ 0000 ~                                    jp	  c,target
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 133+ 0000 ~                                    ld    a,(mem)
 134+ 0000 ~                                    ld    hl,value
 135+ 0000 ~                                    cp    (hl)
 136+ 0000 ~                                    jp	  c,target
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 140+ 0000 ~                                    ld  a,(mem)
 141+ 0000 ~                                    cp  value
 142+ 0000 ~                                    jp  z,target
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 146+ 0000 ~                                    ld  a,(mem)
 147+ 0000 ~                                    cp  value
 148+ 0000 ~                                    jp  nz,target
 149+ 0000                                      ENDM
 150+ 0000
 151+ 0000              JumpIfMemZero:          MACRO mem,target
 152+ 0000 ~                                    ld  a,(mem)
 153+ 0000 ~                                    and a
 154+ 0000 ~                                    jr  z,target
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              JumpIfALTMemHLusng:     MACRO target
 158+ 0000 ~                                    cp    (hl)
 159+ 0000 ~                                    jp	  c,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfANENusng: MACRO value, target
 163+ 0000 ~                            cp     value
 164+ 0000 ~                            jp      nz,target
 165+ 0000                              ENDM
 166+ 0000
 167+ 0000              JumpIfANEMemusng: MACRO  value, target
 168+ 0000 ~                              ld    hl,value
 169+ 0000 ~                              cp    (hl)
 170+ 0000 ~                              jp      nz,target
 171+ 0000                                ENDM
 172+ 0000
 173+ 0000              JumpIfAEqNusng: MACRO value, target
 174+ 0000 ~                            cp     value
 175+ 0000 ~                            jp      z,target
 176+ 0000                              ENDM
 177+ 0000
 178+ 0000              IfAIsZeroGoto:	MACRO target
 179+ 0000 ~            				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 180+ 0000 ~            				jp	z, target
 181+ 0000              				ENDM
 182+ 0000
 183+ 0000              IfANotZeroGoto:	MACRO target
 184+ 0000 ~            				cp	0
 185+ 0000 ~            				jp	nz,target
 186+ 0000              				ENDM
 187+ 0000
 188+ 0000              IfResultZeroGoto:	MACRO target
 189+ 0000 ~            					jp	z,target
 190+ 0000              					ENDM
 191+ 0000
 192+ 0000              IfResultNotZeroGoto:MACRO target
 193+ 0000 ~            					jp	nz,target
 194+ 0000              					ENDM
 195+ 0000
 196+ 0000              ReturnIfAIsZero:    MACRO
 197+ 0000 ~                                and a
 198+ 0000 ~                                ret    z
 199+ 0000                                  ENDM
 200+ 0000
 201+ 0000              ReturnIfMemisZero:  MACRO mem
 202+ 0000 ~                                ld   a,(mem)
 203+ 0000 ~                                and a
 204+ 0000 ~                                ret    z
 205+ 0000                                  ENDM
 206+ 0000
 207+ 0000              ReturnIfMemEquN:    MACRO mem, value
 208+ 0000 ~                                ld   a,(mem)
 209+ 0000 ~                                cp     value
 210+ 0000 ~                                ret    z
 211+ 0000                                  ENDM
 212+ 0000
 213+ 0000              ReturnIfANotZero:   MACRO
 214+ 0000 ~                                cp     0
 215+ 0000 ~                                ret    nz
 216+ 0000                                  ENDM
 217+ 0000
 218+ 0000              ReturnIfMemNotZero: MACRO mem
 219+ 0000 ~                                ld     a,(mem)
 220+ 0000 ~                                cp     0
 221+ 0000 ~                                ret    nz
 222+ 0000                                  ENDM
 223+ 0000
 224+ 0000              ReturnIfAGTEusng:   MACRO value
 225+ 0000 ~                                cp    value
 226+ 0000 ~                                ret	 nc
 227+ 0000                                  ENDM
 228+ 0000
 229+ 0000              ReturnIfALTNusng:   MACRO value
 230+ 0000 ~                                cp    value
 231+ 0000 ~                                ret	 c
 232+ 0000                                  ENDM
 233+ 0000
 234+ 0000              ReturnIfAGTENusng:  MACRO value
 235+ 0000 ~                                cp    value
 236+ 0000 ~                                ret	 nc
 237+ 0000                                  ENDM
 238+ 0000
 239+ 0000              ReturnIfANENusng:   MACRO value
 240+ 0000 ~                                cp      value
 241+ 0000 ~                                ret     nz
 242+ 0000                                  ENDM
 243+ 0000
 244+ 0000              ReturnIfAEqNusng:   MACRO value
 245+ 0000 ~                                cp      value
 246+ 0000 ~                                ret     z
 247+ 0000                                  ENDM
 248+ 0000
 249+ 0000              SetCarryFlag:       MACRO
 250+ 0000 ~                                scf
 251+ 0000                                  ENDM
 252+ 0000
 253+ 0000              ClearCarryFlag:	    MACRO
 254+ 0000 ~                                or a
 255+ 0000                                  ENDM
 256+ 0000
 257+ 0000              FlipCarryFalg:      MACRO
 258+ 0000 ~                                ccf
 259+ 0000                                  ENDM
 260+ 0000
 261+ 0000              pushbcde:		    MACRO
 262+ 0000 ~                                push	bc
 263+ 0000 ~                                push	de
 264+ 0000                                  ENDM
 265+ 0000
 266+ 0000              popdebc:		    MACRO
 267+ 0000 ~                                pop		de
 268+ 0000 ~                                pop		bc
 269+ 0000                                  ENDM
 270+ 0000
 271+ 0000              pushhlde:		    MACRO
 272+ 0000 ~                                push	hl
 273+ 0000 ~                                push	de
 274+ 0000                                  ENDM
 275+ 0000
 276+ 0000              popdehl:		    MACRO
 277+ 0000 ~                                pop		de
 278+ 0000 ~                                pop		hl
 279+ 0000                                  ENDM
 280+ 0000
 281+ 0000              pushbcdeaf:		    MACRO
 282+ 0000 ~                                push	bc
 283+ 0000 ~                                push	de
 284+ 0000 ~                                push	af
 285+ 0000                                  ENDM
 286+ 0000
 287+ 0000              popafdebc:		    MACRO
 288+ 0000 ~                                pop		af
 289+ 0000 ~                                pop		de
 290+ 0000 ~                                pop		bc
 291+ 0000                                  ENDM
 292+ 0000
 293+ 0000              NegIY:			    MACRO
 294+ 0000 ~                                xor a
 295+ 0000 ~                                sub iyl
 296+ 0000 ~                                ld iyl,a
 297+ 0000 ~                                sbc a,a
 298+ 0000 ~                                sub iyh
 299+ 0000 ~                                ld iyh,a
 300+ 0000                                  ENDM
 301+ 0000
 302+ 0000              NegHL:			    MACRO
 303+ 0000 ~                                xor a
 304+ 0000 ~                                sub l
 305+ 0000 ~                                ld l,a
 306+ 0000 ~                                sbc a,a
 307+ 0000 ~                                sub h
 308+ 0000 ~                                ld h,a
 309+ 0000                                  ENDM
 310+ 0000
 311+ 0000              NegDE:			    MACRO
 312+ 0000 ~                                xor a
 313+ 0000 ~                                sub e
 314+ 0000 ~                                ld e,a
 315+ 0000 ~                                sbc a,a
 316+ 0000 ~                                sub d
 317+ 0000 ~                                ld d,a
 318+ 0000                                  ENDM
 319+ 0000
 320+ 0000              NegBC:			    MACRO
 321+ 0000 ~                                xor a
 322+ 0000 ~                                sub c
 323+ 0000 ~                                ld c,a
 324+ 0000 ~                                sbc a,a
 325+ 0000 ~                                sub  b
 326+ 0000 ~                                ld b,a
 327+ 0000                                  ENDM
 328+ 0000
 329+ 0000              NegH                MACRO
 330+ 0000 ~                                ld      a,h
 331+ 0000 ~                                neg
 332+ 0000 ~                                ld      h,a
 333+ 0000                                  ENDM
 334+ 0000
 335+ 0000              NegD                MACRO
 336+ 0000 ~                                ld      a,d
 337+ 0000 ~                                neg
 338+ 0000 ~                                ld      d,a
 339+ 0000                                  ENDM
 340+ 0000
 341+ 0000              NegB                MACRO
 342+ 0000 ~                                ld      a,b
 343+ 0000 ~                                neg
 344+ 0000 ~                                ld      b,a
 345+ 0000                                  ENDM
 346+ 0000
 347+ 0000              FourLDIInstrunctions:   MACRO
 348+ 0000 ~                                    ldi
 349+ 0000 ~                                    ldi
 350+ 0000 ~                                    ldi
 351+ 0000 ~                                    ldi
 352+ 0000                                      ENDM
 353+ 0000
 354+ 0000              FiveLDIInstrunctions:   MACRO
 355+ 0000 ~                                    ldi
 356+ 0000 ~                                    ldi
 357+ 0000 ~                                    ldi
 358+ 0000 ~                                    ldi
 359+ 0000 ~                                    ldi
 360+ 0000                                      ENDM
 361+ 0000
 362+ 0000              SixLDIInstrunctions:    MACRO
 363+ 0000 ~                                    ldi
 364+ 0000 ~                                    ldi
 365+ 0000 ~                                    ldi
 366+ 0000 ~                                    ldi
 367+ 0000 ~                                    ldi
 368+ 0000 ~                                    ldi
 369+ 0000                                      ENDM
 370+ 0000
 371+ 0000              EightLDIInstrunctions:  MACRO
 372+ 0000 ~            		                ldi
 373+ 0000 ~            		                ldi
 374+ 0000 ~            		                ldi
 375+ 0000 ~            		                ldi
 376+ 0000 ~            		                ldi
 377+ 0000 ~            		                ldi
 378+ 0000 ~            		                ldi
 379+ 0000 ~            		                ldi
 380+ 0000                                      ENDM
 381+ 0000
 382+ 0000              NineLDIInstrunctions:  MACRO
 383+ 0000 ~            		                ldi
 384+ 0000 ~            		                ldi
 385+ 0000 ~            		                ldi
 386+ 0000 ~            		                ldi
 387+ 0000 ~            		                ldi
 388+ 0000 ~            		                ldi
 389+ 0000 ~            		                ldi
 390+ 0000 ~            		                ldi
 391+ 0000 ~            		                ldi
 392+ 0000                                      ENDM
 393+ 0000
 394+ 0000              FlipMemSign:        MACRO mem
 395+ 0000 ~                                ld  a,(mem)
 396+ 0000 ~                                xor SignOnly8Bit
 397+ 0000 ~                                ld  (mem),a
 398+ 0000                                  ENDM
 399+ 0000
# file closed: ./Macros/GeneralMacros.asm
  56  0000                  INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		   MACRO
   2+ 0000 ~            			   xor a
   3+ 0000              			   ENDM
   4+ 0000
   5+ 0000              ldCopyByte:    MACRO memfrom, memto
   6+ 0000 ~                           ld       a,(memfrom)
   7+ 0000 ~                           ld       (memto),a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000
  11+ 0000              ldCopyByteABS: MACRO
  12+ 0000 ~                           ld       a,(memfrom)
  13+ 0000 ~            			   and		$7F
  14+ 0000 ~                           ld       (memto),a
  15+ 0000              			   ENDM
  16+ 0000
  17+ 0000              ldCopy2Byte    MACRO  memfrom, memto
  18+ 0000 ~                           ld       hl,(memfrom)
  19+ 0000 ~                           ld       (memto),hl
  20+ 0000                             ENDM
  21+ 0000
  22+ 0000              ldWriteConst   MACRO  memfrom, memto
  23+ 0000 ~                           ld       a,memfrom
  24+ 0000 ~                           ld       (memto),a
  25+ 0000                             ENDM
  26+ 0000
  27+ 0000              ldWriteZero    MACRO  memto
  28+ 0000 ~                           xor      a
  29+ 0000 ~                           ld       (memto),a
  30+ 0000                             ENDM
  31+ 0000
  32+ 0000              ldIXLaFromN:	MACRO memfrom
  33+ 0000 ~                            ld		a,(memfrom)
  34+ 0000 ~                            ld		ixl,a
  35+ 0000                              ENDM
  36+ 0000
  37+ 0000              ldIXHaFromN:	MACRO memfrom
  38+ 0000 ~                            ld		a,(memfrom)
  39+ 0000 ~                            ld		ixh,a
  40+ 0000                              ENDM
  41+ 0000
  42+ 0000              ldIYLaFromN:	MACRO memfrom
  43+ 0000 ~                            ld		a,(memfrom)
  44+ 0000 ~                            ld		iyl,a
  45+ 0000                              ENDM
  46+ 0000
  47+ 0000              ldIYHaFromN:	MACRO memfrom
  48+ 0000 ~                            ld		a,(memfrom)
  49+ 0000 ~                            ld		iyh,a
  50+ 0000                              ENDM
  51+ 0000
  52+ 0000              ldhlde:			MACRO
  53+ 0000 ~                            ld		h,d
  54+ 0000 ~                            ld		l,e
  55+ 0000                              ENDM
  56+ 0000
  57+ 0000              ldhlbc:			MACRO
  58+ 0000 ~                            ld		h,b
  59+ 0000 ~                            ld		l,c
  60+ 0000                              ENDM
  61+ 0000
  62+ 0000              ldbcde:			MACRO
  63+ 0000 ~                            ld		b,d
  64+ 0000 ~                            ld		c,e
  65+ 0000                              ENDM
  66+ 0000
  67+ 0000              lddebc:			MACRO
  68+ 0000 ~                            ld		d,b
  69+ 0000 ~                            ld		e,c
  70+ 0000                              ENDM
  71+ 0000
  72+ 0000              ldbchl:			MACRO
  73+ 0000 ~                            ld		b,h
  74+ 0000 ~                            ld		c,l
  75+ 0000                              ENDM
  76+ 0000
  77+ 0000              lddeiy:			MACRO
  78+ 0000 ~                            ld		d,iyh
  79+ 0000 ~                            ld		e,iyl
  80+ 0000                              ENDM
  81+ 0000
  82+ 0000              ldiyde:			MACRO
  83+ 0000 ~                            ld		iyh,d
  84+ 0000 ~                            ld		iyl,e
  85+ 0000                              ENDM
  86+ 0000
# file closed: ./Macros/ldCopyMacros.asm
  57  0000                  INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              ldAToHLixl:			MACRO value
   2+ 0000 ~            					ld          hl,value
   3+ 0000 ~            					ex          af,af'
   4+ 0000 ~            					ld          a,ixl
   5+ 0000 ~            					add         hl,a
   6+ 0000 ~            					ex          af,af'
   7+ 0000 ~            					ld          (hl),a
   8+ 0000              					ENDM
   9+ 0000
  10+ 0000              ldAToHLiyl:			MACRO value
  11+ 0000 ~            					ld          hl,value
  12+ 0000 ~            					ex          af,af'
  13+ 0000 ~            					ld          a,iyl
  14+ 0000 ~            					add         hl,a
  15+ 0000 ~            					ex          af,af'
  16+ 0000 ~            					ld          (hl),a
  17+ 0000              					ENDM
  18+ 0000
  19+ 0000
  20+ 0000              ldHLixlToA:         MACRO value
  21+ 0000 ~                                ld          hl,value
  22+ 0000 ~                                ex          af,af'
  23+ 0000 ~                                ld          a,ixl
  24+ 0000 ~                                add         hl,a
  25+ 0000 ~                                ld          a,(hl)
  26+ 0000                                  ENDM
  27+ 0000
  28+ 0000              ldHLiylToA:         MACRO value
  29+ 0000 ~                                ld          hl,value
  30+ 0000 ~                                ex          af,af'
  31+ 0000 ~                                ld          a,iyl
  32+ 0000 ~                                add         hl,a
  33+ 0000 ~                                ld          a,(hl)
  34+ 0000                                  ENDM
  35+ 0000
  36+ 0000              ldHLIdxAToA:        MACRO value
  37+ 0000 ~                                ld          hl,value
  38+ 0000 ~                                add         hl,a
  39+ 0000 ~                                ld          a,(hl)
  40+ 0000                                  ENDM
  41+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
  58  0000
  59  0000
  60  0000              charactersetaddr		equ 15360
  61  0000              STEPDEBUG               equ 1
  62  0000
  63  0000
  64  0000                                      ORG         $8000
  65  8000 F3                                   di
  66  8001                                      ; "STARTUP"
  67  8001                                      MMUSelectLayer1
  67  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  68  8005 CD 7C E0                             call		l1_cls
  69  8008 3E 07                                ld			a,7
  70  800A CD 88 E0                             call		l1_attr_cls_to_a
  71  800D 3E FF                                ld          a,$FF
  72  800F CD 92 E0                             call        l1_set_border
  73  8012                                      MMUSelectSpriteBank
  73  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  74  8016 CD 54 E1                             call		sprite_load_sprite_data
  75  8019              Initialise:             MMUSelectLayer2
  75  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76  801D CD D0 E0                             call 		l2_initialise
  77  8020 3E FF                                ld          a,$FF
  78  8022 32 AB 84                             ld          (ScreenTransitionForced),a
  79  8025 3E 10        TidyDEBUG:              ld          a,16
  80  8027 32 86 83                             ld          (TidyCounter),a
  81  802A
  82  802A AF           TestText:               xor			a
  83  802B 32 DF 91                             ld      (JSTX),a
  84  802E                                      MMUSelectCmdrData
  84  802E ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
  85  8032 CD 1F E0                             call		defaultCommander
  86  8035
  87  8035                                      MMUSelectSpriteBank
  87  8035 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  88  8039 CD 4C E1                             call		init_sprites
  89  803C
  90  803C                                      MMUSelectStockTable
  90  803C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  91  8040 CD AA E0                             call		generate_stock_market ; Normally done on jump to system and start up, should be written on load save to stop market price cheating
  92  8043
  93  8043                                      IFDEF DOUBLEBUFFER
  94  8043                                          MMUSelectLayer2
  94  8043 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  95  8047 CD C9 E0                                 call        l2_cls
  96  804A CD DD E0                                 call  l2_flip_buffers
  97  804D                                      ENDIF
  98  804D
  99  804D                                      ;MMUSelectResetUniv
 100  804D CD AC 84                             call		ResetUniv
 100  8050
 101  8050 CD D4 84                             call        ResetGalaxy
 102  8053                                      MMUSelectGalaxyN 0
 102  8053 ED 91 57 5B >                     nextreg GalaxyDataMMU,     BankGalaxyData0+0
 103  8057 CD 90 FC                             call        SeedGalaxy
 104  805A
 105  805A                                      MMUSelectLayer2
 105  805A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 106  805E                                      MMUSelectUniverseN 0
 106  805E ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 107  8062 CD C9 E0                             call        l2_cls
 108  8065                                      IFDEF DOUBLEBUFFER
 109  8065                                          MMUSelectLayer2
 109  8065 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110  8069 CD DD E0                                 call  l2_flip_buffers
 111  806C                                      ENDIF
 112  806C
 113  806C
 114  806C              ;InitialiseDemoShip:     call    ClearFreeSlotList
 115  806C              ;                        call    FindNextFreeSlotInA
 116  806C              ;                        ld      b,a
 117  806C              ;                        ld      a,13 ;Coriolis station
 118  806C              ;                        call    InitialiseShipAUnivB
 119  806C              ;                        xor     a
 120  806C 32 B2 92     InitialiseMainLoop:     ld      (CurrentUniverseAI),a
 121  806F 3E 03                                ld      a,3
 122  8071 32 31 92                             ld      (MenuIdMax),a
 123  8074 3E FF                                ld      a,$FF                               ; Starts Docked
 124  8076 32 36 92                             ld      (DockedFlag),a
 125  8079              ;                        call    InitialiseFrontView
 126  8079 CD 26 85                             call    InitialiseCommander
 127  807C                                      MMUSelectUniverseN 0
 127  807C ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 128  8080 CD E5 85                             call    SetInitialShipPosition
 129  8083              ;..................................................................................................................................
 130  8083 CD 44 96     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 131  8086 CD 8A 8F                             call    scan_keyboard
 132  8089              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 133  8089 CD 30 82     DemoOfShipsDEBUG:       call    TestForNextShip
 134  808C              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 135  808C 3E 00        InputBlockerCheck:      ld      a,$0
 136  808E                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 136  808E FE 01       >                cp     $01
 136  8090 CA B2 80    >                jp      z,SkipInputHandlers
 137  8093 CD 8A 85                             call    ViewKeyTest
 138  8096 CD D7 82                             call    TestPauseMode
 139  8099 3A 37 92                             ld      a,(GamePaused)
 140  809C FE 00                                cp      0
 141  809E 20 E3                                jr      nz,MainLoop
 142  80A0 CD 1B 91                             call    MovementKeyTest
 143  80A3              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 144  80A3 3A B1 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 145  80A6                                      IfAIsZeroGoto     TestAreWeDocked
 145  80A6 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145  80A7 CA B2 80    >				jp	z, TestAreWeDocked
 146  80AA              ;.. Handle displaying correct screen ..............................................................................................
 147  80AA 3E 00        HandleBankSelect:       ld      a,$00
 148  80AC                                      MMUSelectScreenA
 148  80AC ED 92 56    >                     nextreg ScreenBankMMU,		a
 149  80AF CD 00 00     CallCursorRoutine:      call    $0000
 150  80B2              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 151  80B2              ;.. Also end up here if we have the screen input blocker set
 152  80B2              SkipInputHandlers:
 153  80B2              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 154  80B2 3A 36 92     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 155  80B5                                      JumpIfANENusng  0, SkipUniveseUpdate                  ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 155  80B5 FE 00       >                cp     0
 155  80B7 C2 1B 81    >                jp      nz,SkipUniveseUpdate
 156  80BA              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 157  80BA              ;.. we do one universe slot each loop update ......................................................................................
 158  80BA CD 6B 81                             call    UpdateUniverseObjects
 159  80BD                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 159  80BD 3A AB 84    >                        ld  a,(ScreenTransitionForced)
 159  80C0 FE FF       >                        cp  $FF
 159  80C2 C2 5A 81    >                        jp  nz,BruteForceChange
 160  80C5 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 161  80C7 FE 00                                cp      0                                             ; .
 162  80C9 28 48                                jr      z, MenusLoop                                  ; This will change as more screens are added TODO
 163  80CB              ;..Processing a view...............................................................................................................
 164  80CB              ;..Display any message ............................................................................................................
 165  80CB 3A E7 91                             ld      a,(MessageCount)
 166  80CE 28 00                                jr      z,.NoMessages                                 ; note message end will tidy up display
 167  80D0 2A DC 91     .NoMessages:            ld      hl,(InnerHyperCount)
 168  80D3 7C                                   ld      a,h
 169  80D4 B5                                   or      l
 170  80D5 28 18                                jr      z,.NoHyperspace                               ; note message end will tidy up display
 171  80D7              .HyperSpaceMessage:     MMUSelectLayer1
 171  80D7 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 172  80DB 16 60                                ld      d,96
 173  80DD                                   ;   call    l1_cls_2_lines_d
 174  80DD 11 28 60                             ld      de,$6028
 175  80E0 21 90 82                             ld      hl,Hyp_message
 176  80E3 CD B5 E0                             call    l1_print_at
 177  80E6 11 28 68                             ld      de,$6828
 178  80E9 21 BA 82                             ld      hl,Hyp_charging
 179  80EC CD B5 E0                             call    l1_print_at
 180  80EF              .NoHyperspace:          MMUSelectLayer2
 180  80EF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 181  80F3 CD C9 E0                             call   l2_cls
 182  80F6                                      MMUSelectLayer1
 182  80F6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183  80FA              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 184  80FA 3E DF        DrawStarsForwards:      ld     a,$DF
 185  80FC 32 EB E8                             ld     (line_gfx_colour),a
 186  80FF              StarUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 186  80FF ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 187  8103 CD 21 8B     StarUpdateRoutine:      call   StarsForward                                   ; This needs to be self modifying
 188  8106              PrepLayer2:             MMUSelectLayer2                                       ; Clear layer 2 for graphics
 188  8106 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 189  810A                                    ;  call   l2_cls
 190  810A CD FD 81     ProcessShipModels:      call    DrawForwardShips                              ; Draw all ships (this may need to be self modifying)
 191  810D CD 72 86                             call   UpdateConsole                                  ; Update display console on layer 1
 192  8110 C3 29 81                             jp LoopRepeatPoint                                    ; And we are done with views, so check if there was a special command to do
 193  8113              ;..If we were not in views then we were in display screens/menus...................................................................
 194  8113 2A 27 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 195  8116 7C                                   ld      a,h
 196  8117 B5                                   or      l
 197  8118 CA 29 81                             jp      z,LoopRepeatPoint
 198  811B              ;..This is the screen update routine for menus.....................................................................................
 199  811B              ;.. Also used by transition routines
 200  811B              SkipUniveseUpdate:      JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 200  811B 3A 27 81    >                        ld  a,(ScreenLoopJP+1)
 200  811E A7          >                        and a
 200  811F 28 08       >                        jr  z,LoopRepeatPoint
 201  8121 3E 00        ScreenLoopBank:         ld      a,$0
 202  8123                                      MMUSelectScreenA
 202  8123 ED 92 56    >                     nextreg ScreenBankMMU,		a
 203  8126 CD 00 00     ScreenLoopJP:           call    $0000
 204  8129 3A 36 92     LoopRepeatPoint:        ld      a,(DockedFlag)
 205  812C              HandleLaunched:         JumpIfAEqNusng  $FD, WeHaveCompletedLaunch
 205  812C FE FD       >                cp     $FD
 205  812E CA 39 81    >                jp      z,WeHaveCompletedLaunch
 206  8131                                      JumpIfAEqNusng  $FE, WeAreInTransition
 206  8131 FE FE       >                cp     $FE
 206  8133 CA 3F 81    >                jp      z,WeAreInTransition
 207  8136 C3 3F 81                             jp  DoubleBufferCheck
 208  8139 CD FD 84     WeHaveCompletedLaunch:  call    LaunchedFromStation
 209  813C C3 3F 81                             jp  DoubleBufferCheck
 210  813F              WeAreInTransition:
 211  813F 3E 00        DoubleBufferCheck:      ld      a,00
 212  8141                                      IFDEF DOUBLEBUFFER
 213  8141 FE 00                                    cp      0
 214  8143 CA 52 81                                 jp      z,TestTransition
 215  8146                                          MMUSelectLayer2
 215  8146 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 216  814A 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 217  814D FE 00                                    cp     0
 218  814F C4 DD E0                                 call   nz,l2_flip_buffers
 219  8152                                      ENDIF
 220  8152 3A AB 84     TestTransition:        ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 221  8155 FE FF                                cp      $FF
 222  8157 CA 83 80                             jp      z,MainLoop
 223  815A 57           BruteForceChange:      ld      d,a
 224  815B 1E 10                                ld      e,ScreenMapRow
 225  815D ED 30                                mul
 226  815F DD 21 CB 83                          ld      ix,ScreenKeyMap
 227  8163 DD 19                                add     ix,de                               ; Force screen transition
 228  8165 CD 3A 85                             call    SetScreenAIX
 229  8168 C3 83 80                             jp MainLoop
 230  816B
 231  816B              ;..................................................................................................................................
 232  816B              ;..Update Universe Objects.........................................................................................................
 233  816B AF           UpdateUniverseObjects:  xor     a
 234  816C 32 B3 92                             ld      (SelectedUniverseSlot),a
 235  816F 57           .UpdateUniverseLoop:     ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 236  8170              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 237  8170 CD E3 95                             call    GetTypeAtSlotA
 238  8173 FE FF                                cp      $FF
 239  8175 28 2F                                jr      z,.ProcessedUniverseSlot
 240  8177 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 241  8178                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 241  8178 C6 46       >                     add    a,BankUNIVDATA0
 241  817A ED 92 56    >                     nextreg UniverseMMU,       a
 242  817D CD 3D DB                             call    ApplyMyRollAndPitch
 243  8180 CD 17 DC                             call    ApplyShipRollAndPitch
 244  8183              ;.. If its a space station then see if we are ready to dock........................................................................
 245  8183 3A 18 C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 246  8186                                      JumpIfANENusng  ShipTypeStation, .NotDockingCheck       ; if its not a station so we don't test docking
 246  8186 FE 02       >                cp     ShipTypeStation
 246  8188 C2 9C 81    >                jp      nz,.NotDockingCheck
 247  818B              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .NotDockingCheck    ; if it is angry then we dont test docking
 247  818B 3A 19 C3    >                        ld      a,(ShipNewBitsAddr)
 247  818E CB 67       >                        bit 	4,a
 247  8190 C2 9C 81    >                        jp      nz,.NotDockingCheck
 248  8193 CD C2 81                             call    DockingCheck                                    ; So it is a candiate to test docking. Now we do the position and angle checks
 249  8196                                      ReturnIfMemEquN ScreenTransitionForced, $FF            ; if we docked then a transition would have been forced
 249  8196 3A AB 84    >                    ld   a,(ScreenTransitionForced)
 249  8199 FE FF       >                    cp     $FF
 249  819B C8          >                    ret    z
 250  819C              .NotDockingCheck:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 250  819C 3A B3 92    >                        ld   a,(SelectedUniverseSlot)
 250  819F 21 B2 92    >                        ld   hl,CurrentUniverseAI
 250  81A2 BE          >                        cp   (hl)
 250  81A3 CC 02 83    >                        call    z,UpdateShip
 251  81A6 3A B3 92     .ProcessedUniverseSlot: ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 252  81A9 3C                                   inc     a                                               ; .
 253  81AA                                      JumpIfAGTENusng   UniverseListSize, .UpdateAICounter    ; .
 253  81AA FE 0C       >                        cp     UniverseListSize
 253  81AC D2 B5 81    >                        jp		nc,.UpdateAICounter
 254  81AF 32 B3 92                             ld      (SelectedUniverseSlot),a
 255  81B2 C3 6F 81                             jp      .UpdateUniverseLoop
 256  81B5 3A B2 92     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 257  81B8 3C                                   inc     a
 258  81B9 FE 0C                                cp      12
 259  81BB 38 01                                jr      c,.IterateAI
 260  81BD AF                                   xor     a
 261  81BE 32 B2 92     .IterateAI:             ld      (CurrentUniverseAI),a
 262  81C1 C9                                   ret
 263  81C2              ;..................................................................................................................................
 264  81C2              ;.. Quickly eliminate space stations too far away..................................................................................
 265  81C2 ED 4B 0C C0  DockingCheck:           ld      bc,(UBnKxlo)
 266  81C6 2A 0F C0                             ld      hl,(UBnKylo)
 267  81C9 ED 5B 12 C0                          ld      de,(UBnKzlo)
 268  81CD 78                                   ld      a,b
 269  81CE B4                                   or      h
 270  81CF B2                                   or      d
 271  81D0 C0                                   ret     nz
 272  81D1 79           .CheckIfInRangeLo:      ld      a,c
 273  81D2 B5                                   or      l
 274  81D3 B3                                   or      e
 275  81D4 E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 276  81D6 C0                                   ret     nz
 277  81D7              ;.. Now check to see if we are comming in at a viable angle........................................................................
 278  81D7 3A 26 C0     .CheckDockingAngle:     ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 279  81DA                                      ReturnIfALTNusng 214                       ; this is the magic angle to be within 26 degrees +/-
 279  81DA FE D6       >                    cp    214
 279  81DC D8          >                    ret	 c
 280  81DD CD 20 83                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 281  81E0 CB 7F                                bit     7,a                                 ; if its negative
 282  81E2 C0                                   ret     nz                                  ; we are flying away from it
 283  81E3                                      ReturnIfALTNusng 89                         ; if the axis <89 the we are not in the 22 degree angle
 283  81E3 FE 59       >                    cp    89
 283  81E5 D8          >                    ret	 c
 284  81E6 3A 1C C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 285  81E9 E6 7F                                and     SignMask8Bit
 286  81EB                                      ReturnIfALTNusng 80                         ; note 80 decimal for 36.6 degrees
 286  81EB FE 50       >                    cp    80
 286  81ED D8          >                    ret	 c
 287  81EE              ;.. Its passed all validation and we are docking...................................................................................
 288  81EE              .AreDocking:            MMUSelectLayer1
 288  81EE ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 289  81F2 3E 06                                ld        a,$6
 290  81F4 CD 92 E0                             call      l1_set_border
 291  81F7 3E 0D        .EnterDockingBay:       ld      a,ScreenDocking
 292  81F9 32 AB 84                             ld      (ScreenTransitionForced),a
 293  81FC C9                                   ret
 294  81FD              ;..................................................................................................................................
 295  81FD AF           DrawForwardShips:       xor     a
 296  81FE F5           DrawShipLoop:           push    af
 297  81FF CD E3 95                             call    GetTypeAtSlotA
 298  8202 FE FF                                cp      $FF
 299  8204 28 22                                jr      z,ProcessedDrawShip
 300  8206              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 301  8206 F1           SelectShipToDraw:       pop     af
 302  8207 F5                                   push    af
 303  8208                                      MMUSelectUniverseA
 303  8208 C6 46       >                     add    a,BankUNIVDATA0
 303  820A ED 92 56    >                     nextreg UniverseMMU,       a
 304  820D                                      ;break
 305  820D CD 26 D5                             call    CheckDistance
 306  8210 38 13                                jr      c,UpdateRadar               ; it can't be drawn if carry is set by may appear on radar
 307  8212 CD AF DC                             call    ProcessNodes
 308  8215              DrawShip:               ;call   SetAllFacesVisible
 309  8215 CD 66 D5                             call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 310  8218 CD 81 DD                             call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 311  821B F1                                   pop     af
 312  821C F5                                   push    af
 313  821D                                      MMUSelectUniverseA
 313  821D C6 46       >                     add    a,BankUNIVDATA0
 313  821F ED 92 56    >                     nextreg UniverseMMU,       a
 314  8222 CD 10 8E                             call   DrawLines                   ; Need to plot all lines
 315  8225 CD B7 87     UpdateRadar:            call    UpdateScannerShip
 316  8228 F1           ProcessedDrawShip:      pop     af
 317  8229 3C                                   inc     a
 318  822A                                      JumpIfALTNusng   UniverseListSize, DrawShipLoop
 318  822A FE 0C       >                        cp      UniverseListSize
 318  822C DA FE 81    >                        jp		c, DrawShipLoop
 319  822F C9                                   ret
 320  8230              ;..................................................................................................................................
 321  8230
 322  8230
 323  8230 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 324  8232 CD 11 90                             call    is_key_pressed
 325  8235 C0                                   ret     nz
 326  8236 3A 01 83                             ld      a,(currentDemoShip)
 327  8239 3C                                   inc     a
 328  823A FE 2C                                cp      44
 329  823C 20 01                                jr      nz,.TestOK
 330  823E AF                                   xor     a
 331  823F 32 01 83     .TestOK:                ld      (currentDemoShip),a
 332  8242 CD 98 95                             call    ClearUnivSlotList
 333  8245 3A 01 83                             ld      a,(currentDemoShip)
 334  8248 47                                   ld      b,a
 335  8249 AF                                   xor     a
 336  824A CD AC 95                             call    SetSlotAToTypeB
 337  824D                                      MMUSelectUniverseN 0
 337  824D ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 338  8251 CD 23 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 339  8254 3A 01 83                             ld      a,(currentDemoShip)
 340  8257                                      MMUSelectShipBank1
 340  8257 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 341  825B CD 0F E0                             call    GetShipBankId
 342  825E                                      MMUSelectShipBankA
 342  825E ED 92 57    >					 nextreg ShipModelMMU,	    a
 343  8261 78                                   ld      a,b
 344  8262 CD 6A E0                             call    CopyShipToUniverse
 345  8265 CD E5 85                             call    SetInitialShipPosition
 346  8268 CD 87 83                             call    DEBUGSETNODES
 347  826B C9                                   ret
 348  826C
 349  826C              ;----------------------------------------------------------------------------------------------------------------------------------
 350  826C              NeedAMessageQueue:
 351  826C
 352  826C 3A DD 91     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
 353  826F 11 C5 82                             ld		de,Hyp_counter
 354  8272 0E 9C                                ld	c, -100
 355  8274 CD 7E 82                             call	.Num1
 356  8277 0E F6                                ld	c,-10
 357  8279 CD 7E 82                             call	.Num1
 358  827C 0E FF                                ld	c,-1
 359  827E 06 2F        .Num1:	                ld	b,'0'-1
 360  8280 04           .Num2:	                inc		b
 361  8281 81                                   add		a,c
 362  8282 38 FC                                jr		c,.Num2
 363  8284 91                                   sub 	c
 364  8285 C5                                   push	bc
 365  8286 F5                                   push	af
 366  8287 79                                   ld		a,c
 367  8288 FE FF                                cp		-1
 368  828A 78                                   ld		a,b
 369  828B 12                                   ld		(de),a
 370  828C 13                                   inc		de
 371  828D F1                                   pop		af
 372  828E C1                                   pop		bc
 373  828F C9                                   ret
 374  8290
 375  8290              ;----------------------------------------------------------------------------------------------------------------------------------
 376  8290 48 79 70 65  Hyp_message             DB "Hyperspace ",0
 376  8294 72 73 70 61
 376  8298 63 65 20 00
 377  829C 00 00 00...  Hyp_to                  DS 20
 378  82B0 20           Hyp_space1              DB " "
 379  82B1 30 2E 30     Hyp_dist_amount         DB "0.0"
 380  82B4 2E           Hyp_decimal             DB "."
 381  82B5 30           Hyp_fraction            DB "0"
 382  82B6 20 4C 59 00  Hyp_dis_ly              DB " LY",0
 383  82BA 43 68 61 72  Hyp_charging            DB "Charging : "
 383  82BE 67 69 6E 67
 383  82C2 20 3A 20
 384  82C5 30 30 30 00  Hyp_counter             DB "000",0
 385  82C9
 386  82C9
 387  82C9 21 C5 82     DisplayHyperCountDown:  ld      hl,Hyp_counter           ; clear counter digits
 388  82CC 3E 00                                ld      a,0                      ; clear counter digits
 389  82CE 77                                   ld      (hl),a                   ; clear counter digits
 390  82CF 23                                   inc     hl                       ; clear counter digits
 391  82D0 77                                   ld      (hl),a                   ; clear counter digits
 392  82D1 23                                   inc     hl                       ; clear counter digits
 393  82D2 77                                   ld      (hl),a                   ; clear counter digits
 394  82D3 CD 6C 82                             call    UpdateCountdownNumber
 395  82D6 C9                                   ret
 396  82D7
 397  82D7              ;DisplayTargetAndRange
 398  82D7              ;DisplayCountDownNumber
 399  82D7              ;----------------------------------------------------------------------------------------------------------------------------------
 400  82D7 3A 37 92     TestPauseMode:          ld      a,(GamePaused)
 401  82DA FE 00                                cp      0
 402  82DC 20 12                                jr      nz,.TestForResume
 403  82DE 3A 2E 92     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 404  82E1                                      ReturnIfAGTENusng       ScreenFront
 404  82E1 FE 09       >                    cp    ScreenFront
 404  82E3 D0          >                    ret	 nc
 405  82E4 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 406  82E6 CD 11 90                             call    is_key_pressed
 407  82E9 C0                                   ret     nz
 408  82EA 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 409  82EC 32 37 92                             ld      (GamePaused),a
 410  82EF C9                                   ret
 411  82F0 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 412  82F2 CD 11 90                             call    is_key_pressed
 413  82F5 C0                                   ret     nz
 414  82F6 AF           .ResumePressed:         xor     a
 415  82F7 32 37 92                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 416  82FA C9                                   ret
 417  82FB
 418  82FB 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 419  82FD CD 11 90                             call    is_key_pressed
 420  8300 C9                                   ret
 421  8301 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 422  8302
 423  8302
 424  8302              ;----------------------------------------------------------------------------------------------------------------------------------
 425  8302              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 426  8302 21 86 83                             ld      hl,TidyCounter
 427  8305 35                                   dec     (hl)
 428  8306 C0                                   ret     nz
 429  8307 3E 10                                ld      a,16
 430  8309 32 86 83                             ld      (TidyCounter),a
 431  830C                                      ; call    TIDY TIDY IS BROKEN
 432  830C                                     ; add AI in here too
 433  830C C9                                   ret
 434  830D
 435  830D F5           InitialiseShipAUnivB:   push    af
 436  830E 78                                   ld      a,b
 437  830F                                      MMUSelectUniverseA                          ; load up register into universe bank
 437  830F C6 46       >                     add    a,BankUNIVDATA0
 437  8311 ED 92 56    >                     nextreg UniverseMMU,       a
 438  8314 CD 23 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 439  8317                                      MMUSelectShipBank1
 439  8317 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 440  831B F1                                   pop     af
 441  831C CD 6A E0                             call    CopyShipToUniverse
 442  831F C9                                   ret
 443  8320
 444  8320 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 445  8323 11 44 92                             ld      de,varVector9ByteWork
 446  8326 ED A0                                ldi
 447  8328 ED A0                                ldi
 448  832A ED A0                                ldi
 449  832C ED A0                                ldi
 450  832E ED A0                                ldi
 451  8330 ED A0                                ldi
 452  8332 ED A0                                ldi
 453  8334 ED A0                                ldi
 454  8336 ED A0                                ldi
 455  8338 2A 44 92     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 456  833B ED 5B 47 92                          ld      de, (varVector9ByteWork+3); Y
 457  833F ED 4B 4A 92                          ld      bc, (varVector9ByteWork+6); Z
 458  8343 7D                                   ld      a,l
 459  8344 B3                                   or      e
 460  8345 B1                                   or      c
 461  8346 F6 01                                or      1
 462  8348 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 463  834A 7C                                   ld      a,h
 464  834B B2                                   or      d
 465  834C B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 466  834D C5           .MulBy2Loop:            push    bc
 467  834E DD 45                                ld      b,ixl
 468  8350 CB 20                                sla     b                       ; Shift ixl left
 469  8352 DD 68                                ld      ixl,b
 470  8354 C1                                   pop     bc
 471  8355 CB 17                                rl      a                       ; roll into a
 472  8357 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 473  8359                                      ShiftHLLeft1                    ; Shift Left X
 473  8359 CB 25       >			   sla l
 473  835B CB 14       >			   rl  h
 474  835D                                      ShiftDELeft1                    ; Shift Left Y
 474  835D CB 23       >			   sla e
 474  835F CB 12       >			   rl  d
 475  8361                                      ShiftBCLeft1                    ; Shift Left Z
 475  8361 CB 21       >			   sla c
 475  8363 CB 10       >			   rl  b
 476  8365 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 477  8367 3A 46 92     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 478  836A CB 3C                                srl     h
 479  836C B4                                   or      h
 480  836D 32 78 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 481  8370 3A 49 92                             ld      a,(varVector9ByteWork+5); y sign
 482  8373 CB 3A                                srl     d
 483  8375 B2                                   or      d
 484  8376 32 79 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 485  8379 3A 4C 92                             ld      a,(varVector9ByteWork+8); y sign
 486  837C CB 38                                srl     b
 487  837E B0                                   or      b
 488  837F 32 7A C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 489  8382 CD 89 A3                             call    normaliseXX1596fast
 490  8385 C9                                   ret                             ; will return with a holding Vector Z
 491  8386
 492  8386 00           TidyCounter             DB  0
 493  8387
 494  8387                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 8387
   2+ 8387
   3+ 8387 21 AA 83     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 838A 11 0C C0                             ld      de,UBnKxlo
   5+ 838D 01 09 00                             ld      bc,9
   6+ 8390 ED B0                                ldir
   7+ 8392 21 B3 83                             ld      hl,DEBUGROTMATDATA
   8+ 8395 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 8398 01 12 00                             ld      bc,6*3
  10+ 839B ED B0                                ldir
  11+ 839D C9                                   ret
  12+ 839E
  13+ 839E 21 AA 83     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 83A1 11 0C C0                             ld      de,UBnKxlo
  15+ 83A4 01 06 00                             ld      bc,9 - 3
  16+ 83A7 ED B0                                ldir
  17+ 83A9 C9                                   ret
  18+ 83AA
  19+ 83AA              ; culltest
  20+ 83AA              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 83AA 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 83AE 00 00 5C 07
  21+ 83B2 00
  22+ 83B3 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 83B7 00 00
  23+ 83B9 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 83BD 00 00
  24+ 83BF 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 83C3 00 E0
  25+ 83C5
  26+ 83C5              ; FAILS due to sharp angle, OK now
  27+ 83C5              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 83C5              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 83C5              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 83C5              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 83C5              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 83C5              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 83C5              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 83C5              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 83C5              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 83C5              ; Looks OK
  37+ 83C5              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 83C5              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 83C5              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 83C5              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 83C5              ;
  42+ 83C5              ; Massive horizontal line
  43+ 83C5              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 83C5              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 83C5              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 83C5              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 83C5              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 83C5              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 83C5              ; Line lost in clipping
  50+ 83C5              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 83C5              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 83C5              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 83C5              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 83C5              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 83C5              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 83C5              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 83C5              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 83C5              ;
  59+ 83C5              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 83C5              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 83C5              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 83C5              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 83C5              ; top left off right issue
  64+ 83C5              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 83C5              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 83C5              ; test middle of screen
  69+ 83C5              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 83C5              ;
  71+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 83C5              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 83C5              ; test middle of screen futher away
  75+ 83C5              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 83C5              ;
  77+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 83C5              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 83C5
  81+ 83C5              ; Test left center clip still warping
  82+ 83C5              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 83C5              ;
  84+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 83C5              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 83C5              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 83C5              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 83C5              ;
  90+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 83C5              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 83C5              ; Test top center clip test 1 - good test many ships fail
  94+ 83C5              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 83C5              ;
  96+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 83C5              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 83C5              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 83C5              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 83C5              ;
 102+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 83C5              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 83C5              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 83C5              ; looks better now may have some clipping issues maybe ship data
 107+ 83C5              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 83C5              ;
 109+ 83C5              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 83C5              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 83C5 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 83C9 B0 55
 112+ 83CB              ; Test left top center clip
 113+ 83CB
 114+ 83CB              ; Test right top center clip
 115+ 83CB              ; Test left bottom center clip
 116+ 83CB              ; Test right bottom center clip
 117+ 83CB
 118+ 83CB              ; Tests with no clip
 119+ 83CB              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 83CB              ;
 121+ 83CB              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 83CB              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 83CB              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 83CB              ;
 125+ 83CB              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 83CB              ;
 127+ 83CB              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 83CB              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 83CB
# file closed: ./debugMatrices.asm
 495  83CB
 496  83CB
 497  83CB              ;TODO Optimisation
 498  83CB              ; Need this table to handle differnet events
 499  83CB              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 500  83CB              ; cursor key, joystick press
 501  83CB              ; cursor key, joystick press
 502  83CB              ; non cursor keys presses
 503  83CB              ;
 504  83CB              ; First byte is now docked flag
 505  83CB              ;
 506  83CB              ; Padded to 8 bytes to allow a * 8 for addressing
 507  83CB              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 508  83CB              ; Byte 1   - Screen Id
 509  83CB              ; Byte 2,3 - address of keypress table
 510  83CB              ; Byte 4   - Bank with Display code
 511  83CB              ; Byte 5,6 - Function for display
 512  83CB              ; Byte 7,8 - Main loop update routine
 513  83CB              ; Byte 9   - Draw stars Y/N
 514  83CB              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 515  83CB              ; byte 11  - Double Buffering 0 = no, 1 = yes
 516  83CB              ; byte 12,13  - cursor key input routine
 517  83CB              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 518  83CB              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 519  83CB              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 520  83CB 00 00 3A 8F  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 520  83CF 32 FC C3 00
 520  83D3 00 00 00 00
 520  83D7 5A C4 01 00
 521  83DB 00 01 38 8F  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 521  83DF 33 43 C1 62
 521  83E3 C2 00 00 00
 521  83E7 05 C3 01 00
 522  83EB 01 02 3C 8F                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 522  83EF 36 43 C3 FA
 522  83F3 C3 00 00 00
 522  83F7 00 00 01 00
 523  83FB 02 03 3C 8F                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 523  83FF 36 43 C3 00
 523  8403 00 00 00 00
 523  8407 00 00 01 00
 524  840B 00 04 3E 8F  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 524  840F 3F 1E CF 62
 524  8413 CF 00 00 00
 524  8417 00 00 01 00
 525  841B 00 05 40 8F                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 525  841F 34 F5 C1 00
 525  8423 00 00 00 00
 525  8427 00 00 01 00
 526  842B 00 06 4E 8F                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 526  842F 35 F0 C2 00
 526  8433 00 00 00 00
 526  8437 00 00 01 00
 527  843B 01 07 36 8F                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 527  843F 40 EA D3 86
 527  8443 D4 00 00 00
 527  8447 00 00 01 00
 528  844B 01 08 30 8F                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 528  844F 41 79 C1 63
 528  8453 C2 00 01 01
 528  8457 00 00 01 00
 529  845B 02 09 06 8F  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 529  845F 3E 6A C0 00
 529  8463 00 01 00 01
 529  8467 A8 C0 00 00
 530  846B 02 0A 06 8F                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 530  846F 3E 6A C0 00
 530  8473 00 01 00 01
 530  8477 A8 C0 00 00
 531  847B 02 0B 06 8F                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 531  847F 3E 6A C0 00
 531  8483 00 01 00 01
 531  8487 A8 C0 00 00
 532  848B 02 0C 06 8F                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 532  848F 3E 6A C0 00
 532  8493 00 01 00 01
 532  8497 A8 C0 00 00
 533  849B 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 533  849F 41 F5 C1 98
 533  84A3 C2 00 01 01
 533  84A7 00 00 01 00
 534  84AB
 535  84AB              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 536  84AB              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 537  84AB              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 538  84AB              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 539  84AB              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 540  84AB              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 541  84AB FF           ScreenTransitionForced  DB $FF
 542  84AC                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 84AC              ; Use bank 0 as source and bank 7 as write target
   2+ 84AC              ResetUniv:
   3+ 84AC                  MODULE ResetUniv
   4+ 84AC              ; Move bank 70 into page 0
   5+ 84AC                  MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   5+ 84AC ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   6+ 84B0 3E 47        	ld		a,BankUNIVDATA1 				 ; we can read bank 0 as if it was rom
   7+ 84B2 06 0C        	ld		b,12
   8+ 84B4              ResetCopyLoop:
   9+ 84B4 C5           	push	bc
  10+ 84B5              	MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
  10+ 84B5 C6 46       >                     add    a,BankUNIVDATA0
  10+ 84B7 ED 92 56    >                     nextreg UniverseMMU,       a
  11+ 84BA F5           	push	af
  12+ 84BB 21 00 C0     	ld		hl,UniverseBankAddr
  13+ 84BE 11 00 00     	ld		de,dmaCopySrcAddr
  14+ 84C1 01 3A 1E     	ld		bc,UnivBankSize
  15+ 84C4 CD B1 8E     	call	memcopy_dma
  16+ 84C7 F1           	pop		af
  17+ 84C8 C1           	pop		bc
  18+ 84C9 3C           	inc		a
  19+ 84CA 57               ld      d,a
  20+ 84CB C6 41            add     "A"
  21+ 84CD 32 0B C0         ld      (StartOfUnivN),a
  22+ 84D0 7A               ld      a,d
  23+ 84D1 10 E1        	djnz	ResetCopyLoop
  24+ 84D3 C9           	ret
  25+ 84D4                  ENDMODULE
  26+ 84D4
  27+ 84D4              ; Use bank 0 as source and bank 7 as write target
  28+ 84D4              ResetGalaxy:
  29+ 84D4                  MODULE ResetGalaxy
  30+ 84D4              ; Move bank 70 into page 0
  31+ 84D4                  MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0
  31+ 84D4 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  32+ 84D8 3E 5C        	ld		a,BankGalaxyData1 			   	 ; we can read bank 0 as if it was rom
  33+ 84DA 06 08        	ld		b,8
  34+ 84DC 0E 01            ld      c,1
  35+ 84DE              ResetCopyLoop:
  36+ 84DE F5           	push	af
  37+ 84DF C5           	push	bc
  38+ 84E0              	MMUSelectGalaxyA    	             ; copy from bank 0 to 71 to 12
  38+ 84E0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  39+ 84E3 21 00 E0     	ld		hl,GalaxyDataAddr
  40+ 84E6 11 00 00     	ld		de,dmaCopySrcAddr
  41+ 84E9 01 CD 1C     	ld		bc,GalaxyBankSize
  42+ 84EC CD B1 8E     	call	memcopy_dma
  43+ 84EF C1           	pop		bc
  44+ 84F0 21 0F E0         ld      hl, galaxy_pg_cnt
  45+ 84F3 79               ld      a,c
  46+ 84F4 C6 30            add     a, $30
  47+ 84F6 77               ld      (hl),a
  48+ 84F7 0C               inc     c
  49+ 84F8 F1               pop     af
  50+ 84F9 3C           	inc		a
  51+ 84FA 10 E2        	djnz	ResetCopyLoop
  52+ 84FC C9           	ret
  53+ 84FD                  ENDMODULE
# file closed: ./GameEngine/resetUniverse.asm
 543  84FD
 544  84FD
 545  84FD              ;----------------------------------------------------------------------------------------------------------------------------------
 546  84FD CD 98 95     LaunchedFromStation:    call    ClearUnivSlotList
 547  8500 AF                                   xor     a
 548  8501 CD A4 95                             call    SetSlotAToSpaceStation              ; set slot 0 to space station
 549  8504                                      MMUSelectUniverseA                          ; Prep Target universe
 549  8504 C6 46       >                     add    a,BankUNIVDATA0
 549  8506 ED 92 56    >                     nextreg UniverseMMU,       a
 550  8509                                      MMUSelectShipBank1                          ; Bank in the ship model code
 550  8509 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 551  850D 3E 0D                                ld      a,CoriloisStation
 552  850F CD 0F E0                             call    GetShipBankId
 553  8512                                      MMUSelectShipBankA                          ; Select the correct bank found
 553  8512 ED 92 57    >					 nextreg ShipModelMMU,	    a
 554  8515 78                                   ld      a,b                                 ; Select the correct ship
 555  8516 CD 6A E0                             call    CopyShipToUniverse
 556  8519 CD 2E CA     .BuiltStation:          call    ResetStationLaunch
 557  851C AF           .NowInFlight:           xor     a
 558  851D 32 36 92                             ld      (DockedFlag),a
 559  8520 3E 09                                ld      a,ScreenFront
 560  8522 32 AB 84                             ld      (ScreenTransitionForced),a
 561  8525 C9                                   ret
 562  8526
 563  8526 3A 0C 84     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 564  8529 DD 21 0B 84                          ld      ix,ScreenCmdr
 565  852D C3 3A 85                             jp      SetScreenAIX
 566  8530
 567  8530 3A 5C 84     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 568  8533 DD 21 5B 84                          ld      ix,ScreenKeyFront
 569  8537 C3 3A 85                             jp      SetScreenAIX
 570  853A              ; false ret here as we get it free from jp
 571  853A
 572  853A              ;----------------------------------------------------------------------------------------------------------------------------------
 573  853A 32 2E 92     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 574  853D AF                                   xor     a
 575  853E 3D                                   dec     a                               ; set A to FF
 576  853F 32 AB 84                             ld      (ScreenTransitionForced),a      ; In case it was called by a brute force change in an update loop
 577  8542 32 2D 92                             ld      (ScreenChanged),a               ; Set screen changed to FF
 578  8545 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 579  8548 32 22 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 580  854B 32 AB 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 581  854E                                      MMUSelectScreenA
 581  854E ED 92 56    >                     nextreg ScreenBankMMU,		a
 582  8551 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 583  8554 32 88 85                             ld      (ScreenUpdateAddr+1),a
 584  8557 DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 585  855A 32 89 85                             ld      (ScreenUpdateAddr+2),a
 586  855D DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 587  8560 32 27 81                             ld      (ScreenLoopJP+1),a
 588  8563 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 589  8566 32 28 81                             ld      (ScreenLoopJP+2),a
 590  8569 DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 591  856C 32 C6 80                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 592  856F DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 593  8572 32 8D 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 594  8575 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 595  8578 32 40 81                             ld      (DoubleBufferCheck+1),a
 596  857B DD 7E 0C                             ld      a,(ix+12)
 597  857E 32 B0 80                             ld      (CallCursorRoutine+1),a
 598  8581 DD 7E 0D                             ld      a,(ix+13)
 599  8584 32 B1 80                             ld      (CallCursorRoutine+2),a
 600  8587
 601  8587 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 602  858A              ;----------------------------------------------------------------------------------------------------------------------------------
 603  858A 3A 2E 92     ViewKeyTest:            ld      a,(ScreenIndex)
 604  858D 4F                                   ld      c,a
 605  858E 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 606  8590 DD 21 CB 83                          ld      ix,ScreenKeyMap
 607  8594 DD 7E 0E     .HyperspaceCountdown:   ld      a,(ix+14)
 608  8597 FE 01                                cp      1
 609  8599 28 42                                jr      z,NotReadNextKey               ; can not change to this vie win hyperspace countdown
 610  859B DD 7E 00     ViewScanLoop:           ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 611  859E              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 612  859E FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 613  85A0 28 3B                                jr      z,NotReadNextKey                ;
 614  85A2 FE 00                                cp      0                               ; if itr a always read skip docking check
 615  85A4 28 14                                jr      z,.NoDocCheck
 616  85A6 57           .DocCheck:              ld      d,a
 617  85A7 3A 36 92                             ld      a,(DockedFlag)
 618  85AA FE 00                                cp      0                               ; if we are docked
 619  85AC 28 07                                jr      z,.NotDockedCheck
 620  85AE 7A           .DockedCheck:           ld      a,d
 621  85AF FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 622  85B1 20 2A                                jr      nz,NotReadNextKey
 623  85B3 18 05                                jr      .NoDocCheck
 624  85B5 7A           .NotDockedCheck:        ld      a,d
 625  85B6 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 626  85B8 20 23                                jr      nz,NotReadNextKey
 627  85BA DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 628  85BD B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 629  85BE 5F                                   ld      e,a
 630  85BF 28 1C                                jr      z,NotReadNextKey
 631  85C1 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 632  85C4 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 633  85C6 28 15                                jr      z,NotReadNextKey
 634  85C8 32 D2 85                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 635  85CB DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 636  85CE 32 D3 85                             ld      (ReadKeyAddr+2),a
 637  85D1 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 638  85D4 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 639  85D5                                      IfAIsZeroGoto NotReadNextKey
 639  85D5 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 639  85D6 CA DD 85    >				jp	z, NotReadNextKey
 640  85D9 7B           .ValidScreenChange:     ld      a,e
 641  85DA C3 3A 85                             jp      SetScreenAIX
 642  85DD              ;--- CODE WILL NOT FALL TO HERE ---
 643  85DD 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 644  85E0 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 645  85E2 10 B7                                djnz    ViewScanLoop
 646  85E4 C9                                   ret
 647  85E5
 648  85E5 21 00 00     SetInitialShipPosition: ld      hl,$0000
 649  85E8 22 0C C0                             ld      (UBnKxlo),hl
 650  85EB 21 00 00                             ld      hl,$0000
 651  85EE 22 0F C0                             ld      (UBnKylo),hl
 652  85F1 21 B4 03                             ld      hl,$03B4
 653  85F4 22 12 C0                             ld      (UBnKzlo),hl
 654  85F7 AF                                   xor     a
 655  85F8 32 0E C0                             ld      (UBnKxsgn),a
 656  85FB 32 11 C0                             ld      (UBnKysgn),a
 657  85FE 32 14 C0                             ld      (UBnKzsgn),a
 658  8601              ;    call    Reset TODO
 659  8601 CD E0 CC                             call	InitialiseOrientation            ;#00;
 660  8604 3E 01                                ld      a,1
 661  8606 32 21 92                             ld      (DELTA),a
 662  8609 21 04 00                             ld      hl,4
 663  860C 22 22 92                             ld      (DELTA4),hl
 664  860F C9                                   ret
 665  8610
 666  8610              ; bc = start position, d = length, e = colour
 667  8610 1E 10        Draw3LineBar:           ld      e,16
 668  8612 C5 D5                                push    bc,,de
 669  8614                                      MMUSelectLayer2
 669  8614 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 670  8618 CD 62 E2                             call    l2_draw_horz_line
 671  861B D1 C1                                pop     bc,,de
 672  861D 05                                   dec     b
 673  861E C5 D5                                push    bc,,de
 674  8620 1E 14                                ld      e,20
 675  8622                                      MMUSelectLayer2
 675  8622 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 676  8626 CD 62 E2                             call    l2_draw_horz_line
 677  8629 D1 C1                                pop     bc,,de
 678  862B 05                                   dec     b
 679  862C                                      MMUSelectLayer2
 679  862C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 680  8630 CD 62 E2                             call    l2_draw_horz_line
 681  8633 C9                                   ret
 682  8634
 683  8634 1E 7C        DrawColourCodedBar:     ld      e,124
 684  8636 FE 28                                cp      40
 685  8638 30 18                                jr      nc,DrawColourEBar
 686  863A 1E 54                                ld      e,84
 687  863C FE 1E                                cp      30
 688  863E 30 12                                jr      nc,DrawColourEBar
 689  8640 1E D8                                ld      e,216
 690  8642 FE 14                                cp      20
 691  8644 1E EC                                ld      e,236
 692  8646 FE 0A                                cp      10
 693  8648 30 08                                jr      nc,DrawColourEBar
 694  864A 1E E1                                ld      e,225
 695  864C FE 05                                cp      5
 696  864E 30 02                                jr      nc,DrawColourEBar
 697  8650 1E E0                                ld      e,224
 698  8652 C5 D5        DrawColourEBar:         push    bc,,de
 699  8654                                      MMUSelectLayer2
 699  8654 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 700  8658 CD 62 E2                             call    l2_draw_horz_line
 701  865B D1 C1                                pop     bc,,de
 702  865D 05                                   dec     b
 703  865E C5 D5                                push    bc,,de
 704  8660                                      MMUSelectLayer2
 704  8660 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 705  8664 CD 62 E2                             call    l2_draw_horz_line
 706  8667 D1 C1                                pop     bc,,de
 707  8669 05                                   dec     b
 708  866A                                      MMUSelectLayer2
 708  866A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 709  866E CD 62 E2                             call    l2_draw_horz_line
 710  8671 C9                                   ret
 711  8672
 712  8672                                      ; no ret needed as jp handles it
 713  8672
 714  8672
 715  8672
 716  8672
 717  8672 3A 21 92     UpdateConsole:          ld      a,(DELTA)
 718  8675 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 719  8677 28 0C                                jr      z,.UpdateRoll
 720  8679 01 D1 84                             ld      bc,SpeedoStart
 721  867C 21 4B 95                             ld      hl,SpeedoMapping
 722  867F ED 31                                add     hl,a
 723  8681 56                                   ld      d,(hl)
 724  8682 CD 10 86                             call    Draw3LineBar
 725  8685 3A E2 91     .UpdateRoll:            ld      a,(ALP1)
 726  8688 FE 00                                cp      0
 727  868A CA BE 86                             jp      z,.UpdatePitch
 728  868D 21 E0 8C                             ld      hl,RollMiddle
 729  8690 3A E3 91                             ld      a,(ALP2)
 730  8693 FE 00                                cp      0
 731  8695 CA B0 86                             jp     z,.PosRoll
 732  8698 16 00        .NegRoll:               ld      d,0
 733  869A 3A E2 91                             ld      a,(ALP1)
 734  869D CB 27                                sla     a
 735  869F 5F                                   ld      e,a
 736  86A0 B7                                   or      a
 737  86A1 ED 52                                sbc     hl,de
 738  86A3 44 4D                                ld      bc,hl
 739  86A5 3E E1                                ld      a,DialMiddleXPos
 740  86A7 91                                   sub     c
 741  86A8 57                                   ld      d,a
 742  86A9 1E FF                                ld      e,$FF
 743  86AB CD 10 86                             call    Draw3LineBar
 744  86AE 18 0E                                jr      .UpdatePitch
 745  86B0 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 746  86B3 3A E2 91                             ld      a,(ALP1)
 747  86B6 CB 27                                sla     a
 748  86B8 57                                   ld      d,a
 749  86B9 1E FF                                ld      e,$FF
 750  86BB CD 10 86                             call    Draw3LineBar
 751  86BE 3A D5 91     .UpdatePitch:           ld      a,(BET1)
 752  86C1 FE 00                                cp      0
 753  86C3 CA F8 86                             jp      z,.Fuel
 754  86C6 21 E0 94                             ld      hl,PitchMiddle
 755  86C9 3A D6 91                             ld      a,(BET2)
 756  86CC FE 00                                cp      0
 757  86CE CA EA 86                             jp      z,.PosPitch
 758  86D1 16 00        .NegPitch:              ld      d,0
 759  86D3 3A D5 91                             ld      a,(BET1)
 760  86D6 CB 27                                sla     a
 761  86D8 5F                                   ld      e,a
 762  86D9 B7                                   or      a
 763  86DA ED 52                                sbc     hl,de
 764  86DC 44 4D                                ld      bc,hl
 765  86DE 3E E1                                ld      a,DialMiddleXPos
 766  86E0 91                                   sub     c
 767  86E1 57                                   ld      d,a
 768  86E2 1E FF                                ld      e,$FF
 769  86E4 CD 10 86                             call    Draw3LineBar
 770  86E7 C3 F8 86                             jp      .Fuel
 771  86EA 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 772  86ED 3A D5 91                             ld      a,(BET1)
 773  86F0 CB 27                                sla     a
 774  86F2 57                                   ld      d,a
 775  86F3 1E FF                                ld      e,$FF
 776  86F5 CD 10 86                             call    Draw3LineBar
 777  86F8 3A 11 96     .Fuel:                  ld      a,(Fuel)
 778  86FB CB 3F                                srl     a               ; divide by 4 to get range on screen
 779  86FD 21 26 95                             ld      hl,FuelMapping
 780  8700 ED 31                                add     hl,a
 781  8702 7E                                   ld      a,(hl)
 782  8703 01 10 94                             ld      bc,FuelStart
 783  8706 57                                   ld      d,a
 784  8707 CD 34 86                             call    DrawColourCodedBar
 785  870A 3A 15 93     .ForeShield:            ld      a,(ForeShield)
 786  870D CB 3F                                srl     a
 787  870F CB 3F                                srl     a
 788  8711 CB 3F                                srl     a
 789  8713 01 10 84                             ld      bc,FShieldStart
 790  8716 CD 34 86                             call    DrawColourCodedBar
 791  8719 3A 16 93     .AftShield:             ld      a,(AftShield)
 792  871C CB 3F                                srl     a
 793  871E CB 3F                                srl     a
 794  8720 CB 3F                                srl     a
 795  8722 01 10 8D                             ld      bc,AShieldStart
 796  8725 57                                   ld      d,a
 797  8726 CD 34 86                             call    DrawColourCodedBar  ;ld		(ForeShield),a
 798  8729 3A 17 93     .EnergyBars:            ld      a,(PlayerEnergy)
 799  872C CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 800  872E                                      CallIfALTNusng  31 + 1,.Draw1EnergyBar
 800  872E FE 20       >                        cp      31 + 1
 800  8730 DC 69 87    >                        call	c,.Draw1EnergyBar
 801  8733                                      CallIfALTNusng  (31*2) + 1,.Draw2EnergyBars
 801  8733 FE 3F       >                        cp      (31*2) + 1
 801  8735 DC 75 87    >                        call	c,.Draw2EnergyBars
 802  8738                                      CallIfALTNusng  (31*3) + 1,.Draw3EnergyBars
 802  8738 FE 5E       >                        cp      (31*3) + 1
 802  873A DC 8D 87    >                        call	c,.Draw3EnergyBars
 803  873D 1E 18        .Draw4EnergyBars:       ld      e,24
 804  873F D6 60                                sub     (32*3)
 805  8741 57                                   ld      d,a
 806  8742 01 D5 A5                             ld      bc,EnergyBar4Start
 807  8745 CD 52 86                             call    DrawColourEBar
 808  8748 16 1F                                ld      d,31
 809  874A 1E 18                                ld      e,24
 810  874C 01 D5 AD                             ld      bc,EnergyBar3Start
 811  874F CD 52 86                             call    DrawColourEBar
 812  8752 16 1F                                ld      d,31
 813  8754 1E 18                                ld      e,24
 814  8756 01 D5 B5                             ld      bc,EnergyBar2Start
 815  8759 CD 52 86                             call    DrawColourEBar
 816  875C 16 1F                                ld      d,31
 817  875E 1E 18                                ld      e,24
 818  8760 01 D5 BD                             ld      bc,EnergyBar1Start
 819  8763 CD 52 86                             call    DrawColourEBar
 820  8766 C3 AE 87                             jp      .DoneEnergyBars
 821  8769 1E E0        .Draw1EnergyBar:        ld      e,224
 822  876B 57                                   ld      d,a
 823  876C 01 D5 BD                             ld      bc,EnergyBar1Start
 824  876F CD 52 86                             call    DrawColourEBar
 825  8772 C3 AE 87                             jp      .DoneEnergyBars
 826  8775 1E D8        .Draw2EnergyBars:       ld      e,216
 827  8777 D6 1F                                sub     31
 828  8779 57                                   ld      d,a
 829  877A 01 D5 B5                             ld      bc,EnergyBar2Start
 830  877D CD 52 86                             call    DrawColourEBar
 831  8780 16 1F                                ld      d,31
 832  8782 1E D8                                ld      e,216
 833  8784 01 D5 BD                             ld      bc,EnergyBar1Start
 834  8787 CD 52 86                             call    DrawColourEBar
 835  878A C3 AE 87                             jp      .DoneEnergyBars
 836  878D 1E 14        .Draw3EnergyBars:       ld      e,20
 837  878F D6 3E                                sub     31*2
 838  8791 57                                   ld      d,a
 839  8792 1E 14                                ld      e,20
 840  8794 01 D5 AD                             ld      bc,EnergyBar3Start
 841  8797 CD 52 86                             call    DrawColourEBar
 842  879A 16 1F                                ld      d,31
 843  879C 1E 14                                ld      e,20
 844  879E 01 D5 B5                             ld      bc,EnergyBar2Start
 845  87A1 CD 52 86                             call    DrawColourEBar
 846  87A4 16 1F                                ld      d,31
 847  87A6 1E 14                                ld      e,20
 848  87A8 01 D5 BD                             ld      bc,EnergyBar1Start
 849  87AB CD 52 86                             call    DrawColourEBar
 850  87AE              .DoneEnergyBars:
 851  87AE
 852  87AE
 853  87AE
 854  87AE              ; NEED ENERGY BAR
 855  87AE              ;PlayerEnergy
 856  87AE              ; BNEED LASER temp
 857  87AE              ; NEED CABIN TEMP
 858  87AE              ;NEED ALTITUDE
 859  87AE              ; Draw compas - if in range draw station, else do planet
 860  87AE C9           .DoneConsole:           ret
 861  87AF
 862  87AF              ScannerX                equ 128
 863  87AF              ScannerY                equ 171
 864  87AF              ScannerBottom           equ 190
 865  87AF              ScannerTypeMissle       equ 2
 866  87AF              ScannerXRangeOffset     equ $35
 867  87AF              ScannerCenter           equ 127
 868  87AF
 869  87AF              ScannerDefault          equ 0
 870  87AF              ScannerMissile          equ 2
 871  87AF              ScannerStation          equ 4
 872  87AF              ScannerEnemy            equ 6
 873  87AF
 874  87AF 10 1C 90 FC  ScannerColourTable:     DB  16,28,144,252,18,31,128,224
 874  87B3 12 1F 80 E0
 875  87B7
 876  87B7              GetShipColor:           MACRO
 877  87B7 ~                                    ld      a,(ShipTypeAddr)
 878  87B7 ~                                    sla     a                            ; as its byte pairs * 2
 879  87B7 ~                                    ld      hl,ScannerColourTable
 880  87B7 ~                                    add     hl,a
 881  87B7 ~                                    ld      a,(hl)
 882  87B7                                      ENDM
 883  87B7              GetShipColorBright:     MACRO
 884  87B7 ~                                    ld      a,(ShipTypeAddr)
 885  87B7 ~                                    sla     a                            ; as its byte pairs * 2
 886  87B7 ~                                    inc     a
 887  87B7 ~                                    ld      hl,ScannerColourTable
 888  87B7 ~                                    add     hl,a
 889  87B7 ~                                    ld      a,(hl)
 890  87B7                                      ENDM
 891  87B7
 892  87B7              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 893  87B7              UpdateScannerShip:
 894  87B7 3A 2B C0                             ld      a,(UBnkexplDsp)             ; if bit 4 is clear then ship should not be drawn
 895  87BA CB 67                                bit     4,a                         ; .
 896  87BC                                      ;DEBUG ret     z                           ; .
 897  87BC 3A 18 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 898  87BF CB 7F                                bit     7,a
 899  87C1 C0                                   ret     nz
 900  87C2              ; DEBUG Add in station types later
 901  87C2 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 902  87C5 ED 5B 0C C0                          ld      de,(UBnKxlo)
 903  87C9 ED 4B 0F C0                          ld      bc,(UBnKylo)
 904  87CD 7C                                   ld      a,h
 905  87CE B2                                   or      d
 906  87CF B0                                   or      b
 907  87D0 E6 C0                                and     %11000000
 908  87D2 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 909  87D3 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 910  87D6 CB 7F                                bit     7,a
 911  87D8 28 04                                jr      z,.absXHi
 912  87DA                                      NegD
 912  87DA 7A          >                    ld      a,d
 912  87DB ED 44       >                    neg
 912  87DD 57          >                    ld      d,a
 913  87DE 7A           .absXHi:                ld      a,d
 914  87DF C6 80                                add     ScannerX
 915  87E1 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 916  87E3 CB 3C        .ProcessZCoord:         srl     h
 917  87E5 CB 3C                                srl     h
 918  87E7 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 919  87EA CB 7F                                bit     7,a
 920  87EC 28 04                                jr      z,.absZHi
 921  87EE                                      NegH
 921  87EE 7C          >                    ld      a,h
 921  87EF ED 44       >                    neg
 921  87F1 67          >                    ld      h,a
 922  87F2 3E AB        .absZHi:                ld      a,ScannerY
 923  87F4 94                                   sub     h
 924  87F5 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 925  87F7 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 926  87F9 20 19                                jr      nz,.StickHasLength
 927  87FB FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 928  87FD FD 6F                                ld      iyl,a
 929  87FF DD 7D                                ld      a,ixl
 930  8801                                      GetShipColorBright
 930  8801 3A 18 C3    >                        ld      a,(ShipTypeAddr)
 930  8804 CB 27       >                        sla     a                            ; as its byte pairs * 2
 930  8806 3C          >                        inc     a
 930  8807 21 AF 87    >                        ld      hl,ScannerColourTable
 930  880A ED 31       >                        add     hl,a
 930  880C 7E          >                        ld      a,(hl)
 931  880D                                      MMUSelectLayer2
 931  880D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 932  8811 C3 4B 88                             jp      .NoStick
 933  8814 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 934  8817 CB 7F                                bit     7,a
 935  8819 28 04                                jr      z,.absYHi
 936  881B                                      NegB
 936  881B 78          >                    ld      a,b
 936  881C ED 44       >                    neg
 936  881E 47          >                    ld      b,a
 937  881F FD 7C        .absYHi:                ld      a,iyh
 938  8821 90           .SetStickPos:           sub     b
 939  8822                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 939  8822 FE BE       >                        cp      ScannerBottom
 939  8824 DA 29 88    >                        jp		c, .StickOnScreen
 940  8827 3E BE                                ld      a,ScannerBottom
 941  8829 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 942  882B                                      GetShipColor
 942  882B 3A 18 C3    >                        ld      a,(ShipTypeAddr)
 942  882E CB 27       >                        sla     a                            ; as its byte pairs * 2
 942  8830 21 AF 87    >                        ld      hl,ScannerColourTable
 942  8833 ED 31       >                        add     hl,a
 942  8835 7E          >                        ld      a,(hl)
 943  8836 DD 6F                                ld      ixl,a
 944  8838 FD 44                                ld      b,iyh                       ; from row
 945  883A DD 4C                                ld      c,ixh                       ; from col
 946  883C FD 55                                ld      d,iyl                       ; to row
 947  883E DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 948  8840 E5                                   push    hl
 949  8841                                      MMUSelectLayer2
 949  8841 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 950  8845 CD 0D E3                             call    l2_draw_vert_line_to
 951  8848 E1                                   pop     hl
 952  8849 23                                   inc     hl
 953  884A 7E                                   ld      a,(hl)
 954  884B FD 45        .NoStick:               ld      b,iyl                       ; row
 955  884D DD 4C                                ld      c,ixh                       ; col
 956  884F F5                                   push    af
 957  8850 CD FF E0                             call    l2_plot_pixel
 958  8853 F1                                   pop     af
 959  8854 FD 45                                ld      b,iyl
 960  8856 DD 4C                                ld      c,ixh
 961  8858 0C                                   inc     c
 962  8859 CD FF E0                             call    l2_plot_pixel
 963  885C C9                                   ret
 964  885D
 965  885D
 966  885D
 967  885D              ;.absXhi:
 968  885D              ;                        ld      a,ScannerX
 969  885D              ;                        JumpOnBitSet d,7,ScannerNegX
 970  885D              ;                        add     a,e
 971  885D              ;                        jp      ScannerZCoord
 972  885D              ;ScannerNegX:            sub     e
 973  885D              ;ScannerZCoord:          ld      e,a
 974  885D              ;                        srl     c
 975  885D              ;                        srl     c
 976  885D              ;                        ld      a,ScannerY
 977  885D              ;                        JumpOnBitSet b,7,ScannerNegZ
 978  885D              ;                        sub     c
 979  885D              ;                        jp      ScannerYCoord
 980  885D              ;ScannerNegZ:            add     a,c
 981  885D              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 982  885D              ;                        JumpOnBitSet h,7,ScannerStickDown
 983  885D              ;                        sub     l                       ; a already holds actual Y
 984  885D              ;                        JumpIfAGTENusng 128,ScannerHeightDone
 985  885D              ;                        ld      a,128
 986  885D              ;                        jp      ScannerHeightDone
 987  885D              ;ScannerStickDown:       add     a,l
 988  885D              ;                        JumpIfAGTENusng 191,ScannerHeightDone
 989  885D              ;                        ld      a,191
 990  885D              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 991  885D              ;                        ld      b,d
 992  885D              ;                        ld      d,a
 993  885D              ;                        cp      b
 994  885D              ;                        jp      z,Scanner0Height
 995  885D              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
 996  885D              ;                        push    bc
 997  885D              ;                        push    de
 998  885D              ;                        MMUSelectLayer2
 999  885D              ;                        call    l2_draw_vert_line_to
1000  885D              ;                        pop     de
1001  885D              ;                        pop     bc
1002  885D              ;Scanner0Height:         ld      b,d
1003  885D              ;                       push    bc
1004  885D              ;                       ld      a,255
1005  885D              ;                       MMUSelectLayer2
1006  885D              ;                       call    l2_plot_pixel
1007  885D              ;                       pop     bc
1008  885D              ;                       inc     c
1009  885D              ;                       ld      a,255
1010  885D              ;                       MMUSelectLayer2
1011  885D              ;                       call    l2_plot_pixel
1012  885D C9                                   ret
1013  885E
1014  885E
1015  885E AF           SeedGalaxy0:            xor     a
1016  885F                                      MMUSelectGalaxyA
1016  885F ED 92 57    >                     nextreg GalaxyDataMMU,       a
1017  8862 DD 21 16 E0                          ld      ix,galaxy_data
1018  8866 AF                                   xor		a
1019  8867 32 2A 92                             ld		(XSAV),a
1020  886A CD 80 96                             call    copy_galaxy_to_system
1021  886D DD E5        SeedGalaxy0Loop:        push    ix
1022  886F D1                                   pop     de
1023  8870 21 11 92                             ld      hl,SystemSeed
1024  8873 CD 86 96                             call    copy_seed
1025  8876 DD E5                                push    ix
1026  8878 E1                                   pop     hl
1027  8879 ED 34 08 00                          add     hl,8
1028  887D E5                                   push    hl
1029  887E DD E1                                pop     ix
1030  8880 CD BB 96                             call    next_system_seed
1031  8883 3A 2A 92                             ld		a,(XSAV)
1032  8886 3D                                   dec		a
1033  8887 FE 00                                cp		0
1034  8889 C8                                   ret		z
1035  888A 32 2A 92                             ld		(XSAV),a
1036  888D 20 DE                                jr      nz,SeedGalaxy0Loop
1037  888F C9                                   ret
1038  8890
1039  8890
1040  8890
1041  8890
1042  8890                  ;include "./ModelRender/testdrawing.asm"
1043  8890 00 00        XX12PVarQ			DW 0
1044  8892 00 00        XX12PVarR			DW 0
1045  8894 00 00        XX12PVarS			DW 0
1046  8896 00 00        XX12PVarResult1		DW 0
1047  8898 00 00        XX12PVarResult2		DW 0
1048  889A 00 00        XX12PVarResult3		DW 0
1049  889C 00           XX12PVarSign2		DB 0
1050  889D 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1051  889E 00           XX12PVarSign3		DB 0
1052  889F
1053  889F                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 889F              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 889F              ; so xx12 = XX15 * XX16 row
   3+ 889F              XX12ProcessOneRow:
   4+ 889F              XX12CalcXCell:
   5+ 889F ED 4B 78 C0          ld		bc,(UBnkXScaled)
   6+ 88A3 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 88A4 23           		inc		hl
   8+ 88A5 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 88A6 7A           		ld		a,d
  10+ 88A7 A8                   xor     b
  11+ 88A8 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 88AA DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 88AC 78           		ld		a,b                                     ; now make bc abs bc
  14+ 88AD E6 7F        		and		SignMask8Bit
  15+ 88AF 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 88B0 E5           		push	hl
  17+ 88B1 16 00                ld      d,0                                     ; d = value
  18+ 88B3 60           		ld		h,b
  19+ 88B4 69           		ld		l,c
  20+ 88B5 CD 4D A0     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 88B8 22 96 88     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 88BB DD 7C        		ld		a,ixh
  23+ 88BD 32 9D 88     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 88C0 E1           		pop		hl
  25+ 88C1              XX12CalcYCell:
  26+ 88C1 ED 4B 7A C0          ld		bc,(UBnkYScaled)
  27+ 88C5 23           		inc		hl
  28+ 88C6 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 88C7 23           		inc		hl
  30+ 88C8 56           		ld		d,(hl)
  31+ 88C9 7A           		ld		a,d
  32+ 88CA A8                   xor     b
  33+ 88CB E6 80        		and		SignOnly8Bit
  34+ 88CD DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 88CF 78           		ld		a,b                                     ; now make bc abs bc
  36+ 88D0 E6 7F        		and		SignMask8Bit
  37+ 88D2 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 88D3 E5           		push	hl
  39+ 88D4 16 00                ld      d,0                                     ; d = value
  40+ 88D6 60           		ld		h,b
  41+ 88D7 69           		ld		l,c
  42+ 88D8 CD 4D A0     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 88DB 22 98 88     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 88DE DD 7C        		ld		a,ixh
  45+ 88E0 32 9C 88     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 88E3 E1           		pop		hl
  47+ 88E4              XX12CalcZCell:
  48+ 88E4 ED 4B 7C C0          ld		bc,(UBnkZScaled)
  49+ 88E8 23           		inc		hl
  50+ 88E9 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 88EA 23           		inc		hl
  52+ 88EB 56           		ld		d,(hl)
  53+ 88EC 7A           		ld		a,d
  54+ 88ED A8                   xor     b
  55+ 88EE E6 80        		and		SignOnly8Bit
  56+ 88F0 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 88F2 78           		ld		a,b                                     ; now make bc abs bc
  58+ 88F3 E6 7F        		and		SignMask8Bit
  59+ 88F5 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 88F6 16 00                ld      d,0                                     ; d = value
  61+ 88F8 60           		ld		h,b
  62+ 88F9 69           		ld		l,c
  63+ 88FA CD 4D A0     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 88FD 22 9A 88     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 8900 DD 7C        		ld		a,ixh
  66+ 8902 32 9E 88     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 8905              XX12CalcCellResult:
  68+ 8905 2A 96 88     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 8908 ED 5B 98 88  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 890C ED 4B 9C 88  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 8910              XX12MSBOnly:
  72+ 8910 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 8911 5A           		ld		e,d									    ; for both results
  74+ 8912 AF           		xor		a									    ;
  75+ 8913 67           		ld		h,a									    ;
  76+ 8914 57           		ld		d,a									    ; so set high byte to 0
  77+ 8915 CD 6D CB     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 8918 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 8919 3A 9E 88     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 891C 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 891D ED 5B 9A 88  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 8921 5A           		ld		e,d                                     ; d = result /256
  83+ 8922 16 00        		ld		d,0									    ; and only us high byte
  84+ 8924 CD 6D CB     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 8927 C9           		ret											    ; hl = result, a = sign
  86+ 8928              								    ; hl = result, a = sign
  87+ 8928
  88+ 8928              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 8928              ;...X cell
  90+ 8928 21 4B C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 892B CD 9F 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 892E 47           		ld		b,a                                 ; b = sign
  93+ 892F 7C           		ld		a,h                                 ; a = high byte
  94+ 8930 B0           		or		b
  95+ 8931 32 7F C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 8934 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 8935 32 7E C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 8938              ;...Y cell
  99+ 8938 21 53 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 893B CD 9F 88             call    XX12ProcessOneRow
 101+ 893E 47           		ld		b,a
 102+ 893F 7C           		ld		a,h
 103+ 8940              ;		ld		a,l
 104+ 8940 B0           		or		b
 105+ 8941 32 81 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 8944 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 8945 32 80 C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 8948              ;...Z cell
 109+ 8948 21 5B C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 894B CD 9F 88             call    XX12ProcessOneRow
 111+ 894E 47           		ld		b,a
 112+ 894F 7C                   ld		a,h
 113+ 8950              ;		ld		a,l
 114+ 8950 B0           		or		b
 115+ 8951 32 83 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 8954 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 8955 32 82 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 8958 C9                   ret
 119+ 8959
 120+ 8959              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 8959              ;...X cell
 122+ 8959 21 4B C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 895C CD 9F 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 895F 47           		ld		b,a                                 ; b = sign
 125+ 8960 7C           		ld		a,h                                 ; a = high byte
 126+ 8961 B0           		or		b
 127+ 8962 32 7F C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 8965 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 8966 32 7E C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 8969              ;...Y cell
 131+ 8969 21 53 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 896C CD 9F 88             call    XX12ProcessOneRow
 133+ 896F 47           		ld		b,a
 134+ 8970 7C           		ld		a,h
 135+ 8971              ;		ld		a,l
 136+ 8971 B0           		or		b
 137+ 8972 32 81 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 8975 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 8976 32 80 C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 8979              ;...Z cell
 141+ 8979 21 5B C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 897C CD 9F 88             call    XX12ProcessOneRow
 143+ 897F 47           		ld		b,a
 144+ 8980 7C                   ld		a,h
 145+ 8981              ;		ld		a,l
 146+ 8981 B0           		or		b
 147+ 8982 32 83 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 8985 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 8986 32 82 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 8989 C9                   ret
 151+ 898A
 152+ 898A              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 898A              ;...X cell
 154+ 898A 21 33 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 898D CD 9F 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 8990 47           		ld		b,a                                 ; b = sign
 157+ 8991 7C           		ld		a,h                                 ; a = high byte
 158+ 8992 B0           		or		b
 159+ 8993 32 7F C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 8996 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 8997 32 7E C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 899A              ;...Y cell
 163+ 899A 21 39 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 899D CD 9F 88             call    XX12ProcessOneRow
 165+ 89A0 47           		ld		b,a
 166+ 89A1 7C           		ld		a,h
 167+ 89A2              ;		ld		a,l
 168+ 89A2 B0           		or		b
 169+ 89A3 32 81 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 89A6 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 89A7 32 80 C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 89AA              ;...Z cell
 173+ 89AA 21 3F C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 89AD CD 9F 88             call    XX12ProcessOneRow
 175+ 89B0 47           		ld		b,a
 176+ 89B1 7C                   ld		a,h
 177+ 89B2              ;		ld		a,l
 178+ 89B2 B0           		or		b
 179+ 89B3 32 83 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 89B6 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 89B7 32 82 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 89BA C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
1054  89BB                  include "ModelRender/CopyXX12ToXX15.asm"
# file opened: ModelRender/CopyXX12ToXX15.asm
   1+ 89BB 21 7E C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 89BE 11 78 C0                             ld      de,XX15
   3+ 89C1 01 06 00                             ld      bc,6
   4+ 89C4 ED B0                                ldir
   5+ 89C6 C9                                   ret
   6+ 89C7
   7+ 89C7 21 7E C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 89CA 11 84 C0                             ld      de,XX12Save
   9+ 89CD 01 06 00                             ld      bc,6
  10+ 89D0 ED B0                                ldir
  11+ 89D2 C9                                   ret
  12+ 89D3
  13+ 89D3 21 84 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 89D6 11 7E C0                             ld      de,XX12
  15+ 89D9 01 06 00                             ld      bc,6
  16+ 89DC ED B0                                ldir
  17+ 89DE C9                                   ret
  18+ 89DF
  19+ 89DF 21 7E C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 89E2 11 8A C0                             ld      de,XX12Save2
  21+ 89E5 01 06 00                             ld      bc,6
  22+ 89E8 ED B0                                ldir
  23+ 89EA C9                                   ret
  24+ 89EB
  25+ 89EB 21 8A C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 89EE 11 7E C0                             ld      de,XX12
  27+ 89F1 01 06 00                             ld      bc,6
  28+ 89F4 ED B0                                ldir
  29+ 89F6 C9                                   ret
  30+ 89F7
# file closed: ModelRender/CopyXX12ToXX15.asm
1055  89F7                  include "ModelRender/CopyXX15ToXX12.asm"
# file opened: ModelRender/CopyXX15ToXX12.asm
   1+ 89F7 21 78 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 89FA 11 7E C0                             ld      de,XX12
   3+ 89FD 01 06 00                             ld      bc,6
   4+ 8A00 ED B0                                ldir
   5+ 8A02 C9                                   ret
   6+ 8A03
   7+ 8A03
   8+ 8A03
   9+ 8A03 21 78 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 8A06 11 93 C0                             ld      de,XX15Save
  11+ 8A09 01 06 00                             ld      bc,6
  12+ 8A0C ED B0                                ldir
  13+ 8A0E C9                                   ret
  14+ 8A0F
  15+ 8A0F 21 93 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 8A12 11 78 C0                             ld      de,XX15
  17+ 8A15 01 06 00                             ld      bc,6
  18+ 8A18 ED B0                                ldir
  19+ 8A1A C9                                   ret
  20+ 8A1B
  21+ 8A1B 21 78 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 8A1E 11 9B C0                             ld      de,XX15Save2
  23+ 8A21 01 06 00                             ld      bc,6
  24+ 8A24 ED B0                                ldir
  25+ 8A26 C9                                   ret
  26+ 8A27
  27+ 8A27 21 9B C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 8A2A 11 78 C0                             ld      de,XX15
  29+ 8A2D 01 06 00                             ld      bc,6
  30+ 8A30 ED B0                                ldir
  31+ 8A32 C9                                   ret
  32+ 8A33
# file closed: ModelRender/CopyXX15ToXX12.asm
1056  8A33                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 8A33              ScaleXX16Matrix197:
   2+ 8A33 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
   3+ 8A35 0E C5        	ld		c,ConstNorm         ; c = 197
   4+ 8A37 21 33 C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 8A3A              .ScaleXX16Loop:
   6+ 8A3A 7E           	ld		a,(hl)              ; set DE = matrix value
   7+ 8A3B 5F           	ld		e,a                 ;
   8+ 8A3C 23           	inc		hl                  ;
   9+ 8A3D 7E           	ld		a,(hl)              ;
  10+ 8A3E 57           	ld		d,a                 ;
  11+ 8A3F E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  12+ 8A41 DD 6F        	ld		ixl,a				; retain for sign bit
  13+ 8A43              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 8A43 CB 23       >			   sla e
  13+ 8A45 CB 12       >			   rl  d
  14+ 8A47 7A               ld      a,d                 ; a = high byte after x 2
  15+ 8A48 C5           	push	bc                  ; save BC  counter and constant 197
  16+ 8A49 E5           	push	hl                  ; save HL
  17+ 8A4A CD 87 A1     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  18+ 8A4D E1           	pop		hl
  19+ 8A4E 2B               dec     hl                  ; move back to low byte
  20+ 8A4F 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  21+ 8A50 23               inc     hl                  ; move back to high byte
  22+ 8A51              ;    ld      a,(hl)
  23+ 8A51              ;    and     $80
  24+ 8A51 DD 7D            ld      a,ixl
  25+ 8A53 77               ld      (hl),a              ; write back just sign bit
  26+ 8A54 C1           	pop		bc                  ; retrieve both counter and constant 197
  27+ 8A55 23               inc     hl                  ; no to next vertex value
  28+ 8A56 10 E2        	djnz	.ScaleXX16Loop
  29+ 8A58 C9           	ret
  30+ 8A59
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
1057  8A59
1058  8A59                  include "./Universe/StarRoutines.asm"
# file opened: ./Universe/StarRoutines.asm
   1+ 8A59              ;note: DIV16Amul256dCUNDOC as per
   2+ 8A59              ;                                   BC = A0
   3+ 8A59              ;                                   DE = 0C
   4+ 8A59              ;                                   so BC = a * 256 / C
   5+ 8A59
   6+ 8A59              ; We can cheat here, Speed is always 0 or positive
   7+ 8A59              ; z postion will always be positive if we can see it
   8+ 8A59
   9+ 8A59 EB           InitStarAtHL:           ex      de,hl
  10+ 8A5A CD 44 96                             call    doRND
  11+ 8A5D EB                                   ex      de,hl
  12+ 8A5E F6 08                                or      8
  13+ 8A60 77                                   ld      (hl),a
  14+ 8A61 E6 7F                                and     $7F
  15+ 8A63 23                                   inc     hl
  16+ 8A64 77                                   ld      (hl),a
  17+ 8A65 EB                                   ex      de,hl
  18+ 8A66 CD 44 96                             call    doRND
  19+ 8A69 EB                                   ex      de,hl
  20+ 8A6A 0F                                   rrca
  21+ 8A6B E6 80                                and     $80
  22+ 8A6D B6                                   or      (hl)
  23+ 8A6E 77                                   ld      (hl),a
  24+ 8A6F 23                                   inc     hl
  25+ 8A70 EB                                   ex      de,hl
  26+ 8A71 CD 44 96                             call    doRND
  27+ 8A74 EB                                   ex      de,hl
  28+ 8A75 F6 04                                or      4
  29+ 8A77 77                                   ld      (hl),a
  30+ 8A78 23                                   inc     hl
  31+ 8A79 E6 7F                                and     $7F
  32+ 8A7B 77                                   ld      (hl),a
  33+ 8A7C EB                                   ex      de,hl
  34+ 8A7D CD 44 96                             call    doRND
  35+ 8A80 EB                                   ex      de,hl
  36+ 8A81 0F                                   rrca
  37+ 8A82 E6 80                                and     $80
  38+ 8A84 B6                                   or      (hl)
  39+ 8A85 77                                   ld      (hl),a
  40+ 8A86 23                                   inc     hl
  41+ 8A87 EB                                   ex      de,hl
  42+ 8A88 CD 44 96                             call    doRND
  43+ 8A8B EB                                   ex      de,hl
  44+ 8A8C F6 90                                or      144
  45+ 8A8E 77                                   ld      (hl),a
  46+ 8A8F 23                                   inc     hl
  47+ 8A90 F6 70                                or      %01110000
  48+ 8A92 E6 7F                                and     $7f     ; bodge
  49+ 8A94 77                                   ld      (hl),a
  50+ 8A95 23                                   inc     hl
  51+ 8A96 C9                                   ret
  52+ 8A97
  53+ 8A97              ; we could cheat, flip the sign of DE and just add but its not very optimised
  54+ 8A97 7C           StarsSUBHLDESigned:     ld      a,h
  55+ 8A98 E6 80                                and     SignOnly8Bit
  56+ 8A9A 47                                   ld      b,a                         ;save sign bit in b
  57+ 8A9B AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 8A9C                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
  58+ 8A9C FA CA 8A    >                        jp		m, .SUBHLDEOppSGN
  59+ 8A9F 78           .SUBHLDESameSigns:      ld      a,b
  60+ 8AA0 B2                                   or      d
  61+ 8AA1                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 8AA1 FA AB 8A    >                        jp		m, .SUBHLDESameNeg
  62+ 8AA4 B7                                   or      a
  63+ 8AA5 ED 52                                sbc     hl,de
  64+ 8AA7                                      JumpIfNegative .SUBHLDESameOvrFlw
  64+ 8AA7 FA BE 8A    >                        jp		m, .SUBHLDESameOvrFlw
  65+ 8AAA C9                                   ret
  66+ 8AAB 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  67+ 8AAC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  68+ 8AAE 67                                   ld      h,a
  69+ 8AAF 7A                                   ld      a,d
  70+ 8AB0 E6 7F                                and     SignMask8Bit
  71+ 8AB2 57                                   ld      d,a
  72+ 8AB3 B7                                   or      a
  73+ 8AB4 ED 52                                sbc     hl,de
  74+ 8AB6                                      JumpIfNegative .SUBHLDESameOvrFlw
  74+ 8AB6 FA BE 8A    >                        jp		m, .SUBHLDESameOvrFlw
  75+ 8AB9 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  76+ 8ABA F6 80                                or      SignOnly8Bit
  77+ 8ABC 67                                   ld      h,a
  78+ 8ABD C9                                   ret
  79+ 8ABE              .SUBHLDESameOvrFlw:     NegHL
  79+ 8ABE AF          >                    xor a
  79+ 8ABF 95          >                    sub l
  79+ 8AC0 6F          >                    ld l,a
  79+ 8AC1 9F          >                    sbc a,a
  79+ 8AC2 94          >                    sub h
  79+ 8AC3 67          >                    ld h,a
  80+ 8AC4 78                                   ld      a,b
  81+ 8AC5 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  82+ 8AC7 B4                                   or      h
  83+ 8AC8 67                                   ld      h,a                         ; recover sign
  84+ 8AC9 C9                                   ret
  85+ 8ACA B7           .SUBHLDEOppSGN:         or      a
  86+ 8ACB 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  87+ 8ACC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  88+ 8ACE 67                                   ld      h,a
  89+ 8ACF 7A                                   ld      a,d
  90+ 8AD0 E6 7F                                and     SignMask8Bit
  91+ 8AD2 57                                   ld      d,a
  92+ 8AD3 19                                   add     hl,de
  93+ 8AD4 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  94+ 8AD5 B4                                   or      h
  95+ 8AD6 67                                   ld      h,a                         ; set the previou sign value
  96+ 8AD7 C9                                   ret
  97+ 8AD8
  98+ 8AD8 7C           StarsADDHLDESigned:     ld      a,h
  99+ 8AD9 E6 80                                and     SignOnly8Bit
 100+ 8ADB 47                                   ld      b,a                         ;save sign bit in b
 101+ 8ADC AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 102+ 8ADD                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 102+ 8ADD FA F5 8A    >                        jp		m, .ADDHLDEOppSGN
 103+ 8AE0 78           .ADDHLDESameSigns:      ld      a,b
 104+ 8AE1 B2                                   or      d
 105+ 8AE2                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 105+ 8AE2 FA E7 8A    >                        jp		m, .ADDHLDESameNeg
 106+ 8AE5 19                                   add     hl,de
 107+ 8AE6 C9                                   ret
 108+ 8AE7 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 109+ 8AE8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 110+ 8AEA 67                                   ld      h,a
 111+ 8AEB 7A                                   ld      a,d
 112+ 8AEC E6 7F                                and     SignMask8Bit
 113+ 8AEE 57                                   ld      d,a
 114+ 8AEF 19                                   add     hl,de
 115+ 8AF0 3E 80                                ld      a,SignOnly8Bit
 116+ 8AF2 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 117+ 8AF3 67                                   ld      h,a
 118+ 8AF4 C9                                   ret
 119+ 8AF5 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 120+ 8AF6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 121+ 8AF8 67                                   ld      h,a
 122+ 8AF9 7A                                   ld      a,d
 123+ 8AFA E6 7F                                and     SignMask8Bit
 124+ 8AFC 57                                   ld      d,a
 125+ 8AFD B7                                   or      a
 126+ 8AFE ED 52                                sbc     hl,de
 127+ 8B00 38 04                                jr      c,.ADDHLDEOppInvert
 128+ 8B02 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 129+ 8B03 B4                                   or      h
 130+ 8B04 67                                   ld      h,a                         ; set the previou sign value
 131+ 8B05 C9                                   ret
 132+ 8B06              .ADDHLDEOppInvert:      NegHL
 132+ 8B06 AF          >                    xor a
 132+ 8B07 95          >                    sub l
 132+ 8B08 6F          >                    ld l,a
 132+ 8B09 9F          >                    sbc a,a
 132+ 8B0A 94          >                    sub h
 132+ 8B0B 67          >                    ld h,a
 133+ 8B0C 78                                   ld      a,b
 134+ 8B0D EE 80                                xor     SignOnly8Bit                ; flip sign bit
 135+ 8B0F B4                                   or      h
 136+ 8B10 67                                   ld      h,a                         ; recover sign
 137+ 8B11 C9                                   ret
 138+ 8B12              ;----------------------------------------------------------------------------------------------------------------------------------
 139+ 8B12 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 140+ 8B14 78                                   ld      a,b
 141+ 8B15 32 3D 93                             ld      (NumberOfStarsNOSTM),a
 142+ 8B18 21 8A 94                             ld      hl,varDust
 143+ 8B1B CD 59 8A     InitStarsLoop:          call    InitStarAtHL
 144+ 8B1E 10 FB                                djnz    InitStarsLoop
 145+ 8B20 C9                                   ret
 146+ 8B21              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ 8B21              StarsForward:          ; break
 148+ 8B21 3A 3D 93                             ld      a,(NumberOfStarsNOSTM)
 149+ 8B24 47                                   ld      b,a                                 ; get the number of stars to process
 150+ 8B25 FD 21 8A 94                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 151+ 8B29 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 152+ 8B2A FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 153+ 8B2D 5F                                   ld      e,a
 154+ 8B2E 16 00                                ld      d,0                                 ; de = zhi/256
 155+ 8B30 3A 21 92                             ld      a,(DELTA)
 156+ 8B33 FE 00                                cp      0
 157+ 8B35 20 01                                jr      nz,.NormalSpeed
 158+ 8B37 3C                                   inc     a                                   ; so the is at lest some dust movement
 159+ 8B38 47           .NormalSpeed:           ld      b,a
 160+ 8B39 0E 00                                ld      c,0                                 ; bc = delta * 256
 161+ 8B3B CD FB A1                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 162+ 8B3E                                      ShiftHLRight1
 162+ 8B3E CB 3C       >			   srl h
 162+ 8B40 CB 1D       >			   rr  l
 163+ 8B42                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 163+ 8B42 CB 3C       >			   srl h
 163+ 8B44 CB 1D       >			   rr  l
 164+ 8B46 7D                                   ld      a,l                                 ;
 165+ 8B47 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 166+ 8B49 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 167+ 8B4B FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 167+ 8B4F 66 05
 168+ 8B51 ED 5B 22 92                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 169+ 8B55 CD 97 8A                             call    StarsSUBHLDESigned
 170+ 8B58                                      JumpOnBitSet h,7,ResetStar
 170+ 8B58 CB 7C       >                        bit 	7,h
 170+ 8B5A C2 AF 8C    >                        jp      nz,ResetStar
 171+ 8B5D FD 75 04 FD                          ld      (iy+4),hl
 171+ 8B61 74 05
 172+ 8B63 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 172+ 8B67 66 01
 173+ 8B69 7C                                   ld      a,h                                 ;
 174+ 8B6A E6 7F                                and     $7F                                 ;
 175+ 8B6C 57                                   ld      d,a                                 ; d = abs(x hi)
 176+ 8B6D DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 177+ 8B6F ED 30                                mul                                         ; de =  abs(x hi) * Q
 178+ 8B71 7C                                   ld      a,h                                 ;
 179+ 8B72 E6 80                                and     $80                                 ;
 180+ 8B74 B2                                   or      d                                   ; set sign bit in d
 181+ 8B75 57                                   ld      d,a                                 ;
 182+ 8B76 CD D8 8A                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 183+ 8B79 7C                                   ld      a,h
 184+ 8B7A E6 7F                                and     $7F
 185+ 8B7C                                      JumpIfAGTENusng $70, ResetStar
 185+ 8B7C FE 70       >                        cp     $70
 185+ 8B7E D2 AF 8C    >                        jp		nc,ResetStar
 186+ 8B81 FD 75 00 FD                          ld      (iy+0),hl                           ;
 186+ 8B85 74 01
 187+ 8B87 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 187+ 8B8B 66 03
 188+ 8B8D 7C                                   ld      a,h                                 ;
 189+ 8B8E E6 7F                                and     $7F                                 ;
 190+ 8B90 57                                   ld      d,a                                 ; d = abs(y hi)
 191+ 8B91 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 192+ 8B93 ED 30                                mul                                         ; de =  abs(y hi) * Q
 193+ 8B95 7C                                   ld      a,h                                 ;
 194+ 8B96 E6 80                                and     $80                                 ;
 195+ 8B98 B2                                   or      d                                   ; set sign bit in d
 196+ 8B99 57                                   ld      d,a                                 ;
 197+ 8B9A CD D8 8A                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 198+ 8B9D 7C                                   ld      a,h
 199+ 8B9E E6 7F                                and     $7F
 200+ 8BA0                                      JumpIfAGTENusng $60, ResetStar
 200+ 8BA0 FE 60       >                        cp     $60
 200+ 8BA2 D2 AF 8C    >                        jp		nc,ResetStar
 201+ 8BA5 7C                                   ld      a,h
 202+ 8BA6 E6 80                                and     $80
 203+ 8BA8 20 06                                jr      nz,.NoSecondCheck
 204+ 8BAA 7C                                   ld      a,h
 205+ 8BAB                                      JumpIfAGTENusng $20, ResetStar
 205+ 8BAB FE 20       >                        cp     $20
 205+ 8BAD D2 AF 8C    >                        jp		nc,ResetStar
 206+ 8BB0 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 206+ 8BB4 74 03
 207+ 8BB6              ; Now roll
 208+ 8BB6              ;  6. x = x - alpha * y / 256
 209+ 8BB6 2A E2 91     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 210+ 8BB9 7D                                   ld      a,l
 211+ 8BBA FE 00                                cp      0
 212+ 8BBC 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 8BBE                                      ;break
 214+ 8BBE                                      ;ld      a,$80
 215+ 8BBE                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 216+ 8BBE E5                                   push    hl
 217+ 8BBF 7C                                   ld      a,h
 218+ 8BC0 E6 80                                and     $80
 219+ 8BC2 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 8BC3 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 8BC4 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 8BC7 5F                                   ld      e,a
 223+ 8BC8 E6 80                                and     $80
 224+ 8BCA 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 8BCB 7B           .rxEEquABSignX:         ld      a,e
 226+ 8BCC E6 7F                                and     $7F
 227+ 8BCE 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 8BCF ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 8BD1 79                                   ld      a,c
 230+ 8BD2 A8                                   xor     b                                   ; handle muliple sign bits
 231+ 8BD3 B2                                   or      d
 232+ 8BD4 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 8BD5 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 8BD9 66 01
 234+ 8BDB CD 97 8A                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 235+ 8BDE FD 75 00 FD                          ld      (iy+0),hl
 235+ 8BE2 74 01
 236+ 8BE4              ;  5. y = y + alpha * x / 256
 237+ 8BE4              .YRoll:                 ;break
 238+ 8BE4 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 8BE5 7C                                   ld      a,h
 240+ 8BE6 E6 80                                and     $80
 241+ 8BE8 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 242+ 8BE9 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 243+ 8BEA FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 244+ 8BED 5F                                   ld      e,a
 245+ 8BEE E6 80                                and     $80
 246+ 8BF0 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 247+ 8BF1 7B           .ryEEquABSignX:         ld      a,e
 248+ 8BF2 E6 7F                                and     $7F
 249+ 8BF4 5F                                   ld      e,a                                 ; save abs x hi in e
 250+ 8BF5 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 251+ 8BF7 79                                   ld      a,c
 252+ 8BF8 A8                                   xor     b                                   ; handle muliple sign bits
 253+ 8BF9 B2                                   or      d
 254+ 8BFA 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 255+ 8BFB FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 255+ 8BFF 66 03
 256+ 8C01 CD D8 8A                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 257+ 8C04 FD 75 02 FD                          ld      (iy+2),hl
 257+ 8C08 74 03
 258+ 8C0A 3A D5 91     .NoRoll:                ld      a,(BET1)
 259+ 8C0D FE 00                                cp      0
 260+ 8C0F 28 22                                jr      z,.NoPitch
 261+ 8C11              ;  8. y = y - beta * 256
 262+ 8C11 57           .YPitch:                ld      d,a                                 ; d = BET1
 263+ 8C12 FD 7E 02                             ld      a,(iy+2)
 264+ 8C15 5F                                   ld      e,a                                 ; e = Y HI
 265+ 8C16 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 266+ 8C18 5F                                   ld      e,a
 267+ 8C19 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 268+ 8C1B                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 268+ 8C1B CB 23       >			   sla e
 268+ 8C1D CB 12       >			   rl  d
 269+ 8C1F 3A D7 91                             ld      a,(BET2FLIP)                        ; get inverted Sign
 270+ 8C22 B2                                   or      d
 271+ 8C23 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 272+ 8C24 FD 6E 02 FD                          ld      hl,(iy+2)
 272+ 8C28 66 03
 273+ 8C2A CD D8 8A                             call    StarsADDHLDESigned
 274+ 8C2D FD 75 02 FD                          ld      (iy+2),hl
 274+ 8C31 74 03
 275+ 8C33              ; now work out screen pos
 276+ 8C33              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 277+ 8C33              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 278+ 8C33              ;        pop     de
 279+ 8C33               ;       call    ProjectStarXToScreen
 280+ 8C33                                      ;pop     de
 281+ 8C33              .NoPitch:
 282+ 8C33 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 283+ 8C36 6F                                   ld      l,a
 284+ 8C37 E6 7F                                and     $7F
 285+ 8C39                                      JumpOnBitSet l,7,StarNegXPt
 285+ 8C39 CB 7D       >                        bit 	7,l
 285+ 8C3B C2 44 8C    >                        jp      nz,StarNegXPt
 286+ 8C3E C6 80                                add     a,$80
 287+ 8C40 4F                                   ld      c,a
 288+ 8C41 C3 49 8C                             jp      StarDoneX
 289+ 8C44 47           StarNegXPt:             ld      b,a
 290+ 8C45 3E 80                                ld      a,$80
 291+ 8C47 90                                   sub     b
 292+ 8C48 4F                                   ld      c,a
 293+ 8C49 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 294+ 8C4C 6F                                   ld      l,a
 295+ 8C4D E6 7F                                and     $7F
 296+ 8C4F                                      JumpOnBitSet l,7,StarNegYPt
 296+ 8C4F CB 7D       >                        bit 	7,l
 296+ 8C51 C2 5A 8C    >                        jp      nz,StarNegYPt
 297+ 8C54 C6 60                                add     a,$60
 298+ 8C56 47                                   ld      b,a
 299+ 8C57 C3 5F 8C                             jp      StarDoneY
 300+ 8C5A 47           StarNegYPt:             ld      b,a
 301+ 8C5B 3E 60                                ld      a,$60
 302+ 8C5D 90                                   sub     b
 303+ 8C5E 47                                   ld      b,a
 304+ 8C5F 3E FC        StarDoneY:              ld      a,$FC
 305+ 8C61 C5                                   push    bc
 306+ 8C62              .DrawStar:              MMUSelectLayer2
 306+ 8C62 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 307+ 8C66 CD FF E0                             call    l2_plot_pixel
 308+ 8C69 FD 7E 05                             ld      a,(iy+5)
 309+ 8C6C C1                                   pop    bc
 310+ 8C6D                                      JumpIfAGTENusng $60,EndofStarsLoop
 310+ 8C6D FE 60       >                        cp     $60
 310+ 8C6F D2 9F 8C    >                        jp		nc,EndofStarsLoop
 311+ 8C72 3E D8                                ld      a,$D8
 312+ 8C74 0C                                   inc     c
 313+ 8C75 C5                                   push    bc
 314+ 8C76                                      MMUSelectLayer2
 314+ 8C76 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 315+ 8C7A CD FF E0                             call    l2_plot_pixel
 316+ 8C7D FD 7E 05                             ld      a,(iy+5)
 317+ 8C80 C1                                   pop    bc
 318+ 8C81                                      JumpIfAGTENusng $37,EndofStarsLoop
 318+ 8C81 FE 37       >                        cp     $37
 318+ 8C83 D2 9F 8C    >                        jp		nc,EndofStarsLoop
 319+ 8C86 3E B4                                ld      a,$B4
 320+ 8C88 04                                   inc     b
 321+ 8C89 C5                                   push    bc
 322+ 8C8A                                      MMUSelectLayer2
 322+ 8C8A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 323+ 8C8E CD FF E0                             call    l2_plot_pixel
 324+ 8C91 FD 7E 05                             ld      a,(iy+5)
 325+ 8C94 C1                                   pop    bc
 326+ 8C95 3E B4                                ld      a,$B4
 327+ 8C97 0D                                   dec     c
 328+ 8C98                                      MMUSelectLayer2
 328+ 8C98 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ 8C9C CD FF E0                             call    l2_plot_pixel
 330+ 8C9F C1           EndofStarsLoop:         pop     bc                                      ;  0
 331+ 8CA0 FD E5                                push    iy                                      ; +1
 332+ 8CA2 E1                                   pop     hl                                      ;  0
 333+ 8CA3 ED 34 06 00                          add     hl,6
 334+ 8CA7 E5           NextStarLoop2:          push    hl                                      ; +1
 335+ 8CA8 FD E1                                pop     iy                                      ;  0
 336+ 8CAA 05                                   dec     b
 337+ 8CAB C2 29 8B                             jp      nz,StarProcessLoop
 338+ 8CAE C9                                   ret
 339+ 8CAF              ResetStar:              ;break
 340+ 8CAF                                      ;pop     de
 341+ 8CAF C1                                   pop     bc                                      ; 0
 342+ 8CB0 3A 3D 93                             ld      a,(NumberOfStarsNOSTM)
 343+ 8CB3 90                                   sub     b
 344+ 8CB4 57                                   ld      d,a
 345+ 8CB5 1E 06                                ld      e,6
 346+ 8CB7 ED 30                                mul
 347+ 8CB9 21 8A 94                             ld      hl,varDust
 348+ 8CBC 19                                   add     hl,de
 349+ 8CBD CD 59 8A                             call    InitStarAtHL
 350+ 8CC0 C3 A7 8C                             jp      NextStarLoop2
 351+ 8CC3              ;----------------------------------------------------------------------------------------------------------------------------------
 352+ 8CC3 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 353+ 8CC6 FD 7E 01                             ld      a,(iy+1)
 354+ 8CC9 6F                                   ld      l,a
 355+ 8CCA E6 7F                                and     $7F
 356+ 8CCC 47                                   ld      b,a
 357+ 8CCD CD 9E A1                             call    DIV16BCDivDEUNDOC
 358+ 8CD0 7D                                   ld      a,l
 359+ 8CD1                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 359+ 8CD1 CB 7F       >                        bit 	7,a
 359+ 8CD3 C2 DE 8C    >                        jp      nz,StarXNegativePoint
 360+ 8CD6              ;StarXPositivePoint:									; x was positive result
 361+ 8CD6 2E 80                                ld          l,ScreenCenterX						;
 362+ 8CD8 26 00                                ld          h,0
 363+ 8CDA 09                                   add         hl,bc								; hl = Screen Centre + X
 364+ 8CDB C3 E5 8C                             jp          StarStoreXPoint
 365+ 8CDE              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 366+ 8CDE 2E 80                                ld          l,ScreenCenterX
 367+ 8CE0 26 00                                ld          h,0
 368+ 8CE2                                      ClearCarryFlag
 368+ 8CE2 B7          >                    or a
 369+ 8CE3 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 370+ 8CE5              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 371+ 8CE5 7D                                   ld          a,l
 372+ 8CE6 32 E2 94                             ld          (varStarX),a
 373+ 8CE9 C9                                   ret
 374+ 8CEA
 375+ 8CEA FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 376+ 8CED FD 7E 03                             ld          a,(iy+3)
 377+ 8CF0 6F                                   ld          l,a
 378+ 8CF1 E6 7F                                and         $7F
 379+ 8CF3 47                                   ld          b,a
 380+ 8CF4 CD 9E A1                             call        DIV16BCDivDEUNDOC
 381+ 8CF7 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 382+ 8CF8                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 382+ 8CF8 CB 7F       >                        bit 	7,a
 382+ 8CFA C2 05 8D    >                        jp      nz,StarNegativeYPoint
 383+ 8CFD                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 384+ 8CFD 2E 60                               ld          l,ScreenCenterY
 385+ 8CFF                                      ClearCarryFlag
 385+ 8CFF B7          >                    or a
 386+ 8D00 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 387+ 8D02 C3 0A 8D                             jp          StarStoreYPoint
 388+ 8D05              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 389+ 8D05 2E 60                                ld          l,ScreenCenterY
 390+ 8D07 26 00                                ld          h,0
 391+ 8D09 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 392+ 8D0A              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 393+ 8D0A 7D                                   ld          a,l
 394+ 8D0B 32 E3 94                             ld          (varStarY),a
 395+ 8D0E C9                                   ret
 396+ 8D0F
 397+ 8D0F
# file closed: ./Universe/StarRoutines.asm
1059  8D0F              ;    include "Universe/move_object-MVEIT.asm"
1060  8D0F                  include "./ModelRender/draw_object.asm"
# file opened: ./ModelRender/draw_object.asm
   1+ 8D0F              JumpIfObjectIsPlanet:   MACRO target
   2+ 8D0F ~                                    ld a,(UbnkHullCopy)
   3+ 8D0F ~                                    bit 7,a
   4+ 8D0F ~                                    jp  nz,target
   5+ 8D0F                                      ENDM
   6+ 8D0F
   7+ 8D0F              SetMaxVisibility:       MACRO
   8+ 8D0F ~                                    ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
   9+ 8D0F ~                                    ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  10+ 8D0F                                      ENDM
  11+ 8D0F
  12+ 8D0F              JumpIfObjectOutsideFov: MACRO target
  13+ 8D0F ~            LL10CheckXInFoV:
  14+ 8D0F ~                                    ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  15+ 8D0F ~                                    ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  16+ 8D0F ~                                    or		a							    ; clear carry flag for sbc                                        ;         .
  17+ 8D0F ~                                    sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  18+ 8D0F ~                                    bit     7,h
  19+ 8D0F ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  20+ 8D0F ~            LL10CheckYInFoV:
  21+ 8D0F ~                                    ld		hl, (INWKyLo)                                                                                     ;         .
  22+ 8D0F ~                                    or		a							    ; clear carry flag                                                ;         .
  23+ 8D0F ~                                    sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  24+ 8D0F ~                                    bit     7,h
  25+ 8D0F ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  26+ 8D0F                                      ENDM
  27+ 8D0F
  28+ 8D0F              LL10AddGunNode:         MACRO
  29+ 8D0F ~                                    ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  30+ 8D0F ~                                    ld		c,a                                                                                               ;         if zhi = 0
  31+ 8D0F ~                                    ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  32+ 8D0F ~                                    ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  33+ 8D0F ~                                    ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  34+ 8D0F ~                                    add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  35+ 8D0F ~            MakeBothGunNodesVisible:
  36+ 8D0F ~                                    ld      (hl),a                          ; made both gun line notes visible always
  37+ 8D0F ~                                    inc     hl                              ;
  38+ 8D0F ~                                    ld      (hl),a                          ;
  39+ 8D0F                                      ENDM
  40+ 8D0F
  41+ 8D0F              JumpIfTooFarAway:       MACRO   target
  42+ 8D0F ~                                    ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  43+ 8D0F ~                                    ShiftHLDiv8                             ; z position / 8
  44+ 8D0F ~                                    ld      a,h                             ;
  45+ 8D0F ~                                    IfANotZeroGoto target                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  46+ 8D0F                                      ENDM
  47+ 8D0F
  48+ 8D0F              DisplayObject:
  49+ 8D0F              LL9:										; Draw object in current bank                                  ;;;; Display object LL9
  50+ 8D0F                 ; DEBUG JumpIfObjectIsPlanet LL25
  51+ 8D0F              ; .................................................................................................................................
  52+ 8D0F              LL9NotPlanet:
  53+ 8D0F                  SetMaxVisibility
  53+ 8D0F 3E 1F       >                        ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
  53+ 8D11 32 BD 91    >                        ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  54+ 8D14              ;LL9TestRemoveShip:
  55+ 8D14              ;    JumpOnMemBitSet UbnkNweb,7,EraseOldLines; if bit 7 is set goto EraseOldLines                         ;;;;    goto EraseOldLines
  56+ 8D14              ; .................................................................................................................................
  57+ 8D14              LL9NoEraseLines:
  58+ 8D14                  JumpOnMemBitSet UBnkexplDsp,5,DoExplosionOrClear7 ; mask for bit 5, exploding, display explosion state|missiles  EE28 bit5 set, explosion ongoing
  58+ 8D14 3A 2B C0    >                        ld      a,(UBnkexplDsp)
  58+ 8D17 CB 6F       >                        bit 	5,a
  58+ 8D19 C2 46 8D    >                        jp      nz,DoExplosionOrClear7
  59+ 8D1C                  JumpOnBitClear a,7,DoExplosionOrClear7  ; we now have it in A so EE28 bit7 clear, else Start blowing up!                      ;;;;
  59+ 8D1C CB 7F       >                        bit 	7,a
  59+ 8D1E CA 46 8D    >                        jp      z,DoExplosionOrClear7
  60+ 8D21 E6 3F        	and		$3F								; clear bits 7,6                                               ;;;; else
  61+ 8D23 32 2B C0     	ld		(UBnkexplDsp),a					; INWK+31                                                      ;;;;    clear bit 7 & 6 of INKW31
  62+ 8D26              ;...............................................................................................................................................................................
  63+ 8D26              LL9ZeroAccelRotCtr:
  64+ 8D26                  ldWriteZero UBnkAccel                   ; byte #28 accel (INF),Y                                       ;;;;    set UBnkAccel & UBnkrotZCounter to 0
  64+ 8D26 AF          >               xor      a
  64+ 8D27 32 28 C0    >               ld       (UBnkAccel),a
  65+ 8D2A DD 01        	break
  66+ 8D2C 32 2A C0         ld		(UBnkrotZCounter),a				; byte #30 rotz counter (INF),Y                                ;;;;
  67+ 8D2F CD 50 CD     	call	EraseOldLines					; EE51 \ if bit3 set erase old lines in XX19 heap              ;;;;    gosub erase old lines (EE51)
  68+ 8D32              ;...............................................................................................................................................................................
  69+ 8D32              LL9SetExploRad:
  70+ 8D32              	ldWriteConst 18,UbnKEdgeHeapCounter		; Counter for explosion radius                                 ;;;;    set explosion raidus XX19[1] to 18
  70+ 8D32 3E 12       >               ld       a,18
  70+ 8D34 32 F9 C2    >               ld       (UbnKEdgeHeapCounter),a
  71+ 8D37              	ldCopyByte ExplosionCtAddr,UbnkEdgeHeapBytes ; Hull byte#7 explosion of ship type e.g. &2A           ;;;;    set XX19 [2] to Explosion type for ship (i.e nbr of
  71+ 8D37 3A 09 C3    >               ld       a,(ExplosionCtAddr)
  71+ 8D3A 32 F7 C2    >               ld       (UbnkEdgeHeapBytes),a
  72+ 8D3D CD 69 96         call    fillHeapRandom4Points                                                                          ;;;;    set first 4 bytes of XX19 Heap to random number      ::EE55
  73+ 8D40 3A 14 C0         ld      a,(UBnKzsgn)                                                                                   ;;;;    set a to z pos sign
  74+ 8D43 C3 4E 8D     	jp      ObjectInFront                                                                                  ;;;;    goto DoExplosion
  75+ 8D46              ;...............................................................................................................................................................................
  76+ 8D46              DoExplosionOrClear7:	                                                                                   ;;;;
  77+ 8D46              EE28:										; bit5 set do explosion, or bit7 clear, dont kill.             ;;;;   DoExplosion:If z ccordinate sign is +ve
  78+ 8D46              EE49:
  79+ 8D46              	JumpOnMemBitSet UBnKzsgn,7,TestToRemove ; if zSign is negative then its behind so see if we remove
  79+ 8D46 3A 14 C0    >                        ld      a,(UBnKzsgn)
  79+ 8D49 CB 7F       >                        bit 	7,a
  79+ 8D4B C2 BC 8D    >                        jp      nz,TestToRemove
  80+ 8D4E              ;...............................................................................................................................................................................
  81+ 8D4E              ObjectInFront:
  82+ 8D4E              LL10:										; LL10	 object in front of you                                   ; if object z is > FarInFront
  83+ 8D4E                  JumpIfMemGTENusng UBnKzhi,FarInFront,TestToRemove  ; LL14		\ test to remove object                               ;    else if abs(x) > z or abs(y) > z
  83+ 8D4E 3A 13 C0    >                        ld     a,(UBnKzhi)
  83+ 8D51 FE C0       >                        cp     FarInFront
  83+ 8D53 D2 BC 8D    >                        jp	  nc,TestToRemove
  84+ 8D56              LL10CheckFov:
  85+ 8D56                  JumpIfObjectOutsideFov TestToRemove     ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  85+ 8D56             >LL10CheckXInFoV:
  85+ 8D56 2A 0C C0    >                        ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  85+ 8D59 ED 5B 12 C0 >                        ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  85+ 8D5D B7          >                        or		a							    ; clear carry flag for sbc                                        ;         .
  85+ 8D5E ED 52       >                        sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  85+ 8D60 CB 7C       >                        bit     7,h
  85+ 8D62 CA BC 8D    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  85+ 8D65             >LL10CheckYInFoV:
  85+ 8D65 2A 0F C0    >                        ld		hl, (INWKyLo)                                                                                     ;         .
  85+ 8D68 B7          >                        or		a							    ; clear carry flag                                                ;         .
  85+ 8D69 ED 52       >                        sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  85+ 8D6B CB 7C       >                        bit     7,h
  85+ 8D6D CA BC 8D    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  86+ 8D70              LookAtGunNode:
  87+ 8D70                  LL10AddGunNode                                                                                                ;         NodeHeap[GunVertex, GunVertex+1] = 255
  87+ 8D70 3A 08 C3    >                        ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  87+ 8D73 4F          >                        ld		c,a                                                                                               ;         if zhi = 0
  87+ 8D74 06 00       >                        ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  87+ 8D76 3E FF       >                        ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  87+ 8D78 21 C2 C0    >                        ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  87+ 8D7B 09          >                        add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  87+ 8D7C             >MakeBothGunNodesVisible:
  87+ 8D7C 77          >                        ld      (hl),a                          ; made both gun line notes visible always
  87+ 8D7D 23          >                        inc     hl                              ;
  87+ 8D7E 77          >                        ld      (hl),a                          ;
  88+ 8D7F              LL10TestTooFarAway:                         ; if zhi / 8 > 0 then its too far
  89+ 8D7F                  JumpIfTooFarAway SkipToAsFar            ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  89+ 8D7F 2A 12 C0    >                        ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  89+ 8D82             >                        ShiftHLDiv8                             ; z position / 8
  89+ 8D82 CB 3C       >			   srl h
  89+ 8D84 CB 1D       >			   rr  l
  89+ 8D86 CB 3C       >			   srl h
  89+ 8D88 CB 1D       >			   rr  l
  89+ 8D8A CB 3C       >			   srl h
  89+ 8D8C CB 1D       >			   rr  l
  89+ 8D8E 7C          >                        ld      a,h                             ;
  89+ 8D8F             >                        IfANotZeroGoto SkipToAsFar                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  89+ 8D8F FE 00       >				cp	0
  89+ 8D91 C2 A7 8D    >				jp	nz,SkipToAsFar
  90+ 8D94              LL10CloseEnoughToDraw:
  91+ 8D94              ; if zhi /16
  92+ 8D94 7C               ld      a,h                             ; get zHi shifted again
  93+ 8D95 CB 1F            rr      a                               ; bring in hi bit0 from last shiftHLRight1
  94+ 8D97 CB 3F            srl     a                               ;
  95+ 8D99 CB 3F            srl     a                               ;
  96+ 8D9B CB 3F            srl     a                               ; zhi is now max 31
  97+ 8D9D 32 90 C0         ld      (UBnkVisibility),a              ; set XX4 to result, If this occurs then it’s a guaranteed call to LL17 to draw.
  98+ 8DA0              ;    Note the use of hop for jump/branch instrunction Rather than hop being calc logic
  99+ 8DA0              ;    The original did a bransh on positive but 3 shift right logicalks means bit 7 can never be set
 100+ 8DA0              ObjectDrawForwards:
 101+ 8DA0 CD 4E 8E         call    DrawForwards
 102+ 8DA3 C9               ret
 103+ 8DA4 C3 A0 8D         jp      ObjectDrawForwards              ; LL17 guaranteed hop to Draw wireframe
 104+ 8DA7              ;...............................................................................................................................................................................
 105+ 8DA7              SkipToAsFar:
 106+ 8DA7              ; IF we are here then the ship may just be a dot, if its exploding thought that overrides dot
 107+ 8DA7              LL13:                                       ; hopped to as far
 108+ 8DA7              LL13DrawIfNearerThanDotDist:
 109+ 8DA7              ; if dot_distance >= z_hi then we can still draw ship
 110+ 8DA7                  JumpIfMemGTEMemusng DotAddr,UBnKzhi,ObjectDrawForwards
 110+ 8DA7 3A 0F C3    >                        ld   a,(DotAddr)
 110+ 8DAA 21 13 C0    >                        ld   hl,UBnKzhi
 110+ 8DAD BE          >                        cp   (hl)
 110+ 8DAE D2 A0 8D    >                        jp	  nc,ObjectDrawForwards
 111+ 8DB1              LL13DrawIfExplodingTest:
 112+ 8DB1              ; if exploding then draw ship
 113+ 8DB1 3A 2B C0         ld      a,(UBnkexplDsp)                 ; INWK+31	\ exploding/display state|missiles
 114+ 8DB4 E6 20            and     $20                             ; mask bit 5 exploding
 115+ 8DB6 C2 A0 8D         jp      nz,ObjectDrawForwards           ; LL17 hop over to Draw wireframe or exploding
 116+ 8DB9              LL13TooFarPlotPoint:
 117+ 8DB9 C3 CE 8D         jp      ShipPlotPoint                   ; SHPPT	\ else ship plot point, up.
 118+ 8DBC              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ 8DBC              ;...............................................................................................................................................................................
 120+ 8DBC              ;;;LL14
 121+ 8DBC              ;;;   if bit5 of INWK31 is set								  ::LL14
 122+ 8DBC              ;;;      clear bit 3 of INWK31
 123+ 8DBC              ;;;      goto DO Explosion (DOEXP )
 124+ 8DBC              ;;;   end if
 125+ 8DBC              ;;;   if bit 3 of INKWK 31 is set                             ::EE51
 126+ 8DBC              ;;;      clear bt 3 of INK31
 127+ 8DBC              ;;;      goto Clear Lines from X19
 128+ 8DBC              ;;;   else
 129+ 8DBC              ;;;      return from subroutine
 130+ 8DBC              ;;;
 131+ 8DBC              TestToRemove:                                                                                             ;;;;
 132+ 8DBC              LL14:										; Test to remove object                                        ;;;;
 133+ 8DBC              	JumpOnMemBitSet UBnkexplDsp,5,EraseOldLines  ; bit5 currently exploding?                                      ;;;;
 133+ 8DBC 3A 2B C0    >                        ld      a,(UBnkexplDsp)
 133+ 8DBF CB 6F       >                        bit 	5,a
 133+ 8DC1 C2 50 CD    >                        jp      nz,EraseOldLines
 134+ 8DC4              ; Ship is exploding
 135+ 8DC4              ; Not in documented code!!    JumpOnBitSet    a,7,EraseOldLines            ; bit7 ongoing explosion?                                      ;;;;
 136+ 8DC4 E6 F7        	and		$F7								; clear bit3  - No longer being drawn
 137+ 8DC6 32 2B C0     	ld		(UBnkexplDsp),a					; INWK+31
 138+ 8DC9 C3 CC 8D     	jp		DOEXP							; DOEXP \ Explosion                                               ;
 139+ 8DCC              ;; EraseOldLines is in file EraseOldLines-EE51.asm
 140+ 8DCC
 141+ 8DCC              DOEXP: ; TODO
 142+ 8DCC B7           	or a
 143+ 8DCD C9           	ret
 144+ 8DCE
# file closed: ./ModelRender/draw_object.asm
1061  8DCE                  include "./ModelRender/draw_ship_point.asm"
# file opened: ./ModelRender/draw_ship_point.asm
   1+ 8DCE
   2+ 8DCE
   3+ 8DCE              ShipPlotPoint:
   4+ 8DCE              SHPPT:	                                    ; ship plot as point from LL10
   5+ 8DCE CD 50 CD         call    EraseOldLines                   ; EE51	\ if bit3 set draw to erase lines in XX19 heap
   6+ 8DD1              SHPPT_ProjectToK3K4:
   7+ 8DD1 CD 21 CD         call    Project                         ; PROJ	\ Project K+INWK(x,y)/z to K3,K4 for craft center
   8+ 8DD4              SHPTOnScreenTest:
   9+ 8DD4 2A 4D 92     	ld		hl,(varK3)						; get X Y ccords from K3 and K4
  10+ 8DD7 ED 5B 53 92  	ld		de,(varK4)
  11+ 8DDB 7C           	ld		a,h
  12+ 8DDC B2           	or		d								;
  13+ 8DDD 20 27        	jr		nz,SHPTFinishup					; quick test to see if K3 or K4 hi are populated , if they are its too big (or negative coord)
  14+ 8DDF 7B           	ld		a,e								; k4 or Y lo
  15+ 8DE0              	JumpIfAGTENusng ViewHeight,SHPTFinishup	; off view port?
  15+ 8DE0 FE 80       >                        cp     ViewHeight
  15+ 8DE2 D2 06 8E    >                        jp		nc,SHPTFinishup
  16+ 8DE5              SHPTInjectFalseLine:						; it will always be 1 line only
  17+ 8DE5 3E 01        	ld		a,1
  18+ 8DE7 32 F4 C2     	ld		(UbnkLineArrayLen),a
  19+ 8DEA 3E 04        	ld		a,4
  20+ 8DEC 32 F4 C2     	ld		(UbnkLineArrayLen),a
  21+ 8DEF 55           	ld		d,l                             ; de = Y lo X hi
  22+ 8DF0 21 02 C2     	ld		hl,UbnkLineArray				; head of array
  23+ 8DF3 72           	ld		(hl),d
  24+ 8DF4 23           	inc		hl
  25+ 8DF5 73           	ld		(hl),e
  26+ 8DF6 23           	inc		hl
  27+ 8DF7 72           	ld		(hl),d
  28+ 8DF8 23           	inc		hl
  29+ 8DF9 73           	ld		(hl),e
  30+ 8DFA 23           	inc		hl								; write out point as a line for clean up later
  31+ 8DFB              SHPTIsOnScreen:
  32+ 8DFB 43           	ld		b,e
  33+ 8DFC 4A           	ld		c,d								; bc = XY
  34+ 8DFD 3E FF        	ld		a,ShipColour
  35+ 8DFF              	MMUSelectLayer2
  35+ 8DFF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 8E03 CD FF E0         call    l2_plot_pixel
  37+ 8E06              SHPTFinishup:
  38+ 8E06 3A 2B C0         ld      a,(UBnkexplDsp)
  39+ 8E09 E6 F7            and     $F7                             ;  clear bit3
  40+ 8E0B 32 2B C0         ld      (UBnkexplDsp),a                 ; set bit3 (to erase later) and plot as Dot display|missiles explosion state
  41+ 8E0E C9               ret                                     ; now it will return to the caller of
  42+ 8E0F
  43+ 8E0F              ; ---------------------------------------------------------------------------------------------------------------------------------
  44+ 8E0F                  INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++8E0F              ; ---------------------------------------------------------------------------------------------------------------------------------
   2++8E0F 00           DrawLinesCounter		db	0
   3++8E10              ; Initial tests look OK
   4++8E10              LL155:;
   5++8E10              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   6++8E10                    ;break                                                                             ; ObjectInFront:
   7++8E10 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   8++8E12 FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
   9++8E14 3A F4 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  10++8E17                                      ReturnIfAIsZero   						; No lines then bail out.
  10++8E17 A7          >                    and a
  10++8E18 C8          >                    ret    z
  11++8E19 FD 67                                ld		iyh,a			                ; number of lines still to draw
  12++8E1B 21 02 C2                             ld		hl,UbnkLineArray
  13++8E1E              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  14++8E1E 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  15++8E1F 23                                   inc     hl
  16++8E20 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  17++8E21 23                                   inc     hl
  18++8E22              ;;DEBUGTEST        push bc
  19++8E22              ;;DEBUGTEST        push hl
  20++8E22              ;;DEBUGTEST        push de
  21++8E22              ;;DEBUGTEST        ld  a,$3F
  22++8E22              ;;DEBUGTEST        MMUSelectLayer2
  23++8E22              ;;DEBUGTEST        call    l2_plot_pixel
  24++8E22              ;;DEBUGTEST        pop de
  25++8E22              ;;DEBUGTEST        pop hl
  26++8E22              ;;DEBUGTEST        pop bc
  27++8E22 5E                                   ld      e,(hl)                          ; c = varX1
  28++8E23 23                                   inc     hl
  29++8E24 56                                   ld      d,(hl)                          ; de = point2 Y,X
  30++8E25              ;;DEBUGTEST       push bc
  31++8E25              ;;DEBUGTEST       push hl
  32++8E25              ;;DEBUGTEST       push de
  33++8E25              ;;DEBUGTEST       push de
  34++8E25              ;;DEBUGTEST       pop  bc
  35++8E25              ;;DEBUGTEST       ld  a,$3F
  36++8E25              ;;DEBUGTEST       MMUSelectLayer2
  37++8E25              ;;DEBUGTEST       call    l2_plot_pixel
  38++8E25              ;;DEBUGTEST       pop de
  39++8E25              ;;DEBUGTEST       pop hl
  40++8E25              ;;DEBUGTEST       pop bc
  41++8E25 23                                   inc     hl
  42++8E26 E5                                   push	hl
  43++8E27 FD E5                                push    iy
  44++8E29 60                                   ld      h,b
  45++8E2A 69                                   ld      l,c
  46++8E2B                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  47++8E2B FD 7D                                ld		a,iyl							; get colour back before calling line draw
  48++8E2D                                      MMUSelectLayer2
  48++8E2D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  49++8E31 CD EE E8                             call    LineHLtoDE
  50++8E34 FD E1                                pop     iy
  51++8E36 E1                                   pop	    hl
  52++8E37 FD 25                                dec     iyh
  53++8E39 20 E3                                jr		nz,DrawXX19ClippedLines
  54++8E3B C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  55++8E3C
# file closed: ././ModelRender/DrawLines.asm
  45+ 8E3C
  46+ 8E3C              ;
  47+ 8E3C              ;DrawLineBCtoDE:
  48+ 8E3C              ;LIONBCDE:
  49+ 8E3C              ;    -- Set colour etc
  50+ 8E3C              ;    call    l2_draw_diagonal:
  51+ 8E3C              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  52+ 8E3C
# file closed: ./ModelRender/draw_ship_point.asm
1062  8E3C                  include "./ModelRender/drawforwards-LL17.asm"
# file opened: ./ModelRender/drawforwards-LL17.asm
   1+ 8E3C              SetLastFaceVisible: MACRO
   2+ 8E3C ~                                ld      a,$FF                       ; last normal is always visible                                                         ;;;
   3+ 8E3C ~                                ld      (UbnkFaceVisArray+15),a     ; XX2+15                                                                                ;;;
   4+ 8E3C                                  ENDM
   5+ 8E3C
   6+ 8E3C 3E FF        SetLastFaceVisCall: ld      a,$FF
   7+ 8E3E 32 B3 C0                         ld      (UbnkFaceVisArray+15),a
   8+ 8E41 C9                               ret
   9+ 8E42
  10+ 8E42              CheckIfExplodingCall:
  11+ 8E42              ; DEBUG TODO turn into MACRO later
  12+ 8E42              ; Sets Z flag to true if only some faces are visible
  13+ 8E42              ; Clears Z flag if exploding so all faces should be rendered
  14+ 8E42 3A 2B C0             ld      a,(UBnkexplDsp)                 ; INWK+31                                                                               ;;; If bit 5 of exploding state is clear
  15+ 8E45              ;;DEBUG
  16+ 8E45 F6 FF                or      $FF ; force bit 5 set so exploding
  17+ 8E47 32 2B C0             ld      (UBnkexplDsp),a
  18+ 8E4A              ;;DEBUG
  19+ 8E4A 4F                   ld      c,a                         ; save explDsp into c                                                                   ;;;
  20+ 8E4B E6 20                and     $20                         ; mask bit5 exploding                                                                   ;;;
  21+ 8E4D C9                   ret
  22+ 8E4E
  23+ 8E4E
  24+ 8E4E              DrawForwardsIXL:
  25+ 8E4E              DrawForwards:
  26+ 8E4E              LL17:                                       ; draw Wireframe (including nodes exploding)                                            ;;; LL17 draw Wireframe
  27+ 8E4E              ; Copy the three orientation vectors into XX16
  28+ 8E4E CD C1 CF     LL15:   call    CopyRotmatToTransMat        ; Copy Ship rotation to XX16                                                                                          ;;; load object position to camera matrix XX16 			::LL91 (ish)
  29+ 8E51              ;;;;LL21:   call    NormaliseTransMat       ; Normalise XX16
  30+ 8E51 CD 77 D2     LL91lc: call    LoadCraftToCamera           ; Load Ship Coords to XX18
  31+ 8E54              ; ......................................................                                                                            ;;;
  32+ 8E54              LastNormalAlwaysVisible:
  33+ 8E54 CD 3C 8E             call    SetLastFaceVisCall          ; DEBUG TODO revert back to MACRO later                                                                                                          ;;; Set last Normal to visible FF regarless
  34+ 8E57              ; HEre original does LDY 12
  35+ 8E57              ; ......................................................                                                                            ;;; (Originally loaded faces count here and stored in B, but will remove to simplify code)
  36+ 8E57              CheckIfExplodingState:
  37+ 8E57 CD 42 8E             call    CheckIfExplodingCall
  38+ 8E5A 28 0C                jr      z,CullBackFaces             ; EE29 no, only Some visible                                                            ;;;    Goto EE29 - Only some faces visible
  39+ 8E5C              ; ......................................................                                                                            ;;; else
  40+ 8E5C              ItIsExploding:
  41+ 8E5C              MakeAllFacesVisible:                                                                                                                        ;;;    Set all faces in XX0 visible
  42+ 8E5C CD DD D0             call    SetAllFacesVisible          ; code point EE30                                                                      ;;;
  43+ 8E5F 06 00                ld      b,0                         ; X = 0                                                                                 ;;;
  44+ 8E61                      ldWriteZero LastNormalVisible       ; XX4  \ visibility                                                                     ;;;    XX4 visibility = 0
  44+ 8E61 AF          >               xor      a
  44+ 8E62 32 BD 91    >               ld       (LastNormalVisible),a
  45+ 8E65              LL41:                                       ; visibilities now set in XX2,X Transpose matrix.                                       ;;;
  46+ 8E65 C3 6B 8E             jp      TransposeMatrix             ; LL42 \ jump to transpose matrix and onwards                                           ;;;    goto LL42
  47+ 8E68              ; ......................................................                                                                            ;;;
  48+ 8E68              CullBackFaces:
  49+ 8E68              EE29Entry:
  50+ 8E68 CD 66 D5             call    CullV2
  51+ 8E6B              ;-- All normals' visibilities now set in XX2,X                                                                                      ;;;
  52+ 8E6B              TransposeMatrix:
  53+ 8E6B              LL42:	                                    ; DO nodeX-Ycoords their comment  \  TrnspMat                                           ;;; ......................................................
  54+ 8E6B CD 44 D1             call    InverseXX16
  55+ 8E6E
  56+ 8E6E
  57+ 8E6E CD AF DC             call    ProcessNodes                ; Loop through and determine visibility based on faces and position
  58+ 8E71              DrawResults:
  59+ 8E71 CD 81 DD             call    PrepLines                   ; LL72, process lines and clip
  60+ 8E74 CD 10 8E             call    DrawLines                   ; Need to plot all lines
  61+ 8E77 C9                   ret
  62+ 8E78
# file closed: ./ModelRender/drawforwards-LL17.asm
1063  8E78
1064  8E78                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 8E78
   2+ 8E78 00           memfillvalue		DB 0
   3+ 8E79 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 8E7D 7D
   4+ 8E7E 78 8E        memfill_astrt  		DW memfillvalue
   5+ 8E80 00 40        memfill_length 		DB $00,$40
   6+ 8E82 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 8E85 00 00        memfill_bstrt  		DB $00,$00
   8+ 8E87 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 8E8B              memfill_cmd_len	  	EQU $ - memfill
  10+ 8E8B
  11+ 8E8B              memfill_dma:
  12+ 8E8B              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 8E8B              .set_fill_value:
  14+ 8E8B 32 78 8E     	ld 		(memfillvalue),a
  15+ 8E8E              .set_target:
  16+ 8E8E 22 85 8E     	ld		(memfill_bstrt),hl
  17+ 8E91              .set_length:
  18+ 8E91 ED 53 80 8E  	ld		(memfill_length),de
  19+ 8E95              .write_dma:
  20+ 8E95 21 79 8E     	ld 		hl, memfill
  21+ 8E98 06 12        	ld 		b, memfill_cmd_len
  22+ 8E9A 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 8E9C ED B3        	otir
  24+ 8E9E C9           	ret
  25+ 8E9F
# file closed: ./Hardware/memfill_dma.asm
1065  8E9F                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 8E9F
   2+ 8E9F 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 8EA3 7D
   3+ 8EA4 00 00        memcopy_astrt  		DB $00,$00
   4+ 8EA6 00 40        memcopy_length 		DB $00,$40
   5+ 8EA8 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 8EAB 00 00        memcopy_bstrt  		DB $00,$00
   7+ 8EAD 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 8EB1              memcopy_cmd_len	  	equ $ - memcopy
   9+ 8EB1
  10+ 8EB1              memcopy_dma:
  11+ 8EB1              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 8EB1              .set_target:
  13+ 8EB1 22 AB 8E     	ld		(memcopy_bstrt),hl
  14+ 8EB4              .set_source:
  15+ 8EB4 ED 53 A4 8E  	ld		(memcopy_astrt),de
  16+ 8EB8              .set_length:
  17+ 8EB8 ED 43 A6 8E  	ld		(memcopy_length),bc
  18+ 8EBC              .write_dma:
  19+ 8EBC 21 9F 8E     	ld 		hl, memcopy
  20+ 8EBF 06 12        	ld 		b, memcopy_cmd_len
  21+ 8EC1 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 8EC3 ED B3        	otir
  23+ 8EC5 C9           	ret
  24+ 8EC6
# file closed: ./Hardware/memcopy_dma.asm
1066  8EC6                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 8EC6              ;
   2+ 8EC6              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 8EC6              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 8EC6              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 8EC6              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 8EC6              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 8EC6              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 8EC6              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 8EC6              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 8EC6              ;
  11+ 8EC6              ; Keyboard
  12+ 8EC6              ;
  13+ 8EC6              ;   0      1       2       3       4       5        6       7       8       9
  14+ 8EC6              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 8EC6              ;   10     11      12      13      14      15       16      17      18      19
  16+ 8EC6              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 8EC6              ;   20     21      22      23      24      25       26      27      28      29
  18+ 8EC6              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 8EC6              ;   30     31      32      33      34      35       36      37      38      39
  20+ 8EC6              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 8EC6              ;
  22+ 8EC6              ; Default map
  23+ 8EC6              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 8EC6              ;   0          1           2             3              4           5           6           7           8           9
  25+ 8EC6              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 8EC6              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 8EC6              ;                                                                                                       Find System
  28+ 8EC6              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 8EC6              ;   10         11          12            13             14          15          16          17          18          19
  30+ 8EC6              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 8EC6              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 8EC6              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 8EC6              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 8EC6              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 8EC6              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 8EC6              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 8EC6              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 8EC6              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 8EC6              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 8EC6              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 8EC6              ;              ResumeGame
  42+ 8EC6
  43+ 8EC6              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 8EC6
  45+ 8EC6              c_Pressed_Front         equ 0  * 2
  46+ 8EC6              c_Pressed_Aft           equ 1  * 2
  47+ 8EC6              c_Pressed_Left          equ 2  * 2
  48+ 8EC6              c_Pressed_Right         equ 3  * 2
  49+ 8EC6              c_Pressed_RollLeft      equ 4  * 2
  50+ 8EC6              c_Pressed_RollRight     equ 5  * 2
  51+ 8EC6              c_Pressed_Dive          equ 6  * 2
  52+ 8EC6              c_Pressed_Climb         equ 7  * 2
  53+ 8EC6              c_Pressed_Accellerate   equ 8  * 2
  54+ 8EC6              c_Pressed_Decellerate   equ 9  * 2
  55+ 8EC6              c_Pressed_FireLaser     equ 10 * 2
  56+ 8EC6              c_Pressed_TargetMissle  equ 11 * 2
  57+ 8EC6              c_Pressed_FireMissile   equ 12 * 2
  58+ 8EC6              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 8EC6              c_Pressed_ECM           equ 14 * 2
  60+ 8EC6              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 8EC6              c_Pressed_EscapePod     equ 16 * 2
  62+ 8EC6              c_Pressed_DockingComp   equ 17 * 2
  63+ 8EC6              c_Pressed_Hyperspace    equ 18 * 2
  64+ 8EC6              c_Pressed_Distance      equ 19 * 2
  65+ 8EC6              c_Pressed_HomeCursor    equ 20 * 2
  66+ 8EC6              c_Pressed_Launch        equ 21 * 2
  67+ 8EC6              c_Pressed_BuyCargo      equ 22 * 2
  68+ 8EC6              c_Pressed_SellCargo     equ 23 * 2
  69+ 8EC6              c_Pressed_Equip         equ 24 * 2
  70+ 8EC6              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 8EC6              c_Pressed_LocalChart    equ 26 * 2
  72+ 8EC6              c_Pressed_MarketPrices  equ 27 * 2
  73+ 8EC6              c_Pressed_Status        equ 28 * 2
  74+ 8EC6              c_Pressed_Inventory     equ 29 * 2
  75+ 8EC6              c_Pressed_GameSkip      equ 30 * 2
  76+ 8EC6              c_Pressed_Save          equ 31 * 2
  77+ 8EC6              c_Pressed_Freeze        equ 32 * 2
  78+ 8EC6              c_Pressed_Resume        equ 33 * 2
  79+ 8EC6              c_Pressed_Recentre      equ 34 * 2
  80+ 8EC6              c_Pressed_Quit          equ 35 * 2
  81+ 8EC6              c_Pressed_PlanetData    equ 36 * 2
  82+ 8EC6              c_Pressed_CursorUp      equ 37 * 2
  83+ 8EC6              c_Pressed_CursorDown    equ 38 * 2
  84+ 8EC6              c_Pressed_Find          equ 39 * 2
  85+ 8EC6
  86+ 8EC6              ; half row 1
  87+ 8EC6              VK_CAPS  				equ 0
  88+ 8EC6              VK_Z  					equ 1
  89+ 8EC6              VK_X  					equ 2
  90+ 8EC6              VK_C  					equ 3
  91+ 8EC6              VK_V  					equ 4
  92+ 8EC6              ; half row 2
  93+ 8EC6              VK_A  					equ 5
  94+ 8EC6              VK_S  					equ 6
  95+ 8EC6              VK_D  					equ 7
  96+ 8EC6              VK_F  					equ 8
  97+ 8EC6              VK_G  					equ 9
  98+ 8EC6              ; half row 3
  99+ 8EC6              VK_Q  					equ 10
 100+ 8EC6              VK_W  					equ 11
 101+ 8EC6              VK_E  					equ 12
 102+ 8EC6              VK_R  					equ 13
 103+ 8EC6              VK_T  					equ 14
 104+ 8EC6              ; half row 4
 105+ 8EC6              VK_1  					equ 15
 106+ 8EC6              VK_2  					equ 16
 107+ 8EC6              VK_3  					equ 17
 108+ 8EC6              VK_4  					equ 18
 109+ 8EC6              VK_5  					equ 19
 110+ 8EC6              ; half row 5
 111+ 8EC6              VK_0 					equ 20
 112+ 8EC6              VK_9 					equ 21
 113+ 8EC6              VK_8 					equ 22
 114+ 8EC6              VK_7 					equ 23
 115+ 8EC6              VK_6 					equ 24
 116+ 8EC6              ; half row 6
 117+ 8EC6              VK_P  					equ 25
 118+ 8EC6              VK_O  					equ 26
 119+ 8EC6              VK_I  					equ 27
 120+ 8EC6              VK_U  					equ 28
 121+ 8EC6              VK_Y  					equ 29
 122+ 8EC6              ; half row 7
 123+ 8EC6              VK_ENTER 				equ 30
 124+ 8EC6              VK_L  					equ 31
 125+ 8EC6              VK_K  					equ 32
 126+ 8EC6              VK_J  					equ 33
 127+ 8EC6              VK_H  					equ 34
 128+ 8EC6              ; half row 8
 129+ 8EC6              VK_SPACE 				equ 35
 130+ 8EC6              VK_SYM  				equ 36
 131+ 8EC6              VK_M  					equ 37
 132+ 8EC6              VK_N  					equ 38
 133+ 8EC6              VK_B  					equ 39
 134+ 8EC6
 135+ 8EC6              ;KeyboardMapping
 136+ 8EC6              KeyCode_Front        	equ VK_1
 137+ 8EC6              KeyCode_Aft          	equ VK_2
 138+ 8EC6              KeyCode_Left         	equ VK_3
 139+ 8EC6              KeyCode_Right        	equ VK_4
 140+ 8EC6              KeyCode_RollLeft     	equ VK_O
 141+ 8EC6              KeyCode_RollRight    	equ VK_P
 142+ 8EC6              KeyCode_Dive         	equ VK_Q
 143+ 8EC6              KeyCode_Climb        	equ VK_A
 144+ 8EC6              KeyCode_Accellerate  	equ VK_W
 145+ 8EC6              KeyCode_Decellerate  	equ VK_S
 146+ 8EC6              KeyCode_FireLaser    	equ VK_SPACE
 147+ 8EC6              KeyCode_TargetMissle 	equ VK_T
 148+ 8EC6              KeyCode_FireMissile  	equ VK_F
 149+ 8EC6              KeyCode_Find        	equ VK_F
 150+ 8EC6              KeyCode_UnarmMissile 	equ VK_R
 151+ 8EC6              KeyCode_ECM          	equ VK_E
 152+ 8EC6              KeyCode_EnergyBomb   	equ VK_U
 153+ 8EC6              KeyCode_EscapePod    	equ VK_CAPS
 154+ 8EC6              KeyCode_DockingComp  	equ VK_N
 155+ 8EC6              KeyCode_Hyperspace   	equ VK_H
 156+ 8EC6              KeyCode_Distance     	equ VK_J
 157+ 8EC6              KeyCode_HomeCursor   	equ VK_G
 158+ 8EC6              KeyCode_Launch       	equ VK_L
 159+ 8EC6              KeyCode_BuyCargo     	equ VK_B
 160+ 8EC6              KeyCode_SellCargo    	equ VK_V
 161+ 8EC6              KeyCode_Equip        	equ VK_C
 162+ 8EC6              KeyCode_GalacticChrt 	equ VK_5
 163+ 8EC6              KeyCode_LocalChart   	equ VK_6
 164+ 8EC6              KeyCode_MarketPrices 	equ VK_7
 165+ 8EC6              KeyCode_Status       	equ VK_8
 166+ 8EC6              KeyCode_Inventory    	equ VK_9
 167+ 8EC6              KeyCode_GameSkip     	equ VK_Z
 168+ 8EC6              KeyCode_Save         	equ VK_O
 169+ 8EC6              KeyCode_Freeze       	equ VK_B
 170+ 8EC6              KeyCode_Resume       	equ VK_L
 171+ 8EC6              KeyCode_Recentre     	equ VK_D
 172+ 8EC6              KeyCode_Quit         	equ VK_Y
 173+ 8EC6              KeyCode_PlanetData   	equ VK_0
 174+ 8EC6              KeyCode_CursorUp        equ VK_Q
 175+ 8EC6              KeyCode_CursorDown      equ VK_A
 176+ 8EC6
 177+ 8EC6 00 00 00...  Keys					DS	40
 178+ 8EEE              c_KeyBoardLen 			equ $ - Keys
 179+ 8EEE 00 00 00...  RawKeys					DS	8
 180+ 8EF6 FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 8EFA FE FB FE F7
 180+ 8EFE FE EF FE DF
 180+ 8F02 FE BF FE 7F
 181+ 8F06              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 8F06              ; of updating this table with the respective location to look up
 183+ 8F06              ; key list sequence is in table above
 184+ 8F06 D5 8E D6 8E  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 8F0A D7 8E D8 8E
 184+ 8F0E E0 8E
 185+ 8F10 DF 8E D0 8E                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 8F14 CB 8E D1 8E
 185+ 8F18 CC 8E
 186+ 8F1A E9 8E D4 8E                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 8F1E CE 8E D3 8E
 186+ 8F22 D2 8E
 187+ 8F24 E2 8E C6 8E                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 8F28 EC 8E E8 8E
 187+ 8F2C E7 8E
 188+ 8F2E CF 8E E5 8E                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 8F32 ED 8E CA 8E
 188+ 8F36 C9 8E
 189+ 8F38 D9 8E DE 8E                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 8F3C DD 8E DC 8E
 189+ 8F40 DB 8E
 190+ 8F42 C7 8E E0 8E                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 8F46 ED 8E E5 8E
 190+ 8F4A CD 8E
 191+ 8F4C E3 8E DA 8E                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 8F50 D0 8E CB 8E
 191+ 8F54 CE 8E
 192+ 8F56
 193+ 8F56 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 193+ 8F5A 56
 194+ 8F5B 41 53 44 46                          DB "A","S","D","F","G"
 194+ 8F5F 47
 195+ 8F60 51 57 45 52                          DB "Q","W","E","R","T"
 195+ 8F64 54
 196+ 8F65 31 32 33 34                          DB "1","2","3","4","5"
 196+ 8F69 35
 197+ 8F6A 30 39 38 37                          DB "0","9","8","7","6"
 197+ 8F6E 36
 198+ 8F6F 50 4F 49 55                          DB "P","O","I","U","Y"
 198+ 8F73 59
 199+ 8F74 3E 4C 4B 4A                          DB ">","L","K","J","H"
 199+ 8F78 48
 200+ 8F79 20 5E 4D 4E                          DB " ","^","M","N","B"
 200+ 8F7D 42
 201+ 8F7E
 202+ 8F7E
 203+ 8F7E              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 8F7E              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 8F7E              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 8F7E              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 8F7E              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 8F7E              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 8F7E              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 8F7E              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 8F7E              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 8F7E              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 8F7E              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 8F7E              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 8F7E              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 8F7E              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 8F7E              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 8F7E              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 8F7E              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 8F7E              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 8F7E              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 8F7E              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 8F7E              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 8F7E              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 8F7E              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 8F7E              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 8F7E              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 8F7E              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 8F7E              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 8F7E              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 8F7E              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 8F7E              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 8F7E              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 8F7E              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 8F7E              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 8F7E              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 8F7E              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 8F7E              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 8F7E              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 8F7E              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 8F7E              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 8F7E              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 8F7E
 244+ 8F7E
 245+ 8F7E              MIsKeyPressed:      MACRO   keyaddress, misstarget
 246+ 8F7E ~                                ld      hl,(keyaddress)
 247+ 8F7E ~                                ld      a,(hl)
 248+ 8F7E ~                                IfAIsZeroGoto   misstarget
 249+ 8F7E                                  ENDM
 250+ 8F7E
 251+ 8F7E 21 C6 8E     init_keyboard:      ld		hl,Keys
 252+ 8F81 11 28 00                         ld		de, c_KeyBoardLen
 253+ 8F84 3E 00                            ld		a,0
 254+ 8F86 CD 8B 8E                         call	memfill_dma
 255+ 8F89 C9                               ret
 256+ 8F8A
 257+ 8F8A 21 EE 8E     scan_keyboard:      ld		hl,RawKeys
 258+ 8F8D 11 F6 8E                         ld		de,KeyAddrTab
 259+ 8F90 AF                               xor		a
 260+ 8F91 FD 2E 08                         ld		iyl,8
 261+ 8F94 DD 21 C6 8E                      ld      ix,Keys
 262+ 8F98 1A           .PortReadLoop:      ld		a,(de)							; Set up BC as port to read
 263+ 8F99 4F                               ld		c,a
 264+ 8F9A 13                               inc		de
 265+ 8F9B 1A                               ld      a,(de)
 266+ 8F9C 47                               ld		b,a
 267+ 8F9D 13                               inc		de
 268+ 8F9E ED 78                            in		a,(c)							; read port to a
 269+ 8FA0 77                               ld		(hl),a							; set raw keys to value
 270+ 8FA1 23                               inc		hl								; and ready for next element
 271+ 8FA2 06 05                            ld		b,5								; loop all bits (there are only 5 keys to a group)
 272+ 8FA4 CB 47        .ProcessBitsLoop:   bit		0,a								; is bit set
 273+ 8FA6 28 07                            jr      z,.SetKeyPressed
 274+ 8FA8 08                               ex      af,af'
 275+ 8FA9 AF                               xor     a
 276+ 8FAA C3 B6 8F                         jp      .SetKey
 277+ 8FAD 20 0B                            jr		nz,.SkipKeySet
 278+ 8FAF 08           .SetKeyPressed:	    ex		af,af'
 279+ 8FB0 DD 7E 00                         ld      a,(ix+0)
 280+ 8FB3 3C                               inc     a
 281+ 8FB4 E6 03                            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 282+ 8FB6 DD 77 00     .SetKey:            ld		(ix+0),a							; Key Pressed
 283+ 8FB9 08                               ex		af,af'
 284+ 8FBA DD 23        .SkipKeySet:	    inc		ix								; move to next key
 285+ 8FBC CB 3F                            srl		a								; move next key into bit 0
 286+ 8FBE 10 E4                            djnz	.ProcessBitsLoop				; Process all key group bits
 287+ 8FC0 FD 2D                            dec     iyl
 288+ 8FC2 20 D4                            jr      nz,.PortReadLoop				; Read next input port
 289+ 8FC4 C9                               ret
 290+ 8FC5
 291+ 8FC5              GetKeyStateAddressDE: MACRO
 292+ 8FC5 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 293+ 8FC5 ~                                  add     hl,a
 294+ 8FC5 ~                                  ld      a,(hl)
 295+ 8FC5 ~                                  ld      e,a
 296+ 8FC5 ~                                  inc     hl
 297+ 8FC5 ~                                  ld      a,(hl)
 298+ 8FC5 ~                                  ld      d,a                             ; now de = address in keypress list
 299+ 8FC5                                    ENDM
 300+ 8FC5
 301+ 8FC5
 302+ 8FC5              ; call with a = c_Pressed key, will then read mapping
 303+ 8FC5              wait_for_key_a_press:       GetKeyStateAddressDE
 303+ 8FC5 21 06 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 303+ 8FC8 ED 31       >                      add     hl,a
 303+ 8FCA 7E          >                      ld      a,(hl)
 303+ 8FCB 5F          >                      ld      e,a
 303+ 8FCC 23          >                      inc     hl
 303+ 8FCD 7E          >                      ld      a,(hl)
 303+ 8FCE 57          >                      ld      d,a                             ; now de = address in keypress list
 304+ 8FCF D5                                       push    de
 305+ 8FD0 CD 8A 8F     wait_for_key_press_loop:    call    scan_keyboard
 306+ 8FD3 E1                                       pop     hl                              ; get key address into hl
 307+ 8FD4 E5                                       push    hl
 308+ 8FD5 7E                                       ld      a,(hl)
 309+ 8FD6                                          JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 309+ 8FD6 FE 01       >                cp     1
 309+ 8FD8 C2 D0 8F    >                jp      nz,wait_for_key_press_loop
 310+ 8FDB E1                                       pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 311+ 8FDC C9                                       ret
 312+ 8FDD
 313+ 8FDD              wait_for_key_a_held:        GetKeyStateAddressDE
 313+ 8FDD 21 06 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 313+ 8FE0 ED 31       >                      add     hl,a
 313+ 8FE2 7E          >                      ld      a,(hl)
 313+ 8FE3 5F          >                      ld      e,a
 313+ 8FE4 23          >                      inc     hl
 313+ 8FE5 7E          >                      ld      a,(hl)
 313+ 8FE6 57          >                      ld      d,a                             ; now de = address in keypress list
 314+ 8FE7 D5                                       push    de
 315+ 8FE8 CD 8A 8F     wait_for_key_a_held_loop:   call    scan_keyboard
 316+ 8FEB E1                                       pop     hl
 317+ 8FEC E5                                       push    hl
 318+ 8FED 7E                                       ld      a,(hl)
 319+ 8FEE                                          JumpIfALTNusng  2,wait_for_key_a_held_loop
 319+ 8FEE FE 02       >                        cp      2
 319+ 8FF0 DA E8 8F    >                        jp		c, wait_for_key_a_held_loop
 320+ 8FF3 E1                                       pop     hl
 321+ 8FF4 C9                                       ret
 322+ 8FF5
 323+ 8FF5              get_key_a_state:            GetKeyStateAddressDE                 ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 323+ 8FF5 21 06 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 323+ 8FF8 ED 31       >                      add     hl,a
 323+ 8FFA 7E          >                      ld      a,(hl)
 323+ 8FFB 5F          >                      ld      e,a
 323+ 8FFC 23          >                      inc     hl
 323+ 8FFD 7E          >                      ld      a,(hl)
 323+ 8FFE 57          >                      ld      d,a                             ; now de = address in keypress list
 324+ 8FFF EB                                       ex      de,hl
 325+ 9000 7E                                       ld      a,(hl)                        ; a = keystate
 326+ 9001 C9                                       ret
 327+ 9002
 328+ 9002              force_key_press:            GetKeyStateAddressDE
 328+ 9002 21 06 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 328+ 9005 ED 31       >                      add     hl,a
 328+ 9007 7E          >                      ld      a,(hl)
 328+ 9008 5F          >                      ld      e,a
 328+ 9009 23          >                      inc     hl
 328+ 900A 7E          >                      ld      a,(hl)
 328+ 900B 57          >                      ld      d,a                             ; now de = address in keypress list
 329+ 900C EB                                       ex      de,hl
 330+ 900D 3E 01                                    ld      a,1
 331+ 900F 77                                       ld      (hl),a
 332+ 9010 C9                                       ret
 333+ 9011
 334+ 9011              ; returns z is set if c_ key is pressed
 335+ 9011              is_key_pressed:             GetKeyStateAddressDE
 335+ 9011 21 06 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 9014 ED 31       >                      add     hl,a
 335+ 9016 7E          >                      ld      a,(hl)
 335+ 9017 5F          >                      ld      e,a
 335+ 9018 23          >                      inc     hl
 335+ 9019 7E          >                      ld      a,(hl)
 335+ 901A 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 901B EB                                       ex      de,hl
 337+ 901C 7E                                       ld      a,(hl)                          ; a = keystate
 338+ 901D FE 01                                    cp      1
 339+ 901F C9                                       ret
 340+ 9020
 341+ 9020              ; returns z is set if c_ key is held
 342+ 9020              is_key_held:                GetKeyStateAddressDE
 342+ 9020 21 06 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 9023 ED 31       >                      add     hl,a
 342+ 9025 7E          >                      ld      a,(hl)
 342+ 9026 5F          >                      ld      e,a
 342+ 9027 23          >                      inc     hl
 342+ 9028 7E          >                      ld      a,(hl)
 342+ 9029 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 902A EB                                       ex      de,hl
 344+ 902B 7E                                       ld      a,(hl)                          ; a = keystate
 345+ 902C E6 02                                    and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 346+ 902E FE 02                                    cp      2
 347+ 9030 C9                                       ret
 348+ 9031
 349+ 9031              is_any_key_pressed:
 350+ 9031 21 C6 8E         ld      hl,Keys
 351+ 9034 06 28            ld      b,40
 352+ 9036 0E 00            ld      c,0
 353+ 9038              .KeyReadLoop:
 354+ 9038 7E               ld      a,(hl)
 355+ 9039 FE 01            cp      1
 356+ 903B CA 45 90         jp      z,.KeyPressed
 357+ 903E 23               inc     hl
 358+ 903F 0C               inc     c
 359+ 9040 10 F6            djnz    .KeyReadLoop
 360+ 9042 3E FF            ld      a,$FF
 361+ 9044 C9               ret
 362+ 9045              .KeyPressed:
 363+ 9045 79               ld      a,c
 364+ 9046 C9               ret
 365+ 9047
 366+ 9047              is_any_key_held:
 367+ 9047 21 C6 8E         ld      hl,Keys
 368+ 904A 06 28            ld      b,40
 369+ 904C 0E 00            ld      c,0
 370+ 904E              .KeyReadLoop:
 371+ 904E 7E               ld      a,(hl)
 372+ 904F E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 373+ 9051 FE 02            cp      2
 374+ 9053 CA 5D 90         jp      z,.KeyPressed
 375+ 9056 23               inc     hl
 376+ 9057 0C               inc     c
 377+ 9058 10 F4            djnz    .KeyReadLoop
 378+ 905A 3E FF            ld      a,$FF
 379+ 905C C9               ret
 380+ 905D              .KeyPressed:
 381+ 905D 79               ld      a,c
 382+ 905E C9               ret
 383+ 905F
 384+ 905F
 385+ 905F 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 386+ 907D 00                                   DB  0               ; end of string marker as a safety
 387+ 907E 00           InputCursor             DB  0
 388+ 907F 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 389+ 9080 00           InputChanged            DB  0
 390+ 9081              InputLimit              EQU 20
 391+ 9081
 392+ 9081              keyboard_copy_input_to_de:
 393+ 9081 21 5F 90         ld      hl,InputString
 394+ 9084 3A 7E 90         ld      a,(InputCursor)
 395+ 9087 FE 00            cp      0
 396+ 9089 28 05            jr      z,.NoString
 397+ 908B 4F               ld      c,a
 398+ 908C 06 00            ld      b,0
 399+ 908E ED B0            ldir
 400+ 9090              .NoString
 401+ 9090 3E 00            ld      a,0
 402+ 9092 12               ld      (de),a
 403+ 9093 C9               ret
 404+ 9094
 405+ 9094              initInputText:
 406+ 9094 AF               xor     a
 407+ 9095 32 7E 90         ld      (InputCursor),a
 408+ 9098 32 7F 90         ld      (EnterPressed),a
 409+ 909B 32 80 90         ld      (InputChanged),a
 410+ 909E 21 5F 90         ld      hl,InputString
 411+ 90A1 06 1E            ld      b,30
 412+ 90A3              .wipeloop:
 413+ 90A3 77               ld      (hl),a
 414+ 90A4 23               inc     hl
 415+ 90A5 10 FC            djnz    .wipeloop
 416+ 90A7 C9               ret
 417+ 90A8
 418+ 90A8 AF           InputName:                  xor     a
 419+ 90A9 32 80 90                                 ld      (InputChanged),a
 420+ 90AC CD 31 90                                 call    is_any_key_pressed
 421+ 90AF FE FF                                    cp      $FF
 422+ 90B1 C8                                       ret     z
 423+ 90B2              .KeyPressed:
 424+ 90B2 4F               ld      c,a
 425+ 90B3 3A 7E 90         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 426+ 90B6 FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 427+ 90B8 28 0B            jr      z,.DeleteOrEnterOnly            ;
 428+ 90BA 21 56 8F         ld      hl,ASCII_Map
 429+ 90BD 79               ld      a,c
 430+ 90BE ED 31            add     hl,a
 431+ 90C0 7E               ld      a,(hl)
 432+ 90C1 FE 41            cp      "A"
 433+ 90C3 30 15            jr      nc,.AlphaPressed
 434+ 90C5              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 435+ 90C5 FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 436+ 90C7 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 437+ 90C9 FE 3E            cp      ">"         ; ENTER
 438+ 90CB 28 24            jr      z,.EnterPressed
 439+ 90CD FE 23            cp      "#"         ; CAPS
 440+ 90CF 28 33            jr      z,.CapsPressed
 441+ 90D1 FE 5E            cp      "^"         ; SYMBOLSHIFT
 442+ 90D3 28 2F            jr      z,.SymbolPressed
 443+ 90D5 FE 20            cp      " "         ; space
 444+ 90D7 28 2B            jr      z,.SpacePressed
 445+ 90D9 C9               ret
 446+ 90DA              .AlphaPressed:
 447+ 90DA 47               ld      b,a
 448+ 90DB 3A 7E 90         ld      a,(InputCursor)
 449+ 90DE 4F               ld      c,a
 450+ 90DF 21 5F 90         ld      hl,InputString
 451+ 90E2 ED 31            add     hl,a
 452+ 90E4 78               ld      a,b
 453+ 90E5 70               ld      (hl),b
 454+ 90E6 79               ld      a,c
 455+ 90E7 21 7E 90         ld      hl,InputCursor
 456+ 90EA 34               inc     (hl)
 457+ 90EB 3E FF            ld      a,$FF
 458+ 90ED 32 80 90         ld      (InputChanged),a
 459+ 90F0 C9               ret
 460+ 90F1              .EnterPressed:
 461+ 90F1 3A 7E 90         ld      a,(InputCursor)
 462+ 90F4 3C               inc     a
 463+ 90F5 21 5F 90         ld      hl,InputString
 464+ 90F8 ED 31            add     hl,a
 465+ 90FA AF               xor     a
 466+ 90FB 77               ld      (hl),a
 467+ 90FC 3D               dec     a
 468+ 90FD 32 7F 90         ld      (EnterPressed),a
 469+ 9100 32 80 90         ld      (InputChanged),a
 470+ 9103 C9               ret
 471+ 9104              .CheckShiftDelete:
 472+ 9104              .CapsPressed:                               ; act as a delete key for now
 473+ 9104              .SymbolPressed:
 474+ 9104              .SpacePressed:
 475+ 9104 3A 7E 90         ld      a,(InputCursor)
 476+ 9107 FE 00            cp      0
 477+ 9109 C8               ret     z
 478+ 910A 3D               dec     a
 479+ 910B 32 7E 90         ld      (InputCursor),a
 480+ 910E 21 5F 90         ld      hl,InputString
 481+ 9111 ED 31            add     hl,a
 482+ 9113 AF               xor     a
 483+ 9114 77               ld      (hl),a
 484+ 9115 3E FF            ld      a,$FF
 485+ 9117 32 80 90         ld      (InputChanged),a
 486+ 911A C9               ret
 487+ 911B
 488+ 911B              MovementKeyTest:
 489+ 911B              ;DBG1:jp dbg1
 490+ 911B              ;dbx1:
 491+ 911B AF               xor     a
 492+ 911C 32 2F 92         ld      (CursorKeysPressed),a
 493+ 911F 3A 31 92         ld      a,(MenuIdMax)
 494+ 9122 E6 FC            and     $FC
 495+ 9124 20 26            jr      nz,CursorKeys
 496+ 9126              ClimbDiveKeys:
 497+ 9126 2A 14 8F         ld      hl,(addr_Pressed_Climb)
 498+ 9129 7E               ld      a,(hl)
 499+ 912A                  IfAIsZeroGoto ScanDiveKey
 499+ 912A A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 499+ 912B CA 39 91    >				jp	z, ScanDiveKey
 500+ 912E 3A 2F 92         ld      a,(CursorKeysPressed)
 501+ 9131 F6 80            or      $80
 502+ 9133 32 2F 92         ld      (CursorKeysPressed),a
 503+ 9136 C3 6F 91         jp      ScanLeftKey
 504+ 9139              ScanDiveKey:
 505+ 9139 2A 12 8F         ld      hl,(addr_Pressed_Dive)
 506+ 913C 7E               ld      a,(hl)
 507+ 913D                  IfAIsZeroGoto ScanLeftKey
 507+ 913D A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 507+ 913E CA 6F 91    >				jp	z, ScanLeftKey
 508+ 9141 3A 2F 92         ld      a,(CursorKeysPressed)
 509+ 9144 F6 40            or      $40
 510+ 9146 32 2F 92         ld      (CursorKeysPressed),a
 511+ 9149 C3 6F 91         jp      ScanLeftKey
 512+ 914C              CursorKeys:
 513+ 914C 2A 50 8F         ld      hl,(addr_Pressed_CursorUp)
 514+ 914F 7E               ld      a,(hl)
 515+ 9150                  IfAIsZeroGoto ScanCursorDownKey
 515+ 9150 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 515+ 9151 CA 5F 91    >				jp	z, ScanCursorDownKey
 516+ 9154 3A 2F 92         ld      a,(CursorKeysPressed)
 517+ 9157 F6 80            or      $80
 518+ 9159 32 2F 92         ld      (CursorKeysPressed),a
 519+ 915C C3 6F 91         jp      ScanLeftKey
 520+ 915F              ScanCursorDownKey
 521+ 915F 2A 52 8F         ld      hl,(addr_Pressed_CursorDown)
 522+ 9162 7E               ld      a,(hl)
 523+ 9163                  IfAIsZeroGoto ScanLeftKey
 523+ 9163 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 523+ 9164 CA 6F 91    >				jp	z, ScanLeftKey
 524+ 9167 3A 2F 92         ld      a,(CursorKeysPressed)
 525+ 916A F6 40            or      $40
 526+ 916C 32 2F 92         ld      (CursorKeysPressed),a
 527+ 916F              ScanLeftKey:
 528+ 916F 2A 0E 8F         ld      hl,(addr_Pressed_RollLeft)
 529+ 9172 7E               ld      a,(hl)
 530+ 9173                  IfAIsZeroGoto ScanRightKey
 530+ 9173 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 530+ 9174 CA 80 91    >				jp	z, ScanRightKey
 531+ 9177 3A 2F 92         ld      a,(CursorKeysPressed)
 532+ 917A F6 20            or      $20
 533+ 917C 32 2F 92         ld      (CursorKeysPressed),a
 534+ 917F C9               ret
 535+ 9180              ScanRightKey:
 536+ 9180 2A 10 8F         ld      hl,(addr_Pressed_RollRight)
 537+ 9183 7E               ld      a,(hl)
 538+ 9184                  IfAIsZeroGoto ScanHomeKey
 538+ 9184 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 538+ 9185 CA 91 91    >				jp	z, ScanHomeKey
 539+ 9188 3A 2F 92         ld      a,(CursorKeysPressed)
 540+ 918B F6 10            or      $10
 541+ 918D 32 2F 92         ld      (CursorKeysPressed),a
 542+ 9190 C9               ret
 543+ 9191              ScanHomeKey:
 544+ 9191 2A 2E 8F         ld      hl,(addr_Pressed_HomeCursor)
 545+ 9194 7E               ld      a,(hl)
 546+ 9195                  IfAIsZeroGoto ScanRecentreKey
 546+ 9195 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 546+ 9196 CA A2 91    >				jp	z, ScanRecentreKey
 547+ 9199 3A 2F 92         ld      a,(CursorKeysPressed)
 548+ 919C F6 08            or      $08
 549+ 919E 32 2F 92         ld      (CursorKeysPressed),a
 550+ 91A1 C9               ret
 551+ 91A2              ScanRecentreKey:
 552+ 91A2 2A 4A 8F         ld      hl,(addr_Pressed_Recentre)
 553+ 91A5 7E               ld      a,(hl)
 554+ 91A6                  ReturnIfAIsZero
 554+ 91A6 A7          >                    and a
 554+ 91A7 C8          >                    ret    z
 555+ 91A8 3A 2F 92         ld      a,(CursorKeysPressed)
 556+ 91AB F6 04            or      $04
 557+ 91AD 32 2F 92         ld      (CursorKeysPressed),a
 558+ 91B0 C9               ret
 559+ 91B1
 560+ 91B1
# file closed: ./Hardware/keyboard.asm
1067  91B1
1068  91B1                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 91B1              ;Contants
   2+ 91B1
   3+ 91B1              SignMask8Bit		equ %01111111
   4+ 91B1              SignMask16Bit		equ %0111111111111111
   5+ 91B1              SignOnly8Bit		equ $80
   6+ 91B1              SignOnly16Bit		equ $8000
   7+ 91B1
   8+ 91B1              ConstPi				equ $80
   9+ 91B1              ConstNorm           equ 197
  10+ 91B1
  11+ 91B1              ;Text Tokens
  12+ 91B1              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 91B1              BrabenBellToken 	equ $0D
  14+ 91B1              AcorToken			equ $0C
  15+ 91B1
  16+ 91B1              ; Intro Screen
  17+ 91B1              TitleShip			equ	$8C
  18+ 91B1              RotationUnity		equ $60
  19+ 91B1              DBCheckCode			equ $DB
  20+ 91B1              MaxVisibility		equ $1F
  21+ 91B1              FarInFront			equ $C0
  22+ 91B1
  23+ 91B1              ; Universe Managment
  24+ 91B1              ShipTypeStation     equ 2
  25+ 91B1              ShipTypeMissile     equ 1
  26+ 91B1              ShipTypeNormal      equ 0
  27+ 91B1              ShipMaxDistance     equ 192
  28+ 91B1              HyperSpaceTimers    equ $0B0B
  29+ 91B1
  30+ 91B1
  31+ 91B1              MaxNumberOfStars	equ 11
  32+ 91B1              UniverseListSize    equ	12
  33+ 91B1              ShipTypeSize		equ	32 			;??????? just a guess for now
  34+ 91B1              ShipSST				equ 4			; its a space station
  35+ 91B1              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  36+ 91B1              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  37+ 91B1              ShipCountMax		equ	2			; For now just 2 ships to debug
  38+ 91B1              LineLimitPerShip	equ 70			; Max lines per ship
  39+ 91B1              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  40+ 91B1              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  41+ 91B1              PlayerDocked		equ	$FF
  42+ 91B1
  43+ 91B1              ; Memory page managment	(Refers to a memory slot as a place to access data)
  44+ 91B1              ShipDataSlot		equ	6			; this may move into rom swap out space later
  45+ 91B1              UniverseObjectSlot	equ	7
  46+ 91B1
  47+ 91B1              KeyForwardsView		equ	$20
  48+ 91B1
  49+ 91B1              ; Ship Data
  50+ 91B1              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  51+ 91B1              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  52+ 91B1              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  53+ 91B1              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  54+ 91B1              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  55+ 91B1              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  56+ 91B1              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  57+ 91B1              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  58+ 91B1              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  59+ 91B1              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  60+ 91B1              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  61+ 91B1              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  62+ 91B1              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  63+ 91B1              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  64+ 91B1              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  65+ 91B1              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  66+ 91B1              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  67+ 91B1              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  68+ 91B1              ;;;;00 00			 EQUW 0     \ type 18 is
  69+ 91B1              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  70+ 91B1              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  71+ 91B1              ;;;;00 00			 EQUW 0     \ type 21 is
  72+ 91B1              ;;;;00 00			 EQUW 0     \ type 22 is
  73+ 91B1              ;;;;00 00			 EQUW 0     \ type 23 is
  74+ 91B1              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  75+ 91B1              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  76+ 91B1              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  77+ 91B1              ;;;;00 00			 EQUW 0     \ type 27 is
  78+ 91B1              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  79+ 91B1              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  80+ 91B1              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  81+ 91B1              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  82+ 91B1              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  83+ 91B1              ;;;;			\ NEWB examples
  84+ 91B1              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  85+ 91B1              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  86+ 91B1              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  87+ 91B1              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  88+ 91B1              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  89+ 91B1
# file closed: ./Variables/constant_equates.asm
1069  91B1                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 91B1              ;	PAGE 0 Map to variable anmes
   2+ 91B1              ;	PAGE 0 Map to variable anmes
   3+ 91B1              ;
   4+ 91B1              ;
   5+ 91B1              ;
   6+ 91B1              ;	06		T1
   7+ 91B1              ;	07
   8+ 91B1              ;	08		SC1					Screen Hi
   9+ 91B1              ;	09							XX16 Matrix
  10+ 91B1              ;	0A							XX16+1
  11+ 91B1              ;	0B							XX16+2
  12+ 91B1              ;	0C							XX16+3
  13+ 91B1              ;	0D                          XX16+4
  14+ 91B1              ;	0E                          XX16+5
  15+ 91B1              ;	0F							XX16+6
  16+ 91B1              ;	10		varP				XX16+7
  17+ 91B1              ;	11		varP				XX16+8
  18+ 91B1              ;	12                          XX16+9
  19+ 91B1              ;	13                          XX16+10
  20+ 91B1              ;	14							XX16+11
  21+ 91B1              ;	15                          XX16+12
  22+ 91B1              ;	16                          XX16+13
  23+ 91B1              ;	17                          XX16+14
  24+ 91B1              ;	17                          XX16+14
  25+ 91B1              ;	18                          XX16+15
  26+ 91B1              ;	19
  27+ 91B1              ;	1A
  28+ 91B1              ;	1B
  29+ 91B1              ;	1C
  30+ 91B1              ;	1D
  31+ 91B1              ;	1E							XX0
  32+ 91B1              ;	1F                          XX0+1
  33+ 91B1              ;	20		INF                 XX0+2
  34+ 91B1              ;	21      INF+1               XX0+3
  35+ 91B1              ;	22      varV                XX0+4
  36+ 91B1              ;	23      varV +1             XX0+5
  37+ 91B1              ;	24		XXlo                XX0+6
  38+ 91B1              ;	25		XXHi
  39+ 91B1              ;	26		YYlo
  40+ 91B1              ;	27		YYHi
  41+ 91B1              ;	28
  42+ 91B1              ;	29
  43+ 91B1              ;	2A		BETA (pitch done)
  44+ 91B1              ;	2B		BET1 lower7 magnitude
  45+ 91B1              ;	2C		XC
  46+ 91B1              ;	2D		YC
  47+ 91B1              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 91B1              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 91B1              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 91B1              ;	30		ECM Active
  51+ 91B1              ;	31		ALP1
  52+ 91B1              ;	32		ALP2
  53+ 91B1              ;	33		ALP2FLIP
  54+ 91B1
  55+ 91B1              ;	36		Z1					XX15+2yscaled
  56+ 91B1              ;	37		                    XX15+3ysign
  57+ 91B1              ;	38		                    XX15+4zscaled
  58+ 91B1              ;	39							XX15+5zsign
  59+ 91B1              ;	3A		XX12				xplot for star
  60+ 91B1              ;	3B
  61+ 91B1              ;	3C
  62+ 91B1              ;	3D
  63+ 91B1              ;	3E
  64+ 91B1              ;	3F
  65+ 91B1              ;	40		varKlo
  66+ 91B1              ;	41		varKmid
  67+ 91B1              ;	42		varKHi
  68+ 91B1              ;	43		varKVeryHi+Sign
  69+ 91B1              ;	44
  70+ 91B1              ;	45		MSTG				MissileTarget
  71+ 91B1              ;	46		INWK				; Inner working space of 37 bytes
  72+ 91B1              ;	47		INWK
  73+ 91B1              ;	48		INWK
  74+ 91B1              ;	49		INWK
  75+ 91B1              ;	4A		INWK
  76+ 91B1              ;	4B		INWK
  77+ 91B1              ;	4C		INWK
  78+ 91B1              ;	4D		INWK
  79+ 91B1              ;	4E		INWK
  80+ 91B1              ;	4F		INWK+9
  81+ 91B1              ;	50		INWK
  82+ 91B1              ;	51		INWK
  83+ 91B1              ;	52		INWK
  84+ 91B1              ;	53		INWK
  85+ 91B1              ;	54		INWK
  86+ 91B1              ;	55		INWK
  87+ 91B1              ;	56		INWK
  88+ 91B1              ;	57		INWK
  89+ 91B1              ;	58		INWK
  90+ 91B1              ;	59		INWK
  91+ 91B1              ;	5A		INWK
  92+ 91B1              ;	5B		INWK
  93+ 91B1              ;	5C		INWK
  94+ 91B1              ;	5D		INWK
  95+ 91B1              ;	5E		INWK
  96+ 91B1              ;	5F		INWK
  97+ 91B1              ;	60		INWK
  98+ 91B1              ;	61		INWK
  99+ 91B1              ;	62		INWK
 100+ 91B1              ;	63		INWK
 101+ 91B1              ;	64		INWK
 102+ 91B1              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 91B1              ;	66		INWK
 104+ 91B1              ;	67		INWK				XX19
 105+ 91B1              ;	68		INWK
 106+ 91B1              ;	69		INWK
 107+ 91B1              ;	6A		INWK36
 108+ 91B1              ;	6B
 109+ 91B1              ;	6C		QQ15				Current Seed
 110+ 91B1              ;	6D		QQ15+1
 111+ 91B1              ;	6E		QQ15+2
 112+ 91B1              ;	6F		QQ15+3
 113+ 91B1              ;	70		QQ15+4
 114+ 91B1              ;	71
 115+ 91B1              ;	72		XX18   xlo			QQ17
 116+ 91B1              ;	73		XX18+1 xhi
 117+ 91B1              ;	74		XX18+2 xsgn
 118+ 91B1              ;	75		XX18   ylo
 119+ 91B1              ;	76		XX18+1 yhi
 120+ 91B1              ;	77		XX18+2 ysgn
 121+ 91B1              ;	78		XX18   zlo
 122+ 91B1              ;	79		XX18+1 zhi
 123+ 91B1              ;	7A		XX18+2 zsgn
 124+ 91B1              ;	7B		BET2				Pitch Sign
 125+ 91B1              ;	7C		BET2FLIP
 126+ 91B1              ;	7D		DELTA
 127+ 91B1              ;	7E		DELT4Lo
 128+ 91B1              ;	7F		DELT4Hi
 129+ 91B1              ;	80
 130+ 91B1              ;	81		varQ
 131+ 91B1              ;	82		varR
 132+ 91B1              ;	83		varS
 133+ 91B1              ;	84		XSAV
 134+ 91B1              ;	85		YSAV
 135+ 91B1              ;	86		XX17
 136+ 91B1              ;	87		MenuIdMax		QQ11
 137+ 91B1              ;	88		ZZDust
 138+ 91B1              ;	89
 139+ 91B1              ;	8A		MCNT			Move Count
 140+ 91B1              ;	8B		ALPHA
 141+ 91B1              ;	8C		TYPE
 142+ 91B1              ;	8D
 143+ 91B1              ;	8E		DockedFlag		QQ12
 144+ 91B1              ;	8F
 145+ 91B1              ;	96		XX4				Nbr of Normals Visible
 146+ 91B1              ;
 147+ 91B1              ;   9F      POINT
 148+ 91B1              ;	D0
 149+ 91B1              ;	D1		varT
 150+ 91B1              ;array list of each face during draw flagged visible or not
 151+ 91B1              ;	D2      XX2
 152+ 91B1              ;	D3      XX2+1
 153+ 91B1              ;	D4      XX2+2
 154+ 91B1              ;	D5      XX2+3
 155+ 91B1              ;	D6      XX2+4
 156+ 91B1              ;	D7      XX2+5
 157+ 91B1              ;	D8      XX2+6
 158+ 91B1              ;	D9      XX2+7
 159+ 91B1              ;	DA      XX2+8
 160+ 91B1              ;	DB      XX2+9
 161+ 91B1              ;	DC      XX2+10
 162+ 91B1              ;	DD      XX2+11
 163+ 91B1              ;	DE      XX2+12
 164+ 91B1              ;	DF		XX2+13
 165+ 91B1              ;	E0		XX2+14
 166+ 91B1              ;	E1		XX2+15
 167+ 91B1              ;	E2
 168+ 91B1              ;	E3
 169+ 91B1              ;	E4
 170+ 91B1              ;	E5
 171+ 91B1              ;	E6
 172+ 91B1              ;	E7
 173+ 91B1              ;	E8
 174+ 91B1              ;	E9
 175+ 91B1              ;	EA
 176+ 91B1              ;	EB
 177+ 91B1              ;	EC
 178+ 91B1              ;	ED
 179+ 91B1              ;	EE
 180+ 91B1              ;	8F
 181+ 91B1
 182+ 91B1 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 91B3 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 91B5              ; Variables to simulate 6502 registers until code fixed
 185+ 91B5              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 91B5 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 91B6 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 91B7 00           regA		DB	0
 189+ 91B8
 190+ 91B8
 191+ 91B8 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 91B9 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 91BB 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 91BD
 195+ 91BD
 196+ 91BD
 197+ 91BD              ;XX16		DS	16				; 16 byte Matrix
 198+ 91BD
 199+ 91BD              P0INWK							; page 0 & 46
 200+ 91BD              p0INWK31						; page 0 & 65
 201+ 91BD              P0INWK36						; PAGE 0 &6A
 202+ 91BD
 203+ 91BD 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 91BE              LastNormalVisible	equ	XX4
 205+ 91BE              varXX4              equ XX4
 206+ 91BE
 207+ 91BE
 208+ 91BE
 209+ 91BE 00           PATG		DB	0				; 6502 &03C9
 210+ 91BF 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 91C1
 212+ 91C1
 213+ 91C1              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 91C1              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 91C1
 216+ 91C1              ; Present System Variables
 217+ 91C1
 218+ 91C1 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 91C2 20           RandomSeed1				DB	32	; 01
 220+ 91C3 0C           RandomSeed2				DB	12			; 02
 221+ 91C4 42           RandomSeed3				DB	66			; 03
 222+ 91C5
 223+ 91C5 00           varT1					DB	0				; 06
 224+ 91C6 00           SClo					DB 0				; 07
 225+ 91C7 00           SChi					DB 0				; 08
 226+ 91C8 00           varP					DB 0 				; 10	XX16+7
 227+ 91C9 00           varPhi					DB 0 				; 11	XX16+8
 228+ 91CA 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 91CB              varPp1                  equ varPhi
 230+ 91CB              varPp2                  equ varPhi2
 231+ 91CB 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 91CC 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 91CD              UnivPointer				equ	UnivPointerLo
 234+ 91CD 00           varV					DB 0				; 22                          XX0+4
 235+ 91CE 00           varVHi					DB 0				; 23                          XX0+5
 236+ 91CF 00           varXXlo                 DB 0                ; 24
 237+ 91D0 00           varXXHi                 DB 0                ; 25
 238+ 91D1              varXX					equ	varXXlo
 239+ 91D1 00           YYlo                    DB 0                ; 26
 240+ 91D2 00           YYHi                    DB 0                ; 27
 241+ 91D3              varYY					equ	YYlo
 242+ 91D3              											;	28
 243+ 91D3              											;	29
 244+ 91D3              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 91D3 00           BETA 					DB	0               ; 2A        (pitch done)
 246+ 91D4 00           JSTY                    DB  0               ; Joystick analog
 247+ 91D5 00           BET1 					DB	0               ; 2B        lower7 magnitude
 248+ 91D6 00           BET2                    DB  0               ;            climb sign
 249+ 91D7 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 250+ 91D8 1F           BET1MAXC                DB  31              ; max climb
 251+ 91D9 E1           BET1MAXD                DB  -31             ; max dive
 252+ 91DA 00           XC						DB	0               ; 2C
 253+ 91DB 00           YC						DB 	0               ; 2D
 254+ 91DC 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 255+ 91DD 00           OuterHyperCount			DB 	0				; 2E QQ22
 256+ 91DE 00           ECMActive				DB 	0				; 30		ECM Active flag
 257+ 91DF 00 00        JSTX                    DW  0               ;           Joystick analog value
 258+ 91E1 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 259+ 91E2 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 260+ 91E3 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 261+ 91E4 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 262+ 91E5 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 263+ 91E6 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 264+ 91E7
 265+ 91E7 00           MessageCount            DB 0                ; used for enquing messages later
 266+ 91E8 00           MessageTimout           DB 0                ; count down before current message is erased
 267+ 91E9 00 00        MissileTarget			DW	0				; 45
 268+ 91EB 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 269+ 9210
 270+ 9210              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 271+ 9210              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 272+ 9210              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 273+ 9210 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 274+ 9211              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 275+ 9211
 276+ 9211
 277+ 9211 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 278+ 9216              											;	6D		QQ15+1
 279+ 9216              											;	6E		QQ15+2
 280+ 9216              											;	6F		QQ15+3
 281+ 9216              											;	70		QQ15+4
 282+ 9216              											;	71		QQ15+5
 283+ 9216 00           QQ17					DB	0				;   72
 284+ 9217 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 285+ 9218 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 286+ 9219 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 287+ 921A 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 288+ 921B 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 289+ 921C 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 290+ 921D 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 291+ 921E 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 292+ 921F 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 293+ 9220
 294+ 9220 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 295+ 9221 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 296+ 9222 00           DELT4Lo					DB 	0				; 7E
 297+ 9223 00           DELT4Hi					DB 	0				; 7F
 298+ 9224              DELTA4                  equ                 DELT4Lo
 299+ 9224
 300+ 9224
 301+ 9224              ; Not thise must be in this order else 16 bit fetches will fail
 302+ 9224 00           varU                    DB  0               ;   80
 303+ 9225 00           varQ					DB  0 				;	81
 304+ 9226 00           varR					DB  0 				;	82
 305+ 9227 00           varS					DB  0 				;	83
 306+ 9228              varRS                   equ varR
 307+ 9228
 308+ 9228 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 309+ 922A
 310+ 922A 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 311+ 922B 00           YSAV                    DB  0               ; 85
 312+ 922C 00           XX17					DB	0				; 86
 313+ 922D              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 314+ 922D              varXX17                 equ  XX17
 315+ 922D 00           ScreenChanged           DB  0
 316+ 922E 00           ScreenIndex             DB  0
 317+ 922F 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 318+ 9230                                                          ; 7    6    5    4     3    2        1    0
 319+ 9230                                                          ; Up   Down Left Right Home Recentre
 320+ 9230 00           InvertedYAxis           DB  0
 321+ 9231 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 322+ 9232              											; Bit 7 Set  ShortRangeChart    $80
 323+ 9232              											; Bit 6 Set  Galactic Chart     $40
 324+ 9232              											; Bit 5 Set  Market Place       $20
 325+ 9232              											; Bit 4 Set  Status Screen      $10
 326+ 9232              											; Bit 3 Set  Display Inventory  $08
 327+ 9232                                                          ; Bit 2 Set  Planet Data        $04
 328+ 9232                                                          ; View bit combinations if the ones above not matched
 329+ 9232                                                          ; bits 1 0
 330+ 9232                                                          ;      1 1  Front view , i.e. $03
 331+ 9232                                                          ;      1 0  Aft View          $02
 332+ 9232                                                          ;      0 1  Left View         $01
 333+ 9232                                                          ;      0 0  Right view        $00
 334+ 9232              											; Bit 0 Set  Data On System
 335+ 9232              											; 0  Space View (Not a menu)
 336+ 9232 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 337+ 9233 00           XX13                    DB  0               ;   89
 338+ 9234 00           MCNT					DB 	0				; 8A
 339+ 9235 00           TYPE					DB	0				; 8C used for ship type in drawing
 340+ 9236 00           DockedFlag				DB	0				; 8E - Docked flag = 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 341+ 9237 00           GamePaused              DB  0
 342+ 9238 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 343+ 9239 00           varCNT                  DB  0               ; 93
 344+ 923A
 345+ 923A 00           varK					DB	0				; 40
 346+ 923B 00           varKp1					DB	0				; 41
 347+ 923C 00           varKp2					DB	0				; 42
 348+ 923D 00           varKp3					DB	0				; 43
 349+ 923E
 350+ 923E 00           varK2                   DB  0               ; 9B
 351+ 923F 00           varK2p1                 DB  0               ; 9C K2 plus 1
 352+ 9240 00           varK2p2                 DB  0               ; 9D K2 plus 2
 353+ 9241 00           varK2p3                 DB  0               ; 9E K2 plus 3
 354+ 9242
 355+ 9242 00           Point                   DB  0               ; 9F      POINT
 356+ 9243
 357+ 9243 00           varT					DB	0				; D1
 358+ 9244
 359+ 9244 00 00 00...  varVector9ByteWork      DS  9
 360+ 924D
 361+ 924D 00 00 00 00  varK3					DS	4				; D2
 362+ 9251 00           varK3p2					DB	0				; 42
 363+ 9252 00           varK3p3					DB	0				; 43
 364+ 9253              varK3p1					equ varK3+1			; D3
 365+ 9253 00 00 00 00  varK4					DS	4				; E0
 366+ 9257              varK4p1					equ varK4+1			; D3
 367+ 9257
 368+ 9257              ;PlayerData:
 369+ 9257 00           PlayerForwardSheild0	DB	0 ; ?????
 370+ 9258 00           PlayerForwardSheild1    DB	0
 371+ 9259 00           PlayerForwardSheild2    DB	0
 372+ 925A
 373+ 925A
 374+ 925A              ;Heap
 375+ 925A
 376+ 925A 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 377+ 925C 00 00 00...  HeapData				DS	50
 378+ 928E              ; Contains 				X 16 bit, Y 16 bit
 379+ 928E              ;RuntimeData:
 380+ 928E              HeapHead				equ HeapStart
 381+ 928E
 382+ 928E              ; For the UniverseSlot list, for an optimisation the type slot will be the ship type, e.g. ship type this will optimise searching for a station or star
 383+ 928E              ; bit 7 will be set for a sun or planet so we can only ever have 128 types of ship, in relality there are about 3 types
 384+ 928E              ; note this is ship type as it space station, transporter, pirate etc not model of ship
 385+ 928E 00 00 00...  UniverseSlotList		DS UniverseListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 386+ 929A 00 00 00...  UniverseSlotCount       DS UniverseListSize * 2 ; To be implemented, keeps a count of each slot type, may merge into slot list and set as a DW
 387+ 92B2 00           CurrentUniverseAI       DB  0               ; used to cycle ships in each iterations of main loop
 388+ 92B3 00           SelectedUniverseSlot    DB  0
 389+ 92B4 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 390+ 92B5 00           MANY					DB	0				; &031E array of ship types???
 391+ 92B6 00           SpaceStationPresent		DB	0				; &0320	Wonder if many is counter of type in univ objects?
 392+ 92B7 00           						DB	0				; &0321	Speculative?
 393+ 92B8 00           						DB	0				; &0322	Speculative?
 394+ 92B9 00           						DB	0				; &0323	Speculative?
 395+ 92BA 00           						DB	0				; &0324	Speculative?
 396+ 92BB 00           						DB	0				; &0325	Speculative?
 397+ 92BC 00           						DB	0				; &0326	Speculative?
 398+ 92BD 00           						DB	0				; &0327	Speculative?
 399+ 92BE 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 400+ 92BF 00           						DB	0				; &0329	MANY + 11 Speculative?
 401+ 92C0 00           				        DB	0				; &032A	MANY + 12 Speculative?
 402+ 92C1 00           				        DB	0				; &032B	MANY + 13 Speculative?
 403+ 92C2 00           				        DB	0				; &032C	MANY + 14 Speculative?
 404+ 92C3 00           				        DB	0				; &032D	MANY + 15 Speculative?
 405+ 92C4 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 406+ 92C5 00           				        DB	0				; &032F	MANY + 17 Speculative?
 407+ 92C6 00           				        DB	0				; &0330	MANY + 18 Speculative?
 408+ 92C7 00           				        DB	0				; &0331	MANY + 19 Speculative?
 409+ 92C8 00           						DB	0				; &0332	MANY + 20 Speculative?
 410+ 92C9 00           				        DB	0				; &0333	MANY + 21 Speculative?
 411+ 92CA 00           				        DB	0				; &0334	MANY + 22 Speculative?
 412+ 92CB 00           				        DB	0				; &0335	MANY + 23 Speculative?
 413+ 92CC 00           				        DB	0				; &0336	MANY + 24 Speculative?
 414+ 92CD 00           				        DB	0				; &0337	MANY + 25 Speculative?
 415+ 92CE 00           				        DB	0				; &0338	MANY + 26 Speculative?
 416+ 92CF 00           				        DB	0				; &0339	MANY + 27 Speculative?
 417+ 92D0 00           				        DB	0				; &033A	MANY + 28 Speculative?
 418+ 92D1 00           				        DB	0				; &033B	MANY + 29 Speculative?
 419+ 92D2 00           				        DB	0				; &033C	MANY + 30 Thargoids
 420+ 92D3 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 421+ 92D4 00           JunkCount				DB  0				; $033E
 422+ 92D5 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 423+ 92D6 00           CabinTemp				DB	0				; $0342
 424+ 92D7 00           MissileArmedStatus		DB	0				; 0344 MSAR
 425+ 92D8 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 426+ 92D9 00           GunTemperature			DB	0				; 0347	GNTMP
 427+ 92DA 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 428+ 92DB 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 429+ 92DC 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 430+ 92DD 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 431+ 92DE 00           JoystickX				DB	0				; 034C JSTX
 432+ 92DF 00           JoystickY				DB	0				; 034D JSTY
 433+ 92E0 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 434+ 92E1 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 435+ 92E2 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 436+ 92EA 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 437+ 92EB 00           VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 438+ 92EC              											; Bit mask XXXX10XX - Thargoid plan mission
 439+ 92EC 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 440+ 92ED 00           PresentSystemY			DB  0
 441+ 92EE 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 442+ 92F4 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 443+ 92F5 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 444+ 92F6              ;036C to D???
 445+ 92F6 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 446+ 92FD              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 447+ 92FD              ;  #&5 Does J reverse both joystick channels
 448+ 92FD              ;  #&4 Does Y reverse joystick Y channel			03CB
 449+ 92FD              ;  #&3 Does F toggle flashing information			03CA
 450+ 92FD              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 451+ 92FD              ;  #&1 Does A toggle keyboard auto-recentering ?
 452+ 92FD              ;  #&0 Caps-lock toggles keyboard flight damping
 453+ 92FD 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 454+ 92FE 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 455+ 92FF 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 456+ 930F 00           AlienItemsAvaliability  DB	0				; 039D
 457+ 9310 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 458+ 9311 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 459+ 9313 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 460+ 9314              											;
 461+ 9314 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 462+ 9315 00           ForeShield				DB	0				; 03A5
 463+ 9316 00           AftShield				DB	0				; 03A6
 464+ 9317 00           PlayerEnergy			DB	0				; 03A7
 465+ 9318 00           CompassX				DB	0				; 03A8
 466+ 9319 00           CompassY				DB	0				; 03A9
 467+ 931A 00           MarketPrice				DB	0				; 03AA QQ24
 468+ 931B 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 469+ 931C 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 470+ 931D 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 471+ 931E 00           GovPresentSystem		DB	0				; 03AE Govenment
 472+ 931F 00           TekPresentSystem		DB	0				; 03AF Technology
 473+ 9320 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 474+ 9322              											; this is ship lines stack pointer so may be redundant with paging
 475+ 9322              											; LS = line stack so we will have one for now to remove later
 476+ 9322 00 00 00...  WorkingSeeds			DS	6
 477+ 9328 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 478+ 932E 00           DisplayEcononmy			DB	0				; 03B8
 479+ 932F 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 480+ 9330 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 481+ 9331 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 482+ 9333 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 483+ 9335 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 484+ 9337 00 00        DisplayRadius			DW	0
 485+ 9339 00           TargetPlanetX			DB	0               ; 03C1
 486+ 933A 00           TargetPlanetY			DB	0               ; 03C2
 487+ 933B 00           SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 488+ 933C 00           SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 489+ 933D 00           NumberOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 490+ 933E
 491+ 933E 00           CompassColor			DB	0				; 03C5
 492+ 933F 00           SoundToggle				DB	0				; 03C6
 493+ 9340 00           KeyboardRecenterToggle	DB	0				; 03C8
 494+ 9341 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 495+ 9342 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 496+ 9343 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 497+ 9344 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 498+ 9345 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 499+ 9346 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 500+ 9347
 501+ 9347              ; Working Data
 502+ 9347
 503+ 9347              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 504+ 9347              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 505+ 9347              ; $0925 =	EQUW page9+37* 1
 506+ 9347              ; $094A =	EQUW page9+37* 2
 507+ 9347              ; $096F =	EQUW page9+37* 3
 508+ 9347              ; $0994 =	EQUW page9+37* 4
 509+ 9347              ; $09B9 =	EQUW page9+37* 5
 510+ 9347              ; $09DE =	EQUW page9+37* 6
 511+ 9347              ; $0A03 =	EQUW page9+37* 7
 512+ 9347              ; $0A28 =	EQUW page9+37* 8
 513+ 9347              ; $0A4D =	EQUW page9+37* 9
 514+ 9347              ; $0A72 =	EQUW page9+37*10
 515+ 9347              ; $0A97 =	EQUW page9+37*11
 516+ 9347              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 517+ 9347
 518+ 9347
 519+ 9347
 520+ 9347              ; 0b00 is start address of data to save
 521+ 9347 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 522+ 9348
 523+ 9348 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 524+ 934A 00 00        CommanderLoadAddress	DW	0				;0C03
 525+ 934C 00 00        LengthOfFile			DW	0				;0C0B
 526+ 934E 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 527+ 9350
 528+ 9350 00 00 00...  EdgesBuffer				DS 50
 529+ 9382              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 530+ 9382              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 531+ 9382
 532+ 9382 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 533+ 93C8              ShipLineStackTop		equ $ - ShipLineStack
 534+ 93C8
 535+ 93C8 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 536+ 9488              ; LSX vector overlaps with LSO
 537+ 9488 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 538+ 9489 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 539+ 948A
 540+ 948A              ; Star Positions are 16 bit 3d coordinates
 541+ 948A 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 542+ 94CC 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 543+ 94E2 00           varStarX                DB  0
 544+ 94E3 00           varStarY                DB  0
 545+ 94E4 00 00 00...  varDustX                DS MaxNumberOfStars *2
 546+ 94FA 00 00 00...  varDustY                DS MaxNumberOfStars *2
 547+ 9510 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 548+ 9526
 549+ 9526              FShieldStart            equ $8410
 550+ 9526              AShieldStart            equ $8D10
 551+ 9526              FuelStart               equ $9410
 552+ 9526
 553+ 9526              EnergyBar4Start         equ $A5D5
 554+ 9526              EnergyBar3Start         equ $ADD5
 555+ 9526              EnergyBar2Start         equ $B5D5
 556+ 9526              EnergyBar1Start         equ $BDD5
 557+ 9526              ; 70 /2 = 35 values
 558+ 9526              ;                            0                             1                             2                             3
 559+ 9526              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 560+ 9526 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 560+ 952A 04 04 05 06
 560+ 952E 06 07 08 09
 560+ 9532 0A 0A 0B 0C
 560+ 9536 0D 0E 0E 0F
 560+ 953A 10 10 11 13
 560+ 953E 14 15 15 16
 560+ 9542 17 18 19 1A
 560+ 9546 1B 1C 1E 1F
 560+ 954A 1F
 561+ 954B              SpeedoStart             equ $84D1
 562+ 954B              ;                            0                             1                             2                             3                             4
 563+ 954B              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 564+ 954B 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 564+ 954F 04 04 05 06
 564+ 9553 06 07 08 09
 564+ 9557 0A 0A 0B 0C
 564+ 955B 0D 0E 0E 0F
 564+ 955F 10 10 11 12
 564+ 9563 13 14 14 15
 564+ 9567 16 17 18 18
 564+ 956B 19 1A 1A 1B
 564+ 956F 1C 1C 1D 1E
 564+ 9573 1F
 565+ 9574
 566+ 9574              DialMiddleXPos          equ $E1
 567+ 9574              RollMiddle              equ $8CE0
 568+ 9574              PitchMiddle             equ $94E0
 569+ 9574
 570+ 9574
 571+ 9574
 572+ 9574              MakeInnocentMacro:		MACRO
 573+ 9574 ~            						xor		a
 574+ 9574 ~            						ld		(FugitiveInnocentStatus),a
 575+ 9574              						ENDM
 576+ 9574
 577+ 9574              NoEscapePodMacro:		MACRO
 578+ 9574 ~            						xor		a
 579+ 9574 ~            						ld		(EscapePod),a
 580+ 9574              						ENDM
 581+ 9574
 582+ 9574              MaxFuelLevel            EQU     70              ; 7.0 light years max
 583+ 9574              MaxFuelMacro:			MACRO
 584+ 9574 ~            						ld		a,MaxFuelLevel
 585+ 9574 ~            						ld		(Fuel),a
 586+ 9574              						ENDM
 587+ 9574
 588+ 9574              MaxThrottle:            MACRO
 589+ 9574 ~                                    ld      a,(SHIPMAXSPEED)
 590+ 9574 ~                                    ld      (DELTA),a
 591+ 9574 ~                                    ld      d,a
 592+ 9574 ~                                    ld      e,4
 593+ 9574 ~                                    mul
 594+ 9574 ~                                    ld      (DELT4Lo),de
 595+ 9574                                      ENDM
 596+ 9574
 597+ 9574              ZeroThrottle:           MACRO
 598+ 9574 ~                                    xor     a
 599+ 9574 ~                                    ld      (DELTA),a
 600+ 9574 ~                                    ld      (DELT4Lo),a
 601+ 9574 ~                                    ld      (DELT4Lo+1),a
 602+ 9574                                      ENDM
 603+ 9574
# file closed: ./Variables/general_variables.asm
1070  9574
1071  9574                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9574 AF           ClearSlotCount:         xor     a
   2+ 9575 21 9A 92                             ld      hl,UniverseSlotCount
   3+ 9578 06 18                                ld      b, UniverseListSize * 2
   4+ 957A 77           .fillLoop:              ld      (hl),a
   5+ 957B 23                                   inc     hl
   6+ 957C 10 FC                                djnz    .fillLoop
   7+ 957E C9                                   ret
   8+ 957F
   9+ 957F              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ 957F              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ 957F CD 74 95     CorrectSlotCount:       call    ClearSlotCount
  12+ 9582 21 9A 92                             ld      hl,UniverseSlotCount
  13+ 9585 11 8E 92                             ld      de,UniverseSlotList
  14+ 9588 06 0C                                ld      b,UniverseListSize
  15+ 958A 1A           .fillLoop:              ld      a,(de)
  16+ 958B FE FF                                cp      $FF
  17+ 958D 28 05                                jr      z,.SkipSlot
  18+ 958F 77           .CorrectSlot:           ld      (hl),a
  19+ 9590 23                                   inc     hl
  20+ 9591 36 01                                ld      (hl),1
  21+ 9593 23                                   inc     hl
  22+ 9594 13           .SkipSlot               inc     de
  23+ 9595 10 F3                                djnz    .fillLoop
  24+ 9597 C9                                   ret
  25+ 9598
  26+ 9598
  27+ 9598
  28+ 9598              ; Wipe all items
  29+ 9598 3E FF        ClearUnivSlotList:      ld      a,$FF
  30+ 959A 21 8E 92                             ld      hl,UniverseSlotList
  31+ 959D 06 0C                                ld      b, UniverseListSize
  32+ 959F 77           .fillLoop:              ld      (hl),a
  33+ 95A0 23                                   inc     hl
  34+ 95A1 10 FC                                djnz    .fillLoop
  35+ 95A3 C9                                   ret
  36+ 95A4
  37+ 95A4 21 8E 92     SetSlotAToSpaceStation: ld      hl,UniverseSlotList
  38+ 95A7 ED 31                                add     hl,a
  39+ 95A9 36 02                                ld      (hl),ShipTypeStation
  40+ 95AB C9                                   ret
  41+ 95AC
  42+ 95AC 21 8E 92     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 95AF ED 31                                add     hl,a
  44+ 95B1 70                                   ld      (hl),b
  45+ 95B2 C9                                   ret
  46+ 95B3
  47+ 95B3              ; Clears all except slot A, used when say restarting a space station post launch
  48+ 95B3 57           ClearFreeSlotListSaveA: ld      d,a
  49+ 95B4 0E 00                                ld      c,0
  50+ 95B6 21 8E 92                             ld      hl,UniverseSlotList
  51+ 95B9 06 0C                                ld      b, UniverseListSize
  52+ 95BB 79           .fillLoop:              ld      a,c
  53+ 95BC BA                                   cp      d
  54+ 95BD 28 03                                jr      z,.SkipSlot
  55+ 95BF 3E FF                                ld      a,$FF
  56+ 95C1 77                                   ld      (hl),a
  57+ 95C2 23           .SkipSlot:              inc     hl
  58+ 95C3 10 F6                                djnz    .fillLoop
  59+ 95C5 C9                                   ret
  60+ 95C6
  61+ 95C6 21 8E 92     SetSlotAOccupiedByB:    ld      hl,UniverseSlotList
  62+ 95C9 ED 31                                add     hl,a
  63+ 95CB 78                                   ld      a,b
  64+ 95CC 70                                   ld      (hl),b
  65+ 95CD C9                                   ret
  66+ 95CE
  67+ 95CE 21 8E 92     FindSpaceStationSlotInC:ld      hl,UniverseSlotList
  68+ 95D1 06 0C                                ld      b,UniverseListSize
  69+ 95D3 0E 00                                ld      c,0
  70+ 95D5 7E           .SearchLoop:            ld      a,(hl)
  71+ 95D6                                      JumpIfAEqNusng ShipTypeStation, .FoundSlot
  71+ 95D6 FE 02       >                cp     ShipTypeStation
  71+ 95D8 CA E1 95    >                jp      z,.FoundSlot
  72+ 95DB 0C                                   inc     c
  73+ 95DC 23                                   inc     hl
  74+ 95DD 10 F6                                djnz    .SearchLoop
  75+ 95DF                                      SetCarryFlag
  75+ 95DF 37          >                    scf
  76+ 95E0 C9                                   ret
  77+ 95E1              .FoundSlot:             ClearCarryFlag
  77+ 95E1 B7          >                    or a
  78+ 95E2 C9                                   ret
  79+ 95E3
  80+ 95E3 21 8E 92     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  81+ 95E6 ED 31                                add     hl,a
  82+ 95E8 7E                                   ld      a,(hl)
  83+ 95E9 C9                                   ret
  84+ 95EA
  85+ 95EA CD CE 95     FindSpaceStationSlotInA:call    FindSpaceStationSlotInC
  85+ 95ED
  86+ 95ED 79                                   ld      a,c
  87+ 95EE C9                                   ret
  88+ 95EF
  89+ 95EF
  90+ 95EF 21 8E 92     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
  91+ 95F2 06 0C                                ld      b, UniverseListSize
  92+ 95F4 0E 00                                ld      c, 0
  93+ 95F6 7E           .SearchLoop:            ld      a,(hl)
  94+ 95F7                                      JumpIfAEqNusng $FF, .FoundSlot
  94+ 95F7 FE FF       >                cp     $FF
  94+ 95F9 CA 02 96    >                jp      z,.FoundSlot
  95+ 95FC 0C                                   inc     c
  96+ 95FD 23                                   inc     hl
  97+ 95FE 10 F6                                djnz    .SearchLoop
  98+ 9600                                      SetCarryFlag
  98+ 9600 37          >                    scf
  99+ 9601 C9                                   ret
 100+ 9602              .FoundSlot:             ClearCarryFlag
 100+ 9602 B7          >                    or a
 101+ 9603 C9                                   ret
 102+ 9604
 103+ 9604 CD EF 95     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 104+ 9607 79                                   ld      a,c
 105+ 9608 C9                                   ret
 106+ 9609
# file closed: ./Variables/UniverseSlotRoutines.asm
1072  9609
1073  9609                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 9609 00           AutoDocking				DB	0				; $033F
   2+ 960A 00           PlayerECM				DB	0				; $0340
   3+ 960B 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 960C 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 960D 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 9611 19           Fuel					DB	25				; 0365  QQ14
   7+ 9612 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 9616 46           CargoBaySize			DB	70				; 036E
   9+ 9617 00           CargoRunningLoad        DB  0
  10+ 9618 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 961C 00 00 00 00
  10+ 9620 00 00 00 00
  10+ 9624 00 00 00 00
  11+ 9628              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 9628              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 9628              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 9628              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 9628
  16+ 9628              QQ20                    equ CargoTonnes
  17+ 9628 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  18+ 9642              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  19+ 9642              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  20+ 9642              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  21+ 9642              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  22+ 9642              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  23+ 9642              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  24+ 9642 01           FuelScoopsBarrelStatus	DB	1				; 0381
  25+ 9643
# file closed: ./Variables/EquipmentVariables.asm
1074  9643
1075  9643                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 9643              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 9643              doRND2:
   3+ 9643 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 9644              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 9644              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 9644 3A C1 91     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 9647 CB 17                                rl		a								; Rotate L including carry
   8+ 9649 4F                                   ld		c,a								; c =  double lo
   9+ 964A 21 C3 91     .AddSeed2:              ld		hl,RandomSeed2
  10+ 964D 8E                                   adc		a,(hl)							; RAND+2
  11+ 964E 32 C1 91     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 9651 08           .SaveBtoSeed2:          ex		af,af'
  13+ 9652 79                                   ld		a,c
  14+ 9653 32 C3 91                             ld		(RandomSeed2),a
  15+ 9656 08                                   ex		af,af'
  16+ 9657 3A C2 91                             ld		a,(RandomSeed1)
  17+ 965A 4F                                   ld		c,a								; C = Seed1
  18+ 965B 21 C4 91     .AddSeed3:              ld		hl,RandomSeed3
  19+ 965E 8E                                   adc		a,(hl)
  20+ 965F 32 C2 91                             ld		(RandomSeed1),a
  21+ 9662 08                                   ex		af,af'
  22+ 9663 79                                   ld		a,c
  23+ 9664 32 C4 91                             ld		(RandomSeed3),a
  24+ 9667 08                                   ex		af,af'
  25+ 9668 C9                                   ret
  26+ 9669
  27+ 9669              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9669 06 04        	ld		b,4
  29+ 966B 21 02 C2     	ld		hl,UbnkLineArray				; line data
  30+ 966E              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 966E              EE55:
  32+ 966E CD 44 96     	call	doRND							; get random
  33+ 9671 77           	ld		(hl),a							; (XX19),Y
  34+ 9672 23           	inc		hl
  35+ 9673 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 9675 C9               ret
  37+ 9676
# file closed: ./Variables/random_number.asm
1076  9676                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9676 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 967A 58 59 53 45
   1+ 967E 45 44
   2+ 9680 21 EE 92     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 9683 11 11 92                             ld		de,SystemSeed
   4+ 9686 ED A0        copy_seed:		        ldi
   5+ 9688 ED A0                                ldi
   6+ 968A ED A0                                ldi
   7+ 968C ED A0                                ldi
   8+ 968E ED A0                                ldi
   9+ 9690 ED A0                                ldi
  10+ 9692 C9                                   ret
  11+ 9693
  12+ 9693 21 11 92     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 9696 11 EE 92                             ld		de,GalaxySeeds
  14+ 9699 18 EB                                jr		copy_seed
  15+ 969B
  16+ 969B 21 EE 92     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 969E 11 22 93                             ld		de,WorkingSeeds
  18+ 96A1 18 E3                                jr		copy_seed
  19+ 96A3
  20+ 96A3 21 22 93     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 96A6 11 EE 92                             ld		de,GalaxySeeds
  22+ 96A9 18 DB                                jr		copy_seed
  23+ 96AB
  24+ 96AB 21 22 93     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 96AE 11 11 92                             ld		de,SystemSeed
  26+ 96B1 18 D3                                jr		copy_seed
  27+ 96B3
  28+ 96B3 21 11 92     copy_system_to_working: ld		hl,SystemSeed
  29+ 96B6 11 22 93                             ld		de,WorkingSeeds
  30+ 96B9 18 CB                                jr		copy_seed
  31+ 96BB
  32+ 96BB              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 96BB CD BE 96     		call	.NextStep					; This logic means we hard code x4
  34+ 96BE              .NextStep:
  35+ 96BE CD C1 96     		call	process_seed				; This logic means we hard code x2
  36+ 96C1              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 96C1 3A 11 92     		ld		a,(SystemSeed)				; QQ15
  38+ 96C4 B7           		or		a							; clear carry flag
  39+ 96C5 21 13 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 96C8 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 96C9 47           		ld		b,a							; partial sum lo
  42+ 96CA 3A 12 92     		ld		a,(SystemSeed+1)
  43+ 96CD 21 14 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 96D0 8E           		adc		a,(hl)						; note add with carry
  45+ 96D1 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 96D2 3A 13 92     		ld		a,(SystemSeed+2)
  47+ 96D5 32 11 92     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 96D8 3A 14 92     		ld		a,(SystemSeed+3)
  49+ 96DB 32 12 92     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 96DE 3A 16 92     		ld		a,(SystemSeed+5)
  51+ 96E1 32 14 92     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 96E4 3A 15 92     		ld		a,(SystemSeed+4)
  53+ 96E7 32 13 92     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 96EA B7           		or		a
  55+ 96EB 78           		ld		a,b
  56+ 96EC 21 13 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 96EF 86           		add	    a,(hl)
  58+ 96F0 32 15 92     		ld		(SystemSeed+4),a
  59+ 96F3 79           		ld		a,c
  60+ 96F4 21 14 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 96F7 8E           		adc		a,(hl)
  62+ 96F8 32 16 92     		ld		(SystemSeed+5),a
  63+ 96FB C9           		ret
  64+ 96FC
  65+ 96FC              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 96FC CD FF 96     		call	.NextStep					; This logic means we hard code x4
  67+ 96FF              .NextStep:
  68+ 96FF CD 02 97     		call	working_seed				; This logic means we hard code x2
  69+ 9702              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 9702              ; x = a + c
  71+ 9702 3A 22 93     		ld		a,(WorkingSeeds)			; QQ15
  72+ 9705 B7           		or		a							; clear carry flag
  73+ 9706 21 24 93     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 9709 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 970A 47           		ld		b,a							; partial sum lo [x]
  76+ 970B              ; y = b + d	+ carry
  77+ 970B 3A 23 93     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 970E 21 25 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 9711 8E           		adc		a,(hl)						; note add with carry
  80+ 9712 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 9713 3A 24 93     		ld		a,(WorkingSeeds+2)
  82+ 9716 32 22 93     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 9719 3A 25 93     		ld		a,(WorkingSeeds+3)
  84+ 971C 32 23 93     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 971F 3A 27 93     		ld		a,(WorkingSeeds+5)
  86+ 9722 32 25 93     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 9725 3A 26 93     		ld		a,(WorkingSeeds+4)
  88+ 9728 32 24 93     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 972B B7           		or		a
  90+ 972C 78           		ld		a,b
  91+ 972D 21 24 93     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 9730 86           		add	    a,(hl)
  93+ 9731 32 26 93     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 9734 79           		ld		a,c
  95+ 9735 21 25 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 9738 8E           		adc		a,(hl)
  97+ 9739 32 27 93     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 973C C9           		ret
  99+ 973D
 100+ 973D 32           working_distX	DB 50
 101+ 973E 32           working_distY	DB 50
 102+ 973F 00           current_distY	DB 0
 103+ 9740
 104+ 9740 AF           find_present_system:    xor		a
 105+ 9741 32 2A 92                             ld		(XSAV),a
 106+ 9744              .CounterLoop:
 107+ 9744 3A 12 92     	ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 108+ 9747 4F           	ld		c,a
 109+ 9748              .calcLocaldy:
 110+ 9748 3A ED 92     	ld		a,(PresentSystemY)
 111+ 974B 47           	ld		b,a								; so b holds Y ccord
 112+ 974C 79           	ld		a,c
 113+ 974D 90           	sub		b
 114+ 974E CB 7F        	bit		7,a
 115+ 9750 28 02        	jr		z,.positivedy
 116+ 9752              .negativedy:
 117+ 9752 ED 44        	neg
 118+ 9754              .positivedy:
 119+ 9754 32 3F 97     	ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 120+ 9757 ED 5B 3D 97  	ld		de,(working_distX)
 121+ 975B BA           	cp		d
 122+ 975C 30 24        	jr		nc,.toofar
 123+ 975E              .calcLocaldx:
 124+ 975E 3A 14 92     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 125+ 9761 4F           	ld		c,a
 126+ 9762 3A EC 92     	ld		a,(PresentSystemX)
 127+ 9765 47           	ld		b,a								; so b holds Y ccord
 128+ 9766 79           	ld		a,c
 129+ 9767 90           	sub		b
 130+ 9768 CB 7F        	bit		7,a
 131+ 976A 28 02        	jr		z,.positivedx
 132+ 976C              .negativedx:
 133+ 976C ED 44        	neg
 134+ 976E              .positivedx:
 135+ 976E 4F           	ld		c,a
 136+ 976F BB           	cp		e
 137+ 9770 30 10        	jr		nc,.toofar
 138+ 9772              .Nearer:									; we have a closer system
 139+ 9772 3A 3F 97     	ld		a,(current_distY)
 140+ 9775 47           	ld		b,a								; we have c to recall Y into b
 141+ 9776 ED 43 3D 97  	ld		(working_distX),bc
 142+ 977A C5           	push	bc
 143+ 977B CD B3 96     	call 	copy_system_to_working
 144+ 977E C1           	pop		bc
 145+ 977F 78           	ld		a,b								;
 146+ 9780 B1           	or		c								;
 147+ 9781 C8           	ret		z								; if we have distance 0 then bang on
 148+ 9782              .toofar:
 149+ 9782 CD BB 96     	call	next_system_seed
 150+ 9785 3A 2A 92     	ld		a,(XSAV)
 151+ 9788 3D           	dec		a
 152+ 9789 FE 00        	cp		0
 153+ 978B C8           	ret		z
 154+ 978C 32 2A 92     	ld		(XSAV),a
 155+ 978F 18 B3        	jr		.CounterLoop
 156+ 9791
 157+ 9791
 158+ 9791              get_planet_data_working_seed:
 159+ 9791 3A 23 93     		ld		a, (WorkingSeeds+1)
 160+ 9794 E6 07        		and		7
 161+ 9796 32 2E 93     		ld		(DisplayEcononmy),a
 162+ 9799 3A 24 93     		ld		a, (WorkingSeeds+2)
 163+ 979C CB 3F        		srl	a
 164+ 979E CB 3F        		srl	a
 165+ 97A0 CB 3F        		srl	a
 166+ 97A2 CB 3F        		srl	a								; c/8
 167+ 97A4 E6 07        		and		7
 168+ 97A6 32 2F 93     		ld		(DisplayGovernment),a
 169+ 97A9 CB 3F        		srl	a
 170+ 97AB FE 00        		cp		0
 171+ 97AD 20 08        		jr		nz,.CanBeRich
 172+ 97AF              .Fedual:
 173+ 97AF 3A 2E 93     		ld		a,(DisplayEcononmy)
 174+ 97B2 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 175+ 97B4 32 2E 93     		ld		(DisplayEcononmy),a
 176+ 97B7              .CanBeRich:
 177+ 97B7 3A 2E 93     		ld		a,(DisplayEcononmy)
 178+ 97BA EE 07        		xor		7							; flip economy so Rich is now 7
 179+ 97BC 32 30 93     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 180+ 97BF 47           		ld		b,a
 181+ 97C0 3A 25 93     		ld		a,(WorkingSeeds+3)
 182+ 97C3 E6 03        		and		3
 183+ 97C5 80           		add		a,b
 184+ 97C6 32 30 93     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 185+ 97C9 3A 2F 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 186+ 97CC CB 3F        		srl		a 							; gov/2
 187+ 97CE 47           		ld		b,a
 188+ 97CF 3A 30 93     		ld		a,(DisplayTekLevel)
 189+ 97D2 80           		add		a,b
 190+ 97D3 32 30 93     		ld		(DisplayTekLevel),a			; Tek += gov /2
 191+ 97D6 CB 27        		sla		a
 192+ 97D8 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 193+ 97DA 47           		ld		b,a
 194+ 97DB 3A 2E 93     		ld		a,(DisplayEcononmy)
 195+ 97DE 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 196+ 97DF 47           		ld		b,a
 197+ 97E0 3A 2F 93     		ld		a,(DisplayGovernment)
 198+ 97E3 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 199+ 97E4 32 31 93     		ld		(DisplayPopulation),a
 200+ 97E7 3A 2E 93     		ld		a,(DisplayEcononmy)
 201+ 97EA EE 07        		xor		7							; Onto productivity
 202+ 97EC C6 03        		add		3							;  (Flipped eco +3)
 203+ 97EE 57           		ld		d,a
 204+ 97EF 3A 2F 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 205+ 97F2 C6 04        		add		4
 206+ 97F4 5F           		ld		e,a
 207+ 97F5 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 208+ 97F7 3A 31 93     		ld		a,(DisplayPopulation)		; then we use d for radius
 209+ 97FA 57           		ld		d,a
 210+ 97FB ED 30        		mul
 211+ 97FD CB 23        		sla		e
 212+ 97FF CB 1A        		rr		d
 213+ 9801 CB 23        		sla		e
 214+ 9803 CB 1A        		rr		d
 215+ 9805 CB 23        		sla		e
 216+ 9807 CB 1A        		rr		d							; de * 8
 217+ 9809 ED 53 33 93  		ld		(DisplayProductivity),de
 218+ 980D              .DoRadius:
 219+ 980D 3A 25 93     		ld		a,(WorkingSeeds+3)
 220+ 9810 4F           		ld		c,a
 221+ 9811 3A 27 93     		ld		a,(WorkingSeeds+5)
 222+ 9814 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 223+ 9816 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 224+ 9818 47           		ld		b,a							;
 225+ 9819 ED 43 37 93  		ld		(DisplayRadius),bc
 226+ 981D C9           		ret
 227+ 981E
# file closed: ./Variables/galaxy_seed.asm
1077  981E                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 981E 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 9822 65 00
   2+ 9824 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 9828 00
   3+ 9829 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 982D 74 61 72 79
   3+ 9831 00
   4+ 9832 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 9836 6E 67 00
   5+ 9839 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 983D 6F 6D 00
   6+ 9840
   7+ 9840 1E 98 24 98  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 9844 29 98 32 98
   7+ 9848 39 98
   8+ 984A              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 984A
  10+ 984A 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 984E 65 64 00
  11+ 9851 47 72 65 65  ConditionName2		DB "Green",0
  11+ 9855 6E 00
  12+ 9857 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 985B 6F 77 00
  13+ 985E 52 65 64 00  ConditionName4		DB "Red",0
  14+ 9862
  15+ 9862 4A 98 51 98  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 9866 57 98 5E 98
  16+ 986A              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 986A
  18+ 986A 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 986E 53 45 49 54
  18+ 9872 49 4C 45 54
  18+ 9876 53 54 4F 4E
  18+ 987A 4C 4F 4E 55
  18+ 987E 54 48 4E 4F
  18+ 9882 41 4C 4C 45
  18+ 9886 58 45 47 45
  18+ 988A 5A 41 43 45
  18+ 988E 42 49 53 4F
  18+ 9892 55 53 45 53
  18+ 9896 41 52 4D 41
  18+ 989A 49 4E 44 49
  18+ 989E 52 45 41 3F
  18+ 98A2 45 52 41 54
  18+ 98A6 45 4E 42 45
  18+ 98AA 52 41 4C 41
  18+ 98AE 56 45 54 49
  18+ 98B2 45 44 4F 52
  18+ 98B6 51 55 41 4E
  18+ 98BA 54 45 49 53
  18+ 98BE 52 49 4F 4E
  18+ 98C2 00
  19+ 98C3
  20+ 98C3 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 98C7 10 00 20 00
  20+ 98CB 40 00 80 00
  20+ 98CF 00 02 00 0A
  20+ 98D3 00 19 00 49
  20+ 98D7 FF FF
  21+ 98D9
  22+ 98D9 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 98DD 6C 65 73 73
  22+ 98E1 00
  23+ 98E2 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 98E6 6C 79 20 48
  23+ 98EA 61 72 6D 6C
  23+ 98EE 65 73 73 00
  24+ 98F2 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 98F6 00
  25+ 98F7 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 98FB 61 67 65 00
  26+ 98FF 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 9903 65 20 41 76
  26+ 9907 65 72 61 67
  26+ 990B 65 00
  27+ 990D 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 9911 65 74 65 6E
  27+ 9915 74 00
  28+ 9917 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 991B 65 72 6F 75
  28+ 991F 73 00
  29+ 9921 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 9925 6C 79 00
  30+ 9928 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 992C 20 45 20 4C
  30+ 9930 20 49 20 54
  30+ 9934 20 45 20 2D
  30+ 9938 2D 2D 00
  31+ 993B 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 993F 6C 6F 62 73
  31+ 9943 67 6F 64 00
  32+ 9947 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 994B 65 72 00
  33+ 994E
  34+ 994E D9 98 E2 98  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 9952 F2 98 F7 98
  34+ 9956 FF 98 0D 99
  34+ 995A 17 99 21 99
  34+ 995E 28 99 3B 99
  34+ 9962 47 99
  35+ 9964              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 9964
  37+ 9964
  38+ 9964              getTableText:
  39+ 9964              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 9964              ; ">Note for ranking first 2 bytes are target rank"
  41+ 9964 D5           	push	de								; save DE as we will likley need it in caller
  42+ 9965 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 9967 ED 31        	add		hl,a
  44+ 9969 5E           	ld		e,(hl)
  45+ 996A 23           	inc		hl
  46+ 996B 56           	ld		d,(hl)							; de = indexed address
  47+ 996C EB           	ex		de,hl							; flip it to hl
  48+ 996D D1           	pop		de								; retrieve de
  49+ 996E C9           	ret										; return with hl as start entry
  50+ 996F
  51+ 996F
  52+ 996F              ;               CF      ZF      Result
  53+ 996F              ;               -----------------------------------
  54+ 996F              ;               0       0       HL > DE
  55+ 996F              ;               0       1       HL == DE
  56+ 996F              ;               1       0       HL < DE
  57+ 996F              ;               1       1       Impossible
  58+ 996F              getRankIndex:
  59+ 996F              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 996F              ; ">Note for ranking first 2 bytes are target rank"
  61+ 996F 7A           	ld		a,d
  62+ 9970 B3           	or		e
  63+ 9971 FE 00        	cp		0
  64+ 9973 C8           	ret		z								; quicks skip for 0 kills
  65+ 9974 AF           	xor 	a
  66+ 9975 21 C3 98     	ld		hl,RankingTable
  67+ 9978              .testLoop:
  68+ 9978 4E           	ld		c,(hl)
  69+ 9979 23           	inc		hl
  70+ 997A 46           	ld		b,(hl)							; bc = ranking
  71+ 997B E5           	push	hl
  72+ 997C 60           	ld		h,b
  73+ 997D 69           	ld		l,c
  74+ 997E CD 3F A3     	call	compare16HLDE
  75+ 9981 38 06        	jr		c,.HLLTDE
  76+ 9983              .HLGTEDE									; Found the correct rank
  77+ 9983 E1           	pop		hl
  78+ 9984 23           	inc		hl								; move to next value
  79+ 9985 23           	inc		hl
  80+ 9986 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9987 18 EF        	jr		.testLoop
  82+ 9989              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9989 E1           	pop		hl
  84+ 998A C9           	ret
  85+ 998B
# file closed: ./Tables/text_tables.asm
1078  998B                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 998B 58 00        WordDummy					DB  "X",0
   2+ 998D 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9991 74 00
   3+ 9993 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9997 74 00
   4+ 9999 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 999D 00
   5+ 999E 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 99A2 00
   6+ 99A3 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 99A7 65 00
   7+ 99A9 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 99AD 70 65 00
   8+ 99B0 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 99B4 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 99B8 6F 00
  10+ 99BA 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 99BE 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 99C2 00
  12+ 99C3 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 99C7 70 73 00
  13+ 99CA 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 99CE 4D 2E 00
  14+ 99D1 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 99D5 65 6D 00
  15+ 99D8 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 99DC 67 79 00
  16+ 99DF 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 99E3 00
  17+ 99E4 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 99E8 72 00
  18+ 99EA 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 99EE 65 00
  19+ 99F0 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 99F4 00
  20+ 99F5 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 99F9 61 72 79 00
  21+ 99FD 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 9A01 6E 67 00
  22+ 9A04 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 9A08 6F 6D 00
  23+ 9A0B 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 9A0F 00
  24+ 9A10 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 9A14 6C 64 00
  25+ 9A17 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 9A1B 69 6E 67 00
  26+ 9A1F 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 9A23 75 74 65 72
  26+ 9A27 73 00
  27+ 9A29 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 9A2D 72 73 70 61
  27+ 9A31 63 65 00
  28+ 9A34 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 9A38 63 74 69 63
  28+ 9A3C 00
  29+ 9A3D 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 9A41 61 00
  30+ 9A43 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 9A47 6E 00
  31+ 9A49 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 9A4D 6E 64 65 72
  31+ 9A51 00
  32+ 9A52 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 9A56 74 69 76 65
  32+ 9A5A 00
  33+ 9A5B 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 9A5F 00
  34+ 9A60 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 9A64 69 6C 65 73
  34+ 9A68 00
  35+ 9A69 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 9A6D 6F 61 63 74
  35+ 9A71 69 76 65 73
  35+ 9A75 00
  36+ 9A76 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 9A7A 65 73 00
  37+ 9A7D 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 9A81 6F 72 2F 57
  37+ 9A85 69 6E 65 73
  37+ 9A89 00
  38+ 9A8A 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 9A8E 72 69 65 73
  38+ 9A92 00
  39+ 9A93 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 9A97 6F 74 69 63
  39+ 9A9B 73 00
  40+ 9A9D 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 9AA1 69 6E 65 72
  40+ 9AA5 79 00
  41+ 9AA7 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 9AAB 79 73 00
  42+ 9AAE 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 9AB2 61 72 6D 73
  42+ 9AB6 00
  43+ 9AB7 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 9ABB 00
  44+ 9ABC 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 9AC0 72 61 6C 73
  44+ 9AC4 00
  45+ 9AC5 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 9AC9 00
  46+ 9ACA 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 9ACE 69 6E 75 6D
  46+ 9AD2 00
  47+ 9AD3 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 9AD7 53 74 6F 6E
  47+ 9ADB 65 73 00
  48+ 9ADE 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 9AE2 6E 20 49 74
  48+ 9AE6 65 6D 73 00
  49+ 9AEA 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 9AEE 65 73 00
  50+ 9AF1 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 9AF5 67 72 61 6D
  50+ 9AF9 73 00
  51+ 9AFB 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 9AFF 73 00
  52+ 9B01 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 9B05 74 00
  53+ 9B07 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 9B0B 65 00
  54+ 9B0D 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 9B11 74 00
  55+ 9B13 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 9B17 00
  56+ 9B18 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 9B1B 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 9B1F 61 6E 63 65
  57+ 9B23 00
  58+ 9B24 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 9B28 6F 6D 79 00
  59+ 9B2C 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 9B30 72 6E 6D 65
  59+ 9B34 6E 74 00
  60+ 9B37 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 9B3B 4C 65 76 65
  60+ 9B3F 6C 00
  61+ 9B41 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 9B45 6C 61 74 69
  61+ 9B49 6F 6E 00
  62+ 9B4C 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 9B50 69 6F 6E 00
  63+ 9B54 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 9B58 69 6F 6E 00
  64+ 9B5C 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 9B60 73 00
  65+ 9B62 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 9B66 75 63 74 69
  65+ 9B6A 76 69 74 79
  65+ 9B6E 00
  66+ 9B6F 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 9B73 61 67 65 00
  67+ 9B77 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 9B7B 75 73 00
  68+ 9B7E 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 9B81 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 9B85 00
  70+ 9B86 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 9B8A 00
  71+ 9B8B 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 9B8F 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 9B93 6C 79 00
  73+ 9B96 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 9B9A 00
  74+ 9B9B 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 9B9F 73 74 72 69
  74+ 9BA3 61 6C 00
  75+ 9BA6 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 9BAA 63 75 6C 74
  75+ 9BAE 75 72 61 6C
  75+ 9BB2 00
  76+ 9BB3 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 9BB7 63 68 79 00
  77+ 9BBB 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 9BBF 61 6C 00
  78+ 9BC2 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 9BC6 69 2D 47 6F
  78+ 9BCA 76 65 72 6E
  78+ 9BCE 6D 65 6E 74
  78+ 9BD2 00
  79+ 9BD3 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 9BD7 61 74 6F 72
  79+ 9BDB 73 68 69 70
  79+ 9BDF 00
  80+ 9BE0 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 9BE4 75 6E 69 73
  80+ 9BE8 74 00
  81+ 9BEA 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 9BEE 65 64 65 72
  81+ 9BF2 61 63 79 00
  82+ 9BF6 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 9BFA 63 72 61 63
  82+ 9BFE 79 00
  83+ 9C00 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 9C04 6F 72 61 74
  83+ 9C08 65 20 53 74
  83+ 9C0C 61 74 65 00
  84+ 9C10 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 9C14 65 00
  85+ 9C16 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 9C1A 74 00
  86+ 9C1C 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 9C20 73 00
  87+ 9C22 30 00        Word0						DB  "0",0				   ;86
  88+ 9C24 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 9C28 65 74 00
  89+ 9C2B 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 9C2F 65 73 00
  90+ 9C32 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 9C36 75 63 74 00
  91+ 9C3A 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 9C3E 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 9C42 65 00
  93+ 9C44 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 9C48 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 9C4C 00
  95+ 9C4D 74 00        Wordt						DB  "t",0                  ;94
  96+ 9C4F 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 9C52 67 00        Wordg						DB  "g",0                  ;96
  98+ 9C54 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 9C58 69 74 69 74
  98+ 9C5C 79 00
  99+ 9C5E 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 9C62 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 9C66 6B 00
 101+ 9C68 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 9C6C 70 00
 102+ 9C6E 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 9C72 00
 103+ 9C73 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 9C77 69 6C 65 00
 104+ 9C7B 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 9C7F 72 64 72 69
 104+ 9C83 76 65 00
 105+ 9C86 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 9C8A 74 61 72 79
 105+ 9C8E 00
 106+ 9C8F
 107+ 9C8F 8B 99 8D 99  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 9C93 93 99 99 99
 108+ 9C97 9E 99 A3 99  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 9C9B A9 99 B0 99
 109+ 9C9F B4 99 BA 99  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 9CA3 BE 99 C3 99
 110+ 9CA7 CA 99 D1 99  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 9CAB D8 99 DF 99
 111+ 9CAF E4 99 EA 99  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 9CB3 F0 99 F5 99
 112+ 9CB7 FD 99 04 9A  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 9CBB 0B 9A 10 9A
 113+ 9CBF 17 9A 1F 9A  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 9CC3 29 9A 34 9A
 114+ 9CC7 3D 9A 43 9A  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 9CCB 49 9A 52 9A
 115+ 9CCF 5B 9A 60 9A  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 9CD3 69 9A 76 9A
 116+ 9CD7 7D 9A 8A 9A  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 9CDB 93 9A 9D 9A
 117+ 9CDF A7 9A AE 9A  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 9CE3 B7 9A BC 9A
 118+ 9CE7 C5 9A CA 9A  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 9CEB D3 9A DE 9A
 119+ 9CEF EA 9A F1 9A  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 9CF3 FB 9A 01 9B
 120+ 9CF7 07 9B 0D 9B  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 9CFB 13 9B 18 9B
 121+ 9CFF 1B 9B 24 9B  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 9D03 2C 9B 37 9B
 122+ 9D07 41 9B 4C 9B  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 9D0B 54 9B 5C 9B
 123+ 9D0F 62 9B 6F 9B  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 9D13 77 9B 7E 9B
 124+ 9D17 81 9B        					DW  WordMCR																	;68
 125+ 9D19 86 9B 8B 9B  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 9D1D 8F 9B 96 9B
 126+ 9D21 9B 9B A6 9B                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 9D25 B3 9B BB 9B  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 9D29 C2 9B D3 9B
 128+ 9D2D E0 9B EA 9B                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 9D31 F6 9B 00 9C
 129+ 9D35 10 9C 16 9C  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 9D39 1C 9C 22 9C
 130+ 9D3D 24 9C 2B 9C  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 9D41 32 9C 3A 9C
 131+ 9D45 3E 9C 44 9C                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 9D49 48 9C
 132+ 9D4B 4D 9C 4F 9C  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 9D4F 52 9C
 133+ 9D51 54 9C 5E 9C  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 9D55 62 9C 68 9C
 134+ 9D59 6E 9C 73 9C                      DW  WordShip,           WordMissile       ; 101
 135+ 9D5D
 136+ 9D5D              ; Phrases
 137+ 9D5D 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 9D61 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 9D64 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 9D67 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 9D6A 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 9D6D 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 9D70 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 9D73 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 9D76 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 9D7A 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 9D7E 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 9D82 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 9D86 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 9D8A 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 9D8D 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 9D90 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 9D93 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 9D96 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 9D99 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 9D9C 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 9D9F 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 9DA2 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 9DA5 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 9DA8 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 9DAB 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 9DAF 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 9DB2 64 65        TextEquipShip               DB  100,101          ;26
 164+ 9DB4
 165+ 9DB4 00           TextDummy					DB  0
 166+ 9DB5
 167+ 9DB5 5D 9D 61 9D  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 9DB9 64 9D
 168+ 9DBB 67 9D 6A 9D  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 9DBF 6D 9D
 169+ 9DC1 70 9D 73 9D  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 9DC5 76 9D 7A 9D  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 9DC9 7E 9D 82 9D
 171+ 9DCD 86 9D 8A 9D  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 9DD1 8D 9D
 172+ 9DD3 90 9D 93 9D  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 9DD7 99 9D 96 9D
 172+ 9DDB A2 9D 9C 9D
 172+ 9DDF 9F 9D A5 9D
 173+ 9DE3 A8 9D        					DW  TextLightYears		                                            ; 21 23
 174+ 9DE5 AB 9D AF 9D  					DW  Text0LightYears, TextMarketPrices
 175+ 9DE9 B4 9D        					DW  TextDummy;  25
 176+ 9DEB 00 00 00...  TextBuffer			DS	33
 177+ 9E0C
 178+ 9E0C              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ 9E0C              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ 9E0C
 181+ 9E0C              CapitaliseString:
 182+ 9E0C              ; ">CapitaliseString hl = address"
 183+ 9E0C              .CapLoop:
 184+ 9E0C 23           	inc		hl
 185+ 9E0D 7E           	ld		a,(hl)
 186+ 9E0E FE 00        	cp		0
 187+ 9E10 C8           	ret		z
 188+ 9E11 FE 5B        	cp		'Z'+1
 189+ 9E13 30 F7        	jr		nc,.CapLoop
 190+ 9E15 FE 41        	cp		'A'
 191+ 9E17 38 F3        	jr		c,.CapLoop
 192+ 9E19              .LowerCase:
 193+ 9E19 C6 20        	add		a,'a'-'A'
 194+ 9E1B 77           	ld		(hl),a
 195+ 9E1C 18 EE        	jr		.CapLoop
 196+ 9E1E
 197+ 9E1E              WordIndexToAddress:
 198+ 9E1E 21 8F 9C     	ld		hl,WordIdx
 199+ 9E21 ED 31        	add		hl,a
 200+ 9E23 ED 31        	add		hl,a
 201+ 9E25 D5           	push	de
 202+ 9E26 5E           	ld		e,(hl)
 203+ 9E27 23           	inc		hl
 204+ 9E28 56           	ld		d,(hl)
 205+ 9E29 EB           	ex		de,hl
 206+ 9E2A D1           	pop		de
 207+ 9E2B C9           	ret
 208+ 9E2C
 209+ 9E2C
 210+ 9E2C              expandTokenToString:
 211+ 9E2C              ; ">expandTokenToString a = texttoken"
 212+ 9E2C 21 B5 9D     	ld		hl,TextTokens
 213+ 9E2F CD 64 99     	call	getTableText
 214+ 9E32 11 EB 9D     	ld		de,TextBuffer
 215+ 9E35              .ReadLoop:
 216+ 9E35 7E           	ld		a,(hl)
 217+ 9E36 FE 00        	cp		0
 218+ 9E38 28 1B        	jr		z,.ReadDone
 219+ 9E3A E5           	push	hl
 220+ 9E3B D5           	push	de
 221+ 9E3C 21 8F 9C     	ld		hl,WordIdx
 222+ 9E3F CD 64 99     	call	getTableText
 223+ 9E42 D1           	pop		de
 224+ 9E43              .WordExpandLoop:
 225+ 9E43 7E           	ld		a,(hl)
 226+ 9E44 FE 00        	cp		0
 227+ 9E46 28 05        	jr		z,.AddSpace
 228+ 9E48              ;.GetChar:
 229+ 9E48 12           	ld		(de),a
 230+ 9E49 13           	inc		de
 231+ 9E4A 23           	inc		hl
 232+ 9E4B 18 F6        	jr		.WordExpandLoop
 233+ 9E4D              .AddSpace:
 234+ 9E4D 3E 20        	ld		a,' '
 235+ 9E4F 12           	ld		(de),a
 236+ 9E50 13           	inc		de
 237+ 9E51 E1           	pop		hl
 238+ 9E52 23           	inc		hl
 239+ 9E53 18 E0        	jr		.ReadLoop
 240+ 9E55              .ReadDone:
 241+ 9E55 1B           	dec		de
 242+ 9E56 AF           	xor		a
 243+ 9E57 12           	ld		(de),a
 244+ 9E58 C9           	ret
 245+ 9E59
# file closed: ./Tables/dictionary.asm
1079  9E59                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9E59 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9E5D 53 45 49 54
   1+ 9E61 49 4C 45 54
   1+ 9E65 53 54 4F 4E
   1+ 9E69 4C 4F 4E 55
   1+ 9E6D 54 48 4E 4F
   2+ 9E71 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9E74 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9E78 45 5A 41 43
   3+ 9E7C 45 42 49 53
   3+ 9E80 4F 55 53 45
   3+ 9E84 53 41 52 4D
   3+ 9E88 41 49 4E 44
   3+ 9E8C 49 52 45 41
   4+ 9E90 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9E94 54 45 4E 42
   4+ 9E98 45 52 41 4C
   4+ 9E9C 41 56 45 54
   4+ 9EA0 49 45 44 4F
   4+ 9EA4 52 51 55 41
   4+ 9EA8 4E 54 45 49
   4+ 9EAC 53 52 49 4F
   4+ 9EB0 4E
   5+ 9EB1
   6+ 9EB1              ; TODO Moveinto galaxy data module
   7+ 9EB1 00 00 00...  name_expanded	DS 32
   8+ 9ED1 00           				DB 0
   9+ 9ED2
  10+ 9ED2
  11+ 9ED2
  12+ 9ED2              NamingLoop:
  13+ 9ED2 3A 27 93     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 9ED5 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 9ED7 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 9ED9 28 12        	jr		z,.SkipPhrase
  17+ 9EDB C6 0C        	add		a,12
  18+ 9EDD CB 27        	sla		a					; phrase = (a+12)*2
  19+ 9EDF 21 59 9E     	ld		hl,name_digrams
  20+ 9EE2 ED 31        	add		hl,a
  21+ 9EE4 ED A0        	ldi
  22+ 9EE6 7E           	ld		a,(hl)
  23+ 9EE7 FE 3F        	cp		'?'
  24+ 9EE9 28 02        	jr		z,.SkipPhrase
  25+ 9EEB              .AddExtra:
  26+ 9EEB ED A0        	ldi
  27+ 9EED              .SkipPhrase:
  28+ 9EED D5           	push	de
  29+ 9EEE CD 02 97     	call	working_seed
  30+ 9EF1 D1           	pop		de
  31+ 9EF2 C9           	ret
  32+ 9EF3
  33+ 9EF3              ;GetDigramGalaxySeed:
  34+ 9EF3              ;	call	copy_galaxy_to_working
  35+ 9EF3              ;	jr		GetDigramWorkingSeed
  36+ 9EF3              ;GetDigramSystemSeed:
  37+ 9EF3              ;	call	copy_system_to_working
  38+ 9EF3              ;GetDigramWorkingSeed:
  39+ 9EF3              ;; ">GetDigram a = digram seed"
  40+ 9EF3              ;	ld		de,name_expanded
  41+ 9EF3              ;	ld		b,3
  42+ 9EF3              ;	ld		a,(WorkingSeeds)
  43+ 9EF3              ;	and		$40
  44+ 9EF3              ;	jr		z,.SmallSizeName
  45+ 9EF3              ;.LargeSizeName:
  46+ 9EF3              ;	call	NamingLoop
  47+ 9EF3              ;.SmallSizeName:
  48+ 9EF3              ;	call	NamingLoop
  49+ 9EF3              ;	call	NamingLoop
  50+ 9EF3              ;	call	NamingLoop
  51+ 9EF3              ;.DoneName:
  52+ 9EF3              ;	ex		de,hl
  53+ 9EF3              ;	ld		(hl),0
  54+ 9EF3              ;	ex		de,hl
  55+ 9EF3              ;	ret
  56+ 9EF3
  57+ 9EF3
  58+ 9EF3
  59+ 9EF3              ;GetDigramWorkingSeed:
  60+ 9EF3              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 9EF3              ;	ld		b,5					; working seed
  62+ 9EF3              ;	ld		de,name_expanded
  63+ 9EF3              ;.ExpansionLoop:
  64+ 9EF3              ;	push	bc
  65+ 9EF3              ;	ld		hl,WorkingSeeds
  66+ 9EF3              ;	ld		a,b
  67+ 9EF3              ;	add		hl,a
  68+ 9EF3              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 9EF3              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 9EF3              ;	cp		0					; 0 = skip 2 chars
  71+ 9EF3              ;	jr		z,.SkipPhrase
  72+ 9EF3              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 9EF3              ;	call	TT27
  74+ 9EF3              ;.SkipPhrase:
  75+ 9EF3              ;	push	de
  76+ 9EF3              ;	call	next_working_seed
  77+ 9EF3              ;	pop		de
  78+ 9EF3              ;	pop		bc
  79+ 9EF3              ;	djnz	GetDigramWorkingSeed
  80+ 9EF3              ;.DoneName:
  81+ 9EF3              ;	ex		de,hl
  82+ 9EF3              ;	ld		(hl),0
  83+ 9EF3              ;	ex		de,hl
  84+ 9EF3              ;	ret
  85+ 9EF3              ;
  86+ 9EF3              ;ExpandToken:
  87+ 9EF3              ;	DE = target
  88+ 9EF3              ;	a = token
  89+ 9EF3              ;
  90+ 9EF3              ;PlanetDigram:
  91+ 9EF3              ;	cp		&A0							; >- 160
  92+ 9EF3              ;	jr		c,MorePage4
  93+ 9EF3              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 9EF3              ;	asl		2							; Multiply by 2
  95+ 9EF3              ;	ld		hl, name_digrams2
  96+ 9EF3              ;	add		hl,a
  97+ 9EF3              ;	ld		a,(hl)
  98+ 9EF3              ;	call	ProcessTextToken
  99+ 9EF3              ;	inc		hl
 100+ 9EF3              ;	ld		a,(hl)
 101+ 9EF3              ;	cp		'?'
 102+ 9EF3              ;	ret		z
 103+ 9EF3              ;	call	ProcessTextToken
 104+ 9EF3              ;	ret
 105+ 9EF3              ;MorePage4:
 106+ 9EF3              ;	sub		$A0
 107+ 9EF3              ;ExtraTokenCheck:
 108+ 9EF3              ;	push	de							; save target address
 109+ 9EF3              ;	push	bc
 110+ 9EF3              ;	ld		b,a
 111+ 9EF3              ;	ld		hl,varV
 112+ 9EF3              ;	ld		(VarV),0400
 113+ 9EF3              ;	ld		(varV),a
 114+ 9EF3              ;	ld
 115+ 9EF3              ;
 116+ 9EF3              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 9EF3              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 9EF3              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 9EF3              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 9EF3              ;0A                      ASL A		      \ *= 2
 121+ 9EF3              ;A8                      TAY 		      \ digram index = 0to62
 122+ 9EF3              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 9EF3              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 9EF3              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 9EF3              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 9EF3              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 9EF3              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 9EF3              ;
 129+ 9EF3              ;	.TT47	\ more page4, subtract #160
 130+ 9EF3              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 9EF3              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 9EF3              ;AA                      TAX 		\ copy of word index
 133+ 9EF3              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 9EF3              ;85 22                   STA &22		\ V
 135+ 9EF3              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 9EF3              ;85 23                   STA &23		\ V+1
 137+ 9EF3              ;A0 00                   LDY #0
 138+ 9EF3              ;8A                      TXA 		\ token = word index
 139+ 9EF3              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 9EF3              ;	.TT51	\ counters Y letter, X token
 141+ 9EF3              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 9EF3              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 9EF3              ;C8                      INY 		\ letter count
 144+ 9EF3              ;D0 F9                   BNE TT51	\ loop Y
 145+ 9EF3              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 9EF3              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 9EF3              ;	.TT49	\ word ended
 148+ 9EF3              ;C8                      INY
 149+ 9EF3              ;D0 02                   BNE TT59    	\ next word
 150+ 9EF3              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 9EF3              ;	.TT59	\ next word
 152+ 9EF3              ;CA                      DEX 		\ token count
 153+ 9EF3              ;D0 ED                   BNE TT51	\ loop X token
 154+ 9EF3              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 9EF3              ;98                      TYA
 156+ 9EF3              ;48                      PHA 		\ store Yindex
 157+ 9EF3              ;A5 23                   LDA &23		\ V+1
 158+ 9EF3              ;48                      PHA 		\ correct pointer hi
 159+ 9EF3              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 9EF3              ;49 23                   EOR #&23	\ decode '#'
 161+ 9EF3              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 9EF3              ;68                      PLA 		\ restore this depth's Vhi
 163+ 9EF3              ;85 23                   STA &23		\ V+1
 164+ 9EF3              ;68                      PLA
 165+ 9EF3              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 9EF3              ;C8                      INY 		\ next letter
 167+ 9EF3              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 9EF3              ;E6 23                   INC &23		\ V+1
 169+ 9EF3              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 9EF3              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 9EF3              ;	.TT48 	\ rts
 172+ 9EF3              ;60                      RTS 		\ end of flight token printing TT27
 173+ 9EF3              ;
 174+ 9EF3              ;
 175+ 9EF3              ;
 176+ 9EF3              ;
 177+ 9EF3              ;
 178+ 9EF3              ;
 179+ 9EF3              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 9EF3              ;;AA                      TAX		\ copy token to count down
 181+ 9EF3              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 9EF3              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 9EF3              ;CA                      DEX
 184+ 9EF3              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 9EF3              ;CA                      DEX
 186+ 9EF3              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 9EF3              ;CA                      DEX
 188+ 9EF3              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 9EF3              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 9EF3              ;CA                      DEX
 191+ 9EF3              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 9EF3              ;CA                      DEX
 193+ 9EF3              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 9EF3              ;CA                      DEX
 195+ 9EF3              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 9EF3              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 9EF3              ;85 72                   STA &72	 	\ QQ17
 198+ 9EF3              ;60                      RTS
 199+ 9EF3              ;CA                      DEX 		\ skip Acc ==7
 200+ 9EF3              ;CA                      DEX
 201+ 9EF3              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 9EF3              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 9EF3              ;60                      RTS
 204+ 9EF3              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 9EF3              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 9EF3              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 9EF3              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 9EF3              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 9EF3              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 9EF3              ;C9 20                   CMP #32		\ < 32 ?
 211+ 9EF3              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 9EF3              ;		\ Token  < 14 or > 31
 213+ 9EF3              ;A6 72                   LDX &72	 	\ QQ17
 214+ 9EF3              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 9EF3              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 9EF3              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 9EF3              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 9EF3              ;	.TT42	\ Uppercase to lowercase
 219+ 9EF3              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 9EF3              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 9EF3              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 9EF3              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 9EF3              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 9EF3              ;	.TT44	\ print character as is with TT26
 225+ 9EF3              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 9EF3              ;
 227+ 9EF3              ;	.TT41	\ QQ17 bit7 set
 228+ 9EF3              ;24 72                   BIT &72		\ QQ17
 229+ 9EF3              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 9EF3              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 9EF3              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 9EF3              ;48                      PHA 		\ else store token Acc
 233+ 9EF3              ;8A                      TXA 		\ QQ17 copy
 234+ 9EF3              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 9EF3              ;85 72                   STA &72	 	\ QQ17
 236+ 9EF3              ;68                      PLA 		\ restore token
 237+ 9EF3              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 9EF3              ;
 239+ 9EF3              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 9EF3              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 9EF3              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 9EF3              ;
 243+ 9EF3              ;	.crlf	\ Acc == 9,  colon on right
 244+ 9EF3              ;A9 15                   LDA #21		\ on right
 245+ 9EF3              ;85 2C                   STA &2C		\ XC
 246+ 9EF3              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 9EF3              ;
 248+ 9EF3              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 9EF3              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 9EF3              ;F0 63                   BEQ TT48	\ rts
 251+ 9EF3              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 9EF3              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 9EF3              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 9EF3              ;48                      PHA 		\ push token
 255+ 9EF3              ;8A                      TXA 		\ QQ17 copy
 256+ 9EF3              ;29 BF                   AND #&BF	\ clear bit6
 257+ 9EF3              ;85 72                   STA &72	 	\ QQ17
 258+ 9EF3              ;68                      PLA 		\ pull token
 259+ 9EF3              ;	.TT74	\ TT26, print character.
 260+ 9EF3              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 9EF3              ;
 262+ 9EF3              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 9EF3              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 9EF3              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 9EF3              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 9EF3              ;0A                      ASL A		      \ *= 2
 267+ 9EF3              ;A8                      TAY 		      \ digram index = 0to62
 268+ 9EF3              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 9EF3              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 9EF3              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 9EF3              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 9EF3              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 9EF3              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 9EF3              ;
 275+ 9EF3              ;	.TT47	\ more page4, subtract #160
 276+ 9EF3              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 9EF3              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 9EF3              ;AA                      TAX 		\ copy of word index
 279+ 9EF3              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 9EF3              ;85 22                   STA &22		\ V
 281+ 9EF3              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 9EF3              ;85 23                   STA &23		\ V+1
 283+ 9EF3              ;A0 00                   LDY #0
 284+ 9EF3              ;8A                      TXA 		\ token = word index
 285+ 9EF3              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 9EF3              ;	.TT51	\ counters Y letter, X token
 287+ 9EF3              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 9EF3              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 9EF3              ;C8                      INY 		\ letter count
 290+ 9EF3              ;D0 F9                   BNE TT51	\ loop Y
 291+ 9EF3              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 9EF3              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 9EF3              ;	.TT49	\ word ended
 294+ 9EF3              ;C8                      INY
 295+ 9EF3              ;D0 02                   BNE TT59    	\ next word
 296+ 9EF3              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 9EF3              ;	.TT59	\ next word
 298+ 9EF3              ;CA                      DEX 		\ token count
 299+ 9EF3              ;D0 ED                   BNE TT51	\ loop X token
 300+ 9EF3              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 9EF3              ;98                      TYA
 302+ 9EF3              ;48                      PHA 		\ store Yindex
 303+ 9EF3              ;A5 23                   LDA &23		\ V+1
 304+ 9EF3              ;48                      PHA 		\ correct pointer hi
 305+ 9EF3              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 9EF3              ;49 23                   EOR #&23	\ decode '#'
 307+ 9EF3              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 9EF3              ;68                      PLA 		\ restore this depth's Vhi
 309+ 9EF3              ;85 23                   STA &23		\ V+1
 310+ 9EF3              ;68                      PLA
 311+ 9EF3              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 9EF3              ;C8                      INY 		\ next letter
 313+ 9EF3              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 9EF3              ;E6 23                   INC &23		\ V+1
 315+ 9EF3              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 9EF3              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 9EF3              ;	.TT48 	\ rts
 318+ 9EF3              ;60                      RTS 		\ end of flight token printing TT27
 319+ 9EF3              ;
 320+ 9EF3              ;
 321+ 9EF3              ;
# file closed: ./Tables/name_digrams.asm
1080  9EF3              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1081  9EF3
1082  9EF3              ; Include all maths libraries to test assembly
1083  9EF3                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ 9EF3              addhldesigned:
   2+ 9EF3 CB 7C                bit     7,h
   3+ 9EF5 20 03                jr      nz,.noneghl
   4+ 9EF7 CD 55 A3             call    negate16hl
   5+ 9EFA              .noneghl:
   6+ 9EFA CB 7A                bit     7,d
   7+ 9EFC 20 03                jr      nz,.nonegde
   8+ 9EFE CD 5C A3             call    negate16de
   9+ 9F01              .nonegde:
  10+ 9F01 19                   add     hl,de                       ; do 2'd c add
  11+ 9F02 AF                   xor     a                           ; assume positive
  12+ 9F03 CB 7C                bit     7,h
  13+ 9F05 C8                   ret     z                           ; if not set then can exit early
  14+ 9F06 CD 55 A3             call    negate16hl
  15+ 9F09 3E FF                ld      a,$FF
  16+ 9F0B C9                   ret
  17+ 9F0C
# file closed: ./Maths/addhldesigned.asm
1084  9F0C                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ 9F0C
   2+ 9F0C              ; a = value to add
   3+ 9F0C              ; b = offset (equivalent to regX)
   4+ 9F0C              ; returns INWK [x] set to new value
   5+ 9F0C              addINWKbasigned:
   6+ 9F0C 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
   7+ 9F0F 4F           		ld      c,a                         ; preserve a
   8+ 9F10 78           		ld		a,b
   9+ 9F11 ED 31        		add		hl,a                        ; hl = INWK[x]
  10+ 9F13 79                   ld      a,c                         ; get back a value
  11+ 9F14 E6 80                and     $80                         ; get sign bit from a
  12+ 9F16 47                   ld      b,a                         ; now b = sign bit of a
  13+ 9F17 79                   ld      a,c                         ; a = original value
  14+ 9F18 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
  15+ 9F1A              ; hl = unsigned version of INWK0[b]
  16+ 9F1A              ; a = value to add, also in c which will optimise later code
  17+ 9F1A              ; b = sign bit of a ( in old code was varT)
  18+ 9F1A              addhlcsigned:
  19+ 9F1A 5E                   ld      e,(hl)                      ; de = INKK value
  20+ 9F1B 23                   inc     hl
  21+ 9F1C 56                   ld      d,(hl)
  22+ 9F1D 23                   inc     hl                          ; now pointing a sign
  23+ 9F1E 7E                   ld      a,(hl)                      ; a = sign bit
  24+ 9F1F EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
  25+ 9F20 A8                   xor     b                           ; a = resultant sign
  26+ 9F21 CB 7F                bit     7,a                         ; is it negative?
  27+ 9F23 28 28                jr      z,.postivecalc
  28+ 9F25              .negativecalc:
  29+ 9F25 7C                   ld      a,h
  30+ 9F26 E6 7F                and     SignMask8Bit
  31+ 9F28 67                   ld      h,a                         ; strip high bit
  32+ 9F29 DD 68                ld      ixl,b                       ; save sign bit from b into d
  33+ 9F2B 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
  34+ 9F2D ED 42                sbc     hl,bc
  35+ 9F2F DD 45                ld      b,ixl                       ; get sign back
  36+ 9F31 EB                   ex      de,hl                       ; de = value hl = pointer to sign
  37+ 9F32 7E                   ld      a,(hl)                      ;
  38+ 9F33 E6 7F                and     SignMask8Bit
  39+ 9F35 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
  40+ 9F37 F6 80                or      $80                         ; set bit 0
  41+ 9F39 A8                   xor     b                           ; flip bit on sign (var T)
  42+ 9F3A 77                   ld      (hl),a
  43+ 9F3B 2B                   dec     hl
  44+ 9F3C 72                   ld      (hl),d
  45+ 9F3D 2B                   dec     hl
  46+ 9F3E 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
  47+ 9F3F EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
  48+ 9F40 D8                   ret     c                           ; if carry was set then we can exit now
  49+ 9F41              .nocarry:
  50+ 9F41 CD 55 A3             call    negate16hl                  ; get hl back to positive, a is still inkw+2
  51+ 9F44 B0                   or      b                           ; b is still varT
  52+ 9F45 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
  53+ 9F46 73                   ld      (hl),e
  54+ 9F47 23                   inc     hl
  55+ 9F48 72                   ld      (hl),d
  56+ 9F49 23                   inc     hl
  57+ 9F4A 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
  58+ 9F4B EB                   ex      de,hl                       ; hl = value de = pointer to sign
  59+ 9F4C C9                   ret
  60+ 9F4D              .postivecalc:
  61+ 9F4D DD 68                ld      ixl,b
  62+ 9F4F 06 00                ld      b,0
  63+ 9F51 19                   add     hl,de
  64+ 9F52 EB                   ex      de,hl
  65+ 9F53 DD B5                or      ixl                         ; we don;t need to recover b here
  66+ 9F55 77                   ld      (hl),a                      ; push sign into INWK[x]
  67+ 9F56 2B                   dec     hl
  68+ 9F57 72                   ld      (hl),d
  69+ 9F58 2B                   dec     hl
  70+ 9F59 73                   ld      (hl),e
  71+ 9F5A C9                   ret
  72+ 9F5B
  73+ 9F5B              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
  74+ 9F5B              ;MVT1
  75+ 9F5B              ;    S = bits 6 to 0 of A
  76+ 9F5B              ;    A = sign bit => T
  77+ 9F5B              ;    xor sign bit with ink[x] Sign
  78+ 9F5B              ;    if negative thn its not an add
  79+ 9F5B              ;
  80+ 9F5B              ;        and h, 7F
  81+ 9F5B              ;        b = 0
  82+ 9F5B              ;        c = varS
  83+ 9F5B              ;        subtract INW[X]hilo, bc
  84+ 9F5B              ;        retain carry
  85+ 9F5B              ;        get INKW[x]Sign
  86+ 9F5B              ;        and 7F
  87+ 9F5B              ;        subtract carry (so will go negtive if negative)
  88+ 9F5B              ;        xor bit 7 of h with T to flip bit
  89+ 9F5B              ;        write to INKW[x]Sign
  90+ 9F5B              ;
  91+ 9F5B              ;    else
  92+ 9F5B              ;MV10.
  93+ 9F5B              ;        add INWK[x]hi,lo, varS
  94+ 9F5B              ;        or      sign bit
  95+ 9F5B
  96+ 9F5B
# file closed: ./Maths/addhlasigned.asm
1085  9F5B                  INCLUDE "./Maths/Utilities/AddDEtoCash.asm"
# file opened: ./Maths/Utilities/AddDEtoCash.asm
   1+ 9F5B              ; Note its big endian
   2+ 9F5B 2A 0D 96     addDEtoCash:            ld      hl,(Cash)
   3+ 9F5E 19                                   add     hl,de
   4+ 9F5F 22 0D 96                             ld      (Cash),hl
   5+ 9F62 11 00 00                             ld      de,0
   6+ 9F65 2A 0F 96                             ld      hl,(Cash+2)
   7+ 9F68 ED 5A                                adc     hl,de
   8+ 9F6A 22 0F 96                             ld      (Cash+2),hl
   9+ 9F6D C9                                   ret
  10+ 9F6E
  11+ 9F6E 2A 0D 96     subDEfromCash:          ld      hl,(Cash)
  12+ 9F71 7C                                   ld      a,h
  13+ 9F72 B5                                   or      l
  14+ 9F73 2A 0F 96                             ld      hl,(Cash+2)
  15+ 9F76 B4                                   or      h
  16+ 9F77 B5                                   or      l
  17+ 9F78 C8                                   ret     z               ; No cash return
  18+ 9F79 B7                                   or      a
  19+ 9F7A 2A 0D 96                             ld      hl,(Cash)
  20+ 9F7D ED 52                                sbc     hl,de
  21+ 9F7F 22 0D 96                             ld      (Cash),hl
  22+ 9F82 11 00 00                             ld      de,0
  23+ 9F85 2A 0F 96                             ld      hl,(Cash+2)
  24+ 9F88 ED 52                                sbc     hl,de
  25+ 9F8A 22 0F 96                             ld      (Cash+2),hl
  26+ 9F8D                                      JumpOnBitSet h,7,.ZeroCash
  26+ 9F8D CB 7C       >                        bit 	7,h
  26+ 9F8F C2 93 9F    >                        jp      nz,.ZeroCash
  27+ 9F92 C9                                   ret
  28+ 9F93 21 00 00     .ZeroCash:              ld      hl,0
  29+ 9F96 22 0D 96                             ld      (Cash),hl
  30+ 9F99 22 0F 96                             ld      (Cash+2),hl
  31+ 9F9C C9                                   ret
  32+ 9F9D
# file closed: ./Maths/Utilities/AddDEtoCash.asm
1086  9F9D                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 9F9D              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 9F9D 2A 26 92                             ld  hl,(varRS)
   3+ 9FA0 3A 25 92                             ld  a,(varQ)
   4+ 9FA3 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 9FA5 11 00 00                             ld  de,0        ; de = XY
   6+ 9FA8 47                                   ld  b,a         ; b = Q
   7+ 9FA9                                      ShiftHLRight1
   7+ 9FA9 CB 3C       >			   srl h
   7+ 9FAB CB 1D       >			   rr  l
   8+ 9FAD CB 20                                sla b
   9+ 9FAF 30 03                                jr  nc,.LL126
  10+ 9FB1 EB           .LL125:                 ex de,hl
  11+ 9FB2 19                                   add hl,de
  12+ 9FB3 EB                                   ex  de,hl       ; de = de + rs
  13+ 9FB4              .LL126:                 ShiftHLRight1
  13+ 9FB4 CB 3C       >			   srl h
  13+ 9FB6 CB 1D       >			   rr  l
  14+ 9FB8 CB 20                                sla b
  15+ 9FBA 38 F5                                jr      c,.LL125
  16+ 9FBC 20 F6                                jr      nz,.LL126
  17+ 9FBE EB                                   ex      de,hl   ; hl = result
  18+ 9FBF D1 C1                                pop     bc,,de
  19+ 9FC1 C9                                   ret
  20+ 9FC2
  21+ 9FC2
  22+ 9FC2              MacroDEEquQmulASigned:  MACRO
  23+ 9FC2 ~                                    ld      d,a                         ; save a into d
  24+ 9FC2 ~                                    ld      a,(varQ)
  25+ 9FC2 ~                                    ld      e,a
  26+ 9FC2 ~                                    xor     d                           ; a = a xor var Q
  27+ 9FC2 ~                                    and     SignOnly8Bit
  28+ 9FC2 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ 9FC2 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ 9FC2 ~                                    and     SignMask8Bit
  31+ 9FC2 ~                                    ld      d,a
  32+ 9FC2 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ 9FC2 ~                                    and     SignMask8Bit
  34+ 9FC2 ~                                    ld      e,a
  35+ 9FC2 ~                                    mul                                 ; de = a * Q
  36+ 9FC2 ~                                    ld      a,d
  37+ 9FC2 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ 9FC2 ~                                    ld      d,a
  39+ 9FC2                                      ENDM
  40+ 9FC2
  41+ 9FC2
  42+ 9FC2
  43+ 9FC2                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ 9FC2              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ 9FC2 57          >                        ld      d,a                         ; save a into d
  44+ 9FC3 3A 25 92    >                        ld      a,(varQ)
  44+ 9FC6 5F          >                        ld      e,a
  44+ 9FC7 AA          >                        xor     d                           ; a = a xor var Q
  44+ 9FC8 E6 80       >                        and     SignOnly8Bit
  44+ 9FCA 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ 9FCB 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ 9FCC E6 7F       >                        and     SignMask8Bit
  44+ 9FCE 57          >                        ld      d,a
  44+ 9FCF 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ 9FD0 E6 7F       >                        and     SignMask8Bit
  44+ 9FD2 5F          >                        ld      e,a
  44+ 9FD3 ED 30       >                        mul                                 ; de = a * Q
  44+ 9FD5 7A          >                        ld      a,d
  44+ 9FD6 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ 9FD7 57          >                        ld      d,a
  45+ 9FD8 2A 26 92     madDEaddRS:             ld		hl,(varR)
  46+ 9FDB CD E4 9F                             call	madXAAddHLDESigned
  47+ 9FDE EB                                   ex      de,hl                       ; de = R.S + DE
  48+ 9FDF                                      ClearCarryFlag
  48+ 9FDF B7          >                    or a
  49+ 9FE0 DD 6B                                ld      ixl,e
  50+ 9FE2 7A                                   ld      a,d
  51+ 9FE3 C9                                   ret
  52+ 9FE4
  53+ 9FE4
  54+ 9FE4 7C           madXAAddHLDESigned:     ld      a,h
  55+ 9FE5 E6 80                                and     SignOnly8Bit
  56+ 9FE7 47                                   ld      b,a                         ;save sign bit in b
  57+ 9FE8 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 9FE9                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ 9FE9 FA 01 A0    >                        jp		m, .ADDHLDEOppSGN
  59+ 9FEC 78           .ADDHLDESameSigns:       ld      a,b
  60+ 9FED B2                                   or      d
  61+ 9FEE                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 9FEE FA F3 9F    >                        jp		m, .ADDHLDESameNeg
  62+ 9FF1 19                                   add     hl,de
  63+ 9FF2 C9                                   ret
  64+ 9FF3 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ 9FF4 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ 9FF6 67                                   ld      h,a
  67+ 9FF7 7A                                   ld      a,d
  68+ 9FF8 E6 7F                                and     SignMask8Bit
  69+ 9FFA 57                                   ld      d,a
  70+ 9FFB 19                                   add     hl,de
  71+ 9FFC 3E 80                                ld      a,SignOnly8Bit
  72+ 9FFE B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ 9FFF 67                                   ld      h,a
  74+ A000 C9                                   ret
  75+ A001 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A002 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A004 67                                   ld      h,a
  78+ A005 7A                                   ld      a,d
  79+ A006 E6 7F                                and     SignMask8Bit
  80+ A008 57                                   ld      d,a
  81+ A009 B7                                   or      a
  82+ A00A ED 52                                sbc     hl,de
  83+ A00C 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A00E 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A00F B4                                   or      h
  86+ A010 67                                   ld      h,a                         ; set the previou sign value
  87+ A011 C9                                   ret
  88+ A012              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A012 AF          >                    xor a
  88+ A013 95          >                    sub l
  88+ A014 6F          >                    ld l,a
  88+ A015 9F          >                    sbc a,a
  88+ A016 94          >                    sub h
  88+ A017 67          >                    ld h,a
  89+ A018 78                                   ld      a,b
  90+ A019 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A01B B4                                   or      h
  92+ A01C 67                                   ld      h,a                         ; recover sign
  93+ A01D C9                                   ret
  94+ A01E
  95+ A01E
  96+ A01E                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A01E                  ;
  98+ A01E                  ; enter : hl = 16-bit multiplier   = x
  99+ A01E                  ;          e =  8-bit multiplicand = y
 100+ A01E                  ;
 101+ A01E                  ; exit  : ahl = 24-bit product
 102+ A01E                  ;         carry reset
 103+ A01E                  ;
 104+ A01E                  ; uses  : af, de, hl
 105+ A01E 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A01F 63                                   ld h,e                      ; yl
 107+ A020 ED 30                                mul de                      ; xh*yl
 108+ A022 EB                                   ex de,hl
 109+ A023 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A025
 111+ A025 7A                                   ld  a,d                     ; sum products
 112+ A026 85                                   add a,l
 113+ A027 57                                   ld  d,a
 114+ A028 EB                                   ex de,hl
 115+ A029
 116+ A029 7A                                   ld  a,d
 117+ A02A CE 00                                adc a,0
 118+ A02C C9                                   ret
 119+ A02D
 120+ A02D
 121+ A02D
 122+ A02D                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A02D                 ;
 124+ A02D                 ; enter : de = 16-bit multiplicand = y
 125+ A02D                 ;         hl = 16-bit multiplicand = x
 126+ A02D                 ;
 127+ A02D                 ; exit  : dehl = 32-bit product
 128+ A02D                 ;         carry reset
 129+ A02D                 ;
 130+ A02D                 ; uses  : af, bc, de, hl
 131+ A02D
 132+ A02D
 133+ A02D
 134+ A02D 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A02E 4B                                   ld c,e                      ; y0
 136+ A02F 5D                                   ld e,l                      ; x0
 137+ A030 6A                                   ld l,d
 138+ A031 E5                                   push hl                     ; x1 y1
 139+ A032 69                                   ld l,c                      ; y0
 140+ A033              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A033 ED 30                                mul de                      ; y1*x0
 142+ A035 EB                                   ex de,hl
 143+ A036 ED 30                                mul de                      ; x1*y0
 144+ A038
 145+ A038 AF                                   xor a                       ; zero A
 146+ A039 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A03A 8F                                   adc a,a                     ; capture carry p3
 148+ A03B
 149+ A03B 59                                   ld e,c                      ; x0
 150+ A03C 50                                   ld d,b                      ; y0
 151+ A03D ED 30                                mul de                      ; y0*x0
 152+ A03F
 153+ A03F 47                                   ld b,a                      ; carry from cross products
 154+ A040 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A041
 156+ A041 7A                                   ld a,d
 157+ A042 85                                   add a,l
 158+ A043 67                                   ld h,a
 159+ A044 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A045
 161+ A045 D1                                   pop de
 162+ A046 ED 30                                mul de                      ; x1*y1
 163+ A048
 164+ A048 EB                                   ex de,hl
 165+ A049 ED 4A                                adc hl,bc
 166+ A04B EB                                   ex de,hl                    ; de = final MSW
 167+ A04C
 168+ A04C C9                                   ret
 169+ A04D
 170+ A04D              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A04D              ; enter : de = 16-bit multiplicand
 172+ A04D              ;         hl = 16-bit multiplicand
 173+ A04D              ; exit  : hl = 16-bit product
 174+ A04D              ;         carry reset
 175+ A04D              ; maths is
 176+ A04D              ;        hl = y , de= x
 177+ A04D              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A04D              ;        hl = yhih & xlo + x
 179+ A04D              ;
 180+ A04D              ;
 181+ A04D              ; uses  : af, bc, de, hl
 182+ A04D C5           mulDEbyHL:              push    bc
 183+ A04E 7A                                   ld a,d                      ; a = xh
 184+ A04F 54                                   ld d,h                      ; d = yh
 185+ A050 67                                   ld h,a                      ; h = xh
 186+ A051 4B                                   ld c,e                      ; c = xl
 187+ A052 45                                   ld b,l                      ; b = yl
 188+ A053 ED 30                                mul                         ; yh * yl
 189+ A055 EB                                   ex de,hl
 190+ A056 ED 30                                mul                         ; xh * yl
 191+ A058 19                                   add hl,de                   ; add cross products
 192+ A059 59                                   ld e,c
 193+ A05A 50                                   ld d,b
 194+ A05B ED 30                                mul                         ; yl * xl
 195+ A05D 7D                                   ld a,l                      ; cross products lsb
 196+ A05E 82                                   add a,d                     ; add to msb final
 197+ A05F 67                                   ld h,a
 198+ A060 6B                                   ld l,e                      ; hl = final
 199+ A061                                      ; 83 cycles, 19 bytes
 200+ A061 AF                                   xor a                       ; reset carry
 201+ A062 C1                                   pop     bc
 202+ A063 C9                                   ret
 203+ A064
 204+ A064              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 205+ A064              ; enter : de = 16-bit multiplicand
 206+ A064              ;         hl = 16-bit multiplicand
 207+ A064              ; exit  : hl = 16-bit product
 208+ A064              ;         carry reset
 209+ A064              ;
 210+ A064              ; uses  : af, bc, de, hl
 211+ A064 00           mulDEbyHLSignByte       DB      0
 212+ A065 AF           mulDEbyHLSgnTo2c:       xor     a
 213+ A066 32 64 A0                             ld      (mulDEbyHLSignByte),a
 214+ A069 7A           .SignDE:                ld      a,d
 215+ A06A ED 27 80                             test    $80
 216+ A06D 28 08                                jr      z,.SignHL
 217+ A06F E6 7F        .NegativeDE:            and     $7F
 218+ A071 57                                   ld      d,a
 219+ A072 3E 80                                ld      a,$80
 220+ A074 32 64 A0                             ld      (mulDEbyHLSignByte),a
 221+ A077 7C           .SignHL:                ld      a,h
 222+ A078 ED 27 80                             test    $80
 223+ A07B 28 0B                                jr      z,.AbsoluteMultiply
 224+ A07D E6 7F        .NegativeHL:            and     $7F
 225+ A07F 67                                   ld      h,a
 226+ A080 3A 64 A0                             ld      a,(mulDEbyHLSignByte)
 227+ A083 EE 80                                xor     $80
 228+ A085 32 64 A0                             ld      (mulDEbyHLSignByte),a
 229+ A088 CD 4D A0     .AbsoluteMultiply:      call    mulDEbyHL
 230+ A08B 3A 64 A0     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 231+ A08E ED 27 80                             test    $80
 232+ A091 C8                                   ret     z
 233+ A092 AF           .Negateghl: 				xor 	a
 234+ A093 95                                   sub 	l
 235+ A094 6F                                   ld 		l,a
 236+ A095 9F                                   sbc 	a,a
 237+ A096 94                                   sub 	h
 238+ A097 67                                   ld 		h,a
 239+ A098 C9                                   ret
 240+ A099
 241+ A099 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 242+ A09A 32 64 A0                             ld      (mulDEbyHLSignByte),a
 243+ A09D 7A           .SignDE:                ld      a,d
 244+ A09E ED 27 80                             test    $80
 245+ A0A1 28 08                                jr      z,.AbsoluteMultiply
 246+ A0A3 E6 7F        .NegativeDE:            and     $7F
 247+ A0A5 57                                   ld      d,a
 248+ A0A6 3E 80                                ld      a,$80
 249+ A0A8 32 64 A0                             ld      (mulDEbyHLSignByte),a
 250+ A0AB CD 4D A0     .AbsoluteMultiply:      call    mulDEbyHL
 251+ A0AE 3A 64 A0     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 252+ A0B1 ED 27 80                             test    $80
 253+ A0B4 C8                                   ret     z
 254+ A0B5 AF           .Negateghl:             xor 	a
 255+ A0B6 95                                   sub 	l
 256+ A0B7 6F                                   ld 		l,a
 257+ A0B8 9F                                   sbc 	a,a
 258+ A0B9 94                                   sub 	h
 259+ A0BA 67                                   ld 		h,a
 260+ A0BB C9                                   ret
 261+ A0BC
 262+ A0BC
# file closed: ./Maths/multiply.asm
1087  A0BC                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A0BC              ; "ASM_SQUA : TESTGOOD"
   2+ A0BC              ; "AP = A^2 A = low,P = hi"
   3+ A0BC
   4+ A0BC              inline_squde: MACRO
   5+ A0BC ~            			ld	e,a
   6+ A0BC ~            			ld  d,a
   7+ A0BC ~            			mul
   8+ A0BC              			ENDM
   9+ A0BC
  10+ A0BC              inline_squa: MACRO
  11+ A0BC ~            			ld	e,a
  12+ A0BC ~            			ld  d,a
  13+ A0BC ~            			mul
  14+ A0BC ~            			ld	a,e
  15+ A0BC              			ENDM
  16+ A0BC
  17+ A0BC
  18+ A0BC              asm_squa:
  19+ A0BC E6 7F        	and SignMask8Bit
  20+ A0BE              ; "ASM SQUA2 : TESTGOOD"
  21+ A0BE              ; "AP = A^2 A = low,P = hi singed"
  22+ A0BE              asm_squa2:
  23+ A0BE 5F           	ld e, a
  24+ A0BF 57           	ld d,a
  25+ A0C0 ED 30        	mul
  26+ A0C2 ED 53 C8 91  	ld (varP),de
  27+ A0C6 7B           	ld a,e
  28+ A0C7 C9           	ret
# file closed: ./Maths/asm_square.asm
1088  A0C8                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A0C8              ; "ASM SQRT : TESTGOOD"
   2+ A0C8              ; "16-bit integer square root"
   3+ A0C8              ; "call with de = number to square root"
   4+ A0C8              ; "returns   hl = square root"
   5+ A0C8              ; "corrupts  bc, de"
   6+ A0C8              asm_sqrt:
   7+ A0C8 01 00 80     	ld bc,$8000
   8+ A0CB 61           	ld h,c
   9+ A0CC 69           	ld l,c
  10+ A0CD              .sqrloop:
  11+ A0CD CB 38        	srl b
  12+ A0CF CB 19        	rr c
  13+ A0D1 09           	add hl,bc
  14+ A0D2 EB           	ex de,hl
  15+ A0D3 ED 52        	sbc hl,de
  16+ A0D5 38 04        	jr c,.sqrbit
  17+ A0D7 EB           	ex de,hl
  18+ A0D8 09           	add hl,bc
  19+ A0D9 18 05        	jr .sqrfi
  20+ A0DB              .sqrbit:
  21+ A0DB 19           	add hl,de
  22+ A0DC EB           	ex de,hl
  23+ A0DD B7           	or a
  24+ A0DE ED 42        	sbc hl,bc
  25+ A0E0              .sqrfi:
  26+ A0E0 CB 3C        	srl h
  27+ A0E2 CB 1D        	rr l
  28+ A0E4 CB 38        	srl b
  29+ A0E6 CB 19        	rr c
  30+ A0E8 30 E3        	jr nc,.sqrloop
  31+ A0EA C9           	ret
  32+ A0EB
  33+ A0EB
  34+ A0EB              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A0EB 3A 25 92     	ld		a,(varQ)
  36+ A0EE 5F           	ld		e,a
  37+ A0EF 3A 26 92     	ld		a,(varR)
  38+ A0F2 57           	ld		d,a
  39+ A0F3 CD C8 A0     	call	asm_sqrt
  40+ A0F6 7D               ld      a,l
  41+ A0F7 32 25 92     	ld		(varQ),a
  42+ A0FA C9           	ret
  43+ A0FB
# file closed: ./Maths/asm_sqrt.asm
1089  A0FB                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A0FB              ; Divide 8-bit values
   2+ A0FB              ; In: Divide E by divider C
   3+ A0FB              ; Out: A = result, B = rest
   4+ A0FB              ;
   5+ A0FB              ;;;Div8:
   6+ A0FB              ;;;    xor a
   7+ A0FB              ;;;    ld b,8
   8+ A0FB              ;;;Div8_Loop:
   9+ A0FB              ;;;    rl e
  10+ A0FB              ;;;    rla
  11+ A0FB              ;;;    sub c
  12+ A0FB              ;;;    jr nc,Div8_NoAdd
  13+ A0FB              ;;;    add a,c
  14+ A0FB              ;;;Div8_NoAdd:
  15+ A0FB              ;;;    djnz Div8_Loop
  16+ A0FB              ;;;    ld b,a
  17+ A0FB              ;;;    ld a,e
  18+ A0FB              ;;;    rla
  19+ A0FB              ;;;    cpl
  20+ A0FB              ;;;    ret
  21+ A0FB
  22+ A0FB              ;;Inputs: DE is the numerator, BC is the divisor
  23+ A0FB              ;;Outputs: DE is the result
  24+ A0FB              ;;         A is a copy of E
  25+ A0FB              ;;         HL is the remainder
  26+ A0FB              ;;         BC is not changed
  27+ A0FB              ;; so DE = DE /BC
  28+ A0FB              ;140 bytes
  29+ A0FB              ;145cc
  30+ A0FB
  31+ A0FB              MacroDEDivBC:       MACRO
  32+ A0FB ~                                rla
  33+ A0FB ~                                adc     hl,hl
  34+ A0FB ~                                sbc     hl,bc
  35+ A0FB ~                                jr      nc,$+3
  36+ A0FB ~                                add     hl,bc
  37+ A0FB                                  ENDM
  38+ A0FB
  39+ A0FB              DEequDEDivBC:
  40+ A0FB AF               xor a
  41+ A0FC ED 62            sbc hl,hl
  42+ A0FE 7A               ld a,d
  43+ A0FF                  MacroDEDivBC
  43+ A0FF 17          >                    rla
  43+ A100 ED 6A       >                    adc     hl,hl
  43+ A102 ED 42       >                    sbc     hl,bc
  43+ A104 30 01       >                    jr      nc,$+3
  43+ A106 09          >                    add     hl,bc
  44+ A107                  MacroDEDivBC
  44+ A107 17          >                    rla
  44+ A108 ED 6A       >                    adc     hl,hl
  44+ A10A ED 42       >                    sbc     hl,bc
  44+ A10C 30 01       >                    jr      nc,$+3
  44+ A10E 09          >                    add     hl,bc
  45+ A10F                  MacroDEDivBC
  45+ A10F 17          >                    rla
  45+ A110 ED 6A       >                    adc     hl,hl
  45+ A112 ED 42       >                    sbc     hl,bc
  45+ A114 30 01       >                    jr      nc,$+3
  45+ A116 09          >                    add     hl,bc
  46+ A117                  MacroDEDivBC
  46+ A117 17          >                    rla
  46+ A118 ED 6A       >                    adc     hl,hl
  46+ A11A ED 42       >                    sbc     hl,bc
  46+ A11C 30 01       >                    jr      nc,$+3
  46+ A11E 09          >                    add     hl,bc
  47+ A11F                  MacroDEDivBC
  47+ A11F 17          >                    rla
  47+ A120 ED 6A       >                    adc     hl,hl
  47+ A122 ED 42       >                    sbc     hl,bc
  47+ A124 30 01       >                    jr      nc,$+3
  47+ A126 09          >                    add     hl,bc
  48+ A127                  MacroDEDivBC
  48+ A127 17          >                    rla
  48+ A128 ED 6A       >                    adc     hl,hl
  48+ A12A ED 42       >                    sbc     hl,bc
  48+ A12C 30 01       >                    jr      nc,$+3
  48+ A12E 09          >                    add     hl,bc
  49+ A12F                  MacroDEDivBC
  49+ A12F 17          >                    rla
  49+ A130 ED 6A       >                    adc     hl,hl
  49+ A132 ED 42       >                    sbc     hl,bc
  49+ A134 30 01       >                    jr      nc,$+3
  49+ A136 09          >                    add     hl,bc
  50+ A137                  MacroDEDivBC
  50+ A137 17          >                    rla
  50+ A138 ED 6A       >                    adc     hl,hl
  50+ A13A ED 42       >                    sbc     hl,bc
  50+ A13C 30 01       >                    jr      nc,$+3
  50+ A13E 09          >                    add     hl,bc
  51+ A13F 17               rla
  52+ A140 2F               cpl
  53+ A141 57               ld d,a
  54+ A142
  55+ A142 7B               ld a,e
  56+ A143                  MacroDEDivBC
  56+ A143 17          >                    rla
  56+ A144 ED 6A       >                    adc     hl,hl
  56+ A146 ED 42       >                    sbc     hl,bc
  56+ A148 30 01       >                    jr      nc,$+3
  56+ A14A 09          >                    add     hl,bc
  57+ A14B                  MacroDEDivBC
  57+ A14B 17          >                    rla
  57+ A14C ED 6A       >                    adc     hl,hl
  57+ A14E ED 42       >                    sbc     hl,bc
  57+ A150 30 01       >                    jr      nc,$+3
  57+ A152 09          >                    add     hl,bc
  58+ A153                  MacroDEDivBC
  58+ A153 17          >                    rla
  58+ A154 ED 6A       >                    adc     hl,hl
  58+ A156 ED 42       >                    sbc     hl,bc
  58+ A158 30 01       >                    jr      nc,$+3
  58+ A15A 09          >                    add     hl,bc
  59+ A15B                  MacroDEDivBC
  59+ A15B 17          >                    rla
  59+ A15C ED 6A       >                    adc     hl,hl
  59+ A15E ED 42       >                    sbc     hl,bc
  59+ A160 30 01       >                    jr      nc,$+3
  59+ A162 09          >                    add     hl,bc
  60+ A163                  MacroDEDivBC
  60+ A163 17          >                    rla
  60+ A164 ED 6A       >                    adc     hl,hl
  60+ A166 ED 42       >                    sbc     hl,bc
  60+ A168 30 01       >                    jr      nc,$+3
  60+ A16A 09          >                    add     hl,bc
  61+ A16B                  MacroDEDivBC
  61+ A16B 17          >                    rla
  61+ A16C ED 6A       >                    adc     hl,hl
  61+ A16E ED 42       >                    sbc     hl,bc
  61+ A170 30 01       >                    jr      nc,$+3
  61+ A172 09          >                    add     hl,bc
  62+ A173                  MacroDEDivBC
  62+ A173 17          >                    rla
  62+ A174 ED 6A       >                    adc     hl,hl
  62+ A176 ED 42       >                    sbc     hl,bc
  62+ A178 30 01       >                    jr      nc,$+3
  62+ A17A 09          >                    add     hl,bc
  63+ A17B                  MacroDEDivBC
  63+ A17B 17          >                    rla
  63+ A17C ED 6A       >                    adc     hl,hl
  63+ A17E ED 42       >                    sbc     hl,bc
  63+ A180 30 01       >                    jr      nc,$+3
  63+ A182 09          >                    add     hl,bc
  64+ A183 17               rla
  65+ A184 2F               cpl
  66+ A185 5F               ld e,a
  67+ A186 C9               ret
  68+ A187
  69+ A187
  70+ A187
  71+ A187              ;divdide by 16 using undocumented instrunctions
  72+ A187              ;Input: BC = Dividend, DE = Divisor, HL = 0
  73+ A187              ;Output: BC = Quotient, HL = Remainder
  74+ A187              ; Our use
  75+ A187              ; BC = A0
  76+ A187              ; DE = 0C
  77+ A187              ; so BC = a * 256 / C
  78+ A187              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  78+ A187 B9          >                        cp     c
  78+ A188 D2 B3 A1    >                        jp		nc,DEV16ATooLarge
  79+ A18B 47                                   ld      b,a
  80+ A18C 59                                   ld      e,c
  81+ A18D 0E 00                                ld      c,0
  82+ A18F 16 00                                ld      d,0
  83+ A191 C3 9E A1                             jp      DIV16UNDOC
  84+ A194 47           DIV16Amul256dQUNDOC:    ld      b,a
  85+ A195 0E 00                                ld      c,0
  86+ A197 21 25 92                             ld      hl,varQ
  87+ A19A 7E                                   ld      a,(hl)
  88+ A19B 16 00                                ld      d,0
  89+ A19D 5F                                   ld      e,a
  90+ A19E              DIV16BCDivDEUNDOC:
  91+ A19E 21 00 00     DIV16UNDOC:             ld      hl,0
  92+ A1A1 78                                   ld      a,b
  93+ A1A2 06 10                                ld      b,16
  94+ A1A4 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  95+ A1A6 17                                   rla			; ...
  96+ A1A7 ED 6A                                adc	hl,hl		; ...
  97+ A1A9 ED 52                                sbc	hl,de		; ...
  98+ A1AB 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  99+ A1AD 19                                   add	hl,de		; ...
 100+ A1AE 0D                                   dec	c		; ...
 101+ A1AF 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 102+ A1B1 47                                   ld   b,a
 103+ A1B2 C9                                   ret
 104+ A1B3 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 105+ A1B6 C9                                   ret
 106+ A1B7
 107+ A1B7              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 108+ A1B7 06 08        asm_div8:               ld b,8
 109+ A1B9 AF                                   xor a
 110+ A1BA CB 21        div8_loop:	            sla c
 111+ A1BC 17                                   rla
 112+ A1BD BA                                   cp d
 113+ A1BE 38 02                                jr c,div8_skip
 113+ A1C0
 114+ A1C0 0C                                   inc c
 115+ A1C1 92                                   sub d
 116+ A1C2 10 F6        div8_skip:	            djnz div8_loop
 117+ A1C4 C9                                   ret
 118+ A1C5              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 119+ A1C5 06 10        asm_div16:              ld b,16
 120+ A1C7 AF                                   xor a
 121+ A1C8 CB 25        div16_loop:	            sla l
 122+ A1CA CB 14                                rl	h
 123+ A1CC              ;    add hl,hl
 124+ A1CC 17                                   rla
 125+ A1CD B9                                   cp c
 126+ A1CE 38 02                                jr c,div16_skip
 127+ A1D0 2C                                   inc l
 128+ A1D1 91                                   sub c
 129+ A1D2 10 F4        div16_skip:		        djnz div16_loop
 130+ A1D4 C9                                   ret
 131+ A1D5              ;
 132+ A1D5              ; Divide 16-bit values (with 16-bit result)
 133+ A1D5              ; In: Divide BC by divider DE
 134+ A1D5              ; Out: BC = result, HL = rest
 135+ A1D5              ;
 136+ A1D5              HLDivC_Iteration: 	MACRO
 137+ A1D5 ~            					add	hl,hl		; unroll 16 times
 138+ A1D5 ~            					rla				; ...
 139+ A1D5 ~            					cp	c			; ...
 140+ A1D5 ~            					jr	1F
 141+ A1D5 ~            					sub	c			; ...
 142+ A1D5 ~            1:
 143+ A1D5 ~            					inc	l			; ...
 144+ A1D5              					ENDM
 145+ A1D5
 146+ A1D5
 147+ A1D5
 148+ A1D5              ; ">div1616: BC = BC / DE. HL = remainder"
 149+ A1D5 21 00 00     Div1616:            ld hl,0
 150+ A1D8 78                               ld a,b
 151+ A1D9 06 08                            ld b,8
 152+ A1DB 17           .Div16_Loop1:       rla
 153+ A1DC ED 6A                            adc hl,hl
 154+ A1DE ED 52                            sbc hl,de
 155+ A1E0 30 01                            jr nc,.Div16_NoAdd1
 156+ A1E2 19                               add hl,de
 157+ A1E3 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 158+ A1E5 17                               rla
 159+ A1E6 2F                               cpl
 160+ A1E7 47                               ld b,a
 161+ A1E8 79                               ld a,c
 162+ A1E9 48                               ld c,b
 163+ A1EA 06 08                            ld b,8
 164+ A1EC 17           .Div16_Loop2:       rla
 165+ A1ED ED 6A                            adc hl,hl
 166+ A1EF ED 52                            sbc hl,de
 167+ A1F1 30 01                            jr nc,.Div16_NoAdd2
 168+ A1F3 19                               add hl,de
 169+ A1F4 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 170+ A1F6 17                               rla
 171+ A1F7 2F                               cpl
 172+ A1F8 41                               ld b,c
 173+ A1F9 4F                               ld c,a
 174+ A1FA C9                               ret
 175+ A1FB
 176+ A1FB
 177+ A1FB
 178+ A1FB              BCDIVDE_Iteration: MACRO
 179+ A1FB ~            				   rla
 180+ A1FB ~            				   adc	hl,hl
 181+ A1FB ~            				   add	hl,de
 182+ A1FB ~            				   jr	c,1F
 183+ A1FB ~            				   sbc	hl,de
 184+ A1FB ~            1:
 185+ A1FB              				   ENDM
 186+ A1FB
 187+ A1FB
 188+ A1FB              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 189+ A1FB              ;BC/DE ==> BC, remainder in HL
 190+ A1FB              ;NOTE: BC/0 returns 0 as the quotient.
 191+ A1FB              ;min: 738cc
 192+ A1FB              ;max: 898cc
 193+ A1FB              ;avg: 818cc
 194+ A1FB              ;144 bytes
 195+ A1FB AF           BC_Div_DE:              xor a
 196+ A1FC 67                                   ld h,a
 197+ A1FD 6F                                   ld l,a
 198+ A1FE 93                                   sub e
 199+ A1FF 5F                                   ld e,a
 200+ A200 9F                                   sbc a,a
 201+ A201 92                                   sub d
 202+ A202 57                                   ld d,a
 203+ A203 78                                   ld a,b
 204+ A204                                      BCDIVDE_Iteration
 204+ A204 17          >				   rla
 204+ A205 ED 6A       >				   adc	hl,hl
 204+ A207 19          >				   add	hl,de
 204+ A208 38 02       >				   jr	c,1F
 204+ A20A ED 52       >				   sbc	hl,de
 204+ A20C             >1:
 205+ A20C                                      BCDIVDE_Iteration
 205+ A20C 17          >				   rla
 205+ A20D ED 6A       >				   adc	hl,hl
 205+ A20F 19          >				   add	hl,de
 205+ A210 38 02       >				   jr	c,1F
 205+ A212 ED 52       >				   sbc	hl,de
 205+ A214             >1:
 206+ A214                                      BCDIVDE_Iteration
 206+ A214 17          >				   rla
 206+ A215 ED 6A       >				   adc	hl,hl
 206+ A217 19          >				   add	hl,de
 206+ A218 38 02       >				   jr	c,1F
 206+ A21A ED 52       >				   sbc	hl,de
 206+ A21C             >1:
 207+ A21C                                      BCDIVDE_Iteration
 207+ A21C 17          >				   rla
 207+ A21D ED 6A       >				   adc	hl,hl
 207+ A21F 19          >				   add	hl,de
 207+ A220 38 02       >				   jr	c,1F
 207+ A222 ED 52       >				   sbc	hl,de
 207+ A224             >1:
 208+ A224                                      BCDIVDE_Iteration
 208+ A224 17          >				   rla
 208+ A225 ED 6A       >				   adc	hl,hl
 208+ A227 19          >				   add	hl,de
 208+ A228 38 02       >				   jr	c,1F
 208+ A22A ED 52       >				   sbc	hl,de
 208+ A22C             >1:
 209+ A22C                                      BCDIVDE_Iteration
 209+ A22C 17          >				   rla
 209+ A22D ED 6A       >				   adc	hl,hl
 209+ A22F 19          >				   add	hl,de
 209+ A230 38 02       >				   jr	c,1F
 209+ A232 ED 52       >				   sbc	hl,de
 209+ A234             >1:
 210+ A234                                      BCDIVDE_Iteration
 210+ A234 17          >				   rla
 210+ A235 ED 6A       >				   adc	hl,hl
 210+ A237 19          >				   add	hl,de
 210+ A238 38 02       >				   jr	c,1F
 210+ A23A ED 52       >				   sbc	hl,de
 210+ A23C             >1:
 211+ A23C                                      BCDIVDE_Iteration
 211+ A23C 17          >				   rla
 211+ A23D ED 6A       >				   adc	hl,hl
 211+ A23F 19          >				   add	hl,de
 211+ A240 38 02       >				   jr	c,1F
 211+ A242 ED 52       >				   sbc	hl,de
 211+ A244             >1:
 212+ A244 17                                   rla
 213+ A245 47                                   ld b,a
 214+ A246
 215+ A246 79                                   ld a,c
 216+ A247                                      BCDIVDE_Iteration
 216+ A247 17          >				   rla
 216+ A248 ED 6A       >				   adc	hl,hl
 216+ A24A 19          >				   add	hl,de
 216+ A24B 38 02       >				   jr	c,1F
 216+ A24D ED 52       >				   sbc	hl,de
 216+ A24F             >1:
 217+ A24F                                      BCDIVDE_Iteration
 217+ A24F 17          >				   rla
 217+ A250 ED 6A       >				   adc	hl,hl
 217+ A252 19          >				   add	hl,de
 217+ A253 38 02       >				   jr	c,1F
 217+ A255 ED 52       >				   sbc	hl,de
 217+ A257             >1:
 218+ A257                                      BCDIVDE_Iteration
 218+ A257 17          >				   rla
 218+ A258 ED 6A       >				   adc	hl,hl
 218+ A25A 19          >				   add	hl,de
 218+ A25B 38 02       >				   jr	c,1F
 218+ A25D ED 52       >				   sbc	hl,de
 218+ A25F             >1:
 219+ A25F                                      BCDIVDE_Iteration
 219+ A25F 17          >				   rla
 219+ A260 ED 6A       >				   adc	hl,hl
 219+ A262 19          >				   add	hl,de
 219+ A263 38 02       >				   jr	c,1F
 219+ A265 ED 52       >				   sbc	hl,de
 219+ A267             >1:
 220+ A267                                      BCDIVDE_Iteration
 220+ A267 17          >				   rla
 220+ A268 ED 6A       >				   adc	hl,hl
 220+ A26A 19          >				   add	hl,de
 220+ A26B 38 02       >				   jr	c,1F
 220+ A26D ED 52       >				   sbc	hl,de
 220+ A26F             >1:
 221+ A26F                                      BCDIVDE_Iteration
 221+ A26F 17          >				   rla
 221+ A270 ED 6A       >				   adc	hl,hl
 221+ A272 19          >				   add	hl,de
 221+ A273 38 02       >				   jr	c,1F
 221+ A275 ED 52       >				   sbc	hl,de
 221+ A277             >1:
 222+ A277                                      BCDIVDE_Iteration
 222+ A277 17          >				   rla
 222+ A278 ED 6A       >				   adc	hl,hl
 222+ A27A 19          >				   add	hl,de
 222+ A27B 38 02       >				   jr	c,1F
 222+ A27D ED 52       >				   sbc	hl,de
 222+ A27F             >1:
 223+ A27F                                      BCDIVDE_Iteration
 223+ A27F 17          >				   rla
 223+ A280 ED 6A       >				   adc	hl,hl
 223+ A282 19          >				   add	hl,de
 223+ A283 38 02       >				   jr	c,1F
 223+ A285 ED 52       >				   sbc	hl,de
 223+ A287             >1:
 224+ A287 17                                   rla
 225+ A288 4F                                   ld c,a
 226+ A289 C9                                   ret
 227+ A28A
 228+ A28A              ;Inputs:
 229+ A28A              ;     DE,BC are 8.8 Fixed Point numbers
 230+ A28A              ;Outputs:
 231+ A28A              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 232+ A28A              ;if DE is 0 : 122cc or 136cc if BC is negative
 233+ A28A              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 234+ A28A              ;Otherwise:
 235+ A28A              ;min: 1107cc
 236+ A28A              ;max: 1319cc
 237+ A28A              ;avg: 1201cc
 238+ A28A 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 239+ A28B AA                                   xor d
 240+ A28C F5                                   push af   ;sign bit is the result sign bit
 241+ A28D              ; Now make sure the inputs are positive
 242+ A28D A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 243+ A28E F2 97 A2                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 244+ A291 AF                                   xor a
 245+ A292 91                                   sub c
 246+ A293 4F                                   ld c,a
 247+ A294 9F                                   sbc a,a
 248+ A295 90                                   sub b
 249+ A296 47                                   ld b,a
 250+ A297 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 251+ A298 B2                                   or d
 252+ A299 FA A2 A2                             jp m,BC_Div_DE_88_lbl2
 253+ A29C AF                                   xor a
 254+ A29D 93                                   sub e
 255+ A29E 5F                                   ld e,a
 256+ A29F 9F                                   sbc a,a
 257+ A2A0 92                                   sub d
 258+ A2A1 57                                   ld d,a
 259+ A2A2 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 260+ A2A3 28 1D                                jr z,div_fixed88_overflow
 261+ A2A5 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 262+ A2A7 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 263+ A2A8 83                                   add a,e
 264+ A2A9 7A                                   ld a,d
 265+ A2AA 8C                                   adc a,h
 266+ A2AB 38 15                                jr c,div_fixed88_overflow
 267+ A2AD 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 268+ A2AE 79                                   ld a,c
 269+ A2AF CD CA A2                             call div_fixed88_sub
 270+ A2B2 4F                                   ld c,a
 271+ A2B3 78                                   ld a,b      ;A is now 0
 272+ A2B4 CD CA A2                             call div_fixed88_sub
 273+ A2B7 51                                   ld d,c
 274+ A2B8 5F                                   ld e,a
 275+ A2B9 F1                                   pop af
 276+ A2BA F0                                   ret p
 277+ A2BB AF                                   xor a
 278+ A2BC 93                                   sub e
 279+ A2BD 5F                                   ld e,a
 280+ A2BE 9F                                   sbc a,a
 281+ A2BF 92                                   sub d
 282+ A2C0 57                                   ld d,a
 283+ A2C1 C9                                   ret
 284+ A2C2
 285+ A2C2 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 286+ A2C5 F1                                   pop af
 287+ A2C6 F0                                   ret p
 288+ A2C7 13                                   inc de
 289+ A2C8 1C                                   inc e
 290+ A2C9 C9                                   ret
 291+ A2CA
 292+ A2CA              ;min: 456cc
 293+ A2CA              ;max: 536cc
 294+ A2CA              ;avg: 496cc
 295+ A2CA 06 08        div_fixed88_sub:        ld b,8
 296+ A2CC 17           BC_Div_DE_88_lbl3:      rla
 297+ A2CD ED 6A                                adc hl,hl
 298+ A2CF 19                                   add hl,de
 299+ A2D0 38 02                                jr c,$+4
 300+ A2D2 ED 52                                sbc hl,de
 301+ A2D4 10 F6                                djnz BC_Div_DE_88_lbl3
 302+ A2D6 8F                                   adc a,a
 303+ A2D7 C9                                   ret
 304+ A2D8
# file closed: ./Maths/asm_divide.asm
1090  A2D8                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ A2D8              asm_tis2:
   2+ A2D8              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ A2D8              ; ">DOES NOT DO SIGNED YET"
   4+ A2D8 F5           	push af
   5+ A2D9 E6 7F            and SignMask8Bit
   6+ A2DB 57           	ld d,a				;; d = A
   7+ A2DC 3A 25 92     	ld a,(varQ)
   8+ A2DF 5F           	ld e,a
   9+ A2E0 7A           	ld a,d
  10+ A2E1 BB           	cp e
  11+ A2E2 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ A2E4 1E 60        	ld e, 96
  13+ A2E6 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ A2E8 EB           	ex de,hl
  15+ A2E9 3A 25 92     	ld a,(varQ)
  16+ A2EC 4F           	ld c,a
  17+ A2ED CD C5 A1     	call asm_div16
  18+ A2F0 F1           	pop af
  19+ A2F1 E6 80        	and $80
  20+ A2F3 B5           	or l
  21+ A2F4 C9           	ret
  22+ A2F5              .tis2_set96:
  23+ A2F5 F1           	pop af
  24+ A2F6 E6 80        	and $80
  25+ A2F8 F6 96        	or $96
  26+ A2FA C9           	ret
  27+ A2FB
  28+ A2FB
  29+ A2FB              asm_unit_vector:
  30+ A2FB              squareregfx:
  31+ A2FB 3A 78 C0     	ld a,(UBnkXScaled)
  32+ A2FE 57           	ld d,a
  33+ A2FF 5F           	ld e,a
  34+ A300 ED 30        	mul
  35+ A302 EB           	ex de,hl
  36+ A303              squareregfy:
  37+ A303 3A 7A C0     	ld a, (UBnkYScaled)
  38+ A306 57           	ld d,a
  39+ A307 5F           	ld e,a
  40+ A308 ED 30        	mul
  41+ A30A 19           	add hl,de
  42+ A30B              squareregfz:
  43+ A30B 3A 7C C0     	ld a, (UBnkZScaled)
  44+ A30E 57           	ld d,a
  45+ A30F 5F           	ld e,a
  46+ A310 ED 30        	mul
  47+ A312 19           	add hl,de
  48+ A313 EB           	ex de,hl			; de de to number to root
  49+ A314              hlequsquareroot:
  50+ A314 CD C8 A0     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ A317 E5           	push hl				; save it for work 3 copies
  52+ A318 E5           	push hl				; save it for work
  53+ A319 E5           	push hl				; save it for work
  54+ A31A              normfx:
  55+ A31A 3A 78 C0     	ld a,(UBnkXScaled)
  56+ A31D E1           	pop hl				; get copy #1
  57+ A31E 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ A31F 4F           	ld c,a
  59+ A320 CD D8 A2     	call asm_tis2
  60+ A323 32 78 C0     	ld (UBnkXScaled),a
  61+ A326              normfy:
  62+ A326 3A 7A C0     	ld a,(UBnkYScaled)
  63+ A329 E1           	pop hl				; get copy #2
  64+ A32A 7D           	ld a,l
  65+ A32B 4F           	ld c,a
  66+ A32C CD D8 A2     	call asm_tis2
  67+ A32F 32 7A C0     	ld (UBnkYScaled),a
  68+ A332              normfz:
  69+ A332 3A 7C C0     	ld a,(UBnkZScaled)
  70+ A335 E1           	pop hl				; get copy #2
  71+ A336 7D           	ld a,l
  72+ A337 4F           	ld c,a
  73+ A338 CD D8 A2     	call asm_tis2
  74+ A33B 32 7C C0     	ld (UBnkZScaled),a
  75+ A33E              asm_unit_vector_end:
  76+ A33E C9           	ret
  77+ A33F
# file closed: ./Maths/asm_unitvector.asm
1091  A33F                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ A33F              ; Input:
   2+ A33F              ;       HL = 1st value
   3+ A33F              ;       DE = 2nd value
   4+ A33F              ; Output:
   5+ A33F              ;       CF, ZF = results of comparison:
   6+ A33F              ;
   7+ A33F              ;               CF      ZF      Result
   8+ A33F              ;               -----------------------------------
   9+ A33F              ;               0       0       HL > DE
  10+ A33F              ;               0       1       HL == DE
  11+ A33F              ;               1       0       HL < DE
  12+ A33F              ;               1       1       Impossible
  13+ A33F              ;
  14+ A33F
  15+ A33F E5           compare16HLDE:      push    hl
  16+ A340 A7                               and     a
  17+ A341 ED 52                            sbc     hl,de
  18+ A343 E1                               pop     hl
  19+ A344 C9                               ret
  20+ A345
  21+ A345              ; With compare signed we do ABS comparison
  22+ A345              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ A345
  24+ A345 E5 D5        compare16HLDEABS:   push    hl,,de
  25+ A347 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ A348 E6 7F                            and     SignMask8Bit
  27+ A34A 67                               ld      h,a
  28+ A34B 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ A34C E6 7F                            and     SignMask8Bit
  30+ A34E 57                               ld      d,a
  31+ A34F A7                               and     a
  32+ A350 ED 52                            sbc     hl,de
  33+ A352 D1 E1                            pop     hl,,de
  34+ A354 C9                               ret
  35+ A355
  36+ A355
# file closed: ./Maths/compare16.asm
1092  A355                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ A355              ;;----------------------------------------------------------------------------------------------------------------------
   2+ A355              ;; 16-bit negate
   3+ A355              negate16:
   4+ A355              negate16hl:
   5+ A355                      ; Input:
   6+ A355                      ;       HL = value
   7+ A355                      ; Output:
   8+ A355                      ;       HL = -value
   9+ A355                      ; Destroys:
  10+ A355                      ;       AF
  11+ A355                      ;
  12+ A355 AF           	xor 	a
  13+ A356 95           	sub 	l
  14+ A357 6F           	ld 		l,a
  15+ A358 9F           	sbc 	a,a
  16+ A359 94           	sub 	h
  17+ A35A 67           	ld 		h,a
  18+ A35B C9           	ret
  19+ A35C
  20+ A35C              negate16de:
  21+ A35C AF           	xor 	a
  22+ A35D 93           	sub 	e
  23+ A35E 5F           	ld 		e,a
  24+ A35F 9F           	sbc 	a,a
  25+ A360 92           	sub 	d
  26+ A361 57           	ld 		d,a
  27+ A362 C9           	ret
  28+ A363
  29+ A363              negate16bc:
  30+ A363 AF           	xor 	a
  31+ A364 91           	sub 	c
  32+ A365 4F           	ld 		c,a
  33+ A366 9F           	sbc 	a,a
  34+ A367 90           	sub 	b
  35+ A368 47           	ld 		b,a
  36+ A369 C9           	ret
  37+ A36A
  38+ A36A
  39+ A36A              macronegate16hl:	MACRO
  40+ A36A ~            					xor 	a
  41+ A36A ~            					sub 	l
  42+ A36A ~            					ld 		l,a
  43+ A36A ~            					sbc 	a,a
  44+ A36A ~            					sub 	h
  45+ A36A ~            					ld 		h,a
  46+ A36A              					ENDM
  47+ A36A
  48+ A36A              macronegate16de:	MACRO
  49+ A36A ~            					xor 	a
  50+ A36A ~                                sub 	e
  51+ A36A ~                                ld 		e,a
  52+ A36A ~                                sbc 	a,a
  53+ A36A ~                                sub 	d
  54+ A36A ~                                ld 		d,a
  55+ A36A              					ENDM
  56+ A36A              macronegate16bc:	MACRO
  57+ A36A ~            					xor 	a
  58+ A36A ~                                sub 	c
  59+ A36A ~                                ld 		c,a
  60+ A36A ~                                sbc 	a,a
  61+ A36A ~                                sub 	b
  62+ A36A ~                                ld 		b,a
  63+ A36A              					ENDM
  64+ A36A
  65+ A36A              macronegate16ix:	MACRO
  66+ A36A ~            					xor 	a
  67+ A36A ~                                sub 	ixl
  68+ A36A ~                                ld 		ixl,a
  69+ A36A ~                                sbc 	a,a
  70+ A36A ~                                sub 	ixh
  71+ A36A ~                                ld 		ixh,a
  72+ A36A              					ENDM
# file closed: ./Maths/negate16.asm
1093  A36A                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ A36A DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ A36C                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ A36C BA          >                        cp     d
   2+ A36D D2 82 A3    >                        jp		nc,TISXAccGTEQ
   3+ A370 4F                                   ld			c,a
   4+ A371 CD B7 A1                             call		asm_div8
   5+ A374 79                                   ld			a,c							; a = result
   6+ A375 CB 3F                                srl			a							; result / 4
   7+ A377 47                                   ld			b,a							; t = t /4
   8+ A378 CB 3F                                srl			a							; result / 8
   9+ A37A 80                                   add			a,b							; result /8 + result /4
  10+ A37B 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ A37C DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ A37E E6 80                                and			$80							; recover sign only
  13+ A380 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ A381 C9                                   ret
  15+ A382              TISXAccGTEQ:
  16+ A382              ;TI4:										;\ clean to +/- unity
  17+ A382 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ A384 E6 80                                and			$80							; copy of Acc
  19+ A386 F6 60                                or			$60							; unity
  20+ A388 C9                                   ret
  21+ A389
  22+ A389
  23+ A389
  24+ A389
  25+ A389              normaliseXX1596fast:
  26+ A389                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ A389 3A 78 C0     	ld		a,(XX15)		    ; XX15+0
  28+ A38C DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ A38E E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ A390              N96SQX:
  31+ A390              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ A390 5F          >			ld	e,a
  31+ A391 57          >			ld  d,a
  31+ A392 ED 30       >			mul
  32+ A394 62           	ld		h,d					; h == varR d = varO e= varA
  33+ A395 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ A396              N96SQY:
  35+ A396 3A 79 C0     	ld		a,(XX15+1)
  36+ A399 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ A39B E6 7F        	and		SignMask8Bit                 ; = abs
  38+ A39D              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ A39D 5F          >			ld	e,a
  38+ A39E 57          >			ld  d,a
  38+ A39F ED 30       >			mul
  39+ A3A1 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ A3A2              N96SQZ:
  41+ A3A2 3A 7A C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ A3A5 FD 67        	ld		iyh,a               ; iyh = signed
  43+ A3A7 E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ A3A9              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ A3A9 5F          >			ld	e,a
  44+ A3AA 57          >			ld  d,a
  44+ A3AB ED 30       >			mul
  45+ A3AD              N96SQADD:
  46+ A3AD 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ A3AE EB           	ex		de,hl				; hl => de ready for square root
  48+ A3AF              N96SQRT:
  49+ A3AF CD C8 A0     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ A3B2              N96NORMX:
  51+ A3B2 3A 78 C0     	ld		a,(XX15+0)
  52+ A3B5 E6 7F        	and		SignMask8Bit
  53+ A3B7 4F           	ld		c,a
  54+ A3B8 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ A3B9 CD 96 A5     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ A3BC 47           	ld		b,a				;++SGN
  57+ A3BD DD 7C        	ld		a,ixh			;++SGN
  58+ A3BF E6 80        	and		$80				;++SGN
  59+ A3C1 B0           	or		b				;++SGN
  60+ A3C2 32 78 C0     	ld		(XX15+0),a
  61+ A3C5              N96NORMY:
  62+ A3C5 3A 79 C0     	ld		a,(XX15+1)
  63+ A3C8 E6 7F        	and		SignMask8Bit
  64+ A3CA 4F           	ld		c,a
  65+ A3CB 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ A3CC CD 96 A5     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ A3CF 47           	ld		b,a				;++SGN
  68+ A3D0 DD 7D        	ld		a,ixl			;++SGN
  69+ A3D2 E6 80        	and		$80				;++SGN
  70+ A3D4 B0           	or		b				;++SGN
  71+ A3D5 32 79 C0     	ld		(XX15+1),a
  72+ A3D8              N96NORMZ:
  73+ A3D8 3A 7A C0     	ld		a,(XX15+2)
  74+ A3DB E6 7F        	and		SignMask8Bit
  75+ A3DD 4F           	ld		c,a
  76+ A3DE 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ A3DF CD 96 A5     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ A3E2 47           	ld		b,a				;++SGN
  79+ A3E3 FD 7C        	ld		a,iyh			;++SGN
  80+ A3E5 E6 80        	and		$80				;++SGN
  81+ A3E7 B0           	or		b				;++SGN
  82+ A3E8 32 7A C0     	ld		(XX15+2),a
  83+ A3EB C9           	ret
  84+ A3EC
  85+ A3EC              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  86+ A3EC 3A 78 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  87+ A3EF                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  87+ A3EF 5F          >			ld	e,a
  87+ A3F0 57          >			ld  d,a
  87+ A3F1 ED 30       >			mul
  88+ A3F3 7A                                   ld		a,d
  89+ A3F4 32 26 92                             ld		(varR),a			; R	 \ hi sum later use b
  90+ A3F7 7B                                   ld		a,e
  91+ A3F8 32 25 92                             ld		(varQ),a			; Q	 \ lo sum later use c
  92+ A3FB 32 C8 91                             ld		(varP),a			; P	 \ lo sum later just drop
  93+ A3FE 3A 79 C0                             ld		a,(XX15+1)
  94+ A401                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  94+ A401 5F          >			ld	e,a
  94+ A402 57          >			ld  d,a
  94+ A403 ED 30       >			mul
  95+ A405 7A                                   ld		a,d
  96+ A406 32 43 92                             ld		(varT),a			; T	 \ hi sum
  97+ A409 7B                                   ld		a,e
  98+ A40A 32 C8 91                             ld		(varP),a			; P	 \ lo sum
  99+ A40D 21 25 92                             ld		hl,varQ
 100+ A410 8E                                   adc		a,(hl)				; +Q
 101+ A411 32 25 92                             ld		(varQ),a			; =>Q
 102+ A414 3A 43 92                             ld		a,(varT)			;
 103+ A417 21 26 92                             ld		hl,varR
 104+ A41A 8E                                   adc		a,(hl)				;  R
 105+ A41B 32 26 92                             ld		(varR),a			; R
 106+ A41E 3A 7A C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 107+ A421                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 107+ A421 5F          >			ld	e,a
 107+ A422 57          >			ld  d,a
 107+ A423 ED 30       >			mul
 108+ A425 7A                                   ld		a,d
 109+ A426 32 43 92                             ld		(varT),a			; T	 \ hi sum
 110+ A429 7B                                   ld		a,e
 111+ A42A 32 C8 91                             ld		(varP),a			; P	 \ lo sum
 112+ A42D 21 25 92                             ld		hl,varQ
 113+ A430 8E                                   adc		a,(hl)				; +Q
 114+ A431 32 25 92                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 115+ A434 3A 43 92                             ld		a,(varT)			; T temp Hi
 116+ A437 21 26 92                             ld		hl,varR
 117+ A43A 8E                                   adc		a,(hl)				; +R
 118+ A43B 32 26 92                             ld		(varR),a			; R
 119+ A43E CD EB A0                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 120+ A441 3A 78 C0                             ld		a,(XX15+0)
 121+ A444 CD 90 A5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 122+ A447 32 78 C0                             ld		(XX15+0),a
 123+ A44A 3A 79 C0                             ld		a,(XX15+1)
 124+ A44D CD 90 A5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 125+ A450 32 79 C0                             ld		(XX15+1),a
 126+ A453 3A 79 C0                             ld		a,(XX15+1)
 127+ A456 CD 90 A5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 128+ A459 32 79 C0                             ld		(XX15+1),a
 129+ A45C C9                                   ret
 130+ A45D
 131+ A45D
# file closed: ./Maths/normalise96.asm
1094  A45D                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ A45D              ;Number in hl to decimal ASCII
   2+ A45D              ;Thanks to z80 Bits
   3+ A45D              ;inputs:	hl = number to ASCII
   4+ A45D              ;example: hl=300 outputs '00300'
   5+ A45D              ;destroys: af, bc, hl, de used
   6+ A45D              DispHLtoDE:
   7+ A45D              ; "DispHL, writes HL to DE address"
   8+ A45D 01 F0 D8     	ld	bc,-10000
   9+ A460 CD 76 A4     	call	Num1
  10+ A463 01 18 FC     	ld	bc,-1000
  11+ A466 CD 76 A4     	call	Num1
  12+ A469 01 9C FF     	ld	bc,-100
  13+ A46C CD 76 A4     	call	Num1
  14+ A46F 0E F6        	ld	c,-10
  15+ A471 CD 76 A4     	call	Num1
  16+ A474 0E FF        	ld	c,-1
  17+ A476              Num1:
  18+ A476 3E 2F        	ld	a,'0'-1
  19+ A478              .Num2:
  20+ A478 3C           	inc	a
  21+ A479 09           	add	hl,bc
  22+ A47A 38 FC        	jr	c,.Num2
  23+ A47C ED 42        	sbc	hl,bc
  24+ A47E 12           	ld	(de),a
  25+ A47F 13           	inc	de
  26+ A480 C9           	ret
  27+ A481
  28+ A481              DispAtoDE:
  29+ A481 26 00        	ld h,0
  30+ A483 6F           	ld l,a
  31+ A484 C3 5D A4     	jp DispHLtoDE
  32+ A487
  33+ A487              DispPriceAtoDE:
  34+ A487 26 00        	ld h,0
  35+ A489 6F           	ld l,a
  36+ A48A 01 9C FF     	ld	bc,-100
  37+ A48D CD 9D A4     	call	.NumLeadBlank1
  38+ A490 0E F6        	ld	c,-10
  39+ A492 CD 76 A4     	call	Num1
  40+ A495 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ A497 12           	ld		(de),a					; we can optimse that later TODO
  42+ A498 13           	inc		de						; with just an inc De
  43+ A499 0E FF        	ld	c,-1
  44+ A49B 18 D9        	jr		Num1
  45+ A49D              .NumLeadBlank1:
  46+ A49D 3E 2F        	ld	a,'0'-1
  47+ A49F              .NumLeadBlank2:
  48+ A49F 3C           	inc	a
  49+ A4A0 09           	add	hl,bc
  50+ A4A1 38 FC        	jr	c,.NumLeadBlank2
  51+ A4A3 FE 30        	cp	'0'
  52+ A4A5 20 02        	jr	nz,.DontBlank
  53+ A4A7              .Blank:
  54+ A4A7 3E 20        	ld	a,' '
  55+ A4A9              .DontBlank:
  56+ A4A9 ED 42        	sbc	hl,bc
  57+ A4AB 12           	ld	(de),a
  58+ A4AC 13           	inc	de
  59+ A4AD C9           	ret
  60+ A4AE
  61+ A4AE              DispQtyAtoDE:
  62+ A4AE FE 00        	cp	0
  63+ A4B0 28 23        	jr	z,.NoStock
  64+ A4B2 26 00        	ld h,0
  65+ A4B4 6F           	ld l,a
  66+ A4B5 01 9C FF     	ld	bc,-100
  67+ A4B8 CD C4 A4     	call	.NumLeadBlank1
  68+ A4BB 0E F6        	ld	c,-10
  69+ A4BD CD C4 A4     	call	.NumLeadBlank1
  70+ A4C0 0E FF        	ld	c,-1
  71+ A4C2 18 B2        	jr		Num1
  72+ A4C4              .NumLeadBlank1:
  73+ A4C4 3E 2F        	ld	a,'0'-1
  74+ A4C6              .NumLeadBlank2:
  75+ A4C6 3C           	inc	a
  76+ A4C7 09           	add	hl,bc
  77+ A4C8 38 FC        	jr	c,.NumLeadBlank2
  78+ A4CA FE 30        	cp	'0'
  79+ A4CC 20 02        	jr	nz,.DontBlank
  80+ A4CE              .Blank:
  81+ A4CE 3E 20        	ld	a,' '
  82+ A4D0              .DontBlank:
  83+ A4D0 ED 42        	sbc	hl,bc
  84+ A4D2 12           	ld	(de),a
  85+ A4D3 13           	inc	de
  86+ A4D4 C9           	ret
  87+ A4D5              .NoStock:
  88+ A4D5 3E 20        	ld	a,' '
  89+ A4D7 12           	ld	(de),a
  90+ A4D8 13           	inc	de
  91+ A4D9 12           	ld	(de),a
  92+ A4DA 13           	inc	de
  93+ A4DB 3E 2D        	ld	a,'-'
  94+ A4DD 12           	ld	(de),a
  95+ A4DE 13           	inc de
  96+ A4DF C9           	ret
  97+ A4E0
  98+ A4E0
  99+ A4E0              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ A4E0              ;### Input      DE,IX=32bit value, IY=destination address
 101+ A4E0              ;### Output     IY=last char in destination string
 102+ A4E0              ;### Destroyed AF,BC,DE,HL,IX
 103+ A4E0 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ A4E4 0A 00 00 00
 103+ A4E8 64 00 00 00
 103+ A4EC E8 03 00 00
 103+ A4F0 10 27 00 00
 104+ A4F4 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ A4F8 40 42 0F 00
 104+ A4FC 80 96 98 00
 104+ A500 00 E1 F5 05
 104+ A504 00 CA 9A 3B
 105+ A508 00 00 00 00  clcn32z ds 4
 106+ A50C
 107+ A50C              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ A50C CD 1B A5     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ A50F FD 7E 00                             ld      a,(IY+0)
 110+ A512 FD 77 01                             ld      (IY+1),a
 111+ A515 3E 2E                                ld      a,"."
 112+ A517 FD 77 00                             ld      (IY+0),a
 113+ A51A C9                                   ret
 114+ A51B
 115+ A51B DD 22 08 A5  DispDEIXtoIY:           ld (clcn32z),ix
 116+ A51F ED 53 0A A5                          ld (clcn32z+2),de
 117+ A523 DD 21 04 A5                          ld ix,clcn32t+36
 118+ A527 06 09                                ld b,9
 119+ A529 0E 00                                ld c,0
 120+ A52B 3E 30        .clcn321:               ld a,'0'
 121+ A52D B7                                   or a
 122+ A52E DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ A531 DD 56 01                             ld d,(ix+1)
 124+ A534 2A 08 A5                             ld hl,(clcn32z)
 125+ A537 ED 52                                sbc hl,de
 126+ A539 22 08 A5                             ld (clcn32z),hl
 127+ A53C DD 5E 02                             ld e,(ix+2)
 128+ A53F DD 56 03                             ld d,(ix+3)
 129+ A542 2A 0A A5                             ld hl,(clcn32z+2)
 130+ A545 ED 52                                sbc hl,de
 131+ A547 22 0A A5                             ld (clcn32z+2),hl
 132+ A54A 38 04                                jr c,.clcn325
 133+ A54C 0C                                   inc c
 134+ A54D 3C                                   inc a
 135+ A54E 18 DE                                jr .clcn322
 136+ A550 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ A553 DD 56 01                             ld d,(ix+1)
 138+ A556 2A 08 A5                             ld hl,(clcn32z)
 139+ A559 19                                   add hl,de
 140+ A55A 22 08 A5                             ld (clcn32z),hl
 141+ A55D DD 5E 02                             ld e,(ix+2)
 142+ A560 DD 56 03                             ld d,(ix+3)
 143+ A563 2A 0A A5                             ld hl,(clcn32z+2)
 144+ A566 ED 5A                                adc hl,de
 145+ A568 22 0A A5                             ld (clcn32z+2),hl
 146+ A56B 11 FC FF                             ld de,-4
 147+ A56E DD 19                                add ix,de
 148+ A570 0C                                   inc c
 149+ A571 0D                                   dec c
 150+ A572 28 05                                jr z,.clcn323
 151+ A574 FD 77 00                             ld (iy+0),a
 152+ A577 FD 23                                inc iy
 153+ A579 10 B0        .clcn323:               djnz .clcn321
 154+ A57B 3A 08 A5                             ld a,(clcn32z)
 155+ A57E C6 30                                add A,'0'
 156+ A580 FD 77 00                             ld (iy+0),a
 157+ A583 FD 36 01 00                          ld (iy+1),0
 158+ A587 C9                                   ret
 159+ A588
# file closed: ./Maths/binary_to_decimal.asm
1095  A588              ;INCLUDE "badd_ll38.asm"
1096  A588              ;;INCLUDE "XX12equXX15byXX16.asm"
1097  A588                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ A588
   2+ A588              ; USES 			A DE BC
   3+ A588              ; DOES NOT USE 	HL
   4+ A588              TIS2962C:		; two's compliment entry point, exits not 2's compliment
   5+ A588 CB 7F        	bit			7,a
   6+ A58A 28 04        	jr			z,AequAdivQmul96
   7+ A58C ED 44        	neg										; revers 2s'c and just set neg bit
   8+ A58E CB FF        	set			7,a
   9+ A590              ; Note negative numbers are bit 7 set not 2's compliment
  10+ A590              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  11+ A590              TIS2:
  12+ A590 4F           	ld			c,a							; copy of Acc
  13+ A591 3A 25 92     	ld			a,(varQ)
  14+ A594 57           	ld			d,a							; d = varQ
  15+ A595 79           	ld			a,c							; recover a
  16+ A596              AequAdivDmul96:
  17+ A596 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  18+ A597 E6 7F        	and			SignMask8Bit				; ignore sign
  19+ A599              	JumpIfAGTENusng d, TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  19+ A599 BA          >                        cp     d
  19+ A59A D2 BA A5    >                        jp		nc,TIS2AccGTEQ
  20+ A59D 06 FE        	ld			b,$FE						; division roll (replaced varT)
  21+ A59F              TIS2RollTLoop:									; .TIL2	; roll T
  22+ A59F CB 27        	sla			a
  23+ A5A1              	JumpIfALTNusng d,TIS2SkipSub            ; a < d so don;t subtract
  23+ A5A1 BA          >                        cp      d
  23+ A5A2 DA C0 A5    >                        jp		c, TIS2SkipSub
  24+ A5A5 9A           	sbc			a,d							; do subtraction with carry
  25+ A5A6 37           	scf
  26+ A5A7 CB 10        	rl			b							; T rolled left to push bit out the end
  27+ A5A9 38 F4        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  28+ A5AB              TIS2SKIPCont:
  29+ A5AB 78           	ld			a,b							; T
  30+ A5AC CB 3F        	srl			a							; result / 2
  31+ A5AE CB 3F        	srl			a							; result / 4
  32+ A5B0 47           	ld			b,a							; t = t /4
  33+ A5B1 CB 3F        	srl			a							; result / 8
  34+ A5B3 80           	add			a,b							; result /8 + result /4
  35+ A5B4 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  36+ A5B5 79           	ld			a,c							; copy of Acc to look at sign bit
  37+ A5B6 E6 80        	and			$80							; recover sign only
  38+ A5B8 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  39+ A5B9 C9           	ret
  40+ A5BA              TIS2AccGTEQ:
  41+ A5BA              ;TI4:										;\ clean to +/- unity
  42+ A5BA 79           	ld			a,c
  43+ A5BB E6 80        	and			$80							; copy of Acc
  44+ A5BD F6 60        	or			$60							; unity
  45+ A5BF C9           	ret
  46+ A5C0              TIS2SkipSub:
  47+ A5C0 B7           	or			a
  48+ A5C1 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ A5C3 38 DA        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ A5C5 C3 AB A5     	jp			TIS2SKIPCont
  51+ A5C8
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1098  A5C8                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ A5C8              fmltu:
   2+ A5C8              AequAmulQdiv256:
   3+ A5C8              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ A5C8 57           	ld	d,a
   5+ A5C9 3A 25 92     	ld	a,(varQ)
   6+ A5CC 5F           	ld	e,a
   7+ A5CD ED 30        	mul
   8+ A5CF 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ A5D0 C9           	ret
  10+ A5D1
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1099  A5D1                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ A5D1              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ A5D1              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ A5D1 21 10 95     		ld		hl,varDustZ
   4+ A5D4 FD 7D        		ld		a,iyl
   5+ A5D6 ED 31        		add		hl,a
   6+ A5D8 7E           		ld		a,(hl)
   7+ A5D9 C3 E5 A5     		jp		DV41
   8+ A5DC              DV42:										; travel step of dust particle front/rear
   9+ A5DC 21 10 95     		ld		hl,varDustZ
  10+ A5DF 3A B6 91     		ld		a,(regY)
  11+ A5E2 ED 31        		add		hl,a
  12+ A5E4 7E           		ld		a,(hl)						; a = SZ[y]
  13+ A5E5              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ A5E5 5F           		ld		e,a							; using E as Q var replacement
  15+ A5E6 3A 21 92     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ A5E9              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ A5E9 06 08        		ld		b,8							; counter
  18+ A5EB CB 27        		sla		a							;
  19+ A5ED 57           		ld		d,a							; use d for - p = delta * 2
  20+ A5EE AF           		xor		a
  21+ A5EF              DVL4:										; counter x loop (b reg)
  22+ A5EF CB 17        		rl		a							; a = a * 2
  23+ A5F1 38 03        		jr		c,DV8						; jump on carry
  24+ A5F3 BB           		cp		e							; var Q
  25+ A5F4 38 02        		jr		c,DV5						; skip subtraction
  26+ A5F6              DV8:
  27+ A5F6 9B           		sbc		a,e							; a = a - q (with carry)
  28+ A5F7 37           		scf									;  carry gets set
  29+ A5F8              DV5:										; skipped subtraction
  30+ A5F8 CB 12        		rl		d							; d (P hi)
  31+ A5FA 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ A5FC              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ A5FC              ; Note we are not going to call LL28+4 but inline code here:
  34+ A5FC 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ A5FE 4F           		ld		c,a							; use c as R var
  36+ A5FF              .RollRemainder:
  37+ A5FF CB 27        		sla		a
  38+ A601 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ A603 B8           		cp		b							; a < q?
  40+ A604 30 01        		jr		nc,.DontSBC
  41+ A606              .DoSBC:										; a is < q
  42+ A606 98           		sbc		a,b							; 	a -= q
  43+ A607              .DontSBC:
  44+ A607 CB 11        		rl		c							; r << 1
  45+ A609 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ A60B 79           		ld		a,c
  47+ A60C 32 26 92     		ld		(varR),a					; for backwards compat
  48+ A60F 7A           		ld		a,d
  49+ A610 32 C8 91     		ld		(varP),a
  50+ A613 C9           		ret									; R (c) left with remainder
  51+ A614              .Reduce:									; a geneated a carry
  52+ A614 98           		sbc		a,b							; a = a - (q +1)
  53+ A615 37           		scf									; set carry flag for rl
  54+ A616 CB 11        		rl		c							; r << 1 briging in carry
  55+ A618 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ A61A 79           		ld		a,c
  57+ A61B 32 26 92     		ld		(varR),a					; for backwards compat
  58+ A61E 7A           		ld		a,d
  59+ A61F 32 C8 91     		ld		(varP),a
  60+ A622 C9           		ret
  61+ A623              .AnswerTooBig:
  62+ A623 0E FF        		ld		c,$FF						; arse its too big
  63+ A625 79           		ld		a,c
  64+ A626 32 26 92     		ld		(varR),a					; for backwards compat
  65+ A629 7A           		ld		a,d
  66+ A62A 32 C8 91     		ld		(varP),a
  67+ A62D C9           		ret
  68+ A62E
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1100  A62E                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ A62E
   2+ A62E              asm_defmutl:
   3+ A62E              AequDmulEdiv256usgn:
   4+ A62E              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ A62E ED 30        	mul
   6+ A630 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ A631 C9           	ret
   8+ A632
   9+ A632
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
1101  A632              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
1102  A632              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
1103  A632              ;INCLUDE "APequPmulX-MU11.asm"
1104  A632                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ A632              APequQmulA:
   2+ A632              asm_mult1:
   3+ A632              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ A632 FE 00        	cp	0
   5+ A634 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ A636 5F           	ld	e,a
   7+ A637 3A 25 92     	ld	a,(varQ)
   8+ A63A 57           	ld	d,a
   9+ A63B FE 00        	cp	0				; compare a
  10+ A63D 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ A63F AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ A640 E6 80        	and $80				; get the resultant sign and save into b
  13+ A642 47           	ld	b,a
  14+ A643 7A           	ld	a,d
  15+ A644 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ A646 57           	ld	d,a
  17+ A647 7B           	ld	a,e
  18+ A648 E6 7F        	and SignMask8Bit
  19+ A64A 5F           	ld	e,a
  20+ A64B ED 30        	mul					; zxn de = d * e
  21+ A64D 7B           	ld	a,e
  22+ A64E 32 C8 91     	ld	(varP),a		; p = lo
  23+ A651 7A           	ld	a,d				; a = hi
  24+ A652 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ A653 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ A654 C9           	ret
  27+ A655              .mul0:
  28+ A655 AF           	xor	a
  29+ A656 32 C8 91     	ld	(varP),a
  30+ A659 57           	ld	d,a
  31+ A65A 5F           	ld  e,a
  32+ A65B C9           	ret
  33+ A65C
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1105  A65C                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ A65C              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ A65C              SAEquSRPlusAQ:
   3+ A65C              ; Calculate the following between sign-magnitude numbers:
   4+ A65C              ;   (S A) = (S R) + (A Q)
   5+ A65C              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ A65C              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ A65C              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ A65C              LL38:
   9+ A65C              ;	ld		d,a
  10+ A65C              ;	ld		a,(varQ)
  11+ A65C              ;	ld		e,a
  12+ A65C              ;	ld		a,(varS)
  13+ A65C              ;	ld		h,a
  14+ A65C              ;	ld		a,(varR)
  15+ A65C              ;	ld		l,a
  16+ A65C              ;	call	ADDHLDESignedv3
  17+ A65C              ;	ld		a,h
  18+ A65C              ;	ld		(varS),a
  19+ A65C              ;	ld		a,l
  20+ A65C              ;	ret
  21+ A65C              ; calculation table
  22+ A65C              ;   R     Q    Op            Sign calc
  23+ A65C              ;	10    5    Add           +    sign same add R sign
  24+ A65C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ A65C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ A65C              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ A65C              ;   5    10    Add           +    sign same add R sign
  28+ A65C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ A65C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ A65C              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ A65C
  32+ A65C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ A65C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ A65C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ A65C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ A65C
  37+ A65C
  38+ A65C              ; Calculate sign for Q from A and varS
  39+ A65C 21 27 92     	ld		hl,varS							;
  40+ A65F AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ A660 FA 6B A6     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ A663 3A 25 92     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ A666 21 26 92     	ld		hl,varR
  44+ A669 86           	add		a,(hl)							; a = Q + R
  45+ A66A C9           	ret										; Done carry set if overflow
  46+ A66B              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ A66B 3A 26 92     	ld		a,(varR)						; a = R
  48+ A66E 21 25 92     	ld		hl,varQ                         ; Q
  49+ A671              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ A671              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ A671 B7          >                    or a
  51+ A672 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ A673 38 01            jr      c,.LL39SignCorrection
  53+ A675              ;--    jr      a,.LL39ResultZero
  54+ A675              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ A675              ;--	or		a								; Clear carry flag to say result is correct
  56+ A675 C9           	ret
  57+ A676              .LL39SignCorrection:
  58+ A676 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ A678 28 0E            jr      z,.LL39ResultZero
  60+ A67A ED 44            neg                                     ; flip A 2'c value to positive
  61+ A67C 08           	ex		af,af'							; save A temporarily
  62+ A67D 3A 27 92     	ld		a,(varS)						; Flip Sign bit in varS
  63+ A680 EE 80        	xor		$80							    ;
  64+ A682 32 27 92     	ld		(varS),a                        ; flip sign bit of a
  65+ A685 08           	ex		af,af'                          ; get back a which is the result
  66+ A686                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ A686 B7          >                    or a
  67+ A687 C9           	ret
  68+ A688              .LL39ResultZero:
  69+ A688 32 27 92         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ A68B                  ClearCarryFlag                          ; clear carry
  70+ A68B B7          >                    or a
  71+ A68C C9               ret
  72+ A68D              ;--LL39SwapSubtraction:
  73+ A68D              ;--	push	bc
  74+ A68D              ;--	ld		b,a
  75+ A68D              ;--	ld		a,(hl)
  76+ A68D              ;--	sub		b
  77+ A68D              ;--	pop		bc
  78+ A68D              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ A68D              ;--	ld		a,(varS)
  80+ A68D              ;--	xor		$80
  81+ A68D              ;--	ld		(varS),a
  82+ A68D              ;--	ex		af,af'
  83+ A68D              ;--	ret
  84+ A68D
  85+ A68D              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ A68D              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ A68D              ;;;;;   (S A) = (S R) + (A Q)
  88+ A68D              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ A68D              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ A68D              ;;;;LL38:
  91+ A68D              ;;;;; Calculate sign for Q from A and varS
  92+ A68D              ;;;;	ld		hl,varS							;
  93+ A68D              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ A68D              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ A68D              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ A68D              ;;;;	ld		hl,varR
  97+ A68D              ;;;;	add		a,(hl)							; a = Q + R
  98+ A68D              ;;;;	ret										; Done
  99+ A68D              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ A68D              ;;;;	ld		hl,varQ                         ;
 101+ A68D              ;;;;	ld		a,(hl)
 102+ A68D              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ A68D              ;;;;	ld		a,(varR)						;
 104+ A68D              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ A68D              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ A68D              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ A68D              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ A68D              ;;;;	ret
 109+ A68D              ;;;;.SignCorrection:
 110+ A68D              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ A68D              ;;;;	ex		af,af'							; save A temporarily
 112+ A68D              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ A68D              ;;;;	xor		$80							    ;
 114+ A68D              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ A68D              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ A68D              ;;;;	ret
 117+ A68D              ;;;;LL39Sub16Bit:
 118+ A68D              ;;;;	ld		e,a
 119+ A68D              ;;;;	ld		d,0
 120+ A68D              ;;;;	ld		a,(varR)
 121+ A68D              ;;;;	ld		l,a
 122+ A68D              ;;;;	ld		h,0
 123+ A68D              ;;;;	ClearCarryFlag
 124+ A68D              ;;;;	sbc		hl,de
 125+ A68D              ;;;;	jr		c,.SignCorrection16bit
 126+ A68D              ;;;;	bit		7,h
 127+ A68D              ;;;;	jr		z,.GoodToReturn
 128+ A68D              ;;;;.Needtonegate:
 129+ A68D              ;;;;	macronegate16hl
 130+ A68D              ;;;;.GoodToReturn
 131+ A68D              ;;;;	ld		a,l
 132+ A68D              ;;;;	or		a
 133+ A68D              ;;;;	ret
 134+ A68D              ;;;;.SignCorrection16bit:
 135+ A68D              ;;;;	macronegate16hl
 136+ A68D              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ A68D              ;;;;	xor		$80							    ;
 138+ A68D              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ A68D              ;;;;	ld		a,l
 140+ A68D              ;;;;	ret
 141+ A68D
 142+ A68D
# file closed: ./Maths/Utilities/badd_ll38.asm
1106  A68D                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ A68D              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ A68D              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ A68D              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ A68D
   5+ A68D
   6+ A68D              moveship4Yreg:
   7+ A68D 3A B6 91     		ld		a,(regY)
   8+ A690 47           		ld		b,a
   9+ A691              moveship4breg:
  10+ A691              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ A691              MVS4PitchAlphaRollBeta:
  12+ A691              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ A691 3A E1 91     		ld		a,(ALPHA)					;  ALPHA
  14+ A694 32 25 92     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ A697 21 0E C0     		ld		hl,UBnKxsgn
  16+ A69A 78           		ld		a,b							; from
  17+ A69B ED 31        		add		hl,a
  18+ A69D 7E           		ld		a,(hl)						; INWK+2,Y
  19+ A69E 32 26 92     		ld		(varR),a					; R  \ lo
  20+ A6A1 23           		inc		hl
  21+ A6A2 7E           		ld		a,(hl)						; INWK+3,Y
  22+ A6A3 32 27 92     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ A6A6 2B           		dec		hl
  24+ A6A7 2B           		dec		hl
  25+ A6A8 2B           		dec		hl							;
  26+ A6A9 7E           		ld		a,(hl)						; INWK+0,Y
  27+ A6AA 32 C8 91     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ A6AD 23           		inc		hl
  29+ A6AE 7E           		ld		a,(hl)						; INWK+1,Y
  30+ A6AF EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ A6B1 CD C2 9F     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ A6B4 23                   inc     hl
  33+ A6B5 23                   inc     hl
  34+ A6B6 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ A6B7 2B                   dec     hl
  36+ A6B8 3A B5 91             ld      a,(regX)
  37+ A6BB 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ A6BC 32 C8 91             ld      (varP),a                    ;  P
  39+ A6BF 2B                   dec     hl
  40+ A6C0 2B                   dec     hl
  41+ A6C1 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ A6C2 32 26 92             ld      (varR),a                    ;  R	\ lo
  43+ A6C5 23                   inc     hl
  44+ A6C6 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ A6C7 32 27 92             ld      (varS),a                    ; S	\ hi
  46+ A6CA 23                   inc     hl
  47+ A6CB 23                   inc     hl
  48+ A6CC 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ A6CD CD C2 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ A6D0 2B                   dec     hl
  51+ A6D1 2B                   dec     hl
  52+ A6D2 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ A6D3 3A B5 91             ld      a,(regX)
  54+ A6D6 2B                   dec     hl
  55+ A6D7 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ A6D8 32 C8 91             ld      (varP),a                    ; P
  57+ A6DB 3A D3 91             ld      a,(BETA)                    ; BETA
  58+ A6DE 32 25 92             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ A6E1 23                   inc     hl
  60+ A6E2 23                   inc     hl
  61+ A6E3 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ A6E4 32 26 92             ld      (varR),a                    ; R	\ lo
  63+ A6E7 23                   inc     hl
  64+ A6E8 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ A6E9 32 27 92             ld      (varS),a                    ; S	\ hi
  66+ A6EC 23                   inc     hl
  67+ A6ED 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ A6EE 32 C8 91             ld      (varP),a                    ; P	\ lo
  69+ A6F1 23                   inc     hl
  70+ A6F2 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ A6F3 EE 80                xor     $80                         ; flip sign hi
  72+ A6F5 CD C2 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ A6F8 2B                   dec     hl
  74+ A6F9 2B                   dec     hl
  75+ A6FA 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ A6FB 3A B5 91             ld      a,(regX)
  77+ A6FE 2B                   dec     hl
  78+ A6FF 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ A700 32 C8 91             ld      (varP),a                    ; P
  80+ A703 23                   inc     hl
  81+ A704 23                   inc     hl
  82+ A705 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ A706 32 26 92             ld      (varR),a                    ; R	\ lo
  84+ A709 23                   inc     hl
  85+ A70A 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ A70B 32 27 92             ld      (varS),a                    ; S	\ hi
  87+ A70E 2B                   dec     hl
  88+ A70F 2B                   dec     hl
  89+ A710 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ A711 CD C2 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ A714 23                   inc     hl
  92+ A715 23                   inc     hl
  93+ A716 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ A717 3A B5 91             ld      a,(regX)
  95+ A71A 2B                   dec     hl
  96+ A71B 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ A71C C9                   ret
  98+ A71D
  99+ A71D
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
1107  A71D              ;INCLUDE "MoveShip5-MVS5.asm"
1108  A71D              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
1109  A71D              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
1110  A71D              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
1111  A71D                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ A71D              ;;;LL28:
   2+ A71D              ;;;    ld      c,a                         ;
   3+ A71D              ;;;    ld      a,(varQ)                    ;
   4+ A71D              ;;;    ld      b,a                         ;
   5+ A71D              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ A71D              ;;;RequAmul256divB:                        ;
   7+ A71D              ;;;LL28Breg:
   8+ A71D              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ A71D              ;;;	cp		b							; Check A >= Q
  10+ A71D              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ A71D              ;;;.CalcRemainder:
  12+ A71D              ;;;	ld		c, 	$FE						; set R to $FE
  13+ A71D              ;;;.RollRemainder:
  14+ A71D              ;;;	sla		a
  15+ A71D              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ A71D              ;;;	cp		b							; a < q?
  17+ A71D              ;;;	jr		nc,.DontSBC
  18+ A71D              ;;;.DoSBC:									; a is < q
  19+ A71D              ;;;	sbc		a,b							; 	a -= q
  20+ A71D              ;;;.DontSBC:
  21+ A71D              ;;;	rl		c							; r << 1
  22+ A71D              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ A71D              ;;;    ld      a,c
  24+ A71D              ;;;    ld      (varR),a
  25+ A71D              ;;;	ret									; R (c) left with remainder
  26+ A71D              ;;;.Reduce:								; a geneated a carry
  27+ A71D              ;;;	sbc		a,b							; a = a - (q +1)
  28+ A71D              ;;;	scf									; set carry flag for rl
  29+ A71D              ;;;	rl		c							; r << 1 briging in carry
  30+ A71D              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ A71D              ;;;    ld      a,c
  32+ A71D              ;;;    ld      (varR),a
  33+ A71D              ;;;	ret
  34+ A71D              ;;;.AnswerTooBig:
  35+ A71D              ;;;	ld	    c,$FF							; arse its too big
  36+ A71D              ;;;    ld      a,c
  37+ A71D              ;;;    ld      (varR),a
  38+ A71D              ;;;	ret
  39+ A71D
  40+ A71D              BCequAmul256DivC:
  41+ A71D 59             ld    e,c
  42+ A71E 67             ld    h,a
  43+ A71F 2E 00          ld    l,0
  44+ A721              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ A721 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ A722 B7             or a                                   ; from this time on the carry is cleared
  47+ A723 C8             ret z
  48+ A724 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ A727 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ A729              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ A729 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ A72B 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ A72C 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ A72E C9             ret
  55+ A72F
  56+ A72F              HL_Div_C:
  57+ A72F              ; Integer divides HL by C
  58+ A72F              ; Result in HL, remainder in A
  59+ A72F              ; Clobbers F, B
  60+ A72F 06 10                ld b,16
  61+ A731 AF                   xor a
  62+ A732              HL_Div_C_Loop:
  63+ A732 29                   add hl,hl
  64+ A733 17                   rla
  65+ A734 B9                   cp c
  66+ A735 38 02                jr c,HL_DivC_Skip
  67+ A737 91                   sub c
  68+ A738 2C                   inc l
  69+ A739              HL_DivC_Skip:
  70+ A739 10 F7                djnz HL_Div_C_Loop
  71+ A73B 7D                   ld   a,l
  72+ A73C 32 26 92             ld  (varR),a
  73+ A73F C9                   ret
  74+ A740
  75+ A740
  76+ A740
  77+ A740              ; Entry point if varQ is populated with demoninator
  78+ A740              RequAmul256divQ:
  79+ A740              BFRDIV:
  80+ A740 F5           		push	af
  81+ A741 3A 25 92     		ld		a,(varQ)
  82+ A744 4F           		ld		c,a
  83+ A745 F1           		pop		af
  84+ A746 FE 00        		cp		0
  85+ A748 CA 5F A7     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ A74B              RequAmul256divC:
  87+ A74B 2E 00        		ld		l,0
  88+ A74D 67           		ld		h,a
  89+ A74E              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ A74E 06 10        		ld b,16
  91+ A750 AF           		xor a
  92+ A751              LOOPPOINT:
  93+ A751 29           		add hl,hl
  94+ A752 17           		rla
  95+ A753 B9           		cp c
  96+ A754 38 02        		jr c,SKIPINCSUB
  97+ A756 2C           		inc l
  98+ A757 91           		sub c
  99+ A758              SKIPINCSUB:
 100+ A758 10 F7        		djnz LOOPPOINT
 101+ A75A 7D           		ld		a,l
 102+ A75B 32 26 92     		ld 		(varR),a
 103+ A75E C9           		ret
 104+ A75F              HLDIVC_0_BY:
 105+ A75F 32 26 92     		ld		(varR),a
 106+ A762 C9           		ret
 107+ A763              ;	push	af
 108+ A763              ;	ld		a,b
 109+ A763              ;	ld		(varQ),a
 110+ A763              ;	pop		af
 111+ A763              ;RequAmul256divQ:
 112+ A763              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ A763              ;	ld		hl,varQ
 114+ A763              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ A763              ;	ld		b,$FE						; b = X
 116+ A763              ;	ld		c,a							; c = R	div roll counter
 117+ A763              ;LL31:									; roll R
 118+ A763              ;	sla		a
 119+ A763              ;	jr		c,LL29						; hop to Reduce
 120+ A763              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ A763              ;	sbc		a,(hl)						; a = a - Q
 122+ A763              ;	rl		c							; rotate R left
 123+ A763              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ A763              ;	jr		LL2Good
 125+ A763              ;LL29:									; Reduce
 126+ A763              ;	sbc		a,(hl)
 127+ A763              ;	scf
 128+ A763              ;	rl		c							; roll a carry flag into R
 129+ A763              ;	jr		c,LL31						;  loop R
 130+ A763              ;	jr		LL2Good
 131+ A763              ;LL2:
 132+ A763              ;	ld		c,$FF
 133+ A763              ;LL2Good:
 134+ A763              ;	ld		a,c
 135+ A763              ;	ld		(varR),a
 136+ A763              ;	ret
 137+ A763
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1112  A763                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ A763              RequAdivQ:
   2+ A763              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ A763              LL61:										; Handling division R=A/Q for case further down
   4+ A763 4F           	ld		c,a								; c = A
   5+ A764 3A 25 92     	ld		a,(varQ)						; test for divide by 0
   6+ A767 FE 00        	cp		0
   7+ A769 28 16        	jr		z,LL84							; divide by zero error
   8+ A76B 57           	ld		d,a								; now we can do C/D
   9+ A76C 06 08            ld b,8
  10+ A76E AF               xor a
  11+ A76F              LL63:										; roll divide loop
  12+ A76F CB 21            sla c
  13+ A771 17               rla
  14+ A772 BA               cp d
  15+ A773 38 02            jr c,LL64
  16+ A775 0C               inc c
  17+ A776 92               sub d
  18+ A777              LL64:
  19+ A777 10 F6            djnz LL63
  20+ A779 32 24 92     	ld	(varU),a							; store remainder in U
  21+ A77C 79           	ld	a,c
  22+ A77D 32 26 92     	ld	(varR),a							; store remainder in R
  23+ A780 C9               ret
  24+ A781              LL84:										; div error  R=U=#5
  25+ A781 3E 32        	ld		a,50
  26+ A783 32 26 92     	ld		(varR),a
  27+ A786 32 24 92     	ld		(varU),a
  28+ A789 C9           	ret
  29+ A78A
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1113  A78A              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
1114  A78A                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ A78A              asm_mult12:
   2+ A78A              RSequQmulA:
   3+ A78A              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ A78A CD 32 A6     	call APequQmulA
   5+ A78D 08           	ex 	af,af'
   6+ A78E 7A           	ld	a,d
   7+ A78F 32 27 92     	ld	(varS),a
   8+ A792 7B           	ld	a,e
   9+ A793 32 26 92     	ld	(varR),a
  10+ A796 08           	ex 	af,af'
  11+ A797 C9           	ret
  12+ A798
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1115  A798              ;INCLUDE "SwapRotmapXY-PUS1.asm"
1116  A798                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ A798              ;rotmap0xLo: DB	0				; INWK +9
   2+ A798              ;rotmap0xHi: DB	0				; INWK +10
   3+ A798              ;rotmat0yLo: DB	0				; INWK +11
   4+ A798              ;rotmat0yHi: DB	0				; INWK +12
   5+ A798              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ A798              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ A798              ;rotmap1xLo: DB	0				; INWK +15
   8+ A798              ;rotmap1xHi:	DB	0				; INWK +16
   9+ A798              ;rotmat1yLo:	DB	0				; INWK +17
  10+ A798              ;rotmat1yHi:	DB	0				; INWK +18
  11+ A798              ;rotmat1zLo:	DB	0				; INWK +19
  12+ A798              ;rotmat1zHi:	DB	0				; INWK +20
  13+ A798              ;rotmat2xLo: DB	0				; INWK +21
  14+ A798              ;rotmat2xHi:	DB	0				; INWK +22
  15+ A798              ;rotmat2yLo:	DB	0				; INWK +23
  16+ A798              ;rotmat2yHi:	DB	0				; INWK +24
  17+ A798              ;rotmat2zLo:	DB	0				; INWK +25
  18+ A798              ;rotmat2zHi:	DB	0				; INWK +26
  19+ A798              ;
  20+ A798              ;rotmatFx	equ	rotmat0xHi
  21+ A798              ;rotmatFy	equ	rotmat0yHi
  22+ A798              ;rotmatFz	equ	rotmat0zHi
  23+ A798              ;rotmatUx	equ	rotmat1xHi
  24+ A798              ;rotmatUy	equ	rotmat1yHi
  25+ A798              ;rotmatUz	equ	rotmat1zHi
  26+ A798              ;
  27+ A798              ;inwkarray			equ		INWK+10
  28+ A798
  29+ A798                  include "./Variables/CopyRotMattoXX15.asm"
# file opened: ././Variables/CopyRotMattoXX15.asm
   1++A798              CopyRotMatNoseVtoXX15:
   2++A798                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++A798 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
   2++A79B 32 78 C0    >               ld       (XX15VecX),a
   3++A79E                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++A79E 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
   3++A7A1 32 79 C0    >               ld       (XX15VecY),a
   4++A7A4                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++A7A4 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
   4++A7A7 32 7A C0    >               ld       (XX15VecZ),a
   5++A7AA C9                   ret
   6++A7AB
   7++A7AB              CopyRotMatRoofVtoXX15:
   8++A7AB                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++A7AB 3A 1C C0    >               ld       a,(UBnkrotmatRoofvX+1)
   8++A7AE 32 78 C0    >               ld       (XX15VecX),a
   9++A7B1                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++A7B1 3A 1E C0    >               ld       a,(UBnkrotmatRoofvY+1)
   9++A7B4 32 79 C0    >               ld       (XX15VecY),a
  10++A7B7                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++A7B7 3A 20 C0    >               ld       a,(UBnkrotmatRoofvZ+1)
  10++A7BA 32 7A C0    >               ld       (XX15VecZ),a
  11++A7BD C9                   ret
  12++A7BE
  13++A7BE              CopyRotMatSideVtoXX15:
  14++A7BE                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++A7BE 3A 16 C0    >               ld       a,(UBnkrotmatSidevX+1)
  14++A7C1 32 78 C0    >               ld       (XX15VecX),a
  15++A7C4                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++A7C4 3A 18 C0    >               ld       a,(UBnkrotmatSidevY+1)
  15++A7C7 32 79 C0    >               ld       (XX15VecY),a
  16++A7CA                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++A7CA 3A 1A C0    >               ld       a,(UBnkrotmatSidevZ+1)
  16++A7CD 32 7A C0    >               ld       (XX15VecZ),a
  17++A7D0 C9                   ret
  18++A7D1
# file closed: ././Variables/CopyRotMattoXX15.asm
  30+ A7D1
  31+ A7D1                  include "./Variables/CopyXX15toRotMat.asm"
# file opened: ././Variables/CopyXX15toRotMat.asm
   1++A7D1              CopyXX15toRotMatNoseV:
   2++A7D1                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++A7D1 3A 78 C0    >               ld       a,(XX15VecX)
   2++A7D4 32 22 C0    >               ld       (UBnkrotmatNosevX+1),a
   3++A7D7                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++A7D7 3A 79 C0    >               ld       a,(XX15VecY)
   3++A7DA 32 24 C0    >               ld       (UBnkrotmatNosevY+1),a
   4++A7DD                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++A7DD 3A 7A C0    >               ld       a,(XX15VecZ)
   4++A7E0 32 26 C0    >               ld       (UBnkrotmatNosevZ+1),a
   5++A7E3 C9                   ret
   6++A7E4
   7++A7E4              CopyXX15toRotMatRoofV:
   8++A7E4                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++A7E4 3A 78 C0    >               ld       a,(XX15VecX)
   8++A7E7 32 1C C0    >               ld       (UBnkrotmatRoofvX+1),a
   9++A7EA                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++A7EA 3A 79 C0    >               ld       a,(XX15VecY)
   9++A7ED 32 1E C0    >               ld       (UBnkrotmatRoofvY+1),a
  10++A7F0                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++A7F0 3A 7A C0    >               ld       a,(XX15VecZ)
  10++A7F3 32 20 C0    >               ld       (UBnkrotmatRoofvZ+1),a
  11++A7F6 C9                   ret
  12++A7F7
  13++A7F7              CopyXX15toRotMatSideV:
  14++A7F7                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++A7F7 3A 78 C0    >               ld       a,(XX15VecX)
  14++A7FA 32 16 C0    >               ld       (UBnkrotmatSidevX+1),a
  15++A7FD                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++A7FD 3A 79 C0    >               ld       a,(XX15VecY)
  15++A800 32 18 C0    >               ld       (UBnkrotmatSidevY+1),a
  16++A803                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++A803 3A 7A C0    >               ld       a,(XX15VecZ)
  16++A806 32 1A C0    >               ld       (UBnkrotmatSidevZ+1),a
  17++A809 C9                   ret
  18++A80A
# file closed: ././Variables/CopyXX15toRotMat.asm
  32+ A80A
  33+ A80A              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ A80A              		; b = regX on entry
  35+ A80A              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ A80A 08           		ex		af,af'
  37+ A80B 78           		ld		a,b
  38+ A80C 32 25 92     		ld		(varQ),a
  39+ A80F 08           		ex		af,af'
  40+ A810 EE 80        		xor		$80							;	 flip sign of Acc
  41+ A812 CD C2 9F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ A815              ; USES 				A BC E
  43+ A815              ; DOES NOT USE		D HL
  44+ A815              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ A815 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ A816 E6 80        		and		SignOnly8Bit						; ..
  47+ A818 5F           		ld		e,a							; ..
  48+ A819 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ A81A E6 7F        		and		SignMask8Bit							; ..
  50+ A81C 06 FE        		ld		b,$FE						; slide counter T1
  51+ A81E              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ A81E CB 27        		sla		a
  53+ A820              		JumpIfALTNusng $60, TIS1SkipSub
  53+ A820 FE 60       >                        cp      $60
  53+ A822 DA 2F A8    >                        jp		c, TIS1SkipSub
  54+ A825 DE 60        		sbc		a,$60							; subtract 96
  55+ A827 37           		scf
  56+ A828 CB 10        		rl		b							;  T1
  57+ A82A 38 F2        		jr		c,TIS1RollTLoop
  58+ A82C              TIS1KIPCont:
  59+ A82C 78           		ld		a,b							;   T1
  60+ A82D B3           		or		e							;   restore T sign
  61+ A82E C9           		ret
  62+ A82F              TIS1SkipSub:
  63+ A82F B7           	or			a
  64+ A830 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ A832 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ A834 C3 2C A8     	jp			TIS1KIPCont
  67+ A837
  68+ A837              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ A837              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ A837
  71+ A837
  72+ A837
  73+ A837
  74+ A837              TidyRotYSmall:
  75+ A837 CD 62 A9     		call	CalcRoofvZ
  76+ A83A 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ A83D C3 73 A8     		jp		NormaliseRoofV
  78+ A840
  79+ A840              TidyRotXSmall:
  80+ A840 AF           		xor		a
  81+ A841 47           		ld		b,a
  82+ A842 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ A845 E6 60        		and		%01100000
  84+ A847 CA 37 A8     		jp		z,TidyRotYSmall
  85+ A84A 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ A84D 47           		ld		b,a							; b = regX for now
  87+ A84E 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ A851 CD 28 A9     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ A854 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ A857 C3 73 A8     		jp		NormaliseRoofV
  91+ A85A              ; TIDY is broken
  92+ A85A              TIDY:
  93+ A85A DD 01                break
  94+ A85C              ORTHOGALISE:
  95+ A85C              ;-- NormaliseNosev
  96+ A85C CD 98 A7     		call	CopyRotMatNoseVtoXX15
  97+ A85F CD 89 A3     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ A862 CD D1 A7     		call	CopyXX15toRotMatNoseV
  99+ A865              .CheckNXSmall:
 100+ A865 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ A868 E6 60        		and		%01100000					; check top two magnitude bits
 102+ A86A CA 40 A8     		jp		z,TidyRotXSmall
 103+ A86D              .RotXIsBig:
 104+ A86D CD EE A8             call	CalcRoofvX
 105+ A870 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ A873              NormaliseRoofV:
 107+ A873 CD AB A7     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ A876 CD 89 A3     		call	normaliseXX1596fast			; normalise roof
 109+ A879              ;calc sidev x
 110+ A879 CD E4 A7     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ A87C 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ A87F 32 25 92     		ld		(varQ),a					; q = nosev_y
 113+ A882 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ A885 CD 8A A7     		call	RSequQmulA
 115+ A888 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ A88B 47           		ld		b,a							; b = regX for now
 117+ A88C 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ A88F CD 0A A8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ A892                      IfAIsZeroGoto NormSideXNoNeg
 119+ A892 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ A893 CA 98 A8    >				jp	z, NormSideXNoNeg
 120+ A896 EE 80        		xor		$80							; flip a to get -sidev_x
 121+ A898              NormSideXNoNeg:
 122+ A898 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ A89B              ;calc sidev y
 124+ A89B 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ A89E 32 25 92     		ld		(varQ),a
 126+ A8A1 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ A8A4 CD 8A A7     		call	RSequQmulA
 128+ A8A7 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ A8AA 47           		ld		b,a							; b = regX for now
 130+ A8AB 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ A8AE CD 0A A8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ A8B1                      IfAIsZeroGoto NormSideYNoNeg
 132+ A8B1 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ A8B2 CA B7 A8    >				jp	z, NormSideYNoNeg
 133+ A8B5 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ A8B7              NormSideYNoNeg:
 135+ A8B7 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ A8BA              ;calc sidev z
 137+ A8BA 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ A8BD 32 25 92     		ld		(varQ),a
 139+ A8C0 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ A8C3 CD 8A A7     		call	RSequQmulA
 141+ A8C6 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ A8C9 47           		ld		b,a							; b = regX for now
 143+ A8CA 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ A8CD CD 0A A8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ A8D0                      IfAIsZeroGoto NormSideZNoNeg
 145+ A8D0 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ A8D1 CA D6 A8    >				jp	z, NormSideZNoNeg
 146+ A8D4 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ A8D6              NormSideZNoNeg:
 148+ A8D6 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ A8D9              .ClearLoBytes:
 150+ A8D9 21 21 C0     		ld		hl,UBnkrotmatNosevX
 151+ A8DC 06 09        		ld		b,9
 152+ A8DE AF                   xor     a
 153+ A8DF              .ClearLoLoop:
 154+ A8DF 77           		ld		(hl),a						; zero out lo bytes
 155+ A8E0 23           		inc		hl
 156+ A8E1 23           		inc		hl
 157+ A8E2 10 FB        		djnz	.ClearLoLoop
 158+ A8E4 CD BE A7     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ A8E7 CD 89 A3     		call	normaliseXX1596fast			; normalise roof
 160+ A8EA              ;calc sidev x
 161+ A8EA CD F7 A7     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ A8ED
 163+ A8ED C9           		ret
 164+ A8EE
 165+ A8EE
 166+ A8EE
 167+ A8EE              ;;;;;;;;.CheckNYSmall:
 168+ A8EE              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ A8EE              ;;;;;;;;		and		$7F
 170+ A8EE              ;;;;;;;;		cp		0
 171+ A8EE              ;;;;;;;;		jp		z,Tidy1RZ
 172+ A8EE              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ A8EE              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ A8EE              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ A8EE              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ A8EE              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ A8EE              ;;;;;;;;.DoNZ:
 178+ A8EE              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ A8EE              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ A8EE              ;;;;;;;;NormaliseRoofv:
 181+ A8EE              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ A8EE              ;;;;;;;;		push	bc
 183+ A8EE              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ A8EE              ;;;;;;;;		pop		bc
 185+ A8EE              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ A8EE              ;;;;;;;;ProcessSidev:
 187+ A8EE              ;;;;;;;;; -- SIDEV X
 188+ A8EE              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ A8EE              ;;;;;;;;		push	bc
 191+ A8EE              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ A8EE              ;;;;;;;;		pop		bc
 193+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ A8EE              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ A8EE              ;;;;;;;;		push	bc
 197+ A8EE              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ A8EE              ;;;;;;;;		pop		bc
 199+ A8EE              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ A8EE              ;;;;;;;;; -- SIDEV Y
 201+ A8EE              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ A8EE              ;;;;;;;;		push	bc
 204+ A8EE              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ A8EE              ;;;;;;;;		pop		bc
 206+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ A8EE              ;;;;;;;;		ld		b,a
 208+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ A8EE              ;;;;;;;;		push	bc
 210+ A8EE              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ A8EE              ;;;;;;;;		pop		bc
 212+ A8EE              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ A8EE              ;;;;;;;;		push	bc
 215+ A8EE              ;;;;;;;;; -- SIDEV Z
 216+ A8EE              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ A8EE              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ A8EE              ;;;;;;;;		pop		bc
 220+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ A8EE              ;;;;;;;;		ld		b,a
 222+ A8EE              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ A8EE              ;;;;;;;;		push	bc
 224+ A8EE              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ A8EE              ;;;;;;;;		pop		bc
 226+ A8EE              ;;;;;;;;		ld		(sidev_z+1),a
 227+ A8EE              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ A8EE              ;;;;;;;;		ld		hl,sidev_z
 229+ A8EE              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ A8EE              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ A8EE              ;;;;;;;;NormaliseSideV:
 232+ A8EE              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ A8EE              ;;;;;;;;		push	bc
 234+ A8EE              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ A8EE              ;;;;;;;;		pop		bc
 236+ A8EE              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ A8EE              ;;;;;;;;
 238+ A8EE
 239+ A8EE
 240+ A8EE              CalcRoofvX:
 241+ A8EE              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ A8EE              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ A8EE 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 242+ A8F1 32 25 92    >               ld       (varQ),a
 243+ A8F4 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ A8F7 CD 8A A7     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ A8FA              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ A8FA 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
 245+ A8FD 32 25 92    >               ld       (varQ),a
 246+ A900 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ A903 CD C2 9F     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ A906 7A           		ld		a,d
 249+ A907 E6 80        		and 	$80
 250+ A909 FD 67        		ld		iyh,a
 251+ A90B              ;DEBUG		ld		c,a
 252+ A90B 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ A90E 4F           		ld		c,a								; temp save
 254+ A90F E6 80        		and		$80
 255+ A911 FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ A913 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ A915 79           		ld		a,c								; recover a
 258+ A916 E6 7F        		and		$7F								; a is unsigned nosev x
 259+ A918 42           		ld		b,d
 260+ A919 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ A91A 57           		ld		d,a								; de = nosev x hi
 262+ A91B 1E 00        		ld		e,0
 263+ A91D CD FB A1     		call	BC_Div_DE
 264+ A920 FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ A922 EE 80        		xor		$80								; flip sign
 266+ A924 E6 80        		and		$80								; keep sign bit only
 267+ A926 B0           		or		b
 268+ A927 C9           		ret
 269+ A928
 270+ A928
 271+ A928              CalcRoofvY:
 272+ A928              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ A928              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ A928 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 273+ A92B 32 25 92    >               ld       (varQ),a
 274+ A92E 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ A931 CD 8A A7     		call	RSequQmulA
 276+ A934              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ A934 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
 276+ A937 32 25 92    >               ld       (varQ),a
 277+ A93A 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ A93D CD C2 9F     		call	madXAequQmulAaddRS
 279+ A940 7A           		ld		a,d
 280+ A941 E6 80        		and 	$80
 281+ A943 FD 67        		ld		iyh,a
 282+ A945 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ A948 4F           		ld		c,a								; temp save
 284+ A949 E6 80        		and		$80
 285+ A94B FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ A94D FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ A94F 79           		ld		a,c								; recover a
 288+ A950 E6 7F        		and		$7F								; a is unsigned nosev x
 289+ A952 42           		ld		b,d
 290+ A953 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ A954 57           		ld		d,a								; de = nosev x hi
 292+ A955 1E 00        		ld		e,0
 293+ A957 CD FB A1     		call	BC_Div_DE
 294+ A95A FD 7C        		ld		a,iyh
 295+ A95C EE 80        		xor		$80
 296+ A95E E6 80        		and		$80
 297+ A960 B0           		or		b
 298+ A961 C9           		ret
 299+ A962
 300+ A962              CalcRoofvZ:
 301+ A962              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ A962              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ A962 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
 302+ A965 32 25 92    >               ld       (varQ),a
 303+ A968 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ A96B CD 8A A7     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ A96E              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ A96E 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
 305+ A971 32 25 92    >               ld       (varQ),a
 306+ A974 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ A977 CD C2 9F     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ A97A 7A           		ld		a,d
 309+ A97B E6 80        		and 	$80
 310+ A97D FD 67        		ld		iyh,a
 311+ A97F 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ A982 4F           		ld		c,a								; temp save
 313+ A983 E6 80        		and		$80
 314+ A985 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ A987 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ A989 79           		ld		a,c								; recover a
 317+ A98A E6 7F        		and		$7F								; a is unsigned nosev x
 318+ A98C 42           		ld		b,d
 319+ A98D 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ A98E 57           		ld		d,a								; de = nosev x hi
 321+ A98F 1E 00        		ld		e,0
 322+ A991 CD FB A1     		call	BC_Div_DE
 323+ A994 FD 7C        		ld		a,iyh
 324+ A996 EE 80        		xor		$80
 325+ A998 E6 80        		and		$80
 326+ A99A B0           		or		b
 327+ A99B C9           		ret
 328+ A99C
 329+ A99C
 330+ A99C
 331+ A99C              ;;ProcessSidev:
 332+ A99C              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ A99C              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ A99C              ;;		push	bc
 335+ A99C              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ A99C              ;;		pop		bc
 337+ A99C              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ A99C              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ A99C              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ A99C              ;;		push	bc
 341+ A99C              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ A99C              ;;		pop		bc
 343+ A99C              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ A99C              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ A99C              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ A99C              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ A99C              ;;		push	bc
 348+ A99C              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ A99C              ;;		pop		bc
 350+ A99C              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ A99C              ;;		ld		b,a
 352+ A99C              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ A99C              ;;		push	bc
 354+ A99C              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ A99C              ;;		pop		bc
 356+ A99C              ;;		xor		$80							; a *= -1
 357+ A99C              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ A99C              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ A99C              ;;		push	bc
 360+ A99C              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ A99C              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ A99C              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ A99C              ;;		pop		bc
 364+ A99C              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ A99C              ;;		ld		b,a
 366+ A99C              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ A99C              ;;		push	bc
 368+ A99C              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ A99C              ;;		pop		bc
 370+ A99C              ;;		xor		$80
 371+ A99C              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ A99C              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ A99C              ;;		ld		hl,UBnkrotmatSidevZ
 374+ A99C              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ A99C              ;;		ld		hl,UBnkrotmatNosevX
 376+ A99C
 377+ A99C
 378+ A99C
 379+ A99C
 380+ A99C
 381+ A99C
 382+ A99C              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ A99C              ;;;;;;;;.ProcessRoofv:
 384+ A99C              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ A99C              ;;;;;;;;		push	bc
 386+ A99C              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ A99C              ;;;;;;;;		pop		bc
 388+ A99C              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ A99C              ;;;;;;;;.ProcessSidev:
 390+ A99C              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ A99C              ;;;;;;;;		push	bc
 392+ A99C              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ A99C              ;;;;;;;;		pop		bc
 394+ A99C              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ A99C
# file closed: ./Maths/Utilities/tidy.asm
1117  A99C                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ A99C
   2+ A99C              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ A99C BA          >                        cp     d
   2+ A99D D2 BB A9    >                        jp		nc,.Ll28Exit255
   3+ A9A0 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ A9A2 CB 27        .LL31:                  sla     a
   5+ A9A4 38 0D                                jr      c,.LL29
   6+ A9A6                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ A9A6 BA          >                        cp      d
   6+ A9A7 DA AC A9    >                        jp		c, .SkipSub
   7+ A9AA 92                                   sub     d
   8+ A9AB                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ A9AB B7          >                    or a
   9+ A9AC 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ A9AD CB 13                                rl      e
  11+ A9AF 38 F1                                jr      c,.LL31
  12+ A9B1 7B                                   ld      a,e
  13+ A9B2 C9                                   ret
  14+ A9B3 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ A9B4 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ A9B5 CB 13                                rl      e                           ; rotate counter e left
  17+ A9B7 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ A9B9 7B                                   ld      a,e                         ; stick result in a
  19+ A9BA C9                                   ret
  20+ A9BB 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A9BD C9                                   ret
  22+ A9BE
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1118  A9BE                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A9BE              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A9BE              TIS1:
   3+ A9BE 08           		ex		af,af'
   4+ A9BF 3A B5 91     		ld		a,(regX)
   5+ A9C2 47           		ld		b,a
   6+ A9C3 08           		ex		af,af'
   7+ A9C4              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A9C4 08           		ex		af,af'
   9+ A9C5 78           		ld		a,b
  10+ A9C6 32 25 92     		ld		(varQ),a
  11+ A9C9 08           		ex		af,af'
  12+ A9CA EE 80        		xor		$80							;	 flip sign of Acc
  13+ A9CC CD C2 9F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A9CF              ; USES 				A BC E
  15+ A9CF              ; DOES NOT USE		D HL
  16+ A9CF              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A9CF 47           		ld		b,a
  18+ A9D0 E6 80        		and		$80							;	hi sign
  19+ A9D2 5F           		ld		e,a							;   e = varT
  20+ A9D3 78           		ld		a,b
  21+ A9D4 E6 7F        		and		$7F							;	hi A7
  22+ A9D6 06 FE        		ld		b,$FE						;   slide counter
  23+ A9D8 48           		ld		c,b							;   c == T1 ::  T1
  24+ A9D9              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A9D9 CB 27        		sla		a
  26+ A9DB FE 60        		cp		$60							; max 96
  27+ A9DD 30 02        		jr		nc,.DV4
  28+ A9DF DE 60        		sbc		a,$60							;  SBC #&60
  29+ A9E1              .DV4:										; skip subtraction
  30+ A9E1 CB 11        		rl		c							;  T1
  31+ A9E3 38 F4        		jr		c,.DVL3
  32+ A9E5 79           		ld		a,c							;   T1
  33+ A9E6 B3           		or		e							;   restore T sign
  34+ A9E7 C9           		ret
  35+ A9E8
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1119  A9E8              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
1120  A9E8              ;INCLUDE "XHiYLoequPA-gc3.asm"
1121  A9E8              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
1122  A9E8              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
1123  A9E8              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
1124  A9E8                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
1125  A9E8
1126  A9E8
1127  A9E8                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ A9E8              M_GETSETDRV             equ $89
   2+ A9E8              F_OPEN                  equ $9a
   3+ A9E8              F_CLOSE                 equ $9b
   4+ A9E8              F_READ                  equ $9d
   5+ A9E8              F_WRITE                 equ $9e
   6+ A9E8              F_SEEK                  equ $9f
   7+ A9E8
   8+ A9E8              FA_READ                 equ $01
   9+ A9E8              FA_APPEND               equ $06
  10+ A9E8              FA_OVERWRITE            equ $0C
  11+ A9E8
  12+ A9E8 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ A9EC DD E5
  13+ A9EE AF                                   xor	    a	; set drive. 0 is default
  14+ A9EF CF                                   rst	    $08
  15+ A9F0 89                                   db	    $89
  16+ A9F1 32 FB A9                             ld	    (DefaultDrive),a
  17+ A9F4 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ A9F8 C1 F1
  18+ A9FA C9                                   ret
  19+ A9FB 00           DefaultDrive:	        db	0
  20+ A9FC
  21+ A9FC              ; *******************************************************************************************************
  22+ A9FC              ;	Function:	Open a file read for reading/writing
  23+ A9FC              ;	In:		ix = filename
  24+ A9FC              ;			b  = Open filemode
  25+ A9FC              ;	ret		a  = handle, 0 on error
  26+ A9FC              ; *******************************************************************************************************
  27+ A9FC E5 DD E5     fOpen:	                push	hl,,ix
  28+ A9FF DD E5                                push	ix
  29+ AA01 3A FB A9                             ld	    a,(DefaultDrive)
  30+ AA04 CF                                   rst	    $08
  31+ AA05 9A                                   db	    F_OPEN
  32+ AA06 DD E1 E1                             pop	    hl,,ix
  33+ AA09 C9                                   ret
  34+ AA0A
  35+ AA0A              ; *******************************************************************************************************
  36+ AA0A              ;	Function	Read bytes from the open file
  37+ AA0A              ;	In:		ix  = address to read into
  38+ AA0A              ;			bc  = amount to read
  39+ AA0A              ;	ret:		carry set = error
  40+ AA0A              ; *******************************************************************************************************
  41+ AA0A B7           fRead:                  or   	a             ; is it zero?
  42+ AA0B C8                                   ret  	z             ; if so return
  43+ AA0C E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ AA0F E1                                   pop		hl
  45+ AA10 CF                                   rst	    $08
  46+ AA11 9D                                   db	    F_READ
  47+ AA12 E1                                   pop	    hl
  48+ AA13 C9                                   ret
  49+ AA14
  50+ AA14              ; *******************************************************************************************************
  51+ AA14              ;	Function	Read bytes from the open file
  52+ AA14              ;	In:		ix  = address to read into
  53+ AA14              ;			bc  = amount to read
  54+ AA14              ;	ret:		carry set = error
  55+ AA14              ; *******************************************************************************************************
  56+ AA14 B7           fWrite:                 or   	a             ; is it zero?
  57+ AA15 C8                                   ret  	z             ; if so return
  58+ AA16 E5 DD E5                             push	hl,,ix
  59+ AA19 E1                                   pop	    hl
  60+ AA1A CF                                   rst	    $08
  61+ AA1B 9E                                   db	    F_WRITE
  62+ AA1C E1                                   pop	    hl
  63+ AA1D C9                                   ret
  64+ AA1E
  65+ AA1E              ; *******************************************************************************************************
  66+ AA1E              ;	Function:	Close open file
  67+ AA1E              ;	In:		a  = handle
  68+ AA1E              ;	ret		a  = handle, 0 on error
  69+ AA1E              ; *******************************************************************************************************
  70+ AA1E B7           fClose:		            or   	a             ; is it zero?
  71+ AA1F C8                                   ret  	z             ; if so return
  72+ AA20 CF                                   rst	    $08
  73+ AA21 9B                                   db	    F_CLOSE
  74+ AA22 C9                                   ret
  75+ AA23
  76+ AA23              ; *******************************************************************************************************
  77+ AA23              ;	Function	Read bytes from the open file
  78+ AA23              ;	In:		a   = file handle
  79+ AA23              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ AA23              ;			BCDE = bytes to seek
  81+ AA23              ;	ret:		BCDE = file pos from start
  82+ AA23              ; *******************************************************************************************************
  83+ AA23 DD E5 E5     fSeek:                  push	ix,,hl
  84+ AA26 CF                                   rst	    $08
  85+ AA27 9F                                   db	    F_SEEK
  86+ AA28 E1 DD E1                             pop	    ix,,hl
  87+ AA2B C9                                   ret
  88+ AA2C
  89+ AA2C              ; *******************************************************************************************************
  90+ AA2C              ; Init the file system
  91+ AA2C              ; *******************************************************************************************************
  92+ AA2C CD E8 A9     InitFileSystem:         call    GetDefaultDrive
  93+ AA2F C9                                   ret
  94+ AA30
  95+ AA30              ; *******************************************************************************************************
  96+ AA30              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ AA30              ; In:		hl = file data pointer
  98+ AA30              ;		ix = address to load to
  99+ AA30              ; *******************************************************************************************************
 100+ AA30 CD E8 A9     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ AA33 C5 D5 F5                             push	bc,,de,,af
 102+ AA36                                      ; get file size
 103+ AA36 4E                                   ld	    c,(hl)
 104+ AA37 2C                                   inc	    l
 105+ AA38 46                                   ld	    b,(hl)
 106+ AA39 2C                                   inc	    l
 107+ AA3A C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ AA3D E5                                   push	hl				; get name into ix
 109+ AA3E DD E1                                pop	    ix
 110+ AA40 06 01                                ld      b,FA_READ		; mode open for reading
 111+ AA42 CD FC A9                             call    fOpen
 112+ AA45 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ AA47 FE 00                                cp	    0				; was file handle 0?
 114+ AA49 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ AA4B DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ AA4E F5                                   push	af				; remember handle
 117+ AA4F CD 0A AA                             call	fRead			; read data from A to address IX of length BC
 118+ AA52 38 0C                                jr	    c,.error_reading
 119+ AA54 F1                                   pop	    af			    ; get handle back
 120+ AA55 CD 1E AA                             call	fClose			; close file
 121+ AA58 38 07                                jr	    c,.error_closing
 122+ AA5A F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ AA5D C9                                   ret
 124+ AA5E              ;
 125+ AA5E              ; On error, display error code an lock up so we can see it
 126+ AA5E              ;
 127+ AA5E DD E1        .error_opening:         pop	ix
 128+ AA60 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ AA61
 130+ AA61              .error_closing:
 131+ AA61 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ AA62 D1                                   pop	de
 133+ AA63 C1                                   pop	bc
 134+ AA64 C9                                   ret
 135+ AA65
 136+ AA65              ; *******************************************************************************************************
 137+ AA65              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ AA65              ; In:		hl = file data pointer
 139+ AA65              ;		ix = address to save from
 140+ AA65              ;		bc = size
 141+ AA65              ; *******************************************************************************************************
 142+ AA65 CD E8 A9     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ AA68 C5 E5                                push	bc,,hl   			; store size& save address
 144+ AA6A E5                                   push	hl		        	; get name into ix
 145+ AA6B DD E1                                pop	    ix
 146+ AA6D 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ AA6F CD FC A9                             call    fOpen
 148+ AA72 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ AA74 FE 00                                cp	    0			        ; was file handle 0?
 150+ AA76 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ AA78 DD E1                                pop	    ix			        ; get save address back
 152+ AA7A C1                                   pop	    bc			        ; get size back
 153+ AA7B F5                                   push	af			        ; remember handle
 154+ AA7C CD 14 AA                             call	fWrite			    ; read data from A to address IX of length BC
 155+ AA7F 38 04                                jr	c,.error
 156+ AA81 F1                                   pop	af			            ; get handle back
 157+ AA82 CD 1E AA                             call	fClose			    ; close file
 158+ AA85 C9           .error:                 ret
 159+ AA86              ;
 160+ AA86              ; On error, display error code an lock up so we can see it
 161+ AA86              ;
 162+ AA86 DD E1        .error_opening:         pop	ix
 163+ AA88 C1                                   pop	bc	; don't pop a, need error code
 164+ AA89 C9                                   ret
 165+ AA8A
# file closed: ./Drive/drive_access.asm
1128  AA8A
1129  AA8A                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AA8A 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AA8E 41 4E 44 45
   1+ AA92 52 00
   2+ AA94 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AA98 4E 54 4F 52
   2+ AA9C 59 00
   3+ AA9E 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AAA2 65 6E 74 20
   3+ AAA6 53 79 73 74
   3+ AAAA 65 6D 20 20
   3+ AAAE 20 3A 00
   4+ AAB1 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AAB5 72 73 70 61
   4+ AAB9 63 65 20 53
   4+ AABD 79 73 74 65
   4+ AAC1 6D 3A 00
   5+ AAC4 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AAC8 69 74 69 6F
   5+ AACC 6E 20 20 20
   5+ AAD0 3A 00
   6+ AAD2 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AAD6 20 20 20 20
   6+ AADA 20 20 20 20
   6+ AADE 3A 00
   7+ AAE0 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AAE4 20 20 20 20
   7+ AAE8 20 20 20 20
   7+ AAEC 3A 00
   8+ AAEE 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AAF2 6C 20 53 74
   8+ AAF6 61 74 75 73
   8+ AAFA 3A 00
   9+ AAFC 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AB00 6E 67 20 20
   9+ AB04 20 20 20 20
   9+ AB08 3A 00
  10+ AB0A 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AB0E 50 4D 45 4E
  10+ AB12 54 3A 00
  11+ AB15
  12+ AB15 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AB19 20 4C 69 67
  12+ AB1D 68 74 20 59
  12+ AB21 65 61 72 73
  12+ AB25 00
  13+ AB26 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AB2A 58 58 58 58
  13+ AB2E 58 58 00
  14+ AB31 2E           txt_cash_decimal        DB "."
  15+ AB32 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AB36 00
  16+ AB37
  17+ AB37              txt_status_colour		equ $FF
  18+ AB37
  19+ AB37              print_boiler_text_l2:
  20+ AB37              ; ">print_boilder_text hl = text structure, b = message count"
  21+ AB37              BoilerTextLoop:
  22+ AB37 C5           	push		bc			; Save Message Count loop value
  23+ AB38 4E           	ld			c,(hl)		; Get Row into b
  24+ AB39 23           	inc			hl
  25+ AB3A 46           	ld			b,(hl)		; Get Col into b
  26+ AB3B 23           	inc			hl
  27+ AB3C 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ AB3D 23           	inc			hl
  29+ AB3E 56           	ld			d,(hl)		; Get text address Hi into E
  30+ AB3F 23           	inc			hl
  31+ AB40 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AB41 EB           	ex			de,hl		; now hl = address of text data
  33+ AB42 1E FF        	ld			e,txt_status_colour
  34+ AB44                  MMUSelectLayer2
  34+ AB44 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ AB48 CD B5 E0     	call		l1_print_at
  36+ AB4B E1           	pop			hl
  37+ AB4C C1           	pop			bc
  38+ AB4D 10 E8        	djnz		BoilerTextLoop
  39+ AB4F C9           	ret
  40+ AB50
  41+ AB50
  42+ AB50              print_boiler_text:
  43+ AB50              ; ">print_boilder_text hl = text structure, b = message count"
  44+ AB50              .BoilerTextLoop:
  45+ AB50 C5           	push		bc			; Save Message Count loop value
  46+ AB51 4E           	ld			c,(hl)		; Get Row into b
  47+ AB52 23           	inc			hl
  48+ AB53 46           	ld			b,(hl)		; Get Col into b
  49+ AB54 23           	inc			hl
  50+ AB55 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ AB56 23           	inc			hl
  52+ AB57 56           	ld			d,(hl)		; Get text address Hi into E
  53+ AB58 23           	inc			hl
  54+ AB59 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AB5A EB           	ex			de,hl		; now hl = address of text data
  56+ AB5B 1E FF        	ld			e,txt_status_colour
  57+ AB5D C5           	push		bc
  58+ AB5E D1           	pop			de
  59+ AB5F CD B5 E0     	call		l1_print_at
  60+ AB62 E1           	pop			hl
  61+ AB63 C1           	pop			bc
  62+ AB64 10 EA        	djnz		.BoilerTextLoop
  63+ AB66 C9           	ret
  64+ AB67
  65+ AB67              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++AB67
   2++AB67
   3++AB67 3A 11 96     	ld		a,(Fuel)
   4++AB6A 11 15 AB     	ld		de,txt_fuel_level
   5++AB6D 0E 9C        	ld	c, -100
   6++AB6F CD 79 AB     	call	.Num1
   7++AB72 0E F6        	ld	c,-10
   8++AB74 CD 79 AB     	call	.Num1
   9++AB77 0E FF        	ld	c,-1
  10++AB79              .Num1:
  11++AB79 06 2F        	ld	b,'0'-1
  12++AB7B              .Num2:
  13++AB7B 04           	inc		b
  14++AB7C 81           	add		a,c
  15++AB7D 38 FC        	jr		c,.Num2
  16++AB7F 91           	sub 	c
  17++AB80 C5           	push	bc
  18++AB81 F5           	push	af
  19++AB82 79           	ld		a,c
  20++AB83 FE FF        	cp		-1
  21++AB85 CC 8E AB     	call	z,.InsertDot
  22++AB88 78           	ld		a,b
  23++AB89 12           	ld		(de),a
  24++AB8A 13           	inc		de
  25++AB8B F1           	pop		af
  26++AB8C C1           	pop		bc
  27++AB8D C9           	ret
  28++AB8E              .InsertDot:
  29++AB8E 3E 2E        	ld		a,'.'
  30++AB90 12           	ld		(de),a
  31++AB91 13           	inc		de
  32++AB92 C9           	ret
  33++AB93
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ AB93
  67+ AB93 2A 0D 96     GetCash:                ld      hl,(Cash)
  68+ AB96 EB                                   ex      de,hl
  69+ AB97 DD 2A 0F 96                          ld      ix,(Cash+2)
  70+ AB9B FD 21 26 AB                          ld		iy,txt_cash_amount
  71+ AB9F CD 1B A5                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ ABA2 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ ABA5 32 32 AB                             ld		(txt_cash_fraction),a
  74+ ABA8 21 27 AB     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ ABAB 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ ABAC FE 00                                cp		0
  77+ ABAE C8                                   ret		z
  78+ ABAF FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ ABB3 C9                                   ret
  80+ ABB4
# file closed: ./Menus/common_menu.asm
1130  ABB4              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1131  ABB4              ;INCLUDE "./title_page.asm"
1132  ABB4
1133  ABB4              ; Blocks dependent on variables in Universe Banks
1134  ABB4              ; Bank 49
1135  ABB4              ;    SEG RESETUNIVSEG
1136  ABB4              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1137  ABB4              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1138  ABB4
1139  ABB4              ;	ORG ResetUniverseAddr
1140  ABB4              ;INCLUDE "./GameEngine/resetUniverse.asm"
1141  ABB4              ; Bank 50
1142  ABB4
1143  ABB4
1144  ABB4
1145  ABB4                  SLOT    MenuShrChtAddr
1146  ABB4                  PAGE    BankMenuShrCht
1147  ABB4              	ORG     MenuShrChtAddr,BankMenuShrCht
1148  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 EB 9D  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD B5 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B EC 92                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD CB E0                             call	sprite_local_cursor
  39+ C0EB 3A 11 96                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 58 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 39 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B EC 92                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD D3 E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A F5 92     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 39 93                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 B1 9E                             ld		hl,name_expanded
  65+ C127 CD 0C 9E                             call	CapitaliseString
  66+ C12A 21 B1 9E                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 39 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B EC 92                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD A6 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 62 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A F5 92     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 39 93                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A F5 92     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B EC 92                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 39 93                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 35 93                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 1B A5                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 3F A3                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 3F A3                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 3F A3                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD B3 96     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A F5 92                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 B1 9E                             ld		hl,name_expanded
 258+ C2C2 CD 0C 9E                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 B1 9E                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 B1 9E                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 EB 91                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD B3 96     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A F5 92     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 B1 9E     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 0C 9E                             call	CapitaliseString
 333+ C34C 21 B1 9E     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 2A 92                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 8B 8E                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A F5 92                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 11 92                             ld      de,SystemSeed
 359+ C388 CD 86 96                             call    copy_seed
 360+ C38B 3A 12 92                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A ED 92     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 14 92     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A EC 92                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 12 92     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 ED 92                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 14 92                             ld		a,(SystemSeed+3)
 390+ C3C5 21 EC 92                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 16 92                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 12 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 2A 92                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 2A 92                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 7C E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 88 E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 3F E1     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 31 92                             ld      (MenuIdMax),a
 420+ C41E 2A EC 92                             ld		hl,(PresentSystemX)
 421+ C421 22 39 93                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 62 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD 2C 9E                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 80 96     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A 2F 92     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A 3A 93     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                cp     1
 460+ C47E CA D8 C4    >                jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 3A 93                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A 3A 93     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                cp     255
 467+ C48E CA D8 C4    >                jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 3A 93                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A 39 93     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                cp     2
 474+ C49E CA D8 C4    >                jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 39 93                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A 39 93     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                cp     253
 481+ C4AE CA D8 C4    >                jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 39 93                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A EC 92     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 39 93                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 3A F5 92     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 493+ C4C6                                      MMUSelectGalaxyA
 493+ C4C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 494+ C4C9 ED 4B 39 93                          ld      bc,(TargetPlanetX)
 495+ C4CD CD 60 FB                             call    find_nearest_to_bc
 496+ C4D0 ED 43 39 93                          ld      (TargetPlanetX),bc
 497+ C4D4 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 498+ C4D7 C9                                   ret
 499+ C4D8              ;----------------------------------------------------------------------------------------------------------------------------------
 500+ C4D8 AF           src_BoundsLimit:        xor     a
 501+ C4D9 C9                                   ret
 502+ C4DA
# file closed: ./Menus/short_range_chart_menu.asm
1149  C4DA              ; Bank 51
1150  C4DA
1151  C4DA                  SLOT    MenuGalChtAddr
1152  C4DA                  PAGE    BankMenuGalCht
1153  C4DA              	ORG     MenuGalChtAddr
1154  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 EB 9D  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD B5 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B EC 92  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 65 E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A 11 96     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 58 E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B 39 93  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 71 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 2A 92     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A F5 92         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 11 92         ld      de,SystemSeed
  66+ C0F0 CD 86 96     	call    copy_seed
  67+ C0F3 3A 14 92     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A 12 92     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A 15 92     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A 2A 92     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 2A 92     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 7C E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 88 E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 3F E1     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 31 92         ld      (MenuIdMax),a
 106+ C168 2A EC 92         ld      hl,(PresentSystemX)
 107+ C16B 22 39 93         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 62 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD 2C 9E     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A F5 92         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B 39 93      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD B5 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD 81 90         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A 7E 90         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD B5 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD 11 90                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD 94 90                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD A8 90     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A 80 90                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A 7F 90     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 7F 90                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A F5 92                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 5F 90                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 39 93                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD B5 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD B5 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A 2F 92                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A 3A 93     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                cp     1
 297+ C32F CA 89 C3    >                jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 3A 93                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A 3A 93     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                cp     255
 304+ C33F CA 89 C3    >                jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 3A 93                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A 39 93     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                cp     2
 311+ C34F CA 89 C3    >                jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 39 93                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A 39 93     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                cp     253
 318+ C35F CA 89 C3    >                jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 39 93                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A EC 92     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 39 93                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A F5 92     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B 39 93                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 39 93                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B 39 93  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD 7D E0                             call	sprite_ghc_move
 345+ C398 3A F5 92                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B 39 93                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 B1 9E                             ld		hl,name_expanded
 356+ C3B5 CD 0C 9E                             call	CapitaliseString
 357+ C3B8 21 B1 9E                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 62 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A F5 92     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B EC 92                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B 39 93                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB     fqp                        call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A 35 93                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD 1B A5                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD 3F A3                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD 3F A3                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD 3F A3                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 2A 92                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A F5 92     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A EC 92                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 28 93                             ld      de,PresentSystemSeeds
 442+ C479 CD 86 96                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A 2A 92                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 2A 92                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
1155  C495              ; Bank 52
1156  C495
1157  C495                  SLOT    MenuInventAddr
1158  C495                  PAGE    BankMenuInvent
1159  C495              	ORG     MenuInventAddr
1160  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD B5 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 11 96     	ld		a,(Fuel)
   4++C136 11 15 AB     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 18 96                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 64 99                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 8F 9C                             ld		hl, WordIdx
 118+ C17A CD 64 99                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD B5 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD B5 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 64 99                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 8F 9C                             ld		hl,WordIdx
 148+ C1C1 CD 64 99                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD B5 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 0F 96     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 0D 96                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 7C E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 88 E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 3F E1     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 31 92                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 3F E1                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 62 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 15 AB                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1161  C281
1162  C281              ; Bank 53
1163  C281
1164  C281                  SLOT    MenuSystemAddr
1165  C281                  PAGE    BankMenuSystem
1166  C281              	ORG     MenuSystemAddr
1167  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 EB 9D  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 B1 9E  						DW $0280,name_expanded
   5+ C018 08 0B 1B 9B  						DW $0B08,WordDistance
   6+ C01C 08 13 24 9B  						DW $1308,WordEconomy
   7+ C020 08 1B 2C 9B  						DW $1B08,WordGovernment
   8+ C024 08 23 37 9B  						DW $2308,WordTechLevel
   9+ C028 08 2B 41 9B  						DW $2B08,WordPopulation
  10+ C02C 08 3B 5C 9B  						DW $3B08,WordGross
  11+ C030 38 3B 62 9B  						DW $3B38,WordProductivity
  12+ C034 08 43 6F 9B  						DW $4308,WordAverage
  13+ C038 48 43 77 9B  						DW $4348,WordRadius
  14+ C03C 60 0B EB 9D  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 EB 9D  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A F5 92     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B EC 92                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD B5 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 7C E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 88 E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 3F E1     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 31 92                             ld		(MenuIdMax),a
 134+ C316 3A F5 92     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 39 93  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B EC 92  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 39 93  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A EC 92                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 22 93     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 62 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 2C 9E                             call	expandTokenToString
 170+ C37B 3A F5 92     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 B1 9E                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 B1 9E                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 35 93  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 0C A5                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD B5 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 2C 9E                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 2C 9E                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 1E 9E                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD B5 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD B5 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 0C A5                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD B5 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A F5 92     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD B5 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 1B A5                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD B5 E0                             call	l1_print_at
 272+ C48F 3A F5 92     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 1B A5                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD B5 E0                             call	l1_print_at
 289+ C4BC 3A F5 92     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 02 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1168  C4F7
1169  C4F7              ; Bank 54
1170  C4F7
1171  C4F7                  SLOT    MenuMarketAddr
1172  C4F7                  PAGE    BankMenuMarket
1173  C4F7                  ORG     MenuMarketAddr
1174  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 EB 9D  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 B1 9E  						DW $0220,name_expanded
   4+ C018 80 0B 0B 9A  						DW $0B80,WordUnit
   5+ C01C B0 0B 54 9C  						DW $0BB0,WordQuantity
   6+ C020 08 13 32 9C  						DW $1308,WordProduct
   7+ C024 60 13 3A 9C  						DW $1360,WordUoM
   8+ C028 80 13 3E 9C  						DW $1380,WordPrice
   9+ C02C B0 13 62 9C  						DW $13B0,WordStock
  10+ C030 E0 13 5E 9C  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD B5 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 0F 96     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 0D 96                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 17 96                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD B5 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD B5 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position
 249+ C28F 57                                   ld      d,a
 250+ C290 1E 08                                ld      e,8
 251+ C292 ED 30                                mul
 252+ C294 53                                   ld      d,e
 253+ C295 1E 00                                ld      e,0
 254+ C297 19                                   add     hl,de
 255+ C298 22 41 C0                             ld      (market_cursor),hl
 256+ C29B EB                                   ex      hl,de
 257+ C29C 21 43 C0                             ld      hl,market_blank_line
 258+ C29F                                      MMUSelectLayer1
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD B5 E0                             call	l1_print_at
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 18 96                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 8F 9C                             ld		hl,WordIdx
 273+ C2C5 CD 64 99                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD B5 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 8F 9C                             ld		hl,WordIdx
 281+ C2DF CD 64 99                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD B5 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD B5 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD B5 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD B5 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 7C E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 88 E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 3F E1     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 31 92                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 62 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 62 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 62 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 62 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 62 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 62 E2                             call	l2_draw_horz_line
 340+ C3AA 3A F5 92     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 2C 9E                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 349+ C3C2 21 08 20                             ld		hl,market_position
 350+ C3C5 22 41 C0                             ld		(market_cursor),hl
 351+ C3C8 F5           MarketLoop:	            push	af
 352+ C3C9 CD 8B C2                             call	PrintMarketItem
 353+ C3CC F1                                   pop		af
 354+ C3CD 3C                                   inc		a
 355+ C3CE FE 11                                cp		17
 356+ C3D0 20 F6                                jr		nz,MarketLoop
 357+ C3D2 AF           .InitialHighlight:      xor     a
 358+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 359+ C3D6 CD B3 C0                             call    mkt_highlight_row
 360+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 361+ C3DC 11 10 A8                             ld      de,$A810
 362+ C3DF                                      MMUSelectLayer1
 362+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 363+ C3E3 CD B5 E0                             call	l1_print_at
 364+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 365+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 366+ C3EC 11 10 B0                             ld      de,$B010
 367+ C3EF                                      MMUSelectLayer1
 367+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 368+ C3F3 CD B5 E0                             call	l1_print_at
 369+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 370+ C3F9 C9                                   ret
 371+ C3FA
 372+ C3FA
 373+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 374+ C3FA              ; Handles all the input whilst in the market menu
 375+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 376+ C3FC CD 11 90                             call    is_key_pressed
 377+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 378+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 379+ C404 CD 11 90                             call    is_key_pressed
 380+ C407 CC 2C C4                             call    z,mkt_DownPressed
 381+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 382+ C40C CD 11 90                             call    is_key_pressed
 383+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 384+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 385+ C414 CD 11 90                             call    is_key_pressed
 386+ C417 CC 80 C4                             call    z,mkt_RightPressed
 387+ C41A C9                                   ret
 388+ C41B
 389+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 390+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 391+ C41E FE 00                                cp      0
 392+ C420 C8                                   ret     z
 393+ C421 CD C3 C0                             call    mkt_lowlight_row
 394+ C424 21 74 C0                             ld      hl,mkt_selected_row
 395+ C427 35                                   dec     (hl)
 396+ C428 CD B3 C0                             call    mkt_highlight_row
 397+ C42B C9                                   ret
 398+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 399+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 400+ C42F FE 10                                cp      16
 401+ C431 C8                                   ret     z
 402+ C432 CD C3 C0                             call    mkt_lowlight_row
 403+ C435 21 74 C0                             ld      hl,mkt_selected_row
 404+ C438 34                                   inc     (hl)
 405+ C439 CD B3 C0                             call    mkt_highlight_row
 406+ C43C C9                                   ret
 407+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 409+ C440 21 18 96                             ld      hl,CargoTonnes
 410+ C443 ED 31                                add     hl,a
 411+ C445 7E                                   ld      a,(hl)
 412+ C446 FE 00                                cp      0
 413+ C448 C8                                   ret     z
 414+ C449 35                                   dec     (hl)
 415+ C44A DD 21 00 E0                          ld      ix,StockFood
 416+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 417+ C451 16 08                                ld      d,8
 418+ C453 5F                                   ld      e,a
 419+ C454 ED 30                                mul
 420+ C456 DD 19                                add     ix,de
 421+ C458                                      MMUSelectStockTable
 421+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 422+ C45C DD 34 01                             inc     (ix+1)
 423+ C45F DD 7E 07                             ld      a,(ix+7)
 424+ C462 FE 30                                cp      48
 425+ C464 20 04                                jr      nz,.UnderATonne
 426+ C466 21 17 96                             ld      hl,CargoRunningLoad
 427+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 428+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 429+ C46D 16 00                                ld      d,0
 430+ C46F 5F                                   ld      e,a
 431+ C470 CD 5B 9F                             call    addDEtoCash
 432+ C473                                      ; DO ADD CASH
 433+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 434+ C476 CD 8B C2                             call    PrintMarketItem
 435+ C479 CD 69 C2                             call    MKT_DisplayCargo
 436+ C47C CD 7A C2                             call    MKT_DisplayCash
 437+ C47F C9                                   ret
 438+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 439+ C480              mkt_RightPressed:       MMUSelectStockTable
 439+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 440+ C484 DD 21 00 E0                          ld      ix,StockFood
 441+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 442+ C48B 16 08                                ld      d,8
 443+ C48D 5F                                   ld      e,a
 444+ C48E ED 30                                mul
 445+ C490 DD 19                                add     ix,de
 446+ C492 4F                                   ld      c,a
 447+ C493 DD 7E 01                             ld      a,(ix+1)
 448+ C496 FE 00                                cp      0
 449+ C498 C8                                   ret     z
 450+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 451+ C49C FE 30                                cp      48
 452+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 453+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 454+ C4A3 21 18 96                             ld      hl,CargoTonnes
 455+ C4A6 ED 31                                add     hl,a
 456+ C4A8 7E                                   ld      a,(hl)
 457+ C4A9 FE C8                                cp      200
 458+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 459+ C4AC C3 B5 C4                             jp      .CheckCash
 460+ C4AF 2A 16 96     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 461+ C4B2 7C                                   ld      a,h
 462+ C4B3 BD                                   cp      l
 463+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 464+ C4B5 2A 0F 96     .CheckCash:             ld      hl,(Cash+2)
 465+ C4B8 7C                                   ld      a,h
 466+ C4B9 B5                                   or      l
 467+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 468+ C4BC 2A 0D 96                             ld      hl,(Cash)
 469+ C4BF 7C                                   ld      a,h
 470+ C4C0 FE 00                                cp      0
 471+ C4C2 20 07                                jr      nz,.MoreThanRequired
 472+ C4C4 DD 7E 02                             ld      a,(ix+2)
 473+ C4C7 BD                                   cp      l
 474+ C4C8 30 01                                jr      nc,.MoreThanRequired
 475+ C4CA C9                                   ret                         ; Insufficient Funds
 476+ C4CB 19           .MoreThanRequired:      add     hl,de
 477+ C4CC 7C                                   ld      a,h
 478+ C4CD B3                                   or      e
 479+ C4CE                                      ; check cash can we buy, and cargo capacity
 480+ C4CE DD 35 01                             dec     (ix+1)
 481+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 482+ C4D4 21 18 96                             ld      hl,CargoTonnes
 483+ C4D7 ED 31                                add     hl,a
 484+ C4D9 34                                   inc     (hl)
 485+ C4DA DD 7E 07                             ld      a,(ix+7)
 486+ C4DD 47                                   ld      b,a
 487+ C4DE FE 30                                cp      48
 488+ C4E0 20 05                                jr      nz,.UnderOneTonne
 489+ C4E2 78                                   ld      a,b
 490+ C4E3 21 17 96                             ld      hl,CargoRunningLoad
 491+ C4E6 34                                   inc     (hl)
 492+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 493+ C4EA 16 00                                ld      d,0
 494+ C4EC 5F                                   ld      e,a
 495+ C4ED CD 6E 9F                             call    subDEfromCash
 496+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 497+ C4F3 CD 8B C2                             call    PrintMarketItem
 498+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 499+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 500+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1175  C4FD
1176  C4FD              ; Bank 66
1177  C4FD
1178  C4FD                  SLOT    DispMarketAddr
1179  C4FD                  PAGE    BankDispMarket
1180  C4FD                  ORG     DispMarketAddr
1181  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 EB 9D  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 B1 9E  						DW $0220,name_expanded
   4+ C018 80 0B 0B 9A  						DW $0B80,WordUnit
   5+ C01C B0 0B 54 9C  						DW $0BB0,WordQuantity
   6+ C020 08 13 32 9C  						DW $1308,WordProduct
   7+ C024 60 13 3A 9C  						DW $1360,WordUoM
   8+ C028 80 13 3E 9C  						DW $1380,WordPrice
   9+ C02C B0 13 62 9C  						DW $13B0,WordStock
  10+ C030 E0 13 5E 9C  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD B5 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 0F 96     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 0D 96                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 17 96                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD B5 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD B5 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:        push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD B5 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 18 96                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 8F 9C                             ld		hl,WordIdx
 256+ C2A5 CD 64 99                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD B5 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 8F 9C                             ld		hl,WordIdx
 264+ C2BF CD 64 99                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD B5 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD B5 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD B5 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD B5 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 7C E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 88 E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 3F E1     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 31 92                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 62 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 62 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 62 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 62 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 62 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 62 E2                             call	l2_draw_horz_line
 323+ C38A 3A F5 92     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 2C 9E                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD B5 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD B5 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1182  C3D3
1183  C3D3              ; Bank 55
1184  C3D3
1185  C3D3                  SLOT    StockTableAddr
1186  C3D3                  PAGE    BankStockTable
1187  C3D3                  ORG     StockTableAddr
1188  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 80 96                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A 10 93                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A 2E 93                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A 10 93                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A 2E 93                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
1189  E113
1190  E113              ; Bank 57
1191  E113
1192  E113                  SLOT    LAYER2Addr
1193  E113                  PAGE    BankLAYER2
1194  E113                  ORG     LAYER2Addr
1195  E000
1196  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1197  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
1198  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
1199  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1200  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1201  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
1202  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 62 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 62 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 62 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B3 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B3 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1203  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a
  19+ E23E 7A                                   ld		a,d
  20+ E23F 32 31 E2                             ld 		(l2_horz_lenlo),a
  21+ E242 AF                                   xor 	a
  22+ E243 32 32 E2                             ld 		(l2_horz_lenhi),a
  23+ E246 60                                   ld		h,b
  24+ E247 69                                   ld		l,c
  25+ E248 22 36 E2                             ld		(l2_horz_target),hl
  26+ E24B 21 2A E2     .write_dma:             ld 		hl, l2_horz_line
  27+ E24E 06 10                                ld 		b, l2_horz_cmd_len
  28+ E250 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT
  29+ E252 ED B3                                otir
  30+ E254 C9                                   ret
  31+ E255
  32+ E255              ; "bc = left side row,col, d = length, e = color"
  33+ E255 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E256 C5                                   push 	bc							; save row col
  35+ E257 78                                   ld   	a,b
  36+ E258 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E25B C1                                   pop  	bc
  38+ E25C 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25D D1                                   pop  	de							; get length back
  40+ E25E CD 3A E2                             call    l2_draw_horz_dma
  41+ E261 C9                                   ret
  42+ E262
  43+ E262              ; "l2_draw_horz_line"
  44+ E262              ; "bc = left side row,col, d = length, e = color"
  45+ E262              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E262 7A           l2_draw_horz_line:      ld		a,d
  47+ E263 FE 00                                cp 		0							; if its zero length then just return
  48+ E265 C8           .zerolengthexit:        ret		z
  49+ E266 FE 01        .isitlen1:              cp 		1
  50+ E268 CA 8A E2                             jp 		z,.l2_draw_horz_line_1
  51+ E26B FE 0A        .longenoughtfordma:     cp  10
  52+ E26D C3 55 E2                             jp  l2_draw_horz_dma_bank
  53+ E270 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E272 78                                   ld   	a,b
  55+ E273 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E276 C1                                   pop  	bc
  57+ E277 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E278 69                                   ld   	l,c
  59+ E279 D1                                   pop  	de							; get length back
  60+ E27A 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E27B 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27C 82                                   add  	a,d
  63+ E27D 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27F 3E FF        .clipat255:             ld   	a,$FF
  65+ E281 91                                   sub  	c							; a holds clipped length
  66+ E282 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E283 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E285 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E286 23                                   inc hl
  70+ E287 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E289 C9                                   ret
  72+ E28A 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E28B C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28E
  75+ E28E              ; "l2_draw_horz_line_to"
  76+ E28E              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28E 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28F B9                                   cp 		c
  79+ E290 30 04                                jr		nc, .noswap
  80+ E292 28 07                                jr      z, .singlepixel
  81+ E294 51           .swap:                  ld		d,c
  82+ E295 4F                                   ld		c,a
  83+ E296 7A           .noswap:                ld		a,d
  84+ E297 91                                   sub		c
  85+ E298              ;                        dec		a							; so now its length not offset
  86+ E298 57                                   ld		d,a
  87+ E299 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E29B 7B           .singlepixel:           ld		a,e
  89+ E29C C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29F
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1204  E29F                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29F              ; ">l2_draw_vert_segment"
   2+ E29F              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29F              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29F 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2A0 FE 00        .emptylinecheck:	    cp 		0
   6+ E2A2 C8                                   ret		z
   7+ E2A3 FE 01        .justonepixel	        cp		1
   8+ E2A5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A7 73                                   ld		(hl),e
  10+ E2A8 C9                                   ret
  11+ E2A9              .multiplepixelsLoop:
  12+ E2A9 7C           .endofbankcheck:        ld   	a,h
  13+ E2AA FE 40                                cp   	64
  14+ E2AC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AD 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AF 15                                   dec		d
  18+ E2B0 C8                                   ret		z
  19+ E2B1 18 F6                                jr		.multiplepixelsLoop
  20+ E2B3
  21+ E2B3              ; ">l2_draw_vert_line"
  22+ E2B3              ; ">bc = row col d = length, e = color"
  23+ E2B3 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B6 D0                                   ret 	nc							; can't start off the screen
  26+ E2B7 7A           .emptylinecheck:        ld		a,d
  27+ E2B8 FE 00                                cp		0
  28+ E2BA C8                                   ret		z
  29+ E2BB FE 01                                cp		1
  30+ E2BD 20 04                                jr		nz,.multiplepixels
  31+ E2BF CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C2 C9                                   ret
  33+ E2C3              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C3 7A           .clipto192:             ld		a,d							; get length
  35+ E2C4 80                                   add		a,b							; a= row + length
  36+ E2C5 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C7 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C9 38 08                                jr		c, .noclipneeded
  39+ E2CB 78           .needtoclip             ld		a,b
  40+ E2CC 82                                   add		a,d
  41+ E2CD D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CF 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2D0 7A                                   ld		a,d
  44+ E2D1 94                                   sub		h
  45+ E2D2 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D3              ; so now BC = row col, d = length clipped, e = color
  47+ E2D3 78           .noclipneeded:          ld		a,b
  48+ E2D4 C5 D5                                push	bc,,de
  49+ E2D6 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D9               	 	; we now have poke address and a variable holding current bank number
  50+ E2D9 D1 C1                                pop		bc,,de
  51+ E2DB 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DC 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DD CD 9F E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2E0 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2E1 FE 00                                cp		0
  56+ E2E3 28 27                                jr		z, .doneplotting
  57+ E2E5 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E8 3C                                   inc		a
  59+ E2E9 06 00                                ld		b,0
  60+ E2EB C5 D5                                push	bc,,de
  61+ E2ED CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2F0 D1 C1                                pop     bc,,de
  63+ E2F2 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F3 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F4 CD 9F E2                             call	l2_draw_vert_segment
  66+ E2F7 7A                                   ld		a,d
  67+ E2F8 FE 00                                cp		0
  68+ E2FA 28 10                                jr		z,.doneplotting
  69+ E2FC 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FF 3C                                   inc		a
  71+ E300 06 00                                ld		b,0
  72+ E302 C5 D5                                push	bc,,de
  73+ E304 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E307 D1                                   pop		de
  75+ E308 E1                                   pop		hl							; hl = bc
  76+ E309 CD 9F E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30C C9           .doneplotting:	        ret
  78+ E30D
  79+ E30D              ; ">l2_draw_vert_line_to"
  80+ E30D              ; ">bc = row col d = to position, e = color"
  81+ E30D 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30E BA                                   cp		d
  83+ E30F 38 02                                jr		c, .noyswap
  84+ E311 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E312 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E313 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E314 90                                   sub		b
  88+ E315 3C                                   inc		a			; so now its length not offset
  89+ E316 57                                   ld		d,a
  90+ E317 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E319                                      ; no return needed
  92+ E319
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1205  E319                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E319
   2+ E319              l2_draw_box_to:
   3+ E319              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E319              ; ">NOT IMPLEMENTED YET"
   5+ E319 C9           	ret
   6+ E31A
   7+ E31A              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E31A              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E31A              l2decbstep	EQU $05
  10+ E31A              l2incbstep	EQU	$04
  11+ E31A              l2deccstep	EQU $0D
  12+ E31A              l2inccstep	EQU	$0C
  13+ E31A              		; l2 deltas are signed
  14+ E31A 00 00        l2deltaY	DW	0
  15+ E31C 00 00        l2deltaX	DW	0
  16+ E31E 00           l2deltaYsq	db	0
  17+ E31F 00           l2deltaXsq	db	0
  18+ E320 00           l2deltaYn	db	0
  19+ E321 00           l2deltaXn	db	0
  20+ E322 00           l2deltaYsqn	db	0
  21+ E323 00           l2deltaXsqn	db	0
  22+ E324 00           l2linecolor	db	0
  23+ E325 00 00        l2fraction	dw	0
  24+ E327 00 00        l2e2		dw	0
  25+ E329 00           l2way		db	0
  26+ E32A 00 00        l2targetPtr	dw	0
  27+ E32C              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32C 00 00 00...  l2targetArray1 ds	256
  29+ E42C 00 00 00...  l2targetArray2 ds	256
  30+ E52C              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52C              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52C              ;;    dx =  abs(x1-x0);
  33+ E52C              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52C              ;;    dy = -abs(y1-y0);
  35+ E52C              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52C              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52C              ;;    while (true)   /* loop */
  38+ E52C              ;;        plot(x0, y0);
  39+ E52C              ;;        if (x0==x1 && y0==y1) break;
  40+ E52C              ;;        e2 = 2*err;
  41+ E52C              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52C              ;;            err += dy;
  43+ E52C              ;;            x0 += sx;
  44+ E52C              ;;        end if
  45+ E52C              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52C              ;;            err += dx;
  47+ E52C              ;;            y0 += sy;
  48+ E52C              ;;        end if
  49+ E52C              ;;    end while
  50+ E52C              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52C              ; ">hl will be either l2targetArray1 or 2"
  52+ E52C              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52C FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52E 28 06                                jr		z,l2S_ItsArray1
  55+ E530 21 2C E4                             ld		hl,l2targetArray2
  56+ E533 C3 39 E5                             jp		l2S_setTarget
  57+ E536 21 2C E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E539 22 2A E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53C 32 24 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53F 21 00 00                             ld		hl,0                            ;
  62+ E542 22 1C E3                             ld		(l2deltaX),hl                   ;
  63+ E545 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E548 78           l2S_preSort:            ld		a,b								;
  65+ E549                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E549 BA          >                        cp      d
  65+ E54A DA 52 E5    >                        jp		c, l2S_noYSort
  66+ E54D              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54D 60          >                ld		h,b
  66+ E54E 69          >                ld		l,c
  67+ E54F EB                                   ex		de,hl                           ;
  68+ E550                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E550 44          >                ld		b,h
  68+ E551 4D          >                ld		c,l
  69+ E552 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E554 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E556 79           l2S_setXLen:            ld		a,c                             ;
  72+ E557                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E557 BB          >                        cp      e
  72+ E558 DA 64 E5    >                        jp		c, l2S_PosXLen
  73+ E55B 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55C 93                                   sub     e                               ;
  75+ E55D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E560 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E562 18 07                                jr		l2S_XINCDEC
  78+ E564 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E565 91                                   sub		c                               ;
  80+ E566 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E569 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E56B              l2S_XINCDEC:
  83+ E56B 32 D7 E5     	ld		(l2S_adjustCol),a				;
  84+ E56E 32 07 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E571              l2S_setYLen
  86+ E571 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E572 90           	sub		b
  88+ E573 32 1A E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E576              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E576              ldS_FracDYltDX:								;
  91+ E576 2A 1A E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E579 ED 5B 1C E3  	ld		de,(l2deltaX)
  93+ E57D              	ClearCarryFlag
  93+ E57D B7          >                    or a
  94+ E57E ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E580 EB           	ex		de,hl
  96+ E581 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E583 FD 6B        	ld		iyl,e
  98+ E585 F2 AA E5     	jp		p,l2S_fracIsPositive
  99+ E588              l2S_fracIsNegative:
 100+ E588              	NegIY
 100+ E588 AF          >                    xor a
 100+ E589 FD 95       >                    sub iyl
 100+ E58B FD 6F       >                    ld iyl,a
 100+ E58D 9F          >                    sbc a,a
 100+ E58E FD 94       >                    sub iyh
 100+ E590 FD 67       >                    ld iyh,a
 101+ E592              	ShiftIYRight1
 101+ E592 FD 7C       >			   ld 	a,iyh
 101+ E594 CB 3F       >			   srl 	a
 101+ E596 FD 67       >			   ld	iyh,a
 101+ E598 FD 7D       >			   ld 	a,iyl
 101+ E59A 1F          >			   rra
 101+ E59B FD 6F       >			   ld	iyl,a
 102+ E59D              	NegIY
 102+ E59D AF          >                    xor a
 102+ E59E FD 95       >                    sub iyl
 102+ E5A0 FD 6F       >                    ld iyl,a
 102+ E5A2 9F          >                    sbc a,a
 102+ E5A3 FD 94       >                    sub iyh
 102+ E5A5 FD 67       >                    ld iyh,a
 103+ E5A7 C3 B5 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5AA              l2S_fracIsPositive:
 105+ E5AA              	ShiftIYRight1
 105+ E5AA FD 7C       >			   ld 	a,iyh
 105+ E5AC CB 3F       >			   srl 	a
 105+ E5AE FD 67       >			   ld	iyh,a
 105+ E5B0 FD 7D       >			   ld 	a,iyl
 105+ E5B2 1F          >			   rra
 105+ E5B3 FD 6F       >			   ld	iyl,a
 106+ E5B5              l2S_SkipCalcInc:
 107+ E5B5              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B5 2A 2A E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B8 78           	ld		a,b
 110+ E5B9 ED 31        	add		hl,a
 111+ E5BB 71           	ld		(hl),c
 112+ E5BC              l2S_CheckIfEnd:
 113+ E5BC DD 7C        	ld		a,ixh
 114+ E5BE              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BE B8          >                        cp     b
 114+ E5BF D2 C5 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C2 C3 C9 E5     	jp		l2S_Continue
 116+ E5C5              l2S_CheckXPos:
 117+ E5C5 79           	ld		a,c
 118+ E5C6              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C6 DD BD       >                    cp    ixl
 118+ E5C8 D0          >                    ret	 nc
 119+ E5C9              l2S_Continue:
 120+ E5C9              l2S_HNegative:
 121+ E5C9 FD 7C        	ld		a,iyh
 122+ E5CB CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CD 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CF              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CF 3A 1A E3     	ld		a,(l2deltaY)
 126+ E5D2 16 00        	ld		d,0
 127+ E5D4 5F           	ld		e,a
 128+ E5D5 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D7              l2S_adjustCol:
 130+ E5D7 00           	nop										; this is our inc/dec of X
 131+ E5D8 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5DA              l2S_ErrNotNegative:
 133+ E5DA FD 7C        	ld		a,iyh
 134+ E5DC FD B5        	or		iyl
 135+ E5DE              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E5DF CA F8 E5    >				jp	z, l2S_ErrZero
 136+ E5E2              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E2              	lddeiy
 137+ E5E2 FD 54       >                ld		d,iyh
 137+ E5E4 FD 5D       >                ld		e,iyl
 138+ E5E6 EB           	ex		de,hl
 139+ E5E7 16 00        	ld		d,0
 140+ E5E9 3A 1C E3     	ld		a,(l2deltaX)
 141+ E5EC 5F           	ld		e,a
 142+ E5ED              	ClearCarryFlag
 142+ E5ED B7          >                    or a
 143+ E5EE ED 52        	sbc		hl,de
 144+ E5F0 EB           	ex		de,hl
 145+ E5F1              	ldiyde
 145+ E5F1 FD 62       >                ld		iyh,d
 145+ E5F3 FD 6B       >                ld		iyl,e
 146+ E5F5              l2S_adjustRow:									; move Y down by one
 147+ E5F5 04           	inc		b
 148+ E5F6 18 BD        	jr		l2S_Loop
 149+ E5F8              l2S_ErrZero:
 150+ E5F8 2A 1C E3     	ld		hl,(l2deltaX)
 151+ E5FB EB           	ex		de,hl
 152+ E5FC 2A 1A E3     	ld		hl,(l2deltaY)
 153+ E5FF              	ClearCarryFlag
 153+ E5FF B7          >                    or a
 154+ E600 ED 52        	sbc		hl,de
 155+ E602 EB           	ex		de,hl
 156+ E603              	ldiyde
 156+ E603 FD 62       >                ld		iyh,d
 156+ E605 FD 6B       >                ld		iyl,e
 157+ E607              l2S_adjustCol2:
 158+ E607 00           	nop										; update X and Y
 159+ E608 04           	inc		b
 160+ E609 18 AA        	jr		l2S_Loop
 161+ E60B
 162+ E60B              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E60B 32 24 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60E 21 00 00                             ld		hl,0                            ;
 165+ E611 22 1C E3                             ld		(l2deltaX),hl                   ;
 166+ E614 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E617 78           l2D_preSort:            ld		a,b								;
 168+ E618                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E618 BA          >                        cp      d
 168+ E619 DA 21 E6    >                        jp		c, l2D_noYSort
 169+ E61C              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61C 60          >                ld		h,b
 169+ E61D 69          >                ld		l,c
 170+ E61E EB                                   ex		de,hl                           ;
 171+ E61F                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E61F 44          >                ld		b,h
 171+ E620 4D          >                ld		c,l
 172+ E621 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E623 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E625 79           l2D_setXLen:            ld		a,c                             ;
 175+ E626                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E626 BB          >                        cp      e
 175+ E627 DA 33 E6    >                        jp		c, l2D_PosXLen
 176+ E62A 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E62B 93                                   sub     e                               ;
 178+ E62C 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E62F 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E631 18 07                                jr		l2D_XINCDEC
 181+ E633 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E634 91                                   sub		c                               ;
 183+ E635 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E638 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E63A 32 A9 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63D 32 D9 E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E640 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E641 90                                   sub		b
 189+ E642 32 1A E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E645              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E645 2A 1A E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E648 ED 5B 1C E3                          ld		de,(l2deltaX)
 193+ E64C                                      ClearCarryFlag
 193+ E64C B7          >                    or a
 194+ E64D ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E64F EB                                   ex		de,hl
 196+ E650 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E652 FD 6B                                ld		iyl,e
 198+ E654 F2 79 E6                             jp		p,l2D_fracIsPositive
 199+ E657              l2D_fracIsNegative:     NegIY
 199+ E657 AF          >                    xor a
 199+ E658 FD 95       >                    sub iyl
 199+ E65A FD 6F       >                    ld iyl,a
 199+ E65C 9F          >                    sbc a,a
 199+ E65D FD 94       >                    sub iyh
 199+ E65F FD 67       >                    ld iyh,a
 200+ E661                                      ShiftIYRight1
 200+ E661 FD 7C       >			   ld 	a,iyh
 200+ E663 CB 3F       >			   srl 	a
 200+ E665 FD 67       >			   ld	iyh,a
 200+ E667 FD 7D       >			   ld 	a,iyl
 200+ E669 1F          >			   rra
 200+ E66A FD 6F       >			   ld	iyl,a
 201+ E66C                                      NegIY
 201+ E66C AF          >                    xor a
 201+ E66D FD 95       >                    sub iyl
 201+ E66F FD 6F       >                    ld iyl,a
 201+ E671 9F          >                    sbc a,a
 201+ E672 FD 94       >                    sub iyh
 201+ E674 FD 67       >                    ld iyh,a
 202+ E676 C3 84 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E679              l2D_fracIsPositive:     ShiftIYRight1
 203+ E679 FD 7C       >			   ld 	a,iyh
 203+ E67B CB 3F       >			   srl 	a
 203+ E67D FD 67       >			   ld	iyh,a
 203+ E67F FD 7D       >			   ld 	a,iyl
 203+ E681 1F          >			   rra
 203+ E682 FD 6F       >			   ld	iyl,a
 204+ E684              l2D_SkipCalcInc:
 205+ E684 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E686 3A 24 E3                             ld		a,(l2linecolor)     			;
 207+ E689 CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68C D1 C1                                pop     bc,,de
 209+ E68E DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E690                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E690 B8          >                        cp     b
 210+ E691 D2 97 E6    >                        jp		nc,l2D_CheckXPos
 211+ E694 C3 9B E6                             jp		l2D_Continue
 212+ E697 79           l2D_CheckXPos:          ld		a,c
 213+ E698                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E698 DD BD       >                    cp      ixl
 213+ E69A C8          >                    ret     z
 214+ E69B              l2D_Continue:
 215+ E69B FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69D CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E69F 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6A1 3A 1A E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A4 16 00                                ld		d,0
 220+ E6A6 5F                                   ld		e,a
 221+ E6A7 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6A9 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6AA 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AC FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AE FD B5                                or		iyl
 226+ E6B0                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6B0 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6B1 CA CA E6    >				jp	z, l2D_ErrZero
 227+ E6B4              l2D_ErrPositive:		lddeiy
 227+ E6B4 FD 54       >                ld		d,iyh
 227+ E6B6 FD 5D       >                ld		e,iyl
 228+ E6B8 EB                                   ex		de,hl
 229+ E6B9 16 00                                ld		d,0
 230+ E6BB 3A 1C E3                             ld		a,(l2deltaX)
 231+ E6BE 5F                                   ld		e,a
 232+ E6BF                                      ClearCarryFlag
 232+ E6BF B7          >                    or a
 233+ E6C0 ED 52                                sbc		hl,de
 234+ E6C2 EB                                   ex		de,hl
 235+ E6C3                                      ldiyde
 235+ E6C3 FD 62       >                ld		iyh,d
 235+ E6C5 FD 6B       >                ld		iyl,e
 236+ E6C7 04           l2D_adjustRow:			inc		b
 237+ E6C8 18 BA                                jr		l2D_Loop
 238+ E6CA 2A 1C E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CD EB                                   ex		de,hl
 240+ E6CE 2A 1A E3                             ld		hl,(l2deltaY)
 241+ E6D1                                      ClearCarryFlag
 241+ E6D1 B7          >                    or a
 242+ E6D2 ED 52                                sbc		hl,de
 243+ E6D4 EB                                   ex		de,hl
 244+ E6D5                                      ldiyde
 244+ E6D5 FD 62       >                ld		iyh,d
 244+ E6D7 FD 6B       >                ld		iyl,e
 245+ E6D9 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6DA 04                                   inc		b
 247+ E6DB 18 A7                                jr		l2D_Loop
 248+ E6DD              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DD
 250+ E6DD
 251+ E6DD
 252+ E6DD
 253+ E6DD              ;Loin:				; BBC version of line draw
 254+ E6DD              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DD              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DD              ;	ld		ixh,0							; ixh = s
 257+ E6DD              ;	ld		iyh,0							; iyh = swap
 258+ E6DD              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DD              ;LoinCalcDeltaX:
 260+ E6DD              ;	ld		a,e
 261+ E6DD              ;	sub		c								; a = deltaX
 262+ E6DD              ;	JumpIfPositive LoinPosDx
 263+ E6DD              ;LoinNegDx:
 264+ E6DD              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DD              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DD              ;LoinPosDx:
 267+ E6DD              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DD              ;LoinCalcDeltaY:
 269+ E6DD              ;	ld		a,d
 270+ E6DD              ;	sub		b								; a= deltaY
 271+ E6DD              ;	JumpIfPositive LoinPosDy
 272+ E6DD              ;LoinNegDy:
 273+ E6DD              ;	neg
 274+ E6DD              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DD              ;LoinPosDy:
 276+ E6DD              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DD              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DD              ;LoinSTPx:									; step along X
 279+ E6DD              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DD              ;LoinSTPxSwapCoords:
 281+ E6DD              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DD              ;	ld		a,l								; save l flags
 283+ E6DD              ;	ex		de,hl							; save de to hl
 284+ E6DD              ;	lddebc									; Point2 = point1
 285+ E6DD              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DD              ;	ld		l,a								; get back l flags
 287+ E6DD              ;LoinSTPxCorrectOrder:
 288+ E6DD              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DD              ;	ld		a,iyl							; get delta Y back
 290+ E6DD              ;	ld		iy1,$FE							; roll counter
 291+ E6DD              ;LionSTPxRollQ:
 292+ E6DD              ;	sla		a								; highest bit of delta-Y
 293+ E6DD              ;	jp		c,LoinSTPxSteep
 294+ E6DD              ;	cp		ixl								; compare with DeltaX
 295+ E6DD              ;	jp		cs,LoinSTPxShallow
 296+ E6DD              ;LoinSTPxSteep:								;; LI4
 297+ E6DD              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DD              ;	scf										; force carry flag set
 299+ E6DD              ;LoinSTPxShallow:							;; LI5
 300+ E6DD              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DD              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DD              ;	inc		ihl								; DeltaX += 1
 303+ E6DD              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DD              ;	ld		a,d
 305+ E6DD              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DD              ;	ld		a,iyh							; swap flag
 307+ E6DD              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DD              ;LoinSTPxX1Dec:
 309+ E6DD              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DD              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DD              ;	sub		b
 312+ E6DD              ;	if
 313+ E6DD              ;
 314+ E6DD              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DD              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DD              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DD              ;86 81                   STX &81		\ Q
 318+ E6DD              ;.LIL1	\ roll Q
 319+ E6DD              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DD              ;B0 04                   BCS LI4		\ steep
 321+ E6DD              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DD              ;90 03                   BCC LI5		\ shallow
 323+ E6DD              ;.LI4	\ steep
 324+ E6DD              ;E5 1B                   SBC &1B		\ P
 325+ E6DD              ;38                      SEC
 326+ E6DD              ;.LI5	\ shallow
 327+ E6DD              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DD              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DD              ;A6 1B                   LDX &1B		\ P
 330+ E6DD              ;E8                      INX 		\ Xreg is width
 331+ E6DD              ;A5 37                   LDA &37		\ Y2
 332+ E6DD              ;E5 35                   SBC &35		\ Y1
 333+ E6DD              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DD              ;A5 90                   LDA &90		\ SWAP
 335+ E6DD              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DD              ;CA                      DEX
 337+ E6DD              ;.LIL2	\ counter X width
 338+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DD              ;.LI6	\ Xreg correct
 342+ E6DD              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DD              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DD              ;66 82                   ROR &82		\ R
 345+ E6DD              ;A5 07                   LDA &07		\ SC
 346+ E6DD              ;69 08                   ADC #8		\ next column
 347+ E6DD              ;85 07                   STA &07		\ SC
 348+ E6DD              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DD              ;A5 83                   LDA &83		\ S
 350+ E6DD              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DD              ;85 83                   STA &83		\ S
 352+ E6DD              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DD              ;88                      DEY
 354+ E6DD              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DD              ;C6 08                   DEC &08		\ SC+1
 356+ E6DD              ;A0 07                   LDY #7
 357+ E6DD              ;.LIC2	\ skip Y adjustment
 358+ E6DD              ;CA                      DEX
 359+ E6DD              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DD              ;60                      RTS
 362+ E6DD              ;
 363+ E6DD              ;.DOWN	\ Line is going to the right and down
 364+ E6DD              ;A5 90                   LDA &90		\ SWAP
 365+ E6DD              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DD              ;CA                      DEX
 367+ E6DD              ;.LIL3	\ counter X width
 368+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DD              ;.LI9	\ no swap
 372+ E6DD              ;46 82                   LSR &82		\ R
 373+ E6DD              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DD              ;66 82                   ROR &82		\ R
 375+ E6DD              ;A5 07                   LDA &07		\ SC
 376+ E6DD              ;69 08                   ADC #8		\ next column
 377+ E6DD              ;85 07                   STA &07		\ SC
 378+ E6DD              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DD              ;A5 83                   LDA &83		\ S
 380+ E6DD              ;65 81                   ADC &81		\ Q
 381+ E6DD              ;85 83                   STA &83		\ S
 382+ E6DD              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DD              ;C8                      INY
 384+ E6DD              ;C0 08                   CPY #8
 385+ E6DD              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DD              ;E6 08                   INC &08		\ SC+1
 387+ E6DD              ;A0 00                   LDY #0
 388+ E6DD              ;.LIC3	\ skipped Y adjustment
 389+ E6DD              ;CA                      DEX
 390+ E6DD              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DD              ;60                      RTS
 393+ E6DD              ;
 394+ E6DD              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DD              ;A4 35                   LDY &35		\ Y1
 396+ E6DD              ;98                      TYA
 397+ E6DD              ;A6 34                   LDX &34		\ X1
 398+ E6DD              ;C4 37                   CPY &37		\ Y2
 399+ E6DD              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DD              ;C6 90                   DEC &90		\ SWAP
 401+ E6DD              ;A5 36                   LDA &36		\ X2
 402+ E6DD              ;85 34                   STA &34		\ X1
 403+ E6DD              ;86 36                   STX &36		\ X2
 404+ E6DD              ;AA                      TAX
 405+ E6DD              ;A5 37                   LDA &37		\ Y2
 406+ E6DD              ;85 35                   STA &35		\ Y1
 407+ E6DD              ;84 37                   STY &37		\ Y2
 408+ E6DD              ;A8                      TAY
 409+ E6DD              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DD              ;4A                      LSR A
 411+ E6DD              ;4A                      LSR A
 412+ E6DD              ;4A                      LSR A
 413+ E6DD              ;09 60                   ORA #&60
 414+ E6DD              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DD              ;8A                      TXA 		\ X1
 416+ E6DD              ;29 F8                   AND #&F8
 417+ E6DD              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DD              ;8A                      TXA
 419+ E6DD              ;29 07                   AND #7		\ mask index
 420+ E6DD              ;AA                      TAX
 421+ E6DD              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DD              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DD              ;A5 35                   LDA &35		\ Y1
 424+ E6DD              ;29 07                   AND #7
 425+ E6DD              ;A8                      TAY
 426+ E6DD              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DD              ;A2 01                   LDX #1		\ roll counter
 428+ E6DD              ;86 1B                   STX &1B	    	\ P
 429+ E6DD              ;.LIL4	\ roll P
 430+ E6DD              ;0A                      ASL A
 431+ E6DD              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DD              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DD              ;90 03                   BCC LI14	\ less than Q
 434+ E6DD              ;.LI13	\ do subtraction
 435+ E6DD              ;E5 81                   SBC &81		\ Q
 436+ E6DD              ;38                      SEC
 437+ E6DD              ;.LI14	\ less than Q
 438+ E6DD              ;26 1B                   ROL &1B		\ P
 439+ E6DD              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DD              ;A6 81                   LDX &81		\ Q
 441+ E6DD              ;E8                      INX 		\ adjust height
 442+ E6DD              ;A5 36                   LDA &36		\ X2
 443+ E6DD              ;E5 34                   SBC &34		\ X1
 444+ E6DD              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DD              ;18                      CLC
 446+ E6DD              ;A5 90                   LDA &90		\ SWAP
 447+ E6DD              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DD              ;CA                      DEX
 449+ E6DD              ;.LIL5	\ skipped first point, counter X
 450+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DD              ;.LI17	\ skipped first point
 454+ E6DD              ;88                      DEY
 455+ E6DD              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DD              ;C6 08                   DEC &08		\ SC+1
 457+ E6DD              ;A0 07                   LDY #7		\ new char
 458+ E6DD              ;	.LI16	\ skipped hi adjust
 459+ E6DD              ;A5 83                   LDA &83		\ S
 460+ E6DD              ;65 1B                   ADC &1B		\ P
 461+ E6DD              ;85 83                   STA &83		\ S
 462+ E6DD              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DD              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DD              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DD              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DD              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DD              ;69 08                   ADC #8		\ next char below
 468+ E6DD              ;85 07                   STA &07		\ SC
 469+ E6DD              ;.LIC5	\ same column
 470+ E6DD              ;CA                      DEX
 471+ E6DD              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DD              ;60                      RTS
 474+ E6DD              ;
 475+ E6DD              ;.LFT	\ going left
 476+ E6DD              ;A5 90                   LDA &90		\ SWAP
 477+ E6DD              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DD              ;CA                      DEX 		\ reduce height
 479+ E6DD              ;.LIL6	\ counter X height
 480+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DD              ;.LI18
 484+ E6DD              ;88                      DEY
 485+ E6DD              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DD              ;C6 08                   DEC &08		\ SC+1
 487+ E6DD              ;A0 07                   LDY #7		\ rest char row
 488+ E6DD              ;.LI19	\ skipped hi adjust
 489+ E6DD              ;A5 83                   LDA &83		\ S
 490+ E6DD              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DD              ;85 83                   STA &83		\ S
 492+ E6DD              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DD              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DD              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DD              ;26 82                   ROL &82		\ R
 496+ E6DD              ;A5 07                   LDA &07		\ SC
 497+ E6DD              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DD              ;85 07                   STA &07		\ SC
 499+ E6DD              ;18                      CLC
 500+ E6DD              ;.LIC6	\ no overflow
 501+ E6DD              ;CA                      DEX 		\ height
 502+ E6DD              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DD              ;.HL6
 505+ E6DD              ;60                      RTS 		\ end Line drawing
 506+ E6DD
 507+ E6DD
 508+ E6DD              ;;l2_draw_diagonalopt:
 509+ E6DD              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DD              ;;	push	af
 511+ E6DD              ;;	ld		a,b
 512+ E6DD              ;;	cp		d
 513+ E6DD              ;;	jr		z,.RegularDiagnonal
 514+ E6DD              ;;.CheckHorz:
 515+ E6DD              ;;	ld		a,c
 516+ E6DD              ;;	cp		e
 517+ E6DD              ;;	jr		z,.horizontalLine
 518+ E6DD              ;;.RegularDiagnonal:
 519+ E6DD              ;;	pop		af
 520+ E6DD              ;;	call diag
 521+ E6DD
 522+ E6DD
 523+ E6DD              ;;l2_signed_mul2a:
 524+ E6DD              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DD              ;;	TEST	$80
 526+ E6DD              ;;	jr		nz, .negativecalc
 527+ E6DD              ;;.positivecalc:
 528+ E6DD              ;;	ccf
 529+ E6DD              ;;	rla
 530+ E6DD              ;;	ret
 531+ E6DD              ;;.negativecalc:
 532+ E6DD              ;;	neg
 533+ E6DD              ;;	ccf
 534+ E6DD              ;;	rla
 535+ E6DD              ;;	neg
 536+ E6DD              ;;	ret
 537+ E6DD              ;;
 538+ E6DD              ;;l2_signed_mul2atohl:
 539+ E6DD              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DD              ;;	TEST	$80
 541+ E6DD              ;;	jr		nz, .negativecalc
 542+ E6DD              ;;.positivecalc:
 543+ E6DD              ;;	ld		hl,0
 544+ E6DD              ;;	ld		l,a
 545+ E6DD              ;;	add		hl,a
 546+ E6DD              ;;	ret
 547+ E6DD              ;;.negativecalc:
 548+ E6DD              ;;	neg
 549+ E6DD              ;;	ld		hl,0
 550+ E6DD              ;;	ld		l,a
 551+ E6DD              ;;	neghl
 552+ E6DD              ;;	ret
 553+ E6DD              ;;
 554+ E6DD              ;;l2_e2fractionby2:
 555+ E6DD              ;;	ld 		hl,(l2fraction)
 556+ E6DD              ;;	push	de
 557+ E6DD              ;;	ld		d,h
 558+ E6DD              ;;	ld		e,l
 559+ E6DD              ;;	add		hl,de
 560+ E6DD              ;;	pop		de
 561+ E6DD              ;;	ld		(l2e2),hl
 562+ E6DD              ;;	ret
 563+ E6DD
 564+ E6DD
 565+ E6DD
 566+ E6DD
 567+ E6DD
 568+ E6DD              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DD              ;;//.catchLoop:
 570+ E6DD              ;;//	jp .catchLoop
 571+ E6DD              ;;//.continue:
 572+ E6DD              ;;//    ld      A,D
 573+ E6DD              ;;//    sub     H
 574+ E6DD              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DD              ;;//.DXNegative:
 576+ E6DD              ;;//    neg
 577+ E6DD              ;;//.DXPositive:
 578+ E6DD              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DD              ;;//    ld      A,E
 580+ E6DD              ;;//    sub     L
 581+ E6DD              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DD              ;;//.DYNegative:
 583+ E6DD              ;;//    neg
 584+ E6DD              ;;//.DYPositive:
 585+ E6DD              ;;//    sub     B               ;|delta_y|
 586+ E6DD              ;;//	push	af
 587+ E6DD              ;;//	jr		c,.DeltaX
 588+ E6DD              ;;//.DeltaY
 589+ E6DD              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DD              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DD              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DD              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DD              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DD              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DD              ;;//.DeltaX:
 596+ E6DD              ;;//	ld		a,d
 597+ E6DD              ;;//	sub		h
 598+ E6DD              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DD              ;;//.TestDX:
 600+ E6DD              ;;//	ex		de,hl
 601+ E6DD              ;;//.TestDY:
 602+ E6DD              ;;//	ld		a,e
 603+ E6DD              ;;//	sub		l
 604+ E6DD              ;;//    ld      A,$01
 605+ E6DD              ;;//    jr      NC,.StoreA
 606+ E6DD              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DD              ;;//.StoreA:
 608+ E6DD              ;;//        ld      (l2way),A
 609+ E6DD              ;;//.InitLine:
 610+ E6DD              ;;//        ld      B,H
 611+ E6DD              ;;//        ld      C,L
 612+ E6DD              ;;//        ld      A,E
 613+ E6DD              ;;//        sub     L
 614+ E6DD              ;;//        jr      NC,.EndInit
 615+ E6DD              ;;//        ld      A,L
 616+ E6DD              ;;//        ld      L,E
 617+ E6DD              ;;//        ld      E,A
 618+ E6DD              ;;//.EndInit:
 619+ E6DD              ;;//        ld      A,E
 620+ E6DD              ;;//        sub     L
 621+ E6DD              ;;//        rla
 622+ E6DD              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DD              ;;//        add     A,H
 624+ E6DD              ;;//        sub     D
 625+ E6DD              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DD              ;;//        add     A,H
 627+ E6DD              ;;//        sub     D
 628+ E6DD              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DD              ;;//.Loop:
 630+ E6DD              ;;//        ld      A,B
 631+ E6DD              ;;//        sub     D
 632+ E6DD              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DD              ;;//        pop     AF
 634+ E6DD              ;;//        bit     7,A
 635+ E6DD              ;;//        push    AF
 636+ E6DD              ;;//        push    AF
 637+ E6DD              ;;//        push    BC
 638+ E6DD              ;;//        jr      Z,.DrawPoint
 639+ E6DD              ;;//        ld      A,B
 640+ E6DD              ;;//        ld      B,C
 641+ E6DD              ;;//        ld      C,A
 642+ E6DD              ;;//.DrawPoint:
 643+ E6DD              ;;//		push	hl
 644+ E6DD              ;;//		pushbcdeaf
 645+ E6DD              ;;//		ld		b,e
 646+ E6DD              ;;//		ld		c,d
 647+ E6DD              ;;//	ld 		a,(l2linecolor)
 648+ E6DD              ;;//	call	l2_plot_pixel
 649+ E6DD              ;;//		popafdebc
 650+ E6DD              ;;//		pop		hl
 651+ E6DD              ;;//        pop     BC
 652+ E6DD              ;;//        pop     AF
 653+ E6DD              ;;//.TestD:
 654+ E6DD              ;;//        bit     7,E
 655+ E6DD              ;;//        jr      NZ,.Case1
 656+ E6DD              ;;//.Case2:                          ;d >= 0
 657+ E6DD              ;;//        ld      A,E
 658+ E6DD              ;;//        add     A,H
 659+ E6DD              ;;//        ld      E,A
 660+ E6DD              ;;//        ld      A,(l2way)
 661+ E6DD              ;;//        add     A,C
 662+ E6DD              ;;//        ld      C,A
 663+ E6DD              ;;//        jr      .EndLoop
 664+ E6DD              ;;//.Case1:                          ;d < 0
 665+ E6DD              ;;//        ld      A,E
 666+ E6DD              ;;//        add     A,L
 667+ E6DD              ;;//        ld      E,A
 668+ E6DD              ;;//.EndLoop:
 669+ E6DD              ;;//        inc     B
 670+ E6DD              ;;//        jr      .Loop
 671+ E6DD              ;;//.EndLine:
 672+ E6DD              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DD              ;;//        pop     HL              ;can be removed
 674+ E6DD              ;;//        pop     DE              ;can be removed
 675+ E6DD              ;;//        ret
 676+ E6DD
 677+ E6DD              ;;	ld		(.l2yadjust),a
 678+ E6DD              ;;	call	calcdeltax:
 679+ E6DD              ;;	ld		(.l2xadjust),a
 680+ E6DD              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DD              ;;	push	hl
 682+ E6DD              ;;	push	de
 683+ E6DD              ;;	ld		hl,(l2deltaX)
 684+ E6DD              ;;	ld		de,(l2deltaY)
 685+ E6DD              ;;	add		hl,de
 686+ E6DD              ;;	ld		(l2fraction),hl
 687+ E6DD              ;;	pop		de
 688+ E6DD              ;;	pop		hl
 689+ E6DD              ;;.mainloop:
 690+ E6DD              ;;	push	bc
 691+ E6DD              ;;	push	de
 692+ E6DD              ;;	ld 		a,(l2linecolor)
 693+ E6DD              ;;	call	l2_plot_pixel
 694+ E6DD              ;;	pop		de
 695+ E6DD              ;;	pop		bc
 696+ E6DD              ;;.arewefinishedtest
 697+ E6DD              ;;	ld		a,b
 698+ E6DD              ;;	cp		d
 699+ E6DD              ;;	jr		nz,.notthereyet
 700+ E6DD              ;;	ld		a,c
 701+ E6DD              ;;	cp		e
 702+ E6DD              ;;	ret		z
 703+ E6DD              ;;.notthereyet:
 704+ E6DD              ;;	push	de
 705+ E6DD              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DD              ;;	pop		de
 707+ E6DD              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DD              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DD              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DD              ;;	or		a							;
 711+ E6DD              ;;	sbc		hl,de						;
 712+ E6DD              ;;	pop		de
 713+ E6DD              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DD              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DD              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DD              ;;.dodycalc:
 717+ E6DD              ;;	ld		hl,(l2fraction)
 718+ E6DD              ;;	push	de
 719+ E6DD              ;;	ld		de,(l2deltaY)
 720+ E6DD              ;;	add		hl,de
 721+ E6DD              ;;	ld		(l2fraction),de
 722+ E6DD              ;;	pop		de
 723+ E6DD              ;;.l2yadjust:
 724+ E6DD              ;;	nop
 725+ E6DD              ;;.skipdycalc:
 726+ E6DD              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DD              ;;	ld		hl,(l2e2)
 728+ E6DD              ;;	push	de							;
 729+ E6DD              ;;	ld		de,(l2deltaX)				;
 730+ E6DD              ;;	or		a							; clear carry flag
 731+ E6DD              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DD              ;;	pop		de
 733+ E6DD              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DD              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DD              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DD              ;;.dodxcalc:
 737+ E6DD              ;;	ld		hl,(l2fraction)
 738+ E6DD              ;;	push	de
 739+ E6DD              ;;	ld		de,(l2deltaX)
 740+ E6DD              ;;	add		hl,de
 741+ E6DD              ;;	ld		(l2fraction),de
 742+ E6DD              ;;	pop		de
 743+ E6DD              ;;.l2xadjust:
 744+ E6DD              ;;	nop
 745+ E6DD              ;;.skipdxcalc:
 746+ E6DD              ;;	jr 		.mainloop
 747+ E6DD
 748+ E6DD
 749+ E6DD              ;;/l2_draw_diagonalold:
 750+ E6DD              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DD              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DD              ;;/.sortycoords:
 753+ E6DD              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DD              ;;/	cp		d
 755+ E6DD              ;;/	jr		nc, .nocoordswap
 756+ E6DD              ;;/.swapcoords:
 757+ E6DD              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DD              ;;/	lddebc
 759+ E6DD              ;;/	ldbchl
 760+ E6DD              ;;/.nocoordswap:
 761+ E6DD              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DD              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DD              ;;/	ld		(l2deltaY),a
 764+ E6DD              ;;/	neg									; DEBUG
 765+ E6DD              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DD              ;;/	neg									; DEBUG
 767+ E6DD              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DD              ;;/    ld		a,c
 769+ E6DD              ;;/	cp		e
 770+ E6DD              ;;/	jr		c, .x1GTx0
 771+ E6DD              ;;/.x1LTx0
 772+ E6DD              ;;/	ld		a,c
 773+ E6DD              ;;/	sub		e
 774+ E6DD              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DD              ;;/	neg									; DEBUG
 776+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DD              ;;/	neg									; DEBUG
 778+ E6DD              ;;/	ld		a,l2incbstep
 779+ E6DD              ;;/	jr		.setlayershift0
 780+ E6DD              ;;/.x1GTx0:
 781+ E6DD              ;;/	ld		a,e
 782+ E6DD              ;;/	sub		c
 783+ E6DD              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DD              ;;/	neg									; DEBUG
 785+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DD              ;;/	neg									; DEBUG
 787+ E6DD              ;;/	ld		a,l2decbstep
 788+ E6DD              ;;/.setlayershift0:
 789+ E6DD              ;;/	ld		a,0
 790+ E6DD              ;;/	pushbcde
 791+ E6DD              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DD              ;;/	popdebc
 793+ E6DD              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DD              ;;/.dymuliplyby2:
 795+ E6DD              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DD              ;;/	call	l2_signed_mul2a
 797+ E6DD              ;;/	ld		(l2deltaYsq),a
 798+ E6DD              ;;/	neg									; DEBUG
 799+ E6DD              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DD              ;;/	neg									; DEBUG
 801+ E6DD              ;;/.dxmuliplyby2:
 802+ E6DD              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DD              ;;/	call	l2_signed_mul2a
 804+ E6DD              ;;/	ld		(l2deltaXsq),a
 805+ E6DD              ;;/	neg									; DEBUG
 806+ E6DD              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DD              ;;/	neg									; DEBUG
 808+ E6DD              ;;/.plotfirstpixel:
 809+ E6DD              ;;/	pushbcde
 810+ E6DD              ;;/	ld a,(l2linecolor)
 811+ E6DD              ;;/	call	l2_plot_pixel
 812+ E6DD              ;;/	popdebc
 813+ E6DD              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DD              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DD              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DD              ;;/	cp		(hl)
 817+ E6DD              ;;/	jp		m,	.signset
 818+ E6DD              ;;/.signclear:
 819+ E6DD              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DD              ;;/	jr		.dxGTdybranch
 821+ E6DD              ;;/.signset:
 822+ E6DD              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DD              ;;/.dxGTdybranch:
 824+ E6DD              ;;/	ld		a,(l2deltaYsq)
 825+ E6DD              ;;/	ld		hl,l2deltaX
 826+ E6DD              ;;/	sub		(hl)
 827+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DD              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DD              ;;/	ld		a,c
 830+ E6DD              ;;/	cp		e
 831+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DD              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DD              ;;/	ld		a,(l2fraction)
 834+ E6DD              ;;/	TEST	$80
 835+ E6DD              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DD              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DD              ;;/	ld		hl,l2deltaXsq
 838+ E6DD              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DD              ;;/	ld		(l2fraction),a
 840+ E6DD              ;;/.BranchAskipYstep:
 841+ E6DD              ;;/.l2stepx1:
 842+ E6DD              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DD              ;;/	ld		hl,l2deltaYsq
 845+ E6DD              ;;/	add		a,(hl)
 846+ E6DD              ;;/	ld		(l2fraction),a
 847+ E6DD              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DD              ;;/	pushbcde
 849+ E6DD              ;;/	ld a,(l2linecolor)
 850+ E6DD              ;;/	call	l2_plot_pixel
 851+ E6DD              ;;/	popdebc
 852+ E6DD              ;;/.BranchAloop:
 853+ E6DD              ;;/	jr		.BranchAwhile
 854+ E6DD              ;;/.dxLTEdybranch:
 855+ E6DD              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DD              ;;/	ld		hl, l2deltaY
 857+ E6DD              ;;/	sub		(hl)
 858+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DD              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DD              ;;/	ld		a,b
 861+ E6DD              ;;/	cp		d
 862+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DD              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DD              ;;/	ld		a,(l2fraction)
 865+ E6DD              ;;/	TEST	$80
 866+ E6DD              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DD              ;;/.l2stepx2
 868+ E6DD              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DD              ;;/	ld		hl,l2deltaYsq
 871+ E6DD              ;;/	sub		(hl)
 872+ E6DD              ;;/	ld		(l2fraction),a
 873+ E6DD              ;;/.BranchBskipYstep:
 874+ E6DD              ;;/	ld		hl, l2deltaYsq
 875+ E6DD              ;;/	add		a,(hl)
 876+ E6DD              ;;/	ld		(l2fraction),a
 877+ E6DD              ;;/	inc		b							; ++l2_vy0;
 878+ E6DD              ;;/.BranchBplotBCColA:
 879+ E6DD              ;;/	pushbcde
 880+ E6DD              ;;/	ld a,(l2linecolor)
 881+ E6DD              ;;/	call	l2_plot_pixel
 882+ E6DD              ;;/	popdebc
 883+ E6DD              ;;/.BranchBloop:
 884+ E6DD              ;;/	jr		.BranchBwhile
 885+ E6DD
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1206  E6DD                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DD
   2+ E6DD
   3+ E6DD
   4+ E6DD 00 00        l2trianglebc	        DW 0
   5+ E6DF 00 00        l2trianglede	        DW 0
   6+ E6E1 00 00        l2trianglehl	        DW 0
   7+ E6E3
   8+ E6E3              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E3 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E7 CD 0B E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6EA F1                                   pop		af
  12+ E6EB D1                                   pop		de						; swap DE and HL
  13+ E6EC E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6ED C1                                   pop		bc
  15+ E6EE D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6F0 F5                                   push	af
  17+ E6F1 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F4 F1                                   pop		af
  19+ E6F5 C1                                   pop		bc						; Now bc = original de
  20+ E6F6 D1                                   pop		de						; de = original hl
  21+ E6F7 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6FA C9                                   ret
  23+ E6FB
  24+ E6FB
  25+ E6FB
  26+ E6FB
  27+ E6FB
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1207  E6FB                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6FB              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6FB              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6FB              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6FB DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FD 7D                                   ld		a,l
   6+ E6FE 32 24 E3                             ld		(l2linecolor),a
   7+ E701 79                                   ld		a,c
   8+ E702 BB                                   cp		e
   9+ E703 30 08                                jr		nc, .x2gtex1
  10+ E705 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E708 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E70B 18 06                                jr		.storepoints
  13+ E70D DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E710 DD 2E 01                             ld		ixl,1
  15+ E713 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E716 DD 7C                                ld		a,ixh
  17+ E718 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E719 54                                   ld		d,h
  19+ E71A CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71D E1 D1 C1                             pop		bc,,de,,hl
  21+ E720 C5 E5                                push	bc,,hl
  22+ E722 54                                   ld		d,h                             ; now its bc -> he
  23+ E723 DD 7D                                ld		a,ixl
  24+ E725 CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E728 E1 C1                                pop		bc,,hl
  26+ E72A 50           .SaveForLoop:           ld		d,b
  27+ E72B 5C                                   ld		e,h								; save loop counters
  28+ E72C D5                                   push	de								; de = y0ycommon
  29+ E72D 21 2C E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E730 78                                   ld		a,b
  31+ E731 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E733 7E                                   ld		a,(hl)							;
  33+ E734 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E735 21 2C E4                             ld      hl,l2targetArray2
  35+ E738 78                                   ld      a,b
  36+ E739 ED 31                                add     hl,a
  37+ E73B              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E73B 7E                                   ld		a,(hl)
  39+ E73C 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73D 3A 24 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E740 5F                                   ld		e,a								; de = to colour
  42+ E741 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E742 25                                   dec		h
  44+ E743 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E744 CD 8E E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E747 E1                                   pop		hl
  47+ E748 C1                                   pop		bc
  48+ E749 04                                   inc		b								; down a rowc
  49+ E74A D1                                   pop		de								; de = from to (and b also = current)
  50+ E74B 14                                   inc		d
  51+ E74C 7B                                   ld		a,e								; while e >= d
  52+ E74D BA                                   cp		d
  53+ E74E 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E750 C9                                   ret
  55+ E751
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1208  E751                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E751
   2+ E751 00 00        l2_circle_pos		DW 0
   3+ E753 00           l2_circle_colour	DB 0
   4+ E754 00           l2_circle_radius	DB 0
   5+ E755 00           l2_circle_x			DB 0
   6+ E756 00           l2_circle_y			DB 0
   7+ E757 00           l2_circle_d			DB 0
   8+ E758
   9+ E758              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E758 7B           l2_draw_circle:     ld		a,e
  11+ E759 32 FF E7                         ld		(.PlotPixel+1),a
  12+ E75C 7A                               ld		a,d								; get radius
  13+ E75D A7                               and		a
  14+ E75E C8                               ret		z
  15+ E75F FE 01                            cp		1
  16+ E761 CA 0B E8                         jp		z,CircleSinglepixel
  17+ E764 ED 43 8E E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E768 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E76A DD 2E 00                         ld		ixl,0
  20+ E76D 26 00        .calcd:	            ld		h,0
  21+ E76F 6F                               ld		l,a
  22+ E770 29                               add		hl,hl							; hl = r * 2
  23+ E771 EB                               ex		de,hl							; de = r * 2
  24+ E772 21 03 00                         ld		hl,3
  25+ E775 A7                               and		a
  26+ E776 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E778 44                               ld		b,h
  28+ E779 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E77A 21 01 00     .calcdelta:         ld		hl,1
  30+ E77D 16 00                            ld		d,0
  31+ E77F DD 5D                            ld		e,ixl
  32+ E781 A7                               and		a
  33+ E782 ED 52                            sbc		hl,de
  34+ E784 11 01 00     .Setde1:            ld		de,1
  35+ E787 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E789 DD BD                            cp		ixl
  37+ E78B D8                               ret		c
  38+ E78C D9           .ProcessLoop:	    exx
  39+ E78D 11 00 00     .Plot1:             ld		de,0
  40+ E790 7B                               ld		a,e
  41+ E791 DD 85                            add		a,ixl
  42+ E793 4F                               ld		c,a
  43+ E794 7A                               ld		a,d
  44+ E795 DD 84                            add		a,ixh
  45+ E797 47                               ld		b,a
  46+ E798 CD FE E7                         call	.PlotPixel			;CX+X,CY+Y
  47+ E79B 7B           .Plot2:             ld 		a,e
  48+ E79C DD 95                            sub 	ixl
  49+ E79E 4F                               ld 		c,a
  50+ E79F 7A                               ld 		a,d
  51+ E7A0 DD 84                            add 	a,ixh
  52+ E7A2 47                               ld		b,a
  53+ E7A3 CD FE E7                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A6 7B           .Plot3:             ld 		a,e
  55+ E7A7 DD 85                            add		a,ixl
  56+ E7A9 4F                               ld 		c,a
  57+ E7AA 7A                               ld 		a,d
  58+ E7AB DD 94                            sub 	ixh
  59+ E7AD 47                               ld 		b,a
  60+ E7AE CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7B1 7B           .Plot4:             ld 		a,e
  62+ E7B2 DD 95                            sub 	ixl
  63+ E7B4 4F                               ld 		c,a
  64+ E7B5 7A                               ld 		a,d
  65+ E7B6 DD 94                            sub 	ixh
  66+ E7B8 47                               ld 		b,a
  67+ E7B9 CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BC 7A           .Plot5:	            ld 		a,d
  69+ E7BD DD 85                            add 	a,ixl
  70+ E7BF 47                               ld 		b,a
  71+ E7C0 7B                               ld 		a,e
  72+ E7C1 DD 84                            add 	a,ixh
  73+ E7C3 4F                               ld 		c,a
  74+ E7C4 CD FE E7                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C7 7A           .Plot6:	            ld 		a,d
  76+ E7C8 DD 95                            sub 	ixl
  77+ E7CA 47                               ld 		b,a
  78+ E7CB 7B                               ld 		a,e
  79+ E7CC DD 84                            add 	a,ixh
  80+ E7CE 4F                               ld 		c,a
  81+ E7CF CD FE E7                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D2 7A           .Plot7:	            ld 		a,d
  83+ E7D3 DD 85                            add 	a,ixl
  84+ E7D5 47                               ld 		b,a
  85+ E7D6 7B                               ld 		a,e
  86+ E7D7 DD 94                            sub 	ixh
  87+ E7D9 4F                               ld 		c,a
  88+ E7DA CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DD 7A           .Plot8:	            ld 		a,d
  90+ E7DE DD 95                            sub 	ixl
  91+ E7E0 47                               ld		b,a
  92+ E7E1 7B                               ld 		a,e
  93+ E7E2 DD 94                            sub 	ixh
  94+ E7E4 4F                               ld 		c,a
  95+ E7E5 CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7E8 D9                               exx
  97+ E7E9 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7EB 28 03                            jr z,   .draw_circle_1
  99+ E7ED 19                               add hl,de			; Delta=Delta+D1
 100+ E7EE 18 05                            jr      .draw_circle_2		;
 101+ E7F0 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7F1 03                               inc     bc
 103+ E7F2 03                               inc     bc				; D2=D2+2
 104+ E7F3 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F5 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F6 03                               inc bc
 107+ E7F7 13                               inc de				; D1=D1+2
 108+ E7F8 13                               inc de
 109+ E7F9 DD 2C                            inc ixl				; X=X+1
 110+ E7FB C3 87 E7                         jp      .CircleLoop
 111+ E7FE 3A 53 E7     .PlotPixel:         ld		a,(l2_circle_colour)
 112+ E801 D5 C5 E5                         push	de,,bc,,hl
 113+ E804 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E807 E1 C1 D1                         pop		de,,bc,,hl
 115+ E80A C9                               ret
 116+ E80B 7B           CircleSinglepixel:  ld		a,e
 117+ E80C CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E80F C9                               ret
 119+ E810
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1209  E810                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E810
   2+ E810 00           l2_circle_dblx		DB 0
   3+ E811 00           l2_circle_dbly		DB 0
   4+ E812
   5+ E812              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E812 7B           l2_draw_circle_fill:    ld		a,e
   7+ E813 32 A9 E8                             ld		(.LineColour+1),a
   8+ E816 7A                                   ld		a,d								; get radius
   9+ E817 A7                                   and		a
  10+ E818 C8                                   ret		z
  11+ E819 FE 01                                cp		1
  12+ E81B CA 0B E8                             jp		z,CircleSinglepixel
  13+ E81E ED 43 48 E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E822 DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E824 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E827 26 00        .calcd:	                ld		h,0
  17+ E829 6F                                   ld		l,a
  18+ E82A 29                                   add		hl,hl							; hl = r * 2
  19+ E82B EB                                   ex		de,hl							; de = r * 2
  20+ E82C 21 03 00                             ld		hl,3
  21+ E82F A7                                   and		a
  22+ E830 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E832 44                                   ld		b,h
  24+ E833 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E834 21 01 00     .calcdelta              ld		hl,1
  26+ E837 16 00                                ld		d,0
  27+ E839 DD 5D                                ld		e,ixl
  28+ E83B A7                                   and		a
  29+ E83C ED 52                                sbc		hl,de
  30+ E83E 11 01 00     .Setde1	                ld		de,1
  31+ E841 DD 7C        .CircleLoop:            ld		a,ixh
  32+ E843 DD BD                                cp		ixl
  33+ E845 D8                                   ret		c
  34+ E846 D9           .ProcessLoop:	        exx
  35+ E847 11 00 00     .Line1:                 ld		de,0
  36+ E84A 7B                                   ld 		a,e
  37+ E84B DD 95                                sub 	ixl
  38+ E84D 4F                                   ld 		c,a
  39+ E84E 7A                                   ld 		a,d
  40+ E84F DD 84                                add 	a,ixh
  41+ E851 47                                   ld		b,a
  42+ E852                                      ;; TODO ADD DOUBLE X CALC
  43+ E852 D5                                   push	de
  44+ E853 DD 55                                ld		d,ixl
  45+ E855 CB 22                                sla		d
  46+ E857 CD A4 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E85A D1                                   pop		de
  48+ E85B 7B           .Line2:                 ld 		a,e
  49+ E85C DD 95                                sub		ixl
  50+ E85E 4F                                   ld 		c,a
  51+ E85F 7A                                   ld 		a,d
  52+ E860 DD 94                                sub 	ixh
  53+ E862 47                                   ld 		b,a
  54+ E863                                      ;; TODO ADD DOUBLE X CALC
  55+ E863 D5                                   push	de
  56+ E864 DD 55                                ld		d,ixl
  57+ E866 CB 22                                sla		d
  58+ E868 CD A4 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E86B D1                                   pop		de
  60+ E86C 7B           .Line3:	                ld 		a,e
  61+ E86D DD 94                                sub		ixh
  62+ E86F 4F                                   ld 		c,a
  63+ E870 7A                                   ld 		a,d
  64+ E871 DD 85                                add 	a,ixl
  65+ E873 47                                   ld 		b,a
  66+ E874                                      ;; TODO ADD DOUBLE Y CALC
  67+ E874 D5                                   push	de
  68+ E875 DD 54                                ld		d,ixh
  69+ E877 CB 22                                sla		d
  70+ E879 CD A4 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E87C D1                                   pop		de
  72+ E87D 7B           .Line4:	                ld 		a,e
  73+ E87E DD 94                                sub		ixh
  74+ E880 4F                                   ld 		c,a
  75+ E881 7A                                   ld 		a,d
  76+ E882 DD 95                                sub 	ixl
  77+ E884 47                                   ld 		b,a
  78+ E885                                      ;; TODO ADD DOUBLE Y CALC
  79+ E885 D5                                   push	de
  80+ E886 DD 54                                ld		d,ixh
  81+ E888 CB 22                                sla		d
  82+ E88A CD A4 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88D D1                                   pop		de
  84+ E88E D9                                   exx
  85+ E88F CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E891 28 03                                jr z,.draw_circle_1
  87+ E893 19                                   add hl,de			; Delta=Delta+D1
  88+ E894 18 05                                jr .draw_circle_2		;
  89+ E896 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E897 03                                   inc bc
  91+ E898 03                                   inc bc				; D2=D2+2
  92+ E899 DD 25                                dec ixh				; Y=Y-1
  93+ E89B 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E89C 03                                   inc bc
  95+ E89D 13                                   inc de				; D1=D1+2
  96+ E89E 13                                   inc de
  97+ E89F DD 2C                                inc ixl				; X=X+1
  98+ E8A1 C3 41 E8                             jp .CircleLoop
  99+ E8A4 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8A8 3A 53 E7     .LineColour:	        ld		a,(l2_circle_colour)
 101+ E8AB 5F                                   ld      e,a
 102+ E8AC CD 62 E2                             call 	l2_draw_horz_line
 103+ E8AF F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8B3 C9                                   ret
 105+ E8B4
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1210  E8B4                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B4              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B4 08           l2_draw_any_line:       ex		af,af'
   3+ E8B5 79                                   ld		a,c
   4+ E8B6 BB                                   cp		e
   5+ E8B7 28 08                                jr		z,.HorizontalLine
   6+ E8B9 78                                   ld		a,b
   7+ E8BA BA                                   cp		d
   8+ E8BB 28 0A                                jr		z,.VerticalLine
   9+ E8BD              ; use jp and get a free ret instruction optimisation
  10+ E8BD 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8BE C3 0B E6                             jp		l2_draw_diagonal
  12+ E8C1
  13+ E8C1 08           .HorizontalLine:        ex		af,af'
  14+ E8C2 53                                   ld		d,e				; set d as target right pixel
  15+ E8C3 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C4 C3 8E E2                             jp		l2_draw_horz_line_to
  17+ E8C7 08           .VerticalLine:          ex		af,af'
  18+ E8C8 5F                                   ld		e,a				; e holds colour on this call
  19+ E8C9 C3 0D E3                             jp		l2_draw_vert_line_to
  20+ E8CC
  21+ E8CC
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1211  E8CC                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8CC              ; ClearLines (LL155)
   2+ E8CC              ;   y = 0
   3+ E8CC              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8CC              ;   exit if XX20 < 4
   5+ E8CC              ;   ++y
   6+ E8CC              ;   do
   7+ E8CC              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8CC              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8CC              ;		++y
  10+ E8CC              ;	until Y > XX20
  11+ E8CC
  12+ E8CC              clearLines:
  13+ E8CC              layer2_clearLines:
  14+ E8CC 3A F4 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8CF 47                                   ld		b,a
  16+ E8D0 21 02 C2                             ld		hl,UbnkLineArray
  17+ E8D3 C5           clearLinesLoop:         push	bc
  18+ E8D4 7E                                   ld		a,(hl)
  19+ E8D5 23                                   inc		hl
  20+ E8D6 4F                                   ld		c,a
  21+ E8D7 7E                                   ld		a,(hl)
  22+ E8D8 23                                   inc		hl
  23+ E8D9 47                                   ld		b,a
  24+ E8DA 7E                                   ld		a,(hl)
  25+ E8DB 23                                   inc		hl
  26+ E8DC 5F                                   ld		e,a
  27+ E8DD 7E                                   ld		a,(hl)
  28+ E8DE 23                                   inc		hl
  29+ E8DF 57                                   ld		d,a
  30+ E8E0 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E2 E5                                   push	hl
  32+ E8E3 CD B4 E8                             call    l2_draw_any_line
  33+ E8E6 E1                                   pop		hl
  34+ E8E7 C1                                   pop		bc
  35+ E8E8 10 E9                                djnz	clearLinesLoop
  36+ E8EA C9                                   ret
  37+ E8EB
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1212  E8EB                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8EB              ; ******************************************************************************
   2+ E8EB              ;
   3+ E8EB              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8EB              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8EB              ;
   6+ E8EB              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8EB              ;
   8+ E8EB              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8EB              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8EB              ;	before using line drawing.
  11+ E8EB              ;
  12+ E8EB              ;	The routine checks the range of specified coordinates which is the
  13+ E8EB              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8EB              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8EB              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8EB              ;	visible part will be drawn.
  17+ E8EB              ;
  18+ E8EB              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8EB              ;
  20+ E8EB              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8EB              ;
  22+ E8EB              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8EB              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8EB              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8EB              ;
  26+ E8EB              ;	OUT:	None.
  27+ E8EB              ;
  28+ E8EB              ;	Registers	used	by routine:
  29+ E8EB              ;		   N	:	B, loop counter
  30+ E8EB              ;		   i	:	line	balance variable
  31+ E8EB              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8EB              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8EB              ;	  (x0,y0)	:	(h,l)
  34+ E8EB              ;	  direc_x	:	d, horisontal step increment
  35+ E8EB              ;	  direc_y	:	e, vertical step increment
  36+ E8EB              ;		 ddx	:	b, horisontal step increment
  37+ E8EB              ;		 ddy	:	c, vertical step increment
  38+ E8EB              ;
  39+ E8EB              ;		DE, A work registers.
  40+ E8EB              ;
  41+ E8EB              ; The algorithm in pseudo-code:
  42+ E8EB              ;
  43+ E8EB              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8EB              ;	x = ABS x: y =	ABS y
  45+ E8EB              ;
  46+ E8EB              ;	if x	>= y
  47+ E8EB              ;		if x+y=0 then return
  48+ E8EB              ;		H = x
  49+ E8EB              ;		L = y
  50+ E8EB              ;		ddx = direc_x
  51+ E8EB              ;		ddy = 0
  52+ E8EB              ;	else
  53+ E8EB              ;		H = y
  54+ E8EB              ;		L = x
  55+ E8EB              ;		ddx = 0
  56+ E8EB              ;		ddy = direc_y
  57+ E8EB              ;	endif
  58+ E8EB              ;
  59+ E8EB              ;	B = H
  60+ E8EB              ;	i = INT(B/2)
  61+ E8EB              ;	FOR N=B TO 1 STEP -1
  62+ E8EB              ;		i = i + L
  63+ E8EB              ;		if i	< H
  64+ E8EB              ;			ix =	ddx
  65+ E8EB              ;			iy =	ddy
  66+ E8EB              ;		else
  67+ E8EB              ;			i = i - H
  68+ E8EB              ;			ix =	direc_x
  69+ E8EB              ;			iy =	direc_y
  70+ E8EB              ;		endif
  71+ E8EB              ;		x0 =	x0 +	ix
  72+ E8EB              ;		y0 =	y0 +	iy
  73+ E8EB              ;		plot	(x0,y0)
  74+ E8EB              ;	NEXT	N
  75+ E8EB              ;
  76+ E8EB              ;
  77+ E8EB              ;	Registers	changed after return:
  78+ E8EB              ;		..BCDEHL/IXIY/af......	same
  79+ E8EB              ;		AF....../..../..bcdehl	different
  80+ E8EB              ;
  81+ E8EB DF           line_gfx_colour db $DF
  82+ E8EC 00 00        line_gfx_coords	dw 0
  83+ E8EE              LineHLtoDE:
  84+ E8EE 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8EF FE C0                                cp	192
  86+ E8F1 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F3 7A                                   ld	a,d
  88+ E8F4 FE C0                                cp	192
  89+ E8F6 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8F8 22 EC E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8FB E5                                   push	hl
  92+ E8FC D5                                   push	de
  93+ E8FD 6C                                   ld	l,h				; L = x0
  94+ E8FE 62                                   ld	h,d				; H = x1
  95+ E8FF 7C           distanceX:		        ld	a,h
  96+ E900 95                                   sub	l
  97+ E901 6F                                   ld	l,a
  98+ E902 26 00                                ld	h,0
  99+ E904 30 02                                jr	nc, distanceXDone
 100+ E906 26 FF                                ld	h,-1
 101+ E908 D1           distanceXDone:          pop	de
 102+ E909 E3                                   ex	(sp),hl			; L = y0
 103+ E90A 63                                   ld	h,e				; H = y1
 104+ E90B 7C           distanceY:		        ld	a,h
 105+ E90C 95                                   sub	l
 106+ E90D 6F                                   ld	l,a
 107+ E90E 26 00                                ld	h,0
 108+ E910 30 02                                jr	nc, distanceYDone
 109+ E912 26 FF                                ld	h,-1
 110+ E914 D1           distanceYDone:          pop	de
 111+ E915 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E916 CD 1A E9                             call	DrawLineRelative			; draw line...
 113+ E919 C9           exit_line:              ret
 114+ E91A
 115+ E91A              ; ***************************************************************************
 116+ E91A              ;
 117+ E91A              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E91A              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E91A              ;
 120+ E91A              ; OUT: h - l distance in	HL
 121+ E91A              ;
 122+ E91A
 123+ E91A D5           DrawLineRelative:       push	de
 124+ E91B E5                                   push	hl
 125+ E91C D9                                   exx
 126+ E91D E1                                   pop	hl					; get relative	horisontal movement
 127+ E91E CD 89 E9                             call	sgn
 128+ E921 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E922 CD 96 E9                             call	absValue
 130+ E925 45                                   ld	b,l					; x = ABS(x)
 131+ E926 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E927 CD 89 E9                             call	sgn
 133+ E92A 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E92B CD 96 E9                             call	absValue
 135+ E92E 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E92F              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E92F C5                                   push	bc
 138+ E930 D9                                   exx
 139+ E931 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E932 7C                                   ld	a,h
 141+ E933 BD                                   cp	l
 142+ E934 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E936 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E937 28 4F                                jr	z, exit_draw		;		return
 145+ E939 D9           y_lessorequal_x:        exx						;	else
 146+ E93A 42                                   ld	b,d					;		ddx = direc_x
 147+ E93B 0E 00                                ld	c,0					;		ddy = 0
 148+ E93D D9                                   exx
 149+ E93E 18 08                                jr	init_drawloop		; else
 150+ E940 7C           x_smaller_y:	        ld	a,h
 151+ E941 65                                   ld	h,l					;	H = y
 152+ E942 6F                                   ld	l,a					;	L = x
 153+ E943 D9                                   exx
 154+ E944 06 00                                ld	b,0					;	ddx = 0
 155+ E946 4B                                   ld	c,e					;	ddy = direc_y
 156+ E947 D9                                   exx
 157+ E948 44           init_drawloop:	        ld	b,h
 158+ E949 4C                                   ld	c,h					; B = H
 159+ E94A CB 39                                srl	c					; i = INT(B/2)
 160+ E94C              										; FOR N=B	TO 1	STEP	-1
 161+ E94C 79           drawloop:		        ld	a,c
 162+ E94D 85                                   add	a,l
 163+ E94E 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E950 BC                                   cp	h
 165+ E951 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E953 4F                                   ld	c,a					;		i = i + L
 167+ E954 D9                                   exx
 168+ E955 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E956 D9                                   exx
 170+ E957 18 05                                jr	check_plot			;	else
 171+ E959 94           i_greater:		        sub	h					;		i = i - H
 172+ E95A 4F                                   ld	c,a
 173+ E95B D9                                   exx
 174+ E95C D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E95D D9                                   exx						;	endif
 176+ E95E E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E95F EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E960 2A EC E8                             ld	hl,(line_gfx_coords)
 179+ E963 7D                                   ld	a,l
 180+ E964 83                                   add	a,e					;
 181+ E965 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E966 7A                                   ld	a,d
 183+ E967 3C                                   inc	a
 184+ E968 84                                   add	a,h
 185+ E969 38 04                                jr	c, check_range		;	check out	of range
 186+ E96B 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E96D 18 02                                jr	plot_point
 188+ E96F 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E971
 190+ E971 3D           plot_point:             dec	a
 191+ E972 C5                                   push	bc
 192+ E973 F5                                   push	af
 193+ E974 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E975 4D                                   ld		c,l
 195+ E976 3A EB E8                             ld		a,(line_gfx_colour)
 196+ E979 ED 43 EC E8                          ld      (line_gfx_coords),bc
 197+ E97D CD FF E0                             call	l2_plot_pixel
 197+ E980
 198+ E980 F1                                   pop		af
 199+ E981 C1                                   pop		bc
 200+ E982 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E983 10 C7                                djnz	drawloop		; NEXT N
 202+ E985 18 01                                jr	exit_draw
 203+ E987
 204+ E987 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E988 C9           exit_draw:		        ret
 206+ E989
 207+ E989
 208+ E989              ; ******************************************************************************
 209+ E989              ;
 210+ E989              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E989              ;
 212+ E989              ;	IN:		HL =	integer
 213+ E989              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E989              ;
 215+ E989              ;	Registers	changed after return:
 216+ E989              ;	..BCDEHL/IXIY	same
 217+ E989              ;	AF....../....	different
 218+ E989              ;
 219+ E989 7C           sgn:				    ld	a,h
 220+ E98A B5                                   or	l
 221+ E98B C8                                   ret	z				; integer	is zero, return 0...
 222+ E98C CB 7C                                bit	7,h
 223+ E98E 20 03                                jr	nz, negative_int
 224+ E990 3E 01                                ld	a,1
 225+ E992 C9                                   ret
 226+ E993 3E FF        negative_int:		    ld	a,-1
 227+ E995 C9                                   ret
 228+ E996
 229+ E996
 230+ E996              ; ******************************************************************************
 231+ E996              ;
 232+ E996              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E996              ;
 234+ E996              ;	IN:		HL =	integer
 235+ E996              ;	OUT:		HL =	converted	integer
 236+ E996              ;
 237+ E996              ;	Registers	changed after return:
 238+ E996              ;	A.BCDE../IXIY	same
 239+ E996              ;	.F....HL/....	different
 240+ E996              ;
 241+ E996 CB 7C        absValue:			    bit	7,h
 242+ E998 C8                                   ret	z				; integer	is positive...
 243+ E999 D5                                   push	de
 244+ E99A EB                                   ex	de,hl
 245+ E99B 21 00 00                             ld	hl,0
 246+ E99E BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E99F ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9A1 D1                                   pop	de
 249+ E9A2 C9                                   ret
 250+ E9A3
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1213  E9A3              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1214  E9A3                  SLOT    CMDRDATAAddr
1215  E9A3                  PAGE    BankCmdrData
1216  E9A3                  ORG     CMDRDATAAddr, BankCmdrData
1217  E000                  INCLUDE "./Commander/CommanderData.asm"
# file opened: ./Commander/CommanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 E2 92     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 EE 92                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 EC 92                             ld		(PresentSystemX),a
  19+ E03A 32 39 93                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 ED 92                             ld		(PresentSystemY),a
  22+ E042 32 3A 93                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 EB 91                             ld		hl,IndexedWork
  25+ E048 CD 80 96                             call	copy_galaxy_to_system
  26+ E04B CD 40 97                             call	find_present_system
  27+ E04E CD A3 96                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 0D 96                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 0F 96                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 11 96                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 F5 92                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 28 96                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 32 96                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 EB 92                             ld		(VarTP),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 13 96                             ld		(LaserList+1),a
  48+ E080 32 14 96                             ld		(LaserList+2),a
  49+ E083 32 15 96                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 12 96                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 2B 96                             ld		(ECMPresent),a
  54+ E08F 32 42 96                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 2E 96                             ld		(EnergyBomb),a
  56+ E095 32 2F 96                             ld		(ExtraEnergyUnit),a
  57+ E098 32 30 96                             ld		(DockingComputer),a
  58+ E09B 32 31 96                             ld		(GalacticHyperDrive),a
  59+ E09E 32 2D 96                             ld		(EscapePod),a
  60+ E0A1 32 FE 92                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 11 93                             ld		(KillTally),a
  62+ E0A7 32 DD 91                             ld      (OuterHyperCount),a
  63+ E0AA 32 DC 91                             ld      (InnerHyperCount),a
  64+ E0AD 3D                                   dec		a								; now a = 255
  65+ E0AE 32 15 93                             ld		(ForeShield),a
  66+ E0B1 32 16 93                             ld		(AftShield),a
  67+ E0B4 32 17 93                             ld		(PlayerEnergy),a
  68+ E0B7 3E 14                                ld		a,20
  69+ E0B9 32 16 96                             ld		(CargoBaySize),a
  70+ E0BC CD C0 E0                             call	ZeroCargo						; Clear out cargo
  71+ E0BF                                      ; more to DO
  72+ E0BF C9                                   ret
  73+ E0C0
# file closed: ./Commander/CommanderData.asm
1218  E0C0                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0C0              ZeroCargo:
   2+ E0C0 AF           		xor		a							;zero-out cargo, including gems.
   3+ E0C1 06 10        		ld		b,16						;all the way up to alien items
   4+ E0C3 21 18 96     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C6              .ZeroLoop:
   6+ E0C6 77                   ld      (hl),a
   7+ E0C7 23           		inc		hl
   8+ E0C8 10 FC        		djnz	.ZeroLoop
   9+ E0CA C9           		ret
  10+ E0CB
# file closed: ./Commander/zero_player_cargo.asm
1219  E0CB              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1220  E0CB                  SLOT    LAYER1Addr
1221  E0CB                  PAGE    BankLAYER1
1222  E0CB                  ORG     LAYER1Addr, BankLAYER1
1223  E000
1224  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 8B 8E                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1225  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 8B 8E                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 8B 8E                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 8B 8E                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F CD 8B 8E                             call    memfill_dma
  24+ E072
  25+ E072              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  26+ E072 1E 00        l1_cls_2_lines_d:       ld      e,0
  27+ E074 ED 94                                pixelad
  28+ E076 11 00 02                             ld      de,32 * 16
  29+ E079 CD 8B 8E                             call    memfill_dma
  30+ E07C
  31+ E07C AF           l1_cls:                 xor		a
  32+ E07D 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  33+ E080 11 00 18                             ld		de, $1800
  34+ E083 CD 8B 8E                             call	memfill_dma
  35+ E086 C9                                   ret
  36+ E087
  37+ E087 AF           l1_attr_cls:            xor		a
  38+ E088 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  39+ E08B 11 00 03                             ld		de, $0300
  40+ E08E CD 8B 8E                             call	memfill_dma
  41+ E091 C9                                   ret
  42+ E092
  43+ E092 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  44+ E095 ED 79                                out		(c),a
  45+ E097 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1226  E098                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E098              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E098 D5 E5        l1_print_char:          push	de,,hl
   3+ E09A ED 94                                pixelad								; hl = address of de
   4+ E09C E5                                   push	hl							; save hl for loop
   5+ E09D 26 00                                ld		h,0
   6+ E09F 6F                                   ld		l,a
   7+ E0A0 29                                   add		hl,hl						; * 2
   8+ E0A1 29                                   add		hl,hl						; * 4
   9+ E0A2 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0A3 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0A7 EB                                   ex		de,hl						; save address into de
  12+ E0A8 E1                                   pop		hl							; get back hl for loop
  13+ E0A9 06 08                                ld		b,8							; do 8 rows
  14+ E0AB 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0AC 13                                   inc		de							; next byte
  16+ E0AD 77                                   ld		(hl),a						; poke to screen
  17+ E0AE ED 93                                pixeldn								; Down 1 row
  18+ E0B0 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0B2 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0B4 C9                                   ret
  21+ E0B5
  22+ E0B5              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0B5              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0B5              l1_print_at:
  25+ E0B5 7E           .PrintLoop:             ld		a,(hl)
  26+ E0B6 FE 00                                cp		0
  27+ E0B8 C8                                   ret		z
  28+ E0B9                                      CallIfAGTENusng " ", l1_print_char
  28+ E0B9 FE 20       >                        cp      " "
  28+ E0BB D4 98 E0    >                        call	nc,l1_print_char
  29+ E0BE 23                                   inc		hl							; move 1 message character right
  30+ E0BF 7B                                   ld		a,e
  31+ E0C0 C6 08                                add		a,8
  32+ E0C2 5F                                   ld		e,a							; move 1 screen character right
  33+ E0C3 18 F0                                jr		.PrintLoop
  34+ E0C5              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0C5 C9                                   ret
  36+ E0C6
  37+ E0C6              ;l1_print_at_wrap:
  38+ E0C6              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0C6              ;	ld      iyh,e
  40+ E0C6              ;.PrintLoop:
  41+ E0C6              ;	ld		a,(hl)
  42+ E0C6              ;	cp		0
  43+ E0C6              ;	ret		z
  44+ E0C6              ;.CountWordCharLen
  45+ E0C6              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0C6              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0C6              ;; if that is > 238 then force a premature line wrap
  48+ E0C6              ;
  49+ E0C6              ;
  50+ E0C6              ;    push    iy
  51+ E0C6              ;    call	l1_print_char
  52+ E0C6              ;    pop     iy
  53+ E0C6              ;	inc		hl							; move 1 message character right
  54+ E0C6              ;	ld		a,e
  55+ E0C6              ;    cp      238
  56+ E0C6              ;    jr      nc,.NextLine
  57+ E0C6              ;	add		a,8
  58+ E0C6              ;	ld		e,a							; move 1 screen character right
  59+ E0C6              ;	jr		.PrintLoop
  60+ E0C6              ;.Clearstackandfinish:
  61+ E0C6              ;	pop		de
  62+ E0C6              ;	ret
  63+ E0C6              ;.NextLine:
  64+ E0C6              ;    ld      a,(hl)
  65+ E0C6              ;    cp      " "
  66+ E0C6              ;    ld      e,iyh
  67+ E0C6              ;    ld      a,d
  68+ E0C6              ;    add     a,8
  69+ E0C6              ;    ld      d,a
  70+ E0C6              ;    jr		.PrintLoop
  71+ E0C6
  72+ E0C6              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0C6 E5           L1LenWordAtHL:          push    hl
  74+ E0C7 D5                                   push    de
  75+ E0C8 7E           .CountLoop:             ld      a,(hl)
  76+ E0C9 FE 00                                cp      0
  77+ E0CB 28 0F                                jr      z,.CountDone
  78+ E0CD FE 20                                cp      32
  79+ E0CF 28 0B                                jr      z,.CountDone
  80+ E0D1 7B                                   ld      a,e
  81+ E0D2 C6 08                                add     a,8
  82+ E0D4 5F                                   ld      e,a
  83+ E0D5 FE EE                                cp      238
  84+ E0D7 30 07                                jr      nc,.TooLong
  85+ E0D9 23                                   inc     hl
  86+ E0DA 18 EC                                jr      .CountLoop
  87+ E0DC D1           .CountDone:             pop     de
  88+ E0DD E1                                   pop     hl
  89+ E0DE AF                                   xor     a
  90+ E0DF C9                                   ret
  91+ E0E0 D1           .TooLong                pop     de
  92+ E0E1 E1                                   pop     hl
  93+ E0E2 3E FF                                ld      a,$FF
  94+ E0E4 C9                                   ret
  95+ E0E5
  96+ E0E5 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0E6 FE 00                                cp      0
  98+ E0E8 C8                                   ret     z
  99+ E0E9 FE 20                                cp      32
 100+ E0EB 28 0F                                jr      z,.ItsASpace
 101+ E0ED FD E5                                push    iy
 102+ E0EF CD 98 E0                             call	l1_print_char
 103+ E0F2 FD E1                                pop     iy
 104+ E0F4 7B                                   ld      a,e
 105+ E0F5 C6 08                                add     a,8
 106+ E0F7 5F                                   ld      e,a
 107+ E0F8 23                                   inc     hl
 108+ E0F9 C3 E5 E0                             jp      L1PrintWordAtHL
 109+ E0FC 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E0FD 7B                                   ld      a,e
 111+ E0FE C6 08                                add     a,8
 112+ E100 5F                                   ld      e,a
 113+ E101 C9                                   ret
 114+ E102
 115+ E102
 116+ E102              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E102              ; Now has full word level wrapping
 118+ E102 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E104 7E           .PrintLoop:             ld		a,(hl)
 120+ E105 FE 00                                cp		0
 121+ E107 C8                                   ret		z
 122+ E108 CD C6 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E10B FE FF                                cp      $FF
 124+ E10D 28 06                                jr      z,.WrapNextLine
 125+ E10F CD E5 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E112              ; Need to change to word wrap, so it will loop through string as before
 127+ E112              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E112              ; if that is > 238 then force a premature line wrap
 129+ E112 18 F0                                jr		.PrintLoop
 130+ E114              .Clearstackandfinish:   ;op		de
 131+ E114 C9                                   ret
 132+ E115              .WrapNextLine:
 133+ E115 FD 5C        .NextLine:              ld      e,iyh
 134+ E117 7A                                   ld      a,d
 135+ E118 C6 08                                add     a,8
 136+ E11A 57                                   ld      d,a
 137+ E11B 18 E7                                jr		.PrintLoop
 138+ E11D
 139+ E11D
# file closed: ./Layer1Graphics/layer1_print_at.asm
1227  E11D              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1228  E11D              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1229  E11D              ; as the is aligned and data tables are after that
1230  E11D              ; need to make the ship index tables same size in each to simplify further
1231  E11D                  SLOT    ShipModelsAddr
1232  E11D                  PAGE    BankShipModels1
1233  E11D              	ORG     ShipModelsAddr, BankShipModels1
1234  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyShipIdToUniverse:  MACRO
  96+ E000 ~                                    call        GetShipModelId
  97+ E000 ~                                    MMUSelectShipBankA
  98+ E000 ~                                    ld          a,b
  99+ E000 ~                                    jp          CopyShipToUniverse
 100+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1235  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1236  E00F              GetShipBankId:
1237  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1237  E00F 06 00       >                        ld      b,0
1237  E011 4F          >                        ld      c,a                                 ; c= original ship id
1237  E012 CB 3F       >.ShiftLoop:             srl     a
1237  E014 CB 3F       >                        srl     a
1237  E016 CB 3F       >                        srl     a
1237  E018 CB 3F       >                        srl     a                                   ; divide by 16
1237  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1237  E01B 79          >                        ld      a,c
1237  E01C 50          >                        ld      d,b
1237  E01D 1E 10       >                        ld      e,16
1237  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1237  E021 93          >                        sub     e                                   ; a= actual model id now
1237  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1237  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1237  E024 7A          >                        ld      a,d                                 ; a = bank number
1237  E025             >;.. Now b = bank and a = adjusted ship nbr
1237  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1237  E028 ED 31       >                        add     hl,a
1237  E02A ED 31       >                        add     hl,a
1237  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1237  E02D             >                        ClearCarryFlag
1237  E02D B7          >                    or a
1237  E02E C9          >                        ret
1238  E02F              CopyVertsToUniv:
1239  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1239  E02F 2A 16 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1239  E032 11 1A C3    >                        ld          de,UBnkHullVerticies
1239  E035 06 00       >                        ld          b,0
1239  E037 3A 0A C3    >                        ld			a,(VertexCtX6Addr)
1239  E03A 4F          >                        ld          c,a
1239  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1239  E03C CD B1 8E    >                        call        memcopy_dma
1239  E03F C9          >                        ret
1240  E040              CopyEdgesToUniv:
1241  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1241  E040 2A 05 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1241  E043 11 46 C4    >                        ld          de,UBnkHullEdges
1241  E046 06 00       >                        ld          b,0
1241  E048 3A 07 C3    >                        ld			a,(LineX4Addr)
1241  E04B 4F          >                        ld          c,a
1241  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1241  E04D CD B1 8E    >                        call        memcopy_dma
1241  E050 C9          >                        ret
1242  E051              CopyNormsToUniv:
1243  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1243  E051 2A 12 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1243  E054 11 F6 C8    >                        ld          de,UBnkHullNormals
1243  E057 06 00       >                        ld          b,0
1243  E059 3A 0E C3    >                        ld          a,(FaceCtX4Addr)
1243  E05C 4F          >                        ld          c,a
1243  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1243  E05E CD B1 8E    >                        call        memcopy_dma
1243  E061 C9          >                        ret
1244  E062              ShipBankTable:
1245  E062              ShipBankTable1:         MShipBankTable
1245  E062 3B 00       >                        DW      BankShipModels1
1245  E064 43 00       >                        DW      BankShipModels2
1245  E066 44 00       >                        DW      BankShipModels3
1245  E068 45 00       >                        DW      BankShipModels4
1246  E06A              CopyShipToUniverse:
1247  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1247  E06A 21 00 C3    >                        ld          hl,UBnkShipModelBank
1247  E06D 36 3B       >                        ld          (hl),BankShipModels1
1247  E06F 32 01 C3    >                        ld          (UBnkShipModelNbr),a
1247  E072 21 19 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1247  E075 ED 31       >                        add         hl,a
1247  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1247  E079 4E          >                        ld          c,(hl)
1247  E07A 23          >                        inc         hl
1247  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1247  E07C 21 99 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1247  E07F ED 31       >                        add         hl,a
1247  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1247  E083 7E          >                        ld          a,(hl)
1247  E084 23          >                        inc         hl
1247  E085 66          >                        ld          h,(hl)
1247  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1247  E087 11 02 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1247  E08A 01 18 00    >                        ld          bc,ShipDataLength
1247  E08D ED B0       >                        ldir
1247  E08F CD 2F E0    >                        call        CopyVertsToUniv
1247  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1247  E095 CD 51 E0    >                        call        CopyNormsToUniv
1247  E098 C9          >                        ret
1248  E099                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E099              ShipModelTable:
   2+ E099 39 E1        ShipModelTable1:         DW Adder                                   ;00
   3+ E09B 6D E2                                 DW Anaconda                                ;01
   4+ E09D 73 E3                                 DW Asp_Mk_2                                ;02
   5+ E09F 9D E4                                 DW Asteroid                                ;03
   6+ E0A1 77 E5                                 DW Boa                                     ;04
   7+ E0A3 6D E6                                 DW Boulder                                 ;05
   8+ E0A5 13 E7                                 DW Bushmaster                              ;06
   9+ E0A7 E3 E7                                 DW CargoType5                              ;07
  10+ E0A9 8F E8                                 DW Chameleon                               ;08
  11+ E0AB BB E9                                 DW CobraMk3                                ;09
  12+ E0AD 47 EB                                 DW Cobra_Mk_1                              ;10
  13+ E0AF 11 EC                                 DW Cobra_Mk_3_P                            ;11
  14+ E0B1 9D ED                                 DW Constrictor                             ;12
  15+ E0B3 A3 EE                                 DW Coriolis                                ;13
  16+ E0B5 C3 EF                                 DW Cougar                                  ;14
  17+ E0B7 C9 F0                                 DW Dodo                                    ;15
  18+ E0B9              ShipVertexTable:
  19+ E0B9 51 E1        ShipVertexTable1:        DW AdderVertices
  20+ E0BB 85 E2                                 DW AnacondaVertices
  21+ E0BD 8B E3                                 DW Asp_Mk_2Vertices
  22+ E0BF B5 E4                                 DW AsteroidVertices
  23+ E0C1 8F E5                                 DW BoaVertices
  24+ E0C3 85 E6                                 DW BoulderVertices
  25+ E0C5 2B E7                                 DW BushmasterVertices
  26+ E0C7 FB E7                                 DW CargoType5Vertices
  27+ E0C9 A7 E8                                 DW ChameleonVertices
  28+ E0CB D3 E9                                 DW CobraMk3Vertices
  29+ E0CD 5F EB                                 DW Cobra_Mk_1Vertices
  30+ E0CF 29 EC                                 DW Cobra_Mk_3_PVertices
  31+ E0D1 B5 ED                                 DW ConstrictorVertices
  32+ E0D3 BB EE                                 DW CoriolisVertices
  33+ E0D5 DB EF                                 DW CougarVertices
  34+ E0D7 E1 F0                                 DW DodoVertices
  35+ E0D9              ShipEdgeTable:
  36+ E0D9 BD E1        ShipEdgeTable1:          DW AdderEdges
  37+ E0DB DF E2                                 DW AnacondaEdges
  38+ E0DD FD E3                                 DW Asp_Mk_2Edges
  39+ E0DF EB E4                                 DW AsteroidEdges
  40+ E0E1 DD E5                                 DW BoaEdges
  41+ E0E3 AF E6                                 DW BoulderEdges
  42+ E0E5 73 E7                                 DW BushmasterEdges
  43+ E0E7 37 E8                                 DW CargoType5Edges
  44+ E0E9 13 E9                                 DW ChameleonEdges
  45+ E0EB 7B EA                                 DW CobraMk3Edges
  46+ E0ED A1 EB                                 DW Cobra_Mk_1Edges
  47+ E0EF D1 EC                                 DW Cobra_Mk_3_PEdges
  48+ E0F1 1B EE                                 DW ConstrictorEdges
  49+ E0F3 1B EF                                 DW CoriolisEdges
  50+ E0F5 4D F0                                 DW CougarEdges
  51+ E0F7 71 F1                                 DW DodoEdges
  52+ E0F9              ShipNormalTable:
  53+ E0F9 31 E2        ShipNormalTable1:        DW AdderNormals
  54+ E0FB 43 E3                                 DW AnacondaNormals
  55+ E0FD 6D E4                                 DW Asp_Mk_2Normals
  56+ E0FF 3F E5                                 DW AsteroidNormals
  57+ E101 3D E6                                 DW BoaNormals
  58+ E103 EB E6                                 DW BoulderNormals
  59+ E105 BF E7                                 DW BushmasterNormals
  60+ E107 73 E8                                 DW CargoType5Normals
  61+ E109 87 E9                                 DW ChameleonNormals
  62+ E10B 13 EB                                 DW CobraMk3Normals
  63+ E10D E9 EB                                 DW Cobra_Mk_1Normals
  64+ E10F 69 ED                                 DW Cobra_Mk_3_PNormals
  65+ E111 7B EE                                 DW ConstrictorNormals
  66+ E113 8B EF                                 DW CoriolisNormals
  67+ E115 B1 F0                                 DW CougarNormals
  68+ E117 F9 F1                                 DW DodoNormals
  69+ E119              ShipModelSizeTable:
  70+ E119 34 01        ShipModelSizeTable1:     DW AdderLen
  71+ E11B 06 01                                 DW AnacondaLen
  72+ E11D 2A 01                                 DW Asp_Mk_2Len
  73+ E11F DA 00                                 DW AsteroidLen
  74+ E121 F6 00                                 DW BoaLen
  75+ E123 A6 00                                 DW BoulderLen
  76+ E125 D0 00                                 DW BushmasterLen
  77+ E127 AC 00                                 DW CargoType5Len
  78+ E129 2C 01                                 DW ChameleonLen
  79+ E12B 8C 01                                 DW CobraMk3Len
  80+ E12D CA 00                                 DW Cobra_Mk_1Len
  81+ E12F 8C 01                                 DW Cobra_Mk_3_PLen
  82+ E131 06 01                                 DW ConstrictorLen
  83+ E133 20 01                                 DW CoriolisLen
  84+ E135 06 01                                 DW CougarLen
  85+ E137 60 01                                 DW DodoLen
  86+ E139
  87+ E139                                      include "Data/Ships/Adder.asm"
# file opened: ./Data/Ships/Adder.asm
   1++E139 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E13C BD E1                                DW AdderEdges
   3++E13E 74                                   DB AdderEdgesSize
   4++E13F 00 16                                DB $00, $16
   5++E141 6C                                   DB AdderVertSize
   6++E142 1D                                   DB AdderEdgesCnt
   7++E143 00 28                                DB $00, $28
   8++E145 3C                                   DB AdderNormalsSize
   9++E146 17 48 18                             DB $17, $48, $18
  10++E149 31 E2                                DW AdderNormals
  11++E14B 02 21                                DB $02, $21
  12++E14D 51 E1                                DW AdderVertices
  13++E14F 00 00                                DB 0,0                      ; Type and Tactics
  14++E151 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC
  14++E155 01 BC
  15++E157 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23
  15++E15B 01 23
  16++E15D 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45
  16++E161 23 45
  17++E163 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66
  17++E167 45 66
  18++E169 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E
  18++E16D 56 7E
  19++E16F 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE
  19++E173 78 AE
  20++E175 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA
  20++E179 89 AA
  21++E17B 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC
  21++E17F 9A BC
  22++E181 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D
  22++E185 78 9D
  23++E187 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D
  23++E18B 46 7D
  24++E18D 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD
  24++E191 09 BD
  25++E193 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D
  25++E197 02 4D
  26++E199 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE
  26++E19D 1A CE
  27++E19F 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E
  27++E1A3 13 5E
  28++E1A5 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00
  28++E1A9 00 00
  29++E1AB 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00
  29++E1AF 00 00
  30++E1B1 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00
  30++E1B5 00 00
  31++E1B7 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00
  31++E1BB 00 00
  32++E1BD              AdderVertSize:          equ $ - AdderVertices
  33++E1BD 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04
  34++E1C1 07 23 04 08                          DB $07, $23, $04, $08
  35++E1C5 1F 45 08 0C                          DB $1F, $45, $08, $0C
  36++E1C9 1F 56 0C 10                          DB $1F, $56, $0C, $10
  37++E1CD 1F 7E 10 14                          DB $1F, $7E, $10, $14
  38++E1D1 1F 8A 14 18                          DB $1F, $8A, $14, $18
  39++E1D5 1F 9A 18 1C                          DB $1F, $9A, $18, $1C
  40++E1D9 07 BC 1C 00                          DB $07, $BC, $1C, $00
  41++E1DD 1F 46 0C 24                          DB $1F, $46, $0C, $24
  42++E1E1 1F 7D 24 20                          DB $1F, $7D, $24, $20
  43++E1E5 1F 89 20 18                          DB $1F, $89, $20, $18
  44++E1E9 1F 0B 00 28                          DB $1F, $0B, $00, $28
  45++E1ED 1F 9B 1C 28                          DB $1F, $9B, $1C, $28
  46++E1F1 1F 02 04 2C                          DB $1F, $02, $04, $2C
  47++E1F5 1F 24 08 2C                          DB $1F, $24, $08, $2C
  48++E1F9 1F 1C 00 30                          DB $1F, $1C, $00, $30
  49++E1FD 1F AC 1C 30                          DB $1F, $AC, $1C, $30
  50++E201 1F 13 04 34                          DB $1F, $13, $04, $34
  51++E205 1F 35 08 34                          DB $1F, $35, $08, $34
  52++E209 1F 0D 28 2C                          DB $1F, $0D, $28, $2C
  53++E20D 1F 1E 30 34                          DB $1F, $1E, $30, $34
  54++E211 1F 9D 20 28                          DB $1F, $9D, $20, $28
  55++E215 1F 4D 24 2C                          DB $1F, $4D, $24, $2C
  56++E219 1F AE 14 30                          DB $1F, $AE, $14, $30
  57++E21D 1F 5E 10 34                          DB $1F, $5E, $10, $34
  58++E221 05 00 38 3C                          DB $05, $00, $38, $3C
  59++E225 03 00 3C 40                          DB $03, $00, $3C, $40
  60++E229 04 00 40 44                          DB $04, $00, $40, $44
  61++E22D 03 00 44 38                          DB $03, $00, $44, $38
  62++E231              AdderEdgesSize:         equ $ - AdderEdges
  63++E231              AdderEdgesCnt:          equ AdderEdgesSize/4
  64++E231 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A
  65++E235 5F 00 27 0A                          DB $5F, $00, $27, $0A
  66++E239 1F 45 32 0D                          DB $1F, $45, $32, $0D
  67++E23D 5F 45 32 0D                          DB $5F, $45, $32, $0D
  68++E241 1F 1E 34 00                          DB $1F, $1E, $34, $00
  69++E245 5F 1E 34 00                          DB $5F, $1E, $34, $00
  70++E249 3F 00 00 A0                          DB $3F, $00, $00, $A0
  71++E24D 3F 00 00 A0                          DB $3F, $00, $00, $A0
  72++E251 3F 00 00 A0                          DB $3F, $00, $00, $A0
  73++E255 9F 1E 34 00                          DB $9F, $1E, $34, $00
  74++E259 DF 1E 34 00                          DB $DF, $1E, $34, $00
  75++E25D 9F 45 32 0D                          DB $9F, $45, $32, $0D
  76++E261 DF 45 32 0D                          DB $DF, $45, $32, $0D
  77++E265 1F 00 1C 00                          DB $1F, $00, $1C, $00
  78++E269 5F 00 1C 00                          DB $5F, $00, $1C, $00
  79++E26D
  80++E26D              AdderNormalsSize:       equ $ - AdderNormals
  81++E26D              AdderLen:                equ $ - Adder
  82++E26D
# file closed: ./Data/Ships/Adder.asm
  88+ E26D                                      include "Data/Ships/Anaconda.asm"
# file opened: ./Data/Ships/Anaconda.asm
   1++E26D 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E270 DF E2                                DW AnacondaEdges
   3++E272 64                                   DB AnacondaEdgesSize
   4++E273 30 2E                                DB $30, $2E
   5++E275 5A                                   DB AnacondaVertSize
   6++E276 19                                   DB AnacondaEdgesCnt
   7++E277 00 00                                DB $00, $00
   8++E279 30                                   DB AnacondaNormalsSize
   9++E27A 24 FC 0E                             DB $24, $FC, $0E
  10++E27D 43 E3                                DW AnacondaNormals
  11++E27F 01 3F                                DB $01, $3F
  12++E281 85 E2                                DW AnacondaVertices
  13++E283 00 00                                DB 0,0                      ; Type and Tactics
  14++E285 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55
  14++E289 01 55
  15++E28B 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22
  15++E28F 01 22
  16++E291 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33
  16++E295 02 33
  17++E297 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44
  17++E29B 03 44
  18++E29D 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55
  18++E2A1 04 55
  19++E2A3 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66
  19++E2A7 15 66
  20++E2A9 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77
  20++E2AD 12 77
  21++E2AF 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88
  21++E2B3 23 88
  22++E2B5 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99
  22++E2B9 34 99
  23++E2BB 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA
  23++E2BF 45 AA
  24++E2C1 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF
  24++E2C5 FF FF
  25++E2C7 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88
  25++E2CB 27 88
  26++E2CD 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF
  26++E2D1 FF FF
  27++E2D3 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA
  27++E2D7 49 AA
  28++E2D9 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF
  28++E2DD FF FF
  29++E2DF              AnacondaVertSize:       equ $ - AnacondaVertices
  30++E2DF 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04
  31++E2E3 1E 02 04 08                          DB $1E, $02, $04, $08
  32++E2E7 1E 03 08 0C                          DB $1E, $03, $08, $0C
  33++E2EB 1E 04 0C 10                          DB $1E, $04, $0C, $10
  34++E2EF 1E 05 00 10                          DB $1E, $05, $00, $10
  35++E2F3 1D 15 00 14                          DB $1D, $15, $00, $14
  36++E2F7 1D 12 04 18                          DB $1D, $12, $04, $18
  37++E2FB 1D 23 08 1C                          DB $1D, $23, $08, $1C
  38++E2FF 1D 34 0C 20                          DB $1D, $34, $0C, $20
  39++E303 1D 45 10 24                          DB $1D, $45, $10, $24
  40++E307 1E 16 14 28                          DB $1E, $16, $14, $28
  41++E30B 1E 17 18 28                          DB $1E, $17, $18, $28
  42++E30F 1E 27 18 2C                          DB $1E, $27, $18, $2C
  43++E313 1E 28 1C 2C                          DB $1E, $28, $1C, $2C
  44++E317 1F 38 1C 30                          DB $1F, $38, $1C, $30
  45++E31B 1F 39 20 30                          DB $1F, $39, $20, $30
  46++E31F 1E 49 20 34                          DB $1E, $49, $20, $34
  47++E323 1E 4A 24 34                          DB $1E, $4A, $24, $34
  48++E327 1E 5A 24 38                          DB $1E, $5A, $24, $38
  49++E32B 1E 56 14 38                          DB $1E, $56, $14, $38
  50++E32F 1E 6B 28 38                          DB $1E, $6B, $28, $38
  51++E333 1F 7B 28 30                          DB $1F, $7B, $28, $30
  52++E337 1F 78 2C 30                          DB $1F, $78, $2C, $30
  53++E33B 1F 9A 30 34                          DB $1F, $9A, $30, $34
  54++E33F 1F AB 30 38                          DB $1F, $AB, $30, $38
  55++E343              AnacondaEdgesSize:      equ $ - AnacondaEdges
  56++E343              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  57++E343 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31
  58++E347 BE 33 12 57                          DB $BE, $33, $12, $57
  59++E34B FE 4D 39 13                          DB $FE, $4D, $39, $13
  60++E34F 5F 00 5A 10                          DB $5F, $00, $5A, $10
  61++E353 7E 4D 39 13                          DB $7E, $4D, $39, $13
  62++E357 3E 33 12 57                          DB $3E, $33, $12, $57
  63++E35B 3E 00 6F 14                          DB $3E, $00, $6F, $14
  64++E35F 9F 61 48 18                          DB $9F, $61, $48, $18
  65++E363 DF 6C 44 22                          DB $DF, $6C, $44, $22
  66++E367 5F 6C 44 22                          DB $5F, $6C, $44, $22
  67++E36B 1F 61 48 18                          DB $1F, $61, $48, $18
  68++E36F 1F 00 5E 12                          DB $1F, $00, $5E, $12
  69++E373              AnacondaNormalsSize:    equ $ - AnacondaNormals
  70++E373              AnacondaLen:            equ $ - Anaconda
  71++E373
# file closed: ./Data/Ships/Anaconda.asm
  89+ E373                                      include "Data/Ships/Asp_Mk_2.asm"
# file opened: ./Data/Ships/Asp_Mk_2.asm
   1++E373 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E376 FD E3                                DW Asp_Mk_2Edges
   3++E378 70                                   DB Asp_Mk_2EdgesSize
   4++E379 20 1A                                DB $20, $1A
   5++E37B 72                                   DB Asp_Mk_2VertSize
   6++E37C 1C                                   DB Asp_Mk_2EdgesCnt
   7++E37D 00 C8                                DB $00, $C8
   8++E37F 30                                   DB Asp_Mk_2NormalsSize
   9++E380 28 96 28                             DB $28, $96, $28
  10++E383 6D E4                                DW Asp_Mk_2Normals
  11++E385 01 29                                DB $01, $29
  12++E387 8B E3                                DW Asp_Mk_2Vertices
  13++E389 00 00                                DB 0,0                      ; Type and Tactics
  14++E38B 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22
  14++E38F 01 22
  15++E391 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB
  15++E395 12 BB
  16++E397 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB
  16++E39B 16 BB
  17++E39D 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79
  17++E3A1 16 79
  18++E3A3 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77
  18++E3A7 01 77
  19++E3A9 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB
  19++E3AD 25 BB
  20++E3AF 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A
  20++E3B3 25 8A
  21++E3B5 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88
  21++E3B9 02 88
  22++E3BB 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79
  22++E3BF 04 79
  23++E3C1 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A
  23++E3C5 04 8A
  24++E3C7 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69
  24++E3CB 34 69
  25++E3CD 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A
  25++E3D1 34 5A
  26++E3D3 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B
  26++E3D7 35 6B
  27++E3D9 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB
  27++E3DD BB BB
  28++E3DF 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB
  28++E3E3 BB BB
  29++E3E5 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB
  29++E3E9 BB BB
  30++E3EB 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB
  30++E3EF BB BB
  31++E3F1 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04
  31++E3F5 04 04
  32++E3F7 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  32++E3FB 04 04
  33++E3FD              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  34++E3FD 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04
  35++E401 16 01 00 10                          DB $16, $01, $00, $10
  36++E405 16 02 00 1C                          DB $16, $02, $00, $1C
  37++E409 1F 1B 04 08                          DB $1F, $1B, $04, $08
  38++E40D 1F 16 08 0C                          DB $1F, $16, $08, $0C
  39++E411 10 79 0C 20                          DB $10, $79, $0C, $20
  40++E415 1F 04 20 24                          DB $1F, $04, $20, $24
  41++E419 10 8A 18 24                          DB $10, $8A, $18, $24
  42++E41D 1F 25 14 18                          DB $1F, $25, $14, $18
  43++E421 1F 2B 04 14                          DB $1F, $2B, $04, $14
  44++E425 1F 17 0C 10                          DB $1F, $17, $0C, $10
  45++E429 1F 07 10 20                          DB $1F, $07, $10, $20
  46++E42D 1F 28 18 1C                          DB $1F, $28, $18, $1C
  47++E431 1F 08 1C 24                          DB $1F, $08, $1C, $24
  48++E435 1F 6B 08 30                          DB $1F, $6B, $08, $30
  49++E439 1F 5B 14 30                          DB $1F, $5B, $14, $30
  50++E43D 16 36 28 30                          DB $16, $36, $28, $30
  51++E441 16 35 2C 30                          DB $16, $35, $2C, $30
  52++E445 16 34 28 2C                          DB $16, $34, $28, $2C
  53++E449 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  54++E44D 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  55++E451 1F 69 0C 28                          DB $1F, $69, $0C, $28
  56++E455 1F 49 20 28                          DB $1F, $49, $20, $28
  57++E459 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  58++E45D 09 BB 3C 38                          DB $09, $BB, $3C, $38
  59++E461 08 BB 38 40                          DB $08, $BB, $38, $40
  60++E465 08 BB 40 34                          DB $08, $BB, $40, $34
  61++E469 0A 04 48 44                          DB $0A, $04, $48, $44
  62++E46D              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  63++E46D              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  64++E46D 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05
  65++E471 7F 08 26 07                          DB $7F, $08, $26, $07
  66++E475 FF 08 26 07                          DB $FF, $08, $26, $07
  67++E479 36 00 18 01                          DB $36, $00, $18, $01
  68++E47D 1F 00 2B 13                          DB $1F, $00, $2B, $13
  69++E481 BF 06 1C 02                          DB $BF, $06, $1C, $02
  70++E485 3F 06 1C 02                          DB $3F, $06, $1C, $02
  71++E489 5F 3B 40 1F                          DB $5F, $3B, $40, $1F
  72++E48D DF 3B 40 1F                          DB $DF, $3B, $40, $1F
  73++E491 1F 50 2E 32                          DB $1F, $50, $2E, $32
  74++E495 9F 50 2E 32                          DB $9F, $50, $2E, $32
  75++E499 3F 00 00 5A                          DB $3F, $00, $00, $5A
  76++E49D              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  77++E49D              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  78++E49D
# file closed: ./Data/Ships/Asp_Mk_2.asm
  90+ E49D                                      include "Data/Ships/Asteroid.asm"
# file opened: ./Data/Ships/Asteroid.asm
   1++E49D 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E4A0 EB E4                                DW AsteroidEdges
   3++E4A2 54                                   DB AsteroidEdgesSize
   4++E4A3 00 22                                DB $00, $22
   5++E4A5 36                                   DB AsteroidVertSize
   6++E4A6 15                                   DB AsteroidEdgesCnt
   7++E4A7 00 05                                DB $00, $05
   8++E4A9 38                                   DB AsteroidNormalsSize
   9++E4AA 32 3C 1E                             DB $32, $3C, $1E
  10++E4AD 3F E5                                DW AsteroidNormals
  11++E4AF 01 00                                DB $01, $00
  12++E4B1 B5 E4                                DW AsteroidVertices
  13++E4B3 00 00                                DB 0,0                      ; Type and Tactics
  14++E4B5 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF
  14++E4B9 FF FF
  15++E4BB 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  15++E4BF FF FF
  16++E4C1 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  16++E4C5 FF FF
  17++E4C7 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  17++E4CB FF FF
  18++E4CD 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  18++E4D1 65 DC
  19++E4D3 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  19++E4D7 FF FF
  20++E4D9 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  20++E4DD 10 32
  21++E4DF 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  21++E4E3 FF FF
  22++E4E5 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  22++E4E9 98 BA
  23++E4EB              AsteroidVertSize:       equ $ - AsteroidVertices
  24++E4EB 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04
  25++E4EF 1F D6 00 10                          DB $1F, $D6, $00, $10
  26++E4F3 1F C5 0C 10                          DB $1F, $C5, $0C, $10
  27++E4F7 1F B4 08 0C                          DB $1F, $B4, $08, $0C
  28++E4FB 1F A3 04 08                          DB $1F, $A3, $04, $08
  29++E4FF 1F 32 04 18                          DB $1F, $32, $04, $18
  30++E503 1F 31 08 18                          DB $1F, $31, $08, $18
  31++E507 1F 41 08 14                          DB $1F, $41, $08, $14
  32++E50B 1F 10 14 18                          DB $1F, $10, $14, $18
  33++E50F 1F 60 00 14                          DB $1F, $60, $00, $14
  34++E513 1F 54 0C 14                          DB $1F, $54, $0C, $14
  35++E517 1F 20 00 18                          DB $1F, $20, $00, $18
  36++E51B 1F 65 10 14                          DB $1F, $65, $10, $14
  37++E51F 1F A8 04 20                          DB $1F, $A8, $04, $20
  38++E523 1F 87 04 1C                          DB $1F, $87, $04, $1C
  39++E527 1F D7 00 1C                          DB $1F, $D7, $00, $1C
  40++E52B 1F DC 10 1C                          DB $1F, $DC, $10, $1C
  41++E52F 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C
  42++E533 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  43++E537 1F BA 08 20                          DB $1F, $BA, $08, $20
  44++E53B 1F 98 1C 20                          DB $1F, $98, $1C, $20
  45++E53F
  46++E53F              AsteroidEdgesSize:      equ $ - AsteroidEdges
  47++E53F              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  48++E53F 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51
  49++E543 5F 09 42 51                          DB $5F, $09, $42, $51
  50++E547 9F 48 40 1F                          DB $9F, $48, $40, $1F
  51++E54B DF 40 49 2F                          DB $DF, $40, $49, $2F
  52++E54F 5F 2D 4F 41                          DB $5F, $2D, $4F, $41
  53++E553 1F 87 0F 23                          DB $1F, $87, $0F, $23
  54++E557 1F 26 4C 46                          DB $1F, $26, $4C, $46
  55++E55B BF 42 3B 27                          DB $BF, $42, $3B, $27
  56++E55F FF 43 0F 50                          DB $FF, $43, $0F, $50
  57++E563 7F 42 0E 4B                          DB $7F, $42, $0E, $4B
  58++E567 FF 46 50 28                          DB $FF, $46, $50, $28
  59++E56B 7F 3A 66 33                          DB $7F, $3A, $66, $33
  60++E56F 3F 51 09 43                          DB $3F, $51, $09, $43
  61++E573 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F
  62++E577              AsteroidNormalsSize:    equ $ - AsteroidNormals
  63++E577              AsteroidLen:            equ $ - Asteroid
  64++E577
# file closed: ./Data/Ships/Asteroid.asm
  91+ E577                                      include "Data/Ships/Boa.asm"
# file opened: ./Data/Ships/Boa.asm
   1++E577 05 13 24     Boa:	                DB $05, $13, $24
   2++E57A DD E5                                DW BoaEdges
   3++E57C 60                                   DB BoaEdgesSize
   4++E57D 00 26                                DB $00, $26
   5++E57F 4E                                   DB BoaVertSize
   6++E580 18                                   DB BoaEdgesCnt
   7++E581 00 00                                DB $00, $00
   8++E583 30                                   DB BoaNormalsSize
   9++E584 28 FA 18                             DB $28, $FA, $18
  10++E587 3D E6                                DW BoaNormals
  11++E589 00 1C                                DB $00, $1C
  12++E58B 8F E5                                DW BoaVertices
  13++E58D 00 00                                DB 0,0                      ; Type and Tactics
  14++E58F 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  14++E593 FF FF
  15++E595 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  15++E599 02 33
  16++E59B 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  16++E59F 01 44
  17++E5A1 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  17++E5A5 12 55
  18++E5A7 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  18++E5AB 23 69
  19++E5AD 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  19++E5B1 03 6B
  20++E5B3 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  20++E5B7 04 8B
  21++E5B9 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  21++E5BD 14 8A
  22++E5BF 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  22++E5C3 15 7A
  23++E5C5 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  23++E5C9 25 79
  24++E5CB 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  24++E5CF 02 AA
  25++E5D1 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  25++E5D5 01 AA
  26++E5D7 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  26++E5DB 12 CC
  27++E5DD              BoaVertSize:            equ $ - BoaVertices
  28++E5DD 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  29++E5E1 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  30++E5E5 1F 79 00 24                          DB $1F, $79, $00, $24
  31++E5E9 1D 69 00 10                          DB $1D, $69, $00, $10
  32++E5ED 1D 8B 00 18                          DB $1D, $8B, $00, $18
  33++E5F1 1D 7A 00 20                          DB $1D, $7A, $00, $20
  34++E5F5 1F 36 10 14                          DB $1F, $36, $10, $14
  35++E5F9 1F 0B 14 18                          DB $1F, $0B, $14, $18
  36++E5FD 1F 48 18 1C                          DB $1F, $48, $18, $1C
  37++E601 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  38++E605 1F 57 20 24                          DB $1F, $57, $20, $24
  39++E609 1F 29 10 24                          DB $1F, $29, $10, $24
  40++E60D 18 23 04 10                          DB $18, $23, $04, $10
  41++E611 18 03 04 14                          DB $18, $03, $04, $14
  42++E615 18 25 0C 24                          DB $18, $25, $0C, $24
  43++E619 18 15 0C 20                          DB $18, $15, $0C, $20
  44++E61D 18 04 08 18                          DB $18, $04, $08, $18
  45++E621 18 14 08 1C                          DB $18, $14, $08, $1C
  46++E625 16 02 04 28                          DB $16, $02, $04, $28
  47++E629 16 01 08 2C                          DB $16, $01, $08, $2C
  48++E62D 16 12 0C 30                          DB $16, $12, $0C, $30
  49++E631 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  50++E635 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  51++E639 0E 2C 30 28                          DB $0E, $2C, $30, $28
  52++E63D              BoaEdgesSize:           equ $ - BoaEdges
  53++E63D              BoaEdgesCnt:            equ BoaEdgesSize/4
  54++E63D 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  55++E641 7F 00 2D 59                          DB $7F, $00, $2D, $59
  56++E645 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  57++E649 1F 00 28 00                          DB $1F, $00, $28, $00
  58++E64D 7F 3E 20 14                          DB $7F, $3E, $20, $14
  59++E651 FF 3E 20 14                          DB $FF, $3E, $20, $14
  60++E655 1F 00 17 06                          DB $1F, $00, $17, $06
  61++E659 DF 17 0F 09                          DB $DF, $17, $0F, $09
  62++E65D 5F 17 0F 09                          DB $5F, $17, $0F, $09
  63++E661 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  64++E665 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  65++E669 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  66++E66D              BoaNormalsSize:         equ $ - BoaNormals
  67++E66D              BoaLen:                 equ $ - Boa
  68++E66D
# file closed: ./Data/Ships/Boa.asm
  92+ E66D                                      include "Data/Ships/Boulder.asm"
# file opened: ./Data/Ships/Boulder.asm
   1++E66D 00 03 84     Boulder:	            DB $00, $03, $84
   2++E670 AF E6                                DW BoulderEdges
   3++E672 3C                                   DB BoulderEdgesSize
   4++E673 00 0E                                DB $00, $0E
   5++E675 2A                                   DB BoulderVertSize
   6++E676 0F                                   DB BoulderEdgesCnt
   7++E677 00 01                                DB $00, $01
   8++E679 28                                   DB BoulderNormalsSize
   9++E67A 14 14 1E                             DB $14, $14, $1E
  10++E67D EB E6                                DW BoulderNormals
  11++E67F 02 00                                DB $02, $00
  12++E681 85 E6                                DW BoulderVertices
  13++E683 00 00                                DB 0,0                      ; Type and Tactics
  14++E685 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  14++E689 01 59
  15++E68B 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  15++E68F 12 56
  16++E691 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  16++E695 23 67
  17++E697 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  17++E69B 34 78
  18++E69D 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  18++E6A1 04 89
  19++E6A3 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  19++E6A7 FF FF
  20++E6A9 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  20++E6AD FF FF
  21++E6AF              BoulderVertSize:        equ $ - BoulderVertices
  22++E6AF 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  23++E6B3 1F 26 04 08                          DB $1F, $26, $04, $08
  24++E6B7 1F 37 08 0C                          DB $1F, $37, $08, $0C
  25++E6BB 1F 48 0C 10                          DB $1F, $48, $0C, $10
  26++E6BF 1F 09 10 00                          DB $1F, $09, $10, $00
  27++E6C3 1F 01 00 14                          DB $1F, $01, $00, $14
  28++E6C7 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E6CB 1F 23 08 14                          DB $1F, $23, $08, $14
  30++E6CF 1F 34 0C 14                          DB $1F, $34, $0C, $14
  31++E6D3 1F 04 10 14                          DB $1F, $04, $10, $14
  32++E6D7 1F 59 00 18                          DB $1F, $59, $00, $18
  33++E6DB 1F 56 04 18                          DB $1F, $56, $04, $18
  34++E6DF 1F 67 08 18                          DB $1F, $67, $08, $18
  35++E6E3 1F 78 0C 18                          DB $1F, $78, $0C, $18
  36++E6E7 1F 89 10 18                          DB $1F, $89, $10, $18
  37++E6EB              BoulderEdgesSize:       equ $ - BoulderEdges
  38++E6EB              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  39++E6EB DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  40++E6EF 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  41++E6F3 5F 20 2F 18                          DB $5F, $20, $2F, $18
  42++E6F7 FF 03 27 07                          DB $FF, $03, $27, $07
  43++E6FB FF 05 04 01                          DB $FF, $05, $04, $01
  44++E6FF 1F 31 54 08                          DB $1F, $31, $54, $08
  45++E703 3F 70 15 15                          DB $3F, $70, $15, $15
  46++E707 7F 4C 23 52                          DB $7F, $4C, $23, $52
  47++E70B 3F 16 38 89                          DB $3F, $16, $38, $89
  48++E70F 3F 28 6E 26                          DB $3F, $28, $6E, $26
  49++E713              BoulderNormalsSize:     equ $ - BoulderNormals
  50++E713              BoulderLen:             equ $ - Boulder
  51++E713
# file closed: ./Data/Ships/Boulder.asm
  93+ E713                                      include "Data/Ships/Bushmaster.asm"
# file opened: ./Data/Ships/Bushmaster.asm
   1++E713 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E716 73 E7                                DW BushmasterEdges
   3++E718 4C                                   DB BushmasterEdgesSize
   4++E719 00 1E                                DB $00, $1E
   5++E71B 48                                   DB BushmasterVertSize
   6++E71C 13                                   DB BushmasterEdgesCnt
   7++E71D 00 96                                DB $00, $96
   8++E71F 24                                   DB BushmasterNormalsSize
   9++E720 14 4A 23                             DB $14, $4A, $23
  10++E723 BF E7                                DW BushmasterNormals
  11++E725 02 21                                DB $02, $21
  12++E727 2B E7                                DW BushmasterVertices
  13++E729 00 00                                DB 0,0                      ; Type and Tactics
  14++E72B 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  14++E72F 23 01
  15++E731 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  15++E735 57 13
  16++E737 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  16++E73B 46 02
  17++E73D 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  17++E741 45 01
  18++E743 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  18++E747 FF FF
  19++E749 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  19++E74D 88 45
  20++E74F 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  20++E753 88 57
  21++E755 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  21++E759 88 46
  22++E75B 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  22++E75F 88 88
  23++E761 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  23++E765 88 88
  24++E767 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  24++E76B 88 88
  25++E76D 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  25++E771 88 88
  26++E773              BushmasterVertSize:     equ $ - BushmasterVertices
  27++E773 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  28++E777 1F 02 00 08                          DB $1F, $02, $00, $08
  29++E77B 1F 01 00 0C                          DB $1F, $01, $00, $0C
  30++E77F 1F 23 00 10                          DB $1F, $23, $00, $10
  31++E783 1F 45 0C 14                          DB $1F, $45, $0C, $14
  32++E787 1F 04 08 0C                          DB $1F, $04, $08, $0C
  33++E78B 1F 15 04 0C                          DB $1F, $15, $04, $0C
  34++E78F 1F 46 08 1C                          DB $1F, $46, $08, $1C
  35++E793 1F 57 04 18                          DB $1F, $57, $04, $18
  36++E797 1F 26 08 10                          DB $1F, $26, $08, $10
  37++E79B 1F 37 04 10                          DB $1F, $37, $04, $10
  38++E79F 1F 48 14 1C                          DB $1F, $48, $14, $1C
  39++E7A3 1F 58 14 18                          DB $1F, $58, $14, $18
  40++E7A7 1F 68 10 1C                          DB $1F, $68, $10, $1C
  41++E7AB 1F 78 10 18                          DB $1F, $78, $10, $18
  42++E7AF 0A 88 20 24                          DB $0A, $88, $20, $24
  43++E7B3 0A 88 24 28                          DB $0A, $88, $24, $28
  44++E7B7 0A 88 28 2C                          DB $0A, $88, $28, $2C
  45++E7BB 0A 88 2C 20                          DB $0A, $88, $2C, $20
  46++E7BF              BushmasterEdgesSize:    equ $ - BushmasterEdges
  47++E7BF              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  48++E7BF 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  49++E7C3 1F 17 58 1D                          DB $1F, $17, $58, $1D
  50++E7C7 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  51++E7CB 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  52++E7CF BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  53++E7D3 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  54++E7D7 FF 2A 55 07                          DB $FF, $2A, $55, $07
  55++E7DB 7F 2A 55 07                          DB $7F, $2A, $55, $07
  56++E7DF 3F 00 00 60                          DB $3F, $00, $00, $60
  57++E7E3              BushmasterNormalsSize:  equ $ - BushmasterNormals
  58++E7E3              BushmasterLen:          equ $ - Bushmaster
  59++E7E3
# file closed: ./Data/Ships/Bushmaster.asm
  94+ E7E3                                      include "Data/Ships/CargoType5.asm"
# file opened: ./Data/Ships/CargoType5.asm
   1++E7E3              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E7E3              ; Corrected pointers
   3++E7E3              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E7E3              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E7E3              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E7E3              ;;;				 Example of cargo
   7++E7E3              ;;;
   8++E7E3              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E7E3              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E7E3              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E7E3              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E7E3              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E7E3              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E7E3              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E7E3              ;;;		Edges
  16++E7E3              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E7E3              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E7E3              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E7E3              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E7E3              ;;;	  	Normals (Faces)
  21++E7E3              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E7E3              ;;;		Byte 1 = X Lo
  23++E7E3              ;;;		Byte 2 = Y Lo
  24++E7E3              ;;;		Byte 3 = Z Lo
  25++E7E3
  26++E7E3 00 90 01     CargoType5              DB $00, $90, $01
  27++E7E6 37 E8                                DW CargoType5Edges
  28++E7E8 3C                                   DB CargoType5EdgesSize
  29++E7E9 00 12 3C 0F                          DB $00,$12,CargoType5VertSize,CargoType5EdgesCnt
  30++E7ED 00 00 1C 0C                          DB $00,$00,$1C,$0C,$11,$0F
  30++E7F1 11 0F
  31++E7F3 73 E8                                DW CargoType5Normals
  32++E7F5 02 00                                DB $02,$00
  33++E7F7 FB E7                                DW CargoType5Vertices
  34++E7F9 00 00                                DB 0,0                      ; Type and Tactics
  35++E7FB              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  36++E7FB 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  36++E7FF 10 55
  37++E801 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  37++E805 10 22
  38++E807 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  38++E80B 20 33
  39++E80D 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  39++E811 30 44
  40++E813 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  40++E817 40 55
  41++E819 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  41++E81D 51 66
  42++E81F 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  42++E823 21 66
  43++E825 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  43++E829 32 66
  44++E82B 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  44++E82F 43 66
  45++E831 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  45++E835 54 66
  46++E837              CargoType5VertSize      equ $  - CargoType5Vertices
  47++E837 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  47++E83B 1F 20 04 08
  48++E83F 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  48++E843 1F 40 0C 10
  49++E847 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  49++E84B 1F 51 00 14
  50++E84F 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  50++E853 1F 32 08 1C
  51++E857 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  51++E85B 1F 54 10 24
  52++E85F 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  52++E863 1F 62 18 1C
  53++E867 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  53++E86B 1F 64 20 24
  54++E86F 1F 65 24 14                          DB $1F,$65,$24,$14
  55++E873              CargoType5EdgesSize     equ $  - CargoType5Edges
  56++E873              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  57++E873 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  58++E877 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  58++E87B 5F 00 12 30
  59++E87F 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  59++E883 7F 00 12 30
  60++E887 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  60++E88B 9F 60 00 00
  61++E88F              CargoType5NormalsSize   equ $  - CargoType5Normals
  62++E88F              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/Ships/CargoType5.asm
  95+ E88F                                      include "Data/Ships/Chameleon.asm"
# file opened: ./Data/Ships/Chameleon.asm
   1++E88F 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E892 13 E9                                DW ChameleonEdges
   3++E894 74                                   DB ChameleonEdgesSize
   4++E895 00 1A                                DB $00, $1A
   5++E897 6C                                   DB ChameleonVertSize
   6++E898 1D                                   DB ChameleonEdgesCnt
   7++E899 00 C8                                DB $00, $C8
   8++E89B 34                                   DB ChameleonNormalsSize
   9++E89C 0A 64 1D                             DB $0A, $64, $1D
  10++E89F 87 E9                                DW ChameleonNormals
  11++E8A1 01 23                                DB $01, $23
  12++E8A3 A7 E8                                DW ChameleonVertices
  13++E8A5 00 00                                DB 0,0                      ; Type and Tactics
  14++E8A7 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  14++E8AB 25 01
  15++E8AD 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  15++E8B1 34 01
  16++E8B3 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  16++E8B7 8B 25
  17++E8B9 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  17++E8BD 68 22
  18++E8BF 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  18++E8C3 69 33
  19++E8C5 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  19++E8C9 9A 34
  20++E8CB 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  20++E8CF 7A 44
  21++E8D1 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  21++E8D5 7B 55
  22++E8D7 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  22++E8DB 36 02
  23++E8DD 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  23++E8E1 57 14
  24++E8E3 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  24++E8E7 BC 88
  25++E8E9 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  25++E8ED 9C 68
  26++E8EF 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  26++E8F3 AC 99
  27++E8F5 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  27++E8F9 BC 7A
  28++E8FB 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  28++E8FF CC CC
  29++E901 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  29++E905 CC CC
  30++E907 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  30++E90B CC CC
  31++E90D 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  31++E911 CC CC
  32++E913              ChameleonVertSize:      equ $ - ChameleonVertices
  33++E913 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  34++E917 1F 02 00 20                          DB $1F, $02, $00, $20
  35++E91B 1F 15 00 24                          DB $1F, $15, $00, $24
  36++E91F 1F 03 04 20                          DB $1F, $03, $04, $20
  37++E923 1F 14 04 24                          DB $1F, $14, $04, $24
  38++E927 1F 34 04 14                          DB $1F, $34, $04, $14
  39++E92B 1F 25 00 08                          DB $1F, $25, $00, $08
  40++E92F 1F 26 0C 20                          DB $1F, $26, $0C, $20
  41++E933 1F 36 10 20                          DB $1F, $36, $10, $20
  42++E937 1F 75 1C 24                          DB $1F, $75, $1C, $24
  43++E93B 1F 74 18 24                          DB $1F, $74, $18, $24
  44++E93F 1F 39 10 14                          DB $1F, $39, $10, $14
  45++E943 1F 4A 14 18                          DB $1F, $4A, $14, $18
  46++E947 1F 28 08 0C                          DB $1F, $28, $08, $0C
  47++E94B 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  48++E94F 1F 8B 08 28                          DB $1F, $8B, $08, $28
  49++E953 1F 9A 14 30                          DB $1F, $9A, $14, $30
  50++E957 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  51++E95B 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  52++E95F 1F 69 10 2C                          DB $1F, $69, $10, $2C
  53++E963 1F 7A 18 34                          DB $1F, $7A, $18, $34
  54++E967 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  55++E96B 1F BC 28 34                          DB $1F, $BC, $28, $34
  56++E96F 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  57++E973 1F AC 30 34                          DB $1F, $AC, $30, $34
  58++E977 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  59++E97B 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  60++E97F 0A CC 40 44                          DB $0A, $CC, $40, $44
  61++E983 0A CC 44 38                          DB $0A, $CC, $44, $38
  62++E987              ChameleonEdgesSize:     equ $ - ChameleonEdges
  63++E987              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  64++E987 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  65++E98B 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  66++E98F 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  67++E993 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  68++E997 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  69++E99B DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  70++E99F 1F 00 60 00                          DB $1F, $00, $60, $00
  71++E9A3 5F 00 60 00                          DB $5F, $00, $60, $00
  72++E9A7 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  73++E9AB 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  74++E9AF 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  75++E9B3 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  76++E9B7 3F 00 00 60                          DB $3F, $00, $00, $60
  77++E9BB              ChameleonNormalsSize:   equ $ - ChameleonNormals
  78++E9BB              ChameleonLen:           equ $ - Chameleon
  79++E9BB
# file closed: ./Data/Ships/Chameleon.asm
  96+ E9BB                                      include "Data/Ships/CobraMk3.asm"
# file opened: ./Data/Ships/CobraMk3.asm
   1++E9BB              ; Corrected pointers
   2++E9BB              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9BB              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9BB              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9BB 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9BE 7B EA                                DW CobraMk3Edges
   7++E9C0 98                                   DB CobraMkEdgesSize
   8++E9C1 54 2A                                DB $54,$2A
   9++E9C3 A8                                   DB CobraMkVertSize
  10++E9C4 26                                   DB CobraMkEdgesCnt
  11++E9C5 00 00                                DB $00,$00
  12++E9C7 34                                   DB CobraMk3NormalsSize
  13++E9C8 32 96 1C                             DB $32,$96,$1C
  14++E9CB 13 EB                                DW CobraMk3Normals
  15++E9CD 01 13                                DB $01,$13
  16++E9CF D3 E9                                DW CobraMk3Vertices
  17++E9D1 00 00                                DB 0,0                      ; Type and Tactics
  18++E9D3                                  ; missiles = 3
  19++E9D3 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  19++E9D7 FF FF
  20++E9D9 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  20++E9DD FF FF
  21++E9DF 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  21++E9E3 FF FF
  22++E9E5 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  22++E9E9 73 AA
  23++E9EB 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  23++E9EF 84 CC
  24++E9F1 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  24++E9F5 FF FF
  25++E9F7 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  25++E9FB FF FF
  26++E9FD 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  26++EA01 98 CC
  27++EA03 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  27++EA07 97 AA
  28++EA09 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  28++EA0D 65 99
  29++EA0F 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  29++EA13 A9 BB
  30++EA15 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  30++EA19 B9 CC
  31++EA1B 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  31++EA1F 99 99
  32++EA21 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  32++EA25 99 99
  33++EA27 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  33++EA2B 99 99
  34++EA2D 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  34++EA31 99 99
  35++EA33 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  35++EA37 99 99
  36++EA39 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  36++EA3D 99 99
  37++EA3F 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  37++EA43 99 99
  38++EA45 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  38++EA49 99 99
  39++EA4B 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  39++EA4F B0 BB
  40++EA51 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  40++EA55 B0 BB
  41++EA57 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  41++EA5B 99 99
  42++EA5D 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  42++EA61 99 99
  43++EA63 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  43++EA67 99 99
  44++EA69 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  44++EA6D 99 99
  45++EA6F 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  45++EA73 99 99
  46++EA75 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  46++EA79 99 99
  47++EA7B              CobraMkVertSize         equ $  - CobraMk3Vertices
  48++EA7B 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  48++EA7F 1F C4 00 10
  49++EA83 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  49++EA87 1F A7 0C 20
  50++EA8B 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  50++EA8F 1F 98 18 1C
  51++EA93 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  51++EA97 1F 95 14 24
  52++EA9B 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  52++EA9F 1F 51 08 14
  53++EAA3 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  53++EAA7 1F 73 0C 14
  54++EAAB 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  54++EAAF 1F 10 04 08
  55++EAB3 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  55++EAB7 1F A9 20 28
  56++EABB 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  56++EABF 1F C9 1C 2C
  57++EAC3 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  57++EAC7 1F CB 00 2C
  58++EACB 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  58++EACF 1D 42 00 18
  59++EAD3 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  59++EAD7 14 99 30 34
  60++EADB 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  60++EADF 14 99 38 3C
  61++EAE3 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  61++EAE7 13 99 3C 40
  62++EAEB 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  62++EAEF 13 99 34 48
  63++EAF3 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  63++EAF7 1E 65 08 24
  64++EAFB 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  64++EAFF 06 99 5C 60
  65++EB03 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  65++EB07 06 99 64 68
  66++EB0B 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  66++EB0F 08 99 64 6C
  67++EB13              CobraMkEdgesSize        equ $  - CobraMk3Edges
  68++EB13              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  69++EB13              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  70++EB13 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  71++EB17 9F 12 37 10                          DB $9F,$12,$37,$10
  72++EB1B 1F 12 37 10                          DB $1F,$12,$37,$10
  73++EB1F 9F 10 34 0E                          DB $9F,$10,$34,$0E
  74++EB23 1F 10 34 0E                          DB $1F,$10,$34,$0E
  75++EB27 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  76++EB2B 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  77++EB2F 9F 3D 66 00                          DB $9F,$3D,$66,$00
  78++EB33 1F 3D 66 00                          DB $1F,$3D,$66,$00
  79++EB37 3F 00 00 50                          DB $3F,$00,$00,$50
  80++EB3B DF 07 2A 09                          DB $DF,$07,$2A,$09
  81++EB3F 5F 00 1E 06                          DB $5F,$00,$1E,$06
  82++EB43 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  83++EB47              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  84++EB47              CobraMk3Len             equ $  - CobraMk3
  85++EB47
# file closed: ./Data/Ships/CobraMk3.asm
  97+ EB47                                      include "Data/Ships/Cobra_Mk_1.asm"
# file opened: ./Data/Ships/Cobra_Mk_1.asm
   1++EB47 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB4A A1 EB                                DW Cobra_Mk_1Edges
   3++EB4C 48                                   DB Cobra_Mk_1EdgesSize
   4++EB4D 28 1A                                DB $28, $1A
   5++EB4F 42                                   DB Cobra_Mk_1VertSize
   6++EB50 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB51 00 4B                                DB $00, $4B
   8++EB53 28                                   DB Cobra_Mk_1NormalsSize
   9++EB54 13 51 1A                             DB $13, $51, $1A
  10++EB57 E9 EB                                DW Cobra_Mk_1Normals
  11++EB59 02 22                                DB $02, $22
  12++EB5B 5F EB                                DW Cobra_Mk_1Vertices
  13++EB5D 00 00                                DB 0,0                      ; Type and Tactics
  14++EB5F 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  14++EB63 01 23
  15++EB65 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  15++EB69 01 45
  16++EB6B 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  16++EB6F 23 88
  17++EB71 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  17++EB75 45 99
  18++EB77 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  18++EB7B 26 78
  19++EB7D 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  19++EB81 46 79
  20++EB83 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  20++EB87 13 78
  21++EB89 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  21++EB8D 15 79
  22++EB8F 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  22++EB93 02 46
  23++EB95 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  23++EB99 01 11
  24++EB9B 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  24++EB9F 01 11
  25++EBA1              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  26++EBA1 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  27++EBA5 1F 23 00 08                          DB $1F, $23, $00, $08
  28++EBA9 1F 38 08 18                          DB $1F, $38, $08, $18
  29++EBAD 1F 17 18 1C                          DB $1F, $17, $18, $1C
  30++EBB1 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  31++EBB5 1F 45 0C 04                          DB $1F, $45, $0C, $04
  32++EBB9 1F 28 08 10                          DB $1F, $28, $08, $10
  33++EBBD 1F 67 10 14                          DB $1F, $67, $10, $14
  34++EBC1 1F 49 14 0C                          DB $1F, $49, $14, $0C
  35++EBC5 14 02 00 20                          DB $14, $02, $00, $20
  36++EBC9 14 04 20 04                          DB $14, $04, $20, $04
  37++EBCD 10 26 10 20                          DB $10, $26, $10, $20
  38++EBD1 10 46 20 14                          DB $10, $46, $20, $14
  39++EBD5 1F 78 10 18                          DB $1F, $78, $10, $18
  40++EBD9 1F 79 14 1C                          DB $1F, $79, $14, $1C
  41++EBDD 14 13 00 18                          DB $14, $13, $00, $18
  42++EBE1 14 15 04 1C                          DB $14, $15, $04, $1C
  43++EBE5 02 01 28 24                          DB $02, $01, $28, $24
  44++EBE9              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  45++EBE9              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  46++EBE9 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  47++EBED 5F 00 1B 03                          DB $5F, $00, $1B, $03
  48++EBF1 9F 08 2E 08                          DB $9F, $08, $2E, $08
  49++EBF5 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  50++EBF9 1F 08 2E 08                          DB $1F, $08, $2E, $08
  51++EBFD 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  52++EC01 1F 00 31 00                          DB $1F, $00, $31, $00
  53++EC05 3F 00 00 9A                          DB $3F, $00, $00, $9A
  54++EC09 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  55++EC0D 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  56++EC11              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  57++EC11              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  58++EC11
# file closed: ./Data/Ships/Cobra_Mk_1.asm
  98+ EC11                                      include "Data/Ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/Ships/Cobra_Mk_3_P.asm
   1++EC11 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC14 D1 EC                                DW Cobra_Mk_3_PEdges
   3++EC16 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC17 54 2A                                DB $54, $2A
   5++EC19 A8                                   DB Cobra_Mk_3_PVertSize
   6++EC1A 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC1B 00 AF                                DB $00, $AF
   8++EC1D 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC1E 32 96 1C                             DB $32, $96, $1C
  10++EC21 69 ED                                DW Cobra_Mk_3_PNormals
  11++EC23 01 12                                DB $01, $12
  12++EC25 29 EC                                DW Cobra_Mk_3_PVertices
  13++EC27 00 00                                DB 0,0                      ; Type and Tactics
  14++EC29 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  14++EC2D FF FF
  15++EC2F 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  15++EC33 FF FF
  16++EC35 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  16++EC39 FF FF
  17++EC3B 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  17++EC3F 73 AA
  18++EC41 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  18++EC45 84 CC
  19++EC47 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  19++EC4B FF FF
  20++EC4D 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  20++EC51 FF FF
  21++EC53 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  21++EC57 98 CC
  22++EC59 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  22++EC5D 97 AA
  23++EC5F 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  23++EC63 65 99
  24++EC65 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  24++EC69 A9 BB
  25++EC6B 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  25++EC6F B9 CC
  26++EC71 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  26++EC75 99 99
  27++EC77 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  27++EC7B 99 99
  28++EC7D 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  28++EC81 99 99
  29++EC83 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  29++EC87 99 99
  30++EC89 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  30++EC8D 99 99
  31++EC8F 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  31++EC93 99 99
  32++EC95 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  32++EC99 99 99
  33++EC9B 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  33++EC9F 99 99
  34++ECA1 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  34++ECA5 B0 BB
  35++ECA7 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  35++ECAB B0 BB
  36++ECAD 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  36++ECB1 99 99
  37++ECB3 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  37++ECB7 99 99
  38++ECB9 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  38++ECBD 99 99
  39++ECBF 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  39++ECC3 99 99
  40++ECC5 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  40++ECC9 99 99
  41++ECCB 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  41++ECCF 99 99
  42++ECD1              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  43++ECD1 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  44++ECD5 1F C4 00 10                          DB $1F, $C4, $00, $10
  45++ECD9 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  46++ECDD 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  47++ECE1 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  48++ECE5 1F 98 18 1C                          DB $1F, $98, $18, $1C
  49++ECE9 1F 96 18 24                          DB $1F, $96, $18, $24
  50++ECED 1F 95 14 24                          DB $1F, $95, $14, $24
  51++ECF1 1F 97 14 20                          DB $1F, $97, $14, $20
  52++ECF5 1F 51 08 14                          DB $1F, $51, $08, $14
  53++ECF9 1F 62 08 18                          DB $1F, $62, $08, $18
  54++ECFD 1F 73 0C 14                          DB $1F, $73, $0C, $14
  55++ED01 1F 84 10 18                          DB $1F, $84, $10, $18
  56++ED05 1F 10 04 08                          DB $1F, $10, $04, $08
  57++ED09 1F 20 00 08                          DB $1F, $20, $00, $08
  58++ED0D 1F A9 20 28                          DB $1F, $A9, $20, $28
  59++ED11 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  60++ED15 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  61++ED19 1F BA 04 28                          DB $1F, $BA, $04, $28
  62++ED1D 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  63++ED21 1D 31 04 14                          DB $1D, $31, $04, $14
  64++ED25 1D 42 00 18                          DB $1D, $42, $00, $18
  65++ED29 06 B0 50 54                          DB $06, $B0, $50, $54
  66++ED2D 14 99 30 34                          DB $14, $99, $30, $34
  67++ED31 14 99 48 4C                          DB $14, $99, $48, $4C
  68++ED35 14 99 38 3C                          DB $14, $99, $38, $3C
  69++ED39 14 99 40 44                          DB $14, $99, $40, $44
  70++ED3D 13 99 3C 40                          DB $13, $99, $3C, $40
  71++ED41 11 99 38 44                          DB $11, $99, $38, $44
  72++ED45 13 99 34 48                          DB $13, $99, $34, $48
  73++ED49 13 99 30 4C                          DB $13, $99, $30, $4C
  74++ED4D 1E 65 08 24                          DB $1E, $65, $08, $24
  75++ED51 06 99 58 60                          DB $06, $99, $58, $60
  76++ED55 06 99 5C 60                          DB $06, $99, $5C, $60
  77++ED59 08 99 58 5C                          DB $08, $99, $58, $5C
  78++ED5D 06 99 64 68                          DB $06, $99, $64, $68
  79++ED61 06 99 68 6C                          DB $06, $99, $68, $6C
  80++ED65 08 99 64 6C                          DB $08, $99, $64, $6C
  81++ED69              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  82++ED69              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  83++ED69 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  84++ED6D 9F 12 37 10                          DB $9F, $12, $37, $10
  85++ED71 1F 12 37 10                          DB $1F, $12, $37, $10
  86++ED75 9F 10 34 0E                          DB $9F, $10, $34, $0E
  87++ED79 1F 10 34 0E                          DB $1F, $10, $34, $0E
  88++ED7D 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  89++ED81 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  90++ED85 9F 3D 66 00                          DB $9F, $3D, $66, $00
  91++ED89 1F 3D 66 00                          DB $1F, $3D, $66, $00
  92++ED8D 3F 00 00 50                          DB $3F, $00, $00, $50
  93++ED91 DF 07 2A 09                          DB $DF, $07, $2A, $09
  94++ED95 5F 00 1E 06                          DB $5F, $00, $1E, $06
  95++ED99 5F 07 2A 09                          DB $5F, $07, $2A, $09
  96++ED9D              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  97++ED9D              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  98++ED9D
# file closed: ./Data/Ships/Cobra_Mk_3_P.asm
  99+ ED9D                                      include "Data/Ships/Constrictor.asm"
# file opened: ./Data/Ships/Constrictor.asm
   1++ED9D              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++ED9D              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++ED9D              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++ED9D F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDA0 1B EE                                DW ConstrictorEdges
   6++EDA2 60                                   DB ConstrictorEdgesSize
   7++EDA3 00 2E                                DB $00,$2E
   8++EDA5 66                                   DB ConstrictorVertSize
   9++EDA6 18                                   DB ConstrictorEdgesCnt
  10++EDA7 18 00                                DB $18,$00
  11++EDA9 28                                   DB ConstrictorNormalsSize
  12++EDAA 2D C8 37                             DB $2D,$C8,$37
  13++EDAD 7B EE                                DW ConstrictorNormals
  14++EDAF 02 2F                                DB $02,$2F
  15++EDB1 B5 ED                                DW ConstrictorVertices
  16++EDB3 00 00                                DB 0,0                      ; Type and Tactics
  17++EDB5                                  ; missiles = 3
  18++EDB5 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  18++EDB9 02 99
  19++EDBB 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  19++EDBF 01 99
  20++EDC1 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  20++EDC5 14 99
  21++EDC7 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  21++EDCB 45 89
  22++EDCD 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  22++EDD1 56 88
  23++EDD3 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  23++EDD7 67 88
  24++EDD9 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  24++EDDD 37 89
  25++EDDF 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  25++EDE3 23 99
  26++EDE5 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  26++EDE9 FF FF
  27++EDEB 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  27++EDEF FF FF
  28++EDF1 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  28++EDF5 99 99
  29++EDF7 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  29++EDFB 99 99
  30++EDFD 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  30++EE01 99 99
  31++EE03 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  31++EE07 99 99
  32++EE09 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  32++EE0D 99 99
  33++EE0F 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  33++EE13 99 99
  34++EE15 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  34++EE19 9F 01
  35++EE1B              ConstrictorVertSize     equ $  - ConstrictorVertices
  36++EE1B 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  36++EE1F 1F 19 04 08
  37++EE23 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  37++EE27 1F 02 00 20
  38++EE2B 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  38++EE2F 1F 23 1C 20
  39++EE33 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  39++EE37 1F 49 08 0C
  40++EE3B 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  40++EE3F 1F 37 18 20
  41++EE43 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  41++EE47 1F 56 10 24
  42++EE4B 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  42++EE4F 1F 58 0C 10
  43++EE53 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  43++EE57 1F 78 14 18
  44++EE5B 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  44++EE5F 1F 06 20 24
  45++EE63 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  45++EE67 05 99 30 38
  46++EE6B 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  46++EE6F 0A 99 2C 3C
  47++EE73 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  47++EE77 12 99 2C 34
  48++EE7B              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  49++EE7B              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  50++EE7B 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  50++EE7F 9F 18 4B 14
  51++EE83 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  51++EE87 1F 2C 4B 00
  52++EE8B 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  52++EE8F 9F 2C 4B 00
  53++EE93 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  53++EE97 1F 2C 4B 00
  54++EE9B 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  54++EE9F 5F 00 1B 00
  55++EEA3              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  56++EEA3              ConstrictorLen          equ $  - Constrictor
  57++EEA3
# file closed: ./Data/Ships/Constrictor.asm
 100+ EEA3                                      include "Data/Ships/Coriolis.asm"
# file opened: ./Data/Ships/Coriolis.asm
   1++EEA3 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEA6 1B EF                                DW CoriolisEdges
   3++EEA8 70                                   DB CoriolisEdgesSize
   4++EEA9 00 36                                DB $00, $36
   5++EEAB 60                                   DB CoriolisVertSize
   6++EEAC 1C                                   DB CoriolisEdgesCnt
   7++EEAD 00 00                                DB $00, $00
   8++EEAF 38                                   DB CoriolisNormalsSize
   9++EEB0 78 F0 00                             DB $78, $F0, $00
  10++EEB3 8B EF                                DW CoriolisNormals
  11++EEB5 00 06                                DB $00, $06
  12++EEB7 BB EE                                DW CoriolisVertices
  13++EEB9 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++EEBB A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  14++EEBF 10 62
  15++EEC1 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  15++EEC5 20 83
  16++EEC7 A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  16++EECB 30 74
  17++EECD 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  17++EED1 10 54
  18++EED3 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  18++EED7 51 A6
  19++EED9 A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  19++EEDD 62 B8
  20++EEDF A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  20++EEE3 73 C8
  21++EEE5 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  21++EEE9 54 97
  22++EEEB A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  22++EEEF A6 DB
  23++EEF1 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  23++EEF5 B8 DC
  24++EEF7 A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  24++EEFB 97 DC
  25++EEFD 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  25++EF01 95 DA
  26++EF03 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  26++EF07 00 00
  27++EF09 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  27++EF0D 00 00
  28++EF0F 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  28++EF13 00 00
  29++EF15 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  29++EF19 00 00
  30++EF1B              CoriolisVertSize:       equ $ - CoriolisVertices
  31++EF1B 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  32++EF1F 1F 20 00 04                          DB $1F, $20, $00, $04
  33++EF23 1F 30 04 08                          DB $1F, $30, $04, $08
  34++EF27 1F 40 08 0C                          DB $1F, $40, $08, $0C
  35++EF2B 1F 51 0C 10                          DB $1F, $51, $0C, $10
  36++EF2F 1F 61 00 10                          DB $1F, $61, $00, $10
  37++EF33 1F 62 00 14                          DB $1F, $62, $00, $14
  38++EF37 1F 82 14 04                          DB $1F, $82, $14, $04
  39++EF3B 1F 83 04 18                          DB $1F, $83, $04, $18
  40++EF3F 1F 73 08 18                          DB $1F, $73, $08, $18
  41++EF43 1F 74 08 1C                          DB $1F, $74, $08, $1C
  42++EF47 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  43++EF4B 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  44++EF4F 1F DB 20 24                          DB $1F, $DB, $20, $24
  45++EF53 1F DC 24 28                          DB $1F, $DC, $24, $28
  46++EF57 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  47++EF5B 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  48++EF5F 1F A6 10 20                          DB $1F, $A6, $10, $20
  49++EF63 1F B6 14 20                          DB $1F, $B6, $14, $20
  50++EF67 1F B8 14 24                          DB $1F, $B8, $14, $24
  51++EF6B 1F C8 18 24                          DB $1F, $C8, $18, $24
  52++EF6F 1F C7 18 28                          DB $1F, $C7, $18, $28
  53++EF73 1F 97 1C 28                          DB $1F, $97, $1C, $28
  54++EF77 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  55++EF7B 1E 00 30 34                          DB $1E, $00, $30, $34
  56++EF7F 1E 00 34 38                          DB $1E, $00, $34, $38
  57++EF83 1E 00 38 3C                          DB $1E, $00, $38, $3C
  58++EF87 1E 00 3C 30                          DB $1E, $00, $3C, $30
  59++EF8B              CoriolisEdgesSize:      equ $ - CoriolisEdges
  60++EF8B              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  61++EF8B 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  62++EF8F 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  63++EF93 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  64++EF97 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  65++EF9B DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  66++EF9F 5F 00 A0 00                          DB $5F, $00, $A0, $00
  67++EFA3 1F A0 00 00                          DB $1F, $A0, $00, $00
  68++EFA7 9F A0 00 00                          DB $9F, $A0, $00, $00
  69++EFAB 1F 00 A0 00                          DB $1F, $00, $A0, $00
  70++EFAF FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  71++EFB3 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  72++EFB7 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  73++EFBB BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  74++EFBF 3F 00 00 A0                          DB $3F, $00, $00, $A0
  75++EFC3              CoriolisNormalsSize:    equ $ - CoriolisNormals
  76++EFC3              CoriolisLen:            equ $ - Coriolis
  77++EFC3
# file closed: ./Data/Ships/Coriolis.asm
 101+ EFC3                                      include "Data/Ships/Cougar.asm"
# file opened: ./Data/Ships/Cougar.asm
   1++EFC3 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFC6 4D F0                                DW CougarEdges
   3++EFC8 64                                   DB CougarEdgesSize
   4++EFC9 00 2A                                DB $00, $2A
   5++EFCB 72                                   DB CougarVertSize
   6++EFCC 19                                   DB CougarEdgesCnt
   7++EFCD 00 00                                DB $00, $00
   8++EFCF 18                                   DB CougarNormalsSize
   9++EFD0 22 FC 28                             DB $22, $FC, $28
  10++EFD3 B1 F0                                DW CougarNormals
  11++EFD5 02 34                                DB $02, $34
  12++EFD7 DB EF                                DW CougarVertices
  13++EFD9 00 00                                DB 0,0                      ; Type and Tactics
  14++EFDB 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  14++EFDF 02 44
  15++EFE1 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  15++EFE5 01 22
  16++EFE7 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  16++EFEB 01 55
  17++EFED 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  17++EFF1 04 55
  18++EFF3 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  18++EFF7 12 35
  19++EFF9 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  19++EFFD 23 44
  20++EFFF 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  20++F003 34 55
  21++F005 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  21++F009 01 11
  22++F00B 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  22++F00F 01 11
  23++F011 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  23++F015 34 44
  24++F017 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  24++F01B 34 44
  25++F01D 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  25++F021 00 44
  26++F023 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  26++F027 00 44
  27++F029 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  27++F02D 00 00
  28++F02F 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  28++F033 44 44
  29++F035 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  29++F039 55 55
  30++F03B 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  30++F03F 55 55
  31++F041 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  31++F045 55 55
  32++F047 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  32++F04B 55 55
  33++F04D              CougarVertSize:         equ $ - CougarVertices
  34++F04D 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  35++F051 1F 01 04 1C                          DB $1F, $01, $04, $1C
  36++F055 1F 01 1C 20                          DB $1F, $01, $1C, $20
  37++F059 1F 01 20 08                          DB $1F, $01, $20, $08
  38++F05D 1E 05 08 0C                          DB $1E, $05, $08, $0C
  39++F061 1E 45 0C 18                          DB $1E, $45, $0C, $18
  40++F065 1E 15 08 10                          DB $1E, $15, $08, $10
  41++F069 1E 35 10 18                          DB $1E, $35, $10, $18
  42++F06D 1F 34 18 28                          DB $1F, $34, $18, $28
  43++F071 1F 34 28 24                          DB $1F, $34, $28, $24
  44++F075 1F 34 24 14                          DB $1F, $34, $24, $14
  45++F079 1F 24 14 00                          DB $1F, $24, $14, $00
  46++F07D 1B 04 00 0C                          DB $1B, $04, $00, $0C
  47++F081 1B 12 04 10                          DB $1B, $12, $04, $10
  48++F085 1B 23 14 10                          DB $1B, $23, $14, $10
  49++F089 1A 01 04 08                          DB $1A, $01, $04, $08
  50++F08D 1A 34 14 18                          DB $1A, $34, $14, $18
  51++F091 14 00 30 34                          DB $14, $00, $30, $34
  52++F095 12 00 34 2C                          DB $12, $00, $34, $2C
  53++F099 12 44 2C 38                          DB $12, $44, $2C, $38
  54++F09D 14 44 38 30                          DB $14, $44, $38, $30
  55++F0A1 12 55 3C 40                          DB $12, $55, $3C, $40
  56++F0A5 14 55 40 48                          DB $14, $55, $40, $48
  57++F0A9 12 55 48 44                          DB $12, $55, $48, $44
  58++F0AD 14 55 44 3C                          DB $14, $55, $44, $3C
  59++F0B1              CougarEdgesSize:        equ $ - CougarEdges
  60++F0B1              CougarEdgesCnt:         equ CougarEdgesSize/4
  61++F0B1 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  62++F0B5 DF 10 2E 04                          DB $DF, $10, $2E, $04
  63++F0B9 5F 00 1B 05                          DB $5F, $00, $1B, $05
  64++F0BD 5F 10 2E 04                          DB $5F, $10, $2E, $04
  65++F0C1 1F 10 2E 04                          DB $1F, $10, $2E, $04
  66++F0C5 3E 00 00 A0                          DB $3E, $00, $00, $A0
  67++F0C9              CougarNormalsSize:      equ $ - CougarNormals
  68++F0C9              CougarLen:              equ $ - Cougar
  69++F0C9
# file closed: ./Data/Ships/Cougar.asm
 102+ F0C9                                      include "Data/Ships/Dodo.asm"
# file opened: ./Data/Ships/Dodo.asm
   1++F0C9 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0CC 71 F1                                DW DodoEdges
   3++F0CE 88                                   DB DodoEdgesSize
   4++F0CF 00 36                                DB $00, $36
   5++F0D1 90                                   DB DodoVertSize
   6++F0D2 22                                   DB DodoEdgesCnt
   7++F0D3 00 00                                DB $00, $00
   8++F0D5 30                                   DB DodoNormalsSize
   9++F0D6 7D F0 00                             DB $7D, $F0, $00
  10++F0D9 F9 F1                                DW DodoNormals
  11++F0DB 00 00                                DB $00, $00
  12++F0DD E1 F0                                DW DodoVertices
  13++F0DF 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0E1 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  14++F0E5 01 55
  15++F0E7 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  15++F0EB 01 22
  16++F0ED 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  16++F0F1 02 33
  17++F0F3 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  17++F0F7 03 44
  18++F0F9 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  18++F0FD 04 55
  19++F0FF 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  19++F103 15 66
  20++F105 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  20++F109 12 77
  21++F10B 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  21++F10F 23 88
  22++F111 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  22++F115 34 99
  23++F117 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  23++F11B 45 AA
  24++F11D 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  24++F121 16 77
  25++F123 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  25++F127 27 88
  26++F129 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  26++F12D 38 99
  27++F12F E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  27++F133 49 AA
  28++F135 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  28++F139 56 AA
  29++F13B 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  29++F13F 67 BB
  30++F141 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  30++F145 78 BB
  31++F147 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  31++F14B 89 BB
  32++F14D 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  32++F151 9A BB
  33++F153 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  33++F157 6A BB
  34++F159 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  34++F15D 00 00
  35++F15F 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  35++F163 00 00
  36++F165 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  36++F169 00 00
  37++F16B 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  37++F16F 00 00
  38++F171              DodoVertSize:           equ $ - DodoVertices
  39++F171 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  40++F175 1F 02 04 08                          DB $1F, $02, $04, $08
  41++F179 1F 03 08 0C                          DB $1F, $03, $08, $0C
  42++F17D 1F 04 0C 10                          DB $1F, $04, $0C, $10
  43++F181 1F 05 10 00                          DB $1F, $05, $10, $00
  44++F185 1F 16 14 28                          DB $1F, $16, $14, $28
  45++F189 1F 17 28 18                          DB $1F, $17, $28, $18
  46++F18D 1F 27 18 2C                          DB $1F, $27, $18, $2C
  47++F191 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  48++F195 1F 38 1C 30                          DB $1F, $38, $1C, $30
  49++F199 1F 39 30 20                          DB $1F, $39, $30, $20
  50++F19D 1F 49 20 34                          DB $1F, $49, $20, $34
  51++F1A1 1F 4A 34 24                          DB $1F, $4A, $34, $24
  52++F1A5 1F 5A 24 38                          DB $1F, $5A, $24, $38
  53++F1A9 1F 56 38 14                          DB $1F, $56, $38, $14
  54++F1AD 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  55++F1B1 1F 8B 40 44                          DB $1F, $8B, $40, $44
  56++F1B5 1F 9B 44 48                          DB $1F, $9B, $44, $48
  57++F1B9 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  58++F1BD 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  59++F1C1 1F 15 00 14                          DB $1F, $15, $00, $14
  60++F1C5 1F 12 04 18                          DB $1F, $12, $04, $18
  61++F1C9 1F 23 08 1C                          DB $1F, $23, $08, $1C
  62++F1CD 1F 34 0C 20                          DB $1F, $34, $0C, $20
  63++F1D1 1F 45 10 24                          DB $1F, $45, $10, $24
  64++F1D5 1F 67 28 3C                          DB $1F, $67, $28, $3C
  65++F1D9 1F 78 2C 40                          DB $1F, $78, $2C, $40
  66++F1DD 1F 89 30 44                          DB $1F, $89, $30, $44
  67++F1E1 1F 9A 34 48                          DB $1F, $9A, $34, $48
  68++F1E5 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  69++F1E9 1E 00 50 54                          DB $1E, $00, $50, $54
  70++F1ED 14 00 54 5C                          DB $14, $00, $54, $5C
  71++F1F1 17 00 5C 58                          DB $17, $00, $5C, $58
  72++F1F5 14 00 58 50                          DB $14, $00, $58, $50
  73++F1F9              DodoEdgesSize:          equ $ - DodoEdges
  74++F1F9              DodoEdgesCnt:           equ DodoEdgesSize/4
  75++F1F9 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  76++F1FD 1F 67 8E 58                          DB $1F, $67, $8E, $58
  77++F201 5F A9 37 59                          DB $5F, $A9, $37, $59
  78++F205 5F 00 B0 58                          DB $5F, $00, $B0, $58
  79++F209 DF A9 37 59                          DB $DF, $A9, $37, $59
  80++F20D 9F 67 8E 58                          DB $9F, $67, $8E, $58
  81++F211 3F 00 B0 58                          DB $3F, $00, $B0, $58
  82++F215 3F A9 37 59                          DB $3F, $A9, $37, $59
  83++F219 7F 67 8E 58                          DB $7F, $67, $8E, $58
  84++F21D FF 67 8E 58                          DB $FF, $67, $8E, $58
  85++F221 BF A9 37 59                          DB $BF, $A9, $37, $59
  86++F225 3F 00 00 C4                          DB $3F, $00, $00, $C4
  87++F229              DodoNormalsSize:        equ $ - DodoNormals
  88++F229              DodoLen:                equ $ - Dodo
  89++F229
# file closed: ./Data/Ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1249  F229              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1250  F229                  SLOT    ShipModelsAddr
1251  F229                  PAGE    BankShipModels2
1252  F229              	ORG     ShipModelsAddr, BankShipModels2
1253  E000
1254  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1255  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1255  E00F 06 00       >                        ld      b,0
1255  E011 4F          >                        ld      c,a                                 ; c= original ship id
1255  E012 CB 3F       >.ShiftLoop:             srl     a
1255  E014 CB 3F       >                        srl     a
1255  E016 CB 3F       >                        srl     a
1255  E018 CB 3F       >                        srl     a                                   ; divide by 16
1255  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1255  E01B 79          >                        ld      a,c
1255  E01C 50          >                        ld      d,b
1255  E01D 1E 10       >                        ld      e,16
1255  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1255  E021 93          >                        sub     e                                   ; a= actual model id now
1255  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1255  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1255  E024 7A          >                        ld      a,d                                 ; a = bank number
1255  E025             >;.. Now b = bank and a = adjusted ship nbr
1255  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1255  E028 ED 31       >                        add     hl,a
1255  E02A ED 31       >                        add     hl,a
1255  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1255  E02D             >                        ClearCarryFlag
1255  E02D B7          >                    or a
1255  E02E C9          >                        ret
1256  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1256  E02F 2A 16 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1256  E032 11 1A C3    >                        ld          de,UBnkHullVerticies
1256  E035 06 00       >                        ld          b,0
1256  E037 3A 0A C3    >                        ld			a,(VertexCtX6Addr)
1256  E03A 4F          >                        ld          c,a
1256  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1256  E03C CD B1 8E    >                        call        memcopy_dma
1256  E03F C9          >                        ret
1257  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1257  E040 2A 05 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1257  E043 11 46 C4    >                        ld          de,UBnkHullEdges
1257  E046 06 00       >                        ld          b,0
1257  E048 3A 07 C3    >                        ld			a,(LineX4Addr)
1257  E04B 4F          >                        ld          c,a
1257  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1257  E04D CD B1 8E    >                        call        memcopy_dma
1257  E050 C9          >                        ret
1258  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1258  E051 2A 12 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1258  E054 11 F6 C8    >                        ld          de,UBnkHullNormals
1258  E057 06 00       >                        ld          b,0
1258  E059 3A 0E C3    >                        ld          a,(FaceCtX4Addr)
1258  E05C 4F          >                        ld          c,a
1258  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1258  E05E CD B1 8E    >                        call        memcopy_dma
1258  E061 C9          >                        ret
1259  E062              ShipBankTable2:         MShipBankTable
1259  E062 3B 00       >                        DW      BankShipModels1
1259  E064 43 00       >                        DW      BankShipModels2
1259  E066 44 00       >                        DW      BankShipModels3
1259  E068 45 00       >                        DW      BankShipModels4
1260  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1260  E06A 21 00 C3    >                        ld          hl,UBnkShipModelBank
1260  E06D 36 43       >                        ld          (hl),BankShipModels2
1260  E06F 32 01 C3    >                        ld          (UBnkShipModelNbr),a
1260  E072 21 19 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1260  E075 ED 31       >                        add         hl,a
1260  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1260  E079 4E          >                        ld          c,(hl)
1260  E07A 23          >                        inc         hl
1260  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1260  E07C 21 99 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1260  E07F ED 31       >                        add         hl,a
1260  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1260  E083 7E          >                        ld          a,(hl)
1260  E084 23          >                        inc         hl
1260  E085 66          >                        ld          h,(hl)
1260  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1260  E087 11 02 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1260  E08A 01 18 00    >                        ld          bc,ShipDataLength
1260  E08D ED B0       >                        ldir
1260  E08F CD 2F E0    >                        call        CopyVertsToUniv
1260  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1260  E095 CD 51 E0    >                        call        CopyNormsToUniv
1260  E098 C9          >                        ret
1261  E099                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E099 39 E1        ShipModelTable2:         DW Dragon                                  ;16
   2+ E09B 13 E2                                 DW Escape_Pod                              ;17
   3+ E09D 6B E2                                 DW Fer_De_Lance                            ;18
   4+ E09F 89 E3                                 DW Gecko                                   ;19
   5+ E0A1 51 E4                                 DW Ghavial                                 ;20
   6+ E0A3 39 E5                                 DW Iguana                                  ;21
   7+ E0A5 2F E6                                 DW Krait                                   ;22
   8+ E0A7 19 E7                                 DW Logo                                    ;23
   9+ E0A9 D5 E8                                 DW Mamba                                   ;24
  10+ E0AB 07 EA                                 DW Missile                                 ;25
  11+ E0AD 09 EB                                 DW Monitor                                 ;26
  12+ E0AF 0F EC                                 DW Moray                                   ;27
  13+ E0B1 EB EC                                 DW Ophidian                                ;28
  14+ E0B3 23 EE                                 DW Plate                                   ;29
  15+ E0B5 61 EE                                 DW Python                                  ;30
  16+ E0B7 57 EF                                 DW Python_P                                ;31
  17+ E0B9 51 E1        ShipVertexTable2:        DW DragonVertices
  18+ E0BB 2B E2                                 DW Escape_PodVertices
  19+ E0BD 83 E2                                 DW Fer_De_LanceVertices
  20+ E0BF A1 E3                                 DW GeckoVertices
  21+ E0C1 69 E4                                 DW GhavialVertices
  22+ E0C3 51 E5                                 DW IguanaVertices
  23+ E0C5 47 E6                                 DW KraitVertices
  24+ E0C7 31 E7                                 DW LogoVertices
  25+ E0C9 ED E8                                 DW MambaVertices
  26+ E0CB 1F EA                                 DW MissileVertices
  27+ E0CD 21 EB                                 DW MonitorVertices
  28+ E0CF 27 EC                                 DW MorayVertices
  29+ E0D1 03 ED                                 DW OphidianVertices
  30+ E0D3 3B EE                                 DW PlateVertices
  31+ E0D5 79 EE                                 DW PythonVertices
  32+ E0D7 6F EF                                 DW Python_PVertices
  33+ E0D9 87 E1        ShipEdgeTable2:          DW DragonEdges
  34+ E0DB 43 E2                                 DW Escape_PodEdges
  35+ E0DD F5 E2                                 DW Fer_De_LanceEdges
  36+ E0DF E9 E3                                 DW GeckoEdges
  37+ E0E1 B1 E4                                 DW GhavialEdges
  38+ E0E3 AB E5                                 DW IguanaEdges
  39+ E0E5 AD E6                                 DW KraitEdges
  40+ E0E7 2D E8                                 DW LogoEdges
  41+ E0E9 83 E9                                 DW MambaEdges
  42+ E0EB 85 EA                                 DW MissileEdges
  43+ E0ED 87 EB                                 DW MonitorEdges
  44+ E0EF 7B EC                                 DW MorayEdges
  45+ E0F1 7B ED                                 DW OphidianEdges
  46+ E0F3 4D EE                                 DW PlateEdges
  47+ E0F5 BB EE                                 DW PythonEdges
  48+ E0F7 B1 EF                                 DW Python_PEdges
  49+ E0F9 DB E1        ShipNormalTable2:        DW DragonNormals
  50+ E0FB 5B E2                                 DW Escape_PodNormals
  51+ E0FD 61 E3                                 DW Fer_De_LanceNormals
  52+ E0FF 2D E4                                 DW GeckoNormals
  53+ E101 09 E5                                 DW GhavialNormals
  54+ E103 07 E6                                 DW IguanaNormals
  55+ E105 01 E7                                 DW KraitNormals
  56+ E107 C1 E8                                 DW LogoNormals
  57+ E109 F3 E9                                 DW MambaNormals
  58+ E10B E5 EA                                 DW MissileNormals
  59+ E10D E3 EB                                 DW MonitorNormals
  60+ E10F C7 EC                                 DW MorayNormals
  61+ E111 F3 ED                                 DW OphidianNormals
  62+ E113 5D EE                                 DW PlateNormals
  63+ E115 23 EF                                 DW PythonNormals
  64+ E117 19 F0                                 DW Python_PNormals
  65+ E119 DA 00        ShipModelSizeTable2:     DW DragonLen
  66+ E11B 58 00                                 DW Escape_PodLen
  67+ E11D 1E 01                                 DW Fer_De_LanceLen
  68+ E11F C8 00                                 DW GeckoLen
  69+ E121 E8 00                                 DW GhavialLen
  70+ E123 F6 00                                 DW IguanaLen
  71+ E125 EA 00                                 DW KraitLen
  72+ E127 BC 01                                 DW LogoLen
  73+ E129 32 01                                 DW MambaLen
  74+ E12B 02 01                                 DW MissileLen
  75+ E12D 06 01                                 DW MonitorLen
  76+ E12F DC 00                                 DW MorayLen
  77+ E131 38 01                                 DW OphidianLen
  78+ E133 3E 00                                 DW PlateLen
  79+ E135 F6 00                                 DW PythonLen
  80+ E137 F6 00                                 DW Python_PLen
  81+ E139
  82+ E139                                      include "Data/Ships/Dragon.asm"
# file opened: ./Data/Ships/Dragon.asm
   1++E139 00 66 50     Dragon:	                DB $00, $66, $50
   2++E13C 87 E1                                DW DragonEdges
   3++E13E 54                                   DB DragonEdgesSize
   4++E13F 00 3C                                DB $00, $3C
   5++E141 36                                   DB DragonVertSize
   6++E142 15                                   DB DragonEdgesCnt
   7++E143 00 00                                DB $00, $00
   8++E145 38                                   DB DragonNormalsSize
   9++E146 20 F7 14                             DB $20, $F7, $14
  10++E149 DB E1                                DW DragonNormals
  11++E14B 00 47                                DB $00, $47
  12++E14D 51 E1                                DW DragonVertices
  13++E14F 00 00                                DB 0,0                      ; Type and Tactics
  14++E151 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  14++E155 6B 05
  15++E157 D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  15++E15B 67 01
  16++E15D D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  16++E161 78 12
  17++E163 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  17++E167 CD 23
  18++E169 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  18++E16D CD 89
  19++E16F D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  19++E173 9A 34
  20++E175 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  20++E179 AB 45
  21++E17B 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  21++E17F FF FF
  22++E181 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E185 FF FF
  23++E187              DragonVertSize:         equ $ - DragonVertices
  24++E187 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  25++E18B 1F 12 08 1C                          DB $1F, $12, $08, $1C
  26++E18F 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  27++E193 1F 34 14 1C                          DB $1F, $34, $14, $1C
  28++E197 1F 45 18 1C                          DB $1F, $45, $18, $1C
  29++E19B 1F 50 00 1C                          DB $1F, $50, $00, $1C
  30++E19F 1F 67 04 20                          DB $1F, $67, $04, $20
  31++E1A3 1F 78 08 20                          DB $1F, $78, $08, $20
  32++E1A7 1F 89 10 20                          DB $1F, $89, $10, $20
  33++E1AB 1F 9A 14 20                          DB $1F, $9A, $14, $20
  34++E1AF 1F AB 18 20                          DB $1F, $AB, $18, $20
  35++E1B3 1F B6 00 20                          DB $1F, $B6, $00, $20
  36++E1B7 1F 06 00 04                          DB $1F, $06, $00, $04
  37++E1BB 1F 17 04 08                          DB $1F, $17, $04, $08
  38++E1BF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  39++E1C3 1F 5B 00 18                          DB $1F, $5B, $00, $18
  40++E1C7 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  41++E1CB 1F 8C 08 10                          DB $1F, $8C, $08, $10
  42++E1CF 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  43++E1D3 1F 9D 10 14                          DB $1F, $9D, $10, $14
  44++E1D7 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  45++E1DB              DragonEdgesSize:        equ $ - DragonEdges
  46++E1DB              DragonEdgesCnt:         equ DragonEdgesSize/4
  47++E1DB 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  48++E1DF 1F 21 5A 00                          DB $1F, $21, $5A, $00
  49++E1E3 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  50++E1E7 BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  51++E1EB 9F 21 5A 00                          DB $9F, $21, $5A, $00
  52++E1EF 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  53++E1F3 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  54++E1F7 5F 21 5A 00                          DB $5F, $21, $5A, $00
  55++E1FB 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  56++E1FF FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  57++E203 DF 21 5A 00                          DB $DF, $21, $5A, $00
  58++E207 DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  59++E20B 3F 30 00 52                          DB $3F, $30, $00, $52
  60++E20F BF 30 00 52                          DB $BF, $30, $00, $52
  61++E213              DragonNormalsSize:      equ $ - DragonNormals
  62++E213              DragonLen:              equ $ - Dragon
  63++E213
# file closed: ./Data/Ships/Dragon.asm
  83+ E213                                      include "Data/Ships/Escape_Pod.asm"
# file opened: ./Data/Ships/Escape_Pod.asm
   1++E213 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E216 43 E2                                DW Escape_PodEdges
   3++E218 18                                   DB Escape_PodEdgesSize
   4++E219 00 16                                DB $00, $16
   5++E21B 18                                   DB Escape_PodVertSize
   6++E21C 06                                   DB Escape_PodEdgesCnt
   7++E21D 00 00                                DB $00, $00
   8++E21F 10                                   DB Escape_PodNormalsSize
   9++E220 08 11 08                             DB $08, $11, $08
  10++E223 5B E2                                DW Escape_PodNormals
  11++E225 04 00                                DB $04, $00
  12++E227 2B E2                                DW Escape_PodVertices
  13++E229 00 00                                DB 0,0                      ; Type and Tactics
  14++E22B 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  14++E22F 12 33
  15++E231 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  15++E235 02 33
  16++E237 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  16++E23B 01 33
  17++E23D 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  17++E241 01 22
  18++E243              Escape_PodVertSize:     equ $ - Escape_PodVertices
  19++E243 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  20++E247 1F 03 04 08                          DB $1F, $03, $04, $08
  21++E24B 1F 01 08 0C                          DB $1F, $01, $08, $0C
  22++E24F 1F 12 0C 00                          DB $1F, $12, $0C, $00
  23++E253 1F 13 00 08                          DB $1F, $13, $00, $08
  24++E257 1F 02 0C 04                          DB $1F, $02, $0C, $04
  25++E25B              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  26++E25B              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  27++E25B 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  28++E25F 1F 27 67 1E                          DB $1F, $27, $67, $1E
  29++E263 5F 27 67 1E                          DB $5F, $27, $67, $1E
  30++E267 9F 70 00 00                          DB $9F, $70, $00, $00
  31++E26B              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  32++E26B              Escape_PodLen:          equ $ - Escape_Pod
  33++E26B
# file closed: ./Data/Ships/Escape_Pod.asm
  84+ E26B                                      include "Data/Ships/Fer_De_Lance.asm"
# file opened: ./Data/Ships/Fer_De_Lance.asm
   1++E26B 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E26E F5 E2                                DW Fer_De_LanceEdges
   3++E270 6C                                   DB Fer_De_LanceEdgesSize
   4++E271 00 1A                                DB $00, $1A
   5++E273 72                                   DB Fer_De_LanceVertSize
   6++E274 1B                                   DB Fer_De_LanceEdgesCnt
   7++E275 00 00                                DB $00, $00
   8++E277 28                                   DB Fer_De_LanceNormalsSize
   9++E278 28 A0 1E                             DB $28, $A0, $1E
  10++E27B 61 E3                                DW Fer_De_LanceNormals
  11++E27D 01 12                                DB $01, $12
  12++E27F 83 E2                                DW Fer_De_LanceVertices
  13++E281 00 00                                DB 0,0                      ; Type and Tactics
  14++E283 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  14++E287 01 59
  15++E289 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  15++E28D 12 99
  16++E28F 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  16++E293 23 99
  17++E295 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  17++E299 34 99
  18++E29B 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  18++E29F 45 99
  19++E2A1 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  19++E2A5 01 26
  20++E2A7 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  20++E2AB 23 67
  21++E2AD 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  21++E2B1 34 78
  22++E2B3 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  22++E2B7 04 58
  23++E2B9 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  23++E2BD 06 78
  24++E2BF 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  24++E2C3 00 00
  25++E2C5 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  25++E2C9 00 00
  26++E2CB 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  26++E2CF 00 00
  27++E2D1 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  27++E2D5 00 00
  28++E2D7 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  28++E2DB 00 00
  29++E2DD 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  29++E2E1 00 00
  30++E2E3 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  30++E2E7 99 99
  31++E2E9 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  31++E2ED 99 99
  32++E2EF 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  32++E2F3 99 99
  33++E2F5              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  34++E2F5 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  35++E2F9 1F 29 04 08                          DB $1F, $29, $04, $08
  36++E2FD 1F 39 08 0C                          DB $1F, $39, $08, $0C
  37++E301 1F 49 0C 10                          DB $1F, $49, $0C, $10
  38++E305 1F 59 00 10                          DB $1F, $59, $00, $10
  39++E309 1C 01 00 14                          DB $1C, $01, $00, $14
  40++E30D 1C 26 14 18                          DB $1C, $26, $14, $18
  41++E311 1C 37 18 1C                          DB $1C, $37, $18, $1C
  42++E315 1C 48 1C 20                          DB $1C, $48, $1C, $20
  43++E319 1C 05 00 20                          DB $1C, $05, $00, $20
  44++E31D 0F 06 14 24                          DB $0F, $06, $14, $24
  45++E321 0B 67 18 24                          DB $0B, $67, $18, $24
  46++E325 0B 78 1C 24                          DB $0B, $78, $1C, $24
  47++E329 0F 08 20 24                          DB $0F, $08, $20, $24
  48++E32D 0E 12 04 14                          DB $0E, $12, $04, $14
  49++E331 0E 23 08 18                          DB $0E, $23, $08, $18
  50++E335 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  51++E339 0E 45 10 20                          DB $0E, $45, $10, $20
  52++E33D 08 00 28 2C                          DB $08, $00, $28, $2C
  53++E341 09 00 2C 30                          DB $09, $00, $2C, $30
  54++E345 0B 00 28 30                          DB $0B, $00, $28, $30
  55++E349 08 00 34 38                          DB $08, $00, $34, $38
  56++E34D 09 00 38 3C                          DB $09, $00, $38, $3C
  57++E351 0B 00 34 3C                          DB $0B, $00, $34, $3C
  58++E355 0C 99 40 44                          DB $0C, $99, $40, $44
  59++E359 0C 99 40 48                          DB $0C, $99, $40, $48
  60++E35D 08 99 44 48                          DB $08, $99, $44, $48
  61++E361              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  62++E361              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  63++E361 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  64++E365 9F 44 00 18                          DB $9F, $44, $00, $18
  65++E369 BF 3F 00 25                          DB $BF, $3F, $00, $25
  66++E36D 3F 00 00 68                          DB $3F, $00, $00, $68
  67++E371 3F 3F 00 25                          DB $3F, $3F, $00, $25
  68++E375 1F 44 00 18                          DB $1F, $44, $00, $18
  69++E379 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  70++E37D 3C 00 2D 16                          DB $3C, $00, $2D, $16
  71++E381 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  72++E385 5F 00 1C 00                          DB $5F, $00, $1C, $00
  73++E389              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  74++E389              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  75++E389
# file closed: ./Data/Ships/Fer_De_Lance.asm
  85+ E389                                      include "Data/Ships/Gecko.asm"
# file opened: ./Data/Ships/Gecko.asm
   1++E389 00 26 49     Gecko:	                DB $00, $26, $49
   2++E38C E9 E3                                DW GeckoEdges
   3++E38E 44                                   DB GeckoEdgesSize
   4++E38F 00 1A                                DB $00, $1A
   5++E391 48                                   DB GeckoVertSize
   6++E392 11                                   DB GeckoEdgesCnt
   7++E393 00 37                                DB $00, $37
   8++E395 24                                   DB GeckoNormalsSize
   9++E396 12 46 1E                             DB $12, $46, $1E
  10++E399 2D E4                                DW GeckoNormals
  11++E39B 03 10                                DB $03, $10
  12++E39D A1 E3                                DW GeckoVertices
  13++E39F 00 00                                DB 0,0                      ; Type and Tactics
  14++E3A1 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  14++E3A5 03 45
  15++E3A7 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  15++E3AB 01 23
  16++E3AD 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  16++E3B1 05 67
  17++E3B3 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  17++E3B7 01 78
  18++E3B9 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  18++E3BD 45 66
  19++E3BF 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  19++E3C3 12 88
  20++E3C5 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  20++E3C9 34 67
  21++E3CB 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  21++E3CF 23 78
  22++E3D1 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  22++E3D5 33 33
  23++E3D7 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  23++E3DB 33 33
  24++E3DD 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  24++E3E1 33 33
  25++E3E3 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  25++E3E7 33 33
  26++E3E9              GeckoVertSize:          equ $ - GeckoVertices
  27++E3E9 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  28++E3ED 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E3F1 1F 18 14 0C                          DB $1F, $18, $14, $0C
  30++E3F5 1F 07 0C 08                          DB $1F, $07, $0C, $08
  31++E3F9 1F 56 08 10                          DB $1F, $56, $08, $10
  32++E3FD 1F 45 10 00                          DB $1F, $45, $10, $00
  33++E401 1F 28 14 1C                          DB $1F, $28, $14, $1C
  34++E405 1F 37 1C 18                          DB $1F, $37, $1C, $18
  35++E409 1F 46 18 10                          DB $1F, $46, $18, $10
  36++E40D 1D 05 00 08                          DB $1D, $05, $00, $08
  37++E411 1E 01 04 0C                          DB $1E, $01, $04, $0C
  38++E415 1D 34 00 18                          DB $1D, $34, $00, $18
  39++E419 1E 23 04 1C                          DB $1E, $23, $04, $1C
  40++E41D 14 67 08 18                          DB $14, $67, $08, $18
  41++E421 14 78 0C 1C                          DB $14, $78, $0C, $1C
  42++E425 10 33 20 28                          DB $10, $33, $20, $28
  43++E429 11 33 24 2C                          DB $11, $33, $24, $2C
  44++E42D              GeckoEdgesSize:             equ $ - GeckoEdges
  45++E42D              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  46++E42D 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  47++E431 1F 04 2D 08                          DB $1F, $04, $2D, $08
  48++E435 5F 19 6C 13                          DB $5F, $19, $6C, $13
  49++E439 5F 00 54 0C                          DB $5F, $00, $54, $0C
  50++E43D DF 19 6C 13                          DB $DF, $19, $6C, $13
  51++E441 9F 04 2D 08                          DB $9F, $04, $2D, $08
  52++E445 BF 58 10 D6                          DB $BF, $58, $10, $D6
  53++E449 3F 00 00 BB                          DB $3F, $00, $00, $BB
  54++E44D 3F 58 10 D6                          DB $3F, $58, $10, $D6
  55++E451              GeckoNormalsSize:       equ $ - GeckoNormals
  56++E451              GeckoLen:               equ $ - Gecko
  57++E451
# file closed: ./Data/Ships/Gecko.asm
  86+ E451                                      include "Data/Ships/Ghavial.asm"
# file opened: ./Data/Ships/Ghavial.asm
   1++E451 03 26 00     Ghavial:	DB $03, $26, $00
   2++E454 B1 E4        	DW GhavialEdges
   3++E456 58           	DB GhavialEdgesSize
   4++E457 00 22        	DB $00, $22
   5++E459 48           	DB GhavialVertSize
   6++E45A 16           	DB GhavialEdgesCnt
   7++E45B 00 64        	DB $00, $64
   8++E45D 30           	DB GhavialNormalsSize
   9++E45E 0A 72 10     	DB $0A, $72, $10
  10++E461 09 E5        	DW GhavialNormals
  11++E463 00 27        	DB $00, $27
  12++E465 69 E4        	DW GhavialVertices
  13++E467 00 00                                DB 0,0                      ; Type and Tactics
  14++E469
  15++E469 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  15++E46D 67 01
  16++E46F 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  16++E473 6B 05
  17++E475 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  17++E479 23 01
  18++E47B 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  18++E47F 45 03
  19++E481 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  19++E485 78 12
  20++E487 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  20++E48B 89 23
  21++E48D 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  21++E491 AB 45
  22++E493 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  22++E497 9A 34
  23++E499 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  23++E49D FF FF
  24++E49F 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  24++E4A3 00 00
  25++E4A5 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  25++E4A9 00 00
  26++E4AB 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  26++E4AF 00 00
  27++E4B1
  28++E4B1              GhavialVertSize: equ $ - GhavialVertices
  29++E4B1
  30++E4B1
  31++E4B1 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  32++E4B5 1F 12 10 08  	DB $1F, $12, $10, $08
  33++E4B9 1F 23 14 08  	DB $1F, $23, $14, $08
  34++E4BD 1F 30 0C 08  	DB $1F, $30, $0C, $08
  35++E4C1 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  36++E4C5 1F 45 18 0C  	DB $1F, $45, $18, $0C
  37++E4C9 1F 50 0C 04  	DB $1F, $50, $0C, $04
  38++E4CD 1F 67 00 20  	DB $1F, $67, $00, $20
  39++E4D1 1F 78 10 20  	DB $1F, $78, $10, $20
  40++E4D5 1F 89 14 20  	DB $1F, $89, $14, $20
  41++E4D9 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  42++E4DD 1F AB 18 20  	DB $1F, $AB, $18, $20
  43++E4E1 1F B6 04 20  	DB $1F, $B6, $04, $20
  44++E4E5 1F 06 04 00  	DB $1F, $06, $04, $00
  45++E4E9 1F 17 00 10  	DB $1F, $17, $00, $10
  46++E4ED 1F 28 10 14  	DB $1F, $28, $10, $14
  47++E4F1 1F 39 14 1C  	DB $1F, $39, $14, $1C
  48++E4F5 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  49++E4F9 1F 5B 18 04  	DB $1F, $5B, $18, $04
  50++E4FD 09 00 24 28  	DB $09, $00, $24, $28
  51++E501 09 00 28 2C  	DB $09, $00, $28, $2C
  52++E505 09 00 2C 24  	DB $09, $00, $2C, $24
  53++E509
  54++E509              GhavialEdgesSize: equ $ - GhavialEdges
  55++E509
  56++E509
  57++E509              GhavialEdgesCnt: equ GhavialEdgesSize/4
  58++E509
  59++E509
  60++E509 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  61++E50D 1F 33 24 0C  	DB $1F, $33, $24, $0C
  62++E511 3F 33 1C 19  	DB $3F, $33, $1C, $19
  63++E515 3F 00 30 2A  	DB $3F, $00, $30, $2A
  64++E519 BF 33 1C 19  	DB $BF, $33, $1C, $19
  65++E51D 9F 33 24 0C  	DB $9F, $33, $24, $0C
  66++E521 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  67++E525 5F 1C 38 07  	DB $5F, $1C, $38, $07
  68++E529 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  69++E52D 7F 00 33 26  	DB $7F, $00, $33, $26
  70++E531 FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  71++E535 DF 1C 38 07  	DB $DF, $1C, $38, $07
  72++E539
  73++E539              GhavialNormalsSize: equ $ - GhavialNormals
  74++E539              GhavialLen: equ $ - Ghavial
  75++E539
# file closed: ./Data/Ships/Ghavial.asm
  87+ E539                                      include "Data/Ships/Iguana.asm"
# file opened: ./Data/Ships/Iguana.asm
   1++E539 01 0D AC     Iguana:	DB $01, $0D, $AC
   2++E53C AB E5        	DW IguanaEdges
   3++E53E 5C           	DB IguanaEdgesSize
   4++E53F 00 1A        	DB $00, $1A
   5++E541 5A           	DB IguanaVertSize
   6++E542 17           	DB IguanaEdgesCnt
   7++E543 00 96        	DB $00, $96
   8++E545 28           	DB IguanaNormalsSize
   9++E546 0A 5A 21     	DB $0A, $5A, $21
  10++E549 07 E6        	DW IguanaNormals
  11++E54B 01 23        	DB $01, $23
  12++E54D 51 E5        	DW IguanaVertices
  13++E54F 00 00                                DB 0,0                      ; Type and Tactics
  14++E551
  15++E551
  16++E551 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  16++E555 23 01
  17++E557 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  17++E55B 46 02
  18++E55D 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  18++E561 45 01
  19++E563 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  19++E567 57 13
  20++E569 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  20++E56D 67 23
  21++E56F 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  21++E573 89 46
  22++E575 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  22++E579 88 45
  23++E57B 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  23++E57F 89 57
  24++E581 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  24++E585 99 67
  25++E587 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  25++E58B 11 00
  26++E58D 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  26++E591 33 22
  27++E593 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  27++E597 99 88
  28++E599 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  28++E59D 88 88
  29++E59F 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  29++E5A3 99 88
  30++E5A5 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  30++E5A9 99 99
  31++E5AB
  32++E5AB              IguanaVertSize: equ $ - IguanaVertices
  33++E5AB
  34++E5AB
  35++E5AB
  36++E5AB 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  37++E5AF 1F 01 00 08  	DB $1F, $01, $00, $08
  38++E5B3 1F 13 00 0C  	DB $1F, $13, $00, $0C
  39++E5B7 1F 23 00 10  	DB $1F, $23, $00, $10
  40++E5BB 1F 46 04 14  	DB $1F, $46, $04, $14
  41++E5BF 1F 45 08 18  	DB $1F, $45, $08, $18
  42++E5C3 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  43++E5C7 1F 67 10 20  	DB $1F, $67, $10, $20
  44++E5CB 1F 48 14 18  	DB $1F, $48, $14, $18
  45++E5CF 1F 58 18 1C  	DB $1F, $58, $18, $1C
  46++E5D3 1F 69 14 20  	DB $1F, $69, $14, $20
  47++E5D7 1F 79 1C 20  	DB $1F, $79, $1C, $20
  48++E5DB 1F 04 04 08  	DB $1F, $04, $04, $08
  49++E5DF 1F 15 08 0C  	DB $1F, $15, $08, $0C
  50++E5E3 1F 26 04 10  	DB $1F, $26, $04, $10
  51++E5E7 1F 37 0C 10  	DB $1F, $37, $0C, $10
  52++E5EB 1F 89 14 1C  	DB $1F, $89, $14, $1C
  53++E5EF 1E 01 08 24  	DB $1E, $01, $08, $24
  54++E5F3 1E 23 10 28  	DB $1E, $23, $10, $28
  55++E5F7 0A 88 2C 30  	DB $0A, $88, $2C, $30
  56++E5FB 0A 88 34 30  	DB $0A, $88, $34, $30
  57++E5FF 0A 99 2C 38  	DB $0A, $99, $2C, $38
  58++E603 0A 99 34 38  	DB $0A, $99, $34, $38
  59++E607
  60++E607              IguanaEdgesSize: equ $ - IguanaEdges
  61++E607
  62++E607
  63++E607              IguanaEdgesCnt: equ IguanaEdgesSize/4
  64++E607
  65++E607
  66++E607 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  67++E60B DF 33 4D 19  	DB $DF, $33, $4D, $19
  68++E60F 1F 33 4D 19  	DB $1F, $33, $4D, $19
  69++E613 5F 33 4D 19  	DB $5F, $33, $4D, $19
  70++E617 9F 2A 55 00  	DB $9F, $2A, $55, $00
  71++E61B DF 2A 55 00  	DB $DF, $2A, $55, $00
  72++E61F 1F 2A 55 00  	DB $1F, $2A, $55, $00
  73++E623 5F 2A 55 00  	DB $5F, $2A, $55, $00
  74++E627 BF 17 00 5D  	DB $BF, $17, $00, $5D
  75++E62B 3F 17 00 5D  	DB $3F, $17, $00, $5D
  76++E62F
  77++E62F
  78++E62F              IguanaNormalsSize: equ $ - IguanaNormals
  79++E62F              IguanaLen: equ $ - Iguana
  80++E62F
# file closed: ./Data/Ships/Iguana.asm
  88+ E62F                                      include "Data/Ships/Krait.asm"
# file opened: ./Data/Ships/Krait.asm
   1++E62F
   2++E62F 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E632 AD E6                                DW KraitEdges
   4++E634 54                                   DB KraitEdgesSize
   5++E635 00 12                                DB $00, $12
   6++E637 66                                   DB KraitVertSize
   7++E638 15                                   DB KraitEdgesCnt
   8++E639 64 00                                DB $64,$00
   9++E63B 18                                   DB KraitNormalsSize
  10++E63C 14 50 1E                             DB $14, $50, $1E
  11++E63F 01 E7                                DW KraitNormals
  12++E641 02 10                                DB $02, $10
  13++E643 47 E6                                DW KraitVertices
  14++E645 00 00                                DB 0,0                      ; Type and Tactics
  15++E647 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  15++E64B 01 23
  16++E64D 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  16++E651 03 45
  17++E653 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  17++E657 12 45
  18++E659 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  18++E65D 01 44
  19++E65F 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  19++E663 23 55
  20++E665 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  20++E669 01 11
  21++E66B 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  21++E66F 23 33
  22++E671 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  22++E675 00 33
  23++E677 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  23++E67B 00 33
  24++E67D 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  24++E681 33 33
  25++E683 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  25++E687 00 00
  26++E689 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  26++E68D 44 44
  27++E68F 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  27++E693 44 44
  28++E695 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  28++E699 44 44
  29++E69B 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  29++E69F 55 55
  30++E6A1 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  30++E6A5 55 55
  31++E6A7 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  31++E6AB 55 55
  32++E6AD              KraitVertSize           equ $  - KraitVertices
  33++E6AD 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  33++E6B1 1F 12 00 08
  34++E6B5 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  34++E6B9 1F 23 00 10
  35++E6BD 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  35++E6C1 1F 25 10 08
  36++E6C5 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  36++E6C9 1F 04 0C 04
  37++E6CD 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  37++E6D1 1C 23 10 18
  38++E6D5 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  38++E6D9 09 00 1C 28
  39++E6DD 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  39++E6E1 09 33 1C 24
  40++E6E5 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  40++E6E9 08 44 2C 34
  41++E6ED 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  41++E6F1 07 44 30 2C
  42++E6F5 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  42++E6F9 08 55 3C 40
  43++E6FD 08 55 40 38                          DB $08, $55, $40, $38
  44++E701              KraitEdgesSize          equ $  - KraitEdges
  45++E701              KraitEdgesCnt           equ KraitEdgesSize/4
  46++E701 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  47++E705 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  47++E709 DF 07 30 06
  48++E70D 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  48++E711 3F 4D 00 9A
  49++E715 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  50++E719              KraitNormalsSize        equ $  - KraitNormals
  51++E719              KraitLen                equ $  - Krait
  52++E719
# file closed: ./Data/Ships/Krait.asm
  89+ E719                                      include "Data/Ships/Logo.asm"
# file opened: ./Data/Ships/Logo.asm
   1++E719 00 26 49     Logo:	DB $00, $26, $49
   2++E71C 2D E8        	DW LogoEdges
   3++E71E 94           	DB LogoEdgesSize
   4++E71F 00 36        	DB $00, $36
   5++E721 FC           	DB LogoVertSize
   6++E722 25           	DB LogoEdgesCnt
   7++E723 00 00        	DB $00, $00
   8++E725 14           	DB LogoNormalsSize
   9++E726 63 FC 24     	DB $63, $FC, $24
  10++E729 C1 E8        	DW LogoNormals
  11++E72B 01 00        	DB $01, $00
  12++E72D 31 E7        	DW LogoVertices
  13++E72F 00 00                                DB 0,0                      ; Type and Tactics
  14++E731
  15++E731 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  15++E735 00 00
  16++E737 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  16++E73B 00 00
  17++E73D 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  17++E741 00 00
  18++E743 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  18++E747 00 00
  19++E749 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  19++E74D 00 00
  20++E74F 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  20++E753 00 00
  21++E755 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  21++E759 00 00
  22++E75B 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  22++E75F 00 00
  23++E761 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  23++E765 00 00
  24++E767 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  24++E76B 00 00
  25++E76D 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  25++E771 00 00
  26++E773 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  26++E777 00 00
  27++E779 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  27++E77D 02 33
  28++E77F 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  28++E783 02 44
  29++E785 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  29++E789 01 33
  30++E78B 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  30++E78F 02 33
  31++E791 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  31++E795 02 44
  32++E797 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  32++E79B 01 44
  33++E79D 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  33++E7A1 00 00
  34++E7A3 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7A7 00 00
  35++E7A9 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7AD 00 00
  36++E7AF 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  36++E7B3 00 00
  37++E7B5 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  37++E7B9 00 00
  38++E7BB 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  38++E7BF 00 00
  39++E7C1 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  39++E7C5 00 00
  40++E7C7 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  40++E7CB 00 00
  41++E7CD 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  41++E7D1 00 00
  42++E7D3 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  42++E7D7 00 00
  43++E7D9 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  43++E7DD 00 00
  44++E7DF 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  44++E7E3 00 00
  45++E7E5 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  45++E7E9 00 00
  46++E7EB 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  46++E7EF 00 00
  47++E7F1 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  47++E7F5 00 00
  48++E7F7 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  48++E7FB 00 00
  49++E7FD 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  49++E801 00 00
  50++E803 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  50++E807 00 00
  51++E809 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  51++E80D 00 00
  52++E80F 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  52++E813 00 00
  53++E815 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  53++E819 00 00
  54++E81B 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  54++E81F 00 00
  55++E821 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  55++E825 00 00
  56++E827 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  56++E82B 00 00
  57++E82D
  58++E82D              LogoVertSize: equ $ - LogoVertices
  59++E82D
  60++E82D
  61++E82D
  62++E82D 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  63++E831 1F 00 04 08  	DB $1F, $00, $04, $08
  64++E835 1F 00 08 0C  	DB $1F, $00, $08, $0C
  65++E839 1F 00 0C 10  	DB $1F, $00, $0C, $10
  66++E83D 1F 00 10 14  	DB $1F, $00, $10, $14
  67++E841 1F 00 14 18  	DB $1F, $00, $14, $18
  68++E845 1F 00 18 1C  	DB $1F, $00, $18, $1C
  69++E849 1F 00 1C 20  	DB $1F, $00, $1C, $20
  70++E84D 1F 00 20 24  	DB $1F, $00, $20, $24
  71++E851 1F 00 24 28  	DB $1F, $00, $24, $28
  72++E855 1F 00 28 2C  	DB $1F, $00, $28, $2C
  73++E859 1F 00 2C 00  	DB $1F, $00, $2C, $00
  74++E85D 1E 03 38 3C  	DB $1E, $03, $38, $3C
  75++E861 1E 01 3C 40  	DB $1E, $01, $3C, $40
  76++E865 1E 04 40 44  	DB $1E, $04, $40, $44
  77++E869 1E 01 44 38  	DB $1E, $01, $44, $38
  78++E86D 1E 03 10 30  	DB $1E, $03, $10, $30
  79++E871 1E 22 30 34  	DB $1E, $22, $30, $34
  80++E875 1E 04 34 20  	DB $1E, $04, $34, $20
  81++E879 1E 11 20 10  	DB $1E, $11, $20, $10
  82++E87D 1E 13 10 38  	DB $1E, $13, $10, $38
  83++E881 1E 13 30 3C  	DB $1E, $13, $30, $3C
  84++E885 1E 24 34 40  	DB $1E, $24, $34, $40
  85++E889 1E 14 20 44  	DB $1E, $14, $20, $44
  86++E88D 1E 00 54 58  	DB $1E, $00, $54, $58
  87++E891 1E 00 58 60  	DB $1E, $00, $58, $60
  88++E895 1E 00 60 64  	DB $1E, $00, $60, $64
  89++E899 1E 00 5C 68  	DB $1E, $00, $5C, $68
  90++E89D 1E 00 6C 70  	DB $1E, $00, $6C, $70
  91++E8A1 1E 00 70 74  	DB $1E, $00, $70, $74
  92++E8A5 1E 00 78 7C  	DB $1E, $00, $78, $7C
  93++E8A9 1E 00 80 84  	DB $1E, $00, $80, $84
  94++E8AD 1E 00 88 8C  	DB $1E, $00, $88, $8C
  95++E8B1 1E 00 90 94  	DB $1E, $00, $90, $94
  96++E8B5 1E 00 94 9C  	DB $1E, $00, $94, $9C
  97++E8B9 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  98++E8BD 1E 00 A4 98  	DB $1E, $00, $A4, $98
  99++E8C1
 100++E8C1              LogoEdgesSize: equ $ - LogoEdges
 101++E8C1
 102++E8C1
 103++E8C1              LogoEdgesCnt: equ LogoEdgesSize/4
 104++E8C1
 105++E8C1
 106++E8C1 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 107++E8C5 1F 00 04 0F  	DB $1F, $00, $04, $0F
 108++E8C9 3F 00 0D 34  	DB $3F, $00, $0D, $34
 109++E8CD 9F 51 51 00  	DB $9F, $51, $51, $00
 110++E8D1 1F 51 51 00  	DB $1F, $51, $51, $00
 111++E8D5
 112++E8D5
 113++E8D5              LogoNormalsSize: equ $ - LogoNormals
 114++E8D5              LogoLen: equ $ - Logo
 115++E8D5
# file closed: ./Data/Ships/Logo.asm
  90+ E8D5                                      include "Data/Ships/Mamba.asm"
# file opened: ./Data/Ships/Mamba.asm
   1++E8D5 01 13 24     Mamba:	DB $01, $13, $24
   2++E8D8 83 E9        	DW MambaEdges
   3++E8DA 70           	DB MambaEdgesSize
   4++E8DB 00 22        	DB $00, $22
   5++E8DD 96           	DB MambaVertSize
   6++E8DE 1C           	DB MambaEdgesCnt
   7++E8DF 00 96        	DB $00, $96
   8++E8E1 14           	DB MambaNormalsSize
   9++E8E2 19 5A 1E     	DB $19, $5A, $1E
  10++E8E5 F3 E9        	DW MambaNormals
  11++E8E7 02 12        	DB $02, $12
  12++E8E9 ED E8        	DW MambaVertices
  13++E8EB 00 00                                DB 0,0                      ; Type and Tactics
  14++E8ED
  15++E8ED 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  15++E8F1 10 32
  16++E8F3 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  16++E8F7 20 44
  17++E8F9 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  17++E8FD 21 44
  18++E8FF 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  18++E903 31 44
  19++E905 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  19++E909 30 44
  20++E90B 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  20++E90F 11 11
  21++E911 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  21++E915 11 11
  22++E917 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  22++E91B 11 11
  23++E91D 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  23++E921 11 11
  24++E923 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  24++E927 00 00
  25++E929 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  25++E92D 00 00
  26++E92F 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  26++E933 00 00
  27++E935 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  27++E939 00 00
  28++E93B 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  28++E93F 00 00
  29++E941 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  29++E945 00 00
  30++E947 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  30++E94B 44 44
  31++E94D 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  31++E951 44 44
  32++E953 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  32++E957 44 44
  33++E959 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  33++E95D 44 44
  34++E95F 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  34++E963 44 44
  35++E965 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  35++E969 44 44
  36++E96B 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  36++E96F 44 44
  37++E971 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  37++E975 44 44
  38++E977 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  38++E97B 44 44
  39++E97D 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  39++E981 44 44
  40++E983
  41++E983              MambaVertSize: equ $ - MambaVertices
  42++E983
  43++E983
  44++E983
  45++E983 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  46++E987 1F 30 00 10  	DB $1F, $30, $00, $10
  47++E98B 1F 40 04 10  	DB $1F, $40, $04, $10
  48++E98F 1E 42 04 08  	DB $1E, $42, $04, $08
  49++E993 1E 41 08 0C  	DB $1E, $41, $08, $0C
  50++E997 1E 43 0C 10  	DB $1E, $43, $0C, $10
  51++E99B 0E 11 14 18  	DB $0E, $11, $14, $18
  52++E99F 0C 11 18 1C  	DB $0C, $11, $18, $1C
  53++E9A3 0D 11 1C 20  	DB $0D, $11, $1C, $20
  54++E9A7 0C 11 14 20  	DB $0C, $11, $14, $20
  55++E9AB 14 00 24 2C  	DB $14, $00, $24, $2C
  56++E9AF 10 00 24 30  	DB $10, $00, $24, $30
  57++E9B3 10 00 28 34  	DB $10, $00, $28, $34
  58++E9B7 14 00 28 38  	DB $14, $00, $28, $38
  59++E9BB 0E 00 34 38  	DB $0E, $00, $34, $38
  60++E9BF 0E 00 2C 30  	DB $0E, $00, $2C, $30
  61++E9C3 0D 44 3C 40  	DB $0D, $44, $3C, $40
  62++E9C7 0E 44 44 48  	DB $0E, $44, $44, $48
  63++E9CB 0C 44 3C 48  	DB $0C, $44, $3C, $48
  64++E9CF 0C 44 40 44  	DB $0C, $44, $40, $44
  65++E9D3 07 44 50 54  	DB $07, $44, $50, $54
  66++E9D7 05 44 50 60  	DB $05, $44, $50, $60
  67++E9DB 05 44 54 60  	DB $05, $44, $54, $60
  68++E9DF 07 44 4C 58  	DB $07, $44, $4C, $58
  69++E9E3 05 44 4C 5C  	DB $05, $44, $4C, $5C
  70++E9E7 05 44 58 5C  	DB $05, $44, $58, $5C
  71++E9EB 1E 21 00 08  	DB $1E, $21, $00, $08
  72++E9EF 1E 31 00 0C  	DB $1E, $31, $00, $0C
  73++E9F3
  74++E9F3              MambaEdgesSize: equ $ - MambaEdges
  75++E9F3
  76++E9F3
  77++E9F3              MambaEdgesCnt: equ MambaEdgesSize/4
  78++E9F3
  79++E9F3
  80++E9F3 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  81++E9F7 1E 00 18 02  	DB $1E, $00, $18, $02
  82++E9FB 9E 20 40 10  	DB $9E, $20, $40, $10
  83++E9FF 1E 20 40 10  	DB $1E, $20, $40, $10
  84++EA03 3E 00 00 7F  	DB $3E, $00, $00, $7F
  85++EA07
  86++EA07              MambaNormalsSize: equ $ - MambaNormals
  87++EA07              MambaLen: equ $ - Mamba
  88++EA07
# file closed: ./Data/Ships/Mamba.asm
  91+ EA07                                      include "Data/Ships/Missile.asm"
# file opened: ./Data/Ships/Missile.asm
   1++EA07 00 06 40     Missile:	DB $00, $06, $40
   2++EA0A 85 EA        	DW MissileEdges
   3++EA0C 60           	DB MissileEdgesSize
   4++EA0D 00 0A        	DB $00, $0A
   5++EA0F 66           	DB MissileVertSize
   6++EA10 18           	DB MissileEdgesCnt
   7++EA11 00 00        	DB $00, $00
   8++EA13 24           	DB MissileNormalsSize
   9++EA14 0E 02 2C     	DB $0E, $02, $2C
  10++EA17 E5 EA        	DW MissileNormals
  11++EA19 02 00        	DB $02, $00
  12++EA1B 1F EA        	DW MissileVertices
  13++EA1D 01 00            DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA1F
  15++EA1F 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  15++EA23 10 32
  16++EA25 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  16++EA29 21 54
  17++EA2B 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  17++EA2F 32 74
  18++EA31 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  18++EA35 30 76
  19++EA37 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  19++EA3B 10 65
  20++EA3D 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  20++EA41 74 88
  21++EA43 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  21++EA47 54 88
  22++EA49 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  22++EA4D 65 88
  23++EA4F 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  23++EA53 76 88
  24++EA55 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  24++EA59 74 88
  25++EA5B 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  25++EA5F 54 88
  26++EA61 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  26++EA65 65 88
  27++EA67 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  27++EA6B 76 88
  28++EA6D 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  28++EA71 76 77
  29++EA73 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  29++EA77 65 66
  30++EA79 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  30++EA7D 74 77
  31++EA7F 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  31++EA83 54 55
  32++EA85
  33++EA85              MissileVertSize: equ $ - MissileVertices
  34++EA85
  35++EA85
  36++EA85
  37++EA85 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  38++EA89 1F 32 00 08  	DB $1F, $32, $00, $08
  39++EA8D 1F 30 00 0C  	DB $1F, $30, $00, $0C
  40++EA91 1F 10 00 10  	DB $1F, $10, $00, $10
  41++EA95 1F 24 04 08  	DB $1F, $24, $04, $08
  42++EA99 1F 51 04 10  	DB $1F, $51, $04, $10
  43++EA9D 1F 60 0C 10  	DB $1F, $60, $0C, $10
  44++EAA1 1F 73 08 0C  	DB $1F, $73, $08, $0C
  45++EAA5 1F 74 08 14  	DB $1F, $74, $08, $14
  46++EAA9 1F 54 04 18  	DB $1F, $54, $04, $18
  47++EAAD 1F 65 10 1C  	DB $1F, $65, $10, $1C
  48++EAB1 1F 76 0C 20  	DB $1F, $76, $0C, $20
  49++EAB5 1F 86 1C 20  	DB $1F, $86, $1C, $20
  50++EAB9 1F 87 14 20  	DB $1F, $87, $14, $20
  51++EABD 1F 84 14 18  	DB $1F, $84, $14, $18
  52++EAC1 1F 85 18 1C  	DB $1F, $85, $18, $1C
  53++EAC5 08 85 18 28  	DB $08, $85, $18, $28
  54++EAC9 08 87 14 24  	DB $08, $87, $14, $24
  55++EACD 08 87 20 30  	DB $08, $87, $20, $30
  56++EAD1 08 85 1C 2C  	DB $08, $85, $1C, $2C
  57++EAD5 08 74 24 3C  	DB $08, $74, $24, $3C
  58++EAD9 08 54 28 40  	DB $08, $54, $28, $40
  59++EADD 08 76 30 34  	DB $08, $76, $30, $34
  60++EAE1 08 65 2C 38  	DB $08, $65, $2C, $38
  61++EAE5
  62++EAE5              MissileEdgesSize: equ $ - MissileEdges
  63++EAE5
  64++EAE5
  65++EAE5              MissileEdgesCnt: equ MissileEdgesSize/4
  66++EAE5
  67++EAE5
  68++EAE5 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  69++EAE9 5F 00 40 10  	DB $5F, $00, $40, $10
  70++EAED 1F 40 00 10  	DB $1F, $40, $00, $10
  71++EAF1 1F 00 40 10  	DB $1F, $00, $40, $10
  72++EAF5 1F 20 00 00  	DB $1F, $20, $00, $00
  73++EAF9 5F 00 20 00  	DB $5F, $00, $20, $00
  74++EAFD 9F 20 00 00  	DB $9F, $20, $00, $00
  75++EB01 1F 00 20 00  	DB $1F, $00, $20, $00
  76++EB05 3F 00 00 B0  	DB $3F, $00, $00, $B0
  77++EB09
  78++EB09
  79++EB09              MissileNormalsSize: equ $ - MissileNormals
  80++EB09              MissileLen: equ $ - Missile
  81++EB09
# file closed: ./Data/Ships/Missile.asm
  92+ EB09                                      include "Data/Ships/Monitor.asm"
# file opened: ./Data/Ships/Monitor.asm
   1++EB09 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB0C 87 EB                                DW MonitorEdges
   3++EB0E 5C                                   DB MonitorEdgesSize
   4++EB0F 00 2A                                DB $00, $2A
   5++EB11 66                                   DB MonitorVertSize
   6++EB12 17                                   DB MonitorEdgesCnt
   7++EB13 01 90                                DB $01, $90
   8++EB15 2C                                   DB MonitorNormalsSize
   9++EB16 28 84 10                             DB $28, $84, $10
  10++EB19 E3 EB                                DW MonitorNormals
  11++EB1B 00 37                                DB $00, $37
  12++EB1D 21 EB                                DW MonitorVertices
  13++EB1F 00 00                                DB 0,0                      ; Type and Tactics
  14++EB21
  15++EB21 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  15++EB25 FF FF
  16++EB27 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  16++EB2B 23 01
  17++EB2D 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  17++EB31 50 34
  18++EB33 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  18++EB37 78 12
  19++EB39 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  19++EB3D 96 45
  20++EB3F 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  20++EB43 AA 28
  21++EB45 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  21++EB49 AA 49
  22++EB4B 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  22++EB4F AA 23
  23++EB51 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  23++EB55 AA 34
  24++EB57 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  24++EB5B AA 89
  25++EB5D 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  25++EB61 89 67
  26++EB63 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  26++EB67 00 00
  27++EB69 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  27++EB6D 00 00
  28++EB6F 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  28++EB73 77 77
  29++EB75 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  29++EB79 77 77
  30++EB7B 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  30++EB7F 66 66
  31++EB81 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  31++EB85 66 66
  32++EB87              MonitorVertSize:        equ $ - MonitorVertices
  33++EB87 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  34++EB8B 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  35++EB8F 1F 23 04 1C                          DB $1F, $23, $04, $1C
  36++EB93 1F 34 08 20                          DB $1F, $34, $08, $20
  37++EB97 1F 45 08 10                          DB $1F, $45, $08, $10
  38++EB9B 1F 50 00 08                          DB $1F, $50, $00, $08
  39++EB9F 1F 03 04 08                          DB $1F, $03, $04, $08
  40++EBA3 1F 67 00 28                          DB $1F, $67, $00, $28
  41++EBA7 1F 78 0C 28                          DB $1F, $78, $0C, $28
  42++EBAB 1F 89 24 28                          DB $1F, $89, $24, $28
  43++EBAF 1F 96 10 28                          DB $1F, $96, $10, $28
  44++EBB3 1F 17 00 0C                          DB $1F, $17, $00, $0C
  45++EBB7 1F 28 0C 14                          DB $1F, $28, $0C, $14
  46++EBBB 1F 49 18 10                          DB $1F, $49, $18, $10
  47++EBBF 1F 56 10 00                          DB $1F, $56, $10, $00
  48++EBC3 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  49++EBC7 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  50++EBCB 1F 4A 20 18                          DB $1F, $4A, $20, $18
  51++EBCF 1F 8A 14 24                          DB $1F, $8A, $14, $24
  52++EBD3 1F 9A 18 24                          DB $1F, $9A, $18, $24
  53++EBD7 0A 00 2C 30                          DB $0A, $00, $2C, $30
  54++EBDB 0A 77 34 38                          DB $0A, $77, $34, $38
  55++EBDF 0A 66 3C 40                          DB $0A, $66, $3C, $40
  56++EBE3              MonitorEdgesSize:       equ $ - MonitorEdges
  57++EBE3              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  58++EBE3 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  59++EBE7 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  60++EBEB 3F 36 1C 10                          DB $3F, $36, $1C, $10
  61++EBEF 3F 00 39 1C                          DB $3F, $00, $39, $1C
  62++EBF3 BF 36 1C 10                          DB $BF, $36, $1C, $10
  63++EBF7 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  64++EBFB DF 26 2F 12                          DB $DF, $26, $2F, $12
  65++EBFF 5F 26 2F 12                          DB $5F, $26, $2F, $12
  66++EC03 7F 27 30 0D                          DB $7F, $27, $30, $0D
  67++EC07 FF 27 30 0D                          DB $FF, $27, $30, $0D
  68++EC0B 3F 00 00 40                          DB $3F, $00, $00, $40
  69++EC0F              MonitorNormalsSize:     equ $ - MonitorNormals
  70++EC0F              MonitorLen:             equ $ - Monitor
  71++EC0F
# file closed: ./Data/Ships/Monitor.asm
  93+ EC0F                                      include "Data/Ships/Moray.asm"
# file opened: ./Data/Ships/Moray.asm
   1++EC0F 01 03 84     Moray:	                DB $01, $03, $84
   2++EC12 7B EC                                DW MorayEdges
   3++EC14 4C                                   DB MorayEdgesSize
   4++EC15 00 1A                                DB $00, $1A
   5++EC17 54                                   DB MorayVertSize
   6++EC18 13                                   DB MorayEdgesCnt
   7++EC19 00 32                                DB $00, $32
   8++EC1B 24                                   DB MorayNormalsSize
   9++EC1C 28 59 19                             DB $28, $59, $19
  10++EC1F C7 EC                                DW MorayNormals
  11++EC21 02 2A                                DB $02, $2A
  12++EC23 27 EC                                DW MorayVertices
  13++EC25 00 00                                DB 0,0                      ; Type and Tactics
  14++EC27
  15++EC27 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  15++EC2B 02 78
  16++EC2D 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  16++EC31 01 67
  17++EC33 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  17++EC37 FF FF
  18++EC39 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  18++EC3D 13 66
  19++EC3F 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  19++EC43 25 88
  20++EC45 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  20++EC49 45 78
  21++EC4B 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  21++EC4F 34 67
  22++EC51 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  22++EC55 44 44
  23++EC57 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  23++EC5B 44 44
  24++EC5D 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  24++EC61 44 44
  25++EC63 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  25++EC67 00 00
  26++EC69 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  26++EC6D 00 00
  27++EC6F 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  27++EC73 00 00
  28++EC75 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  28++EC79 00 00
  29++EC7B              MorayVertSize:          equ $ - MorayVertices
  30++EC7B 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  31++EC7F 1F 16 04 0C                          DB $1F, $16, $04, $0C
  32++EC83 18 36 0C 18                          DB $18, $36, $0C, $18
  33++EC87 18 47 14 18                          DB $18, $47, $14, $18
  34++EC8B 18 58 10 14                          DB $18, $58, $10, $14
  35++EC8F 1F 28 00 10                          DB $1F, $28, $00, $10
  36++EC93 0F 67 04 18                          DB $0F, $67, $04, $18
  37++EC97 0F 78 00 14                          DB $0F, $78, $00, $14
  38++EC9B 0F 02 00 08                          DB $0F, $02, $00, $08
  39++EC9F 0F 01 04 08                          DB $0F, $01, $04, $08
  40++ECA3 11 13 08 0C                          DB $11, $13, $08, $0C
  41++ECA7 11 25 08 10                          DB $11, $25, $08, $10
  42++ECAB 0D 45 08 14                          DB $0D, $45, $08, $14
  43++ECAF 0D 34 08 18                          DB $0D, $34, $08, $18
  44++ECB3 05 44 1C 20                          DB $05, $44, $1C, $20
  45++ECB7 07 44 1C 24                          DB $07, $44, $1C, $24
  46++ECBB 07 44 20 24                          DB $07, $44, $20, $24
  47++ECBF 05 00 28 2C                          DB $05, $00, $28, $2C
  48++ECC3 05 00 30 34                          DB $05, $00, $30, $34
  49++ECC7              MorayEdgesSize:         equ $ - MorayEdges
  50++ECC7              MorayEdgesCnt:          equ MorayEdgesSize/4
  51++ECC7 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  52++ECCB 9F 0A 31 07                          DB $9F, $0A, $31, $07
  53++ECCF 1F 0A 31 07                          DB $1F, $0A, $31, $07
  54++ECD3 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  55++ECD7 78 00 34 4E                          DB $78, $00, $34, $4E
  56++ECDB 78 3B 1C 65                          DB $78, $3B, $1C, $65
  57++ECDF DF 48 63 32                          DB $DF, $48, $63, $32
  58++ECE3 5F 00 53 1E                          DB $5F, $00, $53, $1E
  59++ECE7 5F 48 63 32                          DB $5F, $48, $63, $32
  60++ECEB
  61++ECEB              MorayNormalsSize:       equ $ - MorayNormals
  62++ECEB              MorayLen:               equ $ - Moray
  63++ECEB
# file closed: ./Data/Ships/Moray.asm
  94+ ECEB                                      include "Data/Ships/Ophidian.asm"
# file opened: ./Data/Ships/Ophidian.asm
   1++ECEB 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ECEE 7B ED                                DW OphidianEdges
   3++ECF0 78                                   DB OphidianEdgesSize
   4++ECF1 00 3C                                DB $00, $3C
   5++ECF3 78                                   DB OphidianVertSize
   6++ECF4 1E                                   DB OphidianEdgesCnt
   7++ECF5 00 32                                DB $00, $32
   8++ECF7 30                                   DB OphidianNormalsSize
   9++ECF8 14 40 22                             DB $14, $40, $22
  10++ECFB F3 ED                                DW OphidianNormals
  11++ECFD 01 1A                                DB $01, $1A
  12++ECFF 03 ED                                DW OphidianVertices
  13++ED01 00 00                                DB 0,0                      ; Type and Tactics
  14++ED03
  15++ED03 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  15++ED07 68 02
  16++ED09 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  16++ED0D 67 01
  17++ED0F 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  17++ED13 22 01
  18++ED15 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  18++ED19 8A 24
  19++ED1B 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  19++ED1F 79 13
  20++ED21 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  20++ED25 FF FF
  21++ED27 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  21++ED2B 9B 35
  22++ED2D 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  22++ED31 AB 45
  23++ED33 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  23++ED37 BB 4A
  24++ED39 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  24++ED3D FF FF
  25++ED3F 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  25++ED43 FF FF
  26++ED45 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  26++ED49 BB 39
  27++ED4B 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  27++ED4F FF FF
  28++ED51 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  28++ED55 FF FF
  29++ED57 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  29++ED5B BB 9A
  30++ED5D 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  30++ED61 FF FF
  31++ED63 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  31++ED67 BB BB
  32++ED69 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  32++ED6D BB BB
  33++ED6F 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  33++ED73 BB BB
  34++ED75 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  34++ED79 BB BB
  35++ED7B
  36++ED7B              OphidianVertSize:       equ $ - OphidianVertices
  37++ED7B 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  38++ED7F 1F 01 04 08                          DB $1F, $01, $04, $08
  39++ED83 1F 02 00 08                          DB $1F, $02, $00, $08
  40++ED87 1F 12 08 14                          DB $1F, $12, $08, $14
  41++ED8B 1F 13 10 14                          DB $1F, $13, $10, $14
  42++ED8F 1F 24 0C 14                          DB $1F, $24, $0C, $14
  43++ED93 1F 35 14 18                          DB $1F, $35, $14, $18
  44++ED97 1F 45 14 1C                          DB $1F, $45, $14, $1C
  45++ED9B 1F 28 00 0C                          DB $1F, $28, $00, $0C
  46++ED9F 1F 17 04 10                          DB $1F, $17, $04, $10
  47++EDA3 1F 39 10 2C                          DB $1F, $39, $10, $2C
  48++EDA7 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  49++EDAB 1F 67 04 3C                          DB $1F, $67, $04, $3C
  50++EDAF 1F 68 00 3C                          DB $1F, $68, $00, $3C
  51++EDB3 1F 79 10 3C                          DB $1F, $79, $10, $3C
  52++EDB7 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  53++EDBB 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  54++EDBF 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  55++EDC3 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  56++EDC7 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  57++EDCB 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  58++EDCF 1F AB 20 38                          DB $1F, $AB, $20, $38
  59++EDD3 10 BB 40 44                          DB $10, $BB, $40, $44
  60++EDD7 10 BB 44 48                          DB $10, $BB, $44, $48
  61++EDDB 10 BB 48 4C                          DB $10, $BB, $48, $4C
  62++EDDF 10 BB 4C 40                          DB $10, $BB, $4C, $40
  63++EDE3 10 39 30 34                          DB $10, $39, $30, $34
  64++EDE7 10 39 2C 30                          DB $10, $39, $2C, $30
  65++EDEB 10 4A 28 24                          DB $10, $4A, $28, $24
  66++EDEF 10 4A 24 20                          DB $10, $4A, $24, $20
  67++EDF3              OphidianEdgesSize:      equ $ - OphidianEdges
  68++EDF3              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  69++EDF3
  70++EDF3 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  71++EDF7 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  72++EDFB 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  73++EDFF 1F 10 22 02                          DB $1F, $10, $22, $02
  74++EE03 9F 10 22 02                          DB $9F, $10, $22, $02
  75++EE07 3F 00 25 03                          DB $3F, $00, $25, $03
  76++EE0B 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  77++EE0F 5F 0A 14 02                          DB $5F, $0A, $14, $02
  78++EE13 DF 0A 14 02                          DB $DF, $0A, $14, $02
  79++EE17 7F 12 20 02                          DB $7F, $12, $20, $02
  80++EE1B FF 12 20 02                          DB $FF, $12, $20, $02
  81++EE1F 3F 00 00 25                          DB $3F, $00, $00, $25
  82++EE23
  83++EE23              OphidianNormalsSize:    equ $ - OphidianNormals
  84++EE23              OphidianLen:            equ $ - Ophidian
  85++EE23
# file closed: ./Data/Ships/Ophidian.asm
  95+ EE23                                      include "Data/Ships/Plate.asm"
# file opened: ./Data/Ships/Plate.asm
   1++EE23 80 00 64     Plate:	DB $80, $00, $64
   2++EE26 4D EE        	DW PlateEdges
   3++EE28 10           	DB PlateEdgesSize
   4++EE29 00 0A        	DB $00, $0A
   5++EE2B 12           	DB PlateVertSize
   6++EE2C 04           	DB PlateEdgesCnt
   7++EE2D 00 00        	DB $00, $00
   8++EE2F 04           	DB PlateNormalsSize
   9++EE30 05 10 10     	DB $05, $10, $10
  10++EE33 5D EE        	DW PlateNormals
  11++EE35 03 00        	DB $03, $00
  12++EE37 3B EE        	DW PlateVertices
  13++EE39 00 00                                DB 0,0                      ; Type and Tactics
  14++EE3B
  15++EE3B
  16++EE3B 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  16++EE3F FF FF
  17++EE41 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  17++EE45 FF FF
  18++EE47 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  18++EE4B FF FF
  19++EE4D
  20++EE4D              PlateVertSize: equ $ - PlateVertices
  21++EE4D
  22++EE4D
  23++EE4D
  24++EE4D 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  25++EE51 10 FF 04 08  	DB $10, $FF, $04, $08
  26++EE55 14 FF 08 0C  	DB $14, $FF, $08, $0C
  27++EE59 10 FF 0C 00  	DB $10, $FF, $0C, $00
  28++EE5D
  29++EE5D              PlateEdgesSize: equ $ - PlateEdges
  30++EE5D
  31++EE5D
  32++EE5D              PlateEdgesCnt: equ PlateEdgesSize/4
  33++EE5D
  34++EE5D
  35++EE5D 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  36++EE61
  37++EE61
  38++EE61              PlateNormalsSize: equ $ - PlateNormals
  39++EE61              PlateLen: equ $ - Plate
  40++EE61
# file closed: ./Data/Ships/Plate.asm
  96+ EE61                                      include "Data/Ships/Python.asm"
# file opened: ./Data/Ships/Python.asm
   1++EE61              ;\ -> &5BA1 \ Python = Type 12
   2++EE61 05 00 19     Python:                 DB $05, $00, $19
   3++EE64 BB EE                                DW PythonEdges
   4++EE66 68                                   DB PythonEdgesSize
   5++EE67 00 2A                                DB $00,$2A
   6++EE69 42                                   DB PythonVertSize
   7++EE6A 1A                                   DB PythonEdgesCnt
   8++EE6B 00 00                                DB $00,$00
   9++EE6D 34                                   DB PythonNormalsSize
  10++EE6E 28 FA 14                             DB $28,$FA,$14
  11++EE71 23 EF                                DW PythonNormals
  12++EE73 00 1B                                DB $00, $1B
  13++EE75 79 EE                                DW PythonVertices
  14++EE77 00 00                                DB 0,0                      ; Type and Tactics
  15++EE79
  16++EE79 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  16++EE7D 10 32
  17++EE7F 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  17++EE83 10 54
  18++EE85 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  18++EE89 FF FF
  19++EE8B 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  19++EE8F FF FF
  20++EE91 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  20++EE95 54 98
  21++EE97 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  21++EE9B 89 CC
  22++EE9D 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  22++EEA1 B8 CC
  23++EEA3 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  23++EEA7 A9 CC
  24++EEA9 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  24++EEAD 32 76
  25++EEAF 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  25++EEB3 76 BA
  26++EEB5 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  26++EEB9 BA CC
  27++EEBB              PythonVertSize          equ $  - PythonVertices
  28++EEBB 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  28++EEBF 1F 20 00 0C
  29++EEC3 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  29++EEC7 1E 10 00 04
  30++EECB 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  30++EECF 1D 51 04 08
  31++EED3 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  31++EED7 1D 40 04 0C
  32++EEDB 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  32++EEDF 1D A7 08 24
  33++EEE3 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  33++EEE7 1D B6 0C 24
  34++EEEB 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  34++EEEF 05 BB 0C 28
  35++EEF3 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  35++EEF7 05 AA 08 28
  36++EEFB 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  36++EEFF 1F B8 0C 18
  37++EF03 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  37++EF07 1F C9 14 1C
  38++EF0B 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  38++EF0F 1D CB 18 28
  39++EF13 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  39++EF17 1D BA 24 28
  40++EF1B 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  40++EF1F 1D 76 20 24
  41++EF23              PythonEdgesSize         equ $  - PythonEdges
  42++EF23              PythonEdgesCnt          equ PythonEdgesSize/4
  43++EF23 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  43++EF27 1E 1B 28 0B
  44++EF2B DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  44++EF2F 5E 1B 28 0B
  45++EF33 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  45++EF37 1E 13 26 00
  46++EF3B DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  46++EF3F 5E 13 26 00
  47++EF43 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  47++EF47 3E 19 25 0B
  48++EF4B 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  48++EF4F FE 19 25 0B
  49++EF53 3E 00 00 70                          DB $3E, $00, $00, $70
  50++EF57              PythonNormalsSize       equ $  - PythonNormals
  51++EF57              PythonLen               equ $  - Python
  52++EF57
# file closed: ./Data/Ships/Python.asm
  97+ EF57                                      include "Data/Ships/Python_P.asm"
# file opened: ./Data/Ships/Python_P.asm
   1++EF57 02 19 00     Python_P:	DB $02, $19, $00
   2++EF5A B1 EF        	DW Python_PEdges
   3++EF5C 68           	DB Python_PEdgesSize
   4++EF5D 00 2A        	DB $00, $2A
   5++EF5F 42           	DB Python_PVertSize
   6++EF60 1A           	DB Python_PEdgesCnt
   7++EF61 00 C8        	DB $00, $C8
   8++EF63 34           	DB Python_PNormalsSize
   9++EF64 28 FA 14     	DB $28, $FA, $14
  10++EF67 19 F0        	DW Python_PNormals
  11++EF69 00 1B        	DB $00, $1B
  12++EF6B 6F EF        	DW Python_PVertices
  13++EF6D 00 00                                DB 0,0                      ; Type and Tactics
  14++EF6F
  15++EF6F 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  15++EF73 10 32
  16++EF75 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  16++EF79 10 54
  17++EF7B 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  17++EF7F FF FF
  18++EF81 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  18++EF85 FF FF
  19++EF87 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  19++EF8B 54 98
  20++EF8D 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  20++EF91 89 CC
  21++EF93 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  21++EF97 B8 CC
  22++EF99 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  22++EF9D A9 CC
  23++EF9F 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  23++EFA3 32 76
  24++EFA5 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  24++EFA9 76 BA
  25++EFAB 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  25++EFAF BA CC
  26++EFB1
  27++EFB1              Python_PVertSize: equ $ - Python_PVertices
  28++EFB1
  29++EFB1
  30++EFB1
  31++EFB1 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  32++EFB5 1F 20 00 0C  	DB $1F, $20, $00, $0C
  33++EFB9 1F 31 00 08  	DB $1F, $31, $00, $08
  34++EFBD 1F 10 00 04  	DB $1F, $10, $00, $04
  35++EFC1 1F 59 08 10  	DB $1F, $59, $08, $10
  36++EFC5 1F 51 04 08  	DB $1F, $51, $04, $08
  37++EFC9 1F 37 08 20  	DB $1F, $37, $08, $20
  38++EFCD 1F 40 04 0C  	DB $1F, $40, $04, $0C
  39++EFD1 1F 62 0C 20  	DB $1F, $62, $0C, $20
  40++EFD5 1F A7 08 24  	DB $1F, $A7, $08, $24
  41++EFD9 1F 84 0C 10  	DB $1F, $84, $0C, $10
  42++EFDD 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  43++EFE1 07 88 0C 14  	DB $07, $88, $0C, $14
  44++EFE5 07 BB 0C 28  	DB $07, $BB, $0C, $28
  45++EFE9 07 99 08 14  	DB $07, $99, $08, $14
  46++EFED 07 AA 08 28  	DB $07, $AA, $08, $28
  47++EFF1 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  48++EFF5 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  49++EFF9 1F C8 14 18  	DB $1F, $C8, $14, $18
  50++EFFD 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  51++F001 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  52++F005 1F CB 18 28  	DB $1F, $CB, $18, $28
  53++F009 1F 98 10 14  	DB $1F, $98, $10, $14
  54++F00D 1F BA 24 28  	DB $1F, $BA, $24, $28
  55++F011 1F 54 04 10  	DB $1F, $54, $04, $10
  56++F015 1F 76 20 24  	DB $1F, $76, $20, $24
  57++F019
  58++F019              Python_PEdgesSize: equ $ - Python_PEdges
  59++F019
  60++F019
  61++F019              Python_PEdgesCnt: equ Python_PEdgesSize/4
  62++F019
  63++F019
  64++F019 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  65++F01D 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  66++F021 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  67++F025 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  68++F029 9F 13 26 00  	DB $9F, $13, $26, $00
  69++F02D 1F 13 26 00  	DB $1F, $13, $26, $00
  70++F031 DF 13 26 00  	DB $DF, $13, $26, $00
  71++F035 5F 13 26 00  	DB $5F, $13, $26, $00
  72++F039 BF 19 25 0B  	DB $BF, $19, $25, $0B
  73++F03D 3F 19 25 0B  	DB $3F, $19, $25, $0B
  74++F041 7F 19 25 0B  	DB $7F, $19, $25, $0B
  75++F045 FF 19 25 0B  	DB $FF, $19, $25, $0B
  76++F049 3F 00 00 70  	DB $3F, $00, $00, $70
  77++F04D
  78++F04D
  79++F04D              Python_PNormalsSize: equ $ - Python_PNormals
  80++F04D              Python_PLen: equ $ - Python_P
  81++F04D
# file closed: ./Data/Ships/Python_P.asm
  98+ F04D
# file closed: ./Data/ShipModelMetaData2.asm
1262  F04D              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1263  F04D                  SLOT    ShipModelsAddr
1264  F04D                  PAGE    BankShipModels3
1265  F04D              	ORG     ShipModelsAddr, BankShipModels3
1266  E000
1267  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1268  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1268  E00F 06 00       >                        ld      b,0
1268  E011 4F          >                        ld      c,a                                 ; c= original ship id
1268  E012 CB 3F       >.ShiftLoop:             srl     a
1268  E014 CB 3F       >                        srl     a
1268  E016 CB 3F       >                        srl     a
1268  E018 CB 3F       >                        srl     a                                   ; divide by 16
1268  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1268  E01B 79          >                        ld      a,c
1268  E01C 50          >                        ld      d,b
1268  E01D 1E 10       >                        ld      e,16
1268  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1268  E021 93          >                        sub     e                                   ; a= actual model id now
1268  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1268  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1268  E024 7A          >                        ld      a,d                                 ; a = bank number
1268  E025             >;.. Now b = bank and a = adjusted ship nbr
1268  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1268  E028 ED 31       >                        add     hl,a
1268  E02A ED 31       >                        add     hl,a
1268  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1268  E02D             >                        ClearCarryFlag
1268  E02D B7          >                    or a
1268  E02E C9          >                        ret
1269  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1269  E02F 2A 16 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1269  E032 11 1A C3    >                        ld          de,UBnkHullVerticies
1269  E035 06 00       >                        ld          b,0
1269  E037 3A 0A C3    >                        ld			a,(VertexCtX6Addr)
1269  E03A 4F          >                        ld          c,a
1269  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1269  E03C CD B1 8E    >                        call        memcopy_dma
1269  E03F C9          >                        ret
1270  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1270  E040 2A 05 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1270  E043 11 46 C4    >                        ld          de,UBnkHullEdges
1270  E046 06 00       >                        ld          b,0
1270  E048 3A 07 C3    >                        ld			a,(LineX4Addr)
1270  E04B 4F          >                        ld          c,a
1270  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1270  E04D CD B1 8E    >                        call        memcopy_dma
1270  E050 C9          >                        ret
1271  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1271  E051 2A 12 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1271  E054 11 F6 C8    >                        ld          de,UBnkHullNormals
1271  E057 06 00       >                        ld          b,0
1271  E059 3A 0E C3    >                        ld          a,(FaceCtX4Addr)
1271  E05C 4F          >                        ld          c,a
1271  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1271  E05E CD B1 8E    >                        call        memcopy_dma
1271  E061 C9          >                        ret
1272  E062              ShipBankTable3:         MShipBankTable
1272  E062 3B 00       >                        DW      BankShipModels1
1272  E064 43 00       >                        DW      BankShipModels2
1272  E066 44 00       >                        DW      BankShipModels3
1272  E068 45 00       >                        DW      BankShipModels4
1273  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1273  E06A 21 00 C3    >                        ld          hl,UBnkShipModelBank
1273  E06D 36 44       >                        ld          (hl),BankShipModels3
1273  E06F 32 01 C3    >                        ld          (UBnkShipModelNbr),a
1273  E072 21 19 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1273  E075 ED 31       >                        add         hl,a
1273  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1273  E079 4E          >                        ld          c,(hl)
1273  E07A 23          >                        inc         hl
1273  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1273  E07C 21 99 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1273  E07F ED 31       >                        add         hl,a
1273  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1273  E083 7E          >                        ld          a,(hl)
1273  E084 23          >                        inc         hl
1273  E085 66          >                        ld          h,(hl)
1273  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1273  E087 11 02 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1273  E08A 01 18 00    >                        ld          bc,ShipDataLength
1273  E08D ED B0       >                        ldir
1273  E08F CD 2F E0    >                        call        CopyVertsToUniv
1273  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1273  E095 CD 51 E0    >                        call        CopyNormsToUniv
1273  E098 C9          >                        ret
1274  E099                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E099 19 E1        ShipModelTable3:         DW Rock_Hermit                             ;32
   2+ E09B F3 E1                                 DW ShuttleType9                            ;33
   3+ E09D 29 E3                                 DW Shuttle_Mk_2                            ;34
   4+ E09F 4B E4                                 DW Sidewinder                              ;35
   5+ E0A1 F7 E4                                 DW Splinter                                ;36
   6+ E0A3 4F E5                                 DW TestVector                              ;37
   7+ E0A5 B1 E5                                 DW Thargoid                                ;38
   8+ E0A7 D1 E6                                 DW Thargon                                 ;39
   9+ E0A9 7D E7                                 DW TransportType10                         ;40
  10+ E0AB 63 E9                                 DW Viper                                   ;41
  11+ E0AD 41 EA                                 DW Worm                                    ;42
  12+ E0AF F5 EA                                 DW Rattler                                 ;43
  13+ E0B1 00 00                                 DW 0                                       ;44
  14+ E0B3 00 00                                 DW 0                                       ;45
  15+ E0B5 00 00                                 DW 0                                       ;46
  16+ E0B7 00 00                                 DW 0                                       ;47
  17+ E0B9 31 E1        ShipVertexTable3:        DW Rock_HermitVertices
  18+ E0BB 0B E2                                 DW ShuttleType9Vertices
  19+ E0BD 41 E3                                 DW Shuttle_Mk_2Vertices
  20+ E0BF 63 E4                                 DW SidewinderVertices
  21+ E0C1 0F E5                                 DW SplinterVertices
  22+ E0C3 67 E5                                 DW TestVectorVertices
  23+ E0C5 C9 E5                                 DW ThargoidVertices
  24+ E0C7 E9 E6                                 DW ThargonVertices
  25+ E0C9 95 E7                                 DW TransportType10Vertices
  26+ E0CB 7B E9                                 DW ViperVertices
  27+ E0CD 59 EA                                 DW WormVertices
  28+ E0CF 0D EB                                 DW RattlerVertices
  29+ E0D1 67 E1        ShipEdgeTable3:          DW Rock_HermitEdges
  30+ E0D3 7D E2                                 DW ShuttleType9Edges
  31+ E0D5 A7 E3                                 DW Shuttle_Mk_2Edges
  32+ E0D7 9F E4                                 DW SidewinderEdges
  33+ E0D9 27 E5                                 DW SplinterEdges
  34+ E0DB 91 E5                                 DW TestVectorEdges
  35+ E0DD 41 E6                                 DW ThargoidEdges
  36+ E0DF 25 E7                                 DW ThargonEdges
  37+ E0E1 73 E8                                 DW TransportType10Edges
  38+ E0E3 D5 E9                                 DW ViperEdges
  39+ E0E5 95 EA                                 DW WormEdges
  40+ E0E7 67 EB                                 DW RattlerEdges
  41+ E0E9 BB E1        ShipNormalTable3:        DW Rock_HermitNormals
  42+ E0EB F5 E2                                 DW ShuttleType9Normals
  43+ E0ED 17 E4                                 DW Shuttle_Mk_2Normals
  44+ E0EF DB E4                                 DW SidewinderNormals
  45+ E0F1 3F E5                                 DW SplinterNormals
  46+ E0F3 A1 E5                                 DW TestVectorNormals
  47+ E0F5 A9 E6                                 DW ThargoidNormals
  48+ E0F7 61 E7                                 DW ThargonNormals
  49+ E0F9 2B E9                                 DW TransportType10Normals
  50+ E0FB 25 EA                                 DW ViperNormals
  51+ E0FD D5 EA                                 DW WormNormals
  52+ E0FF 67 EB                                 DW RattlerEdges
  53+ E101 DA 00        ShipModelSizeTable3:     DW Rock_HermitLen
  54+ E103 36 01                                 DW ShuttleType9Len
  55+ E105 22 01                                 DW Shuttle_Mk_2Len
  56+ E107 AC 00                                 DW SidewinderLen
  57+ E109 58 00                                 DW SplinterLen
  58+ E10B 62 00                                 DW TestVectorLen
  59+ E10D 20 01                                 DW ThargoidLen
  60+ E10F AC 00                                 DW ThargonLen
  61+ E111 E6 01                                 DW TransportType10Len
  62+ E113 DE 00                                 DW ViperLen
  63+ E115 B4 00                                 DW WormLen
  64+ E117 0E 01                                 DW RattlerLen
  65+ E119
  66+ E119                                      include "Data/Ships/Rock_Hermit.asm"
# file opened: ./Data/Ships/Rock_Hermit.asm
   1++E119 07 19 00     Rock_Hermit:	DB $07, $19, $00
   2++E11C 67 E1        	DW Rock_HermitEdges
   3++E11E 54           	DB Rock_HermitEdgesSize
   4++E11F 00 32        	DB $00, $32
   5++E121 36           	DB Rock_HermitVertSize
   6++E122 15           	DB Rock_HermitEdgesCnt
   7++E123 00 00        	DB $00, $00
   8++E125 38           	DB Rock_HermitNormalsSize
   9++E126 32 B4 1E     	DB $32, $B4, $1E
  10++E129 BB E1        	DW Rock_HermitNormals
  11++E12B 01 02        	DB $01, $02
  12++E12D 31 E1        	DW Rock_HermitVertices
  13++E12F 00 00                                DB 0,0                      ; Type and Tactics
  14++E131
  15++E131
  16++E131 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  16++E135 FF FF
  17++E137 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  17++E13B FF FF
  18++E13D 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  18++E141 FF FF
  19++E143 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  19++E147 FF FF
  20++E149 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  20++E14D 65 DC
  21++E14F 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  21++E153 FF FF
  22++E155 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  22++E159 10 32
  23++E15B 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  23++E15F FF FF
  24++E161 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  24++E165 98 BA
  25++E167
  26++E167
  27++E167              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  28++E167
  29++E167
  30++E167
  31++E167 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  32++E16B 1F D6 00 10  	DB $1F, $D6, $00, $10
  33++E16F 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  34++E173 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  35++E177 1F A3 04 08  	DB $1F, $A3, $04, $08
  36++E17B 1F 32 04 18  	DB $1F, $32, $04, $18
  37++E17F 1F 31 08 18  	DB $1F, $31, $08, $18
  38++E183 1F 41 08 14  	DB $1F, $41, $08, $14
  39++E187 1F 10 14 18  	DB $1F, $10, $14, $18
  40++E18B 1F 60 00 14  	DB $1F, $60, $00, $14
  41++E18F 1F 54 0C 14  	DB $1F, $54, $0C, $14
  42++E193 1F 20 00 18  	DB $1F, $20, $00, $18
  43++E197 1F 65 10 14  	DB $1F, $65, $10, $14
  44++E19B 1F A8 04 20  	DB $1F, $A8, $04, $20
  45++E19F 1F 87 04 1C  	DB $1F, $87, $04, $1C
  46++E1A3 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  47++E1A7 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  48++E1AB 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  49++E1AF 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  50++E1B3 1F BA 08 20  	DB $1F, $BA, $08, $20
  51++E1B7 1F 98 1C 20  	DB $1F, $98, $1C, $20
  52++E1BB
  53++E1BB              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  54++E1BB
  55++E1BB
  56++E1BB              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  57++E1BB
  58++E1BB
  59++E1BB 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  60++E1BF 5F 09 42 51  	DB $5F, $09, $42, $51
  61++E1C3 9F 48 40 1F  	DB $9F, $48, $40, $1F
  62++E1C7 DF 40 49 2F  	DB $DF, $40, $49, $2F
  63++E1CB 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  64++E1CF 1F 87 0F 23  	DB $1F, $87, $0F, $23
  65++E1D3 1F 26 4C 46  	DB $1F, $26, $4C, $46
  66++E1D7 BF 42 3B 27  	DB $BF, $42, $3B, $27
  67++E1DB FF 43 0F 50  	DB $FF, $43, $0F, $50
  68++E1DF 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  69++E1E3 FF 46 50 28  	DB $FF, $46, $50, $28
  70++E1E7 7F 3A 66 33  	DB $7F, $3A, $66, $33
  71++E1EB 3F 51 09 43  	DB $3F, $51, $09, $43
  72++E1EF 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  73++E1F3
  74++E1F3
  75++E1F3              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  76++E1F3              Rock_HermitLen: equ $ - Rock_Hermit
  77++E1F3
# file closed: ./Data/Ships/Rock_Hermit.asm
  67+ E1F3                                      include "Data/Ships/ShuttleType9.asm"
# file opened: ./Data/Ships/ShuttleType9.asm
   1++E1F3 0F 09 C4     ShuttleType9:	DB $0F, $09, $C4
   2++E1F6 7D E2        	DW ShuttleType9Edges
   3++E1F8 78           	DB ShuttleType9EdgesSize
   4++E1F9 00 26        	DB $00, $26
   5++E1FB 72           	DB ShuttleType9VertSize
   6++E1FC 1E           	DB ShuttleType9EdgesCnt
   7++E1FD 00 00        	DB $00, $00
   8++E1FF 34           	DB ShuttleType9NormalsSize
   9++E200 16 20 08     	DB $16, $20, $08
  10++E203 F5 E2        	DW ShuttleType9Normals
  11++E205 02 00        	DB $02, $00
  12++E207 0B E2        	DW ShuttleType9Vertices
  13++E209 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E20B
  15++E20B
  16++E20B 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  16++E20F FF FF
  17++E211 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  17++E215 FF FF
  18++E217 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  18++E21B FF FF
  19++E21D 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  19++E221 FF FF
  20++E223 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  20++E227 12 39
  21++E229 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  21++E22D 34 59
  22++E22F 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  22++E233 56 79
  23++E235 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  23++E239 17 89
  24++E23B 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  24++E23F 99 99
  25++E241 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  25++E245 99 99
  26++E247 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  26++E24B 99 99
  27++E24D 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  27++E251 99 99
  28++E253 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  28++E257 0A BC
  29++E259 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  29++E25D FF 02
  30++E25F 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  30++E263 01 F4
  31++E265 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  31++E269 A1 3F
  32++E26B 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  32++E26F 6B 23
  33++E271 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  33++E275 F8 C0
  34++E277 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  34++E27B 4F 18
  35++E27D
  36++E27D              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  37++E27D
  38++E27D
  39++E27D
  40++E27D 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  41++E281 1F 4A 04 08  	DB $1F, $4A, $04, $08
  42++E285 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  43++E289 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  44++E28D 1F 18 00 1C  	DB $1F, $18, $00, $1C
  45++E291 18 12 00 10  	DB $18, $12, $00, $10
  46++E295 1F 23 04 10  	DB $1F, $23, $04, $10
  47++E299 18 34 04 14  	DB $18, $34, $04, $14
  48++E29D 1F 45 08 14  	DB $1F, $45, $08, $14
  49++E2A1 0C 56 08 18  	DB $0C, $56, $08, $18
  50++E2A5 1F 67 0C 18  	DB $1F, $67, $0C, $18
  51++E2A9 18 78 0C 1C  	DB $18, $78, $0C, $1C
  52++E2AD 1F 39 10 14  	DB $1F, $39, $10, $14
  53++E2B1 1F 59 14 18  	DB $1F, $59, $14, $18
  54++E2B5 1F 79 18 1C  	DB $1F, $79, $18, $1C
  55++E2B9 1F 19 10 1C  	DB $1F, $19, $10, $1C
  56++E2BD 10 0C 00 30  	DB $10, $0C, $00, $30
  57++E2C1 10 0A 04 30  	DB $10, $0A, $04, $30
  58++E2C5 10 AB 08 30  	DB $10, $AB, $08, $30
  59++E2C9 10 BC 0C 30  	DB $10, $BC, $0C, $30
  60++E2CD 10 99 20 24  	DB $10, $99, $20, $24
  61++E2D1 07 99 24 28  	DB $07, $99, $24, $28
  62++E2D5 09 99 28 2C  	DB $09, $99, $28, $2C
  63++E2D9 07 99 20 2C  	DB $07, $99, $20, $2C
  64++E2DD 05 BB 34 38  	DB $05, $BB, $34, $38
  65++E2E1 08 BB 38 3C  	DB $08, $BB, $38, $3C
  66++E2E5 07 BB 34 3C  	DB $07, $BB, $34, $3C
  67++E2E9 05 AA 40 44  	DB $05, $AA, $40, $44
  68++E2ED 08 AA 44 48  	DB $08, $AA, $44, $48
  69++E2F1 07 AA 40 48  	DB $07, $AA, $40, $48
  70++E2F5              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  71++E2F5              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  72++E2F5
  73++E2F5 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  74++E2F9 5F 00 4A 04  	DB $5F, $00, $4A, $04
  75++E2FD DF 33 33 17  	DB $DF, $33, $33, $17
  76++E301 9F 4A 00 04  	DB $9F, $4A, $00, $04
  77++E305 9F 33 33 17  	DB $9F, $33, $33, $17
  78++E309 1F 00 4A 04  	DB $1F, $00, $4A, $04
  79++E30D 1F 33 33 17  	DB $1F, $33, $33, $17
  80++E311 1F 4A 00 04  	DB $1F, $4A, $00, $04
  81++E315 5F 33 33 17  	DB $5F, $33, $33, $17
  82++E319 3F 00 00 6B  	DB $3F, $00, $00, $6B
  83++E31D 9F 29 29 5A  	DB $9F, $29, $29, $5A
  84++E321 1F 29 29 5A  	DB $1F, $29, $29, $5A
  85++E325 5F 37 37 28  	DB $5F, $37, $37, $28
  86++E329
  87++E329
  88++E329              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  89++E329              ShuttleType9Len: equ $ - ShuttleType9
  90++E329
# file closed: ./Data/Ships/ShuttleType9.asm
  68+ E329                                      include "Data/Ships/Shuttle_Mk_2.asm"
# file opened: ./Data/Ships/Shuttle_Mk_2.asm
   1++E329 0F 09 C4     Shuttle_Mk_2:	DB $0F, $09, $C4
   2++E32C A7 E3        	DW Shuttle_Mk_2Edges
   3++E32E 70           	DB Shuttle_Mk_2EdgesSize
   4++E32F 00 26        	DB $00, $26
   5++E331 66           	DB Shuttle_Mk_2VertSize
   6++E332 1C           	DB Shuttle_Mk_2EdgesCnt
   7++E333 00 00        	DB $00, $00
   8++E335 34           	DB Shuttle_Mk_2NormalsSize
   9++E336 0A 20 09     	DB $0A, $20, $09
  10++E339 17 E4        	DW Shuttle_Mk_2Normals
  11++E33B 02 00        	DB $02, $00
  12++E33D 41 E3        	DW Shuttle_Mk_2Vertices
  13++E33F 00 00                                DB 0,0                      ; Type and Tactics
  14++E341
  15++E341
  16++E341 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  16++E345 23 01
  17++E347 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  17++E34B 34 00
  18++E34D 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  18++E351 15 00
  19++E353 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  19++E357 26 11
  20++E359 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  20++E35D 37 22
  21++E35F 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  21++E363 58 04
  22++E365 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  22++E369 69 15
  23++E36B 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  23++E36F 7A 26
  24++E371 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  24++E375 7B 34
  25++E377 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  25++E37B BC 48
  26++E37D 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  26++E381 9C 58
  27++E383 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  27++E387 AC 69
  28++E389 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  28++E38D BC 7A
  29++E38F 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  29++E393 CC CC
  30++E395 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  30++E399 CC CC
  31++E39B 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  31++E39F CC CC
  32++E3A1 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  32++E3A5 CC CC
  33++E3A7
  34++E3A7              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  35++E3A7
  36++E3A7
  37++E3A7
  38++E3A7 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  39++E3AB 1F 12 00 0C  	DB $1F, $12, $00, $0C
  40++E3AF 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E3B3 1F 30 00 04  	DB $1F, $30, $00, $04
  42++E3B7 1F 04 04 14  	DB $1F, $04, $04, $14
  43++E3BB 1F 05 08 14  	DB $1F, $05, $08, $14
  44++E3BF 1F 15 08 18  	DB $1F, $15, $08, $18
  45++E3C3 1F 16 0C 18  	DB $1F, $16, $0C, $18
  46++E3C7 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  47++E3CB 1F 27 10 1C  	DB $1F, $27, $10, $1C
  48++E3CF 1F 37 10 20  	DB $1F, $37, $10, $20
  49++E3D3 1F 34 04 20  	DB $1F, $34, $04, $20
  50++E3D7 1F 48 14 24  	DB $1F, $48, $14, $24
  51++E3DB 1F 58 14 28  	DB $1F, $58, $14, $28
  52++E3DF 1F 59 18 28  	DB $1F, $59, $18, $28
  53++E3E3 1F 69 18 2C  	DB $1F, $69, $18, $2C
  54++E3E7 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  55++E3EB 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  56++E3EF 1F 7B 20 30  	DB $1F, $7B, $20, $30
  57++E3F3 1F 4B 20 24  	DB $1F, $4B, $20, $24
  58++E3F7 1F 8C 24 28  	DB $1F, $8C, $24, $28
  59++E3FB 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  60++E3FF 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  61++E403 1F BC 30 24  	DB $1F, $BC, $30, $24
  62++E407 0A CC 34 38  	DB $0A, $CC, $34, $38
  63++E40B 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  64++E40F 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  65++E413 0A CC 40 34  	DB $0A, $CC, $40, $34
  66++E417
  67++E417              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  68++E417
  69++E417
  70++E417              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  71++E417
  72++E417
  73++E417 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  74++E41B DF 27 27 4E  	DB $DF, $27, $27, $4E
  75++E41F 5F 27 27 4E  	DB $5F, $27, $27, $4E
  76++E423 1F 27 27 4E  	DB $1F, $27, $27, $4E
  77++E427 1F 00 60 00  	DB $1F, $00, $60, $00
  78++E42B 9F 60 00 00  	DB $9F, $60, $00, $00
  79++E42F 5F 00 60 00  	DB $5F, $00, $60, $00
  80++E433 1F 60 00 00  	DB $1F, $60, $00, $00
  81++E437 BF 42 42 16  	DB $BF, $42, $42, $16
  82++E43B FF 42 42 16  	DB $FF, $42, $42, $16
  83++E43F 7F 42 42 16  	DB $7F, $42, $42, $16
  84++E443 3F 42 42 16  	DB $3F, $42, $42, $16
  85++E447 3F 00 00 60  	DB $3F, $00, $00, $60
  86++E44B
  87++E44B
  88++E44B              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  89++E44B              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  90++E44B
# file closed: ./Data/Ships/Shuttle_Mk_2.asm
  69+ E44B                                      include "Data/Ships/Sidewinder.asm"
# file opened: ./Data/Ships/Sidewinder.asm
   1++E44B 00 10 81     Sidewinder:	DB $00, $10, $81
   2++E44E 9F E4        	DW SidewinderEdges
   3++E450 3C           	DB SidewinderEdgesSize
   4++E451 00 1E        	DB $00, $1E
   5++E453 3C           	DB SidewinderVertSize
   6++E454 0F           	DB SidewinderEdgesCnt
   7++E455 00 32        	DB $00, $32
   8++E457 1C           	DB SidewinderNormalsSize
   9++E458 14 46 25     	DB $14, $46, $25
  10++E45B DB E4        	DW SidewinderNormals
  11++E45D 02 10        	DB $02, $10
  12++E45F 63 E4        	DW SidewinderVertices
  13++E461 00 00                                DB 0,0                      ; Type and Tactics
  14++E463
  15++E463 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  15++E467 10 54
  16++E469 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  16++E46D 20 65
  17++E46F 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  17++E473 32 66
  18++E475 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  18++E479 31 44
  19++E47B 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  19++E47F 10 32
  20++E481 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  20++E485 43 65
  21++E487 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  21++E48B 33 33
  22++E48D 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  22++E491 33 33
  23++E493 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  23++E497 33 33
  24++E499 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  24++E49D 33 33
  25++E49F
  26++E49F
  27++E49F              SidewinderVertSize: equ $ - SidewinderVertices
  28++E49F
  29++E49F
  30++E49F
  31++E49F 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  32++E4A3 1F 62 04 08  	DB $1F, $62, $04, $08
  33++E4A7 1F 20 04 10  	DB $1F, $20, $04, $10
  34++E4AB 1F 10 00 10  	DB $1F, $10, $00, $10
  35++E4AF 1F 41 00 0C  	DB $1F, $41, $00, $0C
  36++E4B3 1F 31 0C 10  	DB $1F, $31, $0C, $10
  37++E4B7 1F 32 08 10  	DB $1F, $32, $08, $10
  38++E4BB 1F 43 0C 14  	DB $1F, $43, $0C, $14
  39++E4BF 1F 63 08 14  	DB $1F, $63, $08, $14
  40++E4C3 1F 65 04 14  	DB $1F, $65, $04, $14
  41++E4C7 1F 54 00 14  	DB $1F, $54, $00, $14
  42++E4CB 0F 33 18 1C  	DB $0F, $33, $18, $1C
  43++E4CF 0C 33 1C 20  	DB $0C, $33, $1C, $20
  44++E4D3 0C 33 18 24  	DB $0C, $33, $18, $24
  45++E4D7 0C 33 20 24  	DB $0C, $33, $20, $24
  46++E4DB
  47++E4DB              SidewinderEdgesSize: equ $ - SidewinderEdges
  48++E4DB
  49++E4DB
  50++E4DB              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  51++E4DB
  52++E4DB
  53++E4DB 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  54++E4DF 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  55++E4E3 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  56++E4E7 3F 00 00 70  	DB $3F, $00, $00, $70
  57++E4EB DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  58++E4EF 5F 00 20 08  	DB $5F, $00, $20, $08
  59++E4F3 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  60++E4F7
  61++E4F7
  62++E4F7              SidewinderNormalsSize: equ $ - SidewinderNormals
  63++E4F7              SidewinderLen: equ $ - Sidewinder
  64++E4F7
# file closed: ./Data/Ships/Sidewinder.asm
  70+ E4F7                                      include "Data/Ships/Splinter.asm"
# file opened: ./Data/Ships/Splinter.asm
   1++E4F7 B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E4FA 27 E5                                DW SplinterEdges
   3++E4FC 18                                   DB SplinterEdgesSize
   4++E4FD 00 16                                DB $00, $16
   5++E4FF 18                                   DB SplinterVertSize
   6++E500 06                                   DB SplinterEdgesCnt
   7++E501 00 00                                DB $00, $00
   8++E503 10                                   DB SplinterNormalsSize
   9++E504 08 14 0A                             DB $08, $14, $0A
  10++E507 3F E5                                DW SplinterNormals
  11++E509 05 00                                DB $05, $00
  12++E50B 0F E5                                DW SplinterVertices
  13++E50D 00 00                                DB 0,0                      ; Type and Tactics
  14++E50F
  15++E50F 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  15++E513 12 33
  16++E515 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  16++E519 02 33
  17++E51B 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  17++E51F 01 33
  18++E521 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  18++E525 01 22
  19++E527              SplinterVertSize:       equ $ - SplinterVertices
  20++E527 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  21++E52B 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E52F 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E533 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E537 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E53B 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E53F              SplinterEdgesSize:      equ $ - SplinterEdges
  27++E53F              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  28++E53F 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  29++E543 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E547 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E54B 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E54F              SplinterNormalsSize:    equ $ - SplinterNormals
  33++E54F              SplinterLen:            equ $ - Splinter
  34++E54F
# file closed: ./Data/Ships/Splinter.asm
  71+ E54F                                      include "Data/Ships/TestVector.asm"
# file opened: ./Data/Ships/TestVector.asm
   1++E54F 03 41 23     TestVector:             DB $03, $41, $23
   2++E552 91 E5                                DW TestVectorEdges
   3++E554 10                                   DB TestVectorEdgesSize
   4++E555 54 2A                                DB $54,$2A
   5++E557 2A                                   DB TestVectorVertSize
   6++E558 04                                   DB TestVectorEdgesCnt
   7++E559 00 00                                DB $00,$00
   8++E55B 10                                   DB TestVectorNormalsSize
   9++E55C 32 96 1C                             DB $32,$96,$1C
  10++E55F A1 E5                                DW TestVectorNormals
  11++E561 04 01                                DB $04,$01
  12++E563 67 E5                                DW TestVectorVertices
  13++E565 00 00                                DB 0,0                      ; Type and Tactics
  14++E567
  15++E567 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  15++E56B 00 00
  16++E56D 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  16++E571 00 00
  17++E573 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  17++E577 01 01
  18++E579 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  18++E57D 01 01
  19++E57F 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  19++E583 02 02
  20++E585 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  20++E589 02 02
  21++E58B 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  21++E58F 03 03
  22++E591              TestVectorVertSize      equ $  - TestVectorVertices
  23++E591 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  24++E595 1F 00 08 0C                          DB $1F,$00,$08,$0C
  25++E599 1F 00 10 14                          DB $1F,$00,$10,$14
  26++E59D 1F 00 18 18                          DB $1F,$00,$18,$18
  27++E5A1              TestVectorEdgesSize     equ $  - TestVectorEdges
  28++E5A1              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  29++E5A1              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  30++E5A1 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  31++E5A5 1F 10 00 00                          DB $1F,$10,$00,$00
  32++E5A9 1F 00 00 10                          DB $1F,$00,$00,$10
  33++E5AD 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E5B1              TestVectorNormalsSize   equ $  - TestVectorNormals
  35++E5B1              TestVectorLen           equ $  - TestVector
  36++E5B1
# file closed: ./Data/Ships/TestVector.asm
  72+ E5B1                                      include "Data/Ships/Thargoid.asm"
# file opened: ./Data/Ships/Thargoid.asm
   1++E5B1 00 26 49     Thargoid:	DB $00, $26, $49
   2++E5B4 41 E6                    DW ThargoidEdges
   3++E5B6 68                       DB ThargoidEdgesSize
   4++E5B7 3C 26                    DB $3C, $26
   5++E5B9 78                       DB ThargoidVertSize
   6++E5BA 1A                       DB ThargoidEdgesCnt
   7++E5BB 01 F4                    DB $01, $F4
   8++E5BD 28                       DB ThargoidNormalsSize
   9++E5BE 37 F0 27                 DB $37, $F0, $27
  10++E5C1 A9 E6                    DW ThargoidNormals
  11++E5C3 02 16                    DB $02, $16
  12++E5C5 C9 E5                    DW ThargoidVertices
  13++E5C7 00 00                    DB 0,0                      ; Type and Tactics
  14++E5C9
  15++E5C9 20 30 30 5F  ThargoidVertices:	DB $20, $30, $30, $5F, $40, $88
  15++E5CD 40 88
  16++E5CF 20 44 00 5F                      DB $20, $44, $00, $5F, $10, $44
  16++E5D3 10 44
  17++E5D5 20 30 30 7F                      DB $20, $30, $30, $7F, $21, $44
  17++E5D9 21 44
  18++E5DB 20 00 44 3F                      DB $20, $00, $44, $3F, $32, $44
  18++E5DF 32 44
  19++E5E1 20 30 30 3F                      DB $20, $30, $30, $3F, $43, $55
  19++E5E5 43 55
  20++E5E7 20 44 00 1F                      DB $20, $44, $00, $1F, $54, $66
  20++E5EB 54 66
  21++E5ED 20 30 30 1F                      DB $20, $30, $30, $1F, $64, $77
  21++E5F1 64 77
  22++E5F3 20 00 44 1F                      DB $20, $00, $44, $1F, $74, $88
  22++E5F7 74 88
  23++E5F9 18 74 74 DF                      DB $18, $74, $74, $DF, $80, $99
  23++E5FD 80 99
  24++E5FF 18 A4 00 DF                      DB $18, $A4, $00, $DF, $10, $99
  24++E603 10 99
  25++E605 18 74 74 FF                      DB $18, $74, $74, $FF, $21, $99
  25++E609 21 99
  26++E60B 18 00 A4 BF                      DB $18, $00, $A4, $BF, $32, $99
  26++E60F 32 99
  27++E611 18 74 74 BF                      DB $18, $74, $74, $BF, $53, $99
  27++E615 53 99
  28++E617 18 A4 00 9F                      DB $18, $A4, $00, $9F, $65, $99
  28++E61B 65 99
  29++E61D 18 74 74 9F                      DB $18, $74, $74, $9F, $76, $99
  29++E621 76 99
  30++E623 18 00 A4 9F                      DB $18, $00, $A4, $9F, $87, $99
  30++E627 87 99
  31++E629 18 40 50 9E                      DB $18, $40, $50, $9E, $99, $99
  31++E62D 99 99
  32++E62F 18 40 50 BE                      DB $18, $40, $50, $BE, $99, $99
  32++E633 99 99
  33++E635 18 40 50 FE                      DB $18, $40, $50, $FE, $99, $99
  33++E639 99 99
  34++E63B 18 40 50 DE                      DB $18, $40, $50, $DE, $99, $99
  34++E63F 99 99
  35++E641
  36++E641              ThargoidVertSize: equ $ - ThargoidVertices
  37++E641
  38++E641
  39++E641
  40++E641 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C
  41++E645 1F 40 00 04  	DB $1F, $40, $00, $04
  42++E649 1F 41 04 08  	DB $1F, $41, $04, $08
  43++E64D 1F 42 08 0C  	DB $1F, $42, $08, $0C
  44++E651 1F 43 0C 10  	DB $1F, $43, $0C, $10
  45++E655 1F 54 10 14  	DB $1F, $54, $10, $14
  46++E659 1F 64 14 18  	DB $1F, $64, $14, $18
  47++E65D 1F 74 18 1C  	DB $1F, $74, $18, $1C
  48++E661 1F 80 00 20  	DB $1F, $80, $00, $20
  49++E665 1F 10 04 24  	DB $1F, $10, $04, $24
  50++E669 1F 21 08 28  	DB $1F, $21, $08, $28
  51++E66D 1F 32 0C 2C  	DB $1F, $32, $0C, $2C
  52++E671 1F 53 10 30  	DB $1F, $53, $10, $30
  53++E675 1F 65 14 34  	DB $1F, $65, $14, $34
  54++E679 1F 76 18 38  	DB $1F, $76, $18, $38
  55++E67D 1F 87 1C 3C  	DB $1F, $87, $1C, $3C
  56++E681 1F 98 20 3C  	DB $1F, $98, $20, $3C
  57++E685 1F 90 20 24  	DB $1F, $90, $20, $24
  58++E689 1F 91 24 28  	DB $1F, $91, $24, $28
  59++E68D 1F 92 28 2C  	DB $1F, $92, $28, $2C
  60++E691 1F 93 2C 30  	DB $1F, $93, $2C, $30
  61++E695 1F 95 30 34  	DB $1F, $95, $30, $34
  62++E699 1F 96 34 38  	DB $1F, $96, $34, $38
  63++E69D 1F 97 38 3C  	DB $1F, $97, $38, $3C
  64++E6A1 1E 99 40 44  	DB $1E, $99, $40, $44
  65++E6A5 1E 99 48 4C  	DB $1E, $99, $48, $4C
  66++E6A9
  67++E6A9              ThargoidEdgesSize: equ $ - ThargoidEdges
  68++E6A9
  69++E6A9              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  70++E6A9
  71++E6A9 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  72++E6AD 7F 67 3C 19  	DB $7F, $67, $3C, $19
  73++E6B1 7F 67 19 3C  	DB $7F, $67, $19, $3C
  74++E6B5 3F 67 19 3C  	DB $3F, $67, $19, $3C
  75++E6B9 1F 40 00 00  	DB $1F, $40, $00, $00
  76++E6BD 3F 67 3C 19  	DB $3F, $67, $3C, $19
  77++E6C1 1F 67 3C 19  	DB $1F, $67, $3C, $19
  78++E6C5 1F 67 19 3C  	DB $1F, $67, $19, $3C
  79++E6C9 5F 67 19 3C  	DB $5F, $67, $19, $3C
  80++E6CD 9F 30 00 00  	DB $9F, $30, $00, $00
  81++E6D1
  82++E6D1
  83++E6D1              ThargoidNormalsSize: equ $ - ThargoidNormals
  84++E6D1              ThargoidLen: equ $ - Thargoid
  85++E6D1
# file closed: ./Data/Ships/Thargoid.asm
  73+ E6D1                                      include "Data/Ships/Thargon.asm"
# file opened: ./Data/Ships/Thargon.asm
   1++E6D1 F0 06 40     Thargon:	DB $F0, $06, $40
   2++E6D4 25 E7        	DW ThargonEdges
   3++E6D6 3C           	DB ThargonEdgesSize
   4++E6D7 00 12        	DB $00, $12
   5++E6D9 3C           	DB ThargonVertSize
   6++E6DA 0F           	DB ThargonEdgesCnt
   7++E6DB 00 32        	DB $00, $32
   8++E6DD 1C           	DB ThargonNormalsSize
   9++E6DE 14 14 1E     	DB $14, $14, $1E
  10++E6E1 61 E7        	DW ThargonNormals
  11++E6E3 02 10        	DB $02, $10
  12++E6E5 E9 E6        	DW ThargonVertices
  13++E6E7 00 00                                DB 0,0                      ; Type and Tactics
  14++E6E9
  15++E6E9
  16++E6E9 09 00 28 9F  ThargonVertices:	DB $09, $00, $28, $9F, $01, $55
  16++E6ED 01 55
  17++E6EF 09 26 0C DF  	DB $09, $26, $0C, $DF, $01, $22
  17++E6F3 01 22
  18++E6F5 09 18 20 FF  	DB $09, $18, $20, $FF, $02, $33
  18++E6F9 02 33
  19++E6FB 09 18 20 BF  	DB $09, $18, $20, $BF, $03, $44
  19++E6FF 03 44
  20++E701 09 26 0C 9F  	DB $09, $26, $0C, $9F, $04, $55
  20++E705 04 55
  21++E707 09 00 08 3F  	DB $09, $00, $08, $3F, $15, $66
  21++E70B 15 66
  22++E70D 09 0A 0F 7F  	DB $09, $0A, $0F, $7F, $12, $66
  22++E711 12 66
  23++E713 09 06 1A 7F  	DB $09, $06, $1A, $7F, $23, $66
  23++E717 23 66
  24++E719 09 06 1A 3F  	DB $09, $06, $1A, $3F, $34, $66
  24++E71D 34 66
  25++E71F 09 0A 0F 3F  	DB $09, $0A, $0F, $3F, $45, $66
  25++E723 45 66
  26++E725
  27++E725              ThargonVertSize: equ $ - ThargonVertices
  28++E725
  29++E725
  30++E725 1F 10 00 04  ThargonEdges:	DB $1F, $10, $00, $04
  31++E729 1F 20 04 08  	DB $1F, $20, $04, $08
  32++E72D 1F 30 08 0C  	DB $1F, $30, $08, $0C
  33++E731 1F 40 0C 10  	DB $1F, $40, $0C, $10
  34++E735 1F 50 00 10  	DB $1F, $50, $00, $10
  35++E739 1F 51 00 14  	DB $1F, $51, $00, $14
  36++E73D 1F 21 04 18  	DB $1F, $21, $04, $18
  37++E741 1F 32 08 1C  	DB $1F, $32, $08, $1C
  38++E745 1F 43 0C 20  	DB $1F, $43, $0C, $20
  39++E749 1F 54 10 24  	DB $1F, $54, $10, $24
  40++E74D 1F 61 14 18  	DB $1F, $61, $14, $18
  41++E751 1F 62 18 1C  	DB $1F, $62, $18, $1C
  42++E755 1F 63 1C 20  	DB $1F, $63, $1C, $20
  43++E759 1F 64 20 24  	DB $1F, $64, $20, $24
  44++E75D 1F 65 24 14  	DB $1F, $65, $24, $14
  45++E761
  46++E761              ThargonEdgesSize: equ $ - ThargonEdges
  47++E761
  48++E761
  49++E761              ThargonEdgesCnt: equ ThargonEdgesSize/4
  50++E761
  51++E761
  52++E761 9F 24 00 00  ThargonNormals:	DB $9F, $24, $00, $00
  53++E765 5F 14 05 07  	DB $5F, $14, $05, $07
  54++E769 7F 2E 2A 0E  	DB $7F, $2E, $2A, $0E
  55++E76D 3F 24 00 68  	DB $3F, $24, $00, $68
  56++E771 3F 2E 2A 0E  	DB $3F, $2E, $2A, $0E
  57++E775 1F 14 05 07  	DB $1F, $14, $05, $07
  58++E779 1F 24 00 00  	DB $1F, $24, $00, $00
  59++E77D
  60++E77D
  61++E77D              ThargonNormalsSize: equ $ - ThargonNormals
  62++E77D              ThargonLen: equ $ - Thargon
  63++E77D
# file closed: ./Data/Ships/Thargon.asm
  74+ E77D                                      include "Data/Ships/TransportType10.asm"
# file opened: ./Data/Ships/TransportType10.asm
   1++E77D 00 09 C4     TransportType10:	DB $00, $09, $C4
   2++E780 73 E8        	DW TransportType10Edges
   3++E782 B8           	DB TransportType10EdgesSize
   4++E783 30 1A        	DB $30, $1A
   5++E785 DE           	DB TransportType10VertSize
   6++E786 2E           	DB TransportType10EdgesCnt
   7++E787 00 00        	DB $00, $00
   8++E789 38           	DB TransportType10NormalsSize
   9++E78A 10 20 0A     	DB $10, $20, $0A
  10++E78D 2B E9        	DW TransportType10Normals
  11++E78F 02 00        	DB $02, $00
  12++E791 95 E7        	DW TransportType10Vertices
  13++E793 00 00                                DB 0,0                      ; Type and Tactics
  14++E795
  15++E795 00 0A 1A 3F  TransportType10Vertices:	DB $00, $0A, $1A, $3F, $06, $77
  15++E799 06 77
  16++E79B 19 04 1A BF  	DB $19, $04, $1A, $BF, $01, $77
  16++E79F 01 77
  17++E7A1 1C 03 1A FF  	DB $1C, $03, $1A, $FF, $01, $22
  17++E7A5 01 22
  18++E7A7 19 08 1A FF  	DB $19, $08, $1A, $FF, $02, $33
  18++E7AB 02 33
  19++E7AD 1A 08 1A 7F  	DB $1A, $08, $1A, $7F, $03, $44
  19++E7B1 03 44
  20++E7B3 1D 03 1A 7F  	DB $1D, $03, $1A, $7F, $04, $55
  20++E7B7 04 55
  21++E7B9 1A 04 1A 3F  	DB $1A, $04, $1A, $3F, $05, $66
  21++E7BD 05 66
  22++E7BF 00 06 0C 13  	DB $00, $06, $0C, $13, $FF, $FF
  22++E7C3 FF FF
  23++E7C5 1E 01 0C DF  	DB $1E, $01, $0C, $DF, $17, $89
  23++E7C9 17 89
  24++E7CB 21 08 0C DF  	DB $21, $08, $0C, $DF, $12, $39
  24++E7CF 12 39
  25++E7D1 21 08 0C 5F  	DB $21, $08, $0C, $5F, $34, $5A
  25++E7D5 34 5A
  26++E7D7 1E 01 0C 5F  	DB $1E, $01, $0C, $5F, $56, $AB
  26++E7DB 56 AB
  27++E7DD 0B 02 1E DF  	DB $0B, $02, $1E, $DF, $89, $CD
  27++E7E1 89 CD
  28++E7E3 0D 08 1E DF  	DB $0D, $08, $1E, $DF, $39, $DD
  28++E7E7 39 DD
  29++E7E9 0E 08 1E 5F  	DB $0E, $08, $1E, $5F, $3A, $DD
  29++E7ED 3A DD
  30++E7EF 0B 02 1E 5F  	DB $0B, $02, $1E, $5F, $AB, $CD
  30++E7F3 AB CD
  31++E7F5 05 06 02 87  	DB $05, $06, $02, $87, $77, $77
  31++E7F9 77 77
  32++E7FB 12 03 02 87  	DB $12, $03, $02, $87, $77, $77
  32++E7FF 77 77
  33++E801 05 07 07 A7  	DB $05, $07, $07, $A7, $77, $77
  33++E805 77 77
  34++E807 12 04 07 A7  	DB $12, $04, $07, $A7, $77, $77
  34++E80B 77 77
  35++E80D 0B 06 0E A7  	DB $0B, $06, $0E, $A7, $77, $77
  35++E811 77 77
  36++E813 0B 05 07 A7  	DB $0B, $05, $07, $A7, $77, $77
  36++E817 77 77
  37++E819 05 07 0E 27  	DB $05, $07, $0E, $27, $66, $66
  37++E81D 66 66
  38++E81F 12 04 0E 27  	DB $12, $04, $0E, $27, $66, $66
  38++E823 66 66
  39++E825 0B 05 07 27  	DB $0B, $05, $07, $27, $66, $66
  39++E829 66 66
  40++E82B 05 06 03 27  	DB $05, $06, $03, $27, $66, $66
  40++E82F 66 66
  41++E831 12 03 03 27  	DB $12, $03, $03, $27, $66, $66
  41++E835 66 66
  42++E837 0B 04 08 07  	DB $0B, $04, $08, $07, $66, $66
  42++E83B 66 66
  43++E83D 0B 05 03 27  	DB $0B, $05, $03, $27, $66, $66
  43++E841 66 66
  44++E843 10 08 0D E6  	DB $10, $08, $0D, $E6, $33, $33
  44++E847 33 33
  45++E849 10 08 10 C6  	DB $10, $08, $10, $C6, $33, $33
  45++E84D 33 33
  46++E84F 11 08 0D 66  	DB $11, $08, $0D, $66, $33, $33
  46++E853 33 33
  47++E855 11 08 10 46  	DB $11, $08, $10, $46, $33, $33
  47++E859 33 33
  48++E85B 0D 03 1A E8  	DB $0D, $03, $1A, $E8, $00, $00
  48++E85F 00 00
  49++E861 0D 03 1A 68  	DB $0D, $03, $1A, $68, $00, $00
  49++E865 00 00
  50++E867 09 03 1A 25  	DB $09, $03, $1A, $25, $00, $00
  50++E86B 00 00
  51++E86D 08 03 1A A5  	DB $08, $03, $1A, $A5, $00, $00
  51++E871 00 00
  52++E873
  53++E873              TransportType10VertSize: equ $ - TransportType10Vertices
  54++E873
  55++E873
  56++E873
  57++E873 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04
  58++E877 1F 01 04 08  	DB $1F, $01, $04, $08
  59++E87B 1F 02 08 0C  	DB $1F, $02, $08, $0C
  60++E87F 1F 03 0C 10  	DB $1F, $03, $0C, $10
  61++E883 1F 04 10 14  	DB $1F, $04, $10, $14
  62++E887 1F 05 14 18  	DB $1F, $05, $14, $18
  63++E88B 1F 06 00 18  	DB $1F, $06, $00, $18
  64++E88F 10 67 00 1C  	DB $10, $67, $00, $1C
  65++E893 1F 17 04 20  	DB $1F, $17, $04, $20
  66++E897 0B 12 08 24  	DB $0B, $12, $08, $24
  67++E89B 1F 23 0C 24  	DB $1F, $23, $0C, $24
  68++E89F 1F 34 10 28  	DB $1F, $34, $10, $28
  69++E8A3 0B 45 14 28  	DB $0B, $45, $14, $28
  70++E8A7 1F 56 18 2C  	DB $1F, $56, $18, $2C
  71++E8AB 11 78 1C 20  	DB $11, $78, $1C, $20
  72++E8AF 11 19 20 24  	DB $11, $19, $20, $24
  73++E8B3 11 5A 28 2C  	DB $11, $5A, $28, $2C
  74++E8B7 11 6B 1C 2C  	DB $11, $6B, $1C, $2C
  75++E8BB 13 BC 1C 3C  	DB $13, $BC, $1C, $3C
  76++E8BF 13 8C 1C 30  	DB $13, $8C, $1C, $30
  77++E8C3 10 89 20 30  	DB $10, $89, $20, $30
  78++E8C7 1F 39 24 34  	DB $1F, $39, $24, $34
  79++E8CB 1F 3A 28 38  	DB $1F, $3A, $28, $38
  80++E8CF 10 AB 2C 3C  	DB $10, $AB, $2C, $3C
  81++E8D3 1F 9D 30 34  	DB $1F, $9D, $30, $34
  82++E8D7 1F 3D 34 38  	DB $1F, $3D, $34, $38
  83++E8DB 1F AD 38 3C  	DB $1F, $AD, $38, $3C
  84++E8DF 1F CD 30 3C  	DB $1F, $CD, $30, $3C
  85++E8E3 07 77 40 44  	DB $07, $77, $40, $44
  86++E8E7 07 77 48 4C  	DB $07, $77, $48, $4C
  87++E8EB 07 77 4C 50  	DB $07, $77, $4C, $50
  88++E8EF 07 77 48 50  	DB $07, $77, $48, $50
  89++E8F3 07 77 50 54  	DB $07, $77, $50, $54
  90++E8F7 07 66 58 5C  	DB $07, $66, $58, $5C
  91++E8FB 07 66 5C 60  	DB $07, $66, $5C, $60
  92++E8FF 07 66 60 58  	DB $07, $66, $60, $58
  93++E903 07 66 64 68  	DB $07, $66, $64, $68
  94++E907 07 66 68 6C  	DB $07, $66, $68, $6C
  95++E90B 07 66 64 6C  	DB $07, $66, $64, $6C
  96++E90F 07 66 6C 70  	DB $07, $66, $6C, $70
  97++E913 06 33 74 78  	DB $06, $33, $74, $78
  98++E917 06 33 7C 80  	DB $06, $33, $7C, $80
  99++E91B 08 00 84 88  	DB $08, $00, $84, $88
 100++E91F 05 00 88 8C  	DB $05, $00, $88, $8C
 101++E923 05 00 8C 90  	DB $05, $00, $8C, $90
 102++E927 05 00 90 84  	DB $05, $00, $90, $84
 103++E92B
 104++E92B              TransportType10EdgesSize: equ $ - TransportType10Edges
 105++E92B
 106++E92B
 107++E92B              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 108++E92B
 109++E92B
 110++E92B 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67
 111++E92F BF 6F 30 07  	DB $BF, $6F, $30, $07
 112++E933 FF 69 3F 15  	DB $FF, $69, $3F, $15
 113++E937 5F 00 22 00  	DB $5F, $00, $22, $00
 114++E93B 7F 69 3F 15  	DB $7F, $69, $3F, $15
 115++E93F 3F 6F 30 07  	DB $3F, $6F, $30, $07
 116++E943 1F 08 20 03  	DB $1F, $08, $20, $03
 117++E947 9F 08 20 03  	DB $9F, $08, $20, $03
 118++E94B 93 08 22 0B  	DB $93, $08, $22, $0B
 119++E94F 9F 4B 20 4F  	DB $9F, $4B, $20, $4F
 120++E953 1F 4B 20 4F  	DB $1F, $4B, $20, $4F
 121++E957 13 08 22 0B  	DB $13, $08, $22, $0B
 122++E95B 1F 00 26 11  	DB $1F, $00, $26, $11
 123++E95F 1F 00 00 79  	DB $1F, $00, $00, $79
 124++E963
 125++E963
 126++E963              TransportType10NormalsSize: equ $ - TransportType10Normals
 127++E963              TransportType10Len: equ $ - TransportType10
 128++E963
# file closed: ./Data/Ships/TransportType10.asm
  75+ E963                                      include "Data/Ships/Viper.asm"
# file opened: ./Data/Ships/Viper.asm
   1++E963              ; Mapping Orginal to new
   2++E963              ; 0    => 0
   3++E963              ; 1-2  => 1-2
   4++E963              ; 3    => EQU Edges
   5++E963              ; 4    => EQU Normals
   6++E963              ; 5    => EQU EdgesCnt
   7++E963              ; 6    => 6
   8++E963              ; 7    => 7
   9++E963              ; 8    => EQU VertSize
  10++E963              ; 9    => EQU EdgesCnt
  11++E963              ; 10-11=> 10-11
  12++E963              ; 12   => EQU  NormalsSize
  13++E963              ; 13   => 13
  14++E963              ; 14   => 14
  15++E963              ; 15   => 15
  16++E963              ; 16   => EQU Edges
  17++E963              ; 17   => EQU Normals
  18++E963              ; 18   => 18
  19++E963              ; 19   => 19
  20++E963              ;\ -> &5C93  \ Viper = Type 16
  21++E963 00 F9 15     Viper:                  DB $00, $F9, $15
  22++E966 D5 E9                                DW ViperEdges
  23++E968 50                                   DB ViperEdgesSize
  24++E969 00 2A                                DB $00,$2A
  25++E96B 5A                                   DB ViperVertSize
  26++E96C 14                                   DB ViperEdgesCnt
  27++E96D 00 00                                DB $00,$00
  28++E96F 1C                                   DB ViperNormalsSize
  29++E970 17 64 20                             DB $17, $64, $20
  30++E973 25 EA                                DW ViperNormals
  31++E975 01 11                                DB $01, $11
  32++E977 7B E9                                DW ViperVertices
  33++E979 00 00                                DB 0,0                      ; Type and Tactics
  34++E97B
  35++E97B 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  35++E97F 21 43
  36++E981 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  36++E985 10 22
  37++E987 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  37++E98B 43 55
  38++E98D 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  38++E991 42 66
  39++E993 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  39++E997 31 66
  40++E999 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  40++E99D 54 66
  41++E99F 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  41++E9A3 35 66
  42++E9A5 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  42++E9A9 20 66
  43++E9AB 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  43++E9AF 10 66
  44++E9B1 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  44++E9B5 66 66
  45++E9B7 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  45++E9BB 66 66
  46++E9BD 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  46++E9C1 66 66
  47++E9C3 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  47++E9C7 66 66
  48++E9C9 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  48++E9CD 66 66
  49++E9CF 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  49++E9D3 66 66
  50++E9D5              ViperVertSize           equ $  - ViperVertices
  51++E9D5 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  51++E9D9 1E 21 00 04
  52++E9DD 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  52++E9E1 1F 31 00 10
  53++E9E5 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  53++E9E9 1E 10 04 20
  54++E9ED 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  54++E9F1 1E 53 08 18
  55++E9F5 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  55++E9F9 1E 65 14 18
  56++E9FD 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  56++EA01 1E 63 10 18
  57++EA05 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  57++EA09 1E 46 0C 14
  58++EA0D 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  58++EA11 12 66 24 34
  59++EA15 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  59++EA19 12 66 28 38
  60++EA1D 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  60++EA21 10 66 30 34
  61++EA25              ViperEdgesSize          equ $  - ViperEdges
  62++EA25              ViperEdgesCnt           equ ViperEdgesSize/4
  63++EA25 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  63++EA29 9F 16 21 0B
  64++EA2D 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  64++EA31 DF 16 21 0B
  65++EA35 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  65++EA39 5F 00 20 00
  66++EA3D 3F 00 00 30                          DB $3F, $00, $00, $30
  67++EA41              ViperNormalsSize        equ $  - ViperNormals
  68++EA41              ViperLen                equ $  - Viper
  69++EA41
# file closed: ./Data/Ships/Viper.asm
  76+ EA41                                      include "Data/Ships/Worm.asm"
# file opened: ./Data/Ships/Worm.asm
   1++EA41 00 26 49     Worm:	                DB $00, $26, $49
   2++EA44 95 EA                                DW WormEdges
   3++EA46 40                                   DB WormEdgesSize
   4++EA47 00 12                                DB $00, $12
   5++EA49 3C                                   DB WormVertSize
   6++EA4A 10                                   DB WormEdgesCnt
   7++EA4B 00 00                                DB $00, $00
   8++EA4D 20                                   DB WormNormalsSize
   9++EA4E 13 1E 17                             DB $13, $1E, $17
  10++EA51 D5 EA                                DW WormNormals
  11++EA53 03 08                                DB $03, $08
  12++EA55 59 EA                                DW WormVertices
  13++EA57 00 00                                DB 0,0                      ; Type and Tactics
  14++EA59 0A 0A 23 5F  WormVertices:	DB $0A, $0A, $23, $5F, $02, $77
  14++EA5D 02 77
  15++EA5F 0A 0A 23 DF  	DB $0A, $0A, $23, $DF, $03, $77
  15++EA63 03 77
  16++EA65 05 06 0F 1F  	DB $05, $06, $0F, $1F, $01, $24
  16++EA69 01 24
  17++EA6B 05 06 0F 9F  	DB $05, $06, $0F, $9F, $01, $35
  17++EA6F 01 35
  18++EA71 0F 0A 19 5F  	DB $0F, $0A, $19, $5F, $24, $77
  18++EA75 24 77
  19++EA77 0F 0A 19 DF  	DB $0F, $0A, $19, $DF, $35, $77
  19++EA7B 35 77
  20++EA7D 1A 0A 19 7F  	DB $1A, $0A, $19, $7F, $46, $77
  20++EA81 46 77
  21++EA83 1A 0A 19 FF  	DB $1A, $0A, $19, $FF, $56, $77
  21++EA87 56 77
  22++EA89 08 0E 19 3F  	DB $08, $0E, $19, $3F, $14, $66
  22++EA8D 14 66
  23++EA8F 08 0E 19 BF  	DB $08, $0E, $19, $BF, $15, $66
  23++EA93 15 66
  24++EA95
  25++EA95              WormVertSize: equ $ - WormVertices
  26++EA95
  27++EA95
  28++EA95 1F 07 00 04  WormEdges:	DB $1F, $07, $00, $04
  29++EA99 1F 37 04 14  	DB $1F, $37, $04, $14
  30++EA9D 1F 57 14 1C  	DB $1F, $57, $14, $1C
  31++EAA1 1F 67 1C 18  	DB $1F, $67, $1C, $18
  32++EAA5 1F 47 18 10  	DB $1F, $47, $18, $10
  33++EAA9 1F 27 10 00  	DB $1F, $27, $10, $00
  34++EAAD 1F 02 00 08  	DB $1F, $02, $00, $08
  35++EAB1 1F 03 04 0C  	DB $1F, $03, $04, $0C
  36++EAB5 1F 24 10 08  	DB $1F, $24, $10, $08
  37++EAB9 1F 35 14 0C  	DB $1F, $35, $14, $0C
  38++EABD 1F 14 08 20  	DB $1F, $14, $08, $20
  39++EAC1 1F 46 20 18  	DB $1F, $46, $20, $18
  40++EAC5 1F 15 0C 24  	DB $1F, $15, $0C, $24
  41++EAC9 1F 56 24 1C  	DB $1F, $56, $24, $1C
  42++EACD 1F 01 08 0C  	DB $1F, $01, $08, $0C
  43++EAD1 1F 16 20 24  	DB $1F, $16, $20, $24
  44++EAD5
  45++EAD5              WormEdgesSize: equ $ - WormEdges
  46++EAD5
  47++EAD5
  48++EAD5              WormEdgesCnt: equ WormEdgesSize/4
  49++EAD5
  50++EAD5
  51++EAD5 1F 00 58 46  WormNormals:	DB $1F, $00, $58, $46
  52++EAD9 1F 00 45 0E  	DB $1F, $00, $45, $0E
  53++EADD 1F 46 42 23  	DB $1F, $46, $42, $23
  54++EAE1 9F 46 42 23  	DB $9F, $46, $42, $23
  55++EAE5 1F 40 31 0E  	DB $1F, $40, $31, $0E
  56++EAE9 9F 40 31 0E  	DB $9F, $40, $31, $0E
  57++EAED 3F 00 00 C8  	DB $3F, $00, $00, $C8
  58++EAF1 5F 00 50 00  	DB $5F, $00, $50, $00
  59++EAF5
  60++EAF5
  61++EAF5              WormNormalsSize: equ $ - WormNormals
  62++EAF5              WormLen: equ $ - Worm
  63++EAF5
# file closed: ./Data/Ships/Worm.asm
  77+ EAF5                                      include "Data/Ships/Rattler.asm"
# file opened: ./Data/Ships/Rattler.asm
   1++EAF5 02 17 70     Rattler:	DB $02, $17, $70
   2++EAF8 67 EB                    DW RattlerEdges
   3++EAFA 68                       DB RattlerEdgesSize
   4++EAFB 00 2A                    DB $00, $2A
   5++EAFD 5A                       DB RattlerVertSize
   6++EAFE 1A                       DB RattlerEdgesCnt
   7++EAFF 00 96                    DB $00, $96
   8++EB01 34                       DB RattlerNormalsSize
   9++EB02 0A 71 1F                 DB $0A, $71, $1F
  10++EB05 CF EB                    DW RattlerNormals
  11++EB07 01 22                    DB $01, $22
  12++EB09 0D EB                    DW RattlerVertices
  13++EB0B 00 00                                DB 0,0                      ; Type and Tactics
  14++EB0D
  15++EB0D
  16++EB0D 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  16++EB11 89 23
  17++EB13 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  17++EB17 9A 34
  18++EB19 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  18++EB1D 78 12
  19++EB1F 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  19++EB23 AB 45
  20++EB25 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  20++EB29 67 01
  21++EB2B 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  21++EB2F CC 5B
  22++EB31 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  22++EB35 CC 06
  23++EB37 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  23++EB3B FF FF
  24++EB3D 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  24++EB41 FF FF
  25++EB43 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  25++EB47 CC CC
  26++EB49 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  26++EB4D CC CC
  27++EB4F 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  27++EB53 CC CC
  28++EB55 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  28++EB59 CC CC
  29++EB5B 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  29++EB5F CC CC
  30++EB61 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  30++EB65 CC CC
  31++EB67
  32++EB67              RattlerVertSize: equ $ - RattlerVertices
  33++EB67
  34++EB67
  35++EB67 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  36++EB6B 1F 17 08 10  	DB $1F, $17, $08, $10
  37++EB6F 1F 28 00 08  	DB $1F, $28, $00, $08
  38++EB73 1F 39 00 04  	DB $1F, $39, $00, $04
  39++EB77 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  40++EB7B 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  41++EB7F 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  42++EB83 1F 6C 18 20  	DB $1F, $6C, $18, $20
  43++EB87 1F 01 10 1C  	DB $1F, $01, $10, $1C
  44++EB8B 1F 67 10 20  	DB $1F, $67, $10, $20
  45++EB8F 1F 12 08 1C  	DB $1F, $12, $08, $1C
  46++EB93 1F 78 08 20  	DB $1F, $78, $08, $20
  47++EB97 1F 23 00 1C  	DB $1F, $23, $00, $1C
  48++EB9B 1F 89 00 20  	DB $1F, $89, $00, $20
  49++EB9F 1F 34 04 1C  	DB $1F, $34, $04, $1C
  50++EBA3 1F 9A 04 20  	DB $1F, $9A, $04, $20
  51++EBA7 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  52++EBAB 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  53++EBAF 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  54++EBB3 1F BC 14 20  	DB $1F, $BC, $14, $20
  55++EBB7 0A CC 24 28  	DB $0A, $CC, $24, $28
  56++EBBB 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  57++EBBF 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  58++EBC3 0A CC 30 34  	DB $0A, $CC, $30, $34
  59++EBC7 0A CC 34 38  	DB $0A, $CC, $34, $38
  60++EBCB 0A CC 38 30  	DB $0A, $CC, $38, $30
  61++EBCF
  62++EBCF              RattlerEdgesSize: equ $ - RattlerEdges
  63++EBCF
  64++EBCF
  65++EBCF              RattlerEdgesCnt: equ RattlerEdgesSize/4
  66++EBCF
  67++EBCF
  68++EBCF 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  69++EBD3 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  70++EBD7 9F 09 5D 12  	DB $9F, $09, $5D, $12
  71++EBDB 1F 09 5D 12  	DB $1F, $09, $5D, $12
  72++EBDF 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  73++EBE3 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  74++EBE7 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  75++EBEB DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  76++EBEF DF 09 5D 12  	DB $DF, $09, $5D, $12
  77++EBF3 5F 09 5D 12  	DB $5F, $09, $5D, $12
  78++EBF7 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  79++EBFB 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  80++EBFF 3F 00 00 60  	DB $3F, $00, $00, $60
  81++EC03
  82++EC03              RattlerNormalsSize: equ $ - RattlerNormals
  83++EC03              RattlerLen: equ $ - Rattler
  84++EC03
# file closed: ./Data/Ships/Rattler.asm
  78+ EC03
# file closed: ./Data/ShipModelMetaData3.asm
1275  EC03              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1276  EC03              ;;Privisioned for more models     SLOT    ShipModelsAddr
1277  EC03              ;;Privisioned for more models     PAGE    BankShipModels4
1278  EC03              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1279  EC03
1280  EC03              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1281  EC03                  SLOT    SpritemembankAddr
1282  EC03                  PAGE    BankSPRITE
1283  EC03              	ORG     SpritemembankAddr, BankSPRITE
1284  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              glactic_pattern_1					equ 0
  19+ E000              glactic_hyper_pattern_1             equ 2
  20+ E000              local_pattern_1                     equ 4
  21+ E000              local_hyper_pattern_1               equ 6
  22+ E000
  23+ E000              spritecursoroffset					equ 17
  24+ E000
  25+ E000
  26+ E000
  27+ E000
  28+ E000              sprite_big:
  29+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  30+ E000              .SetAnchor:
  31+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  32+ E001 F5           	push	af									; save id for next few
  33+ E002 D5           	push	de
  34+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  35+ E006              ; write out X position bits 1 to 8
  36+ E006 79           	ld		a,c
  37+ E007 21 11 00         ld      hl,spritecursoroffset
  38+ E00A ED 31        	add		hl,a                                ; hl = full x position
  39+ E00C 7D           	ld		a,l
  40+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  41+ E010              ; write out Y position bits 1 to 8
  42+ E010 EB           	ex		de,hl								; de = full x position
  43+ E011 78           	ld		a,b
  44+ E012 21 11 00         ld      hl,spritecursoroffset
  45+ E015 ED 31        	add		hl,a
  46+ E017 7D           	ld		a,l                                 ; hl = full y position
  47+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  48+ E01B              ; write out MSB of X as its an anchor
  49+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  50+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  51+ E01F              ; write out sprite pattern
  52+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  53+ E020 7B           	ld		a,e
  54+ E021 F6 C0        	or		%11000000							;
  55+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  56+ E026              ; write out msb of y in h must be bit 0 only
  57+ E026 3E 00        	ld		a,%00000000							; big unified composite
  58+ E028 B4           	or		h									; MSB Y
  59+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  60+ E02C              .BigSprite1:
  61+ E02C F1           	pop		af
  62+ E02D 3C           	inc		a
  63+ E02E F5           	push	af
  64+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  65+ E032 3E 10        	ld		a,16
  66+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  67+ E037 AF           	xor 	a
  68+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  69+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  70+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
  71+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  72+ E043 3E 41        	ld		a,%01000001							; big unified composite
  73+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  74+ E048              .BigSprite2:
  75+ E048 F1           	pop		af
  76+ E049 3C           	inc		a
  77+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  78+ E04D AF           	xor		a
  79+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  80+ E051 3E 10        	ld		a,16
  81+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  82+ E056 AF           	xor		a
  83+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  84+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
  85+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  86+ E05F 3E 41        	ld		a,%01000001							; big unified composite
  87+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  88+ E064 C9           	ret
  89+ E065
  90+ E065              sprite_galactic_cursor:
  91+ E065              ; ">sprite_galactic_cursor BC = rowcol"
  92+ E065 16 00        	ld		d,galactic_cursor_sprite
  93+ E067 1E 00        	ld		e,0
  94+ E069 78           	ld		a,b
  95+ E06A C6 18        	add		a,galactic_chart_y_offset
  96+ E06C 47           	ld		b,a
  97+ E06D CD 00 E0     	call	sprite_big
  97+ E070
  98+ E070 C9           	ret
  99+ E071
 100+ E071              sprite_galactic_hyper_cursor:
 101+ E071              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 102+ E071 78           	ld		a,b
 103+ E072 C6 18        	add		a,galactic_chart_y_offset
 104+ E074 47           	ld		b,a
 105+ E075 16 04        	ld		d,galactic_hyper_sprite
 106+ E077 1E 03        	ld		e,3
 107+ E079 CD 00 E0     	call	sprite_big
 107+ E07C
 108+ E07C C9           	ret
 109+ E07D
 110+ E07D              sprite_ghc_move:
 111+ E07D 3E 04        	ld		a,galactic_hyper_sprite
 112+ E07F ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 113+ E082              ; write out X position bits 1 to 8
 114+ E082 79           	ld		a,c
 115+ E083 21 11 00         ld      hl,spritecursoroffset
 116+ E086 ED 31        	add		hl,a                                ; hl = full x position
 117+ E088 7D           	ld		a,l
 118+ E089 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 119+ E08C              ; write out Y position bits 1 to 8
 120+ E08C EB           	ex		de,hl								; de = full x position
 121+ E08D 78               ld      a,b
 122+ E08E C6 18        	add		a,galactic_chart_y_offset
 123+ E090 47           	ld		b,a
 124+ E091 78           	ld		a,b
 125+ E092 21 11 00         ld      hl,spritecursoroffset
 126+ E095 ED 31        	add		hl,a
 127+ E097 7D           	ld		a,l                                 ; hl = full y position
 128+ E098 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 129+ E09B              ; write out MSB of X as its an anchor
 130+ E09B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 131+ E09C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 132+ E09F              ; write out msb of y in h must be bit 0 only
 133+ E09F 3E 00        	ld		a,%00000000							; big unified composite
 134+ E0A1 B2           	or		d									; MSB Y
 135+ E0A2 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E0A5 C9               ret
 137+ E0A6
 138+ E0A6
 139+ E0A6              sprite_lhc_move:
 140+ E0A6              ;DBG:jp DBG
 141+ E0A6              ;DBX:
 142+ E0A6 3E 0A        	ld		a,local_hyper_sprite
 143+ E0A8 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 144+ E0AB              ; write out X position bits 1 to 8
 145+ E0AB 79           	ld		a,c
 146+ E0AC 21 11 00         ld      hl,spritecursoroffset
 147+ E0AF ED 31        	add		hl,a                                ; hl = full x position
 148+ E0B1 7D           	ld		a,l
 149+ E0B2 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 150+ E0B5              ; write out Y position bits 1 to 8
 151+ E0B5 EB           	ex		de,hl								; de = full x position
 152+ E0B6 78           	ld		a,b
 153+ E0B7 21 11 00         ld      hl,spritecursoroffset
 154+ E0BA ED 31        	add		hl,a
 155+ E0BC 7D           	ld		a,l                                 ; hl = full y position
 156+ E0BD ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 157+ E0C0              ; write out MSB of X as its an anchor
 158+ E0C0 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 159+ E0C1 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 160+ E0C4              ; write out msb of y in h must be bit 0 only
 161+ E0C4 3E 00        	ld		a,%00000000							; big unified composite
 162+ E0C6 B2           	or		d									; MSB Y
 163+ E0C7 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 164+ E0CA C9               ret
 165+ E0CB
 166+ E0CB              sprite_local_cursor:
 167+ E0CB              ; "sprite_local_cursor BC = rowcol"
 168+ E0CB 16 07        	ld		d,local_cursor_sprite
 169+ E0CD 1E 06        	ld		e,6
 170+ E0CF CD 00 E0     	call	sprite_big
 171+ E0D2 C9           	ret
 172+ E0D3
 173+ E0D3              sprite_local_hyper_cursor:
 174+ E0D3              ; "sprite_local_hyper_cursor BC = rowcol"
 175+ E0D3 16 0A        	ld		d,local_hyper_sprite
 176+ E0D5 1E 09        	ld		e,9
 177+ E0D7 CD 00 E0     	call	sprite_big
 178+ E0DA C9           	ret
 179+ E0DB
 180+ E0DB
 181+ E0DB              sprite_galactic_hide:
 182+ E0DB ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 183+ E0DF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 184+ E0E3 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 185+ E0E7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 186+ E0EB ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 187+ E0EF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 188+ E0F3 C9           	ret
 189+ E0F4
 190+ E0F4              sprite_galactic_hyper_hide:
 191+ E0F4 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 192+ E0F8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 193+ E0FC ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 194+ E100 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 195+ E104 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 196+ E108 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 197+ E10C C9           	ret
 198+ E10D
 199+ E10D              sprite_local_hide:
 200+ E10D ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 201+ E111 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 202+ E115 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 203+ E119 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 204+ E11D ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 205+ E121 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 206+ E125 C9           	ret
 207+ E126
 208+ E126              sprite_local_hyper_hide:
 209+ E126 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 210+ E12A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 211+ E12E ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 212+ E132 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 213+ E136 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 214+ E13A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 215+ E13E C9           	ret
 216+ E13F
 217+ E13F              sprite_cls_cursors:
 218+ E13F CD DB E0     	call	sprite_galactic_hide
 219+ E142 CD F4 E0     	call	sprite_galactic_hyper_hide
 220+ E145 CD 0D E1     	call	sprite_local_hide
 221+ E148 CD 26 E1     	call	sprite_local_hyper_hide
 222+ E14B C9           	ret
 223+ E14C
 224+ E14C              init_sprites:
 225+ E14C CD 3F E1     	call		sprite_cls_cursors
 226+ E14F ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 227+ E153 C9           	ret
 228+ E154
# file closed: ./Layer3Sprites/sprite_routines.asm
1285  E154                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E154              sprite_load_sprite_data:
   2+ E154 01 3B 30     	ld			bc, $303B; SPRITE_SLOT_PORT
   3+ E157 AF           	xor			a
   4+ E158 ED 79        	out			(c),a							; Prime slot upload
   5+ E15A 11 00 0C     	ld			de,12	* 256						; nbr of sprites to upload
   6+ E15D 21 6B E1     	ld			hl,Sprite1						; sprites are stored contiguous
   7+ E160              SpriteLoadLoop:
   8+ E160 01 5B 00     	ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   9+ E163 ED 90        	outinb											; do final 256th sprite
  10+ E165 1B           	dec			de
  11+ E166 7A           	ld			a,d
  12+ E167 B3           	or			e
  13+ E168 20 F6        	jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  14+ E16A C9           	ret
  15+ E16B
# file closed: ./Layer3Sprites/sprite_load.asm
1286  E16B                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E16B              Sprite1:
   2+ E16B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E16F E3 E3 E3 E3
   2+ E173 E3 E3 E3 E3
   2+ E177 E3 E3 E3 E3
   3+ E17B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E17F E3 E3 E3 E3
   3+ E183 E3 E3 E3 E3
   3+ E187 E3 E3 E3 E3
   4+ E18B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E18F E3 E3 E3 E3
   4+ E193 E3 E3 E3 E3
   4+ E197 E3 E3 E3 E3
   5+ E19B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E19F E3 E3 E3 E3
   5+ E1A3 E3 E3 E3 E3
   5+ E1A7 E3 E3 E3 E3
   6+ E1AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E1AF E3 E3 E3 E3
   6+ E1B3 E3 E3 E3 E3
   6+ E1B7 E3 E3 E3 E3
   7+ E1BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E1BF E3 E3 E3 E3
   7+ E1C3 E3 E3 E3 E3
   7+ E1C7 E3 E3 E3 E3
   8+ E1CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E1CF E3 E3 E3 E3
   8+ E1D3 E3 E3 E3 E3
   8+ E1D7 E3 E3 E3 E3
   9+ E1DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E1DF E3 E3 E3 E3
   9+ E1E3 E3 E3 E3 E3
   9+ E1E7 E3 E3 E3 E3
  10+ E1EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E1EF E3 E3 E3 E3
  10+ E1F3 E3 E3 E3 E3
  10+ E1F7 E3 E3 E3 90
  11+ E1FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E1FF E3 E3 E3 E3
  11+ E203 E3 E3 E3 E3
  11+ E207 E3 E3 E3 B4
  12+ E20B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E20F E3 E3 E3 E3
  12+ E213 E3 E3 E3 E3
  12+ E217 E3 E3 E3 B4
  13+ E21B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E21F E3 E3 E3 E3
  13+ E223 E3 E3 E3 E3
  13+ E227 E3 E3 E3 D8
  14+ E22B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E22F E3 E3 E3 E3
  14+ E233 E3 E3 E3 E3
  14+ E237 E3 E3 E3 D8
  15+ E23B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E23F E3 E3 E3 E3
  15+ E243 E3 E3 E3 E3
  15+ E247 E3 E3 E3 FC
  16+ E24B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E24F E3 E3 E3 E3
  16+ E253 E3 E3 E3 E3
  16+ E257 E3 E3 E3 FC
  17+ E25B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E25F E3 E3 E3 E3
  17+ E263 90 B4 B4 D8
  17+ E267 D8 FC FC E3
  18+ E26B
  19+ E26B
  20+ E26B
  21+ E26B              Sprite2:
  22+ E26B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E26F E3 E3 E3 E3
  22+ E273 E3 E3 E3 E3
  22+ E277 E3 E3 E3 E3
  23+ E27B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E27F E3 E3 E3 E3
  23+ E283 E3 E3 E3 E3
  23+ E287 E3 E3 E3 E3
  24+ E28B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E28F E3 E3 E3 E3
  24+ E293 E3 E3 E3 E3
  24+ E297 E3 E3 E3 E3
  25+ E29B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E29F E3 E3 E3 E3
  25+ E2A3 E3 E3 E3 E3
  25+ E2A7 E3 E3 E3 E3
  26+ E2AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E2AF E3 E3 E3 E3
  26+ E2B3 E3 E3 E3 E3
  26+ E2B7 E3 E3 E3 E3
  27+ E2BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E2BF E3 E3 E3 E3
  27+ E2C3 E3 E3 E3 E3
  27+ E2C7 E3 E3 E3 E3
  28+ E2CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E2CF E3 E3 E3 E3
  28+ E2D3 E3 E3 E3 E3
  28+ E2D7 E3 E3 E3 E3
  29+ E2DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E2DF E3 E3 E3 E3
  29+ E2E3 E3 E3 E3 E3
  29+ E2E7 E3 E3 E3 E3
  30+ E2EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E2EF E3 E3 E3 E3
  30+ E2F3 E3 E3 E3 E3
  30+ E2F7 E3 E3 E3 E3
  31+ E2FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E2FF E3 E3 E3 E3
  31+ E303 E3 E3 E3 E3
  31+ E307 E3 E3 E3 E3
  32+ E30B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E30F E3 E3 E3 E3
  32+ E313 E3 E3 E3 E3
  32+ E317 E3 E3 E3 E3
  33+ E31B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E31F E3 E3 E3 E3
  33+ E323 E3 E3 E3 E3
  33+ E327 E3 E3 E3 E3
  34+ E32B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E32F E3 E3 E3 E3
  34+ E333 E3 E3 E3 E3
  34+ E337 E3 E3 E3 E3
  35+ E33B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E33F E3 E3 E3 E3
  35+ E343 E3 E3 E3 E3
  35+ E347 E3 E3 E3 E3
  36+ E34B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E34F E3 E3 E3 E3
  36+ E353 E3 E3 E3 E3
  36+ E357 E3 E3 E3 E3
  37+ E35B FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E35F B4 B4 90 E3
  37+ E363 E3 E3 E3 E3
  37+ E367 E3 E3 E3 E3
  38+ E36B
  39+ E36B
  40+ E36B
  41+ E36B              Sprite3:
  42+ E36B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E36F E3 E3 E3 E3
  42+ E373 E3 E3 E3 E3
  42+ E377 E3 E3 E3 FC
  43+ E37B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E37F E3 E3 E3 E3
  43+ E383 E3 E3 E3 E3
  43+ E387 E3 E3 E3 FC
  44+ E38B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E38F E3 E3 E3 E3
  44+ E393 E3 E3 E3 E3
  44+ E397 E3 E3 E3 D8
  45+ E39B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E39F E3 E3 E3 E3
  45+ E3A3 E3 E3 E3 E3
  45+ E3A7 E3 E3 E3 D8
  46+ E3AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E3AF E3 E3 E3 E3
  46+ E3B3 E3 E3 E3 E3
  46+ E3B7 E3 E3 E3 B4
  47+ E3BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E3BF E3 E3 E3 E3
  47+ E3C3 E3 E3 E3 E3
  47+ E3C7 E3 E3 E3 B4
  48+ E3CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E3CF E3 E3 E3 E3
  48+ E3D3 E3 E3 E3 E3
  48+ E3D7 E3 E3 E3 90
  49+ E3DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E3DF E3 E3 E3 E3
  49+ E3E3 E3 E3 E3 E3
  49+ E3E7 E3 E3 E3 E3
  50+ E3EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E3EF E3 E3 E3 E3
  50+ E3F3 E3 E3 E3 E3
  50+ E3F7 E3 E3 E3 E3
  51+ E3FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E3FF E3 E3 E3 E3
  51+ E403 E3 E3 E3 E3
  51+ E407 E3 E3 E3 E3
  52+ E40B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E40F E3 E3 E3 E3
  52+ E413 E3 E3 E3 E3
  52+ E417 E3 E3 E3 E3
  53+ E41B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E41F E3 E3 E3 E3
  53+ E423 E3 E3 E3 E3
  53+ E427 E3 E3 E3 E3
  54+ E42B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E42F E3 E3 E3 E3
  54+ E433 E3 E3 E3 E3
  54+ E437 E3 E3 E3 E3
  55+ E43B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E43F E3 E3 E3 E3
  55+ E443 E3 E3 E3 E3
  55+ E447 E3 E3 E3 E3
  56+ E44B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E44F E3 E3 E3 E3
  56+ E453 E3 E3 E3 E3
  56+ E457 E3 E3 E3 E3
  57+ E45B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E45F E3 E3 E3 E3
  57+ E463 E3 E3 E3 E3
  57+ E467 E3 E3 E3 E3
  58+ E46B
  59+ E46B
  60+ E46B
  61+ E46B              Sprite4:
  62+ E46B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E46F E3 E3 E3 E3
  62+ E473 E3 E3 E3 E3
  62+ E477 E3 E3 E3 E3
  63+ E47B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E47F E3 E3 E3 E3
  63+ E483 E3 E3 E3 E3
  63+ E487 E3 E3 E3 E3
  64+ E48B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E48F E3 E3 E3 E3
  64+ E493 E3 E3 E3 E3
  64+ E497 E3 E3 E3 E3
  65+ E49B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E49F E3 E3 E3 E3
  65+ E4A3 E3 E3 E3 E3
  65+ E4A7 E3 E3 E3 E3
  66+ E4AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E4AF E3 E3 E3 E3
  66+ E4B3 E3 E3 E3 E3
  66+ E4B7 E3 E3 E3 E3
  67+ E4BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E4BF E3 E3 E3 E3
  67+ E4C3 E3 E3 E3 E3
  67+ E4C7 E3 E3 E3 E3
  68+ E4CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E4CF E3 E3 E3 E3
  68+ E4D3 E3 E3 E3 E3
  68+ E4D7 E3 E3 E3 E3
  69+ E4DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E4DF E3 E3 E3 E3
  69+ E4E3 E3 E3 E3 E3
  69+ E4E7 E3 E3 E3 E3
  70+ E4EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E4EF E3 E3 E3 E3
  70+ E4F3 E3 E3 E3 E3
  70+ E4F7 E3 E3 E3 E3
  71+ E4FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E4FF E3 E3 E3 E3
  71+ E503 E3 E3 E3 E3
  71+ E507 E3 E3 E3 E3
  72+ E50B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E50F E3 E3 E3 E3
  72+ E513 E3 E3 E3 E3
  72+ E517 E3 E3 E3 E3
  73+ E51B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E51F E3 E3 E3 E3
  73+ E523 E3 E3 E3 E3
  73+ E527 E3 E3 E3 12
  74+ E52B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E52F E3 E3 E3 E3
  74+ E533 E3 E3 E3 E3
  74+ E537 E3 E3 E3 16
  75+ E53B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E53F E3 E3 E3 E3
  75+ E543 E3 E3 E3 E3
  75+ E547 E3 E3 E3 1A
  76+ E54B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E54F E3 E3 E3 E3
  76+ E553 E3 E3 E3 E3
  76+ E557 E3 E3 E3 1F
  77+ E55B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E55F E3 E3 E3 E3
  77+ E563 E3 E3 E3 12
  77+ E567 16 1A 1F E3
  78+ E56B
  79+ E56B
  80+ E56B
  81+ E56B              Sprite5:
  82+ E56B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E56F E3 E3 E3 E3
  82+ E573 E3 E3 E3 E3
  82+ E577 E3 E3 E3 E3
  83+ E57B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E57F E3 E3 E3 E3
  83+ E583 E3 E3 E3 E3
  83+ E587 E3 E3 E3 E3
  84+ E58B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E58F E3 E3 E3 E3
  84+ E593 E3 E3 E3 E3
  84+ E597 E3 E3 E3 E3
  85+ E59B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E59F E3 E3 E3 E3
  85+ E5A3 E3 E3 E3 E3
  85+ E5A7 E3 E3 E3 E3
  86+ E5AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E5AF E3 E3 E3 E3
  86+ E5B3 E3 E3 E3 E3
  86+ E5B7 E3 E3 E3 E3
  87+ E5BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E5BF E3 E3 E3 E3
  87+ E5C3 E3 E3 E3 E3
  87+ E5C7 E3 E3 E3 E3
  88+ E5CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E5CF E3 E3 E3 E3
  88+ E5D3 E3 E3 E3 E3
  88+ E5D7 E3 E3 E3 E3
  89+ E5DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E5DF E3 E3 E3 E3
  89+ E5E3 E3 E3 E3 E3
  89+ E5E7 E3 E3 E3 E3
  90+ E5EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E5EF E3 E3 E3 E3
  90+ E5F3 E3 E3 E3 E3
  90+ E5F7 E3 E3 E3 E3
  91+ E5FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E5FF E3 E3 E3 E3
  91+ E603 E3 E3 E3 E3
  91+ E607 E3 E3 E3 E3
  92+ E60B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E60F E3 E3 E3 E3
  92+ E613 E3 E3 E3 E3
  92+ E617 E3 E3 E3 E3
  93+ E61B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E61F E3 E3 E3 E3
  93+ E623 E3 E3 E3 E3
  93+ E627 E3 E3 E3 E3
  94+ E62B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E62F E3 E3 E3 E3
  94+ E633 E3 E3 E3 E3
  94+ E637 E3 E3 E3 E3
  95+ E63B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E63F E3 E3 E3 E3
  95+ E643 E3 E3 E3 E3
  95+ E647 E3 E3 E3 E3
  96+ E64B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E64F E3 E3 E3 E3
  96+ E653 E3 E3 E3 E3
  96+ E657 E3 E3 E3 E3
  97+ E65B 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E65F E3 E3 E3 E3
  97+ E663 E3 E3 E3 E3
  97+ E667 E3 E3 E3 E3
  98+ E66B
  99+ E66B
 100+ E66B
 101+ E66B              Sprite6:
 102+ E66B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E66F E3 E3 E3 E3
 102+ E673 E3 E3 E3 E3
 102+ E677 E3 E3 E3 1F
 103+ E67B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E67F E3 E3 E3 E3
 103+ E683 E3 E3 E3 E3
 103+ E687 E3 E3 E3 1A
 104+ E68B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E68F E3 E3 E3 E3
 104+ E693 E3 E3 E3 E3
 104+ E697 E3 E3 E3 16
 105+ E69B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E69F E3 E3 E3 E3
 105+ E6A3 E3 E3 E3 E3
 105+ E6A7 E3 E3 E3 12
 106+ E6AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E6AF E3 E3 E3 E3
 106+ E6B3 E3 E3 E3 E3
 106+ E6B7 E3 E3 E3 E3
 107+ E6BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E6BF E3 E3 E3 E3
 107+ E6C3 E3 E3 E3 E3
 107+ E6C7 E3 E3 E3 E3
 108+ E6CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E6CF E3 E3 E3 E3
 108+ E6D3 E3 E3 E3 E3
 108+ E6D7 E3 E3 E3 E3
 109+ E6DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E6DF E3 E3 E3 E3
 109+ E6E3 E3 E3 E3 E3
 109+ E6E7 E3 E3 E3 E3
 110+ E6EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E6EF E3 E3 E3 E3
 110+ E6F3 E3 E3 E3 E3
 110+ E6F7 E3 E3 E3 E3
 111+ E6FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E6FF E3 E3 E3 E3
 111+ E703 E3 E3 E3 E3
 111+ E707 E3 E3 E3 E3
 112+ E70B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ E70F E3 E3 E3 E3
 112+ E713 E3 E3 E3 E3
 112+ E717 E3 E3 E3 E3
 113+ E71B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ E71F E3 E3 E3 E3
 113+ E723 E3 E3 E3 E3
 113+ E727 E3 E3 E3 E3
 114+ E72B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ E72F E3 E3 E3 E3
 114+ E733 E3 E3 E3 E3
 114+ E737 E3 E3 E3 E3
 115+ E73B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ E73F E3 E3 E3 E3
 115+ E743 E3 E3 E3 E3
 115+ E747 E3 E3 E3 E3
 116+ E74B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ E74F E3 E3 E3 E3
 116+ E753 E3 E3 E3 E3
 116+ E757 E3 E3 E3 E3
 117+ E75B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ E75F E3 E3 E3 E3
 117+ E763 E3 E3 E3 E3
 117+ E767 E3 E3 E3 E3
 118+ E76B
 119+ E76B
 120+ E76B
 121+ E76B              Sprite7:
 122+ E76B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ E76F E3 E3 E3 E3
 122+ E773 E3 E3 E3 E3
 122+ E777 E3 E3 E3 E3
 123+ E77B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ E77F E3 E3 E3 E3
 123+ E783 E3 E3 E3 E3
 123+ E787 E3 E3 E3 09
 124+ E78B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ E78F E3 E3 E3 E3
 124+ E793 E3 E3 E3 E3
 124+ E797 E3 E3 E3 09
 125+ E79B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ E79F E3 E3 E3 E3
 125+ E7A3 E3 E3 E3 E3
 125+ E7A7 E3 E3 E3 2C
 126+ E7AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ E7AF E3 E3 E3 E3
 126+ E7B3 E3 E3 E3 E3
 126+ E7B7 E3 E3 E3 2C
 127+ E7BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ E7BF E3 E3 E3 E3
 127+ E7C3 E3 E3 E3 E3
 127+ E7C7 E3 E3 E3 50
 128+ E7CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ E7CF E3 E3 E3 E3
 128+ E7D3 E3 E3 E3 E3
 128+ E7D7 E3 E3 E3 50
 129+ E7DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ E7DF E3 E3 E3 E3
 129+ E7E3 E3 E3 E3 E3
 129+ E7E7 E3 E3 E3 50
 130+ E7EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ E7EF E3 E3 E3 E3
 130+ E7F3 E3 E3 E3 E3
 130+ E7F7 E3 E3 E3 15
 131+ E7FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ E7FF E3 E3 E3 E3
 131+ E803 E3 E3 E3 E3
 131+ E807 E3 E3 E3 15
 132+ E80B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ E80F E3 E3 E3 E3
 132+ E813 E3 E3 E3 E3
 132+ E817 E3 E3 E3 15
 133+ E81B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ E81F E3 E3 E3 E3
 133+ E823 E3 E3 E3 E3
 133+ E827 E3 E3 E3 7C
 134+ E82B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ E82F E3 E3 E3 E3
 134+ E833 E3 E3 E3 E3
 134+ E837 E3 E3 E3 7C
 135+ E83B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ E83F E3 E3 E3 E3
 135+ E843 E3 E3 E3 E3
 135+ E847 E3 E3 E3 7C
 136+ E84B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ E84F E3 E3 E3 E3
 136+ E853 E3 E3 E3 E3
 136+ E857 E3 E3 E3 7C
 137+ E85B E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ E85F 2C 50 50 50
 137+ E863 15 15 15 7C
 137+ E867 7C 7C 7C E3
 138+ E86B
 139+ E86B
 140+ E86B
 141+ E86B              Sprite8:
 142+ E86B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ E86F E3 E3 E3 E3
 142+ E873 E3 E3 E3 E3
 142+ E877 E3 E3 E3 E3
 143+ E87B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ E87F E3 E3 E3 E3
 143+ E883 E3 E3 E3 E3
 143+ E887 E3 E3 E3 E3
 144+ E88B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ E88F E3 E3 E3 E3
 144+ E893 E3 E3 E3 E3
 144+ E897 E3 E3 E3 E3
 145+ E89B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ E89F E3 E3 E3 E3
 145+ E8A3 E3 E3 E3 E3
 145+ E8A7 E3 E3 E3 E3
 146+ E8AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ E8AF E3 E3 E3 E3
 146+ E8B3 E3 E3 E3 E3
 146+ E8B7 E3 E3 E3 E3
 147+ E8BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ E8BF E3 E3 E3 E3
 147+ E8C3 E3 E3 E3 E3
 147+ E8C7 E3 E3 E3 E3
 148+ E8CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ E8CF E3 E3 E3 E3
 148+ E8D3 E3 E3 E3 E3
 148+ E8D7 E3 E3 E3 E3
 149+ E8DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ E8DF E3 E3 E3 E3
 149+ E8E3 E3 E3 E3 E3
 149+ E8E7 E3 E3 E3 E3
 150+ E8EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ E8EF E3 E3 E3 E3
 150+ E8F3 E3 E3 E3 E3
 150+ E8F7 E3 E3 E3 E3
 151+ E8FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ E8FF E3 E3 E3 E3
 151+ E903 E3 E3 E3 E3
 151+ E907 E3 E3 E3 E3
 152+ E90B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ E90F E3 E3 E3 E3
 152+ E913 E3 E3 E3 E3
 152+ E917 E3 E3 E3 E3
 153+ E91B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ E91F E3 E3 E3 E3
 153+ E923 E3 E3 E3 E3
 153+ E927 E3 E3 E3 E3
 154+ E92B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ E92F E3 E3 E3 E3
 154+ E933 E3 E3 E3 E3
 154+ E937 E3 E3 E3 E3
 155+ E93B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ E93F E3 E3 E3 E3
 155+ E943 E3 E3 E3 E3
 155+ E947 E3 E3 E3 E3
 156+ E94B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ E94F E3 E3 E3 E3
 156+ E953 E3 E3 E3 E3
 156+ E957 E3 E3 E3 E3
 157+ E95B 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ E95F 15 15 15 50
 157+ E963 50 50 2C 2C
 157+ E967 09 09 E3 E3
 158+ E96B
 159+ E96B
 160+ E96B
 161+ E96B              Sprite9:
 162+ E96B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ E96F E3 E3 E3 E3
 162+ E973 E3 E3 E3 E3
 162+ E977 E3 E3 E3 7C
 163+ E97B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ E97F E3 E3 E3 E3
 163+ E983 E3 E3 E3 E3
 163+ E987 E3 E3 E3 7C
 164+ E98B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ E98F E3 E3 E3 E3
 164+ E993 E3 E3 E3 E3
 164+ E997 E3 E3 E3 7C
 165+ E99B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ E99F E3 E3 E3 E3
 165+ E9A3 E3 E3 E3 E3
 165+ E9A7 E3 E3 E3 7C
 166+ E9AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ E9AF E3 E3 E3 E3
 166+ E9B3 E3 E3 E3 E3
 166+ E9B7 E3 E3 E3 15
 167+ E9BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ E9BF E3 E3 E3 E3
 167+ E9C3 E3 E3 E3 E3
 167+ E9C7 E3 E3 E3 15
 168+ E9CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ E9CF E3 E3 E3 E3
 168+ E9D3 E3 E3 E3 E3
 168+ E9D7 E3 E3 E3 15
 169+ E9DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ E9DF E3 E3 E3 E3
 169+ E9E3 E3 E3 E3 E3
 169+ E9E7 E3 E3 E3 50
 170+ E9EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ E9EF E3 E3 E3 E3
 170+ E9F3 E3 E3 E3 E3
 170+ E9F7 E3 E3 E3 50
 171+ E9FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ E9FF E3 E3 E3 E3
 171+ EA03 E3 E3 E3 E3
 171+ EA07 E3 E3 E3 50
 172+ EA0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ EA0F E3 E3 E3 E3
 172+ EA13 E3 E3 E3 E3
 172+ EA17 E3 E3 E3 2C
 173+ EA1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ EA1F E3 E3 E3 E3
 173+ EA23 E3 E3 E3 E3
 173+ EA27 E3 E3 E3 2C
 174+ EA2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ EA2F E3 E3 E3 E3
 174+ EA33 E3 E3 E3 E3
 174+ EA37 E3 E3 E3 09
 175+ EA3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ EA3F E3 E3 E3 E3
 175+ EA43 E3 E3 E3 E3
 175+ EA47 E3 E3 E3 09
 176+ EA4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EA4F E3 E3 E3 E3
 176+ EA53 E3 E3 E3 E3
 176+ EA57 E3 E3 E3 E3
 177+ EA5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ EA5F E3 E3 E3 E3
 177+ EA63 E3 E3 E3 E3
 177+ EA67 E3 E3 E3 E3
 178+ EA6B
 179+ EA6B
 180+ EA6B
 181+ EA6B              Sprite10:
 182+ EA6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ EA6F E3 E3 E3 E3
 182+ EA73 E3 E3 E3 E3
 182+ EA77 E3 E3 E3 E3
 183+ EA7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ EA7F E3 E3 E3 E3
 183+ EA83 E3 E3 E3 E3
 183+ EA87 E3 E3 E3 44
 184+ EA8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ EA8F E3 E3 E3 E3
 184+ EA93 E3 E3 E3 E3
 184+ EA97 E3 E3 E3 64
 185+ EA9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ EA9F E3 E3 E3 E3
 185+ EAA3 E3 E3 E3 E3
 185+ EAA7 E3 E3 E3 64
 186+ EAAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EAAF E3 E3 E3 E3
 186+ EAB3 E3 E3 E3 E3
 186+ EAB7 E3 E3 E3 64
 187+ EABB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EABF E3 E3 E3 E3
 187+ EAC3 E3 E3 E3 E3
 187+ EAC7 E3 E3 E3 A8
 188+ EACB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EACF E3 E3 E3 E3
 188+ EAD3 E3 E3 E3 E3
 188+ EAD7 E3 E3 E3 A8
 189+ EADB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EADF E3 E3 E3 E3
 189+ EAE3 E3 E3 E3 E3
 189+ EAE7 E3 E3 E3 A8
 190+ EAEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EAEF E3 E3 E3 E3
 190+ EAF3 E3 E3 E3 E3
 190+ EAF7 E3 E3 E3 CC
 191+ EAFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EAFF E3 E3 E3 E3
 191+ EB03 E3 E3 E3 E3
 191+ EB07 E3 E3 E3 CC
 192+ EB0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EB0F E3 E3 E3 E3
 192+ EB13 E3 E3 E3 E3
 192+ EB17 E3 E3 E3 CC
 193+ EB1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EB1F E3 E3 E3 E3
 193+ EB23 E3 E3 E3 E3
 193+ EB27 E3 E3 E3 EC
 194+ EB2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EB2F E3 E3 E3 E3
 194+ EB33 E3 E3 E3 E3
 194+ EB37 E3 E3 E3 EC
 195+ EB3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EB3F E3 E3 E3 E3
 195+ EB43 E3 E3 E3 E3
 195+ EB47 E3 E3 E3 EC
 196+ EB4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EB4F E3 E3 E3 E3
 196+ EB53 E3 E3 E3 E3
 196+ EB57 E3 E3 E3 EC
 197+ EB5B E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EB5F 64 A8 A8 A8
 197+ EB63 CC CC CC EC
 197+ EB67 EC EC EC E3
 198+ EB6B
 199+ EB6B
 200+ EB6B
 201+ EB6B              Sprite11:
 202+ EB6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EB6F E3 E3 E3 E3
 202+ EB73 E3 E3 E3 E3
 202+ EB77 E3 E3 E3 E3
 203+ EB7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EB7F E3 E3 E3 E3
 203+ EB83 E3 E3 E3 E3
 203+ EB87 E3 E3 E3 E3
 204+ EB8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EB8F E3 E3 E3 E3
 204+ EB93 E3 E3 E3 E3
 204+ EB97 E3 E3 E3 E3
 205+ EB9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EB9F E3 E3 E3 E3
 205+ EBA3 E3 E3 E3 E3
 205+ EBA7 E3 E3 E3 E3
 206+ EBAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EBAF E3 E3 E3 E3
 206+ EBB3 E3 E3 E3 E3
 206+ EBB7 E3 E3 E3 E3
 207+ EBBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EBBF E3 E3 E3 E3
 207+ EBC3 E3 E3 E3 E3
 207+ EBC7 E3 E3 E3 E3
 208+ EBCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EBCF E3 E3 E3 E3
 208+ EBD3 E3 E3 E3 E3
 208+ EBD7 E3 E3 E3 E3
 209+ EBDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EBDF E3 E3 E3 E3
 209+ EBE3 E3 E3 E3 E3
 209+ EBE7 E3 E3 E3 E3
 210+ EBEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EBEF E3 E3 E3 E3
 210+ EBF3 E3 E3 E3 E3
 210+ EBF7 E3 E3 E3 E3
 211+ EBFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EBFF E3 E3 E3 E3
 211+ EC03 E3 E3 E3 E3
 211+ EC07 E3 E3 E3 E3
 212+ EC0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EC0F E3 E3 E3 E3
 212+ EC13 E3 E3 E3 E3
 212+ EC17 E3 E3 E3 E3
 213+ EC1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EC1F E3 E3 E3 E3
 213+ EC23 E3 E3 E3 E3
 213+ EC27 E3 E3 E3 E3
 214+ EC2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EC2F E3 E3 E3 E3
 214+ EC33 E3 E3 E3 E3
 214+ EC37 E3 E3 E3 E3
 215+ EC3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EC3F E3 E3 E3 E3
 215+ EC43 E3 E3 E3 E3
 215+ EC47 E3 E3 E3 E3
 216+ EC4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EC4F E3 E3 E3 E3
 216+ EC53 E3 E3 E3 E3
 216+ EC57 E3 E3 E3 E3
 217+ EC5B EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EC5F CC CC CC A8
 217+ EC63 A8 A8 64 64
 217+ EC67 64 44 E3 E3
 218+ EC6B
 219+ EC6B
 220+ EC6B
 221+ EC6B              Sprite12:
 222+ EC6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EC6F E3 E3 E3 E3
 222+ EC73 E3 E3 E3 E3
 222+ EC77 E3 E3 E3 EC
 223+ EC7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EC7F E3 E3 E3 E3
 223+ EC83 E3 E3 E3 E3
 223+ EC87 E3 E3 E3 EC
 224+ EC8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EC8F E3 E3 E3 E3
 224+ EC93 E3 E3 E3 E3
 224+ EC97 E3 E3 E3 EC
 225+ EC9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EC9F E3 E3 E3 E3
 225+ ECA3 E3 E3 E3 E3
 225+ ECA7 E3 E3 E3 EC
 226+ ECAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ ECAF E3 E3 E3 E3
 226+ ECB3 E3 E3 E3 E3
 226+ ECB7 E3 E3 E3 CC
 227+ ECBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ ECBF E3 E3 E3 E3
 227+ ECC3 E3 E3 E3 E3
 227+ ECC7 E3 E3 E3 CC
 228+ ECCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ ECCF E3 E3 E3 E3
 228+ ECD3 E3 E3 E3 E3
 228+ ECD7 E3 E3 E3 CC
 229+ ECDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ ECDF E3 E3 E3 E3
 229+ ECE3 E3 E3 E3 E3
 229+ ECE7 E3 E3 E3 A8
 230+ ECEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ ECEF E3 E3 E3 E3
 230+ ECF3 E3 E3 E3 E3
 230+ ECF7 E3 E3 E3 A8
 231+ ECFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ ECFF E3 E3 E3 E3
 231+ ED03 E3 E3 E3 E3
 231+ ED07 E3 E3 E3 A8
 232+ ED0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ ED0F E3 E3 E3 E3
 232+ ED13 E3 E3 E3 E3
 232+ ED17 E3 E3 E3 64
 233+ ED1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ ED1F E3 E3 E3 E3
 233+ ED23 E3 E3 E3 E3
 233+ ED27 E3 E3 E3 64
 234+ ED2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ ED2F E3 E3 E3 E3
 234+ ED33 E3 E3 E3 E3
 234+ ED37 E3 E3 E3 64
 235+ ED3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ ED3F E3 E3 E3 E3
 235+ ED43 E3 E3 E3 E3
 235+ ED47 E3 E3 E3 44
 236+ ED4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ ED4F E3 E3 E3 E3
 236+ ED53 E3 E3 E3 E3
 236+ ED57 E3 E3 E3 E3
 237+ ED5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ ED5F E3 E3 E3 E3
 237+ ED63 E3 E3 E3 E3
 237+ ED67 E3 E3 E3 E3
 238+ ED6B
# file closed: ./Layer3Sprites/SpriteSheet.asm
1287  ED6B              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1288  ED6B                  SLOT    ConsoleImageAddr
1289  ED6B                  PAGE    BankConsole
1290  ED6B              	ORG     ConsoleImageAddr, BankConsole
1291  E000
1292  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 00 00
  67+ E808 00 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 00 00
  68+ E828 00 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 00 00
  69+ E848 00 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
# file closed: ./Images/ConsoleImageData.asm
1293  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1294  E900                  SLOT    ViewFrontAddr
1295  E900                  PAGE    BankFrontView
1296  E900                  ORG     ViewFrontAddr
1297  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 E3 91                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 E4 91                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A DF 91                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 E2 91     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 E1 91                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 A6 C0     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 D6 91                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 D7 91                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A D4 91                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 D5 91     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 D3 91                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 A7 C0     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 7C E0                             call    l1_cls
  50+ C071 CD 87 E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 02 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD 3F E1                             call    sprite_cls_cursors
  55+ C082                                      MMUSelectConsoleBank
  55+ C082 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  56+ C086 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  57+ C089 11 00 E0                             ld          de,ConsoleImageData
  58+ C08C 01 00 08                             ld          bc, ScreenL1BottomLen
  59+ C08F CD B1 8E                             call        memcopy_dma
  60+ C092 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  61+ C095 11 00 E8                             ld          de,ConsoleAttributes
  62+ C098 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  63+ C09B CD B1 8E                             call        memcopy_dma
  64+ C09E CD 12 8B                             call        InitialiseStars
  65+ C0A1 AF                                   xor         a
  66+ C0A2 32 36 92                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  67+ C0A5 C9                                   ret
  68+ C0A6
  69+ C0A6              dampenRate:             equ     $04
  70+ C0A6 04           dampenRcounter:         DB      dampenRate
  71+ C0A7 04           dampenPcounter:         DB      dampenRate
  72+ C0A8 AF           input_front_view:       xor         a
  73+ C0A9 2A 16 8F                             ld      hl,(addr_Pressed_Accellerate)
  74+ C0AC 7E                                   ld      a,(hl)
  75+ C0AD                                      IfAIsZeroGoto     TestDecellerate
  75+ C0AD A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  75+ C0AE CA CA C0    >				jp	z, TestDecellerate
  76+ C0B1 3A 20 92                             ld      a,(SHIPMAXSPEED)
  77+ C0B4 57                                   ld      d,a
  78+ C0B5 3A 21 92                             ld      a,(DELTA)
  79+ C0B8                                      JumpIfAGTENusng d,TestDecellerate
  79+ C0B8 BA          >                        cp     d
  79+ C0B9 D2 CA C0    >                        jp		nc,TestDecellerate
  80+ C0BC 3C                                   inc     a
  81+ C0BD 32 21 92                             ld      (DELTA),a
  82+ C0C0 2A 22 92                             ld      hl,(DELT4Lo)
  83+ C0C3 ED 34 04 00                          add     hl,4
  84+ C0C7 22 22 92                             ld      (DELT4Lo),hl
  85+ C0CA 2A 18 8F     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
  86+ C0CD 7E                                   ld      a,(hl)
  87+ C0CE                                      IfAIsZeroGoto   TestLeftPressed
  87+ C0CE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  87+ C0CF CA E7 C0    >				jp	z, TestLeftPressed
  88+ C0D2 3A 21 92                             ld      a,(DELTA)
  89+ C0D5                                      IfAIsZeroGoto   TestLeftPressed
  89+ C0D5 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  89+ C0D6 CA E7 C0    >				jp	z, TestLeftPressed
  90+ C0D9 3D                                   dec     a
  91+ C0DA 32 21 92                             ld      (DELTA),a
  92+ C0DD 2A 22 92                             ld      hl,(DELT4Lo)
  93+ C0E0 2B                                   dec     hl
  94+ C0E1 2B                                   dec     hl
  95+ C0E2 2B                                   dec     hl
  96+ C0E3 2B                                   dec     hl
  97+ C0E4 22 22 92                             ld      (DELT4Lo),hl
  98+ C0E7 2A 0E 8F     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
  99+ C0EA 7E                                   ld      a,(hl)
 100+ C0EB                                      IfAIsZeroGoto   TestRightPressed
 100+ C0EB A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 100+ C0EC CA 02 C1    >				jp	z, TestRightPressed
 101+ C0EF 3A DF 91                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 102+ C0F2 21 E6 91                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 103+ C0F5 BE                                   cp      (hl)
 104+ C0F6 28 0A                                jr      z,TestRightPressed
 105+ C0F8                                      ;break
 106+ C0F8 3D                                   dec     a                                   ; increase joystick roll
 107+ C0F9 32 DF 91                             ld      (JSTX),a
 108+ C0FC CD 10 C0                             call    draw_front_calc_alpha
 109+ C0FF C3 37 C1                             jp      TestDivePressed                    ; when pressing ignore damper
 110+ C102 2A 10 8F     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 111+ C105 7E                                   ld      a,(hl)
 112+ C106                                      IfAIsZeroGoto   .DampenRoll
 112+ C106 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 112+ C107 CA 1D C1    >				jp	z, .DampenRoll
 113+ C10A 3A DF 91                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 114+ C10D 21 E5 91                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 115+ C110 BE                                   cp      (hl)
 116+ C111 28 24                                jr      z,TestDivePressed                   ; if its held then we don't dampen
 117+ C113                                      ;break
 118+ C113 3C                                   inc     a                                   ; increase joystick roll
 119+ C114 32 DF 91     .UpdateAlphRoll:        ld      (JSTX),a
 120+ C117 CD 10 C0                             call    draw_front_calc_alpha
 121+ C11A C3 37 C1                             jp      TestDivePressed                    ; when pressing ignore damper
 122+ C11D 21 A6 C0     .DampenRoll:            ld      hl,dampenRcounter
 123+ C120 35                                   dec     (hl)
 124+ C121 20 14                                jr      nz,TestDivePressed
 125+ C123 3E 04                                ld      a,dampenRate
 126+ C125 77                                   ld      (hl),a
 127+ C126 3A DF 91                             ld      a,(JSTX)
 128+ C129 FE 00                                cp      0
 129+ C12B 28 0A                                jr      z, TestDivePressed
 130+ C12D CB 7F                                bit     7,a
 131+ C12F 28 03                                jr      z,.PosRollDampen
 132+ C131 3C           .NegRollDampen:         inc     a
 133+ C132 18 01                                jr      .ApplyRollDampen
 134+ C134 3D           .PosRollDampen:         dec     a
 135+ C135 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 136+ C137              ; Dive and Climb input
 137+ C137 2A 12 8F     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 138+ C13A 7E                                   ld      a,(hl)
 139+ C13B                                      IfAIsZeroGoto   TestClimbPressed
 139+ C13B A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 139+ C13C CA 52 C1    >				jp	z, TestClimbPressed
 140+ C13F 3A D4 91                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 141+ C142 21 D9 91                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 142+ C145 BE                                   cp      (hl)
 143+ C146 28 0A                                jr      z,TestClimbPressed
 144+ C148                                      ;break
 145+ C148 3D                                   dec     a                                   ; increase joystick roll
 146+ C149 32 D4 91                             ld      (JSTY),a
 147+ C14C CD 3D C0                             call    draw_front_calc_beta
 148+ C14F C3 87 C1                             jp      ForwardCursorKeysDone
 149+ C152 2A 14 8F     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 150+ C155 7E                                   ld      a,(hl)
 151+ C156                                      IfAIsZeroGoto   .DampenPitch
 151+ C156 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 151+ C157 CA 6D C1    >				jp	z, .DampenPitch
 152+ C15A 3A D4 91                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 153+ C15D 21 D8 91                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 154+ C160 BE                                   cp      (hl)
 155+ C161 28 24                                jr      z,ForwardCursorKeysDone
 156+ C163 3C                                   inc     a                                   ; increase joystick roll
 157+ C164 32 D4 91     .UpdateBetaPitch:       ld      (JSTY),a
 158+ C167 CD 3D C0                             call    draw_front_calc_beta
 159+ C16A C3 87 C1                             jp      ForwardCursorKeysDone
 160+ C16D 21 A7 C0     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 161+ C170 35                                   dec     (hl)
 162+ C171 20 14                                jr      nz,ForwardCursorKeysDone
 163+ C173 3E 04                                ld      a,dampenRate
 164+ C175 77                                   ld      (hl),a
 165+ C176 3A D4 91                             ld      a,(JSTY)
 166+ C179 FE 00                                cp      0
 167+ C17B 28 0A                                jr      z,ForwardCursorKeysDone
 168+ C17D CB 7F                                bit     7,a
 169+ C17F 28 03                                jr      z,.PosPitchDampen
 170+ C181 3C           .NegPitchDampen:        inc     a
 171+ C182 18 01                                jr      .ApplyPitchDampen
 172+ C184 3D           .PosPitchDampen:        dec     a
 173+ C185 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 174+ C187              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 175+ C187              ; be in flight and they have to force a forward view when hyperspace is pressed
 176+ C187              ; We won't do galatic here, but for other views force to forward view
 177+ C187 3E 24        ForwardCursorKeysDone:  ld      a,c_Pressed_Hyperspace
 178+ C189 CD 11 90                             call    is_key_pressed
 179+ C18C 20 1E                                jr      nz,.NotHyperspace
 180+ C18E              ; If we are in hyperspace countdown then test for hyperspace
 181+ C18E 2A DC 91                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 182+ C191 7C                                   ld      a,h                                 ; hyperspace
 183+ C192 B5                                   or      l                                   ; .
 184+ C193 20 17                                jr      nz,.CancelHyperspace                ; .
 185+ C195              ; check selected target
 186+ C195 2A 39 93                             ld      hl,(TargetPlanetX)
 187+ C198 7C                                   ld      a,h
 188+ C199 B5                                   or      l
 189+ C19A 28 10                                jr      z,.NoTargetSelected
 190+ C19C              ; check fuel is sufficient
 191+ C19C 3A 11 96                             ld      a,(Fuel)
 192+ C19F                                      JumpIfALTMemusng    Distance, .InsufficientFuel
 192+ C19F 21 35 93    >                        ld      hl,Distance
 192+ C1A2 BE          >                        cp      (hl)
 192+ C1A3 DA AC C1    >                        jp		c,.InsufficientFuel
 193+ C1A6              ; set up timer countdown
 194+ C1A6 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 195+ C1A9 22 DC 91                             ld      (InnerHyperCount),hl                ; .
 196+ C1AC              .CancelHyperspace
 197+ C1AC              .NoTargetSelected
 198+ C1AC              .InsufficientFuel
 199+ C1AC              .NotHyperspace:
 200+ C1AC C9                                   ret
 201+ C1AD
 202+ C1AD
 203+ C1AD
 204+ C1AD
 205+ C1AD
 206+ C1AD
 207+ C1AD
# file closed: ./Views/Front_View.asm
1298  C1AD              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1299  C1AD                  SLOT    MenuStatusAddr
1300  C1AD                  PAGE    BankMenuStatus
1301  C1AD                  ORG     MenuStatusAddr
1302  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 8A AA  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 E2 92  						DW $0290,CommanderName
   5+ C018 08 0B 9E AA  						DW $0B08,txt_present_system
   6+ C01C 08 13 B1 AA  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B C4 AA  						DW $1B08,txt_condition
   8+ C024 08 23 D2 AA  						DW $2308,txt_fuel
   9+ C028 08 2B E0 AA  						DW $2B08,txt_cash
  10+ C02C 08 33 EE AA  						DW $3308,txt_legal_status
  11+ C030 08 3B FC AA  						DW $3B08,txt_rating
  12+ C034 08 4B 0A AB  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/L2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/L2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/L2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A 0F 96     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A 0D 96                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     EQ_CARGO_BAY
 156+ CD95 3A F5 92     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD 8B 8E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 170+ CDB5 DD 21 2A 96                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A F5 92     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B EC 92                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A F5 92     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B 39 93                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 62 98                             ld		hl, ConditionNameIdx
 223+ CE45 CD 64 99                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD 67 AB     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 15 AB                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A FE 92     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 43 9A                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 52 9A     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 49 9A     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B 11 93  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 6F 99                             call	getRankIndex
 260+ CEA9 21 4E 99                             ld		hl, RankingNameIdx
 261+ CEAC CD 64 99                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 7C E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c, .FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD B5 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A 36 92     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 1D                                jr			z,.PlayerIsDocked
 304+ CEFF 21 B7 92     .PlayerNotDocked:	    ld			hl, SpaceStationPresent+1				; address of first Non station
 305+ CF02 3E 01                                ld			a,1										; condition green
 306+ CF04 06 1E                                ld			b,JunkCount- (SpaceStationPresent+1) +1	; so should be 30
 307+ CF06 86           .countShipsLoop:	    add			a,(hl)
 308+ CF07 23                                   inc			hl
 309+ CF08 10 FC                                djnz		.countShipsLoop
 310+ CF0A FE 00                                cp			0
 311+ CF0C 0E 01                                ld          c,1
 312+ CF0E 28 0A                                jr			z,.PlayerColour
 313+ CF10 3A 17 93     .NoShipsAround:         ld			a,(PlayerEnergy)
 314+ CF13 FE 80                                cp			$80
 315+ CF15 3E 01                                ld          a,1
 316+ CF17 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 317+ CF19 C9                                   ret
 318+ CF1A 79           .PlayerColour:          ld          a,c
 319+ CF1B C9                                   ret
 320+ CF1C AF           .PlayerIsDocked:        xor			a
 321+ CF1D C9                                   ret
 322+ CF1E
 323+ CF1E              ;;;PrintEquipment:         ld		a,(hl)
 324+ CF1E              ;;;                        cp		0
 325+ CF1E              ;;;                        ret		z
 326+ CF1E              ;;;                        ld		a,b
 327+ CF1E              ;;;PrintEquipmentDirect:	call	expandTokenToString
 328+ CF1E              ;;;                        ld		hl,TextBuffer
 329+ CF1E              ;;;                        ld		de,(equipment_cursor)
 330+ CF1E              ;;;                        call	l1_print_at
 331+ CF1E              ;;;                        ld		bc,(equipment_cursor)
 332+ CF1E              ;;;                        ld		a,b
 333+ CF1E              ;;;                        add		a,8
 334+ CF1E              ;;;                        ld		b,a
 335+ CF1E              ;;;                        ld		(equipment_cursor),bc
 336+ CF1E              ;;;                        cp		equipmax_row
 337+ CF1E              ;;;                        jr		c,.SkipColUpdate
 338+ CF1E              ;;;.ColUpdate:             ld		hl,equipment_position2
 339+ CF1E              ;;;                        ld		(equipment_cursor),hl
 340+ CF1E              ;;;                        ret
 341+ CF1E              ;;;.SkipColUpdate:	        ld		a,b
 342+ CF1E              ;;;                        ld		(equipment_cursor+1), a
 343+ CF1E              ;;;                        ret
 344+ CF1E
 345+ CF1E              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF1E
   2++CF1E                  MMUSelectLayer1
   2++CF1E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF22 CD 7C E0     	call	l1_cls
   4++CF25 3E 07        	ld		a,7
   5++CF27 CD 88 E0     	call	l1_attr_cls_to_a
   6++CF2A                  MMUSelectLayer2
   6++CF2A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF2E CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF31 CD C9 E0     	call	l2_cls	; Get some space
   9++CF34              	MMUSelectSpriteBank
   9++CF34 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF38 CD 3F E1     	call    sprite_cls_cursors
  11++CF3B
  12++CF3B
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 346+ CF3B 3E 08                                ld		a,8
 347+ CF3D 32 31 92                             ld		(MenuIdMax),a
 348+ CF40 01 01 01     .Drawbox:               ld		bc,$0101
 349+ CF43 11 FD BE                             ld		de,$BEFD
 350+ CF46 3E C0                                ld		a,$C0
 351+ CF48                                      MMUSelectLayer2
 351+ CF48 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ CF4C CD F6 E1                             call	l2_draw_box
 353+ CF4F 01 01 0A                             ld		bc,$0A01
 354+ CF52 11 C0 FE                             ld		de,$FEC0
 355+ CF55 CD 62 E2                             call	l2_draw_horz_line
 356+ CF58 CD 95 CD     .equipment              call    STAT_buffer_list
 357+ CF5B CD BC CE                             call    draw_STAT_items
 358+ CF5E CD F3 CD                             call    draw_STAT_maintext
 359+ CF61 C9                                   ret
 360+ CF62
 361+ CF62              ;----------------------------------------------------------------------------------------------------------------------------------
 362+ CF62              ; Handles all the input whilst in the market menu
 363+ CF62 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 364+ CF64 CD 11 90                             call    is_key_pressed
 365+ CF67 CC 73 CF                             call    z,STAT_UpPressed
 366+ CF6A 3E 4C                                ld      a,c_Pressed_CursorDown
 367+ CF6C CD 11 90                             call    is_key_pressed
 368+ CF6F CC 85 CF                             call    z,STAT_DownPressed
 369+ CF72 C9                                   ret
 370+ CF73
 371+ CF73              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ CF73 AF           STAT_UpPressed:         xor     a
 373+ CF74 32 3A C0                             ld      (STAT_selected_row),a
 374+ CF77 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ CF7A FE 00                                cp      0
 376+ CF7C C8                                   ret     z
 377+ CF7D 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ CF7E 32 3B C0                             ld      (STAT_current_topItem),a
 379+ CF81 CD BC CE                             call    draw_STAT_items
 380+ CF84 C9                                   ret
 381+ CF85              ;----------------------------------------------------------------------------------------------------------------------------------
 382+ CF85 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 383+ CF87 32 3A C0                             ld      (STAT_selected_row),a
 384+ CF8A 3A 3C C0                             ld      a,(STAT_current_end)
 385+ CF8D 47                                   ld      b,a                             ; This check is if the current list is < one screen
 386+ CF8E 05                                   dec     b
 387+ CF8F 3A 3A C0                             ld      a,(STAT_selected_row)
 388+ CF92 B8                                   cp      b
 389+ CF93 C8                                   ret     z
 390+ CF94 FE 09                                cp      STAT_eqip_window_len-1
 391+ CF96 28 05                                jr      z, .check_scroll_down
 392+ CF98 21 3A C0                             ld      hl,STAT_selected_row
 393+ CF9B 34                                   inc     (hl)
 394+ CF9C C9                                   ret
 395+ CF9D 47           .check_scroll_down:     ld      b,a
 396+ CF9E 3A 3B C0                             ld      a,(STAT_current_topItem)
 397+ CFA1 80                                   add     b
 398+ CFA2 3C                                   inc     a
 399+ CFA3 21 3C C0                             ld      hl,STAT_current_end
 400+ CFA6                                      ReturnIfAGTEusng      (hl)
 400+ CFA6 BE          >                    cp    (hl)
 400+ CFA7 D0          >                    ret	 nc
 401+ CFA8 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 402+ CFAB 34                                   inc     (hl)
 403+ CFAC CD BC CE                             call    draw_STAT_items
 404+ CFAF C9                                   ret
 405+ CFB0
# file closed: ./Menus/status_menu.asm
1303  CFB0
1304  CFB0              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1305  CFB0
1306  CFB0                  SLOT    MenuEquipSAddr
1307  CFB0                  PAGE    BankMenuEquipS
1308  CFB0                  ORG     MenuEquipSAddr
1309  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 B1 9E  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD B5 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 0F 96     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 0D 96                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD B5 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 8B 8E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 7C E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD B5 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 7C E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 88 E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 3F E1     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 31 92                             ld      (MenuIdMax),a
 380+ D40C 3A F5 92     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B EC 92                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 62 E2                             call	l2_draw_horz_line
 398+ D441 3A F5 92     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 2C 9E                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 11 90                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 11 90                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 11 90                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 11 90                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                    cp    (hl)
 481+ D4EA D0          >                    ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A F5 92     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 5B 9F                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 28 96                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 12 96     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 5B 9F                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A F5 92     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 FD 92     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A 0F 96     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A 0D 96                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 28 96     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 11 96    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 FD 92     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 12 96                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 5B 9F                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 28 96                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 28 96     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 12 96                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 6E 9F                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1310  D651
1311  D651
1312  D651                  SLOT    LaunchShipAddr
1313  D651                  PAGE    BankLaunchShip
1314  D651                  ORG     LaunchShipAddr
1315  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 55 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 55 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 0B E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 0B E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD B1 8E                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD B1 8E                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 7C E0                             call    l1_cls
 129+ C180 CD 87 E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 3F E1                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 02 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 72 E0                             ld      (l2_cls_byte),a
 136+ C196 CD 92 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 72 E0                             ld      (l2_cls_byte),a
 139+ C19E CD BE E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD DD E0                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 72 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD 92 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 72 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD BE E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 20 92    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 21 92    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 22 92 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 21 92    >                        ld      (DELTA),a
 160+ C1E9 32 22 92    >                        ld      (DELT4Lo),a
 160+ C1EC 32 23 92    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 36 92                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 7C E0                             call    l1_cls
 169+ C1FC CD 87 E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 3F E1                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 02 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 72 E0                             ld      (l2_cls_byte),a
 176+ C212 CD 92 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 72 E0                             ld      (l2_cls_byte),a
 179+ C21A CD BE E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD DD E0                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 72 E0                             ld      (l2_cls_byte),a
 186+ C22F CD 92 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 72 E0                             ld      (l2_cls_byte),a
 189+ C237 CD BE E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 21 92    >                        ld      (DELTA),a
 200+ C257 32 22 92    >                        ld      (DELT4Lo),a
 200+ C25A 32 23 92    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 36 92                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E6 E1                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F6 E1                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 36 92                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E6 E1                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F6 E1                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7 3E 04        .FinishedDocking        ld      a,ScreenStatus              ; Force move to status screen
 262+ C2C9 32 AB 84                             ld      (ScreenTransitionForced),a
 263+ C2CC C9                                   ret
 264+ C2CD
 265+ C2CD
 266+ C2CD
# file closed: ./Transitions/launch_ship.asm
1316  C2CD
1317  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1318  C2CD                  SLOT    UniverseBankAddr
1319  C2CD                  PAGE    BankUNIVDATA0
1320  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1321  C000                  INCLUDE "./Universe/univ_ship_data.asm"
# file opened: ./Universe/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                      INCLUDE "./Variables/ShipPosVars.asm"
# file opened: ././Variables/ShipPosVars.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UbnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015
  12++C015              INWKxlo                     equ UBnKxlo
  13++C015              INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  14++C015              INWKxsgn                    equ UBnKzsgn                ; INWK+2
  15++C015              INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  16++C015              INWKyhi                     equ UbnKyhi                 ; Y Hi???
  17++C015              INWKysgn                    equ UBnKysgn                ; INWK +5
  18++C015              INWKzlo                     equ UBnKzlo                 ; INWK +6
  19++C015              INWKzhi                     equ UBnKzhi                 ; INWK +7
  20++C015              INWKzsgn                    equ UBnKzsgn                ; INWK +8
# file closed: ././Variables/ShipPosVars.asm
  20+ C015                                      INCLUDE "./Variables/RotationMatrixVars.asm"
# file opened: ././Variables/RotationMatrixVars.asm
   1++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
   4++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
   5++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
   6++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
   7++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
   8++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
   9++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  10++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  11++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  12++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  13++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  14++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  15++C027
# file closed: ././Variables/RotationMatrixVars.asm
  21+ C027                                      INCLUDE "./Variables/AIRuntimeData.asm"
# file opened: ././Variables/AIRuntimeData.asm
   1++C027              ; -- Ship AI data
   2++C027
   3++C027 00           UBnkspeed                   DB  0                       ; INWK +27
   4++C028 00           UBnkAccel                   DB  0                       ; INWK +28
   5++C029 00           UBnkrotXCounter             DB  0                       ; INWK +29
   6++C02A 00           UBnkrotZCounter             DB  0                       ; INWK +30
   7++C02B 00           UBnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
   8++C02C              ; Flags work as follows:
   9++C02C              ; 7 - Flag ship to be killed with debris
  10++C02C              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  11++C02C              ; 5 - Ship is exploding if set
  12++C02C              ; 4 -
  13++C02C              ; 3 - Display state - Plot as a Dot
  14++C02C              ; 2 - Nbr of Missiles bit 2
  15++C02C              ; 1 - Nbr of Missiles bit 1
  16++C02C              ; 0 - Nbr of Missiles bit 0
  17++C02C 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  18++C02D 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  19++C02E 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  20++C02F 00           UbnKEnergy                  DB  0                       ; INWK +35
  21++C030              ; Flags work as follows:
  22++C030              ;Bit	Description
  23++C030              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  24++C030              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  25++C030              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  26++C030              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  27++C030              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  28++C030              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  29++C030              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  30++C030              ;                       Hostile ships will attack us on sight; there are quite a few of them
  31++C030              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  32++C030              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  33++C030              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  34++C030              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  35++C030              ;#4	Docking flag        * 0 = not docking * 1 = docking
  36++C030              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  37++C030              ;                       This flag is randomly set for traders when they are spawned
  38++C030              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  39++C030              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  40++C030              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  41++C030              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  42++C030              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  43++C030              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  44++C030              ;                       Ships that are cops: Viper, Transporter
  45++C030              ;#7	Scooped, docked, escape pod flag
  46++C030              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  47++C030              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  48++C030              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  49++C030
# file closed: ././Variables/AIRuntimeData.asm
  22+ C030
  23+ C030              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  24+ C030              ;                    [roofv x y z ] roof vector (up)
  25+ C030              ;                    [sidev x y z ] side vector (right)
  26+ C030              rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  27+ C030              rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  28+ C030 00           univRAT      DB  0               ; 99
  29+ C031 00           univRAT2     DB  0               ; 9A
  30+ C032 00           univRAT2Val  DB  0               ; 9A
  31+ C033
  32+ C033                                      INCLUDE "./Variables/XX16Vars.asm"
# file opened: ././Variables/XX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C035 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        UBnkTransmatRoofvX          DW 0
   7++C03B              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C03B 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        UBnkTransmatNosevX          DW 0
  11++C041              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C041 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        UbnkTransmatTransX          DW 0
  15++C047 00 00        UbnkTransmatTransY          DW 0
  16++C049 00 00        UbnkTransmatTransZ          DW 0
  17++C04B              XX16                        equ UBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        UbnkTransInvRow0x0          DW 0
  20++C04D 00 00        UbnkTransInvRow0x1          DW 0
  21++C04F 00 00        UbnkTransInvRow0x2          DW 0
  22++C051 00 00        UbnkTransInvRow0x3          DW 0
  23++C053 00 00        UbnkTransInvRow1y0          DW 0
  24++C055 00 00        UbnkTransInvRow1y1          DW 0
  25++C057 00 00        UbnkTransInvRow1y2          DW 0
  26++C059 00 00        UbnkTransInvRow1y3          DW 0
  27++C05B 00 00        UbnkTransInvRow2z0          DW 0
  28++C05D 00 00        UbnkTransInvRow2z1          DW 0
  29++C05F 00 00        UbnkTransInvRow2z2          DW 0
  30++C061 00 00        UbnkTransInvRow2z3          DW 0
  31++C063
  32++C063              XX16Inv             equ UbnkTransInvRow0x0
  33++C063
# file closed: ././Variables/XX16Vars.asm
  33+ C063                                      INCLUDE "./Variables/XX25Vars.asm"
# file opened: ././Variables/XX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           UbnkProjxLo                 DB  0
   3++C064 00           UbnkProjxHi                 DB  0
   4++C065 00           UbnkProjxSgn                DB  0
   5++C066              UbnkProjx                   EQU UbnkProjxLo
   6++C066 00           UbnkProjyLo                 DB  0
   7++C067 00           UbnkProjyHi                 DB  0
   8++C068 00           UbnkProjySgn                DB  0
   9++C069              UbnkProjy                   EQU UbnkProjyLo
  10++C069 00           UbnkProjzLo                 DB  0
  11++C06A 00           UbnkProjzHi                 DB  0
  12++C06B 00           UbnkProjzSgn                DB  0
  13++C06C              UbnkProjz                   EQU UbnkProjzLo
  14++C06C              XX25                        EQU UbnkProjxLo
  15++C06C
# file closed: ././Variables/XX25Vars.asm
  34+ C06C                                      INCLUDE "./Variables/XX18Vars.asm"
# file opened: ././Variables/XX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C06F 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C072 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C075              XX18                        equ UBnkDrawCam0xLo
  15++C075
# file closed: ././Variables/XX18Vars.asm
  35+ C075
  36+ C075              ; Used to make 16 bit reads a little cleaner in source code
  37+ C075 00 00 00     UbnkZPoint                  DS  3
  38+ C078              UbnkZPointLo                equ UbnkZPoint
  39+ C078              UbnkZPointHi                equ UbnkZPoint+1
  40+ C078              UbnkZPointSign              equ UbnkZPoint+2
  41+ C078                                      INCLUDE "./Variables/XX15Vars.asm"
# file opened: ././Variables/XX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              XX15                        equ UBnkXScaled
  10++C07E              XX15VecX                    equ XX15
  11++C07E              XX15VecY                    equ XX15+1
  12++C07E              XX15VecZ                    equ XX15+2
  13++C07E              UbnkXPoint                  equ XX15
  14++C07E              UbnkXPointLo                equ XX15+0
  15++C07E              UbnkXPointHi                equ XX15+1
  16++C07E              UbnkXPointSign              equ XX15+2
  17++C07E              UbnkYPoint                  equ XX15+3
  18++C07E              UbnkYPointLo                equ XX15+3
  19++C07E              UbnkYPointHi                equ XX15+4
  20++C07E              UbnkYPointSign              equ XX15+5
  21++C07E              ; Repurposed XX15 pre clip plines
  22++C07E              UbnkPreClipX1               equ XX15+0
  23++C07E              UbnkPreClipY1               equ XX15+2
  24++C07E              UbnkPreClipX2               equ XX15+4
  25++C07E              UbnkPreClipY2               equ XX15+6
  26++C07E              ; Repurposed XX15 post clip lines
  27++C07E              UBnkNewX1                   equ XX15+0
  28++C07E              UBnkNewY1                   equ XX15+1
  29++C07E              UBnkNewX2                   equ XX15+2
  30++C07E              UBnkNewY2                   equ XX15+3
  31++C07E              ; Repurposed XX15
  32++C07E              regXX15fx                   equ UBnkXScaled
  33++C07E              regXX15fxSgn                equ UBnkXScaledSign
  34++C07E              regXX15fy                   equ UBnkYScaled
  35++C07E              regXX15fySgn                equ UBnkYScaledSign
  36++C07E              regXX15fz                   equ UBnkZScaled
  37++C07E              regXX15fzSgn                equ UBnkZScaledSign
  38++C07E              ; Repurposed XX15
  39++C07E              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C07E              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C07E              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C07E              ; After clipping the coords are two 8 bit pairs
  43++C07E              UBnkPoint1Clipped           equ UBnkXScaled
  44++C07E              UBnkPoint2Clipped           equ UBnkYScaled
  45++C07E              ; Repurposed XX15 when plotting lines
  46++C07E              ; Repurposed XX15 before calling clip routine
  47++C07E              UBnkX1                      equ XX15
  48++C07E              UBnKx1Lo                    equ XX15
  49++C07E              UBnKx1Hi                    equ XX15+1
  50++C07E              UBnkY1                      equ XX15+2
  51++C07E              UbnKy1Lo                    equ XX15+2
  52++C07E              UBnkY1Hi                    equ XX15+3
  53++C07E              UBnkX2                      equ XX15+4
  54++C07E              UBnkX2Lo                    equ XX15+4
  55++C07E              UBnkX2Hi                    equ XX15+5
  56++C07E
# file closed: ././Variables/XX15Vars.asm
  42+ C07E                                      INCLUDE "./Variables/XX12Vars.asm"
# file opened: ././Variables/XX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C080 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C081 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C082 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C083 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  XX12Save                    DS  6
  10++C08A 00 00 00...  XX12Save2                   DS  6
  11++C090              XX12                        equ UBnkXX12xLo
  12++C090              varXX12                     equ UBnkXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              UBnkY2                      equ XX12+0
  15++C090              UbnKy2Lo                    equ XX12+0
  16++C090              UBnkY2Hi                    equ XX12+1
  17++C090              UBnkDeltaXLo                equ XX12+2
  18++C090              UBnkDeltaXHi                equ XX12+3
  19++C090              UBnkDeltaYLo                equ XX12+4
  20++C090              UBnkDeltaYHi                equ XX12+5
  21++C090              UbnkGradient                equ XX12+2
  22++C090              UBnkTemp1                   equ XX12+2
  23++C090              UBnkTemp1Lo                 equ XX12+2
  24++C090              UBnkTemp1Hi                 equ XX12+3
  25++C090              UBnkTemp2                   equ XX12+3
  26++C090              UBnkTemp2Lo                 equ XX12+3
  27++C090              UBnkTemp2Hi                 equ XX12+4
  28++C090
# file closed: ././Variables/XX12Vars.asm
  43+ C090
  44+ C090
  45+ C090              ; Post clipping the results are now 8 bit
  46+ C090 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  47+ C091 00           UBnkProjectedY              DB  0
  48+ C092 00           UBnkProjectedX              DB  0
  49+ C093              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  50+ C093 00 00 00...  XX15Save                    DS  8
  51+ C09B 00 00 00...  XX15Save2                   DS  8
  52+ C0A3 00           VarBackface                 DB 0
  53+ C0A4              ; Heap (or array) information for lines and normals
  54+ C0A4              ; Coords are stored XY,XY,XY,XY
  55+ C0A4              ; Normals
  56+ C0A4              ; This needs re-oprganising now.
  57+ C0A4              ; Runtime Calculation Store
  58+ C0A4
  59+ C0A4              FaceArraySize               equ 30
  60+ C0A4              EdgeHeapSize                equ 40
  61+ C0A4              NodeArraySize               equ 40
  62+ C0A4              LineArraySize               equ 50
  63+ C0A4              ; Storage arrays for data
  64+ C0A4              ; Structure of arrays
  65+ C0A4              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  66+ C0A4              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  67+ C0A4              ; NodeArray         -  4 bytes per element      0           1            2          3
  68+ C0A4              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  69+ C0A4              ; Line Array        -  4 bytes per eleement     0           1            2          3
  70+ C0A4              ;                                               X1          Y1           X2         Y2
  71+ C0A4 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  72+ C0C2 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  73+ C162 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  74+ C202 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  75+ C2CA              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  76+ C2CA 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  77+ C2F2              ; Array current Lengths
  78+ C2F2 00           UbnkFaceVisArrayLen         DS 1
  79+ C2F3 00           UBnkNodeArrayLen            DS 1
  80+ C2F4 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  81+ C2F5 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  82+ C2F6              XX20                        equ UbnkLineArrayLen
  83+ C2F6              varXX20                     equ UbnkLineArrayLen
  84+ C2F6
  85+ C2F6
  86+ C2F6 00           UbnkEdgeHeapSize            DS 1
  87+ C2F7 00           UbnkEdgeHeapBytes           DS 1
  88+ C2F8 00           UBnkLinesHeapLen            DS 1
  89+ C2F9 00           UbnKEdgeHeapCounter         DS 1
  90+ C2FA 00           UbnKEdgeRadius              DS 1
  91+ C2FB 00           UbnKEdgeShipType            DS 1
  92+ C2FC 00           UbnKEdgeExplosionType       DS 1
  93+ C2FD
  94+ C2FD              ; Node heap is used to write out transformed Vertexs
  95+ C2FD
  96+ C2FD              ; Lines
  97+ C2FD 00 00 00     UBnkXX19                    DS  3
  98+ C300
  99+ C300
 100+ C300 00           UBnkShipModelBank           DB  0
 101+ C301 00           UBnkShipModelNbr            DB  0
 102+ C302 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 103+ C31A              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 104+ C31A              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 105+ C31A              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 106+ C31A              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 107+ C31A              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 108+ C31A              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 109+ C31A              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 110+ C31A              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 111+ C31A              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 112+ C31A              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 113+ C31A              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 114+ C31A              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 115+ C31A              DotAddr                     equ UBnkHullCopy + DotOffset
 116+ C31A              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 117+ C31A              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 118+ C31A              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 119+ C31A              QAddr                       equ UBnkHullCopy + QOffset
 120+ C31A              LaserAddr                   equ UBnkHullCopy + LaserOffset
 121+ C31A              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 122+ C31A              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 123+ C31A              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 124+ C31A              ; Static Ship Data. This is copied in when creating the universe object
 125+ C31A              XX0                         equ UBnkHullCopy        ; general hull index pointer
 126+ C31A 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 127+ C446 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 128+ C8F6 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 129+ CA22 0C           OrthagCountdown             DB  12
 130+ CA23
 131+ CA23              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 132+ CA23              UBnk_Data_len               EQU $ - StartOfUniv
 133+ CA23
 134+ CA23
 135+ CA23 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 136+ CA26 11 23 0A                             ld      de,UBnk_Data_len
 137+ CA29 AF                                   xor     a
 138+ CA2A CD 8B 8E                             call    memfill_dma
 139+ CA2D C9                                   ret
 140+ CA2E
 141+ CA2E 3E 81        ResetStationLaunch:     ld  a,%10000001
 142+ CA30 32 2C C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 143+ CA33 AF                                   xor a
 144+ CA34 32 2A C0                             ld      (UBnkrotZCounter),a             ; no pitch
 145+ CA37 32 19 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 146+ CA3A 3E FF                                ld      a,$FF
 147+ CA3C 32 29 C0                             ld      (UBnkrotXCounter),a             ; set roll to maxi on station
 148+ CA3F 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 149+ CA42 22 0C C0                             ld      (UBnKxlo),hl
 150+ CA45 21 00 00                             ld      hl,$0000
 151+ CA48 22 0F C0                             ld      (UBnKylo),hl
 152+ CA4B 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 153+ CA4E 22 12 C0                             ld      (UBnKzlo),hl
 154+ CA51 AF                                   xor     a
 155+ CA52 32 0E C0                             ld      (UBnKxsgn),a
 156+ CA55 32 11 C0                             ld      (UBnKysgn),a
 157+ CA58 3E 80                                ld      a,$80
 158+ CA5A 32 14 C0                             ld      (UBnKzsgn),a
 159+ CA5D CD 05 CD     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 160+ CA60 C9                                   ret
 161+ CA61
 162+ CA61              ;divdide by 16 using undocumented instrunctions
 163+ CA61              ;Input: BC = Dividend, DE = Divisor, HL = 0
 164+ CA61              ;Output: BC = Quotient, HL = Remainder
 165+ CA61 47           PROJ256mulAdivQ:        ld      b,a
 166+ CA62 0E 00                                ld      c,0
 167+ CA64 16 00                                ld      d,0
 168+ CA66 3A 25 92                             ld      a,(varQ)
 169+ CA69 5F                                   ld      e,a
 170+ CA6A 21 00 00     PROJDIV16UNDOC:         ld      hl,0
 171+ CA6D 78                                   ld      a,b
 172+ CA6E 06 10                                ld      b,16
 173+ CA70 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
 174+ CA72 17                                   rla             ; ...
 175+ CA73 ED 6A                                adc     hl,hl       ; ...
 176+ CA75 ED 52                                sbc     hl,de       ; ...
 177+ CA77 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
 178+ CA79 19                                   add     hl,de       ; ...
 179+ CA7A 0D                                   dec     c       ; ...
 180+ CA7B 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
 181+ CA7D 79                                   ld      a,c
 182+ CA7E 32 26 92                             ld      (varR),a
 183+ CA81 C9                                   ret
 184+ CA82              ;
 185+ CA82                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 186+ CA82              ;Output: BC = Quotient, HL = Remainder
 187+ CA82
 188+ CA82              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 189+ CA82              ;OUTPUTS:   cahl = quotient cde = divisor
 190+ CA82 32 CA 91     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 191+ CA85                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 191+ CA85 2A 12 C0    >               ld       hl,(UBnKzlo)
 191+ CA88 22 25 92    >               ld       (varQ),hl
 192+ CA8B 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
 193+ CA8E 32 27 92                             ld      (varS),a                        ; S = inkw z sign
 194+ CA91 ED 5B C8 91  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 195+ CA95 7B                                   ld      a,e                             ; num lo
 196+ CA96 F6 01                                or      1                               ; must be at least 1
 197+ CA98 32 C8 91                             ld      (varP),a                        ; store
 198+ CA9B 5F                                   ld      e,a                             ; update DE too
 199+ CA9C 3A CA 91                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 200+ CA9F 21 27 92                             ld      hl,varS                         ; hl = address of VarS
 201+ CAA2 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 202+ CAA3 E6 80                                and     $80                             ;
 203+ CAA5 32 43 92                             ld      (varT),a                        ; T = Sign bit of A
 204+ CAA8 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 205+ CAAB 3A CA 91                             ld      a,(varPhi2)                     ;
 206+ CAAE E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 207+ CAB0              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 207+ CAB0 FE 40       >                        cp     $40
 207+ CAB2 D2 C0 CA    >                        jp		nc,DV14
 208+ CAB5                                      ShiftDELeft1                            ; de (or P,P1) > 1
 208+ CAB5 CB 23       >			   sla e
 208+ CAB7 CB 12       >			   rl  d
 209+ CAB9 CB 17                                rl      a                               ; and accumulator as 3rd byte
 210+ CABB FD 2C                                inc     iyl
 211+ CABD C2 B0 CA                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 212+ CAC0 32 CA 91     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 213+ CAC3 ED 53 C8 91                          ld      (varP),de                       ; store off the value so far
 214+ CAC7 3A 27 92                             ld      a,(varS)                        ; zsign
 215+ CACA E6 7F                                and     $7F                             ; denom sg7
 216+ CACC                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 217+ CACC 2A 25 92                             ld      hl,(varQ)                       ; demon lo
 218+ CACF FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 219+ CAD1                                      ShiftHLLeft1
 219+ CAD1 CB 25       >			   sla l
 219+ CAD3 CB 14       >			   rl  h
 220+ CAD5 CB 17                                rl      a                               ; mulitply QRS by 2
 221+ CAD7 F2 CF CA                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 222+ CADA 22 25 92     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 223+ CADD 32 25 92                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 224+ CAE0 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 225+ CAE2 32 26 92                             ld      (varR),a                        ;  R
 226+ CAE5 3A CA 91                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 227+ CAE8 CD 61 CA                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 228+ CAEB 3E 00                                ld      a,0
 229+ CAED 32 3B 92                             ld      (varKp1),a
 230+ CAF0 32 3C 92                             ld      (varKp2),a
 231+ CAF3 32 3D 92                             ld      (varKp3),a                      ; clear out K+1 to K+3
 232+ CAF6 FD 7D                                ld      a,iyl                           ; Y counter for scale
 233+ CAF8                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 233+ CAF8 CB 7F       >                        bit 	7,a
 233+ CAFA CA 25 CB    >                        jp      z,DV12
 234+ CAFD 3A 26 92                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 235+ CB00 ED 5B 3A 92                          ld      de,(varK)                       ; d= k1
 236+ CB04 2A 3E 92                             ld      hl,(varK2)                      ; h = k3, l = k2
 237+ CB07 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 238+ CB08 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 239+ CB0A CB 12                                rl      d                               ; k1
 240+ CB0C CB 15                                rl      l                               ; k2
 241+ CB0E CB 14                                rl      h                               ; k3
 242+ CB10 FD 2C                                inc     iyl
 243+ CB12 20 F4                                jr      nz,DVL8                         ;
 244+ CB14 ED 53 3A 92  DVL8Save:               ld      (varK),de
 245+ CB18 22 3E 92                             ld      (varK2),hl                      ; save back K0 to k3
 246+ CB1B 3A 43 92                             ld      a,(varT)
 247+ CB1E 4F                                   ld      c,a                             ; get varT into c reg
 248+ CB1F 7C                                   ld      a,h                             ; a= k3 (sign)
 249+ CB20 B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 250+ CB21 32 4D 92                             ld      (varK3),a                       ; load sign bit back into K3
 251+ CB24 C9                                   ret
 252+ CB25              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 252+ CB25 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 252+ CB26 CA 3D CB    >				jp	z, DV13
 253+ CB29 3A 26 92                             ld      a,(varR)                        ; Reduce Remainder
 254+ CB2C CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 255+ CB2E FD 2D                                dec     iyl
 256+ CB30 C2 2C CB                             jp      nz,DVL10                        ; loop y reduce until y is zero
 257+ CB33 32 3A 92                             ld      (varK),a                        ; k Lo
 258+ CB36                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 258+ CB36 3A 43 92    >               ld       a,(varT)
 258+ CB39 32 3D 92    >               ld       (varKp3),a
 259+ CB3C C9                                   ret
 260+ CB3D              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 260+ CB3D 3A 26 92    >               ld       a,(varR)
 260+ CB40 32 3A 92    >               ld       (varK),a
 261+ CB43                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 261+ CB43 3A 43 92    >               ld       a,(varT)
 261+ CB46 32 3D 92    >               ld       (varKp3),a
 262+ CB49 C9                                   ret
 263+ CB4A
 264+ CB4A
 265+ CB4A CD 82 CA     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 266+ CB4D 3A 3D 92                             ld      a,(varKp3)
 267+ CB50 E6 7F                                and     $7F
 268+ CB52 21 3C 92                             ld      hl,varKp2
 269+ CB55 B6                                   or      (hl)
 270+ CB56 C2 6B CB                             jp      nz,PL44TooBig
 271+ CB59 3A 3B 92                             ld      a,(varKp1)
 272+ CB5C FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 273+ CB5E 30 0B                                jr      nc,PL44TooBig
 274+ CB60                                      ClearCarryFlag                          ; we have a good result regardless
 274+ CB60 B7          >                    or a
 275+ CB61 2A 3A 92                             ld      hl,(varK)                       ; get K (0 1)
 276+ CB64 3A 3D 92                             ld      a,(varKp3)                      ; if sign bit high?
 277+ CB67 CB 7F                                bit     7,a
 278+ CB69 C8                                   ret     z                               ; no so we can just return
 279+ CB6A C9           PL44:                   ret
 280+ CB6B 37           PL44TooBig:             scf
 281+ CB6C C9                                   ret
 282+ CB6D
 283+ CB6D                                      include "./Maths/ADDHLDESignBC.asm"
# file opened: ././Maths/ADDHLDESignBC.asm
   1++CB6D              ;; calcs HLB + DEC where B and C are signs
   2++CB6D              ;; result HL with A as sign
   3++CB6D              ;; special handling if result is zero forcign sign bit to be zero
   4++CB6D 78           ADDHLDESignBC:          ld      a,b
   5++CB6E E6 80                                and     SignOnly8Bit
   6++CB70 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7++CB71                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7++CB71 FA 7F CB    >                        jp		m, ADDHLDEsBCOppSGN
   8++CB74 78           ADDHLDEsBCSameSigns:    ld      a,b
   9++CB75 B1                                   or      c
  10++CB76                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10++CB76 FA 7B CB    >                        jp		m, ADDHLDEsBCSameNeg
  11++CB79 19                                   add     hl,de                       ; both positive so a will already be zero
  12++CB7A C9                                   ret
  13++CB7B 19           ADDHLDEsBCSameNeg:      add     hl,de
  14++CB7C 78                                   ld      a,b
  15++CB7D B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16++CB7E C9                                   ret
  17++CB7F B7           ADDHLDEsBCOppSGN:       or      a
  18++CB80 ED 52                                sbc     hl,de
  19++CB82 38 02                                jr      c,ADDHLDEsBCOppInvert
  20++CB84 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21++CB85 C9                                   ret
  22++CB86              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22++CB86 AF          >                    xor a
  22++CB87 95          >                    sub l
  22++CB88 6F          >                    ld l,a
  22++CB89 9F          >                    sbc a,a
  22++CB8A 94          >                    sub h
  22++CB8B 67          >                    ld h,a
  23++CB8C 78                                   ld      a,b
  24++CB8D EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25++CB8F C9                                   ret
  26++CB90
# file closed: ././Maths/ADDHLDESignBC.asm
 284+ CB90
 285+ CB90 7C           ADDHLDESignedv3:        ld      a,h
 286+ CB91 E6 80                                and     SignOnly8Bit
 287+ CB93 47                                   ld      b,a                         ;save sign bit in b
 288+ CB94 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 289+ CB95                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 289+ CB95 FA AD CB    >                        jp		m, ADDHLDEOppSGN
 290+ CB98 78           ADDHLDESameSigns:       ld      a,b
 291+ CB99 B2                                   or      d
 292+ CB9A                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 292+ CB9A FA 9F CB    >                        jp		m, ADDHLDESameNeg
 293+ CB9D 19                                   add     hl,de
 294+ CB9E C9                                   ret
 295+ CB9F 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 296+ CBA0 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 297+ CBA2 67                                   ld      h,a
 298+ CBA3 7A                                   ld      a,d
 299+ CBA4 E6 7F                                and     SignMask8Bit
 300+ CBA6 57                                   ld      d,a
 301+ CBA7 19                                   add     hl,de
 302+ CBA8 3E 80                                ld      a,SignOnly8Bit
 303+ CBAA B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 304+ CBAB 67                                   ld      h,a
 305+ CBAC C9                                   ret
 306+ CBAD 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 307+ CBAE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 308+ CBB0 67                                   ld      h,a
 309+ CBB1 7A                                   ld      a,d
 310+ CBB2 E6 7F                                and     SignMask8Bit
 311+ CBB4 57                                   ld      d,a
 312+ CBB5 B7                                   or      a
 313+ CBB6 ED 52                                sbc     hl,de
 314+ CBB8 38 04                                jr      c,ADDHLDEOppInvert
 315+ CBBA 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 316+ CBBB B4                                   or      h
 317+ CBBC 67                                   ld      h,a                         ; set the previou sign value
 318+ CBBD C9                                   ret
 319+ CBBE              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 319+ CBBE AF          >                    xor a
 319+ CBBF 95          >                    sub l
 319+ CBC0 6F          >                    ld l,a
 319+ CBC1 9F          >                    sbc a,a
 319+ CBC2 94          >                    sub h
 319+ CBC3 67          >                    ld h,a
 320+ CBC4 78                                   ld      a,b
 321+ CBC5 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 322+ CBC7 B4                                   or      h
 323+ CBC8 67                                   ld      h,a                         ; recover sign
 324+ CBC9 C9                                   ret
 325+ CBCA
 326+ CBCA              ; we could cheat, flip the sign of DE and just add but its not very optimised
 327+ CBCA 7C           SUBHLDESignedv3:        ld      a,h
 328+ CBCB E6 80                                and     SignOnly8Bit
 329+ CBCD 47                                   ld      b,a                         ;save sign bit in b
 330+ CBCE AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 331+ CBCF                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 331+ CBCF FA FD CB    >                        jp		m, SUBHLDEOppSGN
 332+ CBD2 78           SUBHLDESameSigns:       ld      a,b
 333+ CBD3 B2                                   or      d
 334+ CBD4                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 334+ CBD4 FA DE CB    >                        jp		m, SUBHLDESameNeg
 335+ CBD7 B7                                   or      a
 336+ CBD8 ED 52                                sbc     hl,de
 337+ CBDA                                      JumpIfNegative SUBHLDESameOvrFlw
 337+ CBDA FA F1 CB    >                        jp		m, SUBHLDESameOvrFlw
 338+ CBDD C9                                   ret
 339+ CBDE 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 340+ CBDF E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 341+ CBE1 67                                   ld      h,a
 342+ CBE2 7A                                   ld      a,d
 343+ CBE3 E6 7F                                and     SignMask8Bit
 344+ CBE5 57                                   ld      d,a
 345+ CBE6 B7                                   or      a
 346+ CBE7 ED 52                                sbc     hl,de
 347+ CBE9                                      JumpIfNegative SUBHLDESameOvrFlw
 347+ CBE9 FA F1 CB    >                        jp		m, SUBHLDESameOvrFlw
 348+ CBEC 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 349+ CBED F6 80                                or      SignOnly8Bit
 350+ CBEF 67                                   ld      h,a
 351+ CBF0 C9                                   ret
 352+ CBF1              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 352+ CBF1 AF          >                    xor a
 352+ CBF2 95          >                    sub l
 352+ CBF3 6F          >                    ld l,a
 352+ CBF4 9F          >                    sbc a,a
 352+ CBF5 94          >                    sub h
 352+ CBF6 67          >                    ld h,a
 353+ CBF7 78                                   ld      a,b
 354+ CBF8 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 355+ CBFA B4                                   or      h
 356+ CBFB 67                                   ld      h,a                         ; recover sign
 357+ CBFC C9                                   ret
 358+ CBFD B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 359+ CBFE 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 360+ CBFF E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 361+ CC01 67                                   ld      h,a
 362+ CC02 7A                                   ld      a,d
 363+ CC03 E6 7F                                and     SignMask8Bit
 364+ CC05 57                                   ld      d,a
 365+ CC06 19                                   add     hl,de
 366+ CC07 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 367+ CC08 B4                                   or      h
 368+ CC09 67                                   ld      h,a                         ; set the previou sign value
 369+ CC0A C9                                   ret
 370+ CC0B
 371+ CC0B
 372+ CC0B              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 372+ CC0B CB 7C       >                        bit 	7,h
 372+ CC0D C2 1E CC    >                        jp      nz,SBCHLDEhlNeg
 373+ CC10              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 373+ CC10 CB 7C       >                        bit 	7,h
 373+ CC12 C2 1E CC    >                        jp      nz,SBCHLDEhlNeg
 374+ CC15 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 375+ CC17 C9                                   ret
 376+ CC18 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 377+ CC1A 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 378+ CC1B CB FA                                set     7,d
 379+ CC1D C9                                   ret
 380+ CC1E CB BC        SBCHLDEhlNeg:           res     7,h
 381+ CC20                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 381+ CC20 CB 7A       >                        bit 	7,d
 381+ CC22 C2 2A CC    >                        jp      nz,SBCHLDEhlNegdeNeg
 382+ CC25 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 383+ CC27 CB FC                                set     7,h
 384+ CC29 C9                                   ret
 385+ CC2A CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 386+ CC2C 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 387+ CC2D CB FA                                set     7,d
 388+ CC2F CB FC                                set     7,h
 389+ CC31 C9                                   ret
 390+ CC32
 391+ CC32              ; Roate around axis
 392+ CC32              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 393+ CC32              ; so the axis x1 points to roofv  x , y or z
 394+ CC32              ;             x2           nosev or sidev  x, y or z
 395+ CC32              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 396+ CC32              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 397+ CC32              ; var RAT2 gives direction
 398+ CC32              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 399+ CC32              ;-Set up S R -----------------------------------------
 400+ CC32              ; optimised we don't deal with sign here just the value of roof axis / 512
 401+ CC32 2A B1 91     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 402+ CC35 5E                                   ld      e,(hl)
 403+ CC36 23                                   inc     hl
 404+ CC37 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 405+ CC38 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 406+ CC39 7C                                   ld      a,h
 407+ CC3A E6 80                                and     SignOnly8Bit
 408+ CC3C FD 67                                ld      iyh,a           ; iyh = sign Axis1
 409+ CC3E 7C                                   ld      a,h
 410+ CC3F E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 411+ CC41 CB 3F                                srl     a               ; a = Axis1/2
 412+ CC43 5F                                   ld      e,a             ;
 413+ CC44 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 414+ CC46 57                                   ld      d,a             ; de = signed Axis1 / 512
 415+ CC47 B7                                   or      a               ; clear carry
 416+ CC48 CD CA CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 417+ CC4B              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 418+ CC4B E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 419+ CC4C 7D                                   ld      a,l
 420+ CC4D 32 26 92                             ld      (varR),a
 421+ CC50 7C                                   ld      a,h
 422+ CC51 32 27 92                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 423+ CC54              ;-calculate roofv latter half of calc
 424+ CC54 2A B3 91                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 425+ CC57 5E                                   ld      e,(hl)
 426+ CC58 23                                   inc     hl
 427+ CC59 56                                   ld      d,(hl)          ; de = value of roof axis
 428+ CC5A 7A                                   ld      a,d
 429+ CC5B E6 80                                and     SignOnly8Bit
 430+ CC5D FD 67                                ld      iyh,a           ; save sign
 431+ CC5F 7A                                   ld      a,d
 432+ CC60 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 433+ CC62 57                                   ld      d,a             ; de = abs (nosev)
 434+ CC63                                      ShiftDERight1
 434+ CC63 CB 3A       >			   srl d
 434+ CC65 CB 1B       >			   rr  e
 435+ CC67                                      ShiftDERight1
 435+ CC67 CB 3A       >			   srl d
 435+ CC69 CB 1B       >			   rr  e
 436+ CC6B                                      ShiftDERight1
 436+ CC6B CB 3A       >			   srl d
 436+ CC6D CB 1B       >			   rr  e
 437+ CC6F                                      ShiftDERight1           ; de = nosev /16 unsigned
 437+ CC6F CB 3A       >			   srl d
 437+ CC71 CB 1B       >			   rr  e
 438+ CC73 3A 31 C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 439+ CC76 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 440+ CC78 E6 80                                and     SignOnly8Bit
 441+ CC7A B2                                   or      d
 442+ CC7B 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 443+ CC7C              ;;; ld      a,e
 444+ CC7C              ;;;     or      iyh
 445+ CC7C              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 446+ CC7C              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 447+ CC7C E1                                   pop     hl              ; get back RS POP ID 1
 448+ CC7D                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 449+ CC7D              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 450+ CC7D CD 90 CB                             call    ADDHLDESignedv3 ; do add using hl and de
 451+ CC80 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 452+ CC81              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 453+ CC81              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 454+ CC81 2A B3 91                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 455+ CC84 5E                               ld      e,(hl)
 456+ CC85 23                               inc     hl
 457+ CC86 56                               ld      d,(hl)
 458+ CC87 EB                               ex      de,hl
 459+ CC88 7C                               ld      a,h
 460+ CC89 E6 80                            and     $80
 461+ CC8B FD 67                            ld      iyh,a
 462+ CC8D 7C                               ld      a,h
 463+ CC8E E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 464+ CC90 CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 465+ CC92 5F                               ld      e,a
 466+ CC93 FD 7C                            ld      a,iyh
 467+ CC95 57                               ld      d,a
 468+ CC96 B7                               or      a               ; clear carry
 469+ CC97 CD CA CB                         call    SUBHLDESignedv3
 470+ CC9A              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 471+ CC9A E5                               push    hl              ; save hl on stack  PUSH ID 3
 472+ CC9B 7D                               ld      a,l
 473+ CC9C 32 C8 91                         ld      (varP),a        ; p = low of resuilt
 474+ CC9F 7C                               ld      a,h
 475+ CCA0 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 476+ CCA2 32 43 92                         ld      (varT),a        ; t = high of result
 477+ CCA5              ;-- Set up TQ
 478+ CCA5 2A B1 91                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 479+ CCA8              ;   ld      hl,(varAxis2)   ; work on nosev again
 480+ CCA8 5E                               ld      e,(hl)
 481+ CCA9 23                               inc     hl
 482+ CCAA 56                               ld      d,(hl)
 483+ CCAB 7A                               ld      a,d
 484+ CCAC E6 80                            and     $80
 485+ CCAE FD 67                            ld      iyh,a           ; save sign
 486+ CCB0 7A                               ld      a,d
 487+ CCB1 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 488+ CCB3 57                               ld      d,a             ; de = abs (nosev)
 489+ CCB4                                  ShiftDERight1
 489+ CCB4 CB 3A       >			   srl d
 489+ CCB6 CB 1B       >			   rr  e
 490+ CCB8                                  ShiftDERight1
 490+ CCB8 CB 3A       >			   srl d
 490+ CCBA CB 1B       >			   rr  e
 491+ CCBC                                  ShiftDERight1
 491+ CCBC CB 3A       >			   srl d
 491+ CCBE CB 1B       >			   rr  e
 492+ CCC0                                  ShiftDERight1           ; de = nosev /16 unsigned
 492+ CCC0 CB 3A       >			   srl d
 492+ CCC2 CB 1B       >			   rr  e
 493+ CCC4 3A 31 C0                         ld      a,(univRAT2)
 494+ CCC7 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 495+ CCC9 E6 80                            and     $80
 496+ CCCB B2                               or      d
 497+ CCCC 57                               ld      d,a
 498+ CCCD              ;;; ld      a,e
 499+ CCCD              ;;;     or      iyh
 500+ CCCD              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 501+ CCCD E1                               pop     hl              ; get back RS   POP ID 3
 502+ CCCE              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 503+ CCCE CD CA CB                         call    SUBHLDESignedv3 ; do add using hl and de
 504+ CCD1              ;-- Update nosev ---------------------------------------
 505+ CCD1 EB                               ex      de,hl           ; save hl to de
 506+ CCD2 2A B3 91                         ld      hl,(varAxis2)
 507+ CCD5 73                               ld      (hl),e
 508+ CCD6 23                               inc     hl
 509+ CCD7 72                               ld      (hl),d          ; copy result into nosev
 510+ CCD8              ;-- Update roofv ---------------------------------------
 511+ CCD8 D1                               pop     de              ; get calc saved on stack POP ID 2
 512+ CCD9 2A B1 91                         ld      hl,(varAxis1)
 513+ CCDC 73                               ld      (hl),e
 514+ CCDD 23                               inc     hl
 515+ CCDE 72                               ld      (hl),d          ; copy result into nosev
 516+ CCDF C9                               ret
 517+ CCE0
 518+ CCE0                                  include "Universe/InitialiseOrientation.asm"
# file opened: ./Universe/InitialiseOrientation.asm
   1++CCE0              InitialiseOrientation:
   2++CCE0              ZI1:
   3++CCE0              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++CCE0              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCE0              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++CCE0 21 00 00         ld      hl, 0
   7++CCE3 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCE6 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCE9 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCEC 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCEF 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCF2 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CCF5 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CCF8                  ;ld      hl,1
  15++CCF8 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++CCFB 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++CCFE 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CD01 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++CD04 C9               ret
  20++CD05
  21++CD05              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++CD05              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++CD05              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++CD05
  25++CD05              LaunchedOrientation:
  26++CD05 CD E0 CC         call    InitialiseOrientation
  27++CD08                  FlipMemSign UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++CD08 3A 22 C0    >                    ld  a,(UBnkrotmatNosevX+1)
  27++CD0B EE 80       >                    xor SignOnly8Bit
  27++CD0D 32 22 C0    >                    ld  (UBnkrotmatNosevX+1),a
  28++CD10                  FlipMemSign UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++CD10 3A 24 C0    >                    ld  a,(UBnkrotmatNosevY+1)
  28++CD13 EE 80       >                    xor SignOnly8Bit
  28++CD15 32 24 C0    >                    ld  (UBnkrotmatNosevY+1),a
  29++CD18                  FlipMemSign UBnkrotmatNosevZ+1
  29++CD18 3A 26 C0    >                    ld  a,(UBnkrotmatNosevZ+1)
  29++CD1B EE 80       >                    xor SignOnly8Bit
  29++CD1D 32 26 C0    >                    ld  (UBnkrotmatNosevZ+1),a
  30++CD20 C9               ret
  31++CD21
# file closed: ./Universe/InitialiseOrientation.asm
 519+ CD21              ;----------------------------------------------------------------------------------------------------------------------------------
 520+ CD21              OrientateVertex:
 521+ CD21
 522+ CD21              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 523+ CD21              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 524+ CD21              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 525+ CD21              ;
 526+ CD21
 527+ CD21              ;----------------------------------------------------------------------------------------------------------------------------------
 528+ CD21              TransposeVertex:
 529+ CD21              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 530+ CD21              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 531+ CD21              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 532+ CD21              VectorToVertex:
 533+ CD21              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 534+ CD21              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 535+ CD21              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 536+ CD21
 537+ CD21              Project:
 538+ CD21 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 539+ CD24 22 C8 91                             ld      (varP),hl
 540+ CD27 3A 0E C0                             ld      a,(UBnKxsgn)
 541+ CD2A CD 4A CB                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 542+ CD2D D8                                   ret     c                               ; carry means don't print
 543+ CD2E 2A 3A 92                             ld      hl,(varK)                       ; hl = k (0 1)
 544+ CD31                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 545+ CD31 3E 80                                ld      a,ViewCenterX
 546+ CD33 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 547+ CD35 22 4D 92                             ld      (varK3),hl                      ; K3 = X position on screen
 548+ CD38 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 549+ CD3B 22 C8 91                             ld      (varP),hl
 550+ CD3E 3A 11 C0                             ld      a,(UBnKysgn)
 551+ CD41 CD 4A CB                             call    PLS6
 552+ CD44 D8                                   ret     c
 553+ CD45 2A 3A 92                             ld      hl,(varK)                       ; hl = k (0 1)
 554+ CD48 3E 40                                ld      a,ViewCenterY
 555+ CD4A ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 556+ CD4C 22 53 92                             ld      (varK4),hl                      ; K3 = X position on screen
 557+ CD4F C9                                   ret
 558+ CD50              ;--------------------------------------------------------------------------------------------------------
 559+ CD50                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CD50              ;
   2++CD50              ; EraseOldLines:
   3++CD50              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CD50              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CD50              ;	 	loop + 4
   6++CD50              ; Return
   7++CD50
   8++CD50              EraseOldLines:
   9++CD50              EE51:										; if bit3 set draw lines in XX19 heap
  10++CD50              	ReturnOnMemBitClear UBnkexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CD50 3A 2B C0    >                        ld     a,(UBnkexplDsp)
  10++CD53 CB 5F       >                        bit 	3,a
  10++CD55 C8          >                        ret		z
  11++CD56 CB DF        	set		3,a
  12++CD58 32 2B C0     	ld		(UBnkexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CD5B C3 CC E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CD5E              ; We use the ret from the clearLines so not needed here
  15++CD5E
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 560+ CD5E                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CD5E              ;TrimToScreenGrad:
   2++CD5E              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CD5E              ;ret
   4++CD5E              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CD5E              ;TODO        bit     7,a
   6++CD5E              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CD5E              ;TODO        ld      a,h
   8++CD5E              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CD5E              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CD5E              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CD5E
  12++CD5E              ;18                      CLC
  13++CD5E              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CD5E              ;85 36                   STA &36			 \ XX15+2
  15++CD5E              ;98                      TYA 			 \ step Y1 hi
  16++CD5E              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CD5E              ;85 37                   STA &37			 \ XX15+3
  18++CD5E              ;A9 00                   LDA #0			 \ xleft min
  19++CD5E              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CD5E              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CD5E              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CD5E              ;	.LL119	\ x1 hi +ve from LL118
  23++CD5E              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CD5E              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CD5E              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CD5E              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CD5E              ;8A                      TXA 			 \ step Y1 lo
  28++CD5E              ;18                      CLC
  29++CD5E              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CD5E              ;85 36                   STA &36			 \ XX15+2
  31++CD5E              ;98                      TYA 			 \ step Y1 hi
  32++CD5E              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CD5E              ;85 37                   STA &37			 \ XX15+3
  34++CD5E              ;A2 FF                   LDX #&FF		 \ xright max
  35++CD5E              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CD5E              ;E8                      INX 			 \ X = 0
  37++CD5E              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CD5E              ;	.LL134	\ Ytrim
  39++CD5E              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CD5E              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CD5E              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CD5E              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CD5E              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CD5E              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CD5E              ;8A                      TXA 			 \ step X1 lo
  46++CD5E              ;18                      CLC
  47++CD5E              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CD5E              ;85 34                   STA &34			 \ XX15+0
  49++CD5E              ;98                      TYA 			 \ step X1 hi
  50++CD5E              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CD5E              ;85 35                   STA &35			 \ XX15+1
  52++CD5E              ;A9 00                   LDA #0			 \ Y bottom min
  53++CD5E              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CD5E              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CD5E              ;	.LL135	\ y1 hi +ve from LL134
  56++CD5E              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CD5E              ;38                      SEC
  58++CD5E              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CD5E              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CD5E              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CD5E              ;E9 00                   SBC #0			 \ any hi
  62++CD5E              ;85 83                   STA &83			 \ S
  63++CD5E              ;90 16                   BCC LL136		 \ failed, rts
  64++CD5E              ;	.LL139
  65++CD5E              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CD5E              ;8A                      TXA 			 \ step X1 lo
  67++CD5E              ;18                      CLC
  68++CD5E              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CD5E              ;85 34                   STA &34			 \ XX15+0
  70++CD5E              ;98                      TYA 			 \ step X1 hi
  71++CD5E              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CD5E              ;85 35                   STA &35			 \ XX15+1
  73++CD5E              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CD5E              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CD5E              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CD5E              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CD5E              ;	.LL136	\ rts
  78++CD5E              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CD5E              ;
  80++CD5E
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 561+ CD5E                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CD5E              ;--------------------------------------------------------------------------------------------------------------------
   2++CD5E
   3++CD5E 00           clipDx                  DB      0           ; also XX12+2
   4++CD5F 00           clipDxHigh              DB      0           ; also XX12+3
   5++CD60 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CD61 00           clipDy                  DB      0           ; also XX12+4
   7++CD62 00           clipDyHigh              DB      0           ; also XX12+5
   8++CD63 00           clipGradient            DB      0
   9++CD64 00           clipDxySign             DB      0
  10++CD65              varX12p3                equ     clipDxySign
  11++CD65 00           clipXGTY                DB      0
  12++CD66 00           clipFlags               DB      0
  13++CD67 00           SWAP                    DB      0
  14++CD68 00 00        varYX                   DW      0
  15++CD6A              ;varRegX                 DB      0
  16++CD6A              ;varXX12p2               DB      0
  17++CD6A 00           clipXX13                 DB      0
  18++CD6B
  19++CD6B
  20++CD6B              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CD6B              ;ClipXX15XX12Line:
  22++CD6B ED 4B 7A C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CD6F DD 2A 7E C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CD73 2A 78 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CD76 ED 5B 7C C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CD7A AF                                   xor     a
  27++CD7B 32 67 CD                             ld      (SWAP),a                    ; SWAP = 0
  28++CD7E 7A                                   ld      a,d                         ; A = X2Hi
  29++CD7F FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CD82                                      ;       push    af
  31++CD82                                      ;       ld      a,iyh
  32++CD82                                      ;       ld      (regX),a
  33++CD82                                      ;       pop     af
  34++CD82 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CD84 20 0A                                jr      nz, .LL107
  36++CD86 DD 7D                                ld      a,ixl
  37++CD88 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CD8B 20 03                                jr      nz,.LL107
  39++CD8D FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CD90                                      ;        push    af
  41++CD90                                      ;        ld      a,iyh
  42++CD90                                      ;        ld      (regX),a
  43++CD90                                      ;        pop     af
  44++CD90              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CD90              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CD90 FD 7C        .LL107                  ld      a,iyh
  47++CD92 32 6A CD                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CD95 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CD96 B0                                   or      b                           ;
  50++CD97 20 27                                jr      nz,.LL83                    ;
  51++CD99 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CD9A ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CD9D 20 21                                jr      nz,.LL83
  54++CD9F              ; If we get here, (x1, y1) is on-screen
  55++CD9F FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CDA1 FE 00                                cp      0
  57++CDA3 20 15                                jr      nz, .LL108
  58++CDA5              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CDA5 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CDA6 32 79 C0                             ld      (UBnkNewY1),a
  61++CDA9 DD 7D                                ld      a,ixl
  62++CDAB 32 7B C0                             ld      (UBnkNewY2),a
  63++CDAE 7D                                   ld      a,l
  64++CDAF 32 78 C0                             ld      (UBnkNewX1),a
  65++CDB2 7B                                   ld      a,e
  66++CDB3 32 7A C0                             ld      (UBnkNewX2),a
  67++CDB6                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CDB6 B7          >                    or a
  68++CDB7 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CDB8              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CDB8 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CDB9 C9                                   ret
  72++CDBA FD 7C        .LL108:                 ld      a,iyh
  73++CDBC B7                                   or      a
  74++CDBD 1F                                   rra
  75++CDBE FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CDC0                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CDC0                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CDC0                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CDC0                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CDC0 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CDC2 ED 27 80                             test    $80                         ;
  82++CDC5 28 28                                jr      z, .LL115                   ;
  83++CDC7 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CDC8 A2                                   and     d
  85++CDC9                                      JumpIfNegative  .PointsOutofBounds
  85++CDC9 FA B8 CD    >                        jp		m, .PointsOutofBounds
  86++CDCC 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CDCD DD A4                                and     ixh
  88++CDCF                                      JumpIfNegative  .PointsOutofBounds
  88++CDCF FA B8 CD    >                        jp		m, .PointsOutofBounds
  89++CDD2 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CDD3 3D                                   dec     a
  91++CDD4 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CDD6                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CDD6                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CDD6                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CDD6                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CDD6 7A                                   ld      a,d                         ; a = x2 hi
  97++CDD7 3D                                   dec     a
  98++CDD8 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CDDA                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CDDA F2 B8 CD    >                        jp		p, .PointsOutofBounds
 100++CDDD              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CDDD DD 7C                                ld      a,ixh
 102++CDDF 3D                                   dec     a
 103++CDE0 FD 6F                                ld      iyl,a
 104++CDE2 78                                   ld      a,b
 105++CDE3 3D                                   dec     a
 106++CDE4 FD B5                                or      iyl
 107++CDE6                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CDE6 F2 B8 CD    >                        jp		p, .PointsOutofBounds
 108++CDE9 79                                   ld      a,c
 109++CDEA DD A5                                and     ixl
 110++CDEC                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CDEC FA B8 CD    >                        jp		m, .PointsOutofBounds
 111++CDEF              ; Clip line: calulate the line's gradient
 112++CDEF              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CDEF              .LL115:                 ClearCarryFlag
 113++CDEF B7          >                    or a
 114++CDF0 E5 D5        .CalcDX:                push    hl,,de
 115++CDF2 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CDF3 ED 52                                sbc     hl,de
 117++CDF5                                     ; pop     de                          ; we need de back
 118++CDF5 22 5E CD                             ld      (clipDx),hl
 119++CDF8 7C                                   ld      a,h
 120++CDF9 32 60 CD                             ld      (clipDxHighNonABS),a
 121++CDFC                                     ; ld      a,e                         ;a = x2 lo
 122++CDFC                                     ; sbc     a,l                         ;a= a - x1
 123++CDFC                                     ; ld      (clipDx),a
 124++CDFC                                     ; ld      a,d
 125++CDFC                                     ; sbc     a,h
 126++CDFC                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CDFC                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CDFC              .CalcDy:                ClearCarryFlag
 128++CDFC B7          >                    or a
 129++CDFD DD E5 E1                             ld      hl,ix
 130++CE00 ED 42                                sbc     hl,bc
 131++CE02 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CE04 22 61 CD                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CE07 7C           .CalcQuadrant:          ld      a,h
 134++CE08                                     ; ld      a,ixl
 135++CE08                                     ; sbc     c
 136++CE08                                     ; ld      (clipDy),a
 137++CE08                                     ; ld      a,ixh
 138++CE08                                     ; sbc     a,b
 139++CE08                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CE08                                     ; pop     hl
 141++CE08
 142++CE08              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CE08                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CE08 21 5F CD                             ld      hl,clipDxHigh
 145++CE0B AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CE0C 32 27 92                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CE0F 32 64 CD                             ld      (clipDxySign),a
 148++CE12 3A 62 CD     .AbsDy:                 ld      a,(clipDyHigh)
 149++CE15 ED 27 80                             test    $80
 150++CE18 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CE1A 2A 61 CD                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CE1D                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CE1D AF          >					xor 	a
 152++CE1E 93          >                    sub 	e
 152++CE1F 5F          >                    ld 		e,a
 152++CE20 9F          >                    sbc 	a,a
 152++CE21 92          >                    sub 	d
 152++CE22 57          >                    ld 		d,a
 153++CE23 22 61 CD                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CE26 2A 5E CD     .LL110:                 ld      hl,(clipDx)
 155++CE29 3A 5F CD                             ld      a,(clipDxHigh)
 156++CE2C ED 27 80                             test    $80                         ; is it a negative X
 157++CE2F 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CE31                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CE31                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CE31 AF          >					xor 	a
 159++CE32 95          >					sub 	l
 159++CE33 6F          >					ld 		l,a
 159++CE34 9F          >					sbc 	a,a
 159++CE35 94          >					sub 	h
 159++CE36 67          >					ld 		h,a
 160++CE37                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CE37              .LL111:               ;  push    de
 162++CE37                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CE37                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CE37 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CE38 B2                                   or      d
 166++CE39 28 0A                                jr      z,.CalculateDelta
 166++CE3B
 167++CE3B                                      ShiftDERight1
 167++CE3B CB 3A       >			   srl d
 167++CE3D CB 1B       >			   rr  e
 168++CE3F                                      ShiftHLRight1
 168++CE3F CB 3C       >			   srl h
 168++CE41 CB 1D       >			   rr  l
 169++CE43 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CE45              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CE45                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CE45              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CE45 AF           .LL113:                 xor     a
 174++CE46 32 43 92                             ld      (varT),a                    ; t = 0
 175++CE49 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CE4A                                      JumpIfALTNusng  e, .LL114           ;
 176++CE4A BB          >                        cp      e
 176++CE4B DA 5B CE    >                        jp		c, .LL114
 177++CE4E              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CE4E 32 25 92     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CE51 57                                   ld      d,a                         ; d = also Q for calc
 180++CE52 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CE53 CD 9C A9                             call    LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CE56 32 26 92                             ld      (varR),a                    ;
 183++CE59 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CE5B              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CE5B 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CE5C 57                                   ld      d,a
 187++CE5D 32 25 92                             ld      (varQ),a
 188++CE60 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CE61 CD 9C A9                             call    LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CE64 32 26 92                             ld      (varR),a                    ;
 191++CE67 21 43 92                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CE6A 35                                   dec     (hl)
 193++CE6B D1           .LL116:                 pop     de                          ; get back X2
 194++CE6C E1                                   pop     hl                          ; get back X1 into hl,
 195++CE6D 3A 26 92                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CE70 32 63 CD                             ld      (clipGradient),a
 197++CE73 FD 6F                                ld      iyl,a
 198++CE75                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CE75                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CE75                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CE75                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CE75 3A 27 92                             ld      a,(varS)
 203++CE78 32 64 CD                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CE7B                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CE7B FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CE7D FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CE7F 28 05                                jr      z,.LL138                    ;
 208++CE81 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CE84 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CE86              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CE86 CD AD CE     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CE89 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CE8B ED 27 80                             test    $80
 214++CE8E 28 1A                                jr      z,.LL124
 215++CE90              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CE90 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CE91 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CE92 C2 B8 CD                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CE95 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CE96 FA B8 CD                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CE99              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CE99              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CE99 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CE9A DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CE9C C5                                   push    bc
 226++CE9D DD E1                                pop     ix
 227++CE9F C1                                   pop     bc
 228++CEA0 CD AD CE                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CEA3 3A 67 CD                             ld      a,(SWAP)
 230++CEA6 3D                                   dec     a
 231++CEA7 32 67 CD                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CEAA C3 A5 CD     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CEAD
 234++CEAD              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CEAD              ; iyh still holds XX13 iyl still holds gradient
 236++CEAD 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CEAE ED 27 80                             test    $80
 238++CEB1 28 17                                jr      z,.LL119
 239++CEB3 32 27 92     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CEB6 E5 D5 C5                             push    hl,,de,,bc
 241++CEB9 CD 2F CF                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CEBC                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CEBC                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CEBC C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CEBF 2A 68 CD                             ld      hl,(varYX)
 246++CEC2              ;                        ex      hl,de
 247++CEC2                                  ;    ld      hl,bc
 248++CEC2 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CEC3 44 4D                                ld      bc,hl
 250++CEC5 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CEC8               ;                       pop     de
 252++CEC8 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CECA FE 00        .LL119:                 cp      0
 254++CECC 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CECE 3D                                   dec     a
 256++CECF 32 27 92                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CED2 E5 D5 C5                             push    hl,,de,,bc
 258++CED5 CD 2F CF                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CED8                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CED8                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CED8 C1 D1 E1                             pop     hl,,de,,bc
 262++CEDB                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CEDB 2A 68 CD                             ld      hl,(varYX)
 264++CEDE                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CEDE 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CEDF 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CEE1                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CEE1                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CEE1                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CEE1 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CEE4                                    ;  pop     de
 272++CEE4              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CEE4 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CEE5 ED 27 80                             test    $80                         ;
 275++CEE8 28 1A                                jr      z,.LL135                    ;
 276++CEEA 32 27 92                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CEED 79                                   ld      a,c                         ; Set R = y1_lo
 278++CEEE 32 26 92                             ld      (varR),a                    ;
 279++CEF1 E5 D5 C5                             push    hl,,de,,bc
 280++CEF4 CD 56 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CEF7                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CEF7                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CEF7 C1 D1 E1                             pop     hl,,de,,bc
 284++CEFA D5                                   push    de
 285++CEFB EB                                   ex      hl,de                       ; de = x1
 286++CEFC 2A 68 CD                             ld      hl,(varYX)                  ; hl = varYX
 287++CEFF 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CF00 D1                                   pop     de                          ; de = x2 again
 289++CF01 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CF04 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CF05 E6 80                                and     $80
 292++CF07 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CF08 C8                                   ret     z
 294++CF09 E5                                   push    hl
 295++CF0A 60 69                                ld      hl,bc
 296++CF0C 01 80 00                             ld      bc,128
 297++CF0F B7                                   or      a
 298++CF10 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CF12 22 26 92                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CF15 7C                                   ld      a,h
 301++CF16 E1                                   pop     hl
 302++CF17 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CF1A C0                                   ret     nz
 304++CF1B              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CF1B E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CF1E CD 56 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CF21                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CF21                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CF21 C1 D1 E1                             pop     hl,,de,,bc
 310++CF24 D5                                   push    de
 311++CF25 EB                                   ex      hl,de
 312++CF26 2A 68 CD                             ld      hl,(varYX)
 313++CF29 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CF2A 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CF2D D1                                   pop     de
 316++CF2E C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CF2F
 318++CF2F
 319++CF2F              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CF2F              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CF2F              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CF2F              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CF2F 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CF30 32 26 92                             ld      (varR),a
 325++CF33 CD 9E CF                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CF36 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CF37 C5                                   push    bc
 328++CF38 47                                   ld      b,a
 329++CF39 3A 43 92                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CF3C FE 00                                cp      0
 331++CF3E 78                                   ld      a,b
 332++CF3F C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CF40 20 23                                jr      nz, LL121
 334++CF42              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CF42 3A 63 CD     LL122:                  ld      a,(clipGradient)
 336++CF45 32 25 92                             ld      (varQ),a; optimise
 337++CF48 CD 9D 9F                             call    HLequSRmulQdiv256
 338++CF4B 22 68 CD                             ld      (varYX),hl
 339++CF4E F1                                   pop     af
 340++CF4F ED 27 80                             test    $80
 341++CF52 CA 91 CF                             jp      z,LL133
 342++CF55 C9                                   ret
 343++CF56              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CF56              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CF56              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CF56              ;
 347++CF56              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CF56              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CF56              ;                          LL128                Contains an RTS
 350++CF56 CD 9E CF     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CF59 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CF5A C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CF5B 47                                   ld      b,a
 354++CF5C 3A 43 92                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CF5F FE 00                                cp      0
 356++CF61 78                                   ld      a,b
 357++CF62 C1                                   pop     bc
 358++CF63 20 DD                                jr      nz, LL122
 359++CF65              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CF65 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CF68 2A 26 92                             ld      hl,(varRS)                  ; hl = RS
 362++CF6B 3A 25 92                             ld      a,(varQ)
 363++CF6E 47                                   ld      b,a                         ; b = q
 364++CF6F              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CF6F CB 25       >			   sla l
 364++CF71 CB 14       >			   rl  h
 365++CF73 7C                                   ld      a,h
 366++CF74 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CF76                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CF76 B8          >                        cp      b
 367++CF77 DA 82 CF    >                        jp		c, .LL132
 368++CF7A 3F           .LL131:                 ccf                                 ; compliment carry
 369++CF7B 98                                   sbc     a,b                         ; q
 370++CF7C 67                                   ld      h,a                         ; h (s)
 371++CF7D 7D                                   ld      a,l                         ; r
 372++CF7E DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CF80 37                                   scf                                 ; set carry for next rolls
 374++CF81 3F                                   ccf
 375++CF82              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CF82 CB 13       >               rl  e
 375++CF84 CB 12       >               rl  d
 376++CF86 38 E7                                jr      c,.LL130                    ;
 377++CF88 ED 53 68 CD                          ld      (varYX),de
 378++CF8C F1                                   pop     af              ; get back sign
 379++CF8D ED 27 80                             test    $80
 380++CF90 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CF91 2A 68 CD     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CF94                                      NegHL
 382++CF94 AF          >                    xor a
 382++CF95 95          >                    sub l
 382++CF96 6F          >                    ld l,a
 382++CF97 9F          >                    sbc a,a
 382++CF98 94          >                    sub h
 382++CF99 67          >                    ld h,a
 383++CF9A 22 68 CD                             ld      (varYX),hl
 384++CF9D C9           LL128:                  ret
 385++CF9E              ; Do the following, in this order:  Q = XX12+2
 386++CF9E              ;                                   A = S EOR XX12+3
 387++CF9E              ;                                   (S R) = |S R|
 388++CF9E              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CF9E 3A 63 CD     LL129:                  ld      a,(clipGradient)
 390++CFA1 32 25 92                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CFA4 3A 27 92                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CFA7 E5 F5                                push    hl,,af
 393++CFA9 ED 27 80                             test    $80
 394++CFAC 28 0C                                jr      z,.LL127
 395++CFAE 2A 26 92                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CFB1                                      NegHL
 396++CFB1 AF          >                    xor a
 396++CFB2 95          >                    sub l
 396++CFB3 6F          >                    ld l,a
 396++CFB4 9F          >                    sbc a,a
 396++CFB5 94          >                    sub h
 396++CFB6 67          >                    ld h,a
 397++CFB7 22 26 92                             ld      (varRS),hl
 398++CFBA 21 64 CD     .LL127:                 ld      hl,clipDxySign
 399++CFBD F1                                   pop     af
 400++CFBE AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CFBF E1                                   pop     hl
 402++CFC0 C9                                   ret
 403++CFC1
# file closed: ././ModelRender/CLIP-LL145.asm
 562+ CFC1              ;--------------------------------------------------------------------------------------------------------
 563+ CFC1                                      include "./Variables/CopyRotmatToTransMat.asm"
# file opened: ././Variables/CopyRotmatToTransMat.asm
   1++CFC1              ; Set TransMatTo
   2++CFC1              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CFC1              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CFC1              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CFC1              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CFC1              CopyRotmatToTransMat:                       ; Tested
   7++CFC1              LL15_CopyRotMat:                            ; unrolled loop
   8++CFC1 21 15 C0             ld      hl,UBnkrotmatSidevX
   9++CFC4 11 33 C0             ld      de,UBnkTransmatSidevX
  10++CFC7                      SixLDIInstrunctions
  10++CFC7 ED A0       >                        ldi
  10++CFC9 ED A0       >                        ldi
  10++CFCB ED A0       >                        ldi
  10++CFCD ED A0       >                        ldi
  10++CFCF ED A0       >                        ldi
  10++CFD1 ED A0       >                        ldi
  11++CFD3 21 1B C0             ld      hl,UBnkrotmatRoofvX
  12++CFD6 11 39 C0             ld      de, UBnkTransmatRoofvX
  13++CFD9                      SixLDIInstrunctions
  13++CFD9 ED A0       >                        ldi
  13++CFDB ED A0       >                        ldi
  13++CFDD ED A0       >                        ldi
  13++CFDF ED A0       >                        ldi
  13++CFE1 ED A0       >                        ldi
  13++CFE3 ED A0       >                        ldi
  14++CFE5 21 21 C0             ld      hl,UBnkrotmatNosevX
  15++CFE8 11 3F C0             ld      de, UBnkTransmatNosevX
  16++CFEB                      SixLDIInstrunctions
  16++CFEB ED A0       >                        ldi
  16++CFED ED A0       >                        ldi
  16++CFEF ED A0       >                        ldi
  16++CFF1 ED A0       >                        ldi
  16++CFF3 ED A0       >                        ldi
  16++CFF5 ED A0       >                        ldi
  17++CFF7 C9                   ret
  18++CFF8
# file closed: ././Variables/CopyRotmatToTransMat.asm
 564+ CFF8                                      include "./Variables/TransposeXX12ByShipToXX15.asm"
# file opened: ././Variables/TransposeXX12ByShipToXX15.asm
   1++CFF8              TransposeXX12ByShipToXX15:
   2++CFF8 2A 7E C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CFFB 7C           		ld		a,h			                        ; get XX12 Sign
   4++CFFC E6 80        		and		$80									; check sign bit on high byte
   5++CFFE 47           		ld		b,a									; and put it in of 12xlo in b
   6++CFFF                      ;110921 debugld      h,0
   7++CFFF 7C                   ld      a,h
   8++D000 E6 7F                and     $7F
   9++D002 67                   ld      h,a
  10++D003                      ;110921 debugld      h,0
  11++D003 ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++D007 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++D00A E6 80        		and		$80									; make sure we only have bit 7
  14++D00C 4F           		ld		c,a									; and put sign of unkxsgn c
  15++D00D CD 6D CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++D010 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++D011 67           		ld		h,a
  18++D012 22 78 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++D015              ; ..................................
  20++D015 2A 80 C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++D018 7C           		ld		a,h
  22++D019 E6 80        		and		$80
  23++D01B 47           		ld		b,a
  24++D01C                      ;110921 debugld      h,0
  25++D01C 7C                   ld      a,h
  26++D01D E6 7F                and     $7F
  27++D01F 67                   ld      h,a
  28++D020                      ;110921 debugld      h,0
  29++D020 ED 5B 0F C0  		ld		de,(UBnKylo)
  30++D024 3A 11 C0     		ld		a,(UBnKysgn)
  31++D027 E6 80        		and		$80									; make sure we only have bit 7
  32++D029 4F           		ld		c,a
  33++D02A CD 6D CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++D02D B4           		or		h									; combine sign in A with H
  35++D02E 67           		ld		h,a
  36++D02F 22 7A C0     		ld		(UBnkYScaled),hl
  37++D032              ; ..................................
  38++D032 2A 82 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++D035 7C           		ld		a,h
  40++D036 E6 80        		and		$80
  41++D038 47           		ld		b,a
  42++D039                      ;110921 debugld      h,0
  43++D039 7C                   ld      a,h
  44++D03A E6 7F                and     $7F
  45++D03C 67                   ld      h,a
  46++D03D                      ;110921 debugld      h,0
  47++D03D ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++D041 3A 14 C0     		ld		a,(UBnKzsgn)
  49++D044 E6 80        		and		$80									; make sure we only have bit 7
  50++D046 4F           		ld		c,a
  51++D047 CD 6D CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++D04A B4           		or		h									; combine sign in A with H
  53++D04B 67           		ld		h,a
  54++D04C CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++D04E 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++D050 E6 7F                and     $7F                                 ; a = value unsigned
  57++D052 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++D054 7D                   ld      a,l                                 ; get low byte now
  59++D055              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++D055 FE 04       >                        cp      4
  59++D057 DA 66 D0    >                        jp		c, ClampZto4
  60++D05A              NoClampZto4:
  61++D05A 22 7C C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++D05D 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++D05E 32 43 92             ld      (varT),a
  64++D061 7C           		ld		a,h
  65++D062 32 24 92             ld      (varU),a
  66++D065 C9           		ret
  67++D066              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++D066 21 04 00     		ld		hl,4
  69++D069 22 7C C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++D06C 7D           		ld		a,l
  71++D06D 32 43 92             ld      (varT),a                            ;                                                                           ;;;
  72++D070 7C           		ld		a,h
  73++D071 32 24 92             ld      (varU),a 						; compatibility for now
  74++D074 C9           		ret
  75++D075
# file closed: ././Variables/TransposeXX12ByShipToXX15.asm
 565+ D075                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++D075              ScaleNodeTo8Bit:								; TODO make signed
   2++D075 ED 4B 7C C0  	ld			bc,(UBnkZScaled)
   3++D079 2A 78 C0     	ld			hl,(UBnkXScaled)
   4++D07C ED 5B 7A C0  	ld			de,(UBnkYScaled)
   5++D080              SetABSbc:
   6++D080 78           	ld			a,b
   7++D081 DD 67        	ld			ixh,a
   8++D083 E6 7F        	and			SignMask8Bit
   9++D085 47           	ld			b,a									; bc = ABS bc
  10++D086              SetABShl:
  11++D086 7C           	ld			a,h
  12++D087 DD 6F        	ld			ixl,a
  13++D089 E6 7F        	and			SignMask8Bit
  14++D08B 67           	ld			h,a									; hl = ABS hl
  15++D08C              SetABSde:
  16++D08C 7A           	ld			a,d
  17++D08D FD 67        	ld			iyh,a
  18++D08F E6 7F        	and			SignMask8Bit
  19++D091 57           	ld			d,a									; de = ABS de
  20++D092              ScaleNodeTo8BitLoop:
  21++D092 78               ld          a,b		                            ; U	\ z hi
  22++D093 B4           	or			h                                   ; XX15+1	\ x hi
  23++D094 B2           	or			d                                   ; XX15+4	\ y hi
  24++D095 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++D097                  ShiftHLRight1
  25++D097 CB 3C       >			   srl h
  25++D099 CB 1D       >			   rr  l
  26++D09B                  ShiftDERight1
  26++D09B CB 3A       >			   srl d
  26++D09D CB 1B       >			   rr  e
  27++D09F              	ShiftBCRight1
  27++D09F CB 38       >			   srl b
  27++D0A1 CB 19       >			   rr  c
  28++D0A3 C3 92 D0         jp          ScaleNodeTo8BitLoop
  29++D0A6              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++D0A6 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++D0A8 E6 80        	and			SignOnly8Bit
  32++D0AA B0           	or			b
  33++D0AB 47           	ld			b,a
  34++D0AC              SignforHL:
  35++D0AC DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++D0AE E6 80        	and			SignOnly8Bit
  37++D0B0 B4           	or			h
  38++D0B1 67           	ld			h,a
  39++D0B2              SignforDE:
  40++D0B2 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++D0B4 E6 80        	and			SignOnly8Bit
  42++D0B6 B2           	or			d
  43++D0B7 57           	ld			d,a
  44++D0B8              SignsDoneSaveResult:
  45++D0B8 ED 43 7C C0  	ld			(UBnkZScaled),bc
  46++D0BC 22 78 C0     	ld			(UBnkXScaled),hl
  47++D0BF ED 53 7A C0  	ld			(UBnkYScaled),de
  48++D0C3 78           	ld			a,b
  49++D0C4 32 24 92     	ld			(varU),a
  50++D0C7 79           	ld			a,c
  51++D0C8 32 43 92     	ld			(varT),a
  52++D0CB C9           	ret
  53++D0CC
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 566+ D0CC
 567+ D0CC              ;--------------------------------------------------------------------------------------------------------
 568+ D0CC 21 A4 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 569+ D0CF ED 31                                add     hl,a
 570+ D0D1 3E FF                                ld      a,$FF
 571+ D0D3 77                                   ld      (hl),a
 572+ D0D4 C9                                   ret
 573+ D0D5              ;--------------------------------------------------------------------------------------------------------
 574+ D0D5 21 A4 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 575+ D0D8 ED 31                                add     hl,a
 576+ D0DA AF                                   xor     a
 577+ D0DB 77                                   ld      (hl),a
 578+ D0DC C9                                   ret
 579+ D0DD              ;--------------------------------------------------------------------------------------------------------
 580+ D0DD 3A 0E C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 581+ D0E0 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 582+ D0E2 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 583+ D0E4 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 584+ D0E5 21 A4 C0                             ld      hl,UbnkFaceVisArray
 585+ D0E8 3E FF                                ld      a,$FF
 586+ D0EA              SetAllFacesVisibleLoop:
 587+ D0EA 77           EE30:                   ld      (hl),a
 588+ D0EB 23                                   inc     hl
 589+ D0EC 10 FC                                djnz    SetAllFacesVisibleLoop
 590+ D0EE C9                                   ret
 591+ D0EF              ;--------------------------------------------------------------------------------------------------------
 592+ D0EF 3A 0E C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 593+ D0F2 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 594+ D0F4 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 595+ D0F6 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 596+ D0F7 06 10                                ld      b,16
 597+ D0F9 21 A4 C0                             ld      hl,UbnkFaceVisArray
 598+ D0FC 3E 00                                ld      a,$00
 599+ D0FE 77           SetAllFacesHiddenLoop:  ld      (hl),a
 600+ D0FF 23                                   inc     hl
 601+ D100 10 FC                                djnz    SetAllFacesHiddenLoop
 602+ D102 C9                                   ret
 603+ D103
 604+ D103              ;;;;X = normal scale
 605+ D103              ;;;;ZtempHi = zhi
 606+ D103              ;;;;......................................................
 607+ D103              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 608+ D103              ;;;;  Loop                                              ::LL90
 609+ D103              ;;;;     inc X
 610+ D103              ;;;;     divide X, Y & ZtempHiLo by 2
 611+ D103              ;;;;  Until ZtempHi = 0
 612+ D103              ;;;;......................................................
 613+ D103              ;-LL21---------------------------------------------------------------------------------------------------
 614+ D103                                      include "Universe/NormaliseTransMat.asm"
# file opened: ./Universe/NormaliseTransMat.asm
   1++D103              ;divdide by 16 using undocumented instrunctions
   2++D103              Norm256mulAdivQ:
   3++D103 47               ld      b,a
   4++D104 0E 00            ld      c,0
   5++D106 16 00            ld      d,0
   6++D108 3A 25 92         ld      a,(varQ)
   7++D10B 5F               ld      e,a
   8++D10C              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D10C              ;Output: BC = Quotient, HL = Remainder
  10++D10C              NormDIV16UNDOC:
  11++D10C 21 00 00         ld      hl,0
  12++D10F 78               ld      a,b
  13++D110 06 10            ld      b,16
  14++D112              NormDIV16UNDOCLOOP:
  15++D112 CB 31        	sll	    c		; unroll 16 times
  16++D114 17           	rla	    		; ...
  17++D115 ED 6A        	adc	    hl,hl		; ...
  18++D117 ED 52        	sbc	    hl,de		; ...
  19++D119 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D11B 19           	add	    hl,de		; ...
  21++D11C 0D           	dec	    c		; ...
  22++D11D              NormDIV16UNDOCSKIP:
  23++D11D 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D11F 79               ld      a,c
  25++D120 32 26 92         ld      (varR),a
  26++D123 C9               ret
  27++D124
  28++D124              ; Tested OK
  29++D124              NormaliseTransMat:
  30++D124              ;LL21
  31++D124 21 44 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D127 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D129 79                   ld      a,c
  34++D12A 32 25 92             ld      (varQ),a                    ; set up varQ
  35++D12D 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D12F              LL21Loop:
  37++D12F 56                   ld      d,(hl)
  38++D130 2B                   dec     hl
  39++D131 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D132                      ShiftDELeft1                        ; De = DE * 2
  40++D132 CB 23       >			   sla e
  40++D134 CB 12       >			   rl  d
  41++D136 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D137 E5           		push	hl
  43++D138 C5           		push	bc
  44++D139 CD 03 D1             call    Norm256mulAdivQ
  45++D13C              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D13C 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D13D C1           		pop		bc
  48++D13E E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D13F 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D140 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D141 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D143 C9                   ret
  53++D144
# file closed: ./Universe/NormaliseTransMat.asm
 615+ D144              ;-LL91---------------------------------------------------------------------------------------------------
 616+ D144
 617+ D144              ; Now we have
 618+ D144              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 619+ D144              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 620+ D144              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 621+ D144              ;
 622+ D144              ;--------------------------------------------------------------------------------------------------------
 623+ D144                                      include "Universe/InverseXX16.asm"
# file opened: ./Universe/InverseXX16.asm
   1++D144              ; TESTEDOK
   2++D144
   3++D144              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D144              ;        ld      a,(XX17)
   5++D144              ;        ld      ixl,a
   6++D144              ;        ld      ixh,9
   7++D144              ;        ld      hl,UBnkTransInv0x
   8++D144              ;        ld      a,(hl)
   9++D144              ;ScaleNode:
  10++D144              ;        ld      b,ixl
  11++D144              ;ScaleNodeLoop:
  12++D144              ;        sla      a
  13++D144              ;        djnz    ScaleNodeLoop
  14++D144              ;        ld      (hl),a
  15++D144              ;        inc     hl
  16++D144              ;        inc     hl
  17++D144              ;        dec     ixh
  18++D144              ;        jr      nz,ScaleNode
  19++D144              ;        ret
  20++D144
  21++D144
  22++D144              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D144              ; we coudl combine this with move to transmat later as an optimisation
  24++D144              ; INPUT - All Scaled
  25++D144              ;  They transmat has already been put into side, roof nose order
  26++D144              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D144              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D144              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D144              ; OUTPUT
  30++D144              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D144              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D144              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D144              ; First all side values become compoment 0 of each vector
  34++D144 2A 33 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D147 ED 5B 39 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D14B ED 4B 3F C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D14F 22 4B C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D152 ED 53 4D C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D156 ED 43 4F C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D15A 2A 35 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D15D ED 5B 3B C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D161 ED 4B 41 C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D165 22 53 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D168 ED 53 55 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D16C ED 43 57 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D170 2A 37 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D173 ED 5B 3D C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D177 ED 4B 43 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D17B 22 5B C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D17E ED 53 5D C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D182 ED 43 5F C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D186 C9                   ret
  53++D187
  54++D187
# file closed: ./Universe/InverseXX16.asm
 624+ D187              ;--------------------------------------------------------------------------------------------------------
 625+ D187              ;--------------------------------------------------------------------------------------------------------
 626+ D187              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 627+ D187              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 628+ D187              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 629+ D187              ; Returns
 630+ D187              ;
 631+ D187              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 632+ D187              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 633+ D187              ;
 634+ D187              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 635+ D187              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 636+ D187              ;
 637+ D187              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 638+ D187              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 639+ D187              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 640+ D187 ~                                    ld      c,0
 641+ D187 ~                                    ld      a,param3                      ;
 642+ D187 ~                                    bit     7,a
 643+ D187 ~                                    jr      z,.val2Pos
 644+ D187 ~            ;HandleSignebits
 645+ D187 ~                                    neg
 646+ D187 ~                                    ld      c,$80
 647+ D187 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 648+ D187 ~                                    ld      a,param2                        ; A = XX16 element
 649+ D187 ~                                    bit     7,a
 650+ D187 ~                                    jr      z,.val1Pos
 651+ D187 ~            ;HandleSignebits
 652+ D187 ~                                    neg
 653+ D187 ~                                    ld      b,a
 654+ D187 ~                                    ld      a,c
 655+ D187 ~                                    xor     $80
 656+ D187 ~                                    ld      c,a
 657+ D187 ~                                    ld      a,b
 658+ D187 ~            .val1Pos:               ld      d,a
 659+ D187 ~            ;AequAmulQdiv256:
 660+ D187 ~                                    mul
 661+ D187 ~                                    ld      a,c
 662+ D187 ~                                    bit     7,a
 663+ D187 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 664+ D187 ~                                    jr      z,.resultPos
 665+ D187 ~                                    neg
 666+ D187 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 667+ D187                                      ENDM
 668+ D187
 669+ D187              AequN1xorN2:            MACRO  param1,param2
 670+ D187 ~                                    ld      a,(param1)
 671+ D187 ~                                    xor     param2
 672+ D187                                      ENDM
 673+ D187
 674+ D187              N0equN1byN2div256:      MACRO param1,param2,param3
 675+ D187 ~                                    ld      a,param3                        ;
 676+ D187 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 677+ D187 ~                                    ld      a,param2                        ; A = XX16 element
 678+ D187 ~                                    ld      d,a
 679+ D187 ~                                    mul
 680+ D187 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 681+ D187 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 682+ D187                                      ENDM
 683+ D187
 684+ D187               ; TESTEDOK
 685+ D187              XX12DotOneRow:
 686+ D187              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 686+ D187 3A 78 C0    >                        ld      a,(UBnkXScaled)                        ;
 686+ D18A 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 686+ D18B 7E          >                        ld      a,(hl)                        ; A = XX16 element
 686+ D18C 57          >                        ld      d,a
 686+ D18D ED 30       >                        mul
 686+ D18F 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 686+ D190 32 43 92    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 687+ D193 23                                   inc     hl                                  ; move to sign byte
 688+ D194              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 688+ D194 3A 79 C0    >                        ld      a,(UBnkXScaledSign)
 688+ D197 AE          >                        xor     (hl)
 689+ D198 32 27 92                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 690+ D19B 23                                   inc     hl
 691+ D19C              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 691+ D19C 3A 7A C0    >                        ld      a,(UBnkYScaled)                        ;
 691+ D19F 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 691+ D1A0 7E          >                        ld      a,(hl)                        ; A = XX16 element
 691+ D1A1 57          >                        ld      d,a
 691+ D1A2 ED 30       >                        mul
 691+ D1A4 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 691+ D1A5 32 25 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 692+ D1A8                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 692+ D1A8 3A 43 92    >               ld       a,(varT)
 692+ D1AB 32 26 92    >               ld       (varR),a
 693+ D1AE 23                                   inc     hl
 694+ D1AF                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 694+ D1AF 3A 7B C0    >                        ld      a,(UBnkYScaledSign)
 694+ D1B2 AE          >                        xor     (hl)
 695+ D1B3              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 696+ D1B3 E5           STequSRplusAQ           push    hl
 697+ D1B4 CD 5C A6                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 698+ D1B7 E1                                   pop     hl
 699+ D1B8 32 43 92                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 700+ D1BB 23                                   inc     hl
 701+ D1BC              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 701+ D1BC 3A 7C C0    >                        ld      a,(UBnkZScaled)                        ;
 701+ D1BF 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 701+ D1C0 7E          >                        ld      a,(hl)                        ; A = XX16 element
 701+ D1C1 57          >                        ld      d,a
 701+ D1C2 ED 30       >                        mul
 701+ D1C4 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 701+ D1C5 32 25 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 702+ D1C8                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 702+ D1C8 3A 43 92    >               ld       a,(varT)
 702+ D1CB 32 26 92    >               ld       (varR),a
 703+ D1CE 23                                   inc     hl
 704+ D1CF                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 704+ D1CF 3A 7D C0    >                        ld      a,(UBnkZScaledSign)
 704+ D1D2 AE          >                        xor     (hl)
 705+ D1D3              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 706+ D1D3 CD 5C A6                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 707+ D1D6              ; Now we exit with A = result S = Sign
 708+ D1D6 C9                                   ret
 709+ D1D7
 710+ D1D7              ; added where sign is separate byte
 711+ D1D7              ;;;XX12DotOneRowV2:
 712+ D1D7              ;;;XX12CalcXV2:
 713+ D1D7              ;;;        ld      a,(hl)
 714+ D1D7              ;;;        ld      de,(UBnkXScaled)
 715+ D1D7              ;;;        ld      b,d
 716+ D1D7              ;;;        ld      d,a
 717+ D1D7              ;;;        mul
 718+ D1D7              ;;;        ld      a,e
 719+ D1D7              ;;;        ld      (varT),a
 720+ D1D7              ;;;XX12CalcXSignV2:
 721+ D1D7              ;;;        inc     hl
 722+ D1D7              ;;;        ld      a,(hl)
 723+ D1D7              ;;;        xor     b
 724+ D1D7              ;;;        ld      (varS),a
 725+ D1D7              ;;;XX12CalcYV2:
 726+ D1D7              ;;;        inc     hl
 727+ D1D7              ;;;        ld      de,(UBnkYScaled)
 728+ D1D7              ;;;        ld      b,d
 729+ D1D7              ;;;        ld      d,a
 730+ D1D7              ;;;        mul
 731+ D1D7              ;;;        ld      a,e
 732+ D1D7              ;;;        ld      (varQ),a
 733+ D1D7              ;;;        ld      a,(varT)
 734+ D1D7              ;;;        ld      (varR),a
 735+ D1D7              ;;;XX12CalcYSignV2:
 736+ D1D7              ;;;        inc     hl
 737+ D1D7              ;;;        ld      a,(hl)
 738+ D1D7              ;;;        xor     b
 739+ D1D7              ;;;        ld      (varS),a
 740+ D1D7              ;;;XX12CalcXPlusYV2:
 741+ D1D7              ;;;        push    hl
 742+ D1D7              ;;;        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 743+ D1D7              ;;;        pop     hl
 744+ D1D7              ;;;        ld      (varT),a                            ; var S already holds sign
 745+ D1D7              ;;;       ret
 746+ D1D7
 747+ D1D7
 748+ D1D7              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 749+ D1D7              ;TESTED OK
 750+ D1D7              XX12EquXX15DotProductXX16:
 751+ D1D7              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 752+ D1D7 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 753+ D1DA 21 33 C0                             ld      hl,UBnkTransmatSidevX
 754+ D1DD CD 87 D1                             call    XX12DotOneRow
 755+ D1E0 32 7E C0                             ld      (UBnkXX12xLo),a
 756+ D1E3 3A 27 92                             ld      a,(varS)
 757+ D1E6 32 7F C0                             ld      (UBnkXX12xSign),a
 758+ D1E9 21 39 C0                             ld      hl,UBnkTransmatRoofvX
 759+ D1EC CD 87 D1                             call    XX12DotOneRow
 760+ D1EF 32 80 C0                             ld      (UBnkXX12yLo),a
 761+ D1F2 3A 27 92                             ld      a,(varS)
 762+ D1F5 32 81 C0                             ld      (UBnkXX12ySign),a
 763+ D1F8 21 3F C0                             ld      hl,UBnkTransmatNosevX
 764+ D1FB CD 87 D1                             call    XX12DotOneRow
 765+ D1FE 32 82 C0                             ld      (UBnkXX12zLo),a
 766+ D201 3A 27 92                             ld      a,(varS)
 767+ D204 32 83 C0                             ld      (UBnkXX12zSign),a
 768+ D207 C9                                   ret
 769+ D208              ;--------------------------------------------------------------------------------------------------------
 770+ D208                                      include "./Variables/CopyXX12ScaledToXX18.asm"
# file opened: ././Variables/CopyXX12ScaledToXX18.asm
   1++D208              CopyXX12ScaledToXX18:
   2++D208              CopyResultToDrawCam:
   3++D208                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D208 3A 7E C0    >               ld       a,(XX12)
   3++D20B 32 6C C0    >               ld       (XX18),a
   4++D20E                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D20E 3A 7F C0    >               ld       a,(XX12+1)
   4++D211 32 6E C0    >               ld       (XX18+2),a
   5++D214                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D214 3A 80 C0    >               ld       a,(XX12+2)
   5++D217 32 6F C0    >               ld       (XX18+3),a
   6++D21A                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D21A 3A 81 C0    >               ld       a,(XX12+3)
   6++D21D 32 71 C0    >               ld       (XX18+5),a
   7++D220                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D220 3A 82 C0    >               ld       a,(XX12+4)
   7++D223 32 72 C0    >               ld       (XX18+6),a
   8++D226                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D226 3A 83 C0    >               ld       a,(XX12+5)
   8++D229 32 74 C0    >               ld       (XX18+8),a
   9++D22C C9                   ret
  10++D22D
# file closed: ././Variables/CopyXX12ScaledToXX18.asm
 771+ D22D                                      include "./Variables/CopyXX12toXX15.asm"
# file opened: ././Variables/CopyXX12toXX15.asm
   1++D22D              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D22D 3A 7E C0    >               ld       a,(UBnkXX12xLo)
   1++D230 32 78 C0    >               ld       (UBnkXScaled),a
   2++D233                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D233 3A 7F C0    >               ld       a,(UBnkXX12xSign)
   2++D236 32 79 C0    >               ld       (UBnkXScaledSign),a
   3++D239                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D239 3A 80 C0    >               ld       a,(UBnkXX12yLo)
   3++D23C 32 7A C0    >               ld       (UBnkYScaled),a
   4++D23F                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D23F 3A 81 C0    >               ld       a,(UBnkXX12ySign)
   4++D242 32 7B C0    >               ld       (UBnkYScaledSign),a
   5++D245                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D245 3A 82 C0    >               ld       a,(UBnkXX12zLo)
   5++D248 32 7C C0    >               ld       (UBnkZScaled),a
   6++D24B                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D24B 3A 83 C0    >               ld       a,(UBnkXX12zSign)
   6++D24E 32 7D C0    >               ld       (UBnkZScaledSign),a
   7++D251 C9                                   ret
   8++D252
# file closed: ././Variables/CopyXX12toXX15.asm
 772+ D252                                      include "./Variables/CopyXX18toXX15.asm"
# file opened: ././Variables/CopyXX18toXX15.asm
   1++D252              CopyXX18toXX15:
   2++D252              CopyDrawCamToScaled:
   3++D252                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D252 3A 6C C0    >               ld       a,(UBnkDrawCam0xLo)
   3++D255 32 78 C0    >               ld       (UBnkXScaled),a
   4++D258                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D258 3A 6E C0    >               ld       a,(UBnkDrawCam0xSgn)
   4++D25B 32 79 C0    >               ld       (UBnkXScaledSign),a
   5++D25E                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D25E 3A 6F C0    >               ld       a,(UBnkDrawCam0yLo)
   5++D261 32 7A C0    >               ld       (UBnkYScaled),a
   6++D264                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D264 3A 71 C0    >               ld       a,(UBnkDrawCam0ySgn)
   6++D267 32 7B C0    >               ld       (UBnkYScaledSign),a
   7++D26A                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D26A 3A 72 C0    >               ld       a,(UBnkDrawCam0zLo)
   7++D26D 32 7C C0    >               ld       (UBnkZScaled),a
   8++D270                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D270 3A 74 C0    >               ld       a,(UBnkDrawCam0zSgn)
   8++D273 32 7D C0    >               ld       (UBnkZScaledSign),a
   9++D276 C9                   ret
  10++D277
# file closed: ././Variables/CopyXX18toXX15.asm
 773+ D277                                      include "./Variables/CopyXX18ScaledToXX15.asm"
# file opened: ././Variables/CopyXX18ScaledToXX15.asm
   1++D277 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D27A 11 6C C0                             ld      de,UBnkDrawCam0xLo
   3++D27D                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D27D ED A0       >		                ldi
   3++D27F ED A0       >		                ldi
   3++D281 ED A0       >		                ldi
   3++D283 ED A0       >		                ldi
   3++D285 ED A0       >		                ldi
   3++D287 ED A0       >		                ldi
   3++D289 ED A0       >		                ldi
   3++D28B ED A0       >		                ldi
   3++D28D ED A0       >		                ldi
   4++D28F C9                                   ret
   5++D290
   6++D290              CopyCameraToXX15Signed:
   7++D290 2A 6C C0             ld  hl,(UBnkDrawCam0xLo)
   8++D293 3A 6E C0             ld  a,(UBnkDrawCam0xSgn)
   9++D296 B4                   or  h
  10++D297 67                   ld  h,a
  11++D298 22 78 C0             ld  (UBnkXScaled),hl
  12++D29B 2A 6F C0             ld  hl,(UBnkDrawCam0yLo)
  13++D29E 3A 71 C0             ld  a,(UBnkDrawCam0ySgn)
  14++D2A1 B4                   or  h
  15++D2A2 67                   ld  h,a
  16++D2A3 22 7A C0             ld  (UBnkYScaled),hl
  17++D2A6 2A 72 C0             ld  hl,(UBnkDrawCam0zLo)
  18++D2A9 3A 74 C0             ld  a,(UBnkDrawCam0zSgn)
  19++D2AC B4                   or  h
  20++D2AD 67                   ld  h,a
  21++D2AE 22 7C C0             ld  (UBnkZScaled),hl
  22++D2B1 C9                   ret
  23++D2B2
  24++D2B2              CopyXX18ScaledToXX15:
  25++D2B2              CopyDrawCamToScaledMatrix:
  26++D2B2                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D2B2 3A 74 C0    >               ld       a,(UBnkDrawCam0zSgn)
  26++D2B5 32 7D C0    >               ld       (UBnkZScaledSign),a
  27++D2B8                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D2B8 3A 6C C0    >               ld       a,(UBnkDrawCam0xLo)
  27++D2BB 32 78 C0    >               ld       (UBnkXScaled),a
  28++D2BE                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D2BE 3A 6E C0    >               ld       a,(UBnkDrawCam0xSgn)
  28++D2C1 32 79 C0    >               ld       (UBnkXScaledSign),a
  29++D2C4                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D2C4 3A 6F C0    >               ld       a,(UBnkDrawCam0yLo)
  29++D2C7 32 7A C0    >               ld       (UBnkYScaled),a
  30++D2CA                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D2CA 3A 71 C0    >               ld       a,(UBnkDrawCam0ySgn)
  30++D2CD 32 7B C0    >               ld       (UBnkYScaledSign),a
  31++D2D0                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D2D0 3A 72 C0    >               ld       a,(UBnkDrawCam0zLo)
  31++D2D3 32 7C C0    >               ld       (UBnkZScaled),a
  32++D2D6 C9                   ret
  33++D2D7
  34++D2D7              CopyXX15ToXX18Scaled:
  35++D2D7              CopyScaledMatrixToDrawCam:
  36++D2D7                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D2D7 3A 7D C0    >               ld       a,(UBnkZScaledSign)
  36++D2DA 32 74 C0    >               ld       (UBnkDrawCam0zSgn),a
  37++D2DD                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D2DD 3A 78 C0    >               ld       a,(UBnkXScaled)
  37++D2E0 32 6C C0    >               ld       (UBnkDrawCam0xLo),a
  38++D2E3                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D2E3 3A 79 C0    >               ld       a,(UBnkXScaledSign)
  38++D2E6 32 6E C0    >               ld       (UBnkDrawCam0xSgn),a
  39++D2E9                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D2E9 3A 7A C0    >               ld       a,(UBnkYScaled)
  39++D2EC 32 6F C0    >               ld       (UBnkDrawCam0yLo),a
  40++D2EF                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D2EF 3A 7B C0    >               ld       a,(UBnkYScaledSign)
  40++D2F2 32 71 C0    >               ld       (UBnkDrawCam0ySgn),a
  41++D2F5                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D2F5 3A 7C C0    >               ld       a,(UBnkZScaled)
  41++D2F8 32 72 C0    >               ld       (UBnkDrawCam0zLo),a
  42++D2FB C9                   ret
  43++D2FC
  44++D2FC
  45++D2FC              XX15EquXX15AddXX18:
  46++D2FC              LL94Z:
  47++D2FC 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D2FE 16 00                ld      d,0                                                     ;
  49++D300 3A 7C C0             ld      a,(UBnkZScaled)                                         ;
  50++D303 6F                   ld      l,a                                                     ;
  51++D304 3A 7D C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D307 47                   ld      b,a                                                     ;
  53++D308 3A 72 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D30B 5F                   ld      e,a                                                     ;
  55++D30C 3A 74 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D30F 4F                   ld      c,a                                                     ;
  57++D310 CD 6D CB             call    ADDHLDESignBC                                           ;
  58++D313 47                   ld      b,a                                                     ;
  59++D314 7C                   ld      a,h                                                     ;
  60++D315 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D316 32 7D C0             ld      (UBnkZScaledSign),a                                     ;
  62++D319 7D                   ld      a,l                                                     ;
  63++D31A 32 7C C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D31D              LL94X:
  65++D31D 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D31F 16 00                ld      d,0                                                     ;
  67++D321 3A 78 C0             ld      a,(UBnkXScaled)                                         ;
  68++D324 6F                   ld      l,a                                                     ;
  69++D325 3A 79 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D328 47                   ld      b,a                                                     ;
  71++D329 3A 6C C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D32C 5F                   ld      e,a                                                     ;
  73++D32D 3A 6E C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D330 4F                   ld      c,a                                                     ;
  75++D331 CD 6D CB             call    ADDHLDESignBC                                           ;
  76++D334 47                   ld      b,a                                                     ;
  77++D335 7C                   ld      a,h                                                     ;
  78++D336 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D337 32 79 C0             ld      (UBnkXScaledSign),a                                     ;
  80++D33A 7D                   ld      a,l                                                     ;
  81++D33B 32 78 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D33E              LL94Y:
  83++D33E 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D340 16 00                ld      d,0                                                     ;
  85++D342 3A 7A C0             ld      a,(UBnkYScaled)                                         ;
  86++D345 6F                   ld      l,a                                                     ;
  87++D346 3A 7B C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D349 47                   ld      b,a                                                     ;
  89++D34A 3A 6F C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D34D 5F                   ld      e,a                                                     ;
  91++D34E 3A 71 C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D351 4F                   ld      c,a                                                     ;
  93++D352 CD 6D CB             call    ADDHLDESignBC                                           ;
  94++D355 47                   ld      b,a                                                     ;
  95++D356 7C                   ld      a,h                                                     ;
  96++D357 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D358 32 7B C0             ld      (UBnkYScaledSign),a                                     ;
  98++D35B 7D                   ld      a,l                                                     ;
  99++D35C 32 7A C0             ld      (UBnkYScaled),a                                         ;
 100++D35F C9                   ret
 101++D360
# file closed: ././Variables/CopyXX18ScaledToXX15.asm
 774+ D360                                      include "./Variables/CopyXX12ToScaled.asm"
# file opened: ././Variables/CopyXX12ToScaled.asm
   1++D360              CopyXX12ToScaled:
   2++D360              CopyResultToScaled:
   3++D360                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D360 3A 7E C0    >               ld       a,(XX12+0)
   3++D363 32 78 C0    >               ld       (UBnkXScaled),a
   4++D366                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D366 3A 80 C0    >               ld       a,(XX12+2)
   4++D369 32 7A C0    >               ld       (UBnkYScaled),a
   5++D36C                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D36C 3A 82 C0    >               ld       a,(XX12+4)
   5++D36F 32 7C C0    >               ld       (UBnkZScaled),a
   6++D372 C9                   ret
   7++D373
# file closed: ././Variables/CopyXX12ToScaled.asm
 775+ D373              ;--------------------------------------------------------------------------------------------------------
 776+ D373                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D373              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D373              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D373              ;;; S = XX12 XSign Xor XX15 XSign
   4++D373              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D373              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D373              ;;; R = T
   7++D373              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D373              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D373              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D373              ;;; Q = A * Q /256 usigned (zdot)
  11++D373              ;;; R = T
  12++D373              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D373
  14++D373
  15++D373
  16++D373
  17++D373
  18++D373              MacroAequDxEdiv256usgn:	MACRO
  19++D373 ~            						mul
  20++D373 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D373              						ENDM
  22++D373              DotProductXX12XX15:
  23++D373 3A 7E C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D376                      IfAIsZeroGoto dotxskipzero
  24++D376 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D377 CA 94 D3    >				jp	z, dotxskipzero
  25++D37A 5F                   ld          e,a
  26++D37B 3A 78 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D37E 57                   ld          d,a                     ; de = xx12 x signed
  28++D37F                      IfAIsZeroGoto dotxskipzero
  28++D37F A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D380 CA 94 D3    >				jp	z, dotxskipzero
  29++D383 ED 30        		mul
  30++D385 42                   ld          b,d                     ; b = result
  31++D386 3A 7F C0             ld          a,(UBnkXX12xSign)
  32++D389 21 79 C0             ld          hl,UBnkXScaledSign
  33++D38C AE                   xor         (hl)
  34++D38D E6 80                and         $80                     ; so sign bit only
  35++D38F FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D391 C3 98 D3             jp          dotmuly
  37++D394              dotxskipzero:
  38++D394 AF                   xor         a
  39++D395 47                   ld          b,a
  40++D396 FD 67                ld          iyh,a
  41++D398              dotmuly:
  42++D398              ; now we have b = XX12 x &d  norm x signed
  43++D398 3A 80 C0             ld          a,(UBnkXX12yLo)
  44++D39B                      IfAIsZeroGoto dotyskipzero
  44++D39B A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D39C CA BB D3    >				jp	z, dotyskipzero
  45++D39F 5F                   ld          e,a
  46++D3A0 3A 7A C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D3A3                      IfAIsZeroGoto dotyskipzero
  47++D3A3 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D3A4 CA BB D3    >				jp	z, dotyskipzero
  48++D3A7 57                   ld          d,a                     ; de = xx12 x signed
  49++D3A8 ED 30                mul
  50++D3AA 4A                   ld          c,d                     ; c = result
  51++D3AB DD 69                ld          ixl,c
  52++D3AD 3A 81 C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D3B0 21 7B C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D3B3 AE                   xor         (hl)                    ; XX15+3
  55++D3B4 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D3B6 DD 67                ld          ixh,a
  57++D3B8 C3 BF D3             jp          dotaddxy
  58++D3BB              dotyskipzero:
  59++D3BB AF                   xor         a
  60++D3BC 4F                   ld          c,a
  61++D3BD DD 67                ld          ixh,a
  62++D3BF              dotaddxy:
  63++D3BF              ; Optimise later as this is 16 bit
  64++D3BF 26 00                ld          h,0                     ;
  65++D3C1 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D3C2 16 00                ld          d,0                     ;
  67++D3C4 59                   ld          e,c                     ; de = ylo + yscaled
  68++D3C5 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D3C7 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D3C8 CD 6D CB             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D3CB 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D3CC 3A 82 C0             ld          a,(UBnkXX12zLo)         ;
  73++D3CF                      IfAIsZeroGoto dotzskipzero
  73++D3CF A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D3D0 CA F5 D3    >				jp	z, dotzskipzero
  74++D3D3 5F                   ld          e,a                     ;
  75++D3D4 3A 7C C0             ld          a,(UBnkZScaled)         ;
  76++D3D7                      IfAIsZeroGoto dotzskipzero
  76++D3D7 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D3D8 CA F5 D3    >				jp	z, dotzskipzero
  77++D3DB 57                   ld          d,a
  78++D3DC ED 30                mul
  79++D3DE E5                   push        hl                      ; save prev result
  80++D3DF 3A 7D C0             ld          a,(UBnkZScaledSign)
  81++D3E2 21 83 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D3E5 AE                   xor         (hl)                    ; hi sign
  83++D3E6 E6 80                and         $80                     ; a = sign of multiply
  84++D3E8 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D3E9 E1                   pop         hl
  86++D3EA 5A                   ld          e,d
  87++D3EB 16 00                ld          d,0
  88++D3ED CD 6D CB             call ADDHLDESignBC
  89++D3F0 32 27 92             ld          (varS),a
  90++D3F3 7D                   ld          a,l
  91++D3F4 C9                   ret                                 ; returns with A = value, varS = sign
  92++D3F5              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D3F5 78                   ld          a,b
  94++D3F6 32 27 92             ld          (varS),a
  95++D3F9 7D                   ld          a,l
  96++D3FA C9                   ret
  97++D3FB              ;;;;       DotProductXX12XX15:
  98++D3FB              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D3FB              ;;;;       ld          e,a
 100++D3FB              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D3FB              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D3FB              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D3FB              ;;;;		mul
 104++D3FB              ;;;;       ld          b,d                     ; b as var T
 105++D3FB              ;;;;       ld          a,(UBnkXX12xSign)
 106++D3FB              ;;;;       ld          hl,UBnkXScaledSign
 107++D3FB              ;;;;       xor         (hl)
 108++D3FB              ;;;;       and         $80                     ; so sign bit only
 109++D3FB              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D3FB              ;;;; now we have b = XX12 x & norm x signed
 111++D3FB              ;;;; by here B = xlo & xscaled C = result sign
 112++D3FB              ;;;;       ld          a,(UBnkXX12yLo)
 113++D3FB              ;;;;       ld          e,a
 114++D3FB              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D3FB              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D3FB              ;;;;       mul
 117++D3FB              ;;;;       ld          a,d
 118++D3FB              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D3FB              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D3FB              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D3FB              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D3FB              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D3FB              ;;;;       xor         (hl)                    ; XX15+3
 124++D3FB              ;;;;       and         $80
 125++D3FB              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D3FB              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D3FB              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D3FB              ;;;;       ld          e,a                     ; use e as var Q
 129++D3FB              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D3FB              ;;;;       ld          d,a
 131++D3FB              ;;;;       mul
 132++D3FB              ;;;;       ld          a,d
 133++D3FB              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D3FB              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D3FB              ;;;;       ld          a,(UBnkZScaledSign)
 136++D3FB              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D3FB              ;;;;       xor         (hl)                    ; hi sign
 138++D3FB              ;;;;       and         $80
 139++D3FB              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D3FB              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D3FB
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 777+ D3FB              ;--------------------------------------------------------------------------------------------------------
 778+ D3FB              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 779+ D3FB                                      include "Universe/ScaleNormal.asm"
# file opened: ./Universe/ScaleNormal.asm
   1++D3FB              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D3FB              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D3FB              ScaleNormal:
   4++D3FB              LL93:
   5++D3FB 3A 2C 92             ld      a,(XX17)                    ; scale--
   6++D3FE DD 6F        		ld		ixl,a
   7++D400 3A 7C C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D403 DD 2D        		dec		ixl
   9++D405 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D406              ScaleLoop:
  11++D406              LL933:
  12++D406 21 78 C0             ld      hl,XX15
  13++D409 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D40B 23                   inc     hl							; looking at XX15 x sign now
  15++D40C 23                   inc     hl							; looking at XX15 y Lo now
  16++D40D CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D40F 23           		inc		hl							; looking at XX15 y sign now
  18++D410 23           		inc		hl							; looking at XX15 z Lo now
  19++D411 CB 3E        		srl		(hl)
  20++D413 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D414 DD 2D                dec     ixl                         ; reduce scale
  22++D416 F2 06 D4             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D419 C9                   ret
  24++D41A
# file closed: ./Universe/ScaleNormal.asm
 780+ D41A              ;--------------------------------------------------------------------------------------------------------
 781+ D41A                                      include "Universe/ScaleObjectDistance.asm"
# file opened: ./Universe/ScaleObjectDistance.asm
   1++D41A              ScaleObjectDistance:
   2++D41A              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D41A 3A 14 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D41D 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D41E              LL90:                                       ; scaling object distance
   6++D41E 3A 73 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D421 47                   ld      b,a                         ; z_hi (yReg)
   8++D422                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D422 A7          >                    and a
   8++D423 C8          >                    ret    z
   9++D424              LL90Loop:
  10++D424              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D424 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D425                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D425 2A 6F C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D428 CB 3C       >                    srl   h
  12++D42A CB 1D       >                    rr    l
  12++D42C 22 6F C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D42F                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D42F 2A 6C C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D432 CB 3C       >                    srl   h
  13++D434 CB 1D       >                    rr    l
  13++D436 22 6C C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D439                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D439 2A 72 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D43C CB 3C       >                    srl   h
  14++D43E CB 1D       >                    rr    l
  14++D440 22 72 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D443 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D444                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D444 FE 00       >				cp	0
  16++D446 C2 24 D4    >				jp	nz,LL90Loop
  17++D449 C9                   ret
  18++D44A
# file closed: ./Universe/ScaleObjectDistance.asm
 782+ D44A              ;--------------------------------------------------------------------------------------------------------
 783+ D44A
 784+ D44A              ; Backface cull
 785+ D44A              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 786+ D44A              ; normal vector = cross product of ship ccordinates
 787+ D44A              ;
 788+ D44A
 789+ D44A                                      include "./Variables/CopyFaceToXX15.asm"
# file opened: ././Variables/CopyFaceToXX15.asm
   1++D44A 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D44B 47                                   ld      b,a                                                    ;;;
   3++D44C E6 80                                and     $80
   4++D44E 32 79 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D451 78                                   ld      a,b
   6++D452 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D454 47                                   ld      b,a
   8++D455 E6 80                                and     $80
   9++D457 32 7B C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D45A 78                                   ld      a,b
  11++D45B CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D45D E6 80                                and     $80
  13++D45F 32 7D C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D462 23                                   inc     hl                          ; move to X ccord
  15++D463 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D464 32 78 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D467 23                                   inc     hl                                                                                                                 ;;;
  18++D468 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D469 32 7A C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D46C 23                                   inc     hl                                                                                                                 ;;;
  21++D46D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D46E 32 7C C0                             ld      (UBnkZScaled),a
  23++D471 C9                                   ret
  24++D472
# file closed: ././Variables/CopyFaceToXX15.asm
 790+ D472                                      include "./Variables/CopyFaceToXX12.asm"
# file opened: ././Variables/CopyFaceToXX12.asm
   1++D472 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D473 47                                   ld      b,a                         ; save sign bits to b
   3++D474 E6 80                                and     $80
   4++D476 32 7F C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D479 78                                   ld      a,b
   6++D47A CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D47C 47                                   ld      b,a
   8++D47D E6 80                                and     $80
   9++D47F 32 81 C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D482 78                                   ld      a,b
  11++D483 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D485 E6 80                                and     $80
  13++D487 32 83 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D48A 23                                   inc     hl                          ; move to X ccord
  15++D48B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D48C 32 7E C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D48F 23                                   inc     hl                                                                                                                 ;;;
  18++D490 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D491 32 80 C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D494 23                                   inc     hl                                                                                                                 ;;;
  21++D495 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D496 32 82 C0                             ld      (UBnkXX12zLo),a
  23++D499 C9                                   ret
  24++D49A
# file closed: ././Variables/CopyFaceToXX12.asm
 791+ D49A              ;--------------------------------------------------------------
 792+ D49A              ; Original loginc in EE29 (LL9 4 of 12)
 793+ D49A              ; Enters with XX4 = z distnace scaled to 1 .. 31
 794+ D49A              ; get number of faces * 4      FaceCntX4
 795+ D49A              ; return if no faces
 796+ D49A              ; get Face Normal scale factor FaceScale (XX17)
 797+ D49A              ; get ship pos z hi     (XX18)
 798+ D49A              ; While Z hi <> 0
 799+ D49A              ;    FaceScale = FaceScale + 1           (XX17)
 800+ D49A              ;    Ship pos y = ship pos y / 2         (XX18)
 801+ D49A              ;    ship pos x = ship pos x / 2         (XX18)
 802+ D49A              ;    ship pos z = ship pos z / 2         (XX18)
 803+ D49A              ; Loop
 804+ D49A              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 805+ D49A              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 806+ D49A              ; Copy XX12 into XX18
 807+ D49A              ; For each face
 808+ D49A              ;     Get Face sign and visibility distance byte
 809+ D49A              ;     if normal visibility range  < XX4
 810+ D49A              ;        Get Face data into XX12
 811+ D49A              ;        if FaceScale (XX17) >= 4
 812+ D49A              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 813+ D49A              ;        else
 814+ D49A              ;           Copy FaceScale scaled to X  (XX17)
 815+ D49A              ;LabelOverflowLoop:
 816+ D49A              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 817+ D49A              ;           While X >= 0
 818+ D49A              ;              X--                                                                                                  ::LL93
 819+ D49A              ;              if  x >= 0
 820+ D49A              ;                  XX15x = XX15x / 2
 821+ D49A              ;                  XX15y = XX15y / 2
 822+ D49A              ;                  XX15y = XX15y / 2
 823+ D49A              ;           loop
 824+ D49A              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 825+ D49A              ;           if A > 256 (i.e. was overflow)
 826+ D49A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 827+ D49A              ;               X = 1
 828+ D49A              ;               Goto LabelOverflowLoop
 829+ D49A              ;           else
 830+ D49A              ;              Scaled (XX15) Z = AddZ
 831+ D49A              ;           endif
 832+ D49A              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 833+ D49A              ;           if A > 256 (i.e. was overflow)
 834+ D49A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 835+ D49A              ;               X = 1
 836+ D49A              ;               Goto LabelOverflowLoop
 837+ D49A              ;           else
 838+ D49A              ;              Scaled (XX15) X = AddX
 839+ D49A              ;           endif
 840+ D49A              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 841+ D49A              ;           if A > 256 (i.e. was overflow)
 842+ D49A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 843+ D49A              ;               X = 1
 844+ D49A              ;               Goto LabelOverflowLoop
 845+ D49A              ;           else
 846+ D49A              ;              Scaled (XX15) Y = AddY
 847+ D49A              ;           endif
 848+ D49A              ;        endif
 849+ D49A              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 850+ D49A              ;        if dot product < 0
 851+ D49A              ;           set face visible
 852+ D49A              ;        else
 853+ D49A              ;           set face invisible
 854+ D49A              ;        end if
 855+ D49A              ;     else
 856+ D49A              ;       Set FaceVisibility to true
 857+ D49A              ;     end if
 858+ D49A              ; Next Face
 859+ D49A
 860+ D49A DD 25        ScaleDownXX15byIXH:     dec     ixh
 861+ D49C F8                                   ret     m
 862+ D49D 21 78 C0                             ld      hl,UBnkXScaled
 863+ D4A0 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 864+ D4A2 23                                   inc     hl                          ; looking at XX15 x sign now
 865+ D4A3 23                                   inc     hl                          ; looking at XX15 y Lo now
 866+ D4A4 CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 867+ D4A6 23                                   inc     hl                          ; looking at XX15 y sign now
 868+ D4A7 23                                   inc     hl                          ; looking at XX15 z Lo now
 869+ D4A8 CB 3E                                srl     (hl)
 870+ D4AA C3 9A D4                             jp      ScaleDownXX15byIXH
 871+ D4AD C9                                   ret
 872+ D4AE
 873+ D4AE 21 6C C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 874+ D4B1 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 875+ D4B3 23                                   inc     hl                          ; looking at XX18 x sign now
 876+ D4B4 23                                   inc     hl                          ; looking at XX18 y Lo now
 877+ D4B5 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 878+ D4B7 23                                   inc     hl                          ; looking at XX18 y sign now
 879+ D4B8 23                                   inc     hl                          ; looking at XX18 z Lo now
 880+ D4B9 CB 3E                                srl     (hl)
 881+ D4BB C9                                   ret
 882+ D4BC
 883+ D4BC              ;line of sight vector = [x y z] + face normal vector
 884+ D4BC
 885+ D4BC              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 886+ D4BC              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 887+ D4BC              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 888+ D4BC              ;
 889+ D4BC              ;--------------------------------------------------------------
 890+ D4BC              ; line of sight (eye outwards dot face normal vector < 0
 891+ D4BC              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 892+ D4BC              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 893+ D4BC              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 894+ D4BC
 895+ D4BC              RotateXX15ByTransMatXX16:
 896+ D4BC 21 33 C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 897+ D4BF CD 9F 88                             call    XX12ProcessOneRow
 898+ D4C2 47                                   ld      b,a                                 ; get
 899+ D4C3 7D                                   ld      a,l
 900+ D4C4 B0                                   or      b
 901+ D4C5 32 7F C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 902+ D4C8 7D                                   ld      a,l
 903+ D4C9 32 7E C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 904+ D4CC
 905+ D4CC 21 39 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 906+ D4CF CD 9F 88                             call    XX12ProcessOneRow
 907+ D4D2 47                                   ld      b,a                                 ; get
 908+ D4D3 7D                                   ld      a,l
 909+ D4D4 B0                                   or      b
 910+ D4D5 32 81 C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 911+ D4D8 7D                                   ld      a,l
 912+ D4D9 32 80 C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 913+ D4DC
 914+ D4DC 21 3F C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 915+ D4DF CD 9F 88                             call    XX12ProcessOneRow
 916+ D4E2 47                                   ld      b,a                                 ; get
 917+ D4E3 7D                                   ld      a,l
 918+ D4E4 B0                                   or      b
 919+ D4E5 32 83 C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 920+ D4E8 7D                                   ld      a,l
 921+ D4E9 32 82 C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 922+ D4EC C9                                   ret
 923+ D4ED
 924+ D4ED                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D4ED 00           CurrentNormIdx  DB 0
   2++D4EE              ; SomeFacesVisible:
   3++D4EE              ; EE29:
   4++D4EE
   5++D4EE              ;   Backface cull logic  line of sight vector . face normal vector
   6++D4EE              ;       line of sight vector . face normal vector
   7++D4EE              ;       => line of sight vector = [x y z] + face normal vector
   8++D4EE              ;       Where [x y z] =
   9++D4EE              ;                                               [ [x y z] . sidev ]
  10++D4EE              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D4EE              ;                                               [ [x y z] . nosev ]
  12++D4EE              ;
  13++D4EE              ;   so project the [x y z] vector into the face's normal space
  14++D4EE              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D4EE              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D4EE              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D4EE              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D4EE              ;
  19++D4EE              ;                         [ [x y z] . sidev + normal_x ]
  20++D4EE              ;                       = [ [x y z] . roofv + normal_y ]
  21++D4EE              ;                         [ [x y z] . nosev + normal_z ]
  22++D4EE              ;
  23++D4EE              ; so
  24++D4EE              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D4EE              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D4EE              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D4EE              ;
  28++D4EE              ; where face is visible if visibility < 0
  29++D4EE              ;
  30++D4EE              ;   so we set XX15 to [x y z] . sidev
  31++D4EE              ;                     [x y z] . roofv
  32++D4EE              ;                     [x y z] . nosev
  33++D4EE              ;
  34++D4EE
  35++D4EE
  36++D4EE
  37++D4EE 3A 73 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D4F1                                      IfAIsZeroGoto .ScaleDone            ;
  38++D4F1 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D4F2 CA 1F D5    >				jp	z, .ScaleDone
  39++D4F5 2A 6C C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D4F8 ED 5B 6F C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D4FC ED 4B 72 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D500 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D502                                      ShiftHLRight1                       ; divide cam position by 2
  43++D502 CB 3C       >			   srl h
  43++D504 CB 1D       >			   rr  l
  44++D506                                      ShiftDERight1                       ;
  44++D506 CB 3A       >			   srl d
  44++D508 CB 1B       >			   rr  e
  45++D50A                                      ShiftBCRight1                       ;
  45++D50A CB 38       >			   srl b
  45++D50C CB 19       >			   rr  c
  46++D50E 78                                   ld      a,b                         ; loop if not scaled down
  47++D50F                                      IfANotZeroGoto .ScaleNormalLoop     ;
  47++D50F FE 00       >				cp	0
  47++D511 C2 00 D5    >				jp	nz,.ScaleNormalLoop
  48++D514 22 6C C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D517 ED 53 6F C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D51B ED 43 72 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D51F FD 7D        .ScaleDone:             ld      a,iyl
  52++D521 32 2C 92                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D524 C9                                   ret
  54++D525
  55++D525              ;;--BackFaceCull:
  56++D525              ;;--;debug:jp debug
  57++D525              ;;--; DEBUG  force for now
  58++D525              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D525              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D525              ;;--;
  61++D525              ;;--; DEBUG
  62++D525              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D525              ;;--                       ; break
  64++D525              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D525              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D525              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D525              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D525              ;;--
  69++D525              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D525              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D525              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D525              ;;--                        call    ScaleDrawcam
  73++D525              ;;--                        call    CopyDrawCamToScaled
  74++D525              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D525              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D525              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D525              ;;--                        ld      (varV),hl
  78++D525              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D525              ;;--                        srl     a                                                       ;
  80++D525              ;;--                        srl     a                                                       ;
  81++D525              ;;--                        ld      b,a                                                     ;
  82++D525              ;;--                        xor     a
  83++D525              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D525              ;;--ProcessNormalsLoop:     push    hl
  85++D525              ;;--                        push    bc
  86++D525              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D525              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D525              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D525              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D525              ;;--                        jp      .FaceVisible
  91++D525              ;;--; This bit needs to be added to force face visible
  92++D525              ;;--.LL87:                  call    CopyFaceToXX12
  93++D525              ;;--                        ld      a,(XX17)
  94++D525              ;;--                        JumpIfALTNusng 4,.LL92
  95++D525              ;;--.LL143:                 call    CopyXX18toXX15
  96++D525              ;;--                        jp      .LL89
  97++D525              ;;--.Ovflw:                 ld      a,(XX18)
  98++D525              ;;--                        srl     a
  99++D525              ;;--                        ld      (XX18),a
 100++D525              ;;--                        ld      a,(XX18+6)
 101++D525              ;;--                        srl     a
 102++D525              ;;--                        ld      (XX18+6),a
 103++D525              ;;--                        ld      a,(XX18+3)
 104++D525              ;;--                        srl     a
 105++D525              ;;--                        ld      (XX18+3),a
 106++D525              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D525              ;;--.LL92:                   ld      b,a
 108++D525              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D525              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D525              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D525              ;;--.LL93                   dec     b
 112++D525              ;;--                        jp      m, .LL94
 113++D525              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D525              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D525              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D525              ;;--                        dec     b
 117++D525              ;;--                        jp      p,.LL93Loop
 118++D525              ;;--; Add normal to XX15
 119++D525              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D525              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D525              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D525              ;;--                        ld      a,(XX18+8)
 123++D525              ;;--                        call    SAEquSRPlusAQ
 124++D525              ;;--                        jp      c,.Ovflw
 125++D525              ;;--                        ld      (UBnkZScaled),a
 126++D525              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D525              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D525              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D525              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D525              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D525              ;;--                        call    SAEquSRPlusAQ
 132++D525              ;;--                        jp      c,.Ovflw
 133++D525              ;;--                        ld      (UBnkXScaled),a
 134++D525              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D525              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D525              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D525              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D525              ;;--                        call    SAEquSRPlusAQ
 139++D525              ;;--                        jp      c,.Ovflw
 140++D525              ;;--                        ld      (UBnkYScaled),a
 141++D525              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D525              ;;--; calculate dot product:
 143++D525              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D525              ;;--                        ld      a,(UBnkXScaled)
 145++D525              ;;--                        call    AequAmulQdiv256
 146++D525              ;;--                        ld      (varT),a
 147++D525              ;;--                        ld      a,(UBnkXX12xSign)
 148++D525              ;;--                        ld      hl,UBnkXScaledSign
 149++D525              ;;--                        xor     (hl)
 150++D525              ;;--                        ld      (varS),a
 151++D525              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D525              ;;--                        ld      a,(UBnkYScaled)
 153++D525              ;;--                        call    AequAmulQdiv256
 154++D525              ;;--                        ld      (varQ),a
 155++D525              ;;--                        ldCopyByte  varT,varR
 156++D525              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D525              ;;--                        ld      hl, UBnkYScaledSign
 158++D525              ;;--                        xor     (hl)
 159++D525              ;;--                        call    SAEquSRPlusAQ
 160++D525              ;;--                        ld      (varT),a
 161++D525              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D525              ;;--                        ld      a,  (UBnkZScaled)
 163++D525              ;;--                        call    AequAmulQdiv256
 164++D525              ;;--                        ld      (varQ),a
 165++D525              ;;--                        ldCopyByte  varT, varR
 166++D525              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D525              ;;--                        ld      hl, UBnkXX12zSign
 168++D525              ;;--                        xor     (hl)
 169++D525              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D525              ;;--                        test    $80
 171++D525              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D525              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D525              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D525              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D525              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D525              ;;--                        call        SetFaceAVisible
 177++D525              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D525              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D525              ;;--                        pop         bc
 180++D525              ;;--                        pop         hl                      ; get normal data pointer back
 181++D525              ;;--                        ld          a,4
 182++D525              ;;--                        add         hl,a                    ; move to next normal entry
 183++D525              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D525              ;;--                        dec         b
 185++D525              ;;--                        jp          nz,ProcessNormalsLoop
 186++D525              ;;--                        ret
 187++D525
 188++D525
 189++D525
 190++D525
 191++D525              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D525              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D525              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D525              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D525              ;;;;;                        test    $80
 196++D525              ;;;;;                        jp      nz, FaceVisible
 197++D525              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D525              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D525              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D525              ;;;;;                        IfAIsZeroGoto .ScaleDone            ;
 201++D525              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D525              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D525              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D525              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D525              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D525              ;;;;;                        ShiftDERight1                       ;
 207++D525              ;;;;;                        ShiftBCRight1                       ;
 208++D525              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D525              ;;;;;                        IfANotZeroGoto .ScaleNormalLoop     ;
 210++D525              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D525              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D525              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D525              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D525              ;;;;;.ScaleDone:             ld      a,iyl
 215++D525              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D525              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D525              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D525              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D525              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D525              ;;;;;
 221++D525              ;;;;;
 222++D525              ;;;;;
 223++D525              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D525              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D525              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D525              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D525              ;;;;;                        ld      (varV),hl
 228++D525              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D525              ;;;;;                        srl     a                                                       ;
 230++D525              ;;;;;                        srl     a                                                       ;
 231++D525              ;;;;;                        ld      b,a                                                     ;
 232++D525              ;;;;;                        xor     a
 233++D525              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D525              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D525              ;;;;;                        push    bc
 236++D525              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D525              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D525              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D525              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D525              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D525              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D525              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D525              ;;;;;                        jp      .LL89
 244++D525              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D525              ;;;;;                        srl     a
 246++D525              ;;;;;                        ld      (XX18),a
 247++D525              ;;;;;                        ld      a,(XX18+6)
 248++D525              ;;;;;                        srl     a
 249++D525              ;;;;;                        ld      (XX18+6),a
 250++D525              ;;;;;                        ld      a,(XX18+3)
 251++D525              ;;;;;                        srl     a
 252++D525              ;;;;;                        ld      (XX18+3),a
 253++D525              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D525              ;;;;;.LL92:                  ld      b,a
 255++D525              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D525              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D525              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D525              ;;;;;.LL93                   dec     b
 259++D525              ;;;;;                        jp      m, .LL94
 260++D525              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D525              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D525              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D525              ;;;;;                        dec     b
 264++D525              ;;;;;                        jp      p,.LL93Loop
 265++D525              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D525              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D525              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D525              ;;;;;                        ld      a,(XX18+8)
 269++D525              ;;;;;                        call    SAEquSRPlusAQ
 270++D525              ;;;;;                        jp      c,.Ovflw
 271++D525              ;;;;;                        ld      (UBnkZScaled),a
 272++D525              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D525              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D525              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D525              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D525              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D525              ;;;;;                        call    SAEquSRPlusAQ
 278++D525              ;;;;;                        jp      c,.Ovflw
 279++D525              ;;;;;                        ld      (UBnkXScaled),a
 280++D525              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D525              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D525              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D525              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D525              ;;;;;                        call    SAEquSRPlusAQ
 285++D525              ;;;;;                        jp      c,.Ovflw
 286++D525              ;;;;;                        ld      (UBnkYScaled),a
 287++D525              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D525              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D525              ;;;;;                        ld      a,(UBnkXScaled)
 290++D525              ;;;;;                        call    AequAmulQdiv256
 291++D525              ;;;;;                        ld      (varT),a
 292++D525              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D525              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D525              ;;;;;                        xor     (hl)
 295++D525              ;;;;;                        ld      (varS),a
 296++D525              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D525              ;;;;;                        ld      a,(UBnkYScaled)
 298++D525              ;;;;;                        call    AequAmulQdiv256
 299++D525              ;;;;;                        ld      (varQ),a
 300++D525              ;;;;;                        ldCopyByte  varT,varR
 301++D525              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D525              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D525              ;;;;;                        xor     (hl)
 304++D525              ;;;;;                        call    SAEquSRPlusAQ
 305++D525              ;;;;;                        ld      (varT),a
 306++D525              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D525              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D525              ;;;;;                        call    AequAmulQdiv256
 309++D525              ;;;;;                        ld      (varQ),a
 310++D525              ;;;;;                        ldCopyByte  varT, varR
 311++D525              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D525              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D525              ;;;;;                        xor     (hl)
 314++D525              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D525              ;;;;;                        test    $80
 316++D525              ;;;;;                        jr      nz,.FaceVisible
 317++D525              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D525              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D525              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D525              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D525              ;;;;;                        call    SetFaceAVisible
 322++D525              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D525              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D525              ;;;;;                        pop         bc
 325++D525              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D525              ;;;;;                        ld          a,4
 327++D525              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D525              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D525              ;;;;;                        dec         b
 330++D525              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D525              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D525              ;;;;;
 333++D525 00           XX4Distance             DB      0
 334++D526
 335++D526 3A 14 C0     CheckDistance:          ld      a,(UBnKzsgn)                 ; Is the ship behind us
 336++D529 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; .
 337++D52B 20 37                                jr      nz,.ShipNoDraw               ; .
 338++D52D 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)
 339++D530 7C                                   ld      a,h
 340++D531                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 340++D531 FE C0       >                        cp     ShipMaxDistance
 340++D533 D2 64 D5    >                        jp		nc,.ShipNoDraw
 341++D536 ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)
 342++D53A CD 3F A3                             call    compare16HLDE
 343++D53D 38 25                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 344++D53F ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)
 345++D543 CD 3F A3                             call    compare16HLDE
 346++D546 38 1C                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 347++D548              .CalculateXX4:           ShiftHLRight1                       ; hl = z pos / 8
 347++D548 CB 3C       >			   srl h
 347++D54A CB 1D       >			   rr  l
 348++D54C                                      ShiftHLRight1                       ; .
 348++D54C CB 3C       >			   srl h
 348++D54E CB 1D       >			   rr  l
 349++D550                                      ShiftHLRight1                       ; .
 349++D550 CB 3C       >			   srl h
 349++D552 CB 1D       >			   rr  l
 350++D554 7C                                   ld      a,h
 351++D555 CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 352++D557              .DrawAsDotCheck:        ;jr      z,.ShipIsADot
 353++D557                                      ; Check visbility distance
 354++D557 7D           .SetXX4Dist:            ld      a,l
 355++D558 1F                                   rra                                 ; l may have had bit 0 of h carried in
 356++D559 CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 357++D55B CB 3F                                srl     a
 358++D55D CB 3F                                srl     a
 359++D55F 32 25 D5                             ld      (XX4Distance),a             ; XX4 = "all faces" distance
 360++D562                                      ClearCarryFlag
 360++D562 B7          >                    or a
 361++D563 C9                                   ret
 362++D564              .ShipNoDraw:            SetCarryFlag                        ; ship is behind so do not draw
 362++D564 37          >                    scf
 363++D565 C9                                   ret
 364++D566
 365++D566              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 365++D566 3A 0E C3    >                    ld   a,(FaceCtX4Addr)
 365++D569 A7          >                    and a
 365++D56A C8          >                    ret    z
 366++D56B                                     ; break
 367++D56B CD C1 CF                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 368++D56E CD 33 8A                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 369++D571 CD 77 D2                             call    LoadCraftToCamera           ; XX18 = camera
 370++D574                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 371++D574 3A 14 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 372++D577 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 373++D579              ; By this point XX18 = scaled draw cam and iyl = scale factor
 374++D579 CD EE D4                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 375++D57C CD 90 D2                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 376++D57F CD 8A 89     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 377++D582 CD 08 D2                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 378++D585 21 F6 C8     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 379++D588 22 CD 91                             ld      (varV),hl
 380++D58B 3A 0E C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 381++D58E CB 3F                                srl     a                                                       ;
 382++D590 CB 3F                                srl     a                                                       ;
 383++D592 47                                   ld      b,a                                                     ;
 384++D593 AF                                   xor     a
 385++D594 32 ED D4                             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 386++D597 E5           .ProcessNormalsLoop:    push    hl
 387++D598 C5                                   push    bc
 388++D599 7E           .LL86:                  ld      a,(hl)                                                  ; Get Face sign and visibility distance byte
 389++D59A E6 1F                                and     $1F                                                     ; if normal visibility range  < XX4
 390++D59C E5                                   push    hl
 391++D59D 21 25 D5                             ld      hl,XX4Distance
 392++D5A0 BE                                   cp      (hl)
 393++D5A1 E1                                   pop     hl
 394++D5A2 DA E7 D6                             jp      c,.FaceVisible                       ; then we always draw
 395++D5A5              ; This bit needs to be added to force face visible
 396++D5A5 CD 72 D4     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 397++D5A8 3A 2C 92                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 398++D5AB 47                                   ld      b,a
 399++D5AC                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 399++D5AC FE 04       >                        cp      4
 399++D5AE DA E9 D5    >                        jp		c, .ScaleNormByXX17
 400++D5B1 CD 52 D2     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 401++D5B4 C3 78 D6                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 402++D5B7 3A 6C C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 403++D5BA CB 3F                                srl     a                           ; which is held in XX18
 404++D5BC 32 6C C0                             ld      (UBnkDrawCam0xLo),a         ; .
 405++D5BF 3A 72 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 406++D5C2 CB 3F                                srl     a                           ; .
 407++D5C4 32 72 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 408++D5C7 3A 6F C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 409++D5CA CB 3F                                srl     a                           ; .
 410++D5CC 32 6F C0                             ld      (UBnkDrawCam0yLo),a        ; .
 411++D5CF 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 412++D5D1                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 412++D5D1 3A 78 C0    >                    ld      a,(UBnkXScaled)
 412++D5D4 CB 3F       >                    srl     a
 412++D5D6 32 78 C0    >                    ld      (UBnkXScaled),a
 413++D5D9                                      ShiftMem8Right1 UBnkYScaled         ;
 413++D5D9 3A 7A C0    >                    ld      a,(UBnkYScaled)
 413++D5DC CB 3F       >                    srl     a
 413++D5DE 32 7A C0    >                    ld      (UBnkYScaled),a
 414++D5E1                                      ShiftMem8Right1 UBnkZScaled         ;
 414++D5E1 3A 7C C0    >                    ld      a,(UBnkZScaled)
 414++D5E4 CB 3F       >                    srl     a
 414++D5E6 32 7C C0    >                    ld      (UBnkZScaled),a
 415++D5E9              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 416++D5E9              .ScaleNormByXX17:       ;ld      b,a
 417++D5E9 CD 2D D2                             call    CopyXX12toXX15
 418++D5EC 05           .LL93                   dec     b
 419++D5ED FA 0C D6                             jp      m, .ScaledNorm
 420++D5F0              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 420++D5F0 3A 78 C0    >                    ld      a,(UBnkXScaled)
 420++D5F3 CB 3F       >                    srl     a
 420++D5F5 32 78 C0    >                    ld      (UBnkXScaled),a
 421++D5F8                                      ShiftMem8Right1 UBnkYScaled        ;
 421++D5F8 3A 7A C0    >                    ld      a,(UBnkYScaled)
 421++D5FB CB 3F       >                    srl     a
 421++D5FD 32 7A C0    >                    ld      (UBnkYScaled),a
 422++D600                                      ShiftMem8Right1 UBnkZScaled        ;
 422++D600 3A 7C C0    >                    ld      a,(UBnkZScaled)
 422++D603 CB 3F       >                    srl     a
 422++D605 32 7C C0    >                    ld      (UBnkZScaled),a
 423++D608 05                                   dec     b                          ;
 424++D609 F2 F0 D5                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 425++D60C              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 426++D60C              ; Add normal to XX15
 427++D60C              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 428++D60C              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 429++D60C              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 430++D60C              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 431++D60C              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 431++D60C 3A 7C C0    >               ld       a,(UBnkZScaled)
 431++D60F 32 26 92    >               ld       (varR),a
 432++D612                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 432++D612 3A 83 C0    >               ld       a,(UBnkXX12zSign)
 432++D615 32 27 92    >               ld       (varS),a
 433++D618                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 433++D618 3A 72 C0    >               ld       a,(UBnkDrawCam0zLo)
 433++D61B 32 25 92    >               ld       (varQ),a
 434++D61E 3A 74 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 435++D621 CD 5C A6                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 436++D624 DA B7 D5                             jp      c,.Ovflw
 437++D627 32 7C C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 438++D62A                                      ldCopyByte  varS, UBnkZScaledSign   ;
 438++D62A 3A 27 92    >               ld       a,(varS)
 438++D62D 32 7D C0    >               ld       (UBnkZScaledSign),a
 439++D630                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 439++D630 3A 78 C0    >               ld       a,(UBnkXScaled)
 439++D633 32 26 92    >               ld       (varR),a
 440++D636                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 440++D636 3A 7F C0    >               ld       a,(UBnkXX12xSign)
 440++D639 32 27 92    >               ld       (varS),a
 441++D63C                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 441++D63C 3A 6C C0    >               ld       a,(UBnkDrawCam0xLo)
 441++D63F 32 25 92    >               ld       (varQ),a
 442++D642 3A 6E C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 443++D645 CD 5C A6                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 444++D648 DA B7 D5                             jp      c,.Ovflw
 445++D64B 32 78 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 446++D64E                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 446++D64E 3A 27 92    >               ld       a,(varS)
 446++D651 32 79 C0    >               ld       (UBnkXScaledSign),a
 447++D654                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 447++D654 3A 7A C0    >               ld       a,(UBnkYScaled)
 447++D657 32 26 92    >               ld       (varR),a
 448++D65A                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 448++D65A 3A 81 C0    >               ld       a,(UBnkXX12ySign)
 448++D65D 32 27 92    >               ld       (varS),a
 449++D660                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 449++D660 3A 6F C0    >               ld       a,(UBnkDrawCam0yLo)
 449++D663 32 25 92    >               ld       (varQ),a
 450++D666 3A 71 C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 451++D669 CD 5C A6                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 452++D66C DA B7 D5                             jp      c,.Ovflw                    ; .
 453++D66F 32 7A C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 454++D672                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 454++D672 3A 27 92    >               ld       a,(varS)
 454++D675 32 7B C0    >               ld       (UBnkYScaledSign),a
 455++D678              ; calculate dot product LL89
 456++D678              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 456++D678 3A 7E C0    >               ld       a,(UBnkXX12xLo)
 456++D67B 32 25 92    >               ld       (varQ),a
 457++D67E 3A 78 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 458++D681 CD C8 A5                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 459++D684 32 43 92                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 460++D687 3A 7F C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 461++D68A 21 79 C0                             ld      hl,UBnkXScaledSign          ; .
 462++D68D AE                                   xor     (hl)                        ; .
 463++D68E 32 27 92                             ld      (varS),a                    ; .
 464++D691                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 464++D691 3A 80 C0    >               ld       a,(UBnkXX12yLo)
 464++D694 32 25 92    >               ld       (varQ),a
 465++D697 3A 7A C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 466++D69A CD C8 A5                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 467++D69D 32 25 92                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 468++D6A0                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 468++D6A0 3A 43 92    >               ld       a,(varT)
 468++D6A3 32 26 92    >               ld       (varR),a
 469++D6A6 3A 81 C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 470++D6A9 21 7B C0                             ld      hl, UBnkYScaledSign         ; .
 471++D6AC AE                                   xor     (hl)                        ; .
 472++D6AD CD 5C A6                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 473++D6B0 32 43 92                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 474++D6B3                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 474++D6B3 3A 82 C0    >               ld       a,(UBnkXX12zLo)
 474++D6B6 32 25 92    >               ld       (varQ),a
 475++D6B9 3A 7C C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 476++D6BC CD C8 A5                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 477++D6BF 32 25 92                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 478++D6C2                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 478++D6C2 3A 43 92    >               ld       a,(varT)
 478++D6C5 32 26 92    >               ld       (varR),a
 479++D6C8 3A 7D C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 480++D6CB 21 83 C0                             ld      hl, UBnkXX12zSign           ; .
 481++D6CE AE                                   xor     (hl)                        ; .
 482++D6CF CD 5C A6                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 483++D6D2 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 484++D6D4 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 485++D6D6 3A 27 92                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 486++D6D9 ED 27 80                             test    $80                         ; this should test S not A
 487++D6DC 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 488++D6DE 3A ED D4     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 489++D6E1 CD D5 D0                             call        SetFaceAHidden                                      ;           set face invisible
 490++D6E4 C3 ED D6                             jp          .ProcessNormalLoopEnd                                ;        end if
 491++D6E7 3A ED D4     .FaceVisible:            ld          a,(CurrentNormIdx)
 492++D6EA CD CC D0                             call        SetFaceAVisible
 493++D6ED 21 ED D4     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 494++D6F0 34                                   inc         (hl)                    ; move index pointer up by one
 495++D6F1 C1                                   pop         bc
 496++D6F2 E1                                   pop         hl                      ; get normal data pointer back
 497++D6F3 3E 04                                ld          a,4
 498++D6F5 ED 31                                add         hl,a                    ; move to next normal entry
 499++D6F7 22 CD 91                             ld          (varV),hl               ; save as we need it again
 500++D6FA 05                                   dec         b
 501++D6FB C2 97 D5                             jp          nz,.ProcessNormalsLoop
 502++D6FE C9                                   ret
 503++D6FF
# file closed: ././ModelRender/BackfaceCull.asm
 925+ D6FF              ;--------------------------------------------------------------------------------------------------------
 926+ D6FF              ; Process edges
 927+ D6FF              ; .....................................................
 928+ D6FF              TransposeNodeVal:   MACRO arg0?
 929+ D6FF ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 930+ D6FF ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 931+ D6FF ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 932+ D6FF ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 933+ D6FF ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 934+ D6FF ~            NodeXPositive\1
 934+ D6FF ~
 935+ D6FF ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 936+ D6FF ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 937+ D6FF ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 938+ D6FF ~                    ld          h,0                                 ; but we don;t want the sign
 939+ D6FF ~                    add         hl,bc                               ; its a 16 bit add
 940+ D6FF ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 941+ D6FF ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 942+ D6FF ~                    ld          (UbnkXPointSign),a
 943+ D6FF ~                    jp          FinishedThisNode\1
 944+ D6FF ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 945+ D6FF ~            NodeNegative\1
 945+ D6FF ~
 946+ D6FF ~            LL52\1
 946+ D6FF ~                                                              ;
 947+ D6FF ~                    ld          hl,(UBnK\0lo)                       ; Coord
 948+ D6FF ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 949+ D6FF ~                    ld          b,0                                 ; XX12 lo byte only
 950+ D6FF ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 951+ D6FF ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 952+ D6FF ~            NodeXNegSignChange\1
 952+ D6FF ~
 953+ D6FF ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 954+ D6FF ~                    call        negate16hl                          ; Convert back to positive and flip sign
 955+ D6FF ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 956+ D6FF ~                    xor         $80                                 ; Flip bit 7
 957+ D6FF ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 958+ D6FF ~            SetAndMop\1
 958+ D6FF ~
 959+ D6FF ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 960+ D6FF ~            FinishedThisNode\1
 961+ D6FF                                  ENDM
 962+ D6FF
 963+ D6FF              ;------------------------------------------------------------------------------------------------------------------------------
 964+ D6FF              CopyByteAtNextHL:   MACRO targetaddr
 965+ D6FF ~                                inc         hl                                  ; vertex byte#1
 966+ D6FF ~                                ld          a,(hl)                              ;
 967+ D6FF ~                                ld          (targetaddr),a                     ; XX15+2 = (V),Y
 968+ D6FF                                  ENDM
 969+ D6FF              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 970+ D6FF
 971+ D6FF              TransposeXX12NodeToXX15:
 972+ D6FF                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 972+ D6FF 3A 0E C0    >               ld       a,(UBnKxsgn)
 972+ D702 32 7A C0    >               ld       (UbnkXPointSign),a
 973+ D705 ED 4B 7E C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 974+ D709 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 975+ D70A FA 20 D7             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 976+ D70D              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 977+ D70D              NodeXPositiveX:
 978+ D70D 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 979+ D70E 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 980+ D710 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 981+ D713 26 00                ld          h,0                                 ; but we don;t want the sign
 982+ D715 09                   add         hl,bc                               ; its a 16 bit add
 983+ D716 22 78 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 984+ D719 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 985+ D71A 32 7A C0             ld          (UbnkXPointSign),a
 986+ D71D C3 3C D7             jp          FinishedThisNodeX
 987+ D720              ; If we get here then _sign and vertv_ have different signs so do subtract
 988+ D720              NodeNegativeX:
 989+ D720              LL52X:                                                 ;
 990+ D720 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
 991+ D723 ED 4B 7E C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 992+ D727 06 00                ld          b,0                                 ; XX12 lo byte only
 993+ D729 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 994+ D72B F2 39 D7             jp          p,SetAndMopX                       ; if result is positive skip to write back
 995+ D72E              NodeXNegSignChangeX:
 996+ D72E              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 997+ D72E CD 55 A3             call        negate16hl                          ; Convert back to positive and flip sign
 998+ D731 3A 7A C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 999+ D734 EE 80                xor         $80                                 ; Flip bit 7
1000+ D736 32 7A C0             ld          (UbnkXPointSign),a                 ; XX15+2
1001+ D739              SetAndMopX:
1002+ D739 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
1003+ D73C              FinishedThisNodeX:
1004+ D73C
1005+ D73C              LL53:
1006+ D73C
1007+ D73C                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1007+ D73C 3A 11 C0    >               ld       a,(UBnKysgn)
1007+ D73F 32 7D C0    >               ld       (UbnkYPointSign),a
1008+ D742 ED 4B 80 C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1009+ D746 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1010+ D747 FA 5D D7             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1011+ D74A              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1012+ D74A              NodeXPositiveY:
1013+ D74A 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1014+ D74B 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1015+ D74D 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1016+ D750 26 00                ld          h,0                                 ; but we don;t want the sign
1017+ D752 09                   add         hl,bc                               ; its a 16 bit add
1018+ D753 22 7B C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1019+ D756 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1020+ D757 32 7A C0             ld          (UbnkXPointSign),a
1021+ D75A C3 79 D7             jp          FinishedThisNodeY
1022+ D75D              ; If we get here then _sign and vertv_ have different signs so do subtract
1023+ D75D              NodeNegativeY:
1024+ D75D              LL52Y:                                                 ;
1025+ D75D 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
1026+ D760 ED 4B 80 C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1027+ D764 06 00                ld          b,0                                 ; XX12 lo byte only
1028+ D766 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1029+ D768 F2 76 D7             jp          p,SetAndMopY                       ; if result is positive skip to write back
1030+ D76B              NodeXNegSignChangeY:
1031+ D76B              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1032+ D76B CD 55 A3             call        negate16hl                          ; Convert back to positive and flip sign
1033+ D76E 3A 7D C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1034+ D771 EE 80                xor         $80                                 ; Flip bit 7
1035+ D773 32 7D C0             ld          (UbnkYPointSign),a                 ; XX15+2
1036+ D776              SetAndMopY:
1037+ D776 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
1038+ D779              FinishedThisNodeY:
1039+ D779
1040+ D779
1041+ D779              TransposeZ:
1042+ D779              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1043+ D779 3A 83 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1044+ D77C                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1044+ D77C CB 7F       >                        bit 	7,a
1044+ D77E C2 92 D7    >                        jp      nz,NegativeNodeZ
1045+ D781 3A 82 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1046+ D784 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1047+ D787 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1048+ D789 7D                   ld          a,l
1049+ D78A 32 43 92             ld          (varT),a                            ;                                                                           ;;;
1050+ D78D 7C                   ld          a,h
1051+ D78E 32 24 92             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1052+ D791 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1053+ D792              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1054+ D792              NegativeNodeZ:
1055+ D792              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1056+ D792 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1057+ D795 ED 4B 82 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1058+ D799 06 00                ld          b,0                                 ; upper byte will be garbage
1059+ D79B                      ClearCarryFlag
1059+ D79B B7          >                    or a
1060+ D79C ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1061+ D79E 7D                   ld          a,l
1062+ D79F 32 43 92             ld          (varT),a                            ; t = result low
1063+ D7A2 7C                   ld          a,h
1064+ D7A3 32 24 92             ld          (varU),a                            ; u = result high
1065+ D7A6 E2 B3 D7             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1066+ D7A9              LL56Overflow:
1067+ D7A9 FE 00                cp          0                                   ; is varU 0?
1068+ D7AB 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1069+ D7AD 3A 43 92             ld          a,(varT)                            ; T \ restore z lo
1070+ D7B0                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1070+ D7B0 FE 04       >                    cp    4
1070+ D7B2 D0          >                    ret	 nc
1071+ D7B3              MakeNodeClose:
1072+ D7B3              LL140:                                                  ; else make node close
1073+ D7B3 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1074+ D7B4 32 24 92             ld          (varU),a                            ; U
1075+ D7B7 3E 04                ld          a,4                                 ; lo
1076+ D7B9 32 43 92             ld          (varT),a                            ; T
1077+ D7BC C9                   ret
1078+ D7BD              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1079+ D7BD              ProcessVisibleNode:
1080+ D7BD              RotateNode:                                                                                                                         ;;;
1081+ D7BD CD D7 D1             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1082+ D7C0              LL52LL53LL54LL55
1083+ D7C0              TransposeNode:
1084+ D7C0 CD FF D6             call        TransposeXX12NodeToXX15
1085+ D7C3
1086+ D7C3              ; ......................................................                                                         ;;;
1087+ D7C3              NodeAdditionsDone:
1088+ D7C3              Scale16BitTo8Bit:
1089+ D7C3              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1090+ D7C3 3A 24 92             ld          a,(varU)                            ; U \ z hi
1091+ D7C6 21 79 C0             ld          hl,UbnkXPointHi
1092+ D7C9 B6                   or          (hl)                                ; XX15+1    \ x hi
1093+ D7CA 21 7C C0             ld          hl,UbnkYPointHi
1094+ D7CD B6                   or          (hl)                                ; XX15+4    \ y hi
1095+ D7CE              AreXYZHiAllZero:
1096+ D7CE 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1097+ D7D0              DivideXYZBy2:
1098+ D7D0                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1098+ D7D0 2A 78 C0    >                    ld    hl,(UbnkXPoint)
1098+ D7D3 CB 3C       >                    srl   h
1098+ D7D5 CB 1D       >                    rr    l
1098+ D7D7 22 78 C0    >                    ld    (UbnkXPoint),hl
1099+ D7DA                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1099+ D7DA 2A 7B C0    >                    ld    hl,(UbnkYPoint)
1099+ D7DD CB 3C       >                    srl   h
1099+ D7DF CB 1D       >                    rr    l
1099+ D7E1 22 7B C0    >                    ld    (UbnkYPoint),hl
1100+ D7E4 3A 24 92             ld          a,(varU)                            ; U \ z hi
1101+ D7E7 67                   ld          h,a
1102+ D7E8 3A 43 92             ld          a,(varT)                            ; T \ z lo
1103+ D7EB 6F                   ld          l,a
1104+ D7EC                      ShiftHLRight1
1104+ D7EC CB 3C       >			   srl h
1104+ D7EE CB 1D       >			   rr  l
1105+ D7F0 7C                   ld          a,h
1106+ D7F1 32 24 92             ld          (varU),a
1107+ D7F4 7D                   ld          a,l
1108+ D7F5 32 43 92             ld          (varT),a                            ; T \ z lo
1109+ D7F8 C3 C3 D7             jp          Scale16BitTo8Bit                    ; loop U
1110+ D7FB              NodeScalingDone:
1111+ D7FB              LL60:                                                   ; hi U rolled to 0, exited loop above.
1112+ D7FB              ProjectNodeToScreen:
1113+ D7FB                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1113+ D7FB 3A 43 92    >               ld       a,(varT)
1113+ D7FE 32 25 92    >               ld       (varQ),a
1114+ D801 3A 78 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1115+ D804 21 25 92             ld          hl,varQ
1116+ D807 BE                   cp          (hl)                                ; Q
1117+ D808                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1117+ D808 DA 11 D8    >                        jp		c,DoSmallAngle
1118+ D80B CD 63 A7             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1119+ D80E C3 19 D8             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1120+ D811              DoSmallAngle:                                           ; small x angle
1121+ D811              LL69:
1122+ D811              ; TODO check if we need to retain BC as this trashes it
1123+ D811              ;Input: BC = Dividend, DE = Divisor, HL = 0
1124+ D811              ;Output: BC = Quotient, HL = Remainder
1125+ D811 47                   ld      b,a
1126+ D812 CD 9E A1             call    DIV16UNDOC
1127+ D815 79                   ld      a,c
1128+ D816 32 26 92             ld      (varR),a
1129+ D819               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1130+ D819              SkipSmallAngle:
1131+ D819              ScaleX:
1132+ D819              LL65:                                                   ; both continue for scaling based on z
1133+ D819 3A 7A C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1134+ D81C                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1134+ D81C CB 7F       >                        bit 	7,a
1134+ D81E C2 31 D8    >                        jp      nz,NegativeXPoint
1135+ D821              ; ......................................................
1136+ D821              PositiveXPoint:
1137+ D821 3A 26 92             ld          a,(varR)
1138+ D824 6F                   ld          l,a
1139+ D825 3A 24 92             ld          a,(varU)
1140+ D828 67                   ld          h,a
1141+ D829 3E 80                ld          a,ScreenCenterX
1142+ D82B ED 31                add         hl,a
1143+ D82D EB                   ex          de,hl
1144+ D82E C3 41 D8             jp          StoreXPoint
1145+ D831              NegativeXPoint:
1146+ D831              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1147+ D831 3A 26 92             ld          a,(varR)
1148+ D834 6F                   ld          l,a
1149+ D835 3A 24 92             ld          a,(varU)
1150+ D838 67                   ld          h,a
1151+ D839 0E 80                ld          c,ScreenCenterX
1152+ D83B 06 00                ld          b,0
1153+ D83D                      ClearCarryFlag
1153+ D83D B7          >                    or a
1154+ D83E ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1155+ D840 EB                   ex          de,hl
1156+ D841              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1157+ D841 FD 73 00             ld          (iy+0),e                            ; Update X Point
1158+ D844 FD 72 01             ld          (iy+1),d                            ; Update X Point
1159+ D847 FD 23                inc         iy
1160+ D849 FD 23                inc         iy
1161+ D84B              ; ......................................................
1162+ D84B              LL66:
1163+ D84B              ProcessYPoint:
1164+ D84B AF                   xor         a                                   ; y hi = 0
1165+ D84C 32 24 92             ld          (varU),a                            ; U
1166+ D84F                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1166+ D84F 3A 43 92    >               ld       a,(varT)
1166+ D852 32 25 92    >               ld       (varQ),a
1167+ D855 3A 7B C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1168+ D858 21 25 92             ld          hl,varQ
1169+ D85B BE                   cp          (hl)                                ; Q
1170+ D85C                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1170+ D85C DA 65 D8    >                        jp		c,SmallYHop
1171+ D85F              SmallYPoint:
1172+ D85F CD 63 A7             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1173+ D862 C3 68 D8             jp          SkipYScale                          ; LL68 hop over small y yangle
1174+ D865              SmallYHop:
1175+ D865              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1176+ D865 CD 40 A7             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1177+ D868              SkipYScale:
1178+ D868              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1179+ D868 3A 7D C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1180+ D86B CB 7F                bit         7,a
1181+ D86D C2 80 D8             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1182+ D870              PositiveYPoint:
1183+ D870 3A 26 92             ld          a,(varR)
1184+ D873 6F                   ld          l,a
1185+ D874 3A 24 92             ld          a,(varU)
1186+ D877 67                   ld          h,a
1187+ D878 3E 60                ld          a,ScreenHeightHalf
1188+ D87A ED 31                add         hl,a
1189+ D87C EB                   ex          de,hl
1190+ D87D C3 90 D8             jp          LL50
1191+ D880              NegativeYPoint:
1192+ D880              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1193+ D880 3A 26 92             ld          a,(varR)
1194+ D883 6F                   ld          l,a
1195+ D884 3A 24 92             ld          a,(varU)
1196+ D887 67                   ld          h,a
1197+ D888 0E 60                ld          c,ScreenHeightHalf
1198+ D88A 06 00                ld          b,0
1199+ D88C                      ClearCarryFlag
1199+ D88C B7          >                    or a
1200+ D88D ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1201+ D88F EB                   ex          de,hl
1202+ D890              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1203+ D890 FD 73 00             ld          (iy+0),e                            ; Update X Point
1204+ D893 FD 72 01             ld          (iy+1),d                            ; Update X Point
1205+ D896 FD 23                inc         iy
1206+ D898 FD 23                inc         iy
1207+ D89A C9                   ret
1208+ D89B              ;--------------------------------------------------------------------------------------------------------
1209+ D89B              ;;;     Byte 0 = X magnitide with origin at middle of ship
1210+ D89B              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1211+ D89B              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1212+ D89B              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1213+ D89B              CopyNodeToXX15:
1214+ D89B                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1214+ D89B 7E          >               ld       a,(hl)
1214+ D89C 32 78 C0    >               ld       (UBnkXScaled),a
1215+ D89F 23                   inc         hl
1216+ D8A0                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1216+ D8A0 7E          >               ld       a,(hl)
1216+ D8A1 32 7A C0    >               ld       (UBnkYScaled),a
1217+ D8A4 23                   inc         hl
1218+ D8A5                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1218+ D8A5 7E          >               ld       a,(hl)
1218+ D8A6 32 7C C0    >               ld       (UBnkZScaled),a
1219+ D8A9 23                   inc         hl
1220+ D8AA              PopulateXX15SignBits:
1221+ D8AA              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1222+ D8AA 7E                   ld          a,(hl)
1223+ D8AB 4F                   ld          c,a                                 ; copy sign and visibility to c
1224+ D8AC 47                   ld          b,a
1225+ D8AD E6 80                and         $80                                 ; keep high 3 bits
1226+ D8AF 32 79 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1227+ D8B2 78                   ld          a,b
1228+ D8B3 E6 40                and         $40
1229+ D8B5 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1230+ D8B7 32 7B C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1231+ D8BA 78                   ld          a,b
1232+ D8BB E6 20                and         $20
1233+ D8BD CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1234+ D8BF CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1235+ D8C1 32 7D C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1236+ D8C4 79                   ld          a,c                                 ; returns a with visibility sign byte
1237+ D8C5 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1238+ D8C7 32 43 92             ld          (varT),a                            ; and store in varT as its needed later
1239+ D8CA C9                   ret
1240+ D8CB
1241+ D8CB              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1242+ D8CB              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1243+ D8CB              ;..............................................................................................................................
1244+ D8CB              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1245+ D8CB              LL48GetScale:
1246+ D8CB 3A BD 91             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1247+ D8CE 5F                   ld          e,a
1248+ D8CF CD 9B D8             call        CopyNodeToXX15
1249+ D8D2              LL48GetVertices:
1250+ D8D2              LL48GetVertSignAndVisDist:
1251+ D8D2                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1251+ D8D2 BB          >                        cp      e
1251+ D8D3 DA 14 D9    >                        jp		c, NodeIsNotVisible
1252+ D8D6              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1253+ D8D6                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1253+ D8D6 23          >                    inc         hl                                  ; vertex byte#1
1253+ D8D7 7E          >                    ld          a,(hl)                              ;
1253+ D8D8 32 C8 91    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1254+ D8DB 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1255+ D8DC E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1256+ D8DE E5                   push        hl                                  ; we need to save HL                                                        ;;;
1257+ D8DF                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1257+ D8DF 21 A4 C0    >                    ld          hl,UbnkFaceVisArray
1257+ D8E2 ED 31       >                    add         hl,a
1257+ D8E4 7E          >                    ld          a,(hl)
1258+ D8E5 E1                   pop         hl                                  ;                                                                           ;;;
1259+ D8E6                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1259+ D8E6 FE 00       >				cp	0
1259+ D8E8 C2 1A D9    >				jp	nz,NodeIsVisible
1260+ D8EB              CheckFace2:                                                                                                                         ;;;
1261+ D8EB 7A                   ld          a,d                                                                                                             ;;;
1262+ D8EC ED 23                swapnib                                                                                                                     ;;;
1263+ D8EE E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1264+ D8F0                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1264+ D8F0 FE 00       >				cp	0
1264+ D8F2 C2 1A D9    >				jp	nz,NodeIsVisible
1265+ D8F5              CheckFace3:                                                                                                                         ;;;
1266+ D8F5                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1266+ D8F5 23          >                    inc         hl                                  ; vertex byte#1
1266+ D8F6 7E          >                    ld          a,(hl)                              ;
1266+ D8F7 32 C8 91    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1267+ D8FA 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1268+ D8FB E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1269+ D8FD E5                   push        hl                                  ; we need to save HL                                                        ;;;
1270+ D8FE                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1270+ D8FE 21 A4 C0    >                    ld          hl,UbnkFaceVisArray
1270+ D901 ED 31       >                    add         hl,a
1270+ D903 7E          >                    ld          a,(hl)
1271+ D904 E1                   pop         hl                                  ;                                                                           ;;;
1272+ D905                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1272+ D905 FE 00       >				cp	0
1272+ D907 C2 1A D9    >				jp	nz,NodeIsVisible
1273+ D90A              CheckFace4:                                                                                                                         ;;;
1274+ D90A 7A                   ld          a,d                                                                                                             ;;;
1275+ D90B ED 23                swapnib                                                                                                                     ;;;
1276+ D90D E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1277+ D90F                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1277+ D90F FE 00       >				cp	0
1277+ D911 C2 1A D9    >				jp	nz,NodeIsVisible
1278+ D914              NodeIsNotVisible:                                                                                                                   ;;;
1279+ D914 01 04 00             ld          bc,4
1280+ D917 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1281+ D919                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1282+ D919 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1283+ D91A              NodeIsVisible:
1284+ D91A              LL49:
1285+ D91A CD BD D7             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1286+ D91D C9                   ret
1287+ D91E
1288+ D91E
1289+ D91E              ProjectNodeToEye:
1290+ D91E ED 4B 7C C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1291+ D922 79           	ld			a,c                                 ;  so no need for a negative check
1292+ D923 32 25 92     	ld			(varQ),a		                    ; VarQ = z
1293+ D926 3A 78 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1294+ D929 CD 87 A1     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1295+ D92C 3A 79 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1296+ D92F                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1296+ D92F CB 7F       >                        bit 	7,a
1296+ D931 C2 3C D9    >                        jp      nz,EyeNegativeXPoint
1297+ D934              EyePositiveXPoint:									; x was positive result
1298+ D934 2E 80            ld          l,ScreenCenterX						;
1299+ D936 26 00            ld          h,0
1300+ D938 09               add         hl,bc								; hl = Screen Centre + X
1301+ D939 C3 43 D9         jp          EyeStoreXPoint
1302+ D93C              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1303+ D93C 2E 80            ld          l,ScreenCenterX
1304+ D93E 26 00            ld          h,0
1305+ D940                  ClearCarryFlag
1305+ D940 B7          >                    or a
1306+ D941 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1307+ D943              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1308+ D943 EB               ex          de,hl
1309+ D944 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1310+ D947 FD 72 01         ld          (iy+1),d                            ; Update X Point
1311+ D94A              EyeProcessYPoint:
1312+ D94A ED 4B 7C C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1313+ D94E 79           	ld			a,c
1314+ D94F 32 25 92     	ld			(varQ),a
1315+ D952 3A 7A C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1316+ D955 CD 87 A1     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1317+ D958 3A 7B C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1318+ D95B                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1318+ D95B CB 7F       >                        bit 	7,a
1318+ D95D C2 68 D9    >                        jp      nz,EyeNegativeYPoint
1319+ D960              EyePositiveYPoint:									; Y is positive so above the centre line
1320+ D960 2E 60            ld          l,ScreenCenterY
1321+ D962                  ClearCarryFlag
1321+ D962 B7          >                    or a
1322+ D963 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1323+ D965 C3 6D D9         jp          EyeStoreYPoint
1324+ D968              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1325+ D968 2E 60            ld          l,ScreenCenterY
1326+ D96A 26 00            ld          h,0
1327+ D96C 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1328+ D96D              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1329+ D96D EB               ex          de,hl
1330+ D96E FD 73 02         ld          (iy+2),e                            ; Update Y Point
1331+ D971 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1332+ D974 C9               ret
1333+ D975
1334+ D975
1335+ D975
1336+ D975              ; Pitch and roll are 2 phases
1337+ D975              ; 1 - we apply our pitch and roll to the ship position
1338+ D975              ;       x -> x + alpha * (y - alpha * x)
1339+ D975              ;       y -> y - alpha * x - beta * z
1340+ D975              ;       z -> z + beta * (y - alpha * x - beta * z)
1341+ D975              ; which can be simplified as:
1342+ D975              ;       1. K2 = y - alpha * x
1343+ D975              ;       2. z = z + beta * K2
1344+ D975              ;       3. y = K2 - beta * z
1345+ D975              ;       4. x = x + alpha * y
1346+ D975              ; 2 - we apply our patch and roll to the ship orientation
1347+ D975              ;      Roll calculations:
1348+ D975              ;
1349+ D975              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1350+ D975              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1351+ D975              ;      Pitch calculations:
1352+ D975              ;
1353+ D975              ;        nosev_y = nosev_y - beta * nosev_z_hi
1354+ D975              ;        nosev_z = nosev_z + beta * nosev_y_hi
1355+ D975
1356+ D975
1357+ D975
1358+ D975              ; 1> (-a)-(-b)=  if ABS(a)> ABS(B), 1A> (ABS(a)-abs(b))*-1 Else 1B> (ABS(b)-abs(a))
1359+ D975              ; 2> (+a)-(+b)=  if ABS(a) > ABS(B),2A>  ABS(a)- abs (B)   else 2B> (ABS(B) - abs(A) * -1
1360+ D975              ; 3> (-a)-(+b)=  3A> (ABS(a) + ABS(b)) * -1
1361+ D975              ; 4> (+a)-(-b)=  4A> ABS(a) + ABS(b)
1362+ D975              ;AHLequUbnkYminusAHL:    ld      b,a                 ; b =sign of subtraction
1363+ D975              ;                        ex      de,hl               ; de = amount to subtract
1364+ D975              ;                        ld      hl,(UBnKylo)        ; hl = unsigned Y position
1365+ D975              ;                        ld      a,(UBnKysgn)        ; ahl = signed Y corrodinate
1366+ D975              ;                        ld      c,a                 ; we may need the sign later
1367+ D975              ;                        xor     b                   ; now we need to see if signs were different or same
1368+ D975              ;                        JumpIfNegative .SignsDifferent  ; if zer fk==
1369+ D975              ;.SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1370+ D975              ;                        jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1371+ D975              ;.HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1372+ D975              ;                        ld      a,h
1373+ D975              ;                        or      l
1374+ D975              ;                        jr      z,.HLGTDEZero
1375+ D975              ;                        ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1376+ D975              ;                        ret
1377+ D975              ;.HLGTDEZero:            xor     a
1378+ D975              ;                        ret                         ; if the result was zero set sign to zero too
1379+ D975              ;.HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1380+ D975              ;                        sub     hl,de               ;
1381+ D975              ;                        ld      a,h
1382+ D975              ;                        or      l
1383+ D975              ;                        jr      z,.HLLTDEZero
1384+ D975              ;                        ld      a,c
1385+ D975              ;                        xor     $80                 ; flip sign bit to cover 1B> and 2B?
1386+ D975              ;                        ret
1387+ D975              ;.HLLTDEZero:            xor     a
1388+ D975              ;                        ret
1389+ D975              ;.SignsDifferent:        add     hl,de               ; if they are oppos
1390+ D975              ;                        ld      a,h
1391+ D975              ;                        or      l
1392+ D975              ;                        jr      z,.HLLTDEZero
1393+ D975              ;                        ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1394+ D975              ;                        ret
1395+ D975              ;
1396+ D975              ;----------------------------------------------------------------------------------------------------------
1397+ D975              ;AHLequKminusAHL:        ld      b,a                 ; b =sign of subtraction
1398+ D975              ;                        ex      de,hl               ; de = amount to subtract
1399+ D975              ;                        ld      hl,(varKp1)         ; Ahl = K
1400+ D975              ;                        ld      a,(varKp3)          ;
1401+ D975              ;                        ld      c,a                 ; we may need the sign later
1402+ D975              ;                        xor     b                   ; now we need to see if signs were different or same
1403+ D975              ;                        JumpIfNegative .SignsDifferent  ; if zer fk==
1404+ D975              ;.SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1405+ D975              ;                        jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1406+ D975              ;.HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1407+ D975              ;                        ld      a,h
1408+ D975              ;                        or      l
1409+ D975              ;                        jr      z,.HLGTDEZero
1410+ D975              ;                        ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1411+ D975              ;                        ret
1412+ D975              ;.HLGTDEZero:            xor     a
1413+ D975              ;                        ret                         ; if the result was zero set sign to zero too
1414+ D975              ;.HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1415+ D975              ;                        sub     hl,de               ;
1416+ D975              ;                        ld      a,h
1417+ D975              ;                        or      l
1418+ D975              ;                        jr      z,.HLLTDEZero
1419+ D975              ;                        ld      a,c
1420+ D975              ;                        xor     $80                 ; flip sign bit to cover 1B> and 2B?
1421+ D975              ;                        ret
1422+ D975              ;.HLLTDEZero:            xor     a
1423+ D975              ;                        ret
1424+ D975              ;.SignsDifferent:        add     hl,de               ; if they are oppos
1425+ D975              ;                        ld      a,h
1426+ D975              ;                        or      l
1427+ D975              ;                        jr      z,.HLLTDEZero
1428+ D975              ;                        ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1429+ D975              ;                        ret
1430+ D975              ;-------------------------------------------------------------------------------------------------------------
1431+ D975
1432+ D975              ;AHLequUbnkZplusAHL:     ld      b,a                 ; b =sign of subtraction
1433+ D975              ;                        ex      de,hl               ; de = amount to subtract
1434+ D975              ;                        ld      hl,(UBnKzlo)        ; hl = unsigned Y position
1435+ D975              ;                        ld      a,(UBnKzsgn)        ; ahl = signed Y corrodinate
1436+ D975              ;                        ld      c,a                 ; we may need the sign later
1437+ D975              ;                        xor     b                   ; now we need to see if signs were different or same
1438+ D975              ;                        JumpIfNegative .SignsDifferent  ; if zer fk==
1439+ D975              ;.SignsTheSame:          add     hl,de
1440+ D975              ;                        ld      a,h
1441+ D975              ;                        or      l
1442+ D975              ;                        jr      z,.HLGTDEZero
1443+ D975              ;                        ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1444+ D975              ;                        ret
1445+ D975              ;.HLGTDEZero:            xor     a
1446+ D975              ;                        ret                         ; if the result was zero set sign to zero too
1447+ D975              ;.HLLTDEZero:            xor     a
1448+ D975              ;                        ret
1449+ D975              ;.SignsDifferent:        call    compare16HLDE       ; if signs were the saem tehn
1450+ D975              ;                        jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1451+ D975              ;.HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1452+ D975              ;                        ld      a,h
1453+ D975              ;                        or      l
1454+ D975              ;                        jr      z,.HLGTDEZero
1455+ D975              ;                        ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1456+ D975              ;                        ret
1457+ D975              ;.HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1458+ D975              ;                        sub     hl,de               ;
1459+ D975              ;                        ld      a,h
1460+ D975              ;                        or      l
1461+ D975              ;                        jr      z,.HLLTDEZero
1462+ D975              ;                        ld      a,c
1463+ D975              ;                        xor     $80                 ; flip sign bit to cover 1B> and 2B?
1464+ D975              ;                        ret
1465+ D975
1466+ D975
1467+ D975
1468+ D975
1469+ D975                          INCLUDE "./Universe/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/ApplyMyRollAndPitch.asm
   1++D975
   2++D975              ; Full version
   3++D975              ; 1. K2 = y - alpha * x
   4++D975              ; 2. z = z + beta * K2
   5++D975              ; 3. y = K2 - beta * z
   6++D975              ; 4. x = x + alpha * y
   7++D975
   8++D975
   9++D975              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  10++D975 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D975 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  12++D975 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  13++D975 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  14++D975 ~                                    xor $80                             ;
  15++D975 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D975 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  17++D975 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  18++D975 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  19++D975 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++D975 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++D975                                      ENDM
  22++D975
  23++D975              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
  23++D975             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  23++D975 3A E1 91    >               ld       a,(ALPHA)
  23++D978 32 25 92    >               ld       (varQ),a
  23++D97B             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  23++D97B 2A 23 C0    >               ld       hl,(UBnkrotmatNosevY)
  23++D97E 22 26 92    >               ld       (varR),hl
  23++D981             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
  23++D981 3A 21 C0    >               ld       a,(UBnkrotmatNosevX)
  23++D984 32 C8 91    >               ld       (varP),a
  23++D987 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
  23++D98A EE 80       >                        xor $80                             ;
  23++D98C CD C2 9F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  23++D98F ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  23++D993             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
  23++D993 2A 21 C0    >               ld       hl,(UBnkrotmatNosevX)
  23++D996 22 26 92    >               ld       (varR),hl
  23++D999 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  23++D99C CD C2 9F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  23++D99F ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  24++D9A3 C9                                   ret
  25++D9A4              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  25++D9A4             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  25++D9A4 3A E1 91    >               ld       a,(ALPHA)
  25++D9A7 32 25 92    >               ld       (varQ),a
  25++D9AA             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  25++D9AA 2A 17 C0    >               ld       hl,(UBnkrotmatSidevY)
  25++D9AD 22 26 92    >               ld       (varR),hl
  25++D9B0             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  25++D9B0 3A 15 C0    >               ld       a,(UBnkrotmatSidevX)
  25++D9B3 32 C8 91    >               ld       (varP),a
  25++D9B6 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  25++D9B9 EE 80       >                        xor $80                             ;
  25++D9BB CD C2 9F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  25++D9BE ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  25++D9C2             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  25++D9C2 2A 15 C0    >               ld       hl,(UBnkrotmatSidevX)
  25++D9C5 22 26 92    >               ld       (varR),hl
  25++D9C8 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  25++D9CB CD C2 9F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  25++D9CE ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  26++D9D2 C9                                   ret
  27++D9D3              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  27++D9D3             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  27++D9D3 3A E1 91    >               ld       a,(ALPHA)
  27++D9D6 32 25 92    >               ld       (varQ),a
  27++D9D9             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  27++D9D9 2A 1D C0    >               ld       hl,(UBnkrotmatRoofvY)
  27++D9DC 22 26 92    >               ld       (varR),hl
  27++D9DF             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  27++D9DF 3A 1B C0    >               ld       a,(UBnkrotmatRoofvX)
  27++D9E2 32 C8 91    >               ld       (varP),a
  27++D9E5 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  27++D9E8 EE 80       >                        xor $80                             ;
  27++D9EA CD C2 9F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  27++D9ED ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  27++D9F1             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  27++D9F1 2A 1B C0    >               ld       hl,(UBnkrotmatRoofvX)
  27++D9F4 22 26 92    >               ld       (varR),hl
  27++D9F7 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  27++D9FA CD C2 9F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  27++D9FD ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  28++DA01 C9                                   ret
  29++DA02
  30++DA02              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  30++DA02             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  30++DA02 3A D3 91    >               ld       a,(BETA)
  30++DA05 32 25 92    >               ld       (varQ),a
  30++DA08             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  30++DA08 2A 23 C0    >               ld       hl,(UBnkrotmatNosevY)
  30++DA0B 22 26 92    >               ld       (varR),hl
  30++DA0E             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  30++DA0E 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ)
  30++DA11 32 C8 91    >               ld       (varP),a
  30++DA14 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  30++DA17 EE 80       >                        xor $80                             ;
  30++DA19 CD C2 9F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  30++DA1C ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  30++DA20             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  30++DA20 2A 25 C0    >               ld       hl,(UBnkrotmatNosevZ)
  30++DA23 22 26 92    >               ld       (varR),hl
  30++DA26 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  30++DA29 CD C2 9F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  30++DA2C ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  31++DA30 C9                                   ret
  32++DA31              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  32++DA31             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  32++DA31 3A D3 91    >               ld       a,(BETA)
  32++DA34 32 25 92    >               ld       (varQ),a
  32++DA37             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  32++DA37 2A 17 C0    >               ld       hl,(UBnkrotmatSidevY)
  32++DA3A 22 26 92    >               ld       (varR),hl
  32++DA3D             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  32++DA3D 3A 19 C0    >               ld       a,(UBnkrotmatSidevZ)
  32++DA40 32 C8 91    >               ld       (varP),a
  32++DA43 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  32++DA46 EE 80       >                        xor $80                             ;
  32++DA48 CD C2 9F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  32++DA4B ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  32++DA4F             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  32++DA4F 2A 19 C0    >               ld       hl,(UBnkrotmatSidevZ)
  32++DA52 22 26 92    >               ld       (varR),hl
  32++DA55 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  32++DA58 CD C2 9F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  32++DA5B ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  33++DA5F C9                                   ret
  34++DA60              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  34++DA60             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  34++DA60 3A D3 91    >               ld       a,(BETA)
  34++DA63 32 25 92    >               ld       (varQ),a
  34++DA66             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  34++DA66 2A 1D C0    >               ld       hl,(UBnkrotmatRoofvY)
  34++DA69 22 26 92    >               ld       (varR),hl
  34++DA6C             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  34++DA6C 3A 1F C0    >               ld       a,(UBnkrotmatRoofvZ)
  34++DA6F 32 C8 91    >               ld       (varP),a
  34++DA72 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  34++DA75 EE 80       >                        xor $80                             ;
  34++DA77 CD C2 9F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  34++DA7A ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  34++DA7E             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  34++DA7E 2A 1F C0    >               ld       hl,(UBnkrotmatRoofvZ)
  34++DA81 22 26 92    >               ld       (varR),hl
  34++DA84 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  34++DA87 CD C2 9F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  34++DA8A ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  35++DA8E C9                                   ret
  36++DA8F
  37++DA8F
  38++DA8F              APPequPosPlusAPP:       MACRO    Position, PositionSign
  39++DA8F ~                                    push    bc
  40++DA8F ~                                    ld      c,a                         ; save original value of a into c
  41++DA8F ~                                    ld      a,(PositionSign)
  42++DA8F ~                                    ld      b,a
  43++DA8F ~                                    ld      a,c
  44++DA8F ~                                    xor     b                           ; a = a xor x postition sign
  45++DA8F ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  46++DA8F ~            ; Signs are the same to we just add and take which ever sign
  47++DA8F ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  48++DA8F ~                                    ld      hl,(Position)
  49++DA8F ~                                    add     hl,de
  50++DA8F ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  51++DA8F ~                                    ld      a,c                         ; and a = original sign as they were both the same
  52++DA8F ~                                    pop     bc
  53++DA8F ~                                    ret
  54++DA8F ~            ; Signs are opposite so we subtract
  55++DA8F ~            .MV50:                  ld      de,(varPp1)
  56++DA8F ~                                    ld      hl,(Position)
  57++DA8F ~                                    or      a
  58++DA8F ~                                    sbc     hl,de
  59++DA8F ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  60++DA8F ~                                    ld      a,c                         ; get back the original sign
  61++DA8F ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  62++DA8F ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++DA8F ~                                    pop     bc
  64++DA8F ~                                    ret
  65++DA8F ~            .MV51:                  NegHL
  66++DA8F ~                                    ld      (varPp1),hl
  67++DA8F ~                                    ld      a,c                         ; the original sign will still be good
  68++DA8F ~                                    pop     bc
  69++DA8F ~                                    ret
  70++DA8F                                      ENDM
  71++DA8F
  72++DA8F
  73++DA8F              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  73++DA8F C5          >                        push    bc
  73++DA90 4F          >                        ld      c,a                         ; save original value of a into c
  73++DA91 3A 0E C0    >                        ld      a,(UBnKxsgn)
  73++DA94 47          >                        ld      b,a
  73++DA95 79          >                        ld      a,c
  73++DA96 A8          >                        xor     b                           ; a = a xor x postition sign
  73++DA97 FA A8 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  73++DA9A             >; Signs are the same to we just add and take which ever sign
  73++DA9A ED 5B C9 91 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  73++DA9E 2A 0C C0    >                        ld      hl,(UBnKxlo)
  73++DAA1 19          >                        add     hl,de
  73++DAA2 22 C9 91    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  73++DAA5 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  73++DAA6 C1          >                        pop     bc
  73++DAA7 C9          >                        ret
  73++DAA8             >; Signs are opposite so we subtract
  73++DAA8 ED 5B C9 91 >.MV50:                  ld      de,(varPp1)
  73++DAAC 2A 0C C0    >                        ld      hl,(UBnKxlo)
  73++DAAF B7          >                        or      a
  73++DAB0 ED 52       >                        sbc     hl,de
  73++DAB2 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  73++DAB4 79          >                        ld      a,c                         ; get back the original sign
  73++DAB5 22 C9 91    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  73++DAB8 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  73++DABA C1          >                        pop     bc
  73++DABB C9          >                        ret
  73++DABC             >.MV51:                  NegHL
  73++DABC AF          >                    xor a
  73++DABD 95          >                    sub l
  73++DABE 6F          >                    ld l,a
  73++DABF 9F          >                    sbc a,a
  73++DAC0 94          >                    sub h
  73++DAC1 67          >                    ld h,a
  73++DAC2 22 C9 91    >                        ld      (varPp1),hl
  73++DAC5 79          >                        ld      a,c                         ; the original sign will still be good
  73++DAC6 C1          >                        pop     bc
  73++DAC7 C9          >                        ret
  74++DAC8
  75++DAC8              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  75++DAC8 C5          >                        push    bc
  75++DAC9 4F          >                        ld      c,a                         ; save original value of a into c
  75++DACA 3A 11 C0    >                        ld      a,(UBnKysgn)
  75++DACD 47          >                        ld      b,a
  75++DACE 79          >                        ld      a,c
  75++DACF A8          >                        xor     b                           ; a = a xor x postition sign
  75++DAD0 FA E1 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  75++DAD3             >; Signs are the same to we just add and take which ever sign
  75++DAD3 ED 5B C9 91 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  75++DAD7 2A 0F C0    >                        ld      hl,(UBnKylo)
  75++DADA 19          >                        add     hl,de
  75++DADB 22 C9 91    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  75++DADE 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  75++DADF C1          >                        pop     bc
  75++DAE0 C9          >                        ret
  75++DAE1             >; Signs are opposite so we subtract
  75++DAE1 ED 5B C9 91 >.MV50:                  ld      de,(varPp1)
  75++DAE5 2A 0F C0    >                        ld      hl,(UBnKylo)
  75++DAE8 B7          >                        or      a
  75++DAE9 ED 52       >                        sbc     hl,de
  75++DAEB 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  75++DAED 79          >                        ld      a,c                         ; get back the original sign
  75++DAEE 22 C9 91    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  75++DAF1 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  75++DAF3 C1          >                        pop     bc
  75++DAF4 C9          >                        ret
  75++DAF5             >.MV51:                  NegHL
  75++DAF5 AF          >                    xor a
  75++DAF6 95          >                    sub l
  75++DAF7 6F          >                    ld l,a
  75++DAF8 9F          >                    sbc a,a
  75++DAF9 94          >                    sub h
  75++DAFA 67          >                    ld h,a
  75++DAFB 22 C9 91    >                        ld      (varPp1),hl
  75++DAFE 79          >                        ld      a,c                         ; the original sign will still be good
  75++DAFF C1          >                        pop     bc
  75++DB00 C9          >                        ret
  76++DB01
  77++DB01              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  77++DB01 C5          >                        push    bc
  77++DB02 4F          >                        ld      c,a                         ; save original value of a into c
  77++DB03 3A 14 C0    >                        ld      a,(UBnKzsgn)
  77++DB06 47          >                        ld      b,a
  77++DB07 79          >                        ld      a,c
  77++DB08 A8          >                        xor     b                           ; a = a xor x postition sign
  77++DB09 FA 1A DB    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  77++DB0C             >; Signs are the same to we just add and take which ever sign
  77++DB0C ED 5B C9 91 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  77++DB10 2A 12 C0    >                        ld      hl,(UBnKzlo)
  77++DB13 19          >                        add     hl,de
  77++DB14 22 C9 91    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  77++DB17 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  77++DB18 C1          >                        pop     bc
  77++DB19 C9          >                        ret
  77++DB1A             >; Signs are opposite so we subtract
  77++DB1A ED 5B C9 91 >.MV50:                  ld      de,(varPp1)
  77++DB1E 2A 12 C0    >                        ld      hl,(UBnKzlo)
  77++DB21 B7          >                        or      a
  77++DB22 ED 52       >                        sbc     hl,de
  77++DB24 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  77++DB26 79          >                        ld      a,c                         ; get back the original sign
  77++DB27 22 C9 91    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  77++DB2A EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  77++DB2C C1          >                        pop     bc
  77++DB2D C9          >                        ret
  77++DB2E             >.MV51:                  NegHL
  77++DB2E AF          >                    xor a
  77++DB2F 95          >                    sub l
  77++DB30 6F          >                    ld l,a
  77++DB31 9F          >                    sbc a,a
  77++DB32 94          >                    sub h
  77++DB33 67          >                    ld h,a
  77++DB34 22 C9 91    >                        ld      (varPp1),hl
  77++DB37 79          >                        ld      a,c                         ; the original sign will still be good
  77++DB38 C1          >                        pop     bc
  77++DB39 C9          >                        ret
  78++DB3A
  79++DB3A              ; rollWork holds Alpha intermidate results
  80++DB3A 00 00 00     rollWork      DS 3
  81++DB3D              rollWorkp1    equ rollWork
  82++DB3D              rollWorkp2    equ rollWork+1
  83++DB3D              rollWorkp3    equ rollWork+2
  84++DB3D
  85++DB3D              ;----------------------------------------------------------------------------------------------------------------------------------
  86++DB3D              ; based on MVEIT part 4 of 9
  87++DB3D 3A E2 91     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  88++DB40 21 D5 91                             ld      hl,BET1                     ; and pitch
  89++DB43 B6                                   or      (hl)
  90++DB44 CA FE DB                             jp      z,.NoRotation               ; if both zero then don't compute
  91++DB47                                      ;break
  92++DB47              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  93++DB47 5F                                   ld      e,a                         ; e = roll magnitude
  94++DB48 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  95++DB4B CD 1E A0                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  96++DB4E 32 CA 91                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  97++DB51 22 C8 91                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  98++DB54              ; A = Flip sign
  99++DB54 3A E4 91                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
 100++DB57 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
 101++DB5A AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
 102++DB5B              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
 103++DB5B CD C8 DA                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
 104++DB5E              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
 105++DB5E 32 3C DB                             ld      (rollWorkp3),a               ; k2+3 = sign of result
 106++DB61 22 3A DB                             ld      (rollWorkp1),hl             ; k2+1,2 = result
 107++DB64              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
 108++DB64 3A D5 91                             ld      a,(BET1)                    ; a = magnitude of pitch
 109++DB67 5F                                   ld      e,a
 110++DB68 CD 1E A0                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
 111++DB6B 32 CA 91                             ld      (varPp2),a                   ; save highest byte in P2
 112++DB6E 22 C8 91                             ld      (varP),hl
 113++DB71              ; Fetch sign of previosu cal and xor with BETA inverted
 114++DB71 3A 3C DB                             ld      a,(rollWorkp3)
 115++DB74 5F                                   ld      e,a
 116++DB75 3A D6 91                             ld      a,(BET2)
 117++DB78 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 118++DB79              ; Z = P[210] =Z + APP
 119++DB79 CD 01 DB                             call    APPequZPosPlusAPP           ; MVT6
 120++DB7C 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 121++DB7F 22 12 C0                             ld      (UBnKzlo),hl
 122++DB82              ; A[P1]P[0] = z * Beta
 123++DB82 3A D5 91                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 124++DB85 5F                                   ld      e,a
 125++DB86 CD 1E A0                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 126++DB89 32 CA 91                             ld      (varPp2),a                  ; P2 = high byte of result
 127++DB8C 22 C8 91                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 128++DB8F              ; A xor BET2,Zsign
 129++DB8F 3A 3C DB                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 130++DB92 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 131++DB95 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 132++DB96 3A D6 91                             ld      a,(BET2)                    ;
 133++DB99 AB                                   xor     e                           ;
 134++DB9A 5F                                   ld      e,a                         ; now xor it with z sign too
 135++DB9B 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 136++DB9E AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 137++DB9F F2 AE DB                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 138++DBA2 2A C9 91                             ld      hl,(varPp1)
 139++DBA5 ED 5B 3A DB                          ld      de,(rollWorkp1)
 140++DBA9 B7                                   or      a
 141++DBAA 19                                   add     hl,de
 142++DBAB C3 C8 DB                             jp      .MV44
 143++DBAE 2A 3A DB     .MV43:                  ld      hl,(rollWorkp1)
 144++DBB1 ED 5B C9 91                          ld      de,(varPp1)
 145++DBB5 B7                                   or      a
 146++DBB6 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 147++DBB8 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 148++DBBA                                      NegHL
 148++DBBA AF          >                    xor a
 148++DBBB 95          >                    sub l
 148++DBBC 6F          >                    ld l,a
 148++DBBD 9F          >                    sbc a,a
 148++DBBE 94          >                    sub h
 148++DBBF 67          >                    ld h,a
 149++DBC0 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit
 150++DBC3 EE 80                                xor     SignOnly8Bit
 151++DBC5 32 11 C0                             ld      (UBnKysgn),a
 152++DBC8              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 153++DBC8 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 154++DBCB 3A E2 91                             ld      a,(ALP1)                    ; get roll magnitude
 155++DBCE 5F                                   ld      e,a
 156++DBCF 2A 0F C0                             ld      hl,(UBnKylo)
 157++DBD2 CD 1E A0                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 158++DBD5 32 CA 91                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 159++DBD8 22 C8 91                             ld      (varP),hl
 160++DBDB 3A E3 91                             ld      a,(ALP2)
 161++DBDE 5F                                   ld      e,a
 162++DBDF 3A 11 C0                             ld      a,(UBnKysgn)
 163++DBE2 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 164++DBE3 CD 8F DA                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 165++DBE6 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 166++DBE9 22 0C C0                             ld      (UBnKxlo),hl
 167++DBEC                                      ;break
 168++DBEC                                      ; if its not a sun then apply to local orientation
 169++DBEC
 170++DBEC CD 75 D9                             call    ApplyMyRollToNosev
 171++DBEF CD A4 D9                             call    ApplyMyRollToSidev
 172++DBF2 CD D3 D9                             call    ApplyMyRollToRoofv
 173++DBF5 CD 02 DA                             call    ApplyMyPitchToNosev
 174++DBF8 CD 31 DA                             call    ApplyMyPitchToSidev
 175++DBFB CD 60 DA                             call    ApplyMyPitchToRoofv
 176++DBFE 3A 21 92     .NoRotation:            ld      a,(DELTA)                   ; get speed
 177++DC01 16 00                                ld      d,0
 178++DC03 5F                                   ld      e,a                         ; de = speed in low byte
 179++DC04 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 180++DC07 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 181++DC0A 47                                   ld      b,a                         ;
 182++DC0B 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 183++DC0D CD 6D CB                             call    ADDHLDESignBC               ; update speed
 184++DC10 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 185++DC13 32 14 C0                             ld      (UBnKzsgn),a                ;
 186++DC16 C9                                   ret
# file closed: ././Universe/ApplyMyRollAndPitch.asm
1470+ DC17                          INCLUDE "./Universe/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/ApplyShipRollAndPitch.asm
   1++DC17              ;----------------------------------------------------------------------------------------------------------------------------------
   2++DC17              ; based on MVEIT part 4 of 9
   3++DC17 3A 2A C0     ApplyShipRollAndPitch:  ld      a,(rotZCounter)             ; get roll magnitudeShip Pitch counter
   4++DC1A 47                                   ld      b,a
   5++DC1B E6 80                                and     SignOnly8Bit
   6++DC1D 4F                                   ld      c,a
   7++DC1E 32 31 C0                             ld      (univRAT2),a                ; get sign of pitch
   8++DC21 78                                   ld      a,b
   9++DC22 E6 7F                                and     SignMask8Bit                ; and magnitude
  10++DC24 28 3A                                jr      z,.ProcessRoll
  11++DC26 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++DC28 28 01                                jr      z,.NoPitchDamping
  13++DC2A 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++DC2B 32 32 C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++DC2E 47                                   ld      b,a
  16++DC2F B1                                   or      c                           ; bring sign back in
  17++DC30 32 2A C0                             ld      (rotZCounter),a             ; rotZCounter = updated value
  18++DC33 21 1B C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++DC36 22 B1 91                             ld	    (varAxis1),hl
  20++DC39 21 21 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++DC3C 22 B3 91                             ld	    (varAxis2),hl
  22++DC3F CD 32 CC                             call    MVS5RotateAxis
  23++DC42 21 1D C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++DC45 22 B1 91                             ld	    (varAxis1),hl
  25++DC48 21 23 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++DC4B 22 B3 91                             ld	    (varAxis2),hl
  27++DC4E CD 32 CC                             call    MVS5RotateAxis
  28++DC51 21 1F C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++DC54 22 B1 91                             ld	    (varAxis1),hl
  30++DC57 21 25 C0                             ld	    hl,UBnkrotmatNosevZ
  31++DC5A 22 B3 91                             ld	    (varAxis2),hl
  32++DC5D CD 32 CC                             call    MVS5RotateAxis
  33++DC60 3A 29 C0     .ProcessRoll:           ld      a,(rotXCounter)
  34++DC63 47                                   ld      b,a
  35++DC64 E6 80                                and     SignOnly8Bit
  36++DC66 4F                                   ld      c,a
  37++DC67 32 31 C0                             ld      (univRAT2),a                ; get sign of pitch
  38++DC6A 78                                   ld      a,b
  39++DC6B E6 7F                                and     SignMask8Bit                ; and magnitude
  40++DC6D C8                                   ret     z                           ; if no work to do then exit
  41++DC6E FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++DC70 28 01                                jr      z,.NoRollDamping
  43++DC72 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++DC73 32 32 C0     .NoRollDamping          ld      (univRAT2Val),a
  45++DC76 47                                   ld      b,a
  46++DC77 B1                                   or      c                           ; bring sign back in
  47++DC78 32 29 C0                             ld      (rotXCounter),a             ; rotZCounter = updated value
  48++DC7B 21 1B C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++DC7E 22 B1 91                             ld	    (varAxis1),hl
  50++DC81 21 15 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++DC84 22 B3 91                             ld	    (varAxis2),hl
  52++DC87 CD 32 CC                             call    MVS5RotateAxis
  53++DC8A 21 1D C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++DC8D 22 B1 91                             ld	    (varAxis1),hl
  55++DC90 21 17 C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++DC93 22 B3 91                             ld	    (varAxis2),hl
  57++DC96 CD 32 CC                             call    MVS5RotateAxis
  58++DC99 21 1F C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++DC9C 22 B1 91                             ld	    (varAxis1),hl
  60++DC9F 21 19 C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++DCA2 22 B3 91                             ld	    (varAxis2),hl
  62++DCA5 CD 32 CC                             call    MVS5RotateAxis
  63++DCA8 C9                                   ret
  64++DCA9
# file closed: ././Universe/ApplyShipRollAndPitch.asm
1471+ DCA9              ; .....................................................
1472+ DCA9              ; Process Nodes does the following:
1473+ DCA9              ; for each node:
1474+ DCA9              ;     see if node >
1475+ DCA9 00           PNXX20DIV6          DB      0
1476+ DCAA 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1477+ DCAC 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1478+ DCAE 00           PNLASTNORM          DB      0
1479+ DCAF              ProcessNodes:
1480+ DCAF AF               xor     a
1481+ DCB0 32 F4 C2         ld      (UbnkLineArrayLen),a
1482+ DCB3 CD C1 CF         call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1483+ DCB6 CD 33 8A         call    ScaleXX16Matrix197               ;#02; Normalise XX16
1484+ DCB9 CD 77 D2         call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1485+ DCBC CD 44 D1         call    InverseXX16                      ;#11; Invert rotation matrix
1486+ DCBF 21 1A C3         ld      hl,UBnkHullVerticies
1487+ DCC2 3A 0A C3         ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1488+ DCC5              GetActualVertexCount:
1489+ DCC5 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1490+ DCC6 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1491+ DCC7 16 06            ld      d,6
1492+ DCC9 CD B7 A1         call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1493+ DCCC 41               ld      b,c                              ; c = number of vertices
1494+ DCCD FD 21 C2 C0      ld      iy,UBnkNodeArray
1495+ DCD1              LL48:
1496+ DCD1              PointLoop:
1497+ DCD1 C5           	push	bc                                  ; save counters
1498+ DCD2 E5           	push	hl                                  ; save verticies list pointer
1499+ DCD3 FD E5        	push	iy                                  ; save Screen plot array pointer
1500+ DCD5 78               ld      a,b
1501+ DCD6                  ;break
1502+ DCD6 CD 9B D8         call    CopyNodeToXX15                      ; copy verices at hl to xx15
1503+ DCD9 3A 79 C0     	ld		a,(UBnkXScaledSign)
1504+ DCDC CD 59 89     	call    XX12EquNodeDotOrientation
1505+ DCDF CD F8 CF     	call    TransposeXX12ByShipToXX15
1506+ DCE2 CD 75 D0     	call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1507+ DCE5 FD E1        	pop		iy                                  ; get back screen plot array pointer
1508+ DCE7 CD 1E D9     	call    ProjectNodeToEye                     ; set up screen plot list entry
1509+ DCEA                 ; ld      hl,UbnkLineArrayLen
1510+ DCEA                ;  inc     (hl)                                ; another node done
1511+ DCEA              ReadyForNextPoint:
1512+ DCEA FD E5        	push	iy                                  ; copy screen plot pointer to hl
1513+ DCEC E1           	pop		hl
1514+ DCED 3E 04        	ld		a,4
1515+ DCEF ED 31        	add		hl,a
1516+ DCF1 E5           	push	hl                                  ; write it back at iy + 4
1517+ DCF2 FD E1        	pop		iy								    ; and put it in iy again
1518+ DCF4 E1           	pop		hl                                  ; get hl back as vertex list
1519+ DCF5 3E 06        	ld		a,6
1520+ DCF7 ED 31        	add 	hl,a                                ; and move to next vertex
1521+ DCF9 C1           	pop		bc                                  ; get counter back
1522+ DCFA 10 D5        	djnz	PointLoop
1523+ DCFC              ; ......................................................
1524+ DCFC C9               ret
1525+ DCFD              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1526+ DCFD              ;  Entering Here we have the following:
1527+ DCFD              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1528+ DCFD              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1529+ DCFD              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1530+ DCFD              ;
1531+ DCFD              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1532+ DCFD              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1533+ DCFD              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1534+ DCFD              ;--------------------------------------------------------------------------------------------------------
1535+ DCFD              AddLaserBeamLine:
1536+ DCFD              ; this code is a bag of shit and needs re-writing
1537+ DCFD              GetGunVertexNode:
1538+ DCFD 3A 08 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1539+ DD00 21 C2 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1540+ DD03 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1541+ DD05 FD 2E 00             ld          iyl,0
1542+ DD08              MoveX1PointToXX15:
1543+ DD08 4E                   ld          c,(hl)                              ;
1544+ DD09 23                   inc         hl
1545+ DD0A 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1546+ DD0B 23                   inc         hl
1547+ DD0C ED 43 78 C0          ld          (UBnkX1),bc
1548+ DD10 0C                   inc         c
1549+ DD11 C8                   ret         z                                   ; was c 255?
1550+ DD12 04                   inc         b
1551+ DD13 C8                   ret         z                                   ; was c 255?
1552+ DD14              MoveY1PointToXX15:
1553+ DD14 4E                   ld          c,(hl)                              ;
1554+ DD15 23                   inc         hl
1555+ DD16 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1556+ DD17 23                   inc         hl
1557+ DD18 ED 43 7A C0          ld          (UBnkY1),bc
1558+ DD1C              SetX2PointToXX15:
1559+ DD1C 01 00 00             ld          bc,0                                ; set X2 to 0
1560+ DD1F ED 43 7C C0          ld          (UBnkX2),bc
1561+ DD23 3A 12 C0             ld          a,(UBnKzlo)
1562+ DD26 4F                   ld          c,a
1563+ DD27              SetY2PointToXX15:
1564+ DD27 ED 43 7E C0          ld          (UBnkY2),bc                         ; set Y2to 0
1565+ DD2B 3A 0E C0             ld          a,(UBnKxsgn)
1566+ DD2E                      JumpOnBitClear a,7,LL74SkipDec
1566+ DD2E CB 7F       >                        bit 	7,a
1566+ DD30 CA 38 DD    >                        jp      z,LL74SkipDec
1567+ DD33              LL74DecX2:
1568+ DD33 3E FF                ld          a,$FF
1569+ DD35 32 7C C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1570+ DD38              LL74SkipDec:
1571+ DD38 CD 6B CD             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1572+ DD3B 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1573+ DD3D              ; Here we are usign hl to replace VarU as index
1574+ DD3D 2A 28 92             ld          hl,(varU16)
1575+ DD40 3A 78 C0             ld          a,(UBnKx1Lo)
1576+ DD43 77                   ld          (hl),a
1577+ DD44 23                   inc         hl
1578+ DD45 3A 7A C0             ld          a,(UbnKy1Lo)
1579+ DD48 77                   ld          (hl),a
1580+ DD49 23                   inc         hl
1581+ DD4A 3A 7C C0             ld          a,(UBnkX2Lo)
1582+ DD4D 77                   ld          (hl),a
1583+ DD4E 23                   inc         hl
1584+ DD4F 3A 7E C0             ld          a,(UbnKy2Lo)
1585+ DD52 77                   ld          (hl),a
1586+ DD53 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1587+ DD55 23                   inc         hl
1588+ DD56 FD 2C                inc         iyl                                 ; ready for next byte
1589+ DD58 22 28 92             ld          (varU16),hl
1590+ DD5B C9                   ret
1591+ DD5C
1592+ DD5C                  INCLUDE "PrepLines.asm"
# file opened: ./Universe/PrepLines.asm
   1++DD5C              ;--------------------------------------------------------------------------------------------------------
   2++DD5C                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DD5C              ;--------------------------------------------------------------------------------------------------------
   2++DD5C              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD5C 21 C2 C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD5F ED 31                                add         hl,a                                ; hl = address of Node
   5++DD61 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD62 11 78 C0                             ld          de,UBnkX1
   7++DD65 ED A0                                ldi                                             ; x1 lo
   8++DD67 ED A0                                ldi                                             ; x1 hi
   9++DD69 ED A0                                ldi                                             ; y1 lo
  10++DD6B ED A0                                ldi                                             ; y1 hi
  11++DD6D C9                                   ret
  12++DD6E
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DD6E                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DD6E              ;--------------------------------------------------------------------------------------------------------
   2++DD6E              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD6E 21 C2 C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD71 ED 31                                add         hl,a                                ; hl = address of Node
   5++DD73 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD74 11 7C C0                             ld          de,UBnkX2
   7++DD77 ED A0                                ldi                                             ; x1 lo
   8++DD79 ED A0                                ldi                                             ; x1 hi
   9++DD7B ED A0                                ldi                                             ; y1 lo
  10++DD7D ED A0                                ldi                                             ; y1 hi
  11++DD7F C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DD80                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DD80              ;--------------------------------------------------------------------------------------------------------
   2++DD80              GetFaceAtA:         MACRO
   3++DD80 ~                                ld          hl,UbnkFaceVisArray
   4++DD80 ~                                add         hl,a
   5++DD80 ~                                ld          a,(hl)                              ; get face visibility
   6++DD80                                  ENDM
   7++DD80
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DD80              ;--------------------------------------------------------------------------------------------------------
   6++DD80              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DD80               ;   DEFINE NOBACKFACECULL 1
   8++DD80 00           PLEDGECTR           DB          0
   9++DD81
  10++DD81              PrepLines:
  11++DD81              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DD81
  13++DD81              ; TODO add in onced DOEXP is finished
  14++DD81              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DD81              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DD81              ;        or          8
  17++DD81              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DD81              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DD81              ;EE31:                                                   ; no explosion
  20++DD81              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DD81              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DD81              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DD81              ;
  24++DD81              ;--------------------------------------------------------------------------------------------------------
  25++DD81              InitialiseLineRead:
  26++DD81                      ;break
  27++DD81                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DD81 AF          >               xor      a
  27++DD82 32 F4 C2    >               ld       (UbnkLineArrayLen),a
  28++DD85                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DD85 AF          >               xor      a
  28++DD86 32 F5 C2    >               ld       (UbnkLineArrayBytes),a
  29++DD89                      ldWriteZero PLEDGECTR
  29++DD89 AF          >               xor      a
  29++DD8A 32 80 DD    >               ld       (PLEDGECTR),a
  30++DD8D 3A 0B C3             ld          a,(EdgeCountAddr)
  31++DD90 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DD92 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DD95 21 02 C2             ld          hl,UbnkLineArray                    ; head of array
  34++DD98 22 28 92             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DD9B                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DD9B 3A 0B C3    >               ld       a,(EdgeCountAddr)
  35++DD9E 32 2C 92    >               ld       (XX17),a
  36++DDA1 3A 2B C0             ld          a,(UBnkexplDsp)                     ; get explosion status
  37++DDA4                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DDA4 CB 77       >                        bit 	6,a
  37++DDA6 CA AE DD    >                        jp      z,CalculateNewLines
  38++DDA9 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DDAB 32 2B C0             ld          (UBnkexplDsp),a                     ; INWK+31
  40++DDAE              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DDAE              ; NOw we can calculate hull after including laser line
  42++DDAE              CalculateNewLines:
  43++DDAE              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DDAE              CheckEdgesForVisibility:
  45++DDAE 21 46 C4             ld          hl,UBnkHullEdges
  46++DDB1                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DDB1 22 CD 91             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DDB4 3A 07 C3             ld          a,(LineX4Addr)
  49++DDB7 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DDB8              LL75Loop:                                               ; count Visible edges
  51++DDB8              IsEdgeInVisibilityRange:
  52++DDB8 2A CD 91             ld          hl,(varV)
  53++DDBB E5                   push        hl
  54++DDBC FD E1                pop         iy
  55++DDBE                      IFDEF NOBACKFACECULL
  56++DDBE ~                        jp          VisibileEdge; DEBUGTODO
  57++DDBE                      ENDIF
  58++DDBE 3A BD 91             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DDC1 57                   ld          d,a                                 ; d holds copy of XX4
  60++DDC2              ; Get Edge Byte 0
  61++DDC2 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DDC5                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DDC5 BA          >                        cp      d
  62++DDC6 DA 19 DE    >                        jp		c, LL78EdgeNotVisible
  63++DDC9              EdgeMayBeVisibile:
  64++DDC9              ; Get Edge Byte 1
  65++DDC9              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DDC9 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DDCC 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DDCD E6 0F                and         $0F                                 ;
  69++DDCF                      GetFaceAtA
  69++DDCF 21 A4 C0    >                    ld          hl,UbnkFaceVisArray
  69++DDD2 ED 31       >                    add         hl,a
  69++DDD4 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DDD5              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DDD5                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
  71++DDD5 FE 00       >				cp	0
  71++DDD7 C2 EB DD    >				jp	nz,VisibileEdge
  72++DDDA              IsFace2Visibile:
  73++DDDA 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DDDB ED 23                swapnib                                         ;
  75++DDDD E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DDDF E5                   push        hl
  77++DDE0                      GetFaceAtA
  77++DDE0 21 A4 C0    >                    ld          hl,UbnkFaceVisArray
  77++DDE3 ED 31       >                    add         hl,a
  77++DDE5 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DDE6 E1                   pop         hl
  79++DDE7                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
  79++DDE7 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DDE8 CA 19 DE    >				jp	z, LL78EdgeNotVisible
  80++DDEB              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DDEB              ;LL79--Visible edge--------------------------------------
  82++DDEB              ; Get Edge Byte 2
  83++DDEB FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DDEE CD 5C DD             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DDF1 FD 7E 03             ld          a,(IY+3)
  86++DDF4 CD 6E DD             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DDF7 CD 6B CD             call        ClipLine
  88++DDFA 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DDFC              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DDFC ED 5B 28 92          ld          de,(varU16)                         ; clipped edges heap address
  91++DE00 21 78 C0             ld          hl,UBnkNewX1
  92++DE03                      FourLDIInstrunctions
  92++DE03 ED A0       >                        ldi
  92++DE05 ED A0       >                        ldi
  92++DE07 ED A0       >                        ldi
  92++DE09 ED A0       >                        ldi
  93++DE0B ED 53 28 92          ld          (varU16),de                         ; update U16 with current address
  94++DE0F 21 F4 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DE12 34                   inc         (hl)
  96++DE13 7E                   ld          a,(hl)
  97++DE14                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DE14 FE 32       >                        cp     LineArraySize
  97++DE16 D2 2F DE    >                        jp		nc,CompletedLineGeneration
  98++DE19              ; If we hit here we skip the write of line arryay u16
  99++DE19              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DE19              LL78:
 101++DE19 2A CD 91             ld          hl,(varV)                           ; varV is current edge address
 102++DE1C 3E 04                ld          a,4
 103++DE1E ED 31                add         hl,a
 104++DE20 22 CD 91             ld          (varV),hl
 105++DE23 21 80 DD             ld          hl,PLEDGECTR                        ;
 106++DE26 34                   inc         (hl)                                ;
 107++DE27 7E                   ld          a,(hl)                              ; current edge index ++
 108++DE28                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DE28 21 2C 92    >                  ld    hl,XX17
 108++DE2B BE          >                  cp    (hl)
 108++DE2C C2 B8 DD    >                  jp      nz,LL75Loop
 109++DE2F              CompletedLineGeneration:
 110++DE2F              LL81:
 111++DE2F              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DE2F 3A F4 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DE32 CB 27                sla         a
 114++DE34 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DE36 32 F5 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DE39              ExitEdgeDataLoop:
 117++DE39 C9                   ret
 118++DE3A
# file closed: ./Universe/PrepLines.asm
1593+ DE3A
1594+ DE3A              UnivBankSize  EQU $ - StartOfUniv
1595+ DE3A
# file closed: ./Universe/univ_ship_data.asm
1322  DE3A
1323  DE3A                  SLOT    UniverseBankAddr
1324  DE3A                  PAGE    BankUNIVDATA1
1325  DE3A              	ORG	UniverseBankAddr,BankUNIVDATA1
1326  C000 FF           UNIVDATABlock1      DB $FF
1327  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1328  E000
1329  E000                  SLOT    UniverseBankAddr
1330  E000                  PAGE    BankUNIVDATA2
1331  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1332  C000 FF           UNIVDATABlock2      DB $FF
1333  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1334  E000
1335  E000                  SLOT    UniverseBankAddr
1336  E000                  PAGE    BankUNIVDATA3
1337  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1338  C000 FF           UNIVDATABlock3      DB $FF
1339  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1340  E000
1341  E000                  SLOT    UniverseBankAddr
1342  E000                  PAGE    BankUNIVDATA4
1343  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1344  C000 FF           UNIVDATABlock4      DB $FF
1345  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1346  E000
1347  E000                  SLOT    UniverseBankAddr
1348  E000                  PAGE    BankUNIVDATA5
1349  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1350  C000 FF           UNIVDATABlock5      DB $FF
1351  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1352  E000
1353  E000                  SLOT    UniverseBankAddr
1354  E000                  PAGE    BankUNIVDATA6
1355  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1356  C000 FF           UNIVDATABlock6      DB $FF
1357  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1358  E000
1359  E000                  SLOT    UniverseBankAddr
1360  E000                  PAGE    BankUNIVDATA7
1361  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1362  C000 FF           UNIVDATABlock7      DB $FF
1363  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1364  E000
1365  E000                  SLOT    UniverseBankAddr
1366  E000                  PAGE    BankUNIVDATA8
1367  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1368  C000 FF           UNIVDATABlock8      DB $FF
1369  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1370  E000
1371  E000                  SLOT    UniverseBankAddr
1372  E000                  PAGE    BankUNIVDATA8
1373  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1374  C000 FF           UNIVDATABlock9      DB $FF
1375  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1376  E000
1377  E000                  SLOT    UniverseBankAddr
1378  E000                  PAGE    BankUNIVDATA10
1379  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1380  C000 FF           UNIVDATABlock10     DB $FF
1381  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1382  E000
1383  E000                  SLOT    UniverseBankAddr
1384  E000                  PAGE    BankUNIVDATA11
1385  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1386  C000 FF           UNIVDATABlock11     DB $FF
1387  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1388  E000
1389  E000                  SLOT    UniverseBankAddr
1390  E000                  PAGE    BankUNIVDATA12
1391  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1392  C000 FF           UNIVDATABlock12     DB $FF
1393  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1394  E000
1395  E000                  SLOT    GalaxyDataAddr
1396  E000                  PAGE    BankGalaxyData0
1397  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1398  E000                  INCLUDE "./Universe/galaxy_data.asm"
# file opened: ./Universe/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 BE 99 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D 73 9C 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 A3 99 B4 99                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 BA 99 00 00
 316+ F41D CA 99 D1 99                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 BE 99 C3 99                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D A9 99 B0 99                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 D8 99 DF 99                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D 3D 9A D8 99                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 0B 9A 00 00
 321+ F445 17 9A 1F 9A                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D 34 9A 7B 9C                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 8D 99 EA 99                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 E4 99 00 00
 324+ F45D 9E 99 EA 99                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 E4 99 00 00
 325+ F465 99 99 EA 99                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 E4 99 00 00
 326+ F46D 93 99 EA 99                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 E4 99 00 00
 327+ F475 8D 99 F0 99                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 E4 99 00 00
 328+ F47D 9E 99 F0 99                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 E4 99 00 00
 329+ F485 99 99 F0 99                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 E4 99 00 00
 330+ F48D 93 99 F0 99                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 E4 99 00 00
 331+ F495 8D 99 FD 99                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 E4 99 00 00
 332+ F49D 9E 99 FD 99                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 E4 99 00 00
 333+ F4A5 99 99 FD 99                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 E4 99 00 00
 334+ F4AD 93 99 FD 99                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 E4 99 00 00
 335+ F4B5 8D 99 86 9C                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 E4 99 00 00
 336+ F4BD 9E 99 86 9C                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 E4 99 00 00
 337+ F4C5 99 99 86 9C                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 E4 99 00 00
 338+ F4CD 93 99 86 9C                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 E4 99 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD 9B 96     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD B3 96     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 B1 9E     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A 22 93                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD D2 9E     .LargeSizeName:         call	NamingLoop
 401+ F690 CD D2 9E     .SmallSizeName:         call	NamingLoop
 402+ F693 CD D2 9E                             call	NamingLoop
 403+ F696 CD D2 9E                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A 24 93     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A 25 93                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A 26 93                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A 27 93                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 28 96     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A 11 96     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A FD 92     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD 4D A0                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 11 92     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 22 93             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 22 93             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 11 92     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 11 92     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 11 92     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:  ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 2A 92                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A 2A 92                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 2A 92                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c, nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c, nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                    cp    2
1156+ FBCF D8          >                    ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      IfANotZeroGoto find_nearest_loop
1164+ FBDE FE 00       >				cp	0
1164+ FBE0 C2 6E FB    >				jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD C8 A0                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 35 93                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 35 93                             ld      (Distance),a
1229+ FC51 32 36 93                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds, this needs to chagne to galaxyresultseed or galayxworkingseed
1233+ FC55 AF           galaxy_system_under_cursor:xor     a
1234+ FC56 32 2A 92                             ld		(XSAV),a
1235+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1236+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1237+ FC60 DD E5                                push    ix
1238+ FC62 7D                                   ld      a,l
1239+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1240+ FC66 20 14                                jr      nz,.ItsNotThisX
1241+ FC68 7C                                   ld      a,h
1242+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1243+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1244+ FC6E DD E5                                push    ix
1245+ FC70 E1                                   pop     hl
1246+ FC71 11 22 93                             ld      de,WorkingSeeds
1247+ FC74 CD 86 96                             call    copy_seed
1248+ FC77 3E FF                                ld      a,$FF
1249+ FC79 DD E1                                pop     ix
1250+ FC7B C9                                   ret
1251+ FC7C E1           .ItsNotThisX:           pop     hl
1252+ FC7D ED 34 08 00                          add     hl,8
1253+ FC81 E5                                   push    hl
1254+ FC82 DD E1                                pop     ix
1255+ FC84 3A 2A 92                             ld		a,(XSAV)
1256+ FC87 3D                                   dec		a
1257+ FC88 32 2A 92                             ld      (XSAV),a
1258+ FC8B FE 00                                cp		0
1259+ FC8D C8                                   ret		z
1260+ FC8E 18 CD                                jr		.GCCounterLoop
1261+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1262+ FC90 21 11 92     SeedGalaxy:             ld      hl,SystemSeed
1263+ FC93 11 10 E0                             ld      de,galaxy_master_seed
1264+ FC96 ED A0                                ldi
1265+ FC98 ED A0                                ldi
1266+ FC9A ED A0                                ldi
1267+ FC9C ED A0                                ldi
1268+ FC9E ED A0                                ldi
1269+ FCA0 ED A0                                ldi
1270+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data
1271+ FCA6 AF                                   xor		a
1272+ FCA7 32 2A 92                             ld		(XSAV),a
1273+ FCAA DD E5        SeedGalaxyLoop:         push    ix
1274+ FCAC D1                                   pop     de
1275+ FCAD 21 11 92                             ld      hl,SystemSeed
1276+ FCB0 CD 86 96                             call    copy_seed
1277+ FCB3 DD E5                                push    ix
1278+ FCB5 E1                                   pop     hl
1279+ FCB6 ED 34 08 00                          add     hl,8
1280+ FCBA E5                                   push    hl
1281+ FCBB DD E1                                pop     ix
1282+ FCBD CD BB 96                             call    next_system_seed
1283+ FCC0 3A 2A 92                             ld		a,(XSAV)
1284+ FCC3 3D                                   dec		a
1285+ FCC4 FE 00                                cp		0
1286+ FCC6 C8                                   ret		z
1287+ FCC7 32 2A 92                             ld		(XSAV),a
1288+ FCCA 18 DE                                jr      SeedGalaxyLoop
1289+ FCCC C9                                   ret
1290+ FCCD
1291+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1292+ FCCD
# file closed: ./Universe/galaxy_data.asm
1399  FCCD
1400  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1401  FCCD
1402  FCCD
1403  FCCD                  SLOT    GalaxyDataAddr
1404  FCCD                  PAGE    BankGalaxyData1
1405  FCCD              	ORG GalaxyDataAddr, BankGalaxyData1
1406  E000 FF           GALAXYDATABlock1         DB $FF
1407  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1408  0000
1409  0000                  SLOT    GalaxyDataAddr
1410  0000                  PAGE    BankGalaxyData2
1411  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1412  E000 FF           GALAXYDATABlock2         DB $FF
1413  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1414  0000                  SLOT    GalaxyDataAddr
1415  0000                  PAGE    BankGalaxyData3
1416  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1417  E000 FF           GALAXYDATABlock3         DB $FF
1418  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1419  0000                  SLOT    GalaxyDataAddr
1420  0000                  PAGE    BankGalaxyData4
1421  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1422  E000 FF           GALAXYDATABlock4         DB $FF
1423  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1424  0000                  SLOT    GalaxyDataAddr
1425  0000                  PAGE    BankGalaxyData5
1426  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1427  E000 FF           GALAXYDATABlock5         DB $FF
1428  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1429  0000                  SLOT    GalaxyDataAddr
1430  0000                  PAGE    BankGalaxyData6
1431  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1432  E000 FF           GALAXYDATABlock6         DB $FF
1433  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1434  0000                  SLOT    GalaxyDataAddr
1435  0000                  PAGE    BankGalaxyData7
1436  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1437  E000 FF           GALAXYDATABlock7         DB $FF
1438  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1439  0000
1440  0000
1441  0000
1442  0000
1443  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1444  0000                  SAVENEX CFG  0,0,0,1
1445  0000                  SAVENEX AUTO
1446  0000                  SAVENEX CLOSE
1447  0000
# file closed: eliteNext.asm
